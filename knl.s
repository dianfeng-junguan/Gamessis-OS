
bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

ffff800000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:14
#include "kb.h"
#include "framebuffer.h"

gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
ffff800000800000:	f3 0f 1e fa          	endbr64 
ffff800000800004:	55                   	push   rbp
ffff800000800005:	48 89 e5             	mov    rbp,rsp
ffff800000800008:	41 57                	push   r15
ffff80000080000a:	53                   	push   rbx
ffff80000080000b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080000f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080000f <init_int+0xf>
ffff800000800016:	49 bb 71 2a 02 00 00 	movabs r11,0x22a71
ffff80000080001d:	00 00 00 
ffff800000800020:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    //asm volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800023:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff80000080002a:	ff ff ff 
ffff80000080002d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800031:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800036:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080003b:	48 89 c6             	mov    rsi,rax
ffff80000080003e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000800043:	49 89 df             	mov    r15,rbx
ffff800000800046:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff80000080004d:	ff ff ff 
ffff800000800050:	48 01 d8             	add    rax,rbx
ffff800000800053:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800055:	48 b8 c0 fd ff ff ff 	movabs rax,0xfffffffffffffdc0
ffff80000080005c:	ff ff ff 
ffff80000080005f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800063:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800068:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080006d:	48 89 c6             	mov    rsi,rax
ffff800000800070:	bf 01 00 00 00       	mov    edi,0x1
ffff800000800075:	49 89 df             	mov    r15,rbx
ffff800000800078:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff80000080007f:	ff ff ff 
ffff800000800082:	48 01 d8             	add    rax,rbx
ffff800000800085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800087:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff80000080008e:	ff ff ff 
ffff800000800091:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800095:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080009a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080009f:	48 89 c6             	mov    rsi,rax
ffff8000008000a2:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008000a7:	49 89 df             	mov    r15,rbx
ffff8000008000aa:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff8000008000b1:	ff ff ff 
ffff8000008000b4:	48 01 d8             	add    rax,rbx
ffff8000008000b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000b9:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff8000008000c0:	ff ff ff 
ffff8000008000c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000c7:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000cc:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008000d1:	48 89 c6             	mov    rsi,rax
ffff8000008000d4:	bf 03 00 00 00       	mov    edi,0x3
ffff8000008000d9:	49 89 df             	mov    r15,rbx
ffff8000008000dc:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff8000008000e3:	ff ff ff 
ffff8000008000e6:	48 01 d8             	add    rax,rbx
ffff8000008000e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000eb:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff8000008000f2:	ff ff ff 
ffff8000008000f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000f9:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000fe:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800103:	48 89 c6             	mov    rsi,rax
ffff800000800106:	bf 04 00 00 00       	mov    edi,0x4
ffff80000080010b:	49 89 df             	mov    r15,rbx
ffff80000080010e:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff800000800115:	ff ff ff 
ffff800000800118:	48 01 d8             	add    rax,rbx
ffff80000080011b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080011d:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff800000800124:	ff ff ff 
ffff800000800127:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080012b:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800130:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800135:	48 89 c6             	mov    rsi,rax
ffff800000800138:	bf 05 00 00 00       	mov    edi,0x5
ffff80000080013d:	49 89 df             	mov    r15,rbx
ffff800000800140:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff800000800147:	ff ff ff 
ffff80000080014a:	48 01 d8             	add    rax,rbx
ffff80000080014d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080014f:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff800000800156:	ff ff ff 
ffff800000800159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080015d:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800162:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800167:	48 89 c6             	mov    rsi,rax
ffff80000080016a:	bf 06 00 00 00       	mov    edi,0x6
ffff80000080016f:	49 89 df             	mov    r15,rbx
ffff800000800172:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff800000800179:	ff ff ff 
ffff80000080017c:	48 01 d8             	add    rax,rbx
ffff80000080017f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800181:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000800188:	ff ff ff 
ffff80000080018b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080018f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800194:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800199:	48 89 c6             	mov    rsi,rax
ffff80000080019c:	bf 07 00 00 00       	mov    edi,0x7
ffff8000008001a1:	49 89 df             	mov    r15,rbx
ffff8000008001a4:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff8000008001ab:	ff ff ff 
ffff8000008001ae:	48 01 d8             	add    rax,rbx
ffff8000008001b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
ffff8000008001b3:	48 b8 38 fe ff ff ff 	movabs rax,0xfffffffffffffe38
ffff8000008001ba:	ff ff ff 
ffff8000008001bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001c1:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001c6:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001cb:	48 89 c6             	mov    rsi,rax
ffff8000008001ce:	bf 08 00 00 00       	mov    edi,0x8
ffff8000008001d3:	49 89 df             	mov    r15,rbx
ffff8000008001d6:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff8000008001dd:	ff ff ff 
ffff8000008001e0:	48 01 d8             	add    rax,rbx
ffff8000008001e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008001e5:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff8000008001ec:	ff ff ff 
ffff8000008001ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001f3:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001f8:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001fd:	48 89 c6             	mov    rsi,rax
ffff800000800200:	bf 09 00 00 00       	mov    edi,0x9
ffff800000800205:	49 89 df             	mov    r15,rbx
ffff800000800208:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff80000080020f:	ff ff ff 
ffff800000800212:	48 01 d8             	add    rax,rbx
ffff800000800215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800217:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080021e:	ff ff ff 
ffff800000800221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800225:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080022a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080022f:	48 89 c6             	mov    rsi,rax
ffff800000800232:	bf 0a 00 00 00       	mov    edi,0xa
ffff800000800237:	49 89 df             	mov    r15,rbx
ffff80000080023a:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff800000800241:	ff ff ff 
ffff800000800244:	48 01 d8             	add    rax,rbx
ffff800000800247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800249:	48 b8 d0 ff ff ff ff 	movabs rax,0xffffffffffffffd0
ffff800000800250:	ff ff ff 
ffff800000800253:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800257:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080025c:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800261:	48 89 c6             	mov    rsi,rax
ffff800000800264:	bf 0b 00 00 00       	mov    edi,0xb
ffff800000800269:	49 89 df             	mov    r15,rbx
ffff80000080026c:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff800000800273:	ff ff ff 
ffff800000800276:	48 01 d8             	add    rax,rbx
ffff800000800279:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
ffff80000080027b:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff800000800282:	ff ff ff 
ffff800000800285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800289:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080028e:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800293:	48 89 c6             	mov    rsi,rax
ffff800000800296:	bf 0c 00 00 00       	mov    edi,0xc
ffff80000080029b:	49 89 df             	mov    r15,rbx
ffff80000080029e:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff8000008002a5:	ff ff ff 
ffff8000008002a8:	48 01 d8             	add    rax,rbx
ffff8000008002ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002ad:	48 b8 68 ff ff ff ff 	movabs rax,0xffffffffffffff68
ffff8000008002b4:	ff ff ff 
ffff8000008002b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002bb:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002c0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002c5:	48 89 c6             	mov    rsi,rax
ffff8000008002c8:	bf 0d 00 00 00       	mov    edi,0xd
ffff8000008002cd:	49 89 df             	mov    r15,rbx
ffff8000008002d0:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff8000008002d7:	ff ff ff 
ffff8000008002da:	48 01 d8             	add    rax,rbx
ffff8000008002dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002df:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff8000008002e6:	ff ff ff 
ffff8000008002e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002ed:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002f2:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002f7:	48 89 c6             	mov    rsi,rax
ffff8000008002fa:	bf 0e 00 00 00       	mov    edi,0xe
ffff8000008002ff:	49 89 df             	mov    r15,rbx
ffff800000800302:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff800000800309:	ff ff ff 
ffff80000080030c:	48 01 d8             	add    rax,rbx
ffff80000080030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800311:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff800000800318:	ff ff ff 
ffff80000080031b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080031f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800324:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800329:	48 89 c6             	mov    rsi,rax
ffff80000080032c:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000800331:	49 89 df             	mov    r15,rbx
ffff800000800334:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff80000080033b:	ff ff ff 
ffff80000080033e:	48 01 d8             	add    rax,rbx
ffff800000800341:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800343:	48 b8 58 ff ff ff ff 	movabs rax,0xffffffffffffff58
ffff80000080034a:	ff ff ff 
ffff80000080034d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800351:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800356:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080035b:	48 89 c6             	mov    rsi,rax
ffff80000080035e:	bf 10 00 00 00       	mov    edi,0x10
ffff800000800363:	49 89 df             	mov    r15,rbx
ffff800000800366:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff80000080036d:	ff ff ff 
ffff800000800370:	48 01 d8             	add    rax,rbx
ffff800000800373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33
    for (int i=17;i<48;i++)
ffff800000800375:	c7 45 ec 11 00 00 00 	mov    DWORD PTR [rbp-0x14],0x11
ffff80000080037c:	eb 39                	jmp    ffff8000008003b7 <init_int+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff80000080037e:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff800000800385:	ff ff ff 
ffff800000800388:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080038c:	48 89 c6             	mov    rsi,rax
ffff80000080038f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000800392:	0f b6 c0             	movzx  eax,al
ffff800000800395:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff80000080039a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080039f:	89 c7                	mov    edi,eax
ffff8000008003a1:	49 89 df             	mov    r15,rbx
ffff8000008003a4:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff8000008003ab:	ff ff ff 
ffff8000008003ae:	48 01 d8             	add    rax,rbx
ffff8000008003b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 3)
    for (int i=17;i<48;i++)
ffff8000008003b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 1)
ffff8000008003b7:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff8000008003bb:	7e c1                	jle    ffff80000080037e <init_int+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003bd:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff8000008003c4:	ff ff ff 
ffff8000008003c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003cb:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff8000008003d0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008003d5:	48 89 c6             	mov    rsi,rax
ffff8000008003d8:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008003dd:	49 89 df             	mov    r15,rbx
ffff8000008003e0:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff8000008003e7:	ff ff ff 
ffff8000008003ea:	48 01 d8             	add    rax,rbx
ffff8000008003ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003ef:	48 b8 c8 ff ff ff ff 	movabs rax,0xffffffffffffffc8
ffff8000008003f6:	ff ff ff 
ffff8000008003f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003fd:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800402:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800407:	48 89 c6             	mov    rsi,rax
ffff80000080040a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080040f:	49 89 df             	mov    r15,rbx
ffff800000800412:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff800000800419:	ff ff ff 
ffff80000080041c:	48 01 d8             	add    rax,rbx
ffff80000080041f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:37
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff800000800421:	48 b8 f8 ff ff ff ff 	movabs rax,0xfffffffffffffff8
ffff800000800428:	ff ff ff 
ffff80000080042b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080042f:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800434:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800439:	48 89 c6             	mov    rsi,rax
ffff80000080043c:	bf 2e 00 00 00       	mov    edi,0x2e
ffff800000800441:	49 89 df             	mov    r15,rbx
ffff800000800444:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff80000080044b:	ff ff ff 
ffff80000080044e:	48 01 d8             	add    rax,rbx
ffff800000800451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:38
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
ffff800000800453:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080045a:	ff ff ff 
ffff80000080045d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800461:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800466:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080046b:	48 89 c6             	mov    rsi,rax
ffff80000080046e:	bf 80 00 00 00       	mov    edi,0x80
ffff800000800473:	49 89 df             	mov    r15,rbx
ffff800000800476:	48 b8 52 db fd ff ff 	movabs rax,0xfffffffffffddb52
ffff80000080047d:	ff ff ff 
ffff800000800480:	48 01 d8             	add    rax,rbx
ffff800000800483:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:43
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
ffff800000800485:	be 11 00 00 00       	mov    esi,0x11
ffff80000080048a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080048f:	49 89 df             	mov    r15,rbx
ffff800000800492:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff800000800499:	ff ff ff 
ffff80000080049c:	48 01 d8             	add    rax,rbx
ffff80000080049f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:44
	outb(0xA0,0x11);
ffff8000008004a1:	be 11 00 00 00       	mov    esi,0x11
ffff8000008004a6:	bf a0 00 00 00       	mov    edi,0xa0
ffff8000008004ab:	49 89 df             	mov    r15,rbx
ffff8000008004ae:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff8000008004b5:	ff ff ff 
ffff8000008004b8:	48 01 d8             	add    rax,rbx
ffff8000008004bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:46
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
ffff8000008004bd:	be 20 00 00 00       	mov    esi,0x20
ffff8000008004c2:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004c7:	49 89 df             	mov    r15,rbx
ffff8000008004ca:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff8000008004d1:	ff ff ff 
ffff8000008004d4:	48 01 d8             	add    rax,rbx
ffff8000008004d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:47
	outb(0xA1,0x28);
ffff8000008004d9:	be 28 00 00 00       	mov    esi,0x28
ffff8000008004de:	bf a1 00 00 00       	mov    edi,0xa1
ffff8000008004e3:	49 89 df             	mov    r15,rbx
ffff8000008004e6:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff8000008004ed:	ff ff ff 
ffff8000008004f0:	48 01 d8             	add    rax,rbx
ffff8000008004f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:49
	//ICW3
	outb(0x21,0x04);
ffff8000008004f5:	be 04 00 00 00       	mov    esi,0x4
ffff8000008004fa:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004ff:	49 89 df             	mov    r15,rbx
ffff800000800502:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff800000800509:	ff ff ff 
ffff80000080050c:	48 01 d8             	add    rax,rbx
ffff80000080050f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:50
	outb(0xA1,0x02);
ffff800000800511:	be 02 00 00 00       	mov    esi,0x2
ffff800000800516:	bf a1 00 00 00       	mov    edi,0xa1
ffff80000080051b:	49 89 df             	mov    r15,rbx
ffff80000080051e:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff800000800525:	ff ff ff 
ffff800000800528:	48 01 d8             	add    rax,rbx
ffff80000080052b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:52
	//ICW4
	outb(0x21,0x01);
ffff80000080052d:	be 01 00 00 00       	mov    esi,0x1
ffff800000800532:	bf 21 00 00 00       	mov    edi,0x21
ffff800000800537:	49 89 df             	mov    r15,rbx
ffff80000080053a:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff800000800541:	ff ff ff 
ffff800000800544:	48 01 d8             	add    rax,rbx
ffff800000800547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:53
	outb(0xA1,0x01);
ffff800000800549:	be 01 00 00 00       	mov    esi,0x1
ffff80000080054e:	bf a1 00 00 00       	mov    edi,0xa1
ffff800000800553:	49 89 df             	mov    r15,rbx
ffff800000800556:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080055d:	ff ff ff 
ffff800000800560:	48 01 d8             	add    rax,rbx
ffff800000800563:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:55

    turn_on_int();
ffff800000800565:	49 89 df             	mov    r15,rbx
ffff800000800568:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080056d:	48 ba ba 76 fe ff ff 	movabs rdx,0xfffffffffffe76ba
ffff800000800574:	ff ff ff 
ffff800000800577:	48 01 da             	add    rdx,rbx
ffff80000080057a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:59


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
ffff80000080057c:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff800000800583:	ff ff ff 
ffff800000800586:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080058a:	48 89 c6             	mov    rsi,rax
ffff80000080058d:	b8 82 00 00 c0       	mov    eax,0xc0000082
ffff800000800592:	48 89 c7             	mov    rdi,rax
ffff800000800595:	49 89 df             	mov    r15,rbx
ffff800000800598:	48 b8 10 e5 fd ff ff 	movabs rax,0xfffffffffffde510
ffff80000080059f:	ff ff ff 
ffff8000008005a2:	48 01 d8             	add    rax,rbx
ffff8000008005a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:61
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
ffff8000008005a7:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
ffff8000008005ae:	b8 84 00 00 c0       	mov    eax,0xc0000084
ffff8000008005b3:	48 89 c7             	mov    rdi,rax
ffff8000008005b6:	49 89 df             	mov    r15,rbx
ffff8000008005b9:	48 b8 10 e5 fd ff ff 	movabs rax,0xfffffffffffde510
ffff8000008005c0:	ff ff ff 
ffff8000008005c3:	48 01 d8             	add    rax,rbx
ffff8000008005c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:62
}
ffff8000008005c8:	90                   	nop
ffff8000008005c9:	48 83 c4 10          	add    rsp,0x10
ffff8000008005cd:	5b                   	pop    rbx
ffff8000008005ce:	41 5f                	pop    r15
ffff8000008005d0:	5d                   	pop    rbp
ffff8000008005d1:	c3                   	ret    

ffff8000008005d2 <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:64
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
ffff8000008005d2:	f3 0f 1e fa          	endbr64 
ffff8000008005d6:	55                   	push   rbp
ffff8000008005d7:	48 89 e5             	mov    rbp,rsp
ffff8000008005da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008005da <set_gate+0x8>
ffff8000008005e1:	49 bb a6 24 02 00 00 	movabs r11,0x224a6
ffff8000008005e8:	00 00 00 
ffff8000008005eb:	4c 01 d8             	add    rax,r11
ffff8000008005ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008005f2:	89 d6                	mov    esi,edx
ffff8000008005f4:	89 ca                	mov    edx,ecx
ffff8000008005f6:	89 f9                	mov    ecx,edi
ffff8000008005f8:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
ffff8000008005fb:	89 f1                	mov    ecx,esi
ffff8000008005fd:	66 89 4d f8          	mov    WORD PTR [rbp-0x8],cx
ffff800000800601:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector;
#else
    offset|=KNL_BASE;//中断必须在内核空间
ffff800000800605:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080060c:	80 ff ff 
ffff80000080060f:	48 09 55 f0          	or     QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_low=offset&0xffff;
ffff800000800613:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff80000080061a:	ff ff ff 
ffff80000080061d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000800624:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800628:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080062c:	48 01 ca             	add    rdx,rcx
ffff80000080062f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000800633:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].offset_mid=(offset>>16)&0xffff;
ffff800000800636:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080063a:	48 89 d1             	mov    rcx,rdx
ffff80000080063d:	48 c1 e9 10          	shr    rcx,0x10
ffff800000800641:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff800000800648:	ff ff ff 
ffff80000080064b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080064f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000800652:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800656:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080065a:	48 01 f2             	add    rdx,rsi
ffff80000080065d:	66 89 4a 06          	mov    WORD PTR [rdx+0x6],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].offset_high=(offset>>32);//0x0000ffff;
ffff800000800661:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000800665:	48 89 d1             	mov    rcx,rdx
ffff800000800668:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080066c:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff800000800673:	ff ff ff 
ffff800000800676:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080067a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080067d:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800681:	48 c1 e2 04          	shl    rdx,0x4
ffff800000800685:	48 01 f2             	add    rdx,rsi
ffff800000800688:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].attr=attr|1;//1是ist索引
ffff80000080068b:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff800000800692:	ff ff ff 
ffff800000800695:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800699:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080069c:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006a0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006a4:	48 01 ca             	add    rdx,rcx
ffff8000008006a7:	0f b7 4d ec          	movzx  ecx,WORD PTR [rbp-0x14]
ffff8000008006ab:	83 c9 01             	or     ecx,0x1
ffff8000008006ae:	66 89 4a 04          	mov    WORD PTR [rdx+0x4],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:76
    idt[index].selector=selector;
ffff8000008006b2:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff8000008006b9:	ff ff ff 
ffff8000008006bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008006c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008006c3:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006c7:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006cb:	48 01 d1             	add    rcx,rdx
ffff8000008006ce:	0f b7 55 f8          	movzx  edx,WORD PTR [rbp-0x8]
ffff8000008006d2:	66 89 51 02          	mov    WORD PTR [rcx+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:77
    idt[index].rsvd=0;
ffff8000008006d6:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff8000008006dd:	ff ff ff 
ffff8000008006e0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008006e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008006e7:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffff8000008006eb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008006ef:	48 01 d0             	add    rax,rdx
ffff8000008006f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:79
#endif
}
ffff8000008006f9:	90                   	nop
ffff8000008006fa:	5d                   	pop    rbp
ffff8000008006fb:	c3                   	ret    

ffff8000008006fc <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:81

void divide_err(){
ffff8000008006fc:	f3 0f 1e fa          	endbr64 
ffff800000800700:	55                   	push   rbp
ffff800000800701:	48 89 e5             	mov    rbp,rsp
ffff800000800704:	41 57                	push   r15
ffff800000800706:	48 83 ec 08          	sub    rsp,0x8
ffff80000080070a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080070a <divide_err+0xe>
ffff800000800711:	49 bb 76 23 02 00 00 	movabs r11,0x22376
ffff800000800718:	00 00 00 
ffff80000080071b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:82
    asm("cli");
ffff80000080071e:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
    //puts("divide err");
    eoi();
ffff80000080071f:	49 89 d7             	mov    r15,rdx
ffff800000800722:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800727:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff80000080072e:	ff ff ff 
ffff800000800731:	48 01 d1             	add    rcx,rdx
ffff800000800734:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:85
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800736:	fb                   	sti    
ffff800000800737:	c9                   	leave  
ffff800000800738:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:86
}
ffff80000080073a:	90                   	nop
ffff80000080073b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080073f:	c9                   	leave  
ffff800000800740:	c3                   	ret    

ffff800000800741 <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:88

void debug(){
ffff800000800741:	f3 0f 1e fa          	endbr64 
ffff800000800745:	55                   	push   rbp
ffff800000800746:	48 89 e5             	mov    rbp,rsp
ffff800000800749:	41 57                	push   r15
ffff80000080074b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080074f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080074f <debug+0xe>
ffff800000800756:	49 bb 31 23 02 00 00 	movabs r11,0x22331
ffff80000080075d:	00 00 00 
ffff800000800760:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:89
    asm("cli");
ffff800000800763:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
    //puts("debug");
    eoi();
ffff800000800764:	49 89 d7             	mov    r15,rdx
ffff800000800767:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080076c:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff800000800773:	ff ff ff 
ffff800000800776:	48 01 d1             	add    rcx,rdx
ffff800000800779:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080077b:	fb                   	sti    
ffff80000080077c:	c9                   	leave  
ffff80000080077d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
}
ffff80000080077f:	90                   	nop
ffff800000800780:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800784:	c9                   	leave  
ffff800000800785:	c3                   	ret    

ffff800000800786 <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:94
void default_int_proc(){
ffff800000800786:	f3 0f 1e fa          	endbr64 
ffff80000080078a:	55                   	push   rbp
ffff80000080078b:	48 89 e5             	mov    rbp,rsp
ffff80000080078e:	41 57                	push   r15
ffff800000800790:	48 83 ec 08          	sub    rsp,0x8
ffff800000800794:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800794 <default_int_proc+0xe>
ffff80000080079b:	49 bb ec 22 02 00 00 	movabs r11,0x222ec
ffff8000008007a2:	00 00 00 
ffff8000008007a5:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:95
    asm("cli");
ffff8000008007a8:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
    //puts("default_int_proc");
    eoi();
ffff8000008007a9:	49 89 d7             	mov    r15,rdx
ffff8000008007ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007b1:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff8000008007b8:	ff ff ff 
ffff8000008007bb:	48 01 d1             	add    rcx,rdx
ffff8000008007be:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008007c0:	fb                   	sti    
ffff8000008007c1:	c9                   	leave  
ffff8000008007c2:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
}
ffff8000008007c4:	90                   	nop
ffff8000008007c5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008007c9:	c9                   	leave  
ffff8000008007ca:	c3                   	ret    

ffff8000008007cb <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:100
void breakpoint(){
ffff8000008007cb:	f3 0f 1e fa          	endbr64 
ffff8000008007cf:	55                   	push   rbp
ffff8000008007d0:	48 89 e5             	mov    rbp,rsp
ffff8000008007d3:	41 57                	push   r15
ffff8000008007d5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008007d9:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008007d9 <breakpoint+0xe>
ffff8000008007e0:	49 bb a7 22 02 00 00 	movabs r11,0x222a7
ffff8000008007e7:	00 00 00 
ffff8000008007ea:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:101
    asm("cli");
ffff8000008007ed:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
    //puts("breakpoint");
    eoi();
ffff8000008007ee:	49 89 d7             	mov    r15,rdx
ffff8000008007f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007f6:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff8000008007fd:	ff ff ff 
ffff800000800800:	48 01 d1             	add    rcx,rdx
ffff800000800803:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800805:	fb                   	sti    
ffff800000800806:	c9                   	leave  
ffff800000800807:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
}
ffff800000800809:	90                   	nop
ffff80000080080a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080080e:	c9                   	leave  
ffff80000080080f:	c3                   	ret    

ffff800000800810 <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:106
void overflow(){
ffff800000800810:	f3 0f 1e fa          	endbr64 
ffff800000800814:	55                   	push   rbp
ffff800000800815:	48 89 e5             	mov    rbp,rsp
ffff800000800818:	41 57                	push   r15
ffff80000080081a:	48 83 ec 08          	sub    rsp,0x8
ffff80000080081e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080081e <overflow+0xe>
ffff800000800825:	49 bb 62 22 02 00 00 	movabs r11,0x22262
ffff80000080082c:	00 00 00 
ffff80000080082f:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:107
    asm("cli");
ffff800000800832:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
    //puts("overflow");
    eoi();
ffff800000800833:	49 89 d7             	mov    r15,rdx
ffff800000800836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080083b:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff800000800842:	ff ff ff 
ffff800000800845:	48 01 d1             	add    rcx,rdx
ffff800000800848:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080084a:	fb                   	sti    
ffff80000080084b:	c9                   	leave  
ffff80000080084c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
}
ffff80000080084e:	90                   	nop
ffff80000080084f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800853:	c9                   	leave  
ffff800000800854:	c3                   	ret    

ffff800000800855 <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:112
void bounds(){
ffff800000800855:	f3 0f 1e fa          	endbr64 
ffff800000800859:	55                   	push   rbp
ffff80000080085a:	48 89 e5             	mov    rbp,rsp
ffff80000080085d:	41 57                	push   r15
ffff80000080085f:	48 83 ec 08          	sub    rsp,0x8
ffff800000800863:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800863 <bounds+0xe>
ffff80000080086a:	49 bb 1d 22 02 00 00 	movabs r11,0x2221d
ffff800000800871:	00 00 00 
ffff800000800874:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:113
    asm("cli");
ffff800000800877:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
    //puts("bounds");
    eoi();
ffff800000800878:	49 89 d7             	mov    r15,rdx
ffff80000080087b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800880:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff800000800887:	ff ff ff 
ffff80000080088a:	48 01 d1             	add    rcx,rdx
ffff80000080088d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080088f:	fb                   	sti    
ffff800000800890:	c9                   	leave  
ffff800000800891:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:117
}
ffff800000800893:	90                   	nop
ffff800000800894:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800898:	c9                   	leave  
ffff800000800899:	c3                   	ret    

ffff80000080089a <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:118
void undefined_operator(){
ffff80000080089a:	f3 0f 1e fa          	endbr64 
ffff80000080089e:	55                   	push   rbp
ffff80000080089f:	48 89 e5             	mov    rbp,rsp
ffff8000008008a2:	41 57                	push   r15
ffff8000008008a4:	53                   	push   rbx
ffff8000008008a5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008008a5 <undefined_operator+0xb>
ffff8000008008ac:	49 bb db 21 02 00 00 	movabs r11,0x221db
ffff8000008008b3:	00 00 00 
ffff8000008008b6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    //puts("undef operator");
    eoi();
ffff8000008008b9:	49 89 df             	mov    r15,rbx
ffff8000008008bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008c1:	48 ba ae 76 fe ff ff 	movabs rdx,0xfffffffffffe76ae
ffff8000008008c8:	ff ff ff 
ffff8000008008cb:	48 01 da             	add    rdx,rbx
ffff8000008008ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
    report_back_trace_of_err();
ffff8000008008d0:	49 89 df             	mov    r15,rbx
ffff8000008008d3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008d8:	48 ba de 76 fe ff ff 	movabs rdx,0xfffffffffffe76de
ffff8000008008df:	ff ff ff 
ffff8000008008e2:	48 01 da             	add    rdx,rbx
ffff8000008008e5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
ffff8000008008e7:	eb fe                	jmp    ffff8000008008e7 <undefined_operator+0x4d>
ffff8000008008e9:	c9                   	leave  
ffff8000008008ea:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
}
ffff8000008008ec:	90                   	nop
ffff8000008008ed:	5b                   	pop    rbx
ffff8000008008ee:	41 5f                	pop    r15
ffff8000008008f0:	5d                   	pop    rbp
ffff8000008008f1:	c3                   	ret    

ffff8000008008f2 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:124
void coprocessor_notexist(){
ffff8000008008f2:	f3 0f 1e fa          	endbr64 
ffff8000008008f6:	55                   	push   rbp
ffff8000008008f7:	48 89 e5             	mov    rbp,rsp
ffff8000008008fa:	41 57                	push   r15
ffff8000008008fc:	48 83 ec 08          	sub    rsp,0x8
ffff800000800900:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800900 <coprocessor_notexist+0xe>
ffff800000800907:	49 bb 80 21 02 00 00 	movabs r11,0x22180
ffff80000080090e:	00 00 00 
ffff800000800911:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:125
    asm("cli");
ffff800000800914:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
    //puts("coprocessor doesnt exist");
    eoi();
ffff800000800915:	49 89 d7             	mov    r15,rdx
ffff800000800918:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080091d:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff800000800924:	ff ff ff 
ffff800000800927:	48 01 d1             	add    rcx,rdx
ffff80000080092a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:128
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080092c:	fb                   	sti    
ffff80000080092d:	c9                   	leave  
ffff80000080092e:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
}
ffff800000800930:	90                   	nop
ffff800000800931:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800935:	c9                   	leave  
ffff800000800936:	c3                   	ret    

ffff800000800937 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:130
void double_ints(){
ffff800000800937:	f3 0f 1e fa          	endbr64 
ffff80000080093b:	55                   	push   rbp
ffff80000080093c:	48 89 e5             	mov    rbp,rsp
ffff80000080093f:	41 57                	push   r15
ffff800000800941:	48 83 ec 08          	sub    rsp,0x8
ffff800000800945:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800945 <double_ints+0xe>
ffff80000080094c:	49 bb 3b 21 02 00 00 	movabs r11,0x2213b
ffff800000800953:	00 00 00 
ffff800000800956:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:131
    asm("cli");
ffff800000800959:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
    //puts("double interrupts");
    eoi();
ffff80000080095a:	49 89 d7             	mov    r15,rdx
ffff80000080095d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800962:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff800000800969:	ff ff ff 
ffff80000080096c:	48 01 d1             	add    rcx,rdx
ffff80000080096f:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:134
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800971:	fb                   	sti    
ffff800000800972:	c9                   	leave  
ffff800000800973:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:135
}
ffff800000800975:	90                   	nop
ffff800000800976:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080097a:	c9                   	leave  
ffff80000080097b:	c3                   	ret    

ffff80000080097c <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:136
void coprocessor_seg_overbound(){
ffff80000080097c:	f3 0f 1e fa          	endbr64 
ffff800000800980:	55                   	push   rbp
ffff800000800981:	48 89 e5             	mov    rbp,rsp
ffff800000800984:	41 57                	push   r15
ffff800000800986:	48 83 ec 08          	sub    rsp,0x8
ffff80000080098a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080098a <coprocessor_seg_overbound+0xe>
ffff800000800991:	49 bb f6 20 02 00 00 	movabs r11,0x220f6
ffff800000800998:	00 00 00 
ffff80000080099b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
    //puts("coprocessfor seg overdound");
    eoi();
ffff80000080099e:	49 89 d7             	mov    r15,rdx
ffff8000008009a1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009a6:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff8000008009ad:	ff ff ff 
ffff8000008009b0:	48 01 d1             	add    rcx,rdx
ffff8000008009b3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:139
    __asm__ volatile ("leave \r\n iretq");
ffff8000008009b5:	c9                   	leave  
ffff8000008009b6:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
}
ffff8000008009b8:	90                   	nop
ffff8000008009b9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008009bd:	c9                   	leave  
ffff8000008009be:	c3                   	ret    

ffff8000008009bf <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:141
void invalid_tss(){
ffff8000008009bf:	f3 0f 1e fa          	endbr64 
ffff8000008009c3:	55                   	push   rbp
ffff8000008009c4:	48 89 e5             	mov    rbp,rsp
ffff8000008009c7:	41 57                	push   r15
ffff8000008009c9:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009cd:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009cd <invalid_tss+0xe>
ffff8000008009d4:	49 bb b3 20 02 00 00 	movabs r11,0x220b3
ffff8000008009db:	00 00 00 
ffff8000008009de:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:142
    asm("cli");
ffff8000008009e1:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
    //puts("invalid tss");
    eoi();
ffff8000008009e2:	49 89 d7             	mov    r15,rdx
ffff8000008009e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009ea:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff8000008009f1:	ff ff ff 
ffff8000008009f4:	48 01 d1             	add    rcx,rdx
ffff8000008009f7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:145
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008009f9:	fb                   	sti    
ffff8000008009fa:	c9                   	leave  
ffff8000008009fb:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
}
ffff8000008009fd:	90                   	nop
ffff8000008009fe:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a02:	c9                   	leave  
ffff800000800a03:	c3                   	ret    

ffff800000800a04 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:147
void segment_notexist(){
ffff800000800a04:	f3 0f 1e fa          	endbr64 
ffff800000800a08:	55                   	push   rbp
ffff800000800a09:	48 89 e5             	mov    rbp,rsp
ffff800000800a0c:	41 57                	push   r15
ffff800000800a0e:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a12:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a12 <segment_notexist+0xe>
ffff800000800a19:	49 bb 6e 20 02 00 00 	movabs r11,0x2206e
ffff800000800a20:	00 00 00 
ffff800000800a23:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:148
    asm("cli");
ffff800000800a26:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
    //puts("seg nonexistent");
    eoi();
ffff800000800a27:	49 89 d7             	mov    r15,rdx
ffff800000800a2a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a2f:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff800000800a36:	ff ff ff 
ffff800000800a39:	48 01 d1             	add    rcx,rdx
ffff800000800a3c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:151
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a3e:	fb                   	sti    
ffff800000800a3f:	c9                   	leave  
ffff800000800a40:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
}
ffff800000800a42:	90                   	nop
ffff800000800a43:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a47:	c9                   	leave  
ffff800000800a48:	c3                   	ret    

ffff800000800a49 <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:153
void stackseg_overbound(){
ffff800000800a49:	f3 0f 1e fa          	endbr64 
ffff800000800a4d:	55                   	push   rbp
ffff800000800a4e:	48 89 e5             	mov    rbp,rsp
ffff800000800a51:	41 57                	push   r15
ffff800000800a53:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a57:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a57 <stackseg_overbound+0xe>
ffff800000800a5e:	49 bb 29 20 02 00 00 	movabs r11,0x22029
ffff800000800a65:	00 00 00 
ffff800000800a68:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:154
    asm("cli");
ffff800000800a6b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
    //puts("stack seg overbound");
    eoi();
ffff800000800a6c:	49 89 d7             	mov    r15,rdx
ffff800000800a6f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a74:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff800000800a7b:	ff ff ff 
ffff800000800a7e:	48 01 d1             	add    rcx,rdx
ffff800000800a81:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:157
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a83:	fb                   	sti    
ffff800000800a84:	c9                   	leave  
ffff800000800a85:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:158
}
ffff800000800a87:	90                   	nop
ffff800000800a88:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a8c:	c9                   	leave  
ffff800000800a8d:	c3                   	ret    

ffff800000800a8e <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:159
void general_protect(){
ffff800000800a8e:	f3 0f 1e fa          	endbr64 
ffff800000800a92:	55                   	push   rbp
ffff800000800a93:	48 89 e5             	mov    rbp,rsp
ffff800000800a96:	41 57                	push   r15
ffff800000800a98:	48 83 ec 18          	sub    rsp,0x18
ffff800000800a9c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a9c <general_protect+0xe>
ffff800000800aa3:	49 bb e4 1f 02 00 00 	movabs r11,0x21fe4
ffff800000800aaa:	00 00 00 
ffff800000800aad:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:161
    //print("general protect.");
    int err_code=0;
ffff800000800ab0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:179
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
ffff800000800ab7:	49 89 d7             	mov    r15,rdx
ffff800000800aba:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800abf:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff800000800ac6:	ff ff ff 
ffff800000800ac9:	48 01 d1             	add    rcx,rdx
ffff800000800acc:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:180
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
ffff800000800ace:	c9                   	leave  
ffff800000800acf:	48 83 c4 08          	add    rsp,0x8
ffff800000800ad3:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:181
}
ffff800000800ad5:	90                   	nop
ffff800000800ad6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800ada:	c9                   	leave  
ffff800000800adb:	c3                   	ret    

ffff800000800adc <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:183

void coprocessor_err(){
ffff800000800adc:	f3 0f 1e fa          	endbr64 
ffff800000800ae0:	55                   	push   rbp
ffff800000800ae1:	48 89 e5             	mov    rbp,rsp
ffff800000800ae4:	41 57                	push   r15
ffff800000800ae6:	48 83 ec 08          	sub    rsp,0x8
ffff800000800aea:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800aea <coprocessor_err+0xe>
ffff800000800af1:	49 bb 96 1f 02 00 00 	movabs r11,0x21f96
ffff800000800af8:	00 00 00 
ffff800000800afb:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:184
    asm("cli");
ffff800000800afe:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
    //puts("coprocessor err");
    eoi();
ffff800000800aff:	49 89 d7             	mov    r15,rdx
ffff800000800b02:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800b07:	48 b9 ae 76 fe ff ff 	movabs rcx,0xfffffffffffe76ae
ffff800000800b0e:	ff ff ff 
ffff800000800b11:	48 01 d1             	add    rcx,rdx
ffff800000800b14:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:187
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800b16:	fb                   	sti    
ffff800000800b17:	c9                   	leave  
ffff800000800b18:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:188
}
ffff800000800b1a:	90                   	nop
ffff800000800b1b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800b1f:	c9                   	leave  
ffff800000800b20:	c3                   	ret    

ffff800000800b21 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:207

xchg rcx to r10

*/
int syscall(long a, long b, long c, long d, long e, long f)
{
ffff800000800b21:	f3 0f 1e fa          	endbr64 
ffff800000800b25:	55                   	push   rbp
ffff800000800b26:	48 89 e5             	mov    rbp,rsp
ffff800000800b29:	41 57                	push   r15
ffff800000800b2b:	53                   	push   rbx
ffff800000800b2c:	48 83 ec 40          	sub    rsp,0x40
ffff800000800b30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800b30 <syscall+0xf>
ffff800000800b37:	49 bb 50 1f 02 00 00 	movabs r11,0x21f50
ffff800000800b3e:	00 00 00 
ffff800000800b41:	4c 01 db             	add    rbx,r11
ffff800000800b44:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000800b48:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000800b4c:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000800b50:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff800000800b54:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
ffff800000800b58:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:209
    unsigned long num;
    asm volatile("":"=a"(num));//这样rax中存的参数就到这了
ffff800000800b5c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:210
    switch (num)
ffff800000800b60:	48 83 7d e8 64       	cmp    QWORD PTR [rbp-0x18],0x64
ffff800000800b65:	0f 87 1c 04 00 00    	ja     ffff800000800f87 <syscall+0x466>
ffff800000800b6b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800b6f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800b76:	00 
ffff800000800b77:	48 8d 05 c2 ee 01 00 	lea    rax,[rip+0x1eec2]        # ffff80000081fa40 <dev_keyboard+0xc0>
ffff800000800b7e:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800b82:	48 8d 15 b7 ee 01 00 	lea    rdx,[rip+0x1eeb7]        # ffff80000081fa40 <dev_keyboard+0xc0>
ffff800000800b89:	48 01 d0             	add    rax,rdx
ffff800000800b8c:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:212
    {
        case 0:return reg_device(a);
ffff800000800b8f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800b93:	48 89 c7             	mov    rdi,rax
ffff800000800b96:	49 89 df             	mov    r15,rbx
ffff800000800b99:	48 b8 16 2a fe ff ff 	movabs rax,0xfffffffffffe2a16
ffff800000800ba0:	ff ff ff 
ffff800000800ba3:	48 01 d8             	add    rax,rbx
ffff800000800ba6:	ff d0                	call   rax
ffff800000800ba8:	e9 da 03 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:213
        case 1:return dispose_device(a);
ffff800000800bad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bb1:	89 c7                	mov    edi,eax
ffff800000800bb3:	49 89 df             	mov    r15,rbx
ffff800000800bb6:	48 b8 84 37 fe ff ff 	movabs rax,0xfffffffffffe3784
ffff800000800bbd:	ff ff ff 
ffff800000800bc0:	48 01 d8             	add    rax,rbx
ffff800000800bc3:	ff d0                	call   rax
ffff800000800bc5:	e9 bd 03 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:214
        case 2:return reg_driver(a);
ffff800000800bca:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bce:	48 89 c7             	mov    rdi,rax
ffff800000800bd1:	49 89 df             	mov    r15,rbx
ffff800000800bd4:	48 b8 8e 2d fe ff ff 	movabs rax,0xfffffffffffe2d8e
ffff800000800bdb:	ff ff ff 
ffff800000800bde:	48 01 d8             	add    rax,rbx
ffff800000800be1:	ff d0                	call   rax
ffff800000800be3:	e9 9f 03 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:215
        case 3:return dispose_driver(a);
ffff800000800be8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bec:	48 89 c7             	mov    rdi,rax
ffff800000800bef:	49 89 df             	mov    r15,rbx
ffff800000800bf2:	48 b8 50 38 fe ff ff 	movabs rax,0xfffffffffffe3850
ffff800000800bf9:	ff ff ff 
ffff800000800bfc:	48 01 d8             	add    rax,rbx
ffff800000800bff:	ff d0                	call   rax
ffff800000800c01:	e9 81 03 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:216
        case 4:return call_drv_func(a,b,c);
ffff800000800c06:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800c0a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000800c0e:	89 d6                	mov    esi,edx
ffff800000800c10:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800c14:	89 d1                	mov    ecx,edx
ffff800000800c16:	48 89 c2             	mov    rdx,rax
ffff800000800c19:	89 cf                	mov    edi,ecx
ffff800000800c1b:	49 89 df             	mov    r15,rbx
ffff800000800c1e:	48 b8 42 34 fe ff ff 	movabs rax,0xfffffffffffe3442
ffff800000800c25:	ff ff ff 
ffff800000800c28:	48 01 d8             	add    rax,rbx
ffff800000800c2b:	ff d0                	call   rax
ffff800000800c2d:	e9 55 03 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:217
        case 5:return req_page_at(a,b);
ffff800000800c32:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c36:	89 c2                	mov    edx,eax
ffff800000800c38:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c3c:	89 d6                	mov    esi,edx
ffff800000800c3e:	48 89 c7             	mov    rdi,rax
ffff800000800c41:	49 89 df             	mov    r15,rbx
ffff800000800c44:	48 b8 87 06 fe ff ff 	movabs rax,0xfffffffffffe0687
ffff800000800c4b:	ff ff ff 
ffff800000800c4e:	48 01 d8             	add    rax,rbx
ffff800000800c51:	ff d0                	call   rax
ffff800000800c53:	e9 2f 03 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:218
        case 6:return free_page(a);
ffff800000800c58:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c5c:	48 89 c7             	mov    rdi,rax
ffff800000800c5f:	49 89 df             	mov    r15,rbx
ffff800000800c62:	48 b8 7b 03 fe ff ff 	movabs rax,0xfffffffffffe037b
ffff800000800c69:	ff ff ff 
ffff800000800c6c:	48 01 d8             	add    rax,rbx
ffff800000800c6f:	ff d0                	call   rax
ffff800000800c71:	e9 11 03 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        case 7:return reg_proc(a, b, c);
ffff800000800c76:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800c7a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000800c7e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c82:	48 89 ce             	mov    rsi,rcx
ffff800000800c85:	48 89 c7             	mov    rdi,rax
ffff800000800c88:	49 89 df             	mov    r15,rbx
ffff800000800c8b:	48 b8 a7 55 fe ff ff 	movabs rax,0xfffffffffffe55a7
ffff800000800c92:	ff ff ff 
ffff800000800c95:	48 01 d8             	add    rax,rbx
ffff800000800c98:	ff d0                	call   rax
ffff800000800c9a:	e9 e8 02 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 8:del_proc(a);
ffff800000800c9f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800ca3:	89 c7                	mov    edi,eax
ffff800000800ca5:	49 89 df             	mov    r15,rbx
ffff800000800ca8:	48 b8 58 52 fe ff ff 	movabs rax,0xfffffffffffe5258
ffff800000800caf:	ff ff ff 
ffff800000800cb2:	48 01 d8             	add    rax,rbx
ffff800000800cb5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 10:chk_vm(a,b);
ffff800000800cb7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800cbb:	89 c2                	mov    edx,eax
ffff800000800cbd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800cc1:	89 d6                	mov    esi,edx
ffff800000800cc3:	89 c7                	mov    edi,eax
ffff800000800cc5:	49 89 df             	mov    r15,rbx
ffff800000800cc8:	48 b8 b9 07 fe ff ff 	movabs rax,0xfffffffffffe07b9
ffff800000800ccf:	ff ff ff 
ffff800000800cd2:	48 01 d8             	add    rax,rbx
ffff800000800cd5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 11:return sys_open(a,b);
ffff800000800cd7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800cdb:	89 c2                	mov    edx,eax
ffff800000800cdd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800ce1:	89 d6                	mov    esi,edx
ffff800000800ce3:	48 89 c7             	mov    rdi,rax
ffff800000800ce6:	49 89 df             	mov    r15,rbx
ffff800000800ce9:	48 b8 7b a3 fe ff ff 	movabs rax,0xfffffffffffea37b
ffff800000800cf0:	ff ff ff 
ffff800000800cf3:	48 01 d8             	add    rax,rbx
ffff800000800cf6:	ff d0                	call   rax
ffff800000800cf8:	e9 8a 02 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 12:return sys_close(a);
ffff800000800cfd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d01:	89 c7                	mov    edi,eax
ffff800000800d03:	49 89 df             	mov    r15,rbx
ffff800000800d06:	48 b8 2f aa fe ff ff 	movabs rax,0xfffffffffffeaa2f
ffff800000800d0d:	ff ff ff 
ffff800000800d10:	48 01 d8             	add    rax,rbx
ffff800000800d13:	ff d0                	call   rax
ffff800000800d15:	e9 6d 02 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 13:return sys_read(a,b,c);
ffff800000800d1a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800d1e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800d22:	89 d1                	mov    ecx,edx
ffff800000800d24:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800d28:	48 89 c6             	mov    rsi,rax
ffff800000800d2b:	89 cf                	mov    edi,ecx
ffff800000800d2d:	49 89 df             	mov    r15,rbx
ffff800000800d30:	48 b8 26 ab fe ff ff 	movabs rax,0xfffffffffffeab26
ffff800000800d37:	ff ff ff 
ffff800000800d3a:	48 01 d8             	add    rax,rbx
ffff800000800d3d:	ff d0                	call   rax
ffff800000800d3f:	e9 43 02 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:225
        case 14:return sys_write(a,b,c);
ffff800000800d44:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800d48:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800d4c:	89 d1                	mov    ecx,edx
ffff800000800d4e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800d52:	48 89 c6             	mov    rsi,rax
ffff800000800d55:	89 cf                	mov    edi,ecx
ffff800000800d57:	49 89 df             	mov    r15,rbx
ffff800000800d5a:	48 b8 f4 ab fe ff ff 	movabs rax,0xfffffffffffeabf4
ffff800000800d61:	ff ff ff 
ffff800000800d64:	48 01 d8             	add    rax,rbx
ffff800000800d67:	ff d0                	call   rax
ffff800000800d69:	e9 19 02 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:226
        case 15:return sys_lseek(a,b,c);
ffff800000800d6e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800d72:	89 c2                	mov    edx,eax
ffff800000800d74:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d78:	89 c1                	mov    ecx,eax
ffff800000800d7a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800d7e:	48 89 c6             	mov    rsi,rax
ffff800000800d81:	89 cf                	mov    edi,ecx
ffff800000800d83:	49 89 df             	mov    r15,rbx
ffff800000800d86:	48 b8 c2 ac fe ff ff 	movabs rax,0xfffffffffffeacc2
ffff800000800d8d:	ff ff ff 
ffff800000800d90:	48 01 d8             	add    rax,rbx
ffff800000800d93:	ff d0                	call   rax
ffff800000800d95:	e9 ed 01 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:227
        case 16:return sys_tell(a);
ffff800000800d9a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d9e:	89 c7                	mov    edi,eax
ffff800000800da0:	49 89 df             	mov    r15,rbx
ffff800000800da3:	48 b8 b0 0d fe ff ff 	movabs rax,0xfffffffffffe0db0
ffff800000800daa:	ff ff ff 
ffff800000800dad:	48 01 d8             	add    rax,rbx
ffff800000800db0:	ff d0                	call   rax
ffff800000800db2:	e9 d0 01 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:228
        case 17:return reg_vol(a,b,c);
ffff800000800db7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800dbb:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000800dbf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800dc3:	48 89 ce             	mov    rsi,rcx
ffff800000800dc6:	48 89 c7             	mov    rdi,rax
ffff800000800dc9:	49 89 df             	mov    r15,rbx
ffff800000800dcc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800dd1:	48 b9 1c 0c fe ff ff 	movabs rcx,0xfffffffffffe0c1c
ffff800000800dd8:	ff ff ff 
ffff800000800ddb:	48 01 d9             	add    rcx,rbx
ffff800000800dde:	ff d1                	call   rcx
ffff800000800de0:	e9 a2 01 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:229
        case 18:return free_vol(a);
ffff800000800de5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800de9:	48 89 c7             	mov    rdi,rax
ffff800000800dec:	49 89 df             	mov    r15,rbx
ffff800000800def:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800df4:	48 ba e1 0b fe ff ff 	movabs rdx,0xfffffffffffe0be1
ffff800000800dfb:	ff ff ff 
ffff800000800dfe:	48 01 da             	add    rdx,rbx
ffff800000800e01:	ff d2                	call   rdx
ffff800000800e03:	e9 7f 01 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:230
        case 19:return execute(a, NULL);
ffff800000800e08:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e0c:	be 00 00 00 00       	mov    esi,0x0
ffff800000800e11:	48 89 c7             	mov    rdi,rax
ffff800000800e14:	49 89 df             	mov    r15,rbx
ffff800000800e17:	48 b8 44 7a fe ff ff 	movabs rax,0xfffffffffffe7a44
ffff800000800e1e:	ff ff ff 
ffff800000800e21:	48 01 d8             	add    rax,rbx
ffff800000800e24:	ff d0                	call   rax
ffff800000800e26:	e9 5c 01 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:231
        case SYSCALL_EXIT:return sys_exit(a);
ffff800000800e2b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e2f:	89 c7                	mov    edi,eax
ffff800000800e31:	49 89 df             	mov    r15,rbx
ffff800000800e34:	48 b8 2d 55 fe ff ff 	movabs rax,0xfffffffffffe552d
ffff800000800e3b:	ff ff ff 
ffff800000800e3e:	48 01 d8             	add    rax,rbx
ffff800000800e41:	ff d0                	call   rax
ffff800000800e43:	e9 3f 01 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:232
        case SYSCALL_CALL:return exec_call(a);
ffff800000800e48:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e4c:	48 89 c7             	mov    rdi,rax
ffff800000800e4f:	49 89 df             	mov    r15,rbx
ffff800000800e52:	48 b8 12 7e fe ff ff 	movabs rax,0xfffffffffffe7e12
ffff800000800e59:	ff ff ff 
ffff800000800e5c:	48 01 d8             	add    rax,rbx
ffff800000800e5f:	ff d0                	call   rax
ffff800000800e61:	e9 21 01 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        case SYSCALL_MKFIFO:return sys_mkfifo(a);
ffff800000800e66:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e6a:	89 c7                	mov    edi,eax
ffff800000800e6c:	49 89 df             	mov    r15,rbx
ffff800000800e6f:	48 b8 a0 09 fe ff ff 	movabs rax,0xfffffffffffe09a0
ffff800000800e76:	ff ff ff 
ffff800000800e79:	48 01 d8             	add    rax,rbx
ffff800000800e7c:	ff d0                	call   rax
ffff800000800e7e:	e9 04 01 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_MALLOC:return sys_malloc(a);
ffff800000800e83:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e87:	89 c7                	mov    edi,eax
ffff800000800e89:	49 89 df             	mov    r15,rbx
ffff800000800e8c:	48 b8 8b 58 fe ff ff 	movabs rax,0xfffffffffffe588b
ffff800000800e93:	ff ff ff 
ffff800000800e96:	48 01 d8             	add    rax,rbx
ffff800000800e99:	ff d0                	call   rax
ffff800000800e9b:	e9 e7 00 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:235
        case SYSCALL_FREE:return sys_free(a);
ffff800000800ea0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800ea4:	89 c7                	mov    edi,eax
ffff800000800ea6:	49 89 df             	mov    r15,rbx
ffff800000800ea9:	48 b8 88 5a fe ff ff 	movabs rax,0xfffffffffffe5a88
ffff800000800eb0:	ff ff ff 
ffff800000800eb3:	48 01 d8             	add    rax,rbx
ffff800000800eb6:	ff d0                	call   rax
ffff800000800eb8:	e9 ca 00 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:236
        case SYSCALL_KB_READC:return sys_analyse_key();
ffff800000800ebd:	49 89 df             	mov    r15,rbx
ffff800000800ec0:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800ec5:	48 ba dc bd fe ff ff 	movabs rdx,0xfffffffffffebddc
ffff800000800ecc:	ff ff ff 
ffff800000800ecf:	48 01 da             	add    rdx,rbx
ffff800000800ed2:	ff d2                	call   rdx
ffff800000800ed4:	0f be c0             	movsx  eax,al
ffff800000800ed7:	e9 ab 00 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        case SYSCALL_FIND_DEV:return sys_find_dev(a);
ffff800000800edc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800ee0:	48 89 c7             	mov    rdi,rax
ffff800000800ee3:	49 89 df             	mov    r15,rbx
ffff800000800ee6:	48 b8 0e 2f fe ff ff 	movabs rax,0xfffffffffffe2f0e
ffff800000800eed:	ff ff ff 
ffff800000800ef0:	48 01 d8             	add    rax,rbx
ffff800000800ef3:	ff d0                	call   rax
ffff800000800ef5:	e9 8d 00 00 00       	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:238
        case SYSCALL_FORK:return sys_fork();
ffff800000800efa:	49 89 df             	mov    r15,rbx
ffff800000800efd:	48 b8 af 5e fe ff ff 	movabs rax,0xfffffffffffe5eaf
ffff800000800f04:	ff ff ff 
ffff800000800f07:	48 01 d8             	add    rax,rbx
ffff800000800f0a:	ff d0                	call   rax
ffff800000800f0c:	eb 79                	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:239
        case SYSCALL_EXECVE:return sys_execve(a, b, c);
ffff800000800f0e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800f12:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800f16:	89 c1                	mov    ecx,eax
ffff800000800f18:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800f1c:	89 ce                	mov    esi,ecx
ffff800000800f1e:	48 89 c7             	mov    rdi,rax
ffff800000800f21:	49 89 df             	mov    r15,rbx
ffff800000800f24:	48 b8 a9 7b fe ff ff 	movabs rax,0xfffffffffffe7ba9
ffff800000800f2b:	ff ff ff 
ffff800000800f2e:	48 01 d8             	add    rax,rbx
ffff800000800f31:	ff d0                	call   rax
ffff800000800f33:	eb 52                	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
ffff800000800f35:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800f39:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800f3d:	89 c1                	mov    ecx,eax
ffff800000800f3f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800f43:	89 ce                	mov    esi,ecx
ffff800000800f45:	48 89 c7             	mov    rdi,rax
ffff800000800f48:	49 89 df             	mov    r15,rbx
ffff800000800f4b:	48 b8 ec 2f fe ff ff 	movabs rax,0xfffffffffffe2fec
ffff800000800f52:	ff ff ff 
ffff800000800f55:	48 01 d8             	add    rax,rbx
ffff800000800f58:	ff d0                	call   rax
ffff800000800f5a:	eb 2b                	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:241
        case SYSCALL_WAIT:return sys_wait(a,b,c);
ffff800000800f5c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800f60:	89 c6                	mov    esi,eax
ffff800000800f62:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800f66:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800f6a:	89 d1                	mov    ecx,edx
ffff800000800f6c:	89 f2                	mov    edx,esi
ffff800000800f6e:	48 89 c6             	mov    rsi,rax
ffff800000800f71:	89 cf                	mov    edi,ecx
ffff800000800f73:	49 89 df             	mov    r15,rbx
ffff800000800f76:	48 b8 0b ae fe ff ff 	movabs rax,0xfffffffffffeae0b
ffff800000800f7d:	ff ff ff 
ffff800000800f80:	48 01 d8             	add    rax,rbx
ffff800000800f83:	ff d0                	call   rax
ffff800000800f85:	eb 00                	jmp    ffff800000800f87 <syscall+0x466>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:247
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
ffff800000800f87:	48 83 c4 40          	add    rsp,0x40
ffff800000800f8b:	5b                   	pop    rbx
ffff800000800f8c:	41 5f                	pop    r15
ffff800000800f8e:	5d                   	pop    rbp
ffff800000800f8f:	c3                   	ret    

ffff800000800f90 <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:249
void wrmsr(unsigned long address,unsigned long value)
{
ffff800000800f90:	f3 0f 1e fa          	endbr64 
ffff800000800f94:	55                   	push   rbp
ffff800000800f95:	48 89 e5             	mov    rbp,rsp
ffff800000800f98:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800f98 <wrmsr+0x8>
ffff800000800f9f:	49 bb e8 1a 02 00 00 	movabs r11,0x21ae8
ffff800000800fa6:	00 00 00 
ffff800000800fa9:	4c 01 d8             	add    rax,r11
ffff800000800fac:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000800fb0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
ffff800000800fb4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800fb8:	48 c1 e8 20          	shr    rax,0x20
ffff800000800fbc:	48 89 c2             	mov    rdx,rax
ffff800000800fbf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800fc3:	89 c0                	mov    eax,eax
ffff800000800fc5:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000800fc9:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:251
ffff800000800fcb:	90                   	nop
ffff800000800fcc:	5d                   	pop    rbp
ffff800000800fcd:	c3                   	ret    

ffff800000800fce <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:24
#include "exe.h"
#include "ramfs.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
ffff800000800fce:	f3 0f 1e fa          	endbr64 
ffff800000800fd2:	55                   	push   rbp
ffff800000800fd3:	48 89 e5             	mov    rbp,rsp
ffff800000800fd6:	41 57                	push   r15
ffff800000800fd8:	53                   	push   rbx
ffff800000800fd9:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000800fe0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800fe0 <main+0x12>
ffff800000800fe7:	49 bb a0 1a 02 00 00 	movabs r11,0x21aa0
ffff800000800fee:	00 00 00 
ffff800000800ff1:	4c 01 db             	add    rbx,r11
ffff800000800ff4:	89 bd fc fe ff ff    	mov    DWORD PTR [rbp-0x104],edi
ffff800000800ffa:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26

    struct multiboot_header* mbi=0ul;
ffff800000801001:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000801008:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    mbi=(struct multiboot_header*)addr;
ffff800000801009:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000801010:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:28
    init_logging();
ffff800000801014:	49 89 df             	mov    r15,rbx
ffff800000801017:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080101c:	48 ba 8f eb fd ff ff 	movabs rdx,0xfffffffffffdeb8f
ffff800000801023:	ff ff ff 
ffff800000801026:	48 01 da             	add    rdx,rbx
ffff800000801029:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
ffff80000080102b:	bf f8 03 00 00       	mov    edi,0x3f8
ffff800000801030:	49 89 df             	mov    r15,rbx
ffff800000801033:	48 b8 78 0a ff ff ff 	movabs rax,0xffffffffffff0a78
ffff80000080103a:	ff ff ff 
ffff80000080103d:	48 01 d8             	add    rax,rbx
ffff800000801040:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:39
    comprintf("\rgamessis os loaded.\r\n");
ffff800000801042:	48 b8 e8 d2 ff ff ff 	movabs rax,0xffffffffffffd2e8
ffff800000801049:	ff ff ff 
ffff80000080104c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801050:	48 89 c7             	mov    rdi,rax
ffff800000801053:	49 89 df             	mov    r15,rbx
ffff800000801056:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080105b:	48 ba a4 0c ff ff ff 	movabs rdx,0xffffffffffff0ca4
ffff800000801062:	ff ff ff 
ffff800000801065:	48 01 da             	add    rdx,rbx
ffff800000801068:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:41
	unsigned size;
    size = *(unsigned long*)addr;
ffff80000080106a:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000801071:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801074:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
ffff800000801077:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000080107e:	48 83 c0 08          	add    rax,0x8
ffff800000801082:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000801086:	e9 93 02 00 00       	jmp    ffff80000080131e <main+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
		switch (tag->type)
ffff80000080108b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080108f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801091:	83 f8 08             	cmp    eax,0x8
ffff800000801094:	0f 87 71 02 00 00    	ja     ffff80000080130b <main+0x33d>
ffff80000080109a:	89 c0                	mov    eax,eax
ffff80000080109c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008010a3:	00 
ffff8000008010a4:	48 8d 05 1d ed 01 00 	lea    rax,[rip+0x1ed1d]        # ffff80000081fdc8 <.LC4+0x11>
ffff8000008010ab:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff8000008010af:	48 8d 15 12 ed 01 00 	lea    rdx,[rip+0x1ed12]        # ffff80000081fdc8 <.LC4+0x11>
ffff8000008010b6:	48 01 d0             	add    rax,rdx
ffff8000008010b9:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:66
			break;
		case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
			//printf("mem_lower = %uKB, mem_upper = %uKB\n",
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_lower,
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_upper);
			set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
ffff8000008010bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008010c0:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008010c3:	89 c7                	mov    edi,eax
ffff8000008010c5:	49 89 df             	mov    r15,rbx
ffff8000008010c8:	48 b8 c8 f4 fd ff ff 	movabs rax,0xfffffffffffdf4c8
ffff8000008010cf:	ff ff ff 
ffff8000008010d2:	48 01 d8             	add    rax,rbx
ffff8000008010d5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:67
			break;
ffff8000008010d7:	e9 2f 02 00 00       	jmp    ffff80000080130b <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80

			break;
		case MULTIBOOT_TAG_TYPE_MMAP:
		{
			//printf("mmap\n");
            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
ffff8000008010dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008010e0:	48 83 c0 10          	add    rax,0x10
ffff8000008010e4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008010e8:	eb 44                	jmp    ffff80000080112e <main+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:84
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
ffff8000008010ea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008010ee:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff8000008010f1:	89 c2                	mov    edx,eax
ffff8000008010f3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008010f7:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff8000008010fb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008010ff:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801102:	48 89 ce             	mov    rsi,rcx
ffff800000801105:	48 89 c7             	mov    rdi,rax
ffff800000801108:	49 89 df             	mov    r15,rbx
ffff80000080110b:	48 b8 fd f4 fd ff ff 	movabs rax,0xfffffffffffdf4fd
ffff800000801112:	ff ff ff 
ffff800000801115:	48 01 d8             	add    rax,rbx
ffff800000801118:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
ffff80000080111a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080111e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000801121:	89 c2                	mov    edx,eax
ffff800000801123:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801127:	48 01 d0             	add    rax,rdx
ffff80000080112a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:81
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
ffff80000080112e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801132:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000801135:	89 c2                	mov    edx,eax
ffff800000801137:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080113b:	48 01 d0             	add    rax,rdx
ffff80000080113e:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000801142:	72 a6                	jb     ffff8000008010ea <main+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:88
            }

		}
		break;
ffff800000801144:	e9 c2 01 00 00       	jmp    ffff80000080130b <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93
		case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
		{
			multiboot_uint32_t color;
			unsigned i;
			struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
ffff800000801149:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080114d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:94
			void *fb = (void *) FRAMEBUFFER_ADDR;
ffff800000801151:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff800000801158:	80 ff ff 
ffff80000080115b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:95
			set_framebuffer(*tagfb);
ffff80000080115f:	48 83 ec 08          	sub    rsp,0x8
ffff800000801163:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801167:	ff 70 20             	push   QWORD PTR [rax+0x20]
ffff80000080116a:	ff 70 18             	push   QWORD PTR [rax+0x18]
ffff80000080116d:	ff 70 10             	push   QWORD PTR [rax+0x10]
ffff800000801170:	ff 70 08             	push   QWORD PTR [rax+0x8]
ffff800000801173:	ff 30                	push   QWORD PTR [rax]
ffff800000801175:	49 89 df             	mov    r15,rbx
ffff800000801178:	48 b8 d9 90 fe ff ff 	movabs rax,0xfffffffffffe90d9
ffff80000080117f:	ff ff ff 
ffff800000801182:	48 01 d8             	add    rax,rbx
ffff800000801185:	ff d0                	call   rax
ffff800000801187:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97

			switch (tagfb->common.framebuffer_type)
ffff80000080118b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080118f:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
ffff800000801193:	0f b6 c0             	movzx  eax,al
ffff800000801196:	83 f8 02             	cmp    eax,0x2
ffff800000801199:	0f 84 5a 01 00 00    	je     ffff8000008012f9 <main+0x32b>
ffff80000080119f:	83 f8 02             	cmp    eax,0x2
ffff8000008011a2:	0f 8f 5a 01 00 00    	jg     ffff800000801302 <main+0x334>
ffff8000008011a8:	85 c0                	test   eax,eax
ffff8000008011aa:	74 0e                	je     ffff8000008011ba <main+0x1ec>
ffff8000008011ac:	83 f8 01             	cmp    eax,0x1
ffff8000008011af:	0f 84 15 01 00 00    	je     ffff8000008012ca <main+0x2fc>
ffff8000008011b5:	e9 48 01 00 00       	jmp    ffff800000801302 <main+0x334>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:104
			case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
			{
				unsigned best_distance, distance;
				struct multiboot_color *palette;

				palette = tagfb->framebuffer_palette;
ffff8000008011ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008011be:	48 83 c0 22          	add    rax,0x22
ffff8000008011c2:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:106

				color = 0;
ffff8000008011c6:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:107
				best_distance = 4 * 256 * 256;
ffff8000008011cd:	c7 45 d8 00 00 04 00 	mov    DWORD PTR [rbp-0x28],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109

				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff8000008011d4:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff8000008011db:	e9 d4 00 00 00       	jmp    ffff8000008012b4 <main+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:111
				{
					distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
ffff8000008011e0:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008011e3:	48 89 d0             	mov    rax,rdx
ffff8000008011e6:	48 01 c0             	add    rax,rax
ffff8000008011e9:	48 01 c2             	add    rdx,rax
ffff8000008011ec:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008011f0:	48 01 d0             	add    rax,rdx
ffff8000008011f3:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008011f7:	0f b6 c0             	movzx  eax,al
ffff8000008011fa:	ba ff 00 00 00       	mov    edx,0xff
ffff8000008011ff:	89 d1                	mov    ecx,edx
ffff800000801201:	29 c1                	sub    ecx,eax
ffff800000801203:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801206:	48 89 d0             	mov    rax,rdx
ffff800000801209:	48 01 c0             	add    rax,rax
ffff80000080120c:	48 01 c2             	add    rdx,rax
ffff80000080120f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801213:	48 01 d0             	add    rax,rdx
ffff800000801216:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff80000080121a:	0f b6 d0             	movzx  edx,al
ffff80000080121d:	b8 ff 00 00 00       	mov    eax,0xff
ffff800000801222:	29 d0                	sub    eax,edx
ffff800000801224:	89 ce                	mov    esi,ecx
ffff800000801226:	0f af f0             	imul   esi,eax
ffff800000801229:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080122c:	48 89 d0             	mov    rax,rdx
ffff80000080122f:	48 01 c0             	add    rax,rax
ffff800000801232:	48 01 c2             	add    rdx,rax
ffff800000801235:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801239:	48 01 d0             	add    rax,rdx
ffff80000080123c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080123f:	0f b6 c8             	movzx  ecx,al
ffff800000801242:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801245:	48 89 d0             	mov    rax,rdx
ffff800000801248:	48 01 c0             	add    rax,rax
ffff80000080124b:	48 01 c2             	add    rdx,rax
ffff80000080124e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801252:	48 01 d0             	add    rax,rdx
ffff800000801255:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801258:	0f b6 c0             	movzx  eax,al
ffff80000080125b:	0f af c1             	imul   eax,ecx
ffff80000080125e:	01 c6                	add    esi,eax
ffff800000801260:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801263:	48 89 d0             	mov    rax,rdx
ffff800000801266:	48 01 c0             	add    rax,rax
ffff800000801269:	48 01 c2             	add    rdx,rax
ffff80000080126c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801270:	48 01 d0             	add    rax,rdx
ffff800000801273:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801277:	0f b6 c8             	movzx  ecx,al
ffff80000080127a:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080127d:	48 89 d0             	mov    rax,rdx
ffff800000801280:	48 01 c0             	add    rax,rax
ffff800000801283:	48 01 c2             	add    rdx,rax
ffff800000801286:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080128a:	48 01 d0             	add    rax,rdx
ffff80000080128d:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801291:	0f b6 c0             	movzx  eax,al
ffff800000801294:	0f af c1             	imul   eax,ecx
ffff800000801297:	01 f0                	add    eax,esi
ffff800000801299:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:112
					if (distance < best_distance)
ffff80000080129c:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080129f:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff8000008012a2:	73 0c                	jae    ffff8000008012b0 <main+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:114
					{
						color = i;
ffff8000008012a4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008012a7:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:115
						best_distance = distance;
ffff8000008012aa:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008012ad:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 2)
				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff8000008012b0:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 1)
ffff8000008012b4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008012b8:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
ffff8000008012bc:	0f b7 c0             	movzx  eax,ax
ffff8000008012bf:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff8000008012c2:	0f 82 18 ff ff ff    	jb     ffff8000008011e0 <main+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:119
					}
				}
			}
			break;
ffff8000008012c8:	eb 40                	jmp    ffff80000080130a <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:122

			case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
				color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
ffff8000008012ca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008012ce:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
ffff8000008012d2:	0f b6 c0             	movzx  eax,al
ffff8000008012d5:	ba 01 00 00 00       	mov    edx,0x1
ffff8000008012da:	89 c1                	mov    ecx,eax
ffff8000008012dc:	d3 e2                	shl    edx,cl
ffff8000008012de:	89 d0                	mov    eax,edx
ffff8000008012e0:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008012e3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008012e7:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffff8000008012eb:	0f b6 c0             	movzx  eax,al
ffff8000008012ee:	89 c1                	mov    ecx,eax
ffff8000008012f0:	d3 e2                	shl    edx,cl
ffff8000008012f2:	89 d0                	mov    eax,edx
ffff8000008012f4:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:123
				break;
ffff8000008012f7:	eb 11                	jmp    ffff80000080130a <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:126

			case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
				color = '\\' | 0x0100;
ffff8000008012f9:	c7 45 b4 5c 01 00 00 	mov    DWORD PTR [rbp-0x4c],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:127
				break;
ffff800000801300:	eb 08                	jmp    ffff80000080130a <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:130

			default:
				color = 0xffffffff;
ffff800000801302:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:131
				break;
ffff800000801309:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:134 (discriminator 1)
			}

			break;
ffff80000080130a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:45
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
ffff80000080130b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080130f:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000801312:	83 c0 07             	add    eax,0x7
ffff800000801315:	89 c0                	mov    eax,eax
ffff800000801317:	83 e0 f8             	and    eax,0xfffffff8
ffff80000080131a:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag->type != MULTIBOOT_TAG_TYPE_END;
ffff80000080131e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801322:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801324:	85 c0                	test   eax,eax
ffff800000801326:	0f 85 5f fd ff ff    	jne    ffff80000080108b <main+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:138
		}
		}
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
ffff80000080132c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801330:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000801333:	83 c0 07             	add    eax,0x7
ffff800000801336:	89 c0                	mov    eax,eax
ffff800000801338:	83 e0 f8             	and    eax,0xfffffff8
ffff80000080133b:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:139
    init_memory();
ffff80000080133f:	49 89 df             	mov    r15,rbx
ffff800000801342:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801347:	48 ba 4d fc fd ff ff 	movabs rdx,0xfffffffffffdfc4d
ffff80000080134e:	ff ff ff 
ffff800000801351:	48 01 da             	add    rdx,rbx
ffff800000801354:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:140
    init_framebuffer();
ffff800000801356:	49 89 df             	mov    r15,rbx
ffff800000801359:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080135e:	48 ba e5 8d fe ff ff 	movabs rdx,0xfffffffffffe8de5
ffff800000801365:	ff ff ff 
ffff800000801368:	48 01 da             	add    rdx,rbx
ffff80000080136b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:142
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
ffff80000080136d:	b8 75 04 00 00       	mov    eax,0x475
ffff800000801372:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801375:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:144
	//printf("disk count:%d\n",disk_count);
    init_font();
ffff800000801378:	49 89 df             	mov    r15,rbx
ffff80000080137b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801380:	48 ba 24 8f fe ff ff 	movabs rdx,0xfffffffffffe8f24
ffff800000801387:	ff ff ff 
ffff80000080138a:	48 01 da             	add    rdx,rbx
ffff80000080138d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:147
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
ffff80000080138f:	48 b8 ff d2 ff ff ff 	movabs rax,0xffffffffffffd2ff
ffff800000801396:	ff ff ff 
ffff800000801399:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080139d:	48 89 c7             	mov    rdi,rax
ffff8000008013a0:	49 89 df             	mov    r15,rbx
ffff8000008013a3:	48 b8 40 96 fe ff ff 	movabs rax,0xfffffffffffe9640
ffff8000008013aa:	ff ff ff 
ffff8000008013ad:	48 01 d8             	add    rax,rbx
ffff8000008013b0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:148
    init_int();
ffff8000008013b2:	49 89 df             	mov    r15,rbx
ffff8000008013b5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008013ba:	48 ba 80 d5 fd ff ff 	movabs rdx,0xfffffffffffdd580
ffff8000008013c1:	ff ff ff 
ffff8000008013c4:	48 01 da             	add    rdx,rbx
ffff8000008013c7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:149
    print("int loaded.\n");
ffff8000008013c9:	48 b8 1c d3 ff ff ff 	movabs rax,0xffffffffffffd31c
ffff8000008013d0:	ff ff ff 
ffff8000008013d3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008013d7:	48 89 c7             	mov    rdi,rax
ffff8000008013da:	49 89 df             	mov    r15,rbx
ffff8000008013dd:	48 b8 40 96 fe ff ff 	movabs rax,0xfffffffffffe9640
ffff8000008013e4:	ff ff ff 
ffff8000008013e7:	48 01 d8             	add    rax,rbx
ffff8000008013ea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:151
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
ffff8000008013ec:	49 89 df             	mov    r15,rbx
ffff8000008013ef:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008013f4:	48 ba 91 f4 fd ff ff 	movabs rdx,0xfffffffffffdf491
ffff8000008013fb:	ff ff ff 
ffff8000008013fe:	48 01 da             	add    rdx,rbx
ffff800000801401:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:152
 	init_gdt();
ffff800000801403:	49 89 df             	mov    r15,rbx
ffff800000801406:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080140b:	48 ba fd 76 fe ff ff 	movabs rdx,0xfffffffffffe76fd
ffff800000801412:	ff ff ff 
ffff800000801415:	48 01 da             	add    rdx,rbx
ffff800000801418:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:153
    mount_rootfs();
ffff80000080141a:	49 89 df             	mov    r15,rbx
ffff80000080141d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801422:	48 ba e1 a0 fe ff ff 	movabs rdx,0xfffffffffffea0e1
ffff800000801429:	ff ff ff 
ffff80000080142c:	48 01 da             	add    rdx,rbx
ffff80000080142f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:154
    init_devman();
ffff800000801431:	49 89 df             	mov    r15,rbx
ffff800000801434:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801439:	48 ba e9 1d fe ff ff 	movabs rdx,0xfffffffffffe1de9
ffff800000801440:	ff ff ff 
ffff800000801443:	48 01 da             	add    rdx,rbx
ffff800000801446:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:155
    init_proc();
ffff800000801448:	49 89 df             	mov    r15,rbx
ffff80000080144b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801450:	48 ba 4d 3d fe ff ff 	movabs rdx,0xfffffffffffe3d4d
ffff800000801457:	ff ff ff 
ffff80000080145a:	48 01 da             	add    rdx,rbx
ffff80000080145d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:156
    init_ramfs();
ffff80000080145f:	49 89 df             	mov    r15,rbx
ffff800000801462:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801467:	48 ba 26 b4 fe ff ff 	movabs rdx,0xfffffffffffeb426
ffff80000080146e:	ff ff ff 
ffff800000801471:	48 01 da             	add    rdx,rbx
ffff800000801474:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:161
//    DISK1_FAT32_FS_init();

    //自带驱动
    //init_tty();
    init_kb();
ffff800000801476:	49 89 df             	mov    r15,rbx
ffff800000801479:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080147e:	48 ba 2d bb fe ff ff 	movabs rdx,0xfffffffffffebb2d
ffff800000801485:	ff ff ff 
ffff800000801488:	48 01 da             	add    rdx,rbx
ffff80000080148b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:163
//    init_disk();
    sti();
ffff80000080148d:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:164
    manage_proc_lock=0;
ffff80000080148e:	48 b8 08 fd ff ff ff 	movabs rax,0xfffffffffffffd08
ffff800000801495:	ff ff ff 
ffff800000801498:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080149c:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:167


    move_to_user_mode();
ffff8000008014a2:	49 89 df             	mov    r15,rbx
ffff8000008014a5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008014aa:	48 ba dc 1a ff ff ff 	movabs rdx,0xffffffffffff1adc
ffff8000008014b1:	ff ff ff 
ffff8000008014b4:	48 01 da             	add    rdx,rbx
ffff8000008014b7:	ff d2                	call   rdx
ffff8000008014b9:	48 c7 45 98 1b 00 00 	mov    QWORD PTR [rbp-0x68],0x1b
ffff8000008014c0:	00 
ffff8000008014c1:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff8000008014c8:	00 
ffff8000008014c9:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffff8000008014d0:	00 
ffff8000008014d1:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
ffff8000008014d8:	00 
ffff8000008014d9:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
ffff8000008014e0:	00 00 00 00 
ffff8000008014e4:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
ffff8000008014eb:	00 00 00 00 
ffff8000008014ef:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
ffff8000008014f6:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:191
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline int do_syscall(long func,long a1,long a2,long a3,long a4,long a5,long a6){
        asm volatile(".byte 0x48\n"
ffff8000008014fa:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008014fe:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
ffff800000801502:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff800000801506:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080150a:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffff800000801511:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
ffff800000801518:	4c 8b 8d 68 ff ff ff 	mov    r9,QWORD PTR [rbp-0x98]
ffff80000080151f:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:193
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
        long ret=0;
ffff800000801522:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff800000801529:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:194
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff80000080152d:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:195
        return ret;
ffff800000801534:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:168
    if(do_syscall(SYSCALL_FORK,0,0,0,0,0,0)==0){
ffff80000080153b:	85 c0                	test   eax,eax
ffff80000080153d:	0f 85 ca 00 00 00    	jne    ffff80000080160d <main+0x63f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:169
        char *argv[]={"/mnt/test.exe","gamessis os"};
ffff800000801543:	48 b8 29 d3 ff ff ff 	movabs rax,0xffffffffffffd329
ffff80000080154a:	ff ff ff 
ffff80000080154d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801551:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff800000801558:	48 b8 37 d3 ff ff ff 	movabs rax,0xffffffffffffd337
ffff80000080155f:	ff ff ff 
ffff800000801562:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801566:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:170
        do_syscall(SYSCALL_EXECVE, (long) "/mnt/test.exe", 2, (long) &argv[0], 0, 0, 0);
ffff80000080156d:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff800000801574:	48 ba 29 d3 ff ff ff 	movabs rdx,0xffffffffffffd329
ffff80000080157b:	ff ff ff 
ffff80000080157e:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000801582:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x1c
ffff800000801589:	1c 00 00 00 
ffff80000080158d:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffff800000801594:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x2
ffff80000080159b:	02 00 00 00 
ffff80000080159f:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffff8000008015a6:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffff8000008015ad:	00 00 00 00 
ffff8000008015b1:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff8000008015b8:	00 00 00 00 
ffff8000008015bc:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
ffff8000008015c3:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:191
        asm volatile(".byte 0x48\n"
ffff8000008015c7:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008015ce:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
ffff8000008015d5:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
ffff8000008015dc:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff8000008015e3:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffff8000008015ea:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffff8000008015f1:	4c 8b 8d 30 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd0]
ffff8000008015f8:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:193
        long ret=0;
ffff8000008015fb:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
ffff800000801602:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:194
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff800000801606:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:181 (discriminator 3)
//    init_fat16();

//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
ffff80000080160d:	eb fe                	jmp    ffff80000080160d <main+0x63f>

ffff80000080160f <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
ffff80000080160f:	f3 0f 1e fa          	endbr64 
ffff800000801613:	55                   	push   rbp
ffff800000801614:	48 89 e5             	mov    rbp,rsp
ffff800000801617:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801617 <init_logging+0x8>
ffff80000080161e:	49 bb 69 14 02 00 00 	movabs r11,0x21469
ffff800000801625:	00 00 00 
ffff800000801628:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
ffff80000080162b:	48 ba 80 d5 bd ff ff 	movabs rdx,0xffffffffffbdd580
ffff800000801632:	ff ff ff 
ffff800000801635:	48 c7 04 10 00 80 0b 	mov    QWORD PTR [rax+rdx*1],0xb8000
ffff80000080163c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
ffff80000080163d:	48 ba 88 d5 bd ff ff 	movabs rdx,0xffffffffffbdd588
ffff800000801644:	ff ff ff 
ffff800000801647:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
ffff80000080164e:	48 ba 8c d5 bd ff ff 	movabs rdx,0xffffffffffbdd58c
ffff800000801655:	ff ff ff 
ffff800000801658:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
ffff80000080165f:	90                   	nop
ffff800000801660:	5d                   	pop    rbp
ffff800000801661:	c3                   	ret    

ffff800000801662 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
ffff800000801662:	f3 0f 1e fa          	endbr64 
ffff800000801666:	55                   	push   rbp
ffff800000801667:	48 89 e5             	mov    rbp,rsp
ffff80000080166a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080166a <itoa+0x8>
ffff800000801671:	49 bb 16 14 02 00 00 	movabs r11,0x21416
ffff800000801678:	00 00 00 
ffff80000080167b:	4c 01 d8             	add    rax,r11
ffff80000080167e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801682:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff800000801685:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
ffff800000801688:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080168c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
ffff800000801690:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000801693:	48 98                	cdqe   
ffff800000801695:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
ffff800000801699:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
ffff8000008016a0:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
ffff8000008016a4:	75 27                	jne    ffff8000008016cd <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
ffff8000008016a6:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
ffff8000008016aa:	79 21                	jns    ffff8000008016cd <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
ffff8000008016ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008016b0:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008016b4:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008016b8:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
ffff8000008016bb:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
ffff8000008016c0:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008016c3:	f7 d8                	neg    eax
ffff8000008016c5:	48 98                	cdqe   
ffff8000008016c7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008016cb:	eb 0d                	jmp    ffff8000008016da <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
ffff8000008016cd:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
ffff8000008016d1:	75 07                	jne    ffff8000008016da <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
ffff8000008016d3:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
ffff8000008016da:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008016dd:	48 63 c8             	movsxd rcx,eax
ffff8000008016e0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008016e4:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008016e9:	48 f7 f1             	div    rcx
ffff8000008016ec:	48 89 d0             	mov    rax,rdx
ffff8000008016ef:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffff8000008016f2:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
ffff8000008016f6:	7f 0a                	jg     ffff800000801702 <itoa+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
ffff8000008016f8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008016fb:	83 c0 30             	add    eax,0x30
ffff8000008016fe:	89 c1                	mov    ecx,eax
ffff800000801700:	eb 08                	jmp    ffff80000080170a <itoa+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
ffff800000801702:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000801705:	83 c0 57             	add    eax,0x57
ffff800000801708:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
ffff80000080170a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080170e:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000801712:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff800000801716:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
ffff800000801718:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080171b:	48 63 f0             	movsxd rsi,eax
ffff80000080171e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801722:	ba 00 00 00 00       	mov    edx,0x0
ffff800000801727:	48 f7 f6             	div    rsi
ffff80000080172a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff80000080172e:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000801733:	75 a5                	jne    ffff8000008016da <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
ffff800000801735:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801739:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
ffff80000080173c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801740:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
ffff800000801744:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801748:	48 83 e8 01          	sub    rax,0x1
ffff80000080174c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801750:	eb 2b                	jmp    ffff80000080177d <itoa+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
ffff800000801752:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801756:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801759:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
ffff80000080175c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801760:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000801763:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801767:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
ffff800000801769:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080176d:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
ffff800000801771:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
ffff800000801773:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
ffff800000801778:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff80000080177d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801781:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000801785:	72 cb                	jb     ffff800000801752 <itoa+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
ffff800000801787:	90                   	nop
ffff800000801788:	90                   	nop
ffff800000801789:	5d                   	pop    rbp
ffff80000080178a:	c3                   	ret    

ffff80000080178b <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
ffff80000080178b:	f3 0f 1e fa          	endbr64 
ffff80000080178f:	55                   	push   rbp
ffff800000801790:	48 89 e5             	mov    rbp,rsp
ffff800000801793:	41 57                	push   r15
ffff800000801795:	48 83 ec 28          	sub    rsp,0x28
ffff800000801799:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801799 <putchar+0xe>
ffff8000008017a0:	49 bb e7 12 02 00 00 	movabs r11,0x212e7
ffff8000008017a7:	00 00 00 
ffff8000008017aa:	4c 01 d8             	add    rax,r11
ffff8000008017ad:	89 fa                	mov    edx,edi
ffff8000008017af:	88 55 dc             	mov    BYTE PTR [rbp-0x24],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
ffff8000008017b2:	0f b6 55 dc          	movzx  edx,BYTE PTR [rbp-0x24]
ffff8000008017b6:	88 55 ee             	mov    BYTE PTR [rbp-0x12],dl
ffff8000008017b9:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
ffff8000008017bd:	48 8d 55 ee          	lea    rdx,[rbp-0x12]
ffff8000008017c1:	48 89 d7             	mov    rdi,rdx
ffff8000008017c4:	49 89 c7             	mov    r15,rax
ffff8000008017c7:	48 ba 40 96 fe ff ff 	movabs rdx,0xfffffffffffe9640
ffff8000008017ce:	ff ff ff 
ffff8000008017d1:	48 01 c2             	add    rdx,rax
ffff8000008017d4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
ffff8000008017d6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008017da:	c9                   	leave  
ffff8000008017db:	c3                   	ret    

ffff8000008017dc <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
ffff8000008017dc:	f3 0f 1e fa          	endbr64 
ffff8000008017e0:	55                   	push   rbp
ffff8000008017e1:	48 89 e5             	mov    rbp,rsp
ffff8000008017e4:	41 57                	push   r15
ffff8000008017e6:	53                   	push   rbx
ffff8000008017e7:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff8000008017ee:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008017ee <printf+0x12>
ffff8000008017f5:	49 bb 92 12 02 00 00 	movabs r11,0x21292
ffff8000008017fc:	00 00 00 
ffff8000008017ff:	4c 01 db             	add    rbx,r11
ffff800000801802:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000801809:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000801810:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff800000801817:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff80000080181e:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff800000801825:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff80000080182c:	84 c0                	test   al,al
ffff80000080182e:	74 23                	je     ffff800000801853 <printf+0x77>
ffff800000801830:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff800000801837:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff80000080183b:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff80000080183f:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000801843:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff800000801847:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff80000080184b:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff80000080184f:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
ffff800000801853:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000080185a:	48 89 c7             	mov    rdi,rax
ffff80000080185d:	49 89 df             	mov    r15,rbx
ffff800000801860:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff800000801867:	ff ff ff 
ffff80000080186a:	48 01 d8             	add    rax,rbx
ffff80000080186d:	ff d0                	call   rax
ffff80000080186f:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff800000801874:	0f 8f f2 02 00 00    	jg     ffff800000801b6c <printf+0x390>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc();
ffff80000080187a:	49 89 df             	mov    r15,rbx
ffff80000080187d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801882:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000801889:	ff ff ff 
ffff80000080188c:	48 01 da             	add    rdx,rbx
ffff80000080188f:	ff d2                	call   rdx
ffff800000801891:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
ffff800000801898:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
ffff80000080189f:	00 00 00 
ffff8000008018a2:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
ffff8000008018a9:	00 00 00 
ffff8000008018ac:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff8000008018b0:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffff8000008018b7:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff8000008018be:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
ffff8000008018c5:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008018cc:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff8000008018d3:	e9 27 02 00 00       	jmp    ffff800000801aff <printf+0x323>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008018d8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008018df:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008018e2:	3c 25                	cmp    al,0x25
ffff8000008018e4:	0f 85 e2 01 00 00    	jne    ffff800000801acc <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
ffff8000008018ea:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008018f1:	48 83 c0 01          	add    rax,0x1
ffff8000008018f5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008018f8:	84 c0                	test   al,al
ffff8000008018fa:	0f 84 cc 01 00 00    	je     ffff800000801acc <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
ffff800000801900:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801907:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801908:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080190f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801912:	3c 78                	cmp    al,0x78
ffff800000801914:	75 75                	jne    ffff80000080198b <printf+0x1af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
ffff800000801916:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff80000080191c:	83 f8 2f             	cmp    eax,0x2f
ffff80000080191f:	77 23                	ja     ffff800000801944 <printf+0x168>
ffff800000801921:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801928:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080192e:	89 d2                	mov    edx,edx
ffff800000801930:	48 01 d0             	add    rax,rdx
ffff800000801933:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801939:	83 c2 08             	add    edx,0x8
ffff80000080193c:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801942:	eb 12                	jmp    ffff800000801956 <printf+0x17a>
ffff800000801944:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080194b:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000080194f:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801956:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801958:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
ffff80000080195e:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff800000801964:	48 63 d0             	movsxd rdx,eax
ffff800000801967:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080196e:	48 89 d6             	mov    rsi,rdx
ffff800000801971:	48 89 c7             	mov    rdi,rax
ffff800000801974:	49 89 df             	mov    r15,rbx
ffff800000801977:	48 b8 69 19 ff ff ff 	movabs rax,0xffffffffffff1969
ffff80000080197e:	ff ff ff 
ffff800000801981:	48 01 d8             	add    rax,rbx
ffff800000801984:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801986:	e9 6c 01 00 00       	jmp    ffff800000801af7 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
ffff80000080198b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801992:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801995:	3c 73                	cmp    al,0x73
ffff800000801997:	75 75                	jne    ffff800000801a0e <printf+0x232>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
ffff800000801999:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff80000080199f:	83 f8 2f             	cmp    eax,0x2f
ffff8000008019a2:	77 23                	ja     ffff8000008019c7 <printf+0x1eb>
ffff8000008019a4:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008019ab:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff8000008019b1:	89 d2                	mov    edx,edx
ffff8000008019b3:	48 01 d0             	add    rax,rdx
ffff8000008019b6:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff8000008019bc:	83 c2 08             	add    edx,0x8
ffff8000008019bf:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff8000008019c5:	eb 12                	jmp    ffff8000008019d9 <printf+0x1fd>
ffff8000008019c7:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008019ce:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008019d2:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff8000008019d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008019dc:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
ffff8000008019e3:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff8000008019ea:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019f1:	48 89 d6             	mov    rsi,rdx
ffff8000008019f4:	48 89 c7             	mov    rdi,rax
ffff8000008019f7:	49 89 df             	mov    r15,rbx
ffff8000008019fa:	48 b8 f7 19 ff ff ff 	movabs rax,0xffffffffffff19f7
ffff800000801a01:	ff ff ff 
ffff800000801a04:	48 01 d8             	add    rax,rbx
ffff800000801a07:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801a09:	e9 e9 00 00 00       	jmp    ffff800000801af7 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
ffff800000801a0e:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801a15:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801a18:	3c 64                	cmp    al,0x64
ffff800000801a1a:	75 73                	jne    ffff800000801a8f <printf+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
ffff800000801a1c:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801a22:	83 f8 2f             	cmp    eax,0x2f
ffff800000801a25:	77 23                	ja     ffff800000801a4a <printf+0x26e>
ffff800000801a27:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801a2e:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801a34:	89 d2                	mov    edx,edx
ffff800000801a36:	48 01 d0             	add    rax,rdx
ffff800000801a39:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801a3f:	83 c2 08             	add    edx,0x8
ffff800000801a42:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801a48:	eb 12                	jmp    ffff800000801a5c <printf+0x280>
ffff800000801a4a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801a51:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801a55:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801a5c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801a5f:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
ffff800000801a66:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000801a6d:	89 c2                	mov    edx,eax
ffff800000801a6f:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a76:	89 d6                	mov    esi,edx
ffff800000801a78:	48 89 c7             	mov    rdi,rax
ffff800000801a7b:	49 89 df             	mov    r15,rbx
ffff800000801a7e:	48 b8 ae 18 ff ff ff 	movabs rax,0xffffffffffff18ae
ffff800000801a85:	ff ff ff 
ffff800000801a88:	48 01 d8             	add    rax,rbx
ffff800000801a8b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801a8d:	eb 68                	jmp    ffff800000801af7 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
ffff800000801a8f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801a96:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801a99:	3c 63                	cmp    al,0x63
ffff800000801a9b:	75 02                	jne    ffff800000801a9f <printf+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
ffff800000801a9d:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
ffff800000801a9f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801aa6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801aa9:	0f be d0             	movsx  edx,al
ffff800000801aac:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801ab3:	89 d6                	mov    esi,edx
ffff800000801ab5:	48 89 c7             	mov    rdi,rax
ffff800000801ab8:	49 89 df             	mov    r15,rbx
ffff800000801abb:	48 b8 6f 18 ff ff ff 	movabs rax,0xffffffffffff186f
ffff800000801ac2:	ff ff ff 
ffff800000801ac5:	48 01 d8             	add    rax,rbx
ffff800000801ac8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801aca:	eb 2b                	jmp    ffff800000801af7 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
ffff800000801acc:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801ad3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801ad6:	0f be d0             	movsx  edx,al
ffff800000801ad9:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801ae0:	89 d6                	mov    esi,edx
ffff800000801ae2:	48 89 c7             	mov    rdi,rax
ffff800000801ae5:	49 89 df             	mov    r15,rbx
ffff800000801ae8:	48 b8 6f 18 ff ff ff 	movabs rax,0xffffffffffff186f
ffff800000801aef:	ff ff ff 
ffff800000801af2:	48 01 d8             	add    rax,rbx
ffff800000801af5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801af7:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801afe:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
ffff800000801aff:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801b06:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801b09:	84 c0                	test   al,al
ffff800000801b0b:	0f 85 c7 fd ff ff    	jne    ffff8000008018d8 <printf+0xfc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
ffff800000801b11:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801b18:	48 89 c7             	mov    rdi,rax
ffff800000801b1b:	49 89 df             	mov    r15,rbx
ffff800000801b1e:	48 b8 40 96 fe ff ff 	movabs rax,0xfffffffffffe9640
ffff800000801b25:	ff ff ff 
ffff800000801b28:	48 01 d8             	add    rax,rbx
ffff800000801b2b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
ffff800000801b2d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801b34:	48 89 c7             	mov    rdi,rax
ffff800000801b37:	49 89 df             	mov    r15,rbx
ffff800000801b3a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801b3f:	48 ba a4 0c ff ff ff 	movabs rdx,0xffffffffffff0ca4
ffff800000801b46:	ff ff ff 
ffff800000801b49:	48 01 da             	add    rdx,rbx
ffff800000801b4c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
ffff800000801b4e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801b55:	48 89 c7             	mov    rdi,rax
ffff800000801b58:	49 89 df             	mov    r15,rbx
ffff800000801b5b:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000801b62:	ff ff ff 
ffff800000801b65:	48 01 d8             	add    rax,rbx
ffff800000801b68:	ff d0                	call   rax
ffff800000801b6a:	eb 01                	jmp    ffff800000801b6d <printf+0x391>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
ffff800000801b6c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
ffff800000801b6d:	48 81 c4 00 01 00 00 	add    rsp,0x100
ffff800000801b74:	5b                   	pop    rbx
ffff800000801b75:	41 5f                	pop    r15
ffff800000801b77:	5d                   	pop    rbp
ffff800000801b78:	c3                   	ret    

ffff800000801b79 <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:27
//以kb为单位
int high_mem_base=1024;
int mmap_t_i=0;

stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
ffff800000801b79:	f3 0f 1e fa          	endbr64 
ffff800000801b7d:	55                   	push   rbp
ffff800000801b7e:	48 89 e5             	mov    rbp,rsp
ffff800000801b81:	41 57                	push   r15
ffff800000801b83:	48 83 ec 28          	sub    rsp,0x28
ffff800000801b87:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801b87 <mmap+0xe>
ffff800000801b8e:	49 bb f9 0e 02 00 00 	movabs r11,0x20ef9
ffff800000801b95:	00 00 00 
ffff800000801b98:	4c 01 d8             	add    rax,r11
ffff800000801b9b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801b9f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801ba3:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:28
    return smmap(pa,la,attr,current->pml4);
ffff800000801ba6:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000801bad:	ff ff ff 
ffff800000801bb0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801bb4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000801bb7:	48 8b 8a e0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xe0]
ffff800000801bbe:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801bc1:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000801bc5:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff800000801bc9:	49 89 c7             	mov    r15,rax
ffff800000801bcc:	49 b8 62 f1 fd ff ff 	movabs r8,0xfffffffffffdf162
ffff800000801bd3:	ff ff ff 
ffff800000801bd6:	49 01 c0             	add    r8,rax
ffff800000801bd9:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:58
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
ffff800000801bdc:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801be0:	c9                   	leave  
ffff800000801be1:	c3                   	ret    

ffff800000801be2 <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:60
stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
ffff800000801be2:	f3 0f 1e fa          	endbr64 
ffff800000801be6:	55                   	push   rbp
ffff800000801be7:	48 89 e5             	mov    rbp,rsp
ffff800000801bea:	41 57                	push   r15
ffff800000801bec:	53                   	push   rbx
ffff800000801bed:	48 83 ec 40          	sub    rsp,0x40
ffff800000801bf1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801bf1 <smmap+0xf>
ffff800000801bf8:	49 bb 8f 0e 02 00 00 	movabs r11,0x20e8f
ffff800000801bff:	00 00 00 
ffff800000801c02:	4c 01 db             	add    rbx,r11
ffff800000801c05:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801c09:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000801c0d:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffff800000801c10:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:63
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
ffff800000801c14:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000801c1b:	7f 00 00 
ffff800000801c1e:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff800000801c22:	76 0e                	jbe    ffff800000801c32 <smmap+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
        la&=~0xffff000000000000ul;
ffff800000801c24:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
ffff800000801c2b:	ff 00 00 
ffff800000801c2e:	48 21 45 c0          	and    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:66
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
ffff800000801c32:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801c36:	48 c1 e8 27          	shr    rax,0x27
ffff800000801c3a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801c41:	00 
ffff800000801c42:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801c46:	48 01 d0             	add    rax,rdx
ffff800000801c49:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801c4c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:67
    int pml4i=la / PML4E_SIZE;
ffff800000801c50:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801c54:	48 c1 e8 27          	shr    rax,0x27
ffff800000801c58:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:68
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
ffff800000801c5b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c5f:	83 e0 01             	and    eax,0x1
ffff800000801c62:	48 85 c0             	test   rax,rax
ffff800000801c65:	75 6f                	jne    ffff800000801cd6 <smmap+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:70
    {
        pdptp=(page_item*) kmalloc();
ffff800000801c67:	49 89 df             	mov    r15,rbx
ffff800000801c6a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801c6f:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000801c76:	ff ff ff 
ffff800000801c79:	48 01 da             	add    rdx,rbx
ffff800000801c7c:	ff d2                	call   rdx
ffff800000801c7e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:71
        memset(pdptp,0,4096);
ffff800000801c82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c86:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801c8b:	be 00 00 00 00       	mov    esi,0x0
ffff800000801c90:	48 89 c7             	mov    rdi,rax
ffff800000801c93:	49 89 df             	mov    r15,rbx
ffff800000801c96:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000801c9d:	ff ff ff 
ffff800000801ca0:	48 01 d8             	add    rax,rbx
ffff800000801ca3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:73
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4p[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
ffff800000801ca5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801ca9:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801cb0:	7f 00 00 
ffff800000801cb3:	48 21 d0             	and    rax,rdx
ffff800000801cb6:	48 89 c1             	mov    rcx,rax
ffff800000801cb9:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801cbc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000801cbf:	48 98                	cdqe   
ffff800000801cc1:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801cc8:	00 
ffff800000801cc9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801ccd:	48 01 f0             	add    rax,rsi
ffff800000801cd0:	48 09 ca             	or     rdx,rcx
ffff800000801cd3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:75
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
ffff800000801cd6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801cda:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801ce1:	7f 00 00 
ffff800000801ce4:	48 21 c2             	and    rdx,rax
ffff800000801ce7:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801cee:	80 ff ff 
ffff800000801cf1:	48 09 d0             	or     rax,rdx
ffff800000801cf4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:78

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
ffff800000801cf8:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
ffff800000801cff:	00 00 00 
ffff800000801d02:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000801d06:	48 c1 e8 1e          	shr    rax,0x1e
ffff800000801d0a:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
ffff800000801d0d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801d10:	48 98                	cdqe   
ffff800000801d12:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801d19:	00 
ffff800000801d1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801d1e:	48 01 d0             	add    rax,rdx
ffff800000801d21:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801d24:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:81
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
ffff800000801d28:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d2c:	83 e0 01             	and    eax,0x1
ffff800000801d2f:	48 85 c0             	test   rax,rax
ffff800000801d32:	75 6f                	jne    ffff800000801da3 <smmap+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:83
    {
        pdp=(page_item*) kmalloc();
ffff800000801d34:	49 89 df             	mov    r15,rbx
ffff800000801d37:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801d3c:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000801d43:	ff ff ff 
ffff800000801d46:	48 01 da             	add    rdx,rbx
ffff800000801d49:	ff d2                	call   rdx
ffff800000801d4b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:84
        memset(pdp,0,4096);
ffff800000801d4f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d53:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801d58:	be 00 00 00 00       	mov    esi,0x0
ffff800000801d5d:	48 89 c7             	mov    rdi,rax
ffff800000801d60:	49 89 df             	mov    r15,rbx
ffff800000801d63:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000801d6a:	ff ff ff 
ffff800000801d6d:	48 01 d8             	add    rax,rbx
ffff800000801d70:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
ffff800000801d72:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d76:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801d7d:	7f 00 00 
ffff800000801d80:	48 21 d0             	and    rax,rdx
ffff800000801d83:	48 89 c1             	mov    rcx,rax
ffff800000801d86:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801d89:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801d8c:	48 98                	cdqe   
ffff800000801d8e:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801d95:	00 
ffff800000801d96:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801d9a:	48 01 f0             	add    rax,rsi
ffff800000801d9d:	48 09 ca             	or     rdx,rcx
ffff800000801da0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:87
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
ffff800000801da3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801da7:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801dae:	7f 00 00 
ffff800000801db1:	48 21 c2             	and    rdx,rax
ffff800000801db4:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801dbb:	80 ff ff 
ffff800000801dbe:	48 09 d0             	or     rax,rdx
ffff800000801dc1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:90

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
ffff800000801dc5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801dc9:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801dce:	48 c1 e8 15          	shr    rax,0x15
ffff800000801dd2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801dd9:	00 
ffff800000801dda:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801dde:	48 01 d0             	add    rax,rdx
ffff800000801de1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801de4:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91
    if(!((unsigned long long)pt & PAGE_PRESENT))
ffff800000801de8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801dec:	83 e0 01             	and    eax,0x1
ffff800000801def:	48 85 c0             	test   rax,rax
ffff800000801df2:	75 77                	jne    ffff800000801e6b <smmap+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:93
    {
        pt=(page_item*) kmalloc();
ffff800000801df4:	49 89 df             	mov    r15,rbx
ffff800000801df7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801dfc:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000801e03:	ff ff ff 
ffff800000801e06:	48 01 da             	add    rdx,rbx
ffff800000801e09:	ff d2                	call   rdx
ffff800000801e0b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:94
        memset(pt,0,4096);
ffff800000801e0f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801e13:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801e18:	be 00 00 00 00       	mov    esi,0x0
ffff800000801e1d:	48 89 c7             	mov    rdi,rax
ffff800000801e20:	49 89 df             	mov    r15,rbx
ffff800000801e23:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000801e2a:	ff ff ff 
ffff800000801e2d:	48 01 d8             	add    rax,rbx
ffff800000801e30:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:95
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
ffff800000801e32:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801e36:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801e3d:	7f 00 00 
ffff800000801e40:	48 21 d0             	and    rax,rdx
ffff800000801e43:	48 89 c1             	mov    rcx,rax
ffff800000801e46:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801e49:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801e4d:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801e52:	48 c1 e8 15          	shr    rax,0x15
ffff800000801e56:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801e5d:	00 
ffff800000801e5e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801e62:	48 01 f0             	add    rax,rsi
ffff800000801e65:	48 09 ca             	or     rdx,rcx
ffff800000801e68:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:97
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
ffff800000801e6b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801e6f:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801e76:	7f 00 00 
ffff800000801e79:	48 21 c2             	and    rdx,rax
ffff800000801e7c:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801e83:	80 ff ff 
ffff800000801e86:	48 09 d0             	or     rax,rdx
ffff800000801e89:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:100

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
ffff800000801e8d:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000801e90:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000801e94:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
ffff800000801e9a:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000801e9e:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000801ea5:	00 
ffff800000801ea6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000801eaa:	48 01 ca             	add    rdx,rcx
ffff800000801ead:	48 0b 45 c8          	or     rax,QWORD PTR [rbp-0x38]
ffff800000801eb1:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101
    return NORMAL;
ffff800000801eb4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:102
}
ffff800000801eb9:	48 83 c4 40          	add    rsp,0x40
ffff800000801ebd:	5b                   	pop    rbx
ffff800000801ebe:	41 5f                	pop    r15
ffff800000801ec0:	5d                   	pop    rbp
ffff800000801ec1:	c3                   	ret    

ffff800000801ec2 <mdemap>:
mdemap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:105

stat_t mdemap(addr_t la)
{
ffff800000801ec2:	f3 0f 1e fa          	endbr64 
ffff800000801ec6:	55                   	push   rbp
ffff800000801ec7:	48 89 e5             	mov    rbp,rsp
ffff800000801eca:	41 57                	push   r15
ffff800000801ecc:	48 83 ec 18          	sub    rsp,0x18
ffff800000801ed0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801ed0 <mdemap+0xe>
ffff800000801ed7:	49 bb b0 0b 02 00 00 	movabs r11,0x20bb0
ffff800000801ede:	00 00 00 
ffff800000801ee1:	4c 01 d8             	add    rax,r11
ffff800000801ee4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106
    return mmap(0l,la,0);
ffff800000801ee8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000801eec:	ba 00 00 00 00       	mov    edx,0x0
ffff800000801ef1:	48 89 ce             	mov    rsi,rcx
ffff800000801ef4:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801ef9:	49 89 c7             	mov    r15,rax
ffff800000801efc:	48 b9 f9 f0 fd ff ff 	movabs rcx,0xfffffffffffdf0f9
ffff800000801f03:	ff ff ff 
ffff800000801f06:	48 01 c1             	add    rcx,rax
ffff800000801f09:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:107
}
ffff800000801f0b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801f0f:	c9                   	leave  
ffff800000801f10:	c3                   	ret    

ffff800000801f11 <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:109
int init_paging()
{
ffff800000801f11:	f3 0f 1e fa          	endbr64 
ffff800000801f15:	55                   	push   rbp
ffff800000801f16:	48 89 e5             	mov    rbp,rsp
ffff800000801f19:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801f19 <init_paging+0x8>
ffff800000801f20:	49 bb 67 0b 02 00 00 	movabs r11,0x20b67
ffff800000801f27:	00 00 00 
ffff800000801f2a:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:142
//    set_page_item(pml4,PDPT_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //把低512GB的空间取消映射，留给用户
    pml4[0]=0;
ffff800000801f2d:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff800000801f34:	ff ff ff 
ffff800000801f37:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801f3b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801f3e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:144
    #endif
}
ffff800000801f45:	90                   	nop
ffff800000801f46:	5d                   	pop    rbp
ffff800000801f47:	c3                   	ret    

ffff800000801f48 <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:146
void set_high_mem_base(int base)
{
ffff800000801f48:	f3 0f 1e fa          	endbr64 
ffff800000801f4c:	55                   	push   rbp
ffff800000801f4d:	48 89 e5             	mov    rbp,rsp
ffff800000801f50:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801f50 <set_high_mem_base+0x8>
ffff800000801f57:	49 bb 30 0b 02 00 00 	movabs r11,0x20b30
ffff800000801f5e:	00 00 00 
ffff800000801f61:	4c 01 d8             	add    rax,r11
ffff800000801f64:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
    high_mem_base=base;
ffff800000801f67:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff800000801f6e:	ff ff ff 
ffff800000801f71:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801f75:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801f78:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:148
}
ffff800000801f7a:	90                   	nop
ffff800000801f7b:	5d                   	pop    rbp
ffff800000801f7c:	c3                   	ret    

ffff800000801f7d <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:150
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
ffff800000801f7d:	f3 0f 1e fa          	endbr64 
ffff800000801f81:	55                   	push   rbp
ffff800000801f82:	48 89 e5             	mov    rbp,rsp
ffff800000801f85:	41 57                	push   r15
ffff800000801f87:	48 83 ec 28          	sub    rsp,0x28
ffff800000801f8b:	4c 8d 05 f9 ff ff ff 	lea    r8,[rip+0xfffffffffffffff9]        # ffff800000801f8b <set_mem_area+0xe>
ffff800000801f92:	49 bb f5 0a 02 00 00 	movabs r11,0x20af5
ffff800000801f99:	00 00 00 
ffff800000801f9c:	4d 01 d8             	add    r8,r11
ffff800000801f9f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801fa3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801fa7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
    mmap_struct[mmap_t_i].base=base;
ffff800000801fab:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff800000801fb2:	ff ff ff 
ffff800000801fb5:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801fb9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801fbb:	48 ba 80 fd ff ff ff 	movabs rdx,0xfffffffffffffd80
ffff800000801fc2:	ff ff ff 
ffff800000801fc5:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801fc9:	48 63 d0             	movsxd rdx,eax
ffff800000801fcc:	48 89 d0             	mov    rax,rdx
ffff800000801fcf:	48 01 c0             	add    rax,rax
ffff800000801fd2:	48 01 d0             	add    rax,rdx
ffff800000801fd5:	48 c1 e0 03          	shl    rax,0x3
ffff800000801fd9:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000801fdd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801fe1:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:152
    mmap_struct[mmap_t_i].len=len;
ffff800000801fe4:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff800000801feb:	ff ff ff 
ffff800000801fee:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801ff2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801ff4:	48 ba 80 fd ff ff ff 	movabs rdx,0xfffffffffffffd80
ffff800000801ffb:	ff ff ff 
ffff800000801ffe:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000802002:	48 63 d0             	movsxd rdx,eax
ffff800000802005:	48 89 d0             	mov    rax,rdx
ffff800000802008:	48 01 c0             	add    rax,rax
ffff80000080200b:	48 01 d0             	add    rax,rdx
ffff80000080200e:	48 c1 e0 03          	shl    rax,0x3
ffff800000802012:	48 01 c8             	add    rax,rcx
ffff800000802015:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000802019:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080201d:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:153
    mmap_struct[mmap_t_i++].type=type;
ffff800000802020:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff800000802027:	ff ff ff 
ffff80000080202a:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080202e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802030:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000802033:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080203a:	ff ff ff 
ffff80000080203d:	49 8b 14 10          	mov    rdx,QWORD PTR [r8+rdx*1]
ffff800000802041:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000802043:	48 ba 80 fd ff ff ff 	movabs rdx,0xfffffffffffffd80
ffff80000080204a:	ff ff ff 
ffff80000080204d:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000802051:	48 63 d0             	movsxd rdx,eax
ffff800000802054:	48 89 d0             	mov    rax,rdx
ffff800000802057:	48 01 c0             	add    rax,rax
ffff80000080205a:	48 01 d0             	add    rax,rdx
ffff80000080205d:	48 c1 e0 03          	shl    rax,0x3
ffff800000802061:	48 01 c8             	add    rax,rcx
ffff800000802064:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000802068:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080206c:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
    comprintf("mem info:base=0x%l,len=0x%l,type=%d\n",base,len,type);
ffff80000080206f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000802073:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000802077:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080207b:	48 89 c6             	mov    rsi,rax
ffff80000080207e:	48 b8 90 d3 ff ff ff 	movabs rax,0xffffffffffffd390
ffff800000802085:	ff ff ff 
ffff800000802088:	49 8d 04 00          	lea    rax,[r8+rax*1]
ffff80000080208c:	48 89 c7             	mov    rdi,rax
ffff80000080208f:	4d 89 c7             	mov    r15,r8
ffff800000802092:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802097:	49 b9 a4 0c ff ff ff 	movabs r9,0xffffffffffff0ca4
ffff80000080209e:	ff ff ff 
ffff8000008020a1:	4d 01 c1             	add    r9,r8
ffff8000008020a4:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155
}
ffff8000008020a7:	90                   	nop
ffff8000008020a8:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008020ac:	c9                   	leave  
ffff8000008020ad:	c3                   	ret    

ffff8000008020ae <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157
addr_t kmalloc()
{
ffff8000008020ae:	f3 0f 1e fa          	endbr64 
ffff8000008020b2:	55                   	push   rbp
ffff8000008020b3:	48 89 e5             	mov    rbp,rsp
ffff8000008020b6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008020b6 <kmalloc+0x8>
ffff8000008020bd:	49 bb ca 09 02 00 00 	movabs r11,0x209ca
ffff8000008020c4:	00 00 00 
ffff8000008020c7:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:158
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff8000008020ca:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008020d1:	e9 c6 00 00 00       	jmp    ffff80000080219c <kmalloc+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:160
    {
        for(int j=0;j<32;j++)
ffff8000008020d6:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff8000008020dd:	e9 ac 00 00 00       	jmp    ffff80000080218e <kmalloc+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:162
        {
            if(!(vmalloc_map[i]&(1<<j)))
ffff8000008020e2:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008020e9:	ff ff ff 
ffff8000008020ec:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008020f0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008020f3:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008020f6:	48 63 d2             	movsxd rdx,edx
ffff8000008020f9:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008020fd:	48 01 ca             	add    rdx,rcx
ffff800000802100:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802102:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802105:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080210a:	89 d1                	mov    ecx,edx
ffff80000080210c:	d3 e7                	shl    edi,cl
ffff80000080210e:	89 fa                	mov    edx,edi
ffff800000802110:	21 f2                	and    edx,esi
ffff800000802112:	85 d2                	test   edx,edx
ffff800000802114:	75 74                	jne    ffff80000080218a <kmalloc+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:164
            {
                vmalloc_map[i]|=(1<<j);
ffff800000802116:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff80000080211d:	ff ff ff 
ffff800000802120:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802124:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802127:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080212a:	48 63 d2             	movsxd rdx,edx
ffff80000080212d:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802131:	48 01 ca             	add    rdx,rcx
ffff800000802134:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802136:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802139:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080213e:	89 d1                	mov    ecx,edx
ffff800000802140:	d3 e7                	shl    edi,cl
ffff800000802142:	89 fa                	mov    edx,edi
ffff800000802144:	89 d1                	mov    ecx,edx
ffff800000802146:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff80000080214d:	ff ff ff 
ffff800000802150:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000802154:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802157:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080215a:	48 98                	cdqe   
ffff80000080215c:	48 c1 e0 02          	shl    rax,0x2
ffff800000802160:	48 01 d0             	add    rax,rdx
ffff800000802163:	09 ce                	or     esi,ecx
ffff800000802165:	89 f2                	mov    edx,esi
ffff800000802167:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:165
                return VMALLOC_BASE+(i*32+j)*0x1000;
ffff800000802169:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080216c:	c1 e0 05             	shl    eax,0x5
ffff80000080216f:	89 c2                	mov    edx,eax
ffff800000802171:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802174:	01 d0                	add    eax,edx
ffff800000802176:	c1 e0 0c             	shl    eax,0xc
ffff800000802179:	48 98                	cdqe   
ffff80000080217b:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff800000802182:	80 ff ff 
ffff800000802185:	48 01 d0             	add    rax,rdx
ffff800000802188:	eb 1c                	jmp    ffff8000008021a6 <kmalloc+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:160 (discriminator 2)
        for(int j=0;j<32;j++)
ffff80000080218a:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:160 (discriminator 1)
ffff80000080218e:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff800000802192:	0f 8e 4a ff ff ff    	jle    ffff8000008020e2 <kmalloc+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:158 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802198:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:158 (discriminator 1)
ffff80000080219c:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff8000008021a0:	0f 8e 30 ff ff ff    	jle    ffff8000008020d6 <kmalloc+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:169
            }
        }
    }
}
ffff8000008021a6:	5d                   	pop    rbp
ffff8000008021a7:	c3                   	ret    

ffff8000008021a8 <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:171
addr_t kmallocat(addr_t addr,int pgc)
{
ffff8000008021a8:	f3 0f 1e fa          	endbr64 
ffff8000008021ac:	55                   	push   rbp
ffff8000008021ad:	48 89 e5             	mov    rbp,rsp
ffff8000008021b0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008021b0 <kmallocat+0x8>
ffff8000008021b7:	49 bb d0 08 02 00 00 	movabs r11,0x208d0
ffff8000008021be:	00 00 00 
ffff8000008021c1:	4c 01 d8             	add    rax,r11
ffff8000008021c4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008021c8:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
ffff8000008021cb:	48 b9 00 00 00 fe ff 	movabs rcx,0x7ffffe000000
ffff8000008021d2:	7f 00 00 
ffff8000008021d5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008021d9:	48 01 ca             	add    rdx,rcx
ffff8000008021dc:	48 c1 ea 0c          	shr    rdx,0xc
ffff8000008021e0:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:173
    if(addr==0){
ffff8000008021e3:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff8000008021e8:	0f 85 3f 01 00 00    	jne    ffff80000080232d <kmallocat+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
        int l=0,p=0;
ffff8000008021ee:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008021f5:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
        for(int i=0;i<kmalloc_pgc;i++){
ffff8000008021fc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff800000802203:	eb 63                	jmp    ffff800000802268 <kmallocat+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
ffff800000802205:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff80000080220c:	ff ff ff 
ffff80000080220f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802213:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000802216:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000802219:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff80000080221c:	85 d2                	test   edx,edx
ffff80000080221e:	0f 48 d1             	cmovs  edx,ecx
ffff800000802221:	c1 fa 05             	sar    edx,0x5
ffff800000802224:	48 63 d2             	movsxd rdx,edx
ffff800000802227:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080222b:	48 01 f2             	add    rdx,rsi
ffff80000080222e:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802230:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000802233:	83 e2 1f             	and    edx,0x1f
ffff800000802236:	89 d1                	mov    ecx,edx
ffff800000802238:	d3 ee                	shr    esi,cl
ffff80000080223a:	89 f2                	mov    edx,esi
ffff80000080223c:	83 e2 01             	and    edx,0x1
ffff80000080223f:	85 d2                	test   edx,edx
ffff800000802241:	75 12                	jne    ffff800000802255 <kmallocat+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:177
                if(l==0)
ffff800000802243:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000802247:	75 06                	jne    ffff80000080224f <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
                    p=i;//开头空页
ffff800000802249:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080224c:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
                l++;
ffff80000080224f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffff800000802253:	eb 07                	jmp    ffff80000080225c <kmallocat+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
            } else
                l=0;
ffff800000802255:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:182
            if(l==pgc)break;
ffff80000080225c:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080225f:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802262:	74 1b                	je     ffff80000080227f <kmallocat+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
ffff800000802264:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175 (discriminator 1)
ffff800000802268:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff80000080226f:	ff ff ff 
ffff800000802272:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802276:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802278:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080227b:	7c 88                	jl     ffff800000802205 <kmallocat+0x5d>
ffff80000080227d:	eb 01                	jmp    ffff800000802280 <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:182
            if(l==pgc)break;
ffff80000080227f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184
        }
        if(l<pgc)return -1;
ffff800000802280:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802283:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802286:	7d 0c                	jge    ffff800000802294 <kmallocat+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184 (discriminator 1)
ffff800000802288:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080228f:	e9 87 01 00 00       	jmp    ffff80000080241b <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186
        //开始占用
        for(int i=0;i<pgc;i++){
ffff800000802294:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffff80000080229b:	eb 6e                	jmp    ffff80000080230b <kmallocat+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:187 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
ffff80000080229d:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008022a4:	ff ff ff 
ffff8000008022a7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008022ab:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff8000008022ae:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff8000008022b1:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008022b4:	01 ca                	add    edx,ecx
ffff8000008022b6:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008022b9:	85 d2                	test   edx,edx
ffff8000008022bb:	0f 48 d1             	cmovs  edx,ecx
ffff8000008022be:	c1 fa 05             	sar    edx,0x5
ffff8000008022c1:	89 d6                	mov    esi,edx
ffff8000008022c3:	48 63 d6             	movsxd rdx,esi
ffff8000008022c6:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022ca:	48 01 fa             	add    rdx,rdi
ffff8000008022cd:	8b 3a                	mov    edi,DWORD PTR [rdx]
ffff8000008022cf:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff8000008022d2:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008022d5:	01 ca                	add    edx,ecx
ffff8000008022d7:	83 e2 1f             	and    edx,0x1f
ffff8000008022da:	41 b8 01 00 00 00    	mov    r8d,0x1
ffff8000008022e0:	89 d1                	mov    ecx,edx
ffff8000008022e2:	41 d3 e0             	shl    r8d,cl
ffff8000008022e5:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008022ec:	ff ff ff 
ffff8000008022ef:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008022f3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008022f6:	48 63 d6             	movsxd rdx,esi
ffff8000008022f9:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022fd:	48 01 ca             	add    rdx,rcx
ffff800000802300:	44 09 c7             	or     edi,r8d
ffff800000802303:	89 f9                	mov    ecx,edi
ffff800000802305:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186 (discriminator 3)
        for(int i=0;i<pgc;i++){
ffff800000802307:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186 (discriminator 1)
ffff80000080230b:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080230e:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802311:	7c 8a                	jl     ffff80000080229d <kmallocat+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:189
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
ffff800000802313:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802316:	c1 e0 0c             	shl    eax,0xc
ffff800000802319:	48 98                	cdqe   
ffff80000080231b:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff800000802322:	80 ff ff 
ffff800000802325:	48 01 d0             	add    rax,rdx
ffff800000802328:	e9 ee 00 00 00       	jmp    ffff80000080241b <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:191
    }
    for(int i=0;i<pgc;i++){
ffff80000080232d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802334:	eb 5c                	jmp    ffff800000802392 <kmallocat+0x1ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:192
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
ffff800000802336:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff80000080233d:	ff ff ff 
ffff800000802340:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802344:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000802347:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff80000080234a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080234d:	01 ca                	add    edx,ecx
ffff80000080234f:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff800000802352:	85 d2                	test   edx,edx
ffff800000802354:	0f 48 d1             	cmovs  edx,ecx
ffff800000802357:	c1 fa 05             	sar    edx,0x5
ffff80000080235a:	48 63 d2             	movsxd rdx,edx
ffff80000080235d:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802361:	48 01 f2             	add    rdx,rsi
ffff800000802364:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802366:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802369:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080236c:	01 ca                	add    edx,ecx
ffff80000080236e:	83 e2 1f             	and    edx,0x1f
ffff800000802371:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802376:	89 d1                	mov    ecx,edx
ffff800000802378:	d3 e7                	shl    edi,cl
ffff80000080237a:	89 fa                	mov    edx,edi
ffff80000080237c:	21 f2                	and    edx,esi
ffff80000080237e:	85 d2                	test   edx,edx
ffff800000802380:	74 0c                	je     ffff80000080238e <kmallocat+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193
            return -1;
ffff800000802382:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802389:	e9 8d 00 00 00       	jmp    ffff80000080241b <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:191 (discriminator 2)
    for(int i=0;i<pgc;i++){
ffff80000080238e:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:191 (discriminator 1)
ffff800000802392:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802395:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802398:	7c 9c                	jl     ffff800000802336 <kmallocat+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196
    }
    //
    for(int i=0;i<pgc;i++){
ffff80000080239a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008023a1:	eb 6c                	jmp    ffff80000080240f <kmallocat+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:197 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
ffff8000008023a3:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008023aa:	ff ff ff 
ffff8000008023ad:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008023b1:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008023b4:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
ffff8000008023b7:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008023ba:	01 f2                	add    edx,esi
ffff8000008023bc:	48 63 d2             	movsxd rdx,edx
ffff8000008023bf:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008023c3:	48 01 ca             	add    rdx,rcx
ffff8000008023c6:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008023c8:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff8000008023cb:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008023ce:	01 ca                	add    edx,ecx
ffff8000008023d0:	83 e2 1f             	and    edx,0x1f
ffff8000008023d3:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008023d8:	89 d1                	mov    ecx,edx
ffff8000008023da:	d3 e7                	shl    edi,cl
ffff8000008023dc:	89 fa                	mov    edx,edi
ffff8000008023de:	41 89 d0             	mov    r8d,edx
ffff8000008023e1:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008023e8:	ff ff ff 
ffff8000008023eb:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008023ef:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008023f2:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
ffff8000008023f5:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008023f8:	01 fa                	add    edx,edi
ffff8000008023fa:	48 63 d2             	movsxd rdx,edx
ffff8000008023fd:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802401:	48 01 ca             	add    rdx,rcx
ffff800000802404:	44 09 c6             	or     esi,r8d
ffff800000802407:	89 f1                	mov    ecx,esi
ffff800000802409:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff80000080240b:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196 (discriminator 1)
ffff80000080240f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802412:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802415:	7c 8c                	jl     ffff8000008023a3 <kmallocat+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:199
    }
    return addr;
ffff800000802417:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:201

}
ffff80000080241b:	5d                   	pop    rbp
ffff80000080241c:	c3                   	ret    

ffff80000080241d <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:204

int kmfree(addr_t ptr)
{
ffff80000080241d:	f3 0f 1e fa          	endbr64 
ffff800000802421:	55                   	push   rbp
ffff800000802422:	48 89 e5             	mov    rbp,rsp
ffff800000802425:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802425 <kmfree+0x8>
ffff80000080242c:	49 bb 5b 06 02 00 00 	movabs r11,0x2065b
ffff800000802433:	00 00 00 
ffff800000802436:	4c 01 da             	add    rdx,r11
ffff800000802439:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:205
    int num=ptr/PAGE_SIZE;
ffff80000080243d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802441:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802445:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:206
    int n=num/32;
ffff800000802448:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080244b:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff80000080244e:	85 c0                	test   eax,eax
ffff800000802450:	0f 48 c1             	cmovs  eax,ecx
ffff800000802453:	c1 f8 05             	sar    eax,0x5
ffff800000802456:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207
    int r=num%32;
ffff800000802459:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080245c:	89 c1                	mov    ecx,eax
ffff80000080245e:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802461:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802464:	01 c8                	add    eax,ecx
ffff800000802466:	83 e0 1f             	and    eax,0x1f
ffff800000802469:	29 c8                	sub    eax,ecx
ffff80000080246b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
ffff80000080246e:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff800000802475:	ff ff ff 
ffff800000802478:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080247c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080247f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802482:	48 98                	cdqe   
ffff800000802484:	48 c1 e0 02          	shl    rax,0x2
ffff800000802488:	48 01 c8             	add    rax,rcx
ffff80000080248b:	8b 30                	mov    esi,DWORD PTR [rax]
ffff80000080248d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802490:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802495:	89 c1                	mov    ecx,eax
ffff800000802497:	d3 e7                	shl    edi,cl
ffff800000802499:	89 f8                	mov    eax,edi
ffff80000080249b:	f7 d0                	not    eax
ffff80000080249d:	89 c1                	mov    ecx,eax
ffff80000080249f:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff8000008024a6:	ff ff ff 
ffff8000008024a9:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff8000008024ad:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008024b0:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008024b3:	48 98                	cdqe   
ffff8000008024b5:	48 c1 e0 02          	shl    rax,0x2
ffff8000008024b9:	48 01 d0             	add    rax,rdx
ffff8000008024bc:	21 ce                	and    esi,ecx
ffff8000008024be:	89 f2                	mov    edx,esi
ffff8000008024c0:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
}
ffff8000008024c2:	90                   	nop
ffff8000008024c3:	5d                   	pop    rbp
ffff8000008024c4:	c3                   	ret    

ffff8000008024c5 <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
void page_err(){
ffff8000008024c5:	f3 0f 1e fa          	endbr64 
ffff8000008024c9:	55                   	push   rbp
ffff8000008024ca:	48 89 e5             	mov    rbp,rsp
ffff8000008024cd:	41 57                	push   r15
ffff8000008024cf:	41 55                	push   r13
ffff8000008024d1:	41 54                	push   r12
ffff8000008024d3:	53                   	push   rbx
ffff8000008024d4:	48 83 ec 20          	sub    rsp,0x20
ffff8000008024d8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008024d8 <page_err+0x13>
ffff8000008024df:	49 bb a8 05 02 00 00 	movabs r11,0x205a8
ffff8000008024e6:	00 00 00 
ffff8000008024e9:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:211
    asm("cli");
ffff8000008024ec:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:212
    printf("page err\n");
ffff8000008024ed:	48 b8 b5 d3 ff ff ff 	movabs rax,0xffffffffffffd3b5
ffff8000008024f4:	ff ff ff 
ffff8000008024f7:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008024fb:	48 89 c7             	mov    rdi,rax
ffff8000008024fe:	49 89 df             	mov    r15,rbx
ffff800000802501:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802506:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080250d:	ff ff ff 
ffff800000802510:	48 01 da             	add    rdx,rbx
ffff800000802513:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:213
    unsigned long err_code=0,l_addr=0;
ffff800000802515:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080251c:	00 
ffff80000080251d:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000802524:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:214
    asm volatile("mov 0(%%rbp),%0":"=r"(err_code));
ffff800000802525:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
ffff800000802529:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215
    asm volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
ffff80000080252d:	0f 20 d0             	mov    rax,cr2
ffff800000802530:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:216
    int p=err_code&1;
ffff800000802534:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802538:	83 e0 01             	and    eax,0x1
ffff80000080253b:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:218

    if(!p)
ffff80000080253e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000802542:	75 72                	jne    ffff8000008025b6 <page_err+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:225
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        //在进程的页表中申请新页
        smmap(get_phyaddr(req_a_page()),l_addr&~0xfff,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff800000802544:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080254b:	ff ff ff 
ffff80000080254e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802552:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802555:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff80000080255c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000802560:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000802566:	49 89 c5             	mov    r13,rax
ffff800000802569:	49 89 df             	mov    r15,rbx
ffff80000080256c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802571:	48 ba 28 01 fe ff ff 	movabs rdx,0xfffffffffffe0128
ffff800000802578:	ff ff ff 
ffff80000080257b:	48 01 da             	add    rdx,rbx
ffff80000080257e:	ff d2                	call   rdx
ffff800000802580:	89 c7                	mov    edi,eax
ffff800000802582:	49 89 df             	mov    r15,rbx
ffff800000802585:	48 b8 15 05 fe ff ff 	movabs rax,0xfffffffffffe0515
ffff80000080258c:	ff ff ff 
ffff80000080258f:	48 01 d8             	add    rax,rbx
ffff800000802592:	ff d0                	call   rax
ffff800000802594:	48 98                	cdqe   
ffff800000802596:	4c 89 e1             	mov    rcx,r12
ffff800000802599:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080259e:	4c 89 ee             	mov    rsi,r13
ffff8000008025a1:	48 89 c7             	mov    rdi,rax
ffff8000008025a4:	49 89 df             	mov    r15,rbx
ffff8000008025a7:	48 b8 62 f1 fd ff ff 	movabs rax,0xfffffffffffdf162
ffff8000008025ae:	ff ff ff 
ffff8000008025b1:	48 01 d8             	add    rax,rbx
ffff8000008025b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
ffff8000008025b6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008025ba:	83 e0 02             	and    eax,0x2
ffff8000008025bd:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244
    if(p)printf("when writing\n");else //puts("when reading");
ffff8000008025c0:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008025c4:	74 2a                	je     ffff8000008025f0 <page_err+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244 (discriminator 1)
ffff8000008025c6:	48 b8 bf d3 ff ff ff 	movabs rax,0xffffffffffffd3bf
ffff8000008025cd:	ff ff ff 
ffff8000008025d0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008025d4:	48 89 c7             	mov    rdi,rax
ffff8000008025d7:	49 89 df             	mov    r15,rbx
ffff8000008025da:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008025df:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff8000008025e6:	ff ff ff 
ffff8000008025e9:	48 01 da             	add    rdx,rbx
ffff8000008025ec:	ff d2                	call   rdx
ffff8000008025ee:	eb 0a                	jmp    ffff8000008025fa <page_err+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245
    p=err_code&4;
ffff8000008025f0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008025f4:	83 e0 04             	and    eax,0x4
ffff8000008025f7:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246
    if(!p)printf("supervisor mode\n");else //puts("user mode");
ffff8000008025fa:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008025fe:	75 2a                	jne    ffff80000080262a <page_err+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246 (discriminator 1)
ffff800000802600:	48 b8 cd d3 ff ff ff 	movabs rax,0xffffffffffffd3cd
ffff800000802607:	ff ff ff 
ffff80000080260a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080260e:	48 89 c7             	mov    rdi,rax
ffff800000802611:	49 89 df             	mov    r15,rbx
ffff800000802614:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802619:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff800000802620:	ff ff ff 
ffff800000802623:	48 01 da             	add    rdx,rbx
ffff800000802626:	ff d2                	call   rdx
ffff800000802628:	eb 0a                	jmp    ffff800000802634 <page_err+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
    p=err_code&16;
ffff80000080262a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080262e:	83 e0 10             	and    eax,0x10
ffff800000802631:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248
    if(p)printf("an instruction tries to fetch\n");
ffff800000802634:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000802638:	74 28                	je     ffff800000802662 <page_err+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248 (discriminator 1)
ffff80000080263a:	48 b8 e0 d3 ff ff ff 	movabs rax,0xffffffffffffd3e0
ffff800000802641:	ff ff ff 
ffff800000802644:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802648:	48 89 c7             	mov    rdi,rax
ffff80000080264b:	49 89 df             	mov    r15,rbx
ffff80000080264e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802653:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080265a:	ff ff ff 
ffff80000080265d:	48 01 da             	add    rdx,rbx
ffff800000802660:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:249
    unsigned int addr=0;
ffff800000802662:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:250
    asm volatile("mov 8(%%rbp),%0":"=r"(addr));
ffff800000802669:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
ffff80000080266c:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:251
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
ffff80000080266f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000802673:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802676:	89 c6                	mov    esi,eax
ffff800000802678:	48 b8 00 d4 ff ff ff 	movabs rax,0xffffffffffffd400
ffff80000080267f:	ff ff ff 
ffff800000802682:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802686:	48 89 c7             	mov    rdi,rax
ffff800000802689:	49 89 df             	mov    r15,rbx
ffff80000080268c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802691:	48 b9 5c ed fd ff ff 	movabs rcx,0xfffffffffffded5c
ffff800000802698:	ff ff ff 
ffff80000080269b:	48 01 d9             	add    rcx,rbx
ffff80000080269e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:263
    }*/
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
ffff8000008026a0:	49 89 df             	mov    r15,rbx
ffff8000008026a3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008026a8:	48 ba ae 76 fe ff ff 	movabs rdx,0xfffffffffffe76ae
ffff8000008026af:	ff ff ff 
ffff8000008026b2:	48 01 da             	add    rdx,rbx
ffff8000008026b5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:265
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
ffff8000008026b7:	fb                   	sti    
ffff8000008026b8:	c9                   	leave  
ffff8000008026b9:	48 83 c4 08          	add    rsp,0x8
ffff8000008026bd:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:266
}
ffff8000008026bf:	90                   	nop
ffff8000008026c0:	48 83 c4 20          	add    rsp,0x20
ffff8000008026c4:	5b                   	pop    rbx
ffff8000008026c5:	41 5c                	pop    r12
ffff8000008026c7:	41 5d                	pop    r13
ffff8000008026c9:	41 5f                	pop    r15
ffff8000008026cb:	5d                   	pop    rbp
ffff8000008026cc:	c3                   	ret    

ffff8000008026cd <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:268
void init_memory()
{
ffff8000008026cd:	f3 0f 1e fa          	endbr64 
ffff8000008026d1:	55                   	push   rbp
ffff8000008026d2:	48 89 e5             	mov    rbp,rsp
ffff8000008026d5:	41 57                	push   r15
ffff8000008026d7:	53                   	push   rbx
ffff8000008026d8:	48 83 ec 60          	sub    rsp,0x60
ffff8000008026dc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008026dc <init_memory+0xf>
ffff8000008026e3:	49 bb a4 03 02 00 00 	movabs r11,0x203a4
ffff8000008026ea:	00 00 00 
ffff8000008026ed:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:271
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取可用内存大小mem_size
    size_t tot_mem_size=mmap_struct[mmap_t_i-1].base+mmap_struct[mmap_t_i-1].len,mem_size=0;
ffff8000008026f0:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff8000008026f7:	ff ff ff 
ffff8000008026fa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026fe:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802700:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802703:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff80000080270a:	ff ff ff 
ffff80000080270d:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802711:	48 63 d2             	movsxd rdx,edx
ffff800000802714:	48 89 d0             	mov    rax,rdx
ffff800000802717:	48 01 c0             	add    rax,rax
ffff80000080271a:	48 01 d0             	add    rax,rdx
ffff80000080271d:	48 c1 e0 03          	shl    rax,0x3
ffff800000802721:	48 01 c8             	add    rax,rcx
ffff800000802724:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802727:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff80000080272e:	ff ff ff 
ffff800000802731:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802735:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802737:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080273a:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000802741:	ff ff ff 
ffff800000802744:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802748:	48 63 d2             	movsxd rdx,edx
ffff80000080274b:	48 89 d0             	mov    rax,rdx
ffff80000080274e:	48 01 c0             	add    rax,rax
ffff800000802751:	48 01 d0             	add    rax,rdx
ffff800000802754:	48 c1 e0 03          	shl    rax,0x3
ffff800000802758:	48 01 f0             	add    rax,rsi
ffff80000080275b:	48 83 c0 08          	add    rax,0x8
ffff80000080275f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802762:	48 01 c8             	add    rax,rcx
ffff800000802765:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff800000802769:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000802770:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272
    for(int i=0;i<mmap_t_i;i++)
ffff800000802771:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000802778:	eb 6b                	jmp    ffff8000008027e5 <init_memory+0x118>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274
    {
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff80000080277a:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000802781:	ff ff ff 
ffff800000802784:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802788:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080278b:	48 63 d0             	movsxd rdx,eax
ffff80000080278e:	48 89 d0             	mov    rax,rdx
ffff800000802791:	48 01 c0             	add    rax,rax
ffff800000802794:	48 01 d0             	add    rax,rdx
ffff800000802797:	48 c1 e0 03          	shl    rax,0x3
ffff80000080279b:	48 01 c8             	add    rax,rcx
ffff80000080279e:	48 83 c0 10          	add    rax,0x10
ffff8000008027a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008027a5:	48 83 f8 01          	cmp    rax,0x1
ffff8000008027a9:	75 36                	jne    ffff8000008027e1 <init_memory+0x114>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:275
            mem_size+=mmap_struct[i].len;
ffff8000008027ab:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff8000008027b2:	ff ff ff 
ffff8000008027b5:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008027b9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008027bc:	48 63 d0             	movsxd rdx,eax
ffff8000008027bf:	48 89 d0             	mov    rax,rdx
ffff8000008027c2:	48 01 c0             	add    rax,rax
ffff8000008027c5:	48 01 d0             	add    rax,rdx
ffff8000008027c8:	48 c1 e0 03          	shl    rax,0x3
ffff8000008027cc:	48 01 c8             	add    rax,rcx
ffff8000008027cf:	48 83 c0 08          	add    rax,0x8
ffff8000008027d3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008027d6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008027da:	48 01 d0             	add    rax,rdx
ffff8000008027dd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff8000008027e1:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272 (discriminator 1)
ffff8000008027e5:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff8000008027ec:	ff ff ff 
ffff8000008027ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027f3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008027f5:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008027f8:	7c 80                	jl     ffff80000080277a <init_memory+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:277
    }
    usr_mem_pa=PAGE_4K_ALIGN(mem_size/2);
ffff8000008027fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008027fe:	48 89 c2             	mov    rdx,rax
ffff800000802801:	48 c1 ea 3f          	shr    rdx,0x3f
ffff800000802805:	48 01 d0             	add    rax,rdx
ffff800000802808:	48 d1 f8             	sar    rax,1
ffff80000080280b:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000802811:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000802817:	48 89 c2             	mov    rdx,rax
ffff80000080281a:	48 b8 f8 fc ff ff ff 	movabs rax,0xfffffffffffffcf8
ffff800000802821:	ff ff ff 
ffff800000802824:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802828:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:284
    /*
     * 注：物理内存的一半会分给内核。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    pmalloc_entc= tot_mem_size / PAGE_4K_SIZE/32;
ffff80000080282b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080282f:	48 8d 90 ff ff 01 00 	lea    rdx,[rax+0x1ffff]
ffff800000802836:	48 85 c0             	test   rax,rax
ffff800000802839:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080283d:	48 c1 f8 11          	sar    rax,0x11
ffff800000802841:	89 c2                	mov    edx,eax
ffff800000802843:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080284a:	ff ff ff 
ffff80000080284d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802851:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:285
    int pgc=(tot_mem_size/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
ffff800000802853:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802857:	48 8d 90 ff ff ff 07 	lea    rdx,[rax+0x7ffffff]
ffff80000080285e:	48 85 c0             	test   rax,rax
ffff800000802861:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000802865:	48 c1 f8 1b          	sar    rax,0x1b
ffff800000802869:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
ffff80000080286c:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080286f:	c1 f8 05             	sar    eax,0x5
ffff800000802872:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:290
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
ffff800000802875:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802879:	48 89 c2             	mov    rdx,rax
ffff80000080287c:	48 c1 ea 3f          	shr    rdx,0x3f
ffff800000802880:	48 01 d0             	add    rax,rdx
ffff800000802883:	48 d1 f8             	sar    rax,1
ffff800000802886:	48 2d 00 00 00 01    	sub    rax,0x1000000
ffff80000080288c:	48 8d 90 ff ff 01 00 	lea    rdx,[rax+0x1ffff]
ffff800000802893:	48 85 c0             	test   rax,rax
ffff800000802896:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080289a:	48 c1 f8 11          	sar    rax,0x11
ffff80000080289e:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291
    size_t vmms=vmec*4/PAGE_4K_SIZE;//位图自己需要多少页
ffff8000008028a2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008028a6:	48 8d 90 ff 03 00 00 	lea    rdx,[rax+0x3ff]
ffff8000008028ad:	48 85 c0             	test   rax,rax
ffff8000008028b0:	48 0f 48 c2          	cmovs  rax,rdx
ffff8000008028b4:	48 c1 f8 0a          	sar    rax,0xa
ffff8000008028b8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292
    comprintf("tot memsize:0x%l,available size 0x%l,kmalloc pages count:%d,kmalloc bitmap taking 0x%d pages\n", tot_mem_size,mem_size,vmec,vmms);
ffff8000008028bc:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff8000008028c0:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffff8000008028c4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008028c8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008028cc:	49 89 f0             	mov    r8,rsi
ffff8000008028cf:	48 89 c6             	mov    rsi,rax
ffff8000008028d2:	48 b8 28 d4 ff ff ff 	movabs rax,0xffffffffffffd428
ffff8000008028d9:	ff ff ff 
ffff8000008028dc:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008028e0:	48 89 c7             	mov    rdi,rax
ffff8000008028e3:	49 89 df             	mov    r15,rbx
ffff8000008028e6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008028eb:	49 b9 a4 0c ff ff ff 	movabs r9,0xffffffffffff0ca4
ffff8000008028f2:	ff ff ff 
ffff8000008028f5:	49 01 d9             	add    r9,rbx
ffff8000008028f8:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:293
    if(vmec*4%PAGE_4K_SIZE)
ffff8000008028fb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008028ff:	48 c1 e0 02          	shl    rax,0x2
ffff800000802903:	25 fc 0f 00 00       	and    eax,0xffc
ffff800000802908:	48 85 c0             	test   rax,rax
ffff80000080290b:	74 05                	je     ffff800000802912 <init_memory+0x245>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:294
        vmms++;
ffff80000080290d:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295
    for(int i=0;i<vmec;i++){
ffff800000802912:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000802919:	eb 27                	jmp    ffff800000802942 <init_memory+0x275>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296 (discriminator 3)
        vmalloc_map[i]=0;
ffff80000080291b:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff800000802922:	ff ff ff 
ffff800000802925:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802929:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080292c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080292f:	48 98                	cdqe   
ffff800000802931:	48 c1 e0 02          	shl    rax,0x2
ffff800000802935:	48 01 d0             	add    rax,rdx
ffff800000802938:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295 (discriminator 3)
    for(int i=0;i<vmec;i++){
ffff80000080293e:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295 (discriminator 1)
ffff800000802942:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000802945:	48 98                	cdqe   
ffff800000802947:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080294b:	7f ce                	jg     ffff80000080291b <init_memory+0x24e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:299
    }
    //位图占用前几页
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff80000080294d:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000802954:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080295b:	eb 61                	jmp    ffff8000008029be <init_memory+0x2f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301
    {
        if(i==32)
ffff80000080295d:	83 7d d0 20          	cmp    DWORD PTR [rbp-0x30],0x20
ffff800000802961:	75 0b                	jne    ffff80000080296e <init_memory+0x2a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303
        {
            i=0;
ffff800000802963:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:304
            j++;
ffff80000080296a:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:306 (discriminator 2)
        }
        vmalloc_map[j]|=1u<<i;
ffff80000080296e:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff800000802975:	ff ff ff 
ffff800000802978:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080297c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080297f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802982:	48 98                	cdqe   
ffff800000802984:	48 c1 e0 02          	shl    rax,0x2
ffff800000802988:	48 01 d0             	add    rax,rdx
ffff80000080298b:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080298d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802990:	be 01 00 00 00       	mov    esi,0x1
ffff800000802995:	89 c1                	mov    ecx,eax
ffff800000802997:	d3 e6                	shl    esi,cl
ffff800000802999:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff8000008029a0:	ff ff ff 
ffff8000008029a3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029a7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008029aa:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008029ad:	48 98                	cdqe   
ffff8000008029af:	48 c1 e0 02          	shl    rax,0x2
ffff8000008029b3:	48 01 c8             	add    rax,rcx
ffff8000008029b6:	09 f2                	or     edx,esi
ffff8000008029b8:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:299 (discriminator 2)
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff8000008029ba:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:299 (discriminator 1)
ffff8000008029be:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008029c1:	c1 e0 05             	shl    eax,0x5
ffff8000008029c4:	89 c2                	mov    edx,eax
ffff8000008029c6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008029c9:	01 d0                	add    eax,edx
ffff8000008029cb:	48 98                	cdqe   
ffff8000008029cd:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff8000008029d1:	7f 8a                	jg     ffff80000080295d <init_memory+0x290>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:309
    }
    //kmalloc连续的内存
    page_map=kmallocat(0,pgc);//(unsigned int*)PAGE_4K_ALIGN(0xc00000);
ffff8000008029d3:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff8000008029d6:	89 c6                	mov    esi,eax
ffff8000008029d8:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008029dd:	49 89 df             	mov    r15,rbx
ffff8000008029e0:	48 b8 28 f7 fd ff ff 	movabs rax,0xfffffffffffdf728
ffff8000008029e7:	ff ff ff 
ffff8000008029ea:	48 01 d8             	add    rax,rbx
ffff8000008029ed:	ff d0                	call   rax
ffff8000008029ef:	48 89 c2             	mov    rdx,rax
ffff8000008029f2:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008029f9:	ff ff ff 
ffff8000008029fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802a00:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310
    int* p=page_map;
ffff800000802a03:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802a0a:	ff ff ff 
ffff800000802a0d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802a11:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802a14:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:311
    addr_t curp=0;
ffff800000802a18:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000802a1f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313
    //不能使用的内存提前占用掉
    for(int i=0;i<mmap_t_i;i++){
ffff800000802a20:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff800000802a27:	e9 1f 01 00 00       	jmp    ffff800000802b4b <init_memory+0x47e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:314
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff800000802a2c:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000802a33:	ff ff ff 
ffff800000802a36:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802a3a:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802a3d:	48 63 d0             	movsxd rdx,eax
ffff800000802a40:	48 89 d0             	mov    rax,rdx
ffff800000802a43:	48 01 c0             	add    rax,rax
ffff800000802a46:	48 01 d0             	add    rax,rdx
ffff800000802a49:	48 c1 e0 03          	shl    rax,0x3
ffff800000802a4d:	48 01 c8             	add    rax,rcx
ffff800000802a50:	48 83 c0 10          	add    rax,0x10
ffff800000802a54:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802a57:	48 83 f8 01          	cmp    rax,0x1
ffff800000802a5b:	0f 84 e5 00 00 00    	je     ffff800000802b46 <init_memory+0x479>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:316
            continue;
        int b=(mmap_struct[i].base-usr_mem_pa)/PAGE_4K_SIZE;
ffff800000802a61:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000802a68:	ff ff ff 
ffff800000802a6b:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802a6f:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802a72:	48 63 d0             	movsxd rdx,eax
ffff800000802a75:	48 89 d0             	mov    rax,rdx
ffff800000802a78:	48 01 c0             	add    rax,rax
ffff800000802a7b:	48 01 d0             	add    rax,rdx
ffff800000802a7e:	48 c1 e0 03          	shl    rax,0x3
ffff800000802a82:	48 01 c8             	add    rax,rcx
ffff800000802a85:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802a88:	48 b8 f8 fc ff ff ff 	movabs rax,0xfffffffffffffcf8
ffff800000802a8f:	ff ff ff 
ffff800000802a92:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802a96:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802a99:	48 89 d0             	mov    rax,rdx
ffff800000802a9c:	48 29 c8             	sub    rax,rcx
ffff800000802a9f:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802aa3:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:317
        int l=mmap_struct[i].len/PAGE_4K_SIZE;
ffff800000802aa6:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000802aad:	ff ff ff 
ffff800000802ab0:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802ab4:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802ab7:	48 63 d0             	movsxd rdx,eax
ffff800000802aba:	48 89 d0             	mov    rax,rdx
ffff800000802abd:	48 01 c0             	add    rax,rax
ffff800000802ac0:	48 01 d0             	add    rax,rdx
ffff800000802ac3:	48 c1 e0 03          	shl    rax,0x3
ffff800000802ac7:	48 01 c8             	add    rax,rcx
ffff800000802aca:	48 83 c0 08          	add    rax,0x8
ffff800000802ace:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802ad1:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802ad5:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:318
        for(int j=0;j<l;j++){
ffff800000802ad8:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff800000802adf:	eb 5b                	jmp    ffff800000802b3c <init_memory+0x46f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:319 (discriminator 3)
            p[b+j/32]|=1u<<(j%32);
ffff800000802ae1:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802ae4:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000802ae7:	85 c0                	test   eax,eax
ffff800000802ae9:	0f 48 c2             	cmovs  eax,edx
ffff800000802aec:	c1 f8 05             	sar    eax,0x5
ffff800000802aef:	89 c6                	mov    esi,eax
ffff800000802af1:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000802af4:	01 f0                	add    eax,esi
ffff800000802af6:	48 98                	cdqe   
ffff800000802af8:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000802aff:	00 
ffff800000802b00:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000802b04:	48 01 d0             	add    rax,rdx
ffff800000802b07:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802b09:	89 c7                	mov    edi,eax
ffff800000802b0b:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802b0e:	83 e0 1f             	and    eax,0x1f
ffff800000802b11:	ba 01 00 00 00       	mov    edx,0x1
ffff800000802b16:	89 c1                	mov    ecx,eax
ffff800000802b18:	d3 e2                	shl    edx,cl
ffff800000802b1a:	89 d0                	mov    eax,edx
ffff800000802b1c:	09 c7                	or     edi,eax
ffff800000802b1e:	89 fa                	mov    edx,edi
ffff800000802b20:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000802b23:	01 f0                	add    eax,esi
ffff800000802b25:	48 98                	cdqe   
ffff800000802b27:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
ffff800000802b2e:	00 
ffff800000802b2f:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000802b33:	48 01 c8             	add    rax,rcx
ffff800000802b36:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:318 (discriminator 3)
        for(int j=0;j<l;j++){
ffff800000802b38:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:318 (discriminator 1)
ffff800000802b3c:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802b3f:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
ffff800000802b42:	7c 9d                	jl     ffff800000802ae1 <init_memory+0x414>
ffff800000802b44:	eb 01                	jmp    ffff800000802b47 <init_memory+0x47a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315
            continue;
ffff800000802b46:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++){
ffff800000802b47:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313 (discriminator 1)
ffff800000802b4b:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff800000802b52:	ff ff ff 
ffff800000802b55:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b59:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802b5b:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
ffff800000802b5e:	0f 8c c8 fe ff ff    	jl     ffff800000802a2c <init_memory+0x35f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:323
        }
    }
    //低1gb提前占用掉 knl
    for(int j=0;j<0x2000;j++){
ffff800000802b64:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
ffff800000802b6b:	eb 27                	jmp    ffff800000802b94 <init_memory+0x4c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:324 (discriminator 3)
        page_map[j]=-1;
ffff800000802b6d:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802b74:	ff ff ff 
ffff800000802b77:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b7b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802b7e:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000802b81:	48 98                	cdqe   
ffff800000802b83:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b87:	48 01 d0             	add    rax,rdx
ffff800000802b8a:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:323 (discriminator 3)
    for(int j=0;j<0x2000;j++){
ffff800000802b90:	83 45 c0 01          	add    DWORD PTR [rbp-0x40],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:323 (discriminator 1)
ffff800000802b94:	81 7d c0 ff 1f 00 00 	cmp    DWORD PTR [rbp-0x40],0x1fff
ffff800000802b9b:	7e d0                	jle    ffff800000802b6d <init_memory+0x4a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:354
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
ffff800000802b9d:	90                   	nop
ffff800000802b9e:	90                   	nop
ffff800000802b9f:	48 83 c4 60          	add    rsp,0x60
ffff800000802ba3:	5b                   	pop    rbx
ffff800000802ba4:	41 5f                	pop    r15
ffff800000802ba6:	5d                   	pop    rbp
ffff800000802ba7:	c3                   	ret    

ffff800000802ba8 <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:360
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
ffff800000802ba8:	f3 0f 1e fa          	endbr64 
ffff800000802bac:	55                   	push   rbp
ffff800000802bad:	48 89 e5             	mov    rbp,rsp
ffff800000802bb0:	41 57                	push   r15
ffff800000802bb2:	53                   	push   rbx
ffff800000802bb3:	48 83 ec 10          	sub    rsp,0x10
ffff800000802bb7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802bb7 <req_a_page+0xf>
ffff800000802bbe:	49 bb c9 fe 01 00 00 	movabs r11,0x1fec9
ffff800000802bc5:	00 00 00 
ffff800000802bc8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802bcb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802bd2:	e9 6b 01 00 00       	jmp    ffff800000802d42 <req_a_page+0x19a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362
        for(int j=0;j<32;j++){
ffff800000802bd7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000802bde:	e9 51 01 00 00       	jmp    ffff800000802d34 <req_a_page+0x18c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:363
            unsigned int bit=page_map[i]&(1<<j);
ffff800000802be3:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802bea:	ff ff ff 
ffff800000802bed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802bf1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802bf4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802bf7:	48 98                	cdqe   
ffff800000802bf9:	48 c1 e0 02          	shl    rax,0x2
ffff800000802bfd:	48 01 d0             	add    rax,rdx
ffff800000802c00:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802c02:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802c05:	be 01 00 00 00       	mov    esi,0x1
ffff800000802c0a:	89 c1                	mov    ecx,eax
ffff800000802c0c:	d3 e6                	shl    esi,cl
ffff800000802c0e:	89 f0                	mov    eax,esi
ffff800000802c10:	21 d0                	and    eax,edx
ffff800000802c12:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364
            if((i*32+j)*4096>=0x100000&&(bit==0u))
ffff800000802c15:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802c18:	c1 e0 05             	shl    eax,0x5
ffff800000802c1b:	89 c2                	mov    edx,eax
ffff800000802c1d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802c20:	01 d0                	add    eax,edx
ffff800000802c22:	c1 e0 0c             	shl    eax,0xc
ffff800000802c25:	3d ff ff 0f 00       	cmp    eax,0xfffff
ffff800000802c2a:	0f 8e 00 01 00 00    	jle    ffff800000802d30 <req_a_page+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364 (discriminator 1)
ffff800000802c30:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000802c34:	0f 85 f6 00 00 00    	jne    ffff800000802d30 <req_a_page+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
            {
                comprintf("req_a_page:before:page_map[%d]=0x%x,",i,page_map[i]);
ffff800000802c3a:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802c41:	ff ff ff 
ffff800000802c44:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802c48:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802c4b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802c4e:	48 98                	cdqe   
ffff800000802c50:	48 c1 e0 02          	shl    rax,0x2
ffff800000802c54:	48 01 d0             	add    rax,rdx
ffff800000802c57:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802c59:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802c5c:	89 c6                	mov    esi,eax
ffff800000802c5e:	48 b8 88 d4 ff ff ff 	movabs rax,0xffffffffffffd488
ffff800000802c65:	ff ff ff 
ffff800000802c68:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802c6c:	48 89 c7             	mov    rdi,rax
ffff800000802c6f:	49 89 df             	mov    r15,rbx
ffff800000802c72:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802c77:	48 b9 a4 0c ff ff ff 	movabs rcx,0xffffffffffff0ca4
ffff800000802c7e:	ff ff ff 
ffff800000802c81:	48 01 d9             	add    rcx,rbx
ffff800000802c84:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:367
                page_map[i]=page_map[i]|(1<<j);
ffff800000802c86:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802c8d:	ff ff ff 
ffff800000802c90:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802c94:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802c97:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802c9a:	48 98                	cdqe   
ffff800000802c9c:	48 c1 e0 02          	shl    rax,0x2
ffff800000802ca0:	48 01 d0             	add    rax,rdx
ffff800000802ca3:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802ca5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802ca8:	be 01 00 00 00       	mov    esi,0x1
ffff800000802cad:	89 c1                	mov    ecx,eax
ffff800000802caf:	d3 e6                	shl    esi,cl
ffff800000802cb1:	89 f0                	mov    eax,esi
ffff800000802cb3:	89 c6                	mov    esi,eax
ffff800000802cb5:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802cbc:	ff ff ff 
ffff800000802cbf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802cc3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802cc6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802cc9:	48 98                	cdqe   
ffff800000802ccb:	48 c1 e0 02          	shl    rax,0x2
ffff800000802ccf:	48 01 c8             	add    rax,rcx
ffff800000802cd2:	09 f2                	or     edx,esi
ffff800000802cd4:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:368
                comprintf("now = 0x%x",page_map[i]);
ffff800000802cd6:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802cdd:	ff ff ff 
ffff800000802ce0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802ce4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802ce7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802cea:	48 98                	cdqe   
ffff800000802cec:	48 c1 e0 02          	shl    rax,0x2
ffff800000802cf0:	48 01 d0             	add    rax,rdx
ffff800000802cf3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802cf5:	89 c6                	mov    esi,eax
ffff800000802cf7:	48 b8 ad d4 ff ff ff 	movabs rax,0xffffffffffffd4ad
ffff800000802cfe:	ff ff ff 
ffff800000802d01:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802d05:	48 89 c7             	mov    rdi,rax
ffff800000802d08:	49 89 df             	mov    r15,rbx
ffff800000802d0b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802d10:	48 ba a4 0c ff ff ff 	movabs rdx,0xffffffffffff0ca4
ffff800000802d17:	ff ff ff 
ffff800000802d1a:	48 01 da             	add    rdx,rbx
ffff800000802d1d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:369
                return i*32+j;//num of page
ffff800000802d1f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802d22:	c1 e0 05             	shl    eax,0x5
ffff800000802d25:	89 c2                	mov    edx,eax
ffff800000802d27:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802d2a:	01 d0                	add    eax,edx
ffff800000802d2c:	48 98                	cdqe   
ffff800000802d2e:	eb 32                	jmp    ffff800000802d62 <req_a_page+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362 (discriminator 2)
        for(int j=0;j<32;j++){
ffff800000802d30:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362 (discriminator 1)
ffff800000802d34:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000802d38:	0f 8e a5 fe ff ff    	jle    ffff800000802be3 <req_a_page+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361 (discriminator 2)
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802d3e:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361 (discriminator 1)
ffff800000802d42:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802d49:	ff ff ff 
ffff800000802d4c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d50:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802d52:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffff800000802d55:	0f 8c 7c fe ff ff    	jl     ffff800000802bd7 <req_a_page+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:374

            }
        }
    }
    return -1;
ffff800000802d5b:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:375
}
ffff800000802d62:	48 83 c4 10          	add    rsp,0x10
ffff800000802d66:	5b                   	pop    rbx
ffff800000802d67:	41 5f                	pop    r15
ffff800000802d69:	5d                   	pop    rbp
ffff800000802d6a:	c3                   	ret    

ffff800000802d6b <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:377

void * pmalloc(){
ffff800000802d6b:	f3 0f 1e fa          	endbr64 
ffff800000802d6f:	55                   	push   rbp
ffff800000802d70:	48 89 e5             	mov    rbp,rsp
ffff800000802d73:	41 57                	push   r15
ffff800000802d75:	53                   	push   rbx
ffff800000802d76:	48 83 ec 10          	sub    rsp,0x10
ffff800000802d7a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802d7a <pmalloc+0xf>
ffff800000802d81:	49 bb 06 fd 01 00 00 	movabs r11,0x1fd06
ffff800000802d88:	00 00 00 
ffff800000802d8b:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:378
    void *ret=(void*)(get_phyaddr(req_a_page()));
ffff800000802d8e:	49 89 df             	mov    r15,rbx
ffff800000802d91:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802d96:	48 ba 28 01 fe ff ff 	movabs rdx,0xfffffffffffe0128
ffff800000802d9d:	ff ff ff 
ffff800000802da0:	48 01 da             	add    rdx,rbx
ffff800000802da3:	ff d2                	call   rdx
ffff800000802da5:	89 c7                	mov    edi,eax
ffff800000802da7:	49 89 df             	mov    r15,rbx
ffff800000802daa:	48 b8 15 05 fe ff ff 	movabs rax,0xfffffffffffe0515
ffff800000802db1:	ff ff ff 
ffff800000802db4:	48 01 d8             	add    rax,rbx
ffff800000802db7:	ff d0                	call   rax
ffff800000802db9:	48 98                	cdqe   
ffff800000802dbb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:379
    comprintf("pmalloc():%l\n",ret);
ffff800000802dbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802dc3:	48 89 c6             	mov    rsi,rax
ffff800000802dc6:	48 b8 b8 d4 ff ff ff 	movabs rax,0xffffffffffffd4b8
ffff800000802dcd:	ff ff ff 
ffff800000802dd0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802dd4:	48 89 c7             	mov    rdi,rax
ffff800000802dd7:	49 89 df             	mov    r15,rbx
ffff800000802dda:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802ddf:	48 ba a4 0c ff ff ff 	movabs rdx,0xffffffffffff0ca4
ffff800000802de6:	ff ff ff 
ffff800000802de9:	48 01 da             	add    rdx,rbx
ffff800000802dec:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:380
    return ret;
ffff800000802dee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:381
}
ffff800000802df2:	48 83 c4 10          	add    rsp,0x10
ffff800000802df6:	5b                   	pop    rbx
ffff800000802df7:	41 5f                	pop    r15
ffff800000802df9:	5d                   	pop    rbp
ffff800000802dfa:	c3                   	ret    

ffff800000802dfb <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:382
int free_page(char *paddr){
ffff800000802dfb:	f3 0f 1e fa          	endbr64 
ffff800000802dff:	55                   	push   rbp
ffff800000802e00:	48 89 e5             	mov    rbp,rsp
ffff800000802e03:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802e03 <free_page+0x8>
ffff800000802e0a:	49 bb 7d fc 01 00 00 	movabs r11,0x1fc7d
ffff800000802e11:	00 00 00 
ffff800000802e14:	4c 01 da             	add    rdx,r11
ffff800000802e17:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:383
    int num=(int)paddr/4096;
ffff800000802e1b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e1f:	8d 88 ff 0f 00 00    	lea    ecx,[rax+0xfff]
ffff800000802e25:	85 c0                	test   eax,eax
ffff800000802e27:	0f 48 c1             	cmovs  eax,ecx
ffff800000802e2a:	c1 f8 0c             	sar    eax,0xc
ffff800000802e2d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:384
    int n=num/32;
ffff800000802e30:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802e33:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802e36:	85 c0                	test   eax,eax
ffff800000802e38:	0f 48 c1             	cmovs  eax,ecx
ffff800000802e3b:	c1 f8 05             	sar    eax,0x5
ffff800000802e3e:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:385
    int r=num%32;
ffff800000802e41:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802e44:	89 c1                	mov    ecx,eax
ffff800000802e46:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802e49:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802e4c:	01 c8                	add    eax,ecx
ffff800000802e4e:	83 e0 1f             	and    eax,0x1f
ffff800000802e51:	29 c8                	sub    eax,ecx
ffff800000802e53:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:386
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
ffff800000802e56:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802e5d:	ff ff ff 
ffff800000802e60:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802e64:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802e67:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802e6a:	48 98                	cdqe   
ffff800000802e6c:	48 c1 e0 02          	shl    rax,0x2
ffff800000802e70:	48 01 c8             	add    rax,rcx
ffff800000802e73:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802e75:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802e78:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802e7d:	89 c1                	mov    ecx,eax
ffff800000802e7f:	d3 e7                	shl    edi,cl
ffff800000802e81:	89 f8                	mov    eax,edi
ffff800000802e83:	f7 d0                	not    eax
ffff800000802e85:	89 c1                	mov    ecx,eax
ffff800000802e87:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802e8e:	ff ff ff 
ffff800000802e91:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802e95:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e98:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802e9b:	48 98                	cdqe   
ffff800000802e9d:	48 c1 e0 02          	shl    rax,0x2
ffff800000802ea1:	48 01 d0             	add    rax,rdx
ffff800000802ea4:	21 ce                	and    esi,ecx
ffff800000802ea6:	89 f2                	mov    edx,esi
ffff800000802ea8:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387
}
ffff800000802eaa:	90                   	nop
ffff800000802eab:	5d                   	pop    rbp
ffff800000802eac:	c3                   	ret    

ffff800000802ead <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:389

int free_pages_at(int base,int pgn){
ffff800000802ead:	f3 0f 1e fa          	endbr64 
ffff800000802eb1:	55                   	push   rbp
ffff800000802eb2:	48 89 e5             	mov    rbp,rsp
ffff800000802eb5:	41 57                	push   r15
ffff800000802eb7:	53                   	push   rbx
ffff800000802eb8:	48 83 ec 20          	sub    rsp,0x20
ffff800000802ebc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802ebc <free_pages_at+0xf>
ffff800000802ec3:	49 bb c4 fb 01 00 00 	movabs r11,0x1fbc4
ffff800000802eca:	00 00 00 
ffff800000802ecd:	4c 01 db             	add    rbx,r11
ffff800000802ed0:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000802ed3:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390
    for(int i=0;i<pgn;i++){
ffff800000802ed6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802edd:	eb 28                	jmp    ffff800000802f07 <free_pages_at+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:391 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
ffff800000802edf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802ee2:	c1 e0 0c             	shl    eax,0xc
ffff800000802ee5:	89 c2                	mov    edx,eax
ffff800000802ee7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802eea:	01 d0                	add    eax,edx
ffff800000802eec:	48 98                	cdqe   
ffff800000802eee:	48 89 c7             	mov    rdi,rax
ffff800000802ef1:	49 89 df             	mov    r15,rbx
ffff800000802ef4:	48 b8 7b 03 fe ff ff 	movabs rax,0xfffffffffffe037b
ffff800000802efb:	ff ff ff 
ffff800000802efe:	48 01 d8             	add    rax,rbx
ffff800000802f01:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390 (discriminator 3)
    for(int i=0;i<pgn;i++){
ffff800000802f03:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390 (discriminator 1)
ffff800000802f07:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802f0a:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000802f0d:	7c d0                	jl     ffff800000802edf <free_pages_at+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:393
    }
}
ffff800000802f0f:	90                   	nop
ffff800000802f10:	48 83 c4 20          	add    rsp,0x20
ffff800000802f14:	5b                   	pop    rbx
ffff800000802f15:	41 5f                	pop    r15
ffff800000802f17:	5d                   	pop    rbp
ffff800000802f18:	c3                   	ret    

ffff800000802f19 <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:394
int check_page(int num){
ffff800000802f19:	f3 0f 1e fa          	endbr64 
ffff800000802f1d:	55                   	push   rbp
ffff800000802f1e:	48 89 e5             	mov    rbp,rsp
ffff800000802f21:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802f21 <check_page+0x8>
ffff800000802f28:	49 bb 5f fb 01 00 00 	movabs r11,0x1fb5f
ffff800000802f2f:	00 00 00 
ffff800000802f32:	4c 01 da             	add    rdx,r11
ffff800000802f35:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:395
    int n=num/32;
ffff800000802f38:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802f3b:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802f3e:	85 c0                	test   eax,eax
ffff800000802f40:	0f 48 c1             	cmovs  eax,ecx
ffff800000802f43:	c1 f8 05             	sar    eax,0x5
ffff800000802f46:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:396
    int r=num%32;
ffff800000802f49:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802f4c:	89 c1                	mov    ecx,eax
ffff800000802f4e:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802f51:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802f54:	01 c8                	add    eax,ecx
ffff800000802f56:	83 e0 1f             	and    eax,0x1f
ffff800000802f59:	29 c8                	sub    eax,ecx
ffff800000802f5b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:397
    int bit=page_map[n]&(1<<r);
ffff800000802f5e:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802f65:	ff ff ff 
ffff800000802f68:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802f6c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f6f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802f72:	48 98                	cdqe   
ffff800000802f74:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f78:	48 01 d0             	add    rax,rdx
ffff800000802f7b:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802f7d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802f80:	be 01 00 00 00       	mov    esi,0x1
ffff800000802f85:	89 c1                	mov    ecx,eax
ffff800000802f87:	d3 e6                	shl    esi,cl
ffff800000802f89:	89 f0                	mov    eax,esi
ffff800000802f8b:	21 d0                	and    eax,edx
ffff800000802f8d:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:398
    return bit;
ffff800000802f90:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:399
}
ffff800000802f93:	5d                   	pop    rbp
ffff800000802f94:	c3                   	ret    

ffff800000802f95 <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:403
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
ffff800000802f95:	f3 0f 1e fa          	endbr64 
ffff800000802f99:	55                   	push   rbp
ffff800000802f9a:	48 89 e5             	mov    rbp,rsp
ffff800000802f9d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802f9d <get_phyaddr+0x8>
ffff800000802fa4:	49 bb e3 fa 01 00 00 	movabs r11,0x1fae3
ffff800000802fab:	00 00 00 
ffff800000802fae:	4c 01 d8             	add    rax,r11
ffff800000802fb1:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:404
    if(num==-1)return -1;
ffff800000802fb4:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
ffff800000802fb8:	75 07                	jne    ffff800000802fc1 <get_phyaddr+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:404 (discriminator 1)
ffff800000802fba:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000802fbf:	eb 06                	jmp    ffff800000802fc7 <get_phyaddr+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:405
    return num*0x1000;
ffff800000802fc1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802fc4:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:406
}
ffff800000802fc7:	5d                   	pop    rbp
ffff800000802fc8:	c3                   	ret    

ffff800000802fc9 <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:409

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
ffff800000802fc9:	f3 0f 1e fa          	endbr64 
ffff800000802fcd:	55                   	push   rbp
ffff800000802fce:	48 89 e5             	mov    rbp,rsp
ffff800000802fd1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802fd1 <set_page_item+0x8>
ffff800000802fd8:	49 bb af fa 01 00 00 	movabs r11,0x1faaf
ffff800000802fdf:	00 00 00 
ffff800000802fe2:	4c 01 d8             	add    rax,r11
ffff800000802fe5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000802fe9:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000802fec:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:410
    *item_addr=0;
ffff800000802fef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802ff3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:411
    *item_addr|=phy_addr&0xfffff000;
ffff800000802ffa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802ffe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803001:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000803004:	89 c0                	mov    eax,eax
ffff800000803006:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff80000080300b:	48 09 c2             	or     rdx,rax
ffff80000080300e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803012:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:412
    *item_addr|=attr;
ffff800000803015:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803019:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080301c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffff80000080301f:	48 98                	cdqe   
ffff800000803021:	48 09 c2             	or     rdx,rax
ffff800000803024:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803028:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:413
}
ffff80000080302b:	90                   	nop
ffff80000080302c:	5d                   	pop    rbp
ffff80000080302d:	c3                   	ret    

ffff80000080302e <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:415
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
ffff80000080302e:	f3 0f 1e fa          	endbr64 
ffff800000803032:	55                   	push   rbp
ffff800000803033:	48 89 e5             	mov    rbp,rsp
ffff800000803036:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803036 <set_1gb_pdpt+0x8>
ffff80000080303d:	49 bb 4a fa 01 00 00 	movabs r11,0x1fa4a
ffff800000803044:	00 00 00 
ffff800000803047:	4c 01 d8             	add    rax,r11
ffff80000080304a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080304e:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000803051:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:416
    *ppdpt=0;
ffff800000803054:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803058:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:417
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
ffff80000080305f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803063:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803066:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000803069:	0c 81                	or     al,0x81
ffff80000080306b:	89 c0                	mov    eax,eax
ffff80000080306d:	48 09 c2             	or     rdx,rax
ffff800000803070:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803074:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:418
    unsigned int hipa=pa&0xffffc0000000ul;
ffff800000803077:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080307a:	25 00 00 00 c0       	and    eax,0xc0000000
ffff80000080307f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:419
    *ppdpt|=hipa;
ffff800000803082:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803086:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803089:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080308c:	48 09 c2             	or     rdx,rax
ffff80000080308f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803093:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:420
}
ffff800000803096:	90                   	nop
ffff800000803097:	5d                   	pop    rbp
ffff800000803098:	c3                   	ret    

ffff800000803099 <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:422
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
ffff800000803099:	f3 0f 1e fa          	endbr64 
ffff80000080309d:	55                   	push   rbp
ffff80000080309e:	48 89 e5             	mov    rbp,rsp
ffff8000008030a1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008030a1 <set_2mb_pde+0x8>
ffff8000008030a8:	49 bb df f9 01 00 00 	movabs r11,0x1f9df
ffff8000008030af:	00 00 00 
ffff8000008030b2:	4c 01 d8             	add    rax,r11
ffff8000008030b5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008030b9:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff8000008030bc:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:423
    *pde=0;
ffff8000008030bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008030c3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:424
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
ffff8000008030ca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008030ce:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008030d1:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008030d4:	0d 81 10 00 00       	or     eax,0x1081
ffff8000008030d9:	48 98                	cdqe   
ffff8000008030db:	48 09 c2             	or     rdx,rax
ffff8000008030de:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008030e2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:425
    unsigned int hipa=pa&0xffc00000;
ffff8000008030e5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008030e8:	25 00 00 c0 ff       	and    eax,0xffc00000
ffff8000008030ed:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:426
    *pde|=hipa;
ffff8000008030f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008030f4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008030f7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008030fa:	48 09 c2             	or     rdx,rax
ffff8000008030fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803101:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:427
}
ffff800000803104:	90                   	nop
ffff800000803105:	5d                   	pop    rbp
ffff800000803106:	c3                   	ret    

ffff800000803107 <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:448
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
ffff800000803107:	f3 0f 1e fa          	endbr64 
ffff80000080310b:	55                   	push   rbp
ffff80000080310c:	48 89 e5             	mov    rbp,rsp
ffff80000080310f:	41 57                	push   r15
ffff800000803111:	53                   	push   rbx
ffff800000803112:	48 83 ec 20          	sub    rsp,0x20
ffff800000803116:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803116 <req_page_at+0xf>
ffff80000080311d:	49 bb 6a f9 01 00 00 	movabs r11,0x1f96a
ffff800000803124:	00 00 00 
ffff800000803127:	4c 01 db             	add    rbx,r11
ffff80000080312a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080312e:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:449
    if(base==0)//不指定地址
ffff800000803131:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000803136:	75 32                	jne    ffff80000080316a <req_page_at+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:451
    {
        return get_phyaddr(req_a_page());
ffff800000803138:	49 89 df             	mov    r15,rbx
ffff80000080313b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803140:	48 ba 28 01 fe ff ff 	movabs rdx,0xfffffffffffe0128
ffff800000803147:	ff ff ff 
ffff80000080314a:	48 01 da             	add    rdx,rbx
ffff80000080314d:	ff d2                	call   rdx
ffff80000080314f:	89 c7                	mov    edi,eax
ffff800000803151:	49 89 df             	mov    r15,rbx
ffff800000803154:	48 b8 15 05 fe ff ff 	movabs rax,0xfffffffffffe0515
ffff80000080315b:	ff ff ff 
ffff80000080315e:	48 01 d8             	add    rax,rbx
ffff800000803161:	ff d0                	call   rax
ffff800000803163:	48 98                	cdqe   
ffff800000803165:	e9 c6 00 00 00       	jmp    ffff800000803230 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
ffff80000080316a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080316e:	89 c2                	mov    edx,eax
ffff800000803170:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000803173:	89 c6                	mov    esi,eax
ffff800000803175:	89 d7                	mov    edi,edx
ffff800000803177:	49 89 df             	mov    r15,rbx
ffff80000080317a:	48 b8 8a 08 fe ff ff 	movabs rax,0xfffffffffffe088a
ffff800000803181:	ff ff ff 
ffff800000803184:	48 01 d8             	add    rax,rbx
ffff800000803187:	ff d0                	call   rax
ffff800000803189:	85 c0                	test   eax,eax
ffff80000080318b:	75 0c                	jne    ffff800000803199 <req_page_at+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453 (discriminator 1)
ffff80000080318d:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000803194:	e9 97 00 00 00       	jmp    ffff800000803230 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454
    int pgni=base/4096;
ffff800000803199:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080319d:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008031a1:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:455
    int pgi=pgni/32;
ffff8000008031a4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008031a7:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff8000008031aa:	85 c0                	test   eax,eax
ffff8000008031ac:	0f 48 c2             	cmovs  eax,edx
ffff8000008031af:	c1 f8 05             	sar    eax,0x5
ffff8000008031b2:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456
    int pgj=pgni%32;
ffff8000008031b5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008031b8:	99                   	cdq    
ffff8000008031b9:	c1 ea 1b             	shr    edx,0x1b
ffff8000008031bc:	01 d0                	add    eax,edx
ffff8000008031be:	83 e0 1f             	and    eax,0x1f
ffff8000008031c1:	29 d0                	sub    eax,edx
ffff8000008031c3:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:457
    for(int i=0;i<pgn;i++)
ffff8000008031c6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008031cd:	eb 54                	jmp    ffff800000803223 <req_page_at+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:459 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
ffff8000008031cf:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008031d6:	ff ff ff 
ffff8000008031d9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008031dd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008031e0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008031e3:	48 98                	cdqe   
ffff8000008031e5:	48 c1 e0 02          	shl    rax,0x2
ffff8000008031e9:	48 01 d0             	add    rax,rdx
ffff8000008031ec:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008031ee:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008031f1:	be 01 00 00 00       	mov    esi,0x1
ffff8000008031f6:	89 c1                	mov    ecx,eax
ffff8000008031f8:	d3 e6                	shl    esi,cl
ffff8000008031fa:	89 f0                	mov    eax,esi
ffff8000008031fc:	89 c6                	mov    esi,eax
ffff8000008031fe:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000803205:	ff ff ff 
ffff800000803208:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080320c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080320f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803212:	48 98                	cdqe   
ffff800000803214:	48 c1 e0 02          	shl    rax,0x2
ffff800000803218:	48 01 c8             	add    rax,rcx
ffff80000080321b:	09 f2                	or     edx,esi
ffff80000080321d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:457 (discriminator 3)
    for(int i=0;i<pgn;i++)
ffff80000080321f:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:457 (discriminator 1)
ffff800000803223:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803226:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000803229:	7c a4                	jl     ffff8000008031cf <req_page_at+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:461
    }
    return 0;
ffff80000080322b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463

}
ffff800000803230:	48 83 c4 20          	add    rsp,0x20
ffff800000803234:	5b                   	pop    rbx
ffff800000803235:	41 5f                	pop    r15
ffff800000803237:	5d                   	pop    rbp
ffff800000803238:	c3                   	ret    

ffff800000803239 <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465
int chk_vm(int base, int pgn)
{
ffff800000803239:	f3 0f 1e fa          	endbr64 
ffff80000080323d:	55                   	push   rbp
ffff80000080323e:	48 89 e5             	mov    rbp,rsp
ffff800000803241:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803241 <chk_vm+0x8>
ffff800000803248:	49 bb 3f f8 01 00 00 	movabs r11,0x1f83f
ffff80000080324f:	00 00 00 
ffff800000803252:	4c 01 d8             	add    rax,r11
ffff800000803255:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000803258:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466
    int *pdet=0;
ffff80000080325b:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000803262:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467
    asm volatile("mov %%cr3,%0":"=r"(pdet));
ffff800000803263:	0f 20 d8             	mov    rax,cr3
ffff800000803266:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:468
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
ffff80000080326a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080326d:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803273:	85 c0                	test   eax,eax
ffff800000803275:	0f 48 c2             	cmovs  eax,edx
ffff800000803278:	c1 f8 15             	sar    eax,0x15
ffff80000080327b:	48 98                	cdqe   
ffff80000080327d:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803284:	00 
ffff800000803285:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803289:	48 01 d0             	add    rax,rdx
ffff80000080328c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080328e:	89 c0                	mov    eax,eax
ffff800000803290:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000803295:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:469
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000803299:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080329c:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff8000008032a2:	85 c0                	test   eax,eax
ffff8000008032a4:	0f 48 c2             	cmovs  eax,edx
ffff8000008032a7:	c1 f8 15             	sar    eax,0x15
ffff8000008032aa:	48 98                	cdqe   
ffff8000008032ac:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff8000008032b3:	00 
ffff8000008032b4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008032b8:	48 01 d0             	add    rax,rdx
ffff8000008032bb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008032bd:	83 e0 01             	and    eax,0x1
ffff8000008032c0:	85 c0                	test   eax,eax
ffff8000008032c2:	74 38                	je     ffff8000008032fc <chk_vm+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:470 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
ffff8000008032c4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008032c7:	99                   	cdq    
ffff8000008032c8:	c1 ea 0b             	shr    edx,0xb
ffff8000008032cb:	01 d0                	add    eax,edx
ffff8000008032cd:	25 ff ff 1f 00       	and    eax,0x1fffff
ffff8000008032d2:	29 d0                	sub    eax,edx
ffff8000008032d4:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008032da:	85 c0                	test   eax,eax
ffff8000008032dc:	0f 48 c2             	cmovs  eax,edx
ffff8000008032df:	c1 f8 0c             	sar    eax,0xc
ffff8000008032e2:	48 98                	cdqe   
ffff8000008032e4:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff8000008032eb:	00 
ffff8000008032ec:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008032f0:	48 01 d0             	add    rax,rdx
ffff8000008032f3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008032f5:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:469 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff8000008032f8:	85 c0                	test   eax,eax
ffff8000008032fa:	75 07                	jne    ffff800000803303 <chk_vm+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:472
    {
        return -1;
ffff8000008032fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000803301:	eb 05                	jmp    ffff800000803308 <chk_vm+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:474
    }
    return 0;
ffff800000803303:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:475
}
ffff800000803308:	5d                   	pop    rbp
ffff800000803309:	c3                   	ret    

ffff80000080330a <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:478
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
ffff80000080330a:	f3 0f 1e fa          	endbr64 
ffff80000080330e:	55                   	push   rbp
ffff80000080330f:	48 89 e5             	mov    rbp,rsp
ffff800000803312:	41 57                	push   r15
ffff800000803314:	53                   	push   rbx
ffff800000803315:	48 83 ec 20          	sub    rsp,0x20
ffff800000803319:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803319 <is_pgs_ava+0xf>
ffff800000803320:	49 bb 67 f7 01 00 00 	movabs r11,0x1f767
ffff800000803327:	00 00 00 
ffff80000080332a:	4c 01 db             	add    rbx,r11
ffff80000080332d:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000803330:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479
    int pgi=base/4096;
ffff800000803333:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803336:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000080333c:	85 c0                	test   eax,eax
ffff80000080333e:	0f 48 c2             	cmovs  eax,edx
ffff800000803341:	c1 f8 0c             	sar    eax,0xc
ffff800000803344:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:480
    for(int i=0;i<pgn;i++)
ffff800000803347:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080334e:	eb 2b                	jmp    ffff80000080337b <is_pgs_ava+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482
    {
        if(check_page(pgi+i)!=0)return 0;
ffff800000803350:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000803353:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803356:	01 d0                	add    eax,edx
ffff800000803358:	89 c7                	mov    edi,eax
ffff80000080335a:	49 89 df             	mov    r15,rbx
ffff80000080335d:	48 b8 99 04 fe ff ff 	movabs rax,0xfffffffffffe0499
ffff800000803364:	ff ff ff 
ffff800000803367:	48 01 d8             	add    rax,rbx
ffff80000080336a:	ff d0                	call   rax
ffff80000080336c:	85 c0                	test   eax,eax
ffff80000080336e:	74 07                	je     ffff800000803377 <is_pgs_ava+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482 (discriminator 1)
ffff800000803370:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803375:	eb 11                	jmp    ffff800000803388 <is_pgs_ava+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:480 (discriminator 2)
    for(int i=0;i<pgn;i++)
ffff800000803377:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:480 (discriminator 1)
ffff80000080337b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080337e:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000803381:	7c cd                	jl     ffff800000803350 <is_pgs_ava+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:484
    }
    return 1;
ffff800000803383:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:486

}
ffff800000803388:	48 83 c4 20          	add    rsp,0x20
ffff80000080338c:	5b                   	pop    rbx
ffff80000080338d:	41 5f                	pop    r15
ffff80000080338f:	5d                   	pop    rbp
ffff800000803390:	c3                   	ret    

ffff800000803391 <setup_sys_vol>:
setup_sys_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:22
super_block sbs[MAX_SUPERBLOCKS];
fs_operations fs[MAX_FS];

buffer_head buffer_heads[NR_BUFFERHEADS];
int setup_sys_vol(void *disk_drv, void *fs_drv)
{
ffff800000803391:	f3 0f 1e fa          	endbr64 
ffff800000803395:	55                   	push   rbp
ffff800000803396:	48 89 e5             	mov    rbp,rsp
ffff800000803399:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803399 <setup_sys_vol+0x8>
ffff8000008033a0:	49 bb e7 f6 01 00 00 	movabs r11,0x1f6e7
ffff8000008033a7:	00 00 00 
ffff8000008033aa:	4c 01 d8             	add    rax,r11
ffff8000008033ad:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008033b1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:23
    vols[0].name[0]='C';
ffff8000008033b5:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008033bc:	ff ff ff 
ffff8000008033bf:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008033c3:	c6 02 43             	mov    BYTE PTR [rdx],0x43
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:24
    vols[0].name[1]='\0';
ffff8000008033c6:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008033cd:	ff ff ff 
ffff8000008033d0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008033d4:	c6 42 01 00          	mov    BYTE PTR [rdx+0x1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:25
    vols[0].disk_drv=disk_drv;
ffff8000008033d8:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008033df:	ff ff ff 
ffff8000008033e2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008033e6:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff8000008033ea:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:26
    vols[0].fs_drv=fs_drv;
ffff8000008033ee:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008033f5:	ff ff ff 
ffff8000008033f8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008033fc:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000803400:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:27
    vols[0].stat=VOLUME_STAT_READY;
ffff800000803404:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff80000080340b:	ff ff ff 
ffff80000080340e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000803412:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:28
    return 0;
ffff800000803419:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:29
}
ffff80000080341e:	5d                   	pop    rbp
ffff80000080341f:	c3                   	ret    

ffff800000803420 <sys_mkfifo>:
sys_mkfifo():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:32
//返回管道描述符
int sys_mkfifo(int number)
{
ffff800000803420:	f3 0f 1e fa          	endbr64 
ffff800000803424:	55                   	push   rbp
ffff800000803425:	48 89 e5             	mov    rbp,rsp
ffff800000803428:	41 57                	push   r15
ffff80000080342a:	53                   	push   rbx
ffff80000080342b:	48 83 ec 20          	sub    rsp,0x20
ffff80000080342f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080342f <sys_mkfifo+0xf>
ffff800000803436:	49 bb 51 f6 01 00 00 	movabs r11,0x1f651
ffff80000080343d:	00 00 00 
ffff800000803440:	4c 01 db             	add    rbx,r11
ffff800000803443:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34
    //查重
    for(int i=0;i<MAX_FIFOS;i++)
ffff800000803446:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080344d:	eb 56                	jmp    ffff8000008034a5 <sys_mkfifo+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:36
    {
        if(fifos[i].id==number&&fifos[i].flag==1) {
ffff80000080344f:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff800000803456:	ff ff ff 
ffff800000803459:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080345d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803460:	48 98                	cdqe   
ffff800000803462:	48 c1 e0 04          	shl    rax,0x4
ffff800000803466:	48 01 d0             	add    rax,rdx
ffff800000803469:	48 83 c0 0c          	add    rax,0xc
ffff80000080346d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080346f:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000803472:	75 2d                	jne    ffff8000008034a1 <sys_mkfifo+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:36 (discriminator 1)
ffff800000803474:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff80000080347b:	ff ff ff 
ffff80000080347e:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803482:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803485:	48 98                	cdqe   
ffff800000803487:	48 c1 e0 04          	shl    rax,0x4
ffff80000080348b:	48 01 d0             	add    rax,rdx
ffff80000080348e:	48 83 c0 08          	add    rax,0x8
ffff800000803492:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803494:	83 f8 01             	cmp    eax,0x1
ffff800000803497:	75 08                	jne    ffff8000008034a1 <sys_mkfifo+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:37
            return i;
ffff800000803499:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080349c:	e9 09 01 00 00       	jmp    ffff8000008035aa <sys_mkfifo+0x18a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
ffff8000008034a1:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34 (discriminator 1)
ffff8000008034a5:	83 7d ec 0f          	cmp    DWORD PTR [rbp-0x14],0xf
ffff8000008034a9:	7e a4                	jle    ffff80000080344f <sys_mkfifo+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40
        }
    }
    for(int i=0;i<MAX_FIFOS;i++)
ffff8000008034ab:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008034b2:	e9 e4 00 00 00       	jmp    ffff80000080359b <sys_mkfifo+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:42
    {
        if(fifos[i].flag==0) {
ffff8000008034b7:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff8000008034be:	ff ff ff 
ffff8000008034c1:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff8000008034c5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008034c8:	48 98                	cdqe   
ffff8000008034ca:	48 c1 e0 04          	shl    rax,0x4
ffff8000008034ce:	48 01 d0             	add    rax,rdx
ffff8000008034d1:	48 83 c0 08          	add    rax,0x8
ffff8000008034d5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008034d7:	85 c0                	test   eax,eax
ffff8000008034d9:	0f 85 b8 00 00 00    	jne    ffff800000803597 <sys_mkfifo+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:43
            fifos[i].flag=1;
ffff8000008034df:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff8000008034e6:	ff ff ff 
ffff8000008034e9:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff8000008034ed:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008034f0:	48 98                	cdqe   
ffff8000008034f2:	48 c1 e0 04          	shl    rax,0x4
ffff8000008034f6:	48 01 d0             	add    rax,rdx
ffff8000008034f9:	48 83 c0 08          	add    rax,0x8
ffff8000008034fd:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:44
            fifos[i].id=number;
ffff800000803503:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff80000080350a:	ff ff ff 
ffff80000080350d:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803511:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803514:	48 98                	cdqe   
ffff800000803516:	48 c1 e0 04          	shl    rax,0x4
ffff80000080351a:	48 01 d0             	add    rax,rdx
ffff80000080351d:	48 8d 50 0c          	lea    rdx,[rax+0xc]
ffff800000803521:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803524:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:45
            fifos[i].size=CHUNK_SIZE;
ffff800000803526:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff80000080352d:	ff ff ff 
ffff800000803530:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803534:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803537:	48 98                	cdqe   
ffff800000803539:	48 c1 e0 04          	shl    rax,0x4
ffff80000080353d:	48 01 d0             	add    rax,rdx
ffff800000803540:	48 83 c0 04          	add    rax,0x4
ffff800000803544:	c7 00 00 10 00 00    	mov    DWORD PTR [rax],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:47
            //分配内存
            fifos[i].pa= get_phyaddr(req_a_page());
ffff80000080354a:	49 89 df             	mov    r15,rbx
ffff80000080354d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803552:	48 ba 28 01 fe ff ff 	movabs rdx,0xfffffffffffe0128
ffff800000803559:	ff ff ff 
ffff80000080355c:	48 01 da             	add    rdx,rbx
ffff80000080355f:	ff d2                	call   rdx
ffff800000803561:	89 c7                	mov    edi,eax
ffff800000803563:	49 89 df             	mov    r15,rbx
ffff800000803566:	48 b8 15 05 fe ff ff 	movabs rax,0xfffffffffffe0515
ffff80000080356d:	ff ff ff 
ffff800000803570:	48 01 d8             	add    rax,rbx
ffff800000803573:	ff d0                	call   rax
ffff800000803575:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff80000080357c:	ff ff ff 
ffff80000080357f:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff800000803583:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000803586:	48 63 d2             	movsxd rdx,edx
ffff800000803589:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080358d:	48 01 ca             	add    rdx,rcx
ffff800000803590:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:48
            return i;
ffff800000803592:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803595:	eb 13                	jmp    ffff8000008035aa <sys_mkfifo+0x18a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
ffff800000803597:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40 (discriminator 1)
ffff80000080359b:	83 7d e8 0f          	cmp    DWORD PTR [rbp-0x18],0xf
ffff80000080359f:	0f 8e 12 ff ff ff    	jle    ffff8000008034b7 <sys_mkfifo+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:51
        }
    }
    return -1;
ffff8000008035a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:52
}
ffff8000008035aa:	48 83 c4 20          	add    rsp,0x20
ffff8000008035ae:	5b                   	pop    rbx
ffff8000008035af:	41 5f                	pop    r15
ffff8000008035b1:	5d                   	pop    rbp
ffff8000008035b2:	c3                   	ret    

ffff8000008035b3 <sys_rmfifo>:
sys_rmfifo():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:55

int sys_rmfifo(int number)
{
ffff8000008035b3:	f3 0f 1e fa          	endbr64 
ffff8000008035b7:	55                   	push   rbp
ffff8000008035b8:	48 89 e5             	mov    rbp,rsp
ffff8000008035bb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008035bb <sys_rmfifo+0x8>
ffff8000008035c2:	49 bb c5 f4 01 00 00 	movabs r11,0x1f4c5
ffff8000008035c9:	00 00 00 
ffff8000008035cc:	4c 01 d8             	add    rax,r11
ffff8000008035cf:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56
    for(int i=0;i<MAX_FIFOS;i++)
ffff8000008035d2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008035d9:	eb 79                	jmp    ffff800000803654 <sys_rmfifo+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:58
    {
        if(fifos[i].id==number&&fifos[i].flag==1) {
ffff8000008035db:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff8000008035e2:	ff ff ff 
ffff8000008035e5:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff8000008035e9:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008035ec:	48 63 d2             	movsxd rdx,edx
ffff8000008035ef:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008035f3:	48 01 ca             	add    rdx,rcx
ffff8000008035f6:	48 83 c2 0c          	add    rdx,0xc
ffff8000008035fa:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008035fc:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff8000008035ff:	75 4f                	jne    ffff800000803650 <sys_rmfifo+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:58 (discriminator 1)
ffff800000803601:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff800000803608:	ff ff ff 
ffff80000080360b:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080360f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000803612:	48 63 d2             	movsxd rdx,edx
ffff800000803615:	48 c1 e2 04          	shl    rdx,0x4
ffff800000803619:	48 01 ca             	add    rdx,rcx
ffff80000080361c:	48 83 c2 08          	add    rdx,0x8
ffff800000803620:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000803622:	83 fa 01             	cmp    edx,0x1
ffff800000803625:	75 29                	jne    ffff800000803650 <sys_rmfifo+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:59
            fifos[i].flag=0;
ffff800000803627:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff80000080362e:	ff ff ff 
ffff800000803631:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000803635:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803638:	48 98                	cdqe   
ffff80000080363a:	48 c1 e0 04          	shl    rax,0x4
ffff80000080363e:	48 01 d0             	add    rax,rdx
ffff800000803641:	48 83 c0 08          	add    rax,0x8
ffff800000803645:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:60
            return i;
ffff80000080364b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080364e:	eb 0f                	jmp    ffff80000080365f <sys_rmfifo+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
ffff800000803650:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56 (discriminator 1)
ffff800000803654:	83 7d fc 0f          	cmp    DWORD PTR [rbp-0x4],0xf
ffff800000803658:	7e 81                	jle    ffff8000008035db <sys_rmfifo+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:63
        }
    }
    return -1;
ffff80000080365a:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:64
}
ffff80000080365f:	5d                   	pop    rbp
ffff800000803660:	c3                   	ret    

ffff800000803661 <free_vol>:
free_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:66
int free_vol(int voli)
{
ffff800000803661:	f3 0f 1e fa          	endbr64 
ffff800000803665:	55                   	push   rbp
ffff800000803666:	48 89 e5             	mov    rbp,rsp
ffff800000803669:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803669 <free_vol+0x8>
ffff800000803670:	49 bb 17 f4 01 00 00 	movabs r11,0x1f417
ffff800000803677:	00 00 00 
ffff80000080367a:	4c 01 d8             	add    rax,r11
ffff80000080367d:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:67
    vols[0].stat=VOLUME_STAT_EMPTY;
ffff800000803680:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff800000803687:	ff ff ff 
ffff80000080368a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080368e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:68
    return 0;
ffff800000803695:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:69
}
ffff80000080369a:	5d                   	pop    rbp
ffff80000080369b:	c3                   	ret    

ffff80000080369c <reg_vol>:
reg_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:72

int reg_vol(int disk_drvi, int fs_drvi, char *name)
{
ffff80000080369c:	f3 0f 1e fa          	endbr64 
ffff8000008036a0:	55                   	push   rbp
ffff8000008036a1:	48 89 e5             	mov    rbp,rsp
ffff8000008036a4:	41 57                	push   r15
ffff8000008036a6:	53                   	push   rbx
ffff8000008036a7:	48 83 ec 20          	sub    rsp,0x20
ffff8000008036ab:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008036ab <reg_vol+0xf>
ffff8000008036b2:	49 bb d5 f3 01 00 00 	movabs r11,0x1f3d5
ffff8000008036b9:	00 00 00 
ffff8000008036bc:	4c 01 db             	add    rbx,r11
ffff8000008036bf:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008036c2:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff8000008036c5:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73
    for(int i=0;i<MAX_VOLUMES;i++)
ffff8000008036c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008036d0:	e9 43 01 00 00       	jmp    ffff800000803818 <reg_vol+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:75
    {
        if(vols[i].stat==VOLUME_STAT_EMPTY)
ffff8000008036d5:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff8000008036dc:	ff ff ff 
ffff8000008036df:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008036e3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008036e6:	48 63 d0             	movsxd rdx,eax
ffff8000008036e9:	48 89 d0             	mov    rax,rdx
ffff8000008036ec:	48 c1 e0 02          	shl    rax,0x2
ffff8000008036f0:	48 01 d0             	add    rax,rdx
ffff8000008036f3:	48 c1 e0 03          	shl    rax,0x3
ffff8000008036f7:	48 01 c8             	add    rax,rcx
ffff8000008036fa:	48 83 c0 20          	add    rax,0x20
ffff8000008036fe:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803700:	85 c0                	test   eax,eax
ffff800000803702:	0f 85 0c 01 00 00    	jne    ffff800000803814 <reg_vol+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:78
        {
            extern driver *drvs;
            vols[i].stat=VOLUME_STAT_READY;
ffff800000803708:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff80000080370f:	ff ff ff 
ffff800000803712:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000803716:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803719:	48 63 d0             	movsxd rdx,eax
ffff80000080371c:	48 89 d0             	mov    rax,rdx
ffff80000080371f:	48 c1 e0 02          	shl    rax,0x2
ffff800000803723:	48 01 d0             	add    rax,rdx
ffff800000803726:	48 c1 e0 03          	shl    rax,0x3
ffff80000080372a:	48 01 c8             	add    rax,rcx
ffff80000080372d:	48 83 c0 20          	add    rax,0x20
ffff800000803731:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:79
            vols[i].fs= &fs[fs_drvi];
ffff800000803737:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080373a:	48 63 d0             	movsxd rdx,eax
ffff80000080373d:	48 89 d0             	mov    rax,rdx
ffff800000803740:	48 01 c0             	add    rax,rax
ffff800000803743:	48 01 d0             	add    rax,rdx
ffff800000803746:	48 c1 e0 03          	shl    rax,0x3
ffff80000080374a:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff800000803751:	ff ff ff 
ffff800000803754:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000803758:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
ffff80000080375c:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803763:	ff ff ff 
ffff800000803766:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff80000080376a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080376d:	48 63 d0             	movsxd rdx,eax
ffff800000803770:	48 89 d0             	mov    rax,rdx
ffff800000803773:	48 c1 e0 02          	shl    rax,0x2
ffff800000803777:	48 01 d0             	add    rax,rdx
ffff80000080377a:	48 c1 e0 03          	shl    rax,0x3
ffff80000080377e:	48 01 f0             	add    rax,rsi
ffff800000803781:	48 83 c0 18          	add    rax,0x18
ffff800000803785:	48 89 08             	mov    QWORD PTR [rax],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:80
            vols[i].disk_drv= get_drv(disk_drvi);
ffff800000803788:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080378b:	89 c7                	mov    edi,eax
ffff80000080378d:	49 89 df             	mov    r15,rbx
ffff800000803790:	48 b8 c0 38 fe ff ff 	movabs rax,0xfffffffffffe38c0
ffff800000803797:	ff ff ff 
ffff80000080379a:	48 01 d8             	add    rax,rbx
ffff80000080379d:	ff d0                	call   rax
ffff80000080379f:	48 89 c2             	mov    rdx,rax
ffff8000008037a2:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff8000008037a9:	ff ff ff 
ffff8000008037ac:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff8000008037b0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008037b3:	48 63 c8             	movsxd rcx,eax
ffff8000008037b6:	48 89 c8             	mov    rax,rcx
ffff8000008037b9:	48 c1 e0 02          	shl    rax,0x2
ffff8000008037bd:	48 01 c8             	add    rax,rcx
ffff8000008037c0:	48 c1 e0 03          	shl    rax,0x3
ffff8000008037c4:	48 01 f0             	add    rax,rsi
ffff8000008037c7:	48 83 c0 08          	add    rax,0x8
ffff8000008037cb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:81
            strcpy(vols[i].name,name);
ffff8000008037ce:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008037d1:	48 63 d0             	movsxd rdx,eax
ffff8000008037d4:	48 89 d0             	mov    rax,rdx
ffff8000008037d7:	48 c1 e0 02          	shl    rax,0x2
ffff8000008037db:	48 01 d0             	add    rax,rdx
ffff8000008037de:	48 c1 e0 03          	shl    rax,0x3
ffff8000008037e2:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008037e9:	ff ff ff 
ffff8000008037ec:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008037f0:	48 01 c2             	add    rdx,rax
ffff8000008037f3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008037f7:	48 89 c6             	mov    rsi,rax
ffff8000008037fa:	48 89 d7             	mov    rdi,rdx
ffff8000008037fd:	49 89 df             	mov    r15,rbx
ffff800000803800:	48 b8 49 12 ff ff ff 	movabs rax,0xffffffffffff1249
ffff800000803807:	ff ff ff 
ffff80000080380a:	48 01 d8             	add    rax,rbx
ffff80000080380d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:82
            return i;
ffff80000080380f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803812:	eb 13                	jmp    ffff800000803827 <reg_vol+0x18b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73 (discriminator 2)
    for(int i=0;i<MAX_VOLUMES;i++)
ffff800000803814:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73 (discriminator 1)
ffff800000803818:	83 7d ec 19          	cmp    DWORD PTR [rbp-0x14],0x19
ffff80000080381c:	0f 8e b3 fe ff ff    	jle    ffff8000008036d5 <reg_vol+0x39>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:85
        }
    }
    return -1;
ffff800000803822:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:86
}
ffff800000803827:	48 83 c4 20          	add    rsp,0x20
ffff80000080382b:	5b                   	pop    rbx
ffff80000080382c:	41 5f                	pop    r15
ffff80000080382e:	5d                   	pop    rbp
ffff80000080382f:	c3                   	ret    

ffff800000803830 <sys_tell>:
sys_tell():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:210
//    if(!f)return -1;
//    f->ptr=offset+origin;
//    return 0;
//}
int sys_tell(int fno)
{
ffff800000803830:	f3 0f 1e fa          	endbr64 
ffff800000803834:	55                   	push   rbp
ffff800000803835:	48 89 e5             	mov    rbp,rsp
ffff800000803838:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803838 <sys_tell+0x8>
ffff80000080383f:	49 bb 48 f2 01 00 00 	movabs r11,0x1f248
ffff800000803846:	00 00 00 
ffff800000803849:	4c 01 d8             	add    rax,r11
ffff80000080384c:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:211
    struct file* f=current->openf[fno];
ffff80000080384f:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000803856:	ff ff ff 
ffff800000803859:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080385d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803860:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000803863:	48 63 d2             	movsxd rdx,edx
ffff800000803866:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080386a:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080386f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:212
    return f->position;
ffff800000803873:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803877:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:213
}
ffff80000080387a:	5d                   	pop    rbp
ffff80000080387b:	c3                   	ret    

ffff80000080387c <get_vfs_entry>:
get_vfs_entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:215
vfs_dir_entry *get_vfs_entry(int fno)
{
ffff80000080387c:	f3 0f 1e fa          	endbr64 
ffff800000803880:	55                   	push   rbp
ffff800000803881:	48 89 e5             	mov    rbp,rsp
ffff800000803884:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000803884 <get_vfs_entry+0x8>
ffff80000080388b:	49 bb fc f1 01 00 00 	movabs r11,0x1f1fc
ffff800000803892:	00 00 00 
ffff800000803895:	4c 01 da             	add    rdx,r11
ffff800000803898:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216
    for(int i=0;i<MAX_OPEN_FILES;i++)
ffff80000080389b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008038a2:	eb 55                	jmp    ffff8000008038f9 <get_vfs_entry+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:218
    {
        if(opened[i].fno==fno)
ffff8000008038a4:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff8000008038ab:	ff ff ff 
ffff8000008038ae:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff8000008038b2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008038b5:	48 63 c8             	movsxd rcx,eax
ffff8000008038b8:	48 89 c8             	mov    rax,rcx
ffff8000008038bb:	48 01 c0             	add    rax,rax
ffff8000008038be:	48 01 c8             	add    rax,rcx
ffff8000008038c1:	48 c1 e0 05          	shl    rax,0x5
ffff8000008038c5:	48 01 f0             	add    rax,rsi
ffff8000008038c8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008038ca:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffff8000008038cd:	75 26                	jne    ffff8000008038f5 <get_vfs_entry+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:220
        {
            return &opened[i];
ffff8000008038cf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008038d2:	48 63 c8             	movsxd rcx,eax
ffff8000008038d5:	48 89 c8             	mov    rax,rcx
ffff8000008038d8:	48 01 c0             	add    rax,rax
ffff8000008038db:	48 01 c8             	add    rax,rcx
ffff8000008038de:	48 c1 e0 05          	shl    rax,0x5
ffff8000008038e2:	48 b9 e8 fe ff ff ff 	movabs rcx,0xfffffffffffffee8
ffff8000008038e9:	ff ff ff 
ffff8000008038ec:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff8000008038f0:	48 01 d0             	add    rax,rdx
ffff8000008038f3:	eb 0f                	jmp    ffff800000803904 <get_vfs_entry+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216 (discriminator 2)
    for(int i=0;i<MAX_OPEN_FILES;i++)
ffff8000008038f5:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216 (discriminator 1)
ffff8000008038f9:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff8000008038fd:	7e a5                	jle    ffff8000008038a4 <get_vfs_entry+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:223
        }
    }
    return NULL;
ffff8000008038ff:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:224
}
ffff800000803904:	5d                   	pop    rbp
ffff800000803905:	c3                   	ret    

ffff800000803906 <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:228

//释放缓冲区（只释放这一块）
int brelse(buffer_head* bh)
{
ffff800000803906:	f3 0f 1e fa          	endbr64 
ffff80000080390a:	55                   	push   rbp
ffff80000080390b:	48 89 e5             	mov    rbp,rsp
ffff80000080390e:	41 57                	push   r15
ffff800000803910:	53                   	push   rbx
ffff800000803911:	48 83 ec 10          	sub    rsp,0x10
ffff800000803915:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803915 <brelse+0xf>
ffff80000080391c:	49 bb 6b f1 01 00 00 	movabs r11,0x1f16b
ffff800000803923:	00 00 00 
ffff800000803926:	4c 01 db             	add    rbx,r11
ffff800000803929:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:229
    wait_on_buf(bh);
ffff80000080392d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803931:	48 89 c7             	mov    rdi,rax
ffff800000803934:	49 89 df             	mov    r15,rbx
ffff800000803937:	48 b8 e7 15 fe ff ff 	movabs rax,0xfffffffffffe15e7
ffff80000080393e:	ff ff ff 
ffff800000803941:	48 01 d8             	add    rax,rbx
ffff800000803944:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:230
    if(bh->b_count==0)return -1;
ffff800000803946:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080394a:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080394e:	84 c0                	test   al,al
ffff800000803950:	75 07                	jne    ffff800000803959 <brelse+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:230 (discriminator 1)
ffff800000803952:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000803957:	eb 3f                	jmp    ffff800000803998 <brelse+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:231
    bh->b_count--;
ffff800000803959:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080395d:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff800000803961:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000803964:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803968:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:232
    if(bh->b_count==0)
ffff80000080396b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080396f:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff800000803973:	84 c0                	test   al,al
ffff800000803975:	75 1c                	jne    ffff800000803993 <brelse+0x8d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:233
        kmfree(bh->b_data);
ffff800000803977:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080397b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080397e:	48 89 c7             	mov    rdi,rax
ffff800000803981:	49 89 df             	mov    r15,rbx
ffff800000803984:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080398b:	ff ff ff 
ffff80000080398e:	48 01 d8             	add    rax,rbx
ffff800000803991:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:234
    return 0;
ffff800000803993:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:235
}
ffff800000803998:	48 83 c4 10          	add    rsp,0x10
ffff80000080399c:	5b                   	pop    rbx
ffff80000080399d:	41 5f                	pop    r15
ffff80000080399f:	5d                   	pop    rbp
ffff8000008039a0:	c3                   	ret    

ffff8000008039a1 <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:238
//从设备中读取指定设备的指定块并返回缓冲区
buffer_head* bread(int dev,int blk)
{
ffff8000008039a1:	f3 0f 1e fa          	endbr64 
ffff8000008039a5:	55                   	push   rbp
ffff8000008039a6:	48 89 e5             	mov    rbp,rsp
ffff8000008039a9:	41 57                	push   r15
ffff8000008039ab:	53                   	push   rbx
ffff8000008039ac:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
ffff8000008039b3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008039b3 <bread+0x12>
ffff8000008039ba:	49 bb cd f0 01 00 00 	movabs r11,0x1f0cd
ffff8000008039c1:	00 00 00 
ffff8000008039c4:	4c 01 db             	add    rbx,r11
ffff8000008039c7:	89 bd 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],edi
ffff8000008039cd:	89 b5 18 ff ff ff    	mov    DWORD PTR [rbp-0xe8],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:240

    buffer_head *bh=get_buf(dev,blk);
ffff8000008039d3:	8b 95 18 ff ff ff    	mov    edx,DWORD PTR [rbp-0xe8]
ffff8000008039d9:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff8000008039df:	89 d6                	mov    esi,edx
ffff8000008039e1:	89 c7                	mov    edi,eax
ffff8000008039e3:	49 89 df             	mov    r15,rbx
ffff8000008039e6:	48 b8 08 13 fe ff ff 	movabs rax,0xfffffffffffe1308
ffff8000008039ed:	ff ff ff 
ffff8000008039f0:	48 01 d8             	add    rax,rbx
ffff8000008039f3:	ff d0                	call   rax
ffff8000008039f5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:241
    if(!bh)return -1;//申请失败
ffff8000008039f9:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff8000008039fe:	75 0c                	jne    ffff800000803a0c <bread+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:241 (discriminator 1)
ffff800000803a00:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000803a07:	e9 a0 00 00 00       	jmp    ffff800000803aac <bread+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:242
    if(!bh->b_uptodate)
ffff800000803a0c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803a10:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
ffff800000803a14:	84 c0                	test   al,al
ffff800000803a16:	0f 85 8c 00 00 00    	jne    ffff800000803aa8 <bread+0x107>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:245
    {
        driver_args arg;
        arg.dev=dev;
ffff800000803a1c:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff800000803a22:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:246
        arg.cmd=DRVF_READ;
ffff800000803a25:	c7 45 c8 02 00 00 00 	mov    DWORD PTR [rbp-0x38],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:247
        arg.dist_addr=bh->b_data;
ffff800000803a2c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803a30:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a33:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:248
        arg.len=BLOCK_SIZE;
ffff800000803a39:	c7 85 38 ff ff ff 00 	mov    DWORD PTR [rbp-0xc8],0x200
ffff800000803a40:	02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:249
        arg.lba=bh->b_blocknr;
ffff800000803a43:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803a47:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803a4b:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:250
        arg.sec_c=BLOCK_SIZE/512;//之后会改
ffff800000803a51:	c7 85 38 ff ff ff 01 	mov    DWORD PTR [rbp-0xc8],0x1
ffff800000803a58:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:252
        //lock_buffer(bh);//锁定缓冲块直到读取完成
        int reqi=make_request(&arg);
ffff800000803a5b:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
ffff800000803a62:	48 89 c7             	mov    rdi,rax
ffff800000803a65:	49 89 df             	mov    r15,rbx
ffff800000803a68:	48 b8 06 39 fe ff ff 	movabs rax,0xfffffffffffe3906
ffff800000803a6f:	ff ff ff 
ffff800000803a72:	48 01 d8             	add    rax,rbx
ffff800000803a75:	ff d0                	call   rax
ffff800000803a77:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:253
        wait_on_req(reqi);
ffff800000803a7a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000803a7d:	89 c7                	mov    edi,eax
ffff800000803a7f:	49 89 df             	mov    r15,rbx
ffff800000803a82:	48 b8 a6 3c fe ff ff 	movabs rax,0xfffffffffffe3ca6
ffff800000803a89:	ff ff ff 
ffff800000803a8c:	48 01 d8             	add    rax,rbx
ffff800000803a8f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:254
        clear_req(reqi);
ffff800000803a91:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000803a94:	89 c7                	mov    edi,eax
ffff800000803a96:	49 89 df             	mov    r15,rbx
ffff800000803a99:	48 b8 fb 3c fe ff ff 	movabs rax,0xfffffffffffe3cfb
ffff800000803aa0:	ff ff ff 
ffff800000803aa3:	48 01 d8             	add    rax,rbx
ffff800000803aa6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:256
    }
    return bh;
ffff800000803aa8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:257
}
ffff800000803aac:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
ffff800000803ab3:	5b                   	pop    rbx
ffff800000803ab4:	41 5f                	pop    r15
ffff800000803ab6:	5d                   	pop    rbp
ffff800000803ab7:	c3                   	ret    

ffff800000803ab8 <vfs_read_file>:
vfs_read_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:261


int vfs_read_file(vfs_dir_entry *f,char *buf,int len)
{
ffff800000803ab8:	f3 0f 1e fa          	endbr64 
ffff800000803abc:	55                   	push   rbp
ffff800000803abd:	48 89 e5             	mov    rbp,rsp
ffff800000803ac0:	41 57                	push   r15
ffff800000803ac2:	53                   	push   rbx
ffff800000803ac3:	48 83 ec 40          	sub    rsp,0x40
ffff800000803ac7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803ac7 <vfs_read_file+0xf>
ffff800000803ace:	49 bb b9 ef 01 00 00 	movabs r11,0x1efb9
ffff800000803ad5:	00 00 00 
ffff800000803ad8:	4c 01 db             	add    rbx,r11
ffff800000803adb:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803adf:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000803ae3:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:262
    int dev=f->dev;
ffff800000803ae6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803aea:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
ffff800000803aed:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:264 (discriminator 1)
    do{
        int block=get_according_bnr(f);
ffff800000803af0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803af4:	48 89 c7             	mov    rdi,rax
ffff800000803af7:	49 89 df             	mov    r15,rbx
ffff800000803afa:	48 b8 a5 12 fe ff ff 	movabs rax,0xfffffffffffe12a5
ffff800000803b01:	ff ff ff 
ffff800000803b04:	48 01 d8             	add    rax,rbx
ffff800000803b07:	ff d0                	call   rax
ffff800000803b09:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:265 (discriminator 1)
        buffer_head* bh=bread(dev,block);
ffff800000803b0c:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000803b0f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803b12:	89 d6                	mov    esi,edx
ffff800000803b14:	89 c7                	mov    edi,eax
ffff800000803b16:	49 89 df             	mov    r15,rbx
ffff800000803b19:	48 b8 21 0f fe ff ff 	movabs rax,0xfffffffffffe0f21
ffff800000803b20:	ff ff ff 
ffff800000803b23:	48 01 d8             	add    rax,rbx
ffff800000803b26:	ff d0                	call   rax
ffff800000803b28:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:266 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff800000803b2c:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000803b2f:	ba 00 02 00 00       	mov    edx,0x200
ffff800000803b34:	39 d0                	cmp    eax,edx
ffff800000803b36:	0f 4f c2             	cmovg  eax,edx
ffff800000803b39:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:267 (discriminator 1)
        memcpy(buf,bh->b_data,size);
ffff800000803b3c:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000803b3f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803b43:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803b46:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803b4a:	48 89 ce             	mov    rsi,rcx
ffff800000803b4d:	48 89 c7             	mov    rdi,rax
ffff800000803b50:	49 89 df             	mov    r15,rbx
ffff800000803b53:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff800000803b5a:	ff ff ff 
ffff800000803b5d:	48 01 d8             	add    rax,rbx
ffff800000803b60:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:268 (discriminator 1)
        len-=BLOCK_SIZE;
ffff800000803b62:	81 6d bc 00 02 00 00 	sub    DWORD PTR [rbp-0x44],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:270 (discriminator 1)
        //读写指针后移
        f->ptr+=size;
ffff800000803b69:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803b6d:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff800000803b70:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803b73:	01 c2                	add    edx,eax
ffff800000803b75:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803b79:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:271 (discriminator 1)
        brelse(bh);
ffff800000803b7c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803b80:	48 89 c7             	mov    rdi,rax
ffff800000803b83:	49 89 df             	mov    r15,rbx
ffff800000803b86:	48 b8 86 0e fe ff ff 	movabs rax,0xfffffffffffe0e86
ffff800000803b8d:	ff ff ff 
ffff800000803b90:	48 01 d8             	add    rax,rbx
ffff800000803b93:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:272 (discriminator 1)
    }while(len>0);
ffff800000803b95:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff800000803b99:	0f 8f 51 ff ff ff    	jg     ffff800000803af0 <vfs_read_file+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:273
    return 0;
ffff800000803b9f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:274
}
ffff800000803ba4:	48 83 c4 40          	add    rsp,0x40
ffff800000803ba8:	5b                   	pop    rbx
ffff800000803ba9:	41 5f                	pop    r15
ffff800000803bab:	5d                   	pop    rbp
ffff800000803bac:	c3                   	ret    

ffff800000803bad <vfs_write_file>:
vfs_write_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:276
int vfs_write_file(vfs_dir_entry *f,char *buf,int len)
{
ffff800000803bad:	f3 0f 1e fa          	endbr64 
ffff800000803bb1:	55                   	push   rbp
ffff800000803bb2:	48 89 e5             	mov    rbp,rsp
ffff800000803bb5:	41 57                	push   r15
ffff800000803bb7:	53                   	push   rbx
ffff800000803bb8:	48 83 ec 40          	sub    rsp,0x40
ffff800000803bbc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803bbc <vfs_write_file+0xf>
ffff800000803bc3:	49 bb c4 ee 01 00 00 	movabs r11,0x1eec4
ffff800000803bca:	00 00 00 
ffff800000803bcd:	4c 01 db             	add    rbx,r11
ffff800000803bd0:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803bd4:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000803bd8:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:277
    int dev=f->dev;
ffff800000803bdb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803bdf:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
ffff800000803be2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:279 (discriminator 1)
    do{
        int block=get_according_bnr(f);
ffff800000803be5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803be9:	48 89 c7             	mov    rdi,rax
ffff800000803bec:	49 89 df             	mov    r15,rbx
ffff800000803bef:	48 b8 a5 12 fe ff ff 	movabs rax,0xfffffffffffe12a5
ffff800000803bf6:	ff ff ff 
ffff800000803bf9:	48 01 d8             	add    rax,rbx
ffff800000803bfc:	ff d0                	call   rax
ffff800000803bfe:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:280 (discriminator 1)
        buffer_head* bh=get_buf(dev,block);
ffff800000803c01:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000803c04:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803c07:	89 d6                	mov    esi,edx
ffff800000803c09:	89 c7                	mov    edi,eax
ffff800000803c0b:	49 89 df             	mov    r15,rbx
ffff800000803c0e:	48 b8 08 13 fe ff ff 	movabs rax,0xfffffffffffe1308
ffff800000803c15:	ff ff ff 
ffff800000803c18:	48 01 d8             	add    rax,rbx
ffff800000803c1b:	ff d0                	call   rax
ffff800000803c1d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:281 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff800000803c21:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000803c24:	ba 00 02 00 00       	mov    edx,0x200
ffff800000803c29:	39 d0                	cmp    eax,edx
ffff800000803c2b:	0f 4f c2             	cmovg  eax,edx
ffff800000803c2e:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:282 (discriminator 1)
        memcpy(bh->b_data,buf,size);
ffff800000803c31:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000803c34:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c38:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c3b:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000803c3f:	48 89 ce             	mov    rsi,rcx
ffff800000803c42:	48 89 c7             	mov    rdi,rax
ffff800000803c45:	49 89 df             	mov    r15,rbx
ffff800000803c48:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff800000803c4f:	ff ff ff 
ffff800000803c52:	48 01 d8             	add    rax,rbx
ffff800000803c55:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:283 (discriminator 1)
        len-=BLOCK_SIZE;
ffff800000803c57:	81 6d bc 00 02 00 00 	sub    DWORD PTR [rbp-0x44],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:285 (discriminator 1)
        //读写指针后移
        f->ptr+=size;
ffff800000803c5e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803c62:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff800000803c65:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803c68:	01 c2                	add    edx,eax
ffff800000803c6a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803c6e:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:286 (discriminator 1)
        bh->b_dirt=1;//修改置位
ffff800000803c71:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c75:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:287 (discriminator 1)
        brelse(bh);
ffff800000803c79:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c7d:	48 89 c7             	mov    rdi,rax
ffff800000803c80:	49 89 df             	mov    r15,rbx
ffff800000803c83:	48 b8 86 0e fe ff ff 	movabs rax,0xfffffffffffe0e86
ffff800000803c8a:	ff ff ff 
ffff800000803c8d:	48 01 d8             	add    rax,rbx
ffff800000803c90:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:288 (discriminator 1)
    }while(len>0);
ffff800000803c92:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff800000803c96:	0f 8f 49 ff ff ff    	jg     ffff800000803be5 <vfs_write_file+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:289
    return 0;
ffff800000803c9c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:290
}
ffff800000803ca1:	48 83 c4 40          	add    rsp,0x40
ffff800000803ca5:	5b                   	pop    rbx
ffff800000803ca6:	41 5f                	pop    r15
ffff800000803ca8:	5d                   	pop    rbp
ffff800000803ca9:	c3                   	ret    

ffff800000803caa <vfs_seek_file>:
vfs_seek_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:293

int vfs_seek_file(vfs_dir_entry *f,int offset,int origin)
{
ffff800000803caa:	f3 0f 1e fa          	endbr64 
ffff800000803cae:	55                   	push   rbp
ffff800000803caf:	48 89 e5             	mov    rbp,rsp
ffff800000803cb2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803cb2 <vfs_seek_file+0x8>
ffff800000803cb9:	49 bb ce ed 01 00 00 	movabs r11,0x1edce
ffff800000803cc0:	00 00 00 
ffff800000803cc3:	4c 01 d8             	add    rax,r11
ffff800000803cc6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000803cca:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000803ccd:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:294
    switch (origin)
ffff800000803cd0:	83 7d f0 02          	cmp    DWORD PTR [rbp-0x10],0x2
ffff800000803cd4:	74 35                	je     ffff800000803d0b <vfs_seek_file+0x61>
ffff800000803cd6:	83 7d f0 02          	cmp    DWORD PTR [rbp-0x10],0x2
ffff800000803cda:	7f 3f                	jg     ffff800000803d1b <vfs_seek_file+0x71>
ffff800000803cdc:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
ffff800000803ce0:	74 08                	je     ffff800000803cea <vfs_seek_file+0x40>
ffff800000803ce2:	83 7d f0 01          	cmp    DWORD PTR [rbp-0x10],0x1
ffff800000803ce6:	74 0e                	je     ffff800000803cf6 <vfs_seek_file+0x4c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:306
        break;
    case SEEK_END:
        f->ptr=f->size;
        break;
    default:
        break;
ffff800000803ce8:	eb 31                	jmp    ffff800000803d1b <vfs_seek_file+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:297
        f->ptr=offset;
ffff800000803cea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803cee:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000803cf1:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:298
        break;
ffff800000803cf4:	eb 26                	jmp    ffff800000803d1c <vfs_seek_file+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:300
        f->ptr+=offset;
ffff800000803cf6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803cfa:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff800000803cfd:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000803d00:	01 c2                	add    edx,eax
ffff800000803d02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803d06:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:301
        break;
ffff800000803d09:	eb 11                	jmp    ffff800000803d1c <vfs_seek_file+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:303
        f->ptr=f->size;
ffff800000803d0b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803d0f:	8b 50 18             	mov    edx,DWORD PTR [rax+0x18]
ffff800000803d12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803d16:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:304
        break;
ffff800000803d19:	eb 01                	jmp    ffff800000803d1c <vfs_seek_file+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:306
        break;
ffff800000803d1b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:308
    }
    return f->ptr;
ffff800000803d1c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803d20:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:309
}
ffff800000803d23:	5d                   	pop    rbp
ffff800000803d24:	c3                   	ret    

ffff800000803d25 <get_according_bnr>:
get_according_bnr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:312
//返回文件ptr在块设备中的块号
int get_according_bnr(vfs_dir_entry *f)
{
ffff800000803d25:	f3 0f 1e fa          	endbr64 
ffff800000803d29:	55                   	push   rbp
ffff800000803d2a:	48 89 e5             	mov    rbp,rsp
ffff800000803d2d:	48 83 ec 10          	sub    rsp,0x10
ffff800000803d31:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803d31 <get_according_bnr+0xc>
ffff800000803d38:	49 bb 4f ed 01 00 00 	movabs r11,0x1ed4f
ffff800000803d3f:	00 00 00 
ffff800000803d42:	4c 01 d8             	add    rax,r11
ffff800000803d45:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:313
    return vols[f->voln].fs->get_according_bnr(f);
ffff800000803d49:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000803d4d:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000803d50:	48 b9 88 ff ff ff ff 	movabs rcx,0xffffffffffffff88
ffff800000803d57:	ff ff ff 
ffff800000803d5a:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000803d5e:	48 63 d2             	movsxd rdx,edx
ffff800000803d61:	48 89 d0             	mov    rax,rdx
ffff800000803d64:	48 c1 e0 02          	shl    rax,0x2
ffff800000803d68:	48 01 d0             	add    rax,rdx
ffff800000803d6b:	48 c1 e0 03          	shl    rax,0x3
ffff800000803d6f:	48 01 c8             	add    rax,rcx
ffff800000803d72:	48 83 c0 18          	add    rax,0x18
ffff800000803d76:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803d79:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000803d7d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803d81:	48 89 c7             	mov    rdi,rax
ffff800000803d84:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:315

}
ffff800000803d86:	c9                   	leave  
ffff800000803d87:	c3                   	ret    

ffff800000803d88 <get_buf>:
get_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:318
//获取或者新建一个和dev上block相对应的缓冲区。
buffer_head* get_buf(int dev,int block)
{
ffff800000803d88:	f3 0f 1e fa          	endbr64 
ffff800000803d8c:	55                   	push   rbp
ffff800000803d8d:	48 89 e5             	mov    rbp,rsp
ffff800000803d90:	41 57                	push   r15
ffff800000803d92:	53                   	push   rbx
ffff800000803d93:	48 83 ec 20          	sub    rsp,0x20
ffff800000803d97:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803d97 <get_buf+0xf>
ffff800000803d9e:	49 bb e9 ec 01 00 00 	movabs r11,0x1ece9
ffff800000803da5:	00 00 00 
ffff800000803da8:	4c 01 db             	add    rbx,r11
ffff800000803dab:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000803dae:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff800000803db1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803db8:	e9 31 01 00 00       	jmp    ffff800000803eee <get_buf+0x166>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:321
    {
        if(buffer_heads[i].b_dev==dev&&buffer_heads[i].b_blocknr==block)
ffff800000803dbd:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803dc4:	ff ff ff 
ffff800000803dc7:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803dcb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803dce:	48 98                	cdqe   
ffff800000803dd0:	48 c1 e0 06          	shl    rax,0x6
ffff800000803dd4:	48 01 d0             	add    rax,rdx
ffff800000803dd7:	48 83 c0 10          	add    rax,0x10
ffff800000803ddb:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000803dde:	0f b7 c0             	movzx  eax,ax
ffff800000803de1:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000803de4:	0f 85 00 01 00 00    	jne    ffff800000803eea <get_buf+0x162>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:321 (discriminator 1)
ffff800000803dea:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803df1:	ff ff ff 
ffff800000803df4:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803df8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803dfb:	48 98                	cdqe   
ffff800000803dfd:	48 c1 e0 06          	shl    rax,0x6
ffff800000803e01:	48 01 d0             	add    rax,rdx
ffff800000803e04:	48 83 c0 08          	add    rax,0x8
ffff800000803e08:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803e0b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000803e0e:	48 98                	cdqe   
ffff800000803e10:	48 39 c2             	cmp    rdx,rax
ffff800000803e13:	0f 85 d1 00 00 00    	jne    ffff800000803eea <get_buf+0x162>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:323
        {
            repeat:
ffff800000803e19:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:324
            wait_on_buf(&buffer_heads[i]);//等待解锁
ffff800000803e1a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803e1d:	48 98                	cdqe   
ffff800000803e1f:	48 c1 e0 06          	shl    rax,0x6
ffff800000803e23:	48 89 c2             	mov    rdx,rax
ffff800000803e26:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803e2d:	ff ff ff 
ffff800000803e30:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803e34:	48 01 d0             	add    rax,rdx
ffff800000803e37:	48 89 c7             	mov    rdi,rax
ffff800000803e3a:	49 89 df             	mov    r15,rbx
ffff800000803e3d:	48 b8 e7 15 fe ff ff 	movabs rax,0xfffffffffffe15e7
ffff800000803e44:	ff ff ff 
ffff800000803e47:	48 01 d8             	add    rax,rbx
ffff800000803e4a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:325
            if(buffer_heads[i].b_count>0)//别的进程正在用
ffff800000803e4c:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803e53:	ff ff ff 
ffff800000803e56:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803e5a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803e5d:	48 98                	cdqe   
ffff800000803e5f:	48 c1 e0 06          	shl    rax,0x6
ffff800000803e63:	48 01 d0             	add    rax,rdx
ffff800000803e66:	48 83 c0 14          	add    rax,0x14
ffff800000803e6a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803e6d:	84 c0                	test   al,al
ffff800000803e6f:	74 02                	je     ffff800000803e73 <get_buf+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:326
                goto repeat;
ffff800000803e71:	eb a7                	jmp    ffff800000803e1a <get_buf+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:327
            if(!(buffer_heads[i].b_dev==dev&&buffer_heads[i].b_blocknr==block))//别的进程修改了
ffff800000803e73:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803e7a:	ff ff ff 
ffff800000803e7d:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803e81:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803e84:	48 98                	cdqe   
ffff800000803e86:	48 c1 e0 06          	shl    rax,0x6
ffff800000803e8a:	48 01 d0             	add    rax,rdx
ffff800000803e8d:	48 83 c0 10          	add    rax,0x10
ffff800000803e91:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000803e94:	0f b7 c0             	movzx  eax,ax
ffff800000803e97:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000803e9a:	75 4d                	jne    ffff800000803ee9 <get_buf+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:327 (discriminator 2)
ffff800000803e9c:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803ea3:	ff ff ff 
ffff800000803ea6:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803eaa:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803ead:	48 98                	cdqe   
ffff800000803eaf:	48 c1 e0 06          	shl    rax,0x6
ffff800000803eb3:	48 01 d0             	add    rax,rdx
ffff800000803eb6:	48 83 c0 08          	add    rax,0x8
ffff800000803eba:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803ebd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000803ec0:	48 98                	cdqe   
ffff800000803ec2:	48 39 c2             	cmp    rdx,rax
ffff800000803ec5:	75 22                	jne    ffff800000803ee9 <get_buf+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:329
                continue;
            return &buffer_heads[i];
ffff800000803ec7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803eca:	48 98                	cdqe   
ffff800000803ecc:	48 c1 e0 06          	shl    rax,0x6
ffff800000803ed0:	48 89 c2             	mov    rdx,rax
ffff800000803ed3:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803eda:	ff ff ff 
ffff800000803edd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803ee1:	48 01 d0             	add    rax,rdx
ffff800000803ee4:	e9 75 01 00 00       	jmp    ffff80000080405e <get_buf+0x2d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:328
                continue;
ffff800000803ee9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319 (discriminator 2)
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff800000803eea:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319 (discriminator 1)
ffff800000803eee:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000803ef2:	0f 8e c5 fe ff ff    	jle    ffff800000803dbd <get_buf+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333
        }
    }
    //空头中找
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff800000803ef8:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000803eff:	e9 50 01 00 00       	jmp    ffff800000804054 <get_buf+0x2cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:335
    {
        if(buffer_heads[i].b_count==0)
ffff800000803f04:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803f0b:	ff ff ff 
ffff800000803f0e:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803f12:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803f15:	48 98                	cdqe   
ffff800000803f17:	48 c1 e0 06          	shl    rax,0x6
ffff800000803f1b:	48 01 d0             	add    rax,rdx
ffff800000803f1e:	48 83 c0 14          	add    rax,0x14
ffff800000803f22:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803f25:	84 c0                	test   al,al
ffff800000803f27:	0f 85 23 01 00 00    	jne    ffff800000804050 <get_buf+0x2c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:337
        {
            if(buffer_heads[i].b_dirt)
ffff800000803f2d:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803f34:	ff ff ff 
ffff800000803f37:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803f3b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803f3e:	48 98                	cdqe   
ffff800000803f40:	48 c1 e0 06          	shl    rax,0x6
ffff800000803f44:	48 01 d0             	add    rax,rdx
ffff800000803f47:	48 83 c0 13          	add    rax,0x13
ffff800000803f4b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803f4e:	84 c0                	test   al,al
ffff800000803f50:	74 64                	je     ffff800000803fb6 <get_buf+0x22e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:339
            {
                sync_buf(&buffer_heads[i]);
ffff800000803f52:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803f55:	48 98                	cdqe   
ffff800000803f57:	48 c1 e0 06          	shl    rax,0x6
ffff800000803f5b:	48 89 c2             	mov    rdx,rax
ffff800000803f5e:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803f65:	ff ff ff 
ffff800000803f68:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803f6c:	48 01 d0             	add    rax,rdx
ffff800000803f6f:	48 89 c7             	mov    rdi,rax
ffff800000803f72:	49 89 df             	mov    r15,rbx
ffff800000803f75:	48 b8 de 16 fe ff ff 	movabs rax,0xfffffffffffe16de
ffff800000803f7c:	ff ff ff 
ffff800000803f7f:	48 01 d8             	add    rax,rbx
ffff800000803f82:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:340
                wait_on_buf(&buffer_heads[i]);
ffff800000803f84:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803f87:	48 98                	cdqe   
ffff800000803f89:	48 c1 e0 06          	shl    rax,0x6
ffff800000803f8d:	48 89 c2             	mov    rdx,rax
ffff800000803f90:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803f97:	ff ff ff 
ffff800000803f9a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803f9e:	48 01 d0             	add    rax,rdx
ffff800000803fa1:	48 89 c7             	mov    rdi,rax
ffff800000803fa4:	49 89 df             	mov    r15,rbx
ffff800000803fa7:	48 b8 e7 15 fe ff ff 	movabs rax,0xfffffffffffe15e7
ffff800000803fae:	ff ff ff 
ffff800000803fb1:	48 01 d8             	add    rax,rbx
ffff800000803fb4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:342
            }
            buffer_heads[i].b_count++;
ffff800000803fb6:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803fbd:	ff ff ff 
ffff800000803fc0:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803fc4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803fc7:	48 98                	cdqe   
ffff800000803fc9:	48 c1 e0 06          	shl    rax,0x6
ffff800000803fcd:	48 01 d0             	add    rax,rdx
ffff800000803fd0:	48 83 c0 14          	add    rax,0x14
ffff800000803fd4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803fd7:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000803fda:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803fe1:	ff ff ff 
ffff800000803fe4:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000803fe8:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803feb:	48 98                	cdqe   
ffff800000803fed:	48 c1 e0 06          	shl    rax,0x6
ffff800000803ff1:	48 01 c8             	add    rax,rcx
ffff800000803ff4:	48 83 c0 14          	add    rax,0x14
ffff800000803ff8:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:344
            //给buffer分配一个实际的缓冲区
            buffer_heads[i].b_data= kmalloc();
ffff800000803ffa:	49 89 df             	mov    r15,rbx
ffff800000803ffd:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804002:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000804009:	ff ff ff 
ffff80000080400c:	48 01 da             	add    rdx,rbx
ffff80000080400f:	ff d2                	call   rdx
ffff800000804011:	48 89 c2             	mov    rdx,rax
ffff800000804014:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff80000080401b:	ff ff ff 
ffff80000080401e:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000804022:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000804025:	48 98                	cdqe   
ffff800000804027:	48 c1 e0 06          	shl    rax,0x6
ffff80000080402b:	48 01 c8             	add    rax,rcx
ffff80000080402e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:345
            return &buffer_heads[i];
ffff800000804031:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000804034:	48 98                	cdqe   
ffff800000804036:	48 c1 e0 06          	shl    rax,0x6
ffff80000080403a:	48 89 c2             	mov    rdx,rax
ffff80000080403d:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000804044:	ff ff ff 
ffff800000804047:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080404b:	48 01 d0             	add    rax,rdx
ffff80000080404e:	eb 0e                	jmp    ffff80000080405e <get_buf+0x2d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333 (discriminator 2)
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff800000804050:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333 (discriminator 1)
ffff800000804054:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000804058:	0f 8e a6 fe ff ff    	jle    ffff800000803f04 <get_buf+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:348
        }
    }
}
ffff80000080405e:	48 83 c4 20          	add    rsp,0x20
ffff800000804062:	5b                   	pop    rbx
ffff800000804063:	41 5f                	pop    r15
ffff800000804065:	5d                   	pop    rbp
ffff800000804066:	c3                   	ret    

ffff800000804067 <wait_on_buf>:
wait_on_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:351

void wait_on_buf(buffer_head* bh)
{
ffff800000804067:	f3 0f 1e fa          	endbr64 
ffff80000080406b:	55                   	push   rbp
ffff80000080406c:	48 89 e5             	mov    rbp,rsp
ffff80000080406f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080406f <wait_on_buf+0x8>
ffff800000804076:	49 bb 11 ea 01 00 00 	movabs r11,0x1ea11
ffff80000080407d:	00 00 00 
ffff800000804080:	4c 01 d8             	add    rax,r11
ffff800000804083:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:353
    //等待缓冲区解锁
    while (bh->b_lock);
ffff800000804087:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:353 (discriminator 1)
ffff800000804088:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080408c:	0f b6 40 15          	movzx  eax,BYTE PTR [rax+0x15]
ffff800000804090:	84 c0                	test   al,al
ffff800000804092:	75 f4                	jne    ffff800000804088 <wait_on_buf+0x21>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:355
    
}
ffff800000804094:	90                   	nop
ffff800000804095:	90                   	nop
ffff800000804096:	5d                   	pop    rbp
ffff800000804097:	c3                   	ret    

ffff800000804098 <scan_dev>:
scan_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:359

//扫描块设备，读取分区，识别文件系统
int scan_dev(int dev)
{
ffff800000804098:	f3 0f 1e fa          	endbr64 
ffff80000080409c:	55                   	push   rbp
ffff80000080409d:	48 89 e5             	mov    rbp,rsp
ffff8000008040a0:	41 57                	push   r15
ffff8000008040a2:	53                   	push   rbx
ffff8000008040a3:	48 83 ec 30          	sub    rsp,0x30
ffff8000008040a7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008040a7 <scan_dev+0xf>
ffff8000008040ae:	49 bb d9 e9 01 00 00 	movabs r11,0x1e9d9
ffff8000008040b5:	00 00 00 
ffff8000008040b8:	4c 01 db             	add    rbx,r11
ffff8000008040bb:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:363
//    device *blkdev=get_dev(dev);
//    buffer_head* bh=bread(dev,0);
//    if(!bh)return -1;
    char* buf= kmalloc();
ffff8000008040be:	49 89 df             	mov    r15,rbx
ffff8000008040c1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008040c6:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff8000008040cd:	ff ff ff 
ffff8000008040d0:	48 01 da             	add    rdx,rbx
ffff8000008040d3:	ff d2                	call   rdx
ffff8000008040d5:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:364
    int r=request(DISK_MAJOR_MAJOR,DISK_CMD_READ,0,1,buf);
ffff8000008040d9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008040dd:	49 89 c0             	mov    r8,rax
ffff8000008040e0:	b9 01 00 00 00       	mov    ecx,0x1
ffff8000008040e5:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008040ea:	be 20 00 00 00       	mov    esi,0x20
ffff8000008040ef:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008040f4:	49 89 df             	mov    r15,rbx
ffff8000008040f7:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff8000008040fe:	ff ff ff 
ffff800000804101:	48 01 d8             	add    rax,rbx
ffff800000804104:	ff d0                	call   rax
ffff800000804106:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:365
    chk_result(r);
ffff800000804109:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080410c:	89 c7                	mov    edi,eax
ffff80000080410e:	49 89 df             	mov    r15,rbx
ffff800000804111:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff800000804118:	ff ff ff 
ffff80000080411b:	48 01 d8             	add    rax,rbx
ffff80000080411e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:367

    dpt_t* dpte=buf+0x1be;
ffff800000804120:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804124:	48 05 be 01 00 00    	add    rax,0x1be
ffff80000080412a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368
    for(int i=0;i<4;i++)
ffff80000080412e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000804135:	eb 13                	jmp    ffff80000080414a <scan_dev+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:371 (discriminator 3)
    {
//        blkdev->par[i].type=dpte->type;
        int stlba=dpte->start_lba;
ffff800000804137:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080413b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080413e:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:387 (discriminator 3)
//        {
//            printf("err:unrecognised partition fs.\n");
//        }

//        blkdev->par[i].end_sec=dpte->end_lba;
        dpte++;
ffff800000804141:	48 83 45 e8 10       	add    QWORD PTR [rbp-0x18],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368 (discriminator 3)
    for(int i=0;i<4;i++)
ffff800000804146:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368 (discriminator 1)
ffff80000080414a:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080414e:	7e e7                	jle    ffff800000804137 <scan_dev+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:390
    }
//    brelse(bh);
    return 0;
ffff800000804150:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:391
}
ffff800000804155:	48 83 c4 30          	add    rsp,0x30
ffff800000804159:	5b                   	pop    rbx
ffff80000080415a:	41 5f                	pop    r15
ffff80000080415c:	5d                   	pop    rbp
ffff80000080415d:	c3                   	ret    

ffff80000080415e <sync_buf>:
sync_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:394

int sync_buf(buffer_head* bh)
{
ffff80000080415e:	f3 0f 1e fa          	endbr64 
ffff800000804162:	55                   	push   rbp
ffff800000804163:	48 89 e5             	mov    rbp,rsp
ffff800000804166:	41 57                	push   r15
ffff800000804168:	48 83 ec 28          	sub    rsp,0x28
ffff80000080416c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080416c <sync_buf+0xe>
ffff800000804173:	49 bb 14 e9 01 00 00 	movabs r11,0x1e914
ffff80000080417a:	00 00 00 
ffff80000080417d:	4c 01 d8             	add    rax,r11
ffff800000804180:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:395
    int dev=bh->b_dev;
ffff800000804184:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804188:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080418c:	0f b7 d2             	movzx  edx,dx
ffff80000080418f:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:396
    int block=bh->b_blocknr;
ffff800000804192:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804196:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080419a:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:398
    //这里需要调用块设备写函数write_block
    return write_block(dev,block,bh->b_data,BLOCK_SIZE);
ffff80000080419d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008041a1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008041a4:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffff8000008041a7:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff8000008041aa:	b9 00 02 00 00       	mov    ecx,0x200
ffff8000008041af:	49 89 c7             	mov    r15,rax
ffff8000008041b2:	49 b8 48 17 fe ff ff 	movabs r8,0xfffffffffffe1748
ffff8000008041b9:	ff ff ff 
ffff8000008041bc:	49 01 c0             	add    r8,rax
ffff8000008041bf:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:400

}
ffff8000008041c2:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008041c6:	c9                   	leave  
ffff8000008041c7:	c3                   	ret    

ffff8000008041c8 <write_block>:
write_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:403
//操作块设备函数
int write_block(int dev,int block,char *buf,int len)
{
ffff8000008041c8:	f3 0f 1e fa          	endbr64 
ffff8000008041cc:	55                   	push   rbp
ffff8000008041cd:	48 89 e5             	mov    rbp,rsp
ffff8000008041d0:	41 57                	push   r15
ffff8000008041d2:	53                   	push   rbx
ffff8000008041d3:	48 83 ec 30          	sub    rsp,0x30
ffff8000008041d7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008041d7 <write_block+0xf>
ffff8000008041de:	49 bb a9 e8 01 00 00 	movabs r11,0x1e8a9
ffff8000008041e5:	00 00 00 
ffff8000008041e8:	4c 01 db             	add    rbx,r11
ffff8000008041eb:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008041ee:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff8000008041f1:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff8000008041f5:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:405 (discriminator 1)
    do{
        buffer_head* bh=get_buf(dev,block);
ffff8000008041f8:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff8000008041fb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008041fe:	89 d6                	mov    esi,edx
ffff800000804200:	89 c7                	mov    edi,eax
ffff800000804202:	49 89 df             	mov    r15,rbx
ffff800000804205:	48 b8 08 13 fe ff ff 	movabs rax,0xfffffffffffe1308
ffff80000080420c:	ff ff ff 
ffff80000080420f:	48 01 d8             	add    rax,rbx
ffff800000804212:	ff d0                	call   rax
ffff800000804214:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:406 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff800000804218:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080421b:	ba 00 02 00 00       	mov    edx,0x200
ffff800000804220:	39 d0                	cmp    eax,edx
ffff800000804222:	0f 4f c2             	cmovg  eax,edx
ffff800000804225:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:407 (discriminator 1)
        memcpy(bh->b_data,buf,size);
ffff800000804228:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080422b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080422f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804232:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000804236:	48 89 ce             	mov    rsi,rcx
ffff800000804239:	48 89 c7             	mov    rdi,rax
ffff80000080423c:	49 89 df             	mov    r15,rbx
ffff80000080423f:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff800000804246:	ff ff ff 
ffff800000804249:	48 01 d8             	add    rax,rbx
ffff80000080424c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:408 (discriminator 1)
        len-=BLOCK_SIZE;
ffff80000080424e:	81 6d cc 00 02 00 00 	sub    DWORD PTR [rbp-0x34],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:409 (discriminator 1)
        bh->b_dirt=1;//修改置位
ffff800000804255:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804259:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:410 (discriminator 1)
        brelse(bh);
ffff80000080425d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804261:	48 89 c7             	mov    rdi,rax
ffff800000804264:	49 89 df             	mov    r15,rbx
ffff800000804267:	48 b8 86 0e fe ff ff 	movabs rax,0xfffffffffffe0e86
ffff80000080426e:	ff ff ff 
ffff800000804271:	48 01 d8             	add    rax,rbx
ffff800000804274:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:411 (discriminator 1)
    }while(len>0);
ffff800000804276:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
ffff80000080427a:	0f 8f 78 ff ff ff    	jg     ffff8000008041f8 <write_block+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:412
    return 0;
ffff800000804280:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:413
}
ffff800000804285:	48 83 c4 30          	add    rsp,0x30
ffff800000804289:	5b                   	pop    rbx
ffff80000080428a:	41 5f                	pop    r15
ffff80000080428c:	5d                   	pop    rbp
ffff80000080428d:	c3                   	ret    

ffff80000080428e <read_block>:
read_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:415
int read_block(int dev,int block,char* buf,int len)
{
ffff80000080428e:	f3 0f 1e fa          	endbr64 
ffff800000804292:	55                   	push   rbp
ffff800000804293:	48 89 e5             	mov    rbp,rsp
ffff800000804296:	41 57                	push   r15
ffff800000804298:	53                   	push   rbx
ffff800000804299:	48 83 ec 30          	sub    rsp,0x30
ffff80000080429d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080429d <read_block+0xf>
ffff8000008042a4:	49 bb e3 e7 01 00 00 	movabs r11,0x1e7e3
ffff8000008042ab:	00 00 00 
ffff8000008042ae:	4c 01 db             	add    rbx,r11
ffff8000008042b1:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008042b4:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff8000008042b7:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff8000008042bb:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:417 (discriminator 1)
    do{
        buffer_head* bh=bread(dev,block);
ffff8000008042be:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff8000008042c1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008042c4:	89 d6                	mov    esi,edx
ffff8000008042c6:	89 c7                	mov    edi,eax
ffff8000008042c8:	49 89 df             	mov    r15,rbx
ffff8000008042cb:	48 b8 21 0f fe ff ff 	movabs rax,0xfffffffffffe0f21
ffff8000008042d2:	ff ff ff 
ffff8000008042d5:	48 01 d8             	add    rax,rbx
ffff8000008042d8:	ff d0                	call   rax
ffff8000008042da:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:418 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff8000008042de:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008042e1:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008042e6:	39 d0                	cmp    eax,edx
ffff8000008042e8:	0f 4f c2             	cmovg  eax,edx
ffff8000008042eb:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:419 (discriminator 1)
        memcpy(buf,bh->b_data,size);
ffff8000008042ee:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff8000008042f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042f5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008042f8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008042fc:	48 89 ce             	mov    rsi,rcx
ffff8000008042ff:	48 89 c7             	mov    rdi,rax
ffff800000804302:	49 89 df             	mov    r15,rbx
ffff800000804305:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff80000080430c:	ff ff ff 
ffff80000080430f:	48 01 d8             	add    rax,rbx
ffff800000804312:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:420 (discriminator 1)
        len-=BLOCK_SIZE;
ffff800000804314:	81 6d cc 00 02 00 00 	sub    DWORD PTR [rbp-0x34],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:421 (discriminator 1)
        brelse(bh);
ffff80000080431b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080431f:	48 89 c7             	mov    rdi,rax
ffff800000804322:	49 89 df             	mov    r15,rbx
ffff800000804325:	48 b8 86 0e fe ff ff 	movabs rax,0xfffffffffffe0e86
ffff80000080432c:	ff ff ff 
ffff80000080432f:	48 01 d8             	add    rax,rbx
ffff800000804332:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:422 (discriminator 1)
    }while(len>0);
ffff800000804334:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
ffff800000804338:	7f 84                	jg     ffff8000008042be <read_block+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:423
    return 0;
ffff80000080433a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:424
}
ffff80000080433f:	48 83 c4 30          	add    rsp,0x30
ffff800000804343:	5b                   	pop    rbx
ffff800000804344:	41 5f                	pop    r15
ffff800000804346:	5d                   	pop    rbp
ffff800000804347:	c3                   	ret    

ffff800000804348 <init_vfs>:
init_vfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:427

int init_vfs()
{
ffff800000804348:	f3 0f 1e fa          	endbr64 
ffff80000080434c:	55                   	push   rbp
ffff80000080434d:	48 89 e5             	mov    rbp,rsp
ffff800000804350:	41 57                	push   r15
ffff800000804352:	53                   	push   rbx
ffff800000804353:	48 83 ec 10          	sub    rsp,0x10
ffff800000804357:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804357 <init_vfs+0xf>
ffff80000080435e:	49 bb 29 e7 01 00 00 	movabs r11,0x1e729
ffff800000804365:	00 00 00 
ffff800000804368:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:431
    //扫描块设备
    extern device *dev_tree[];
    extern device devs[];
    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
ffff80000080436b:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff800000804372:	ff ff ff 
ffff800000804375:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804379:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080437c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432
    for(;p;p=p->next)
ffff800000804380:	eb 5b                	jmp    ffff8000008043dd <init_vfs+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:434
    {
        if(scan_dev(p-devs)!=0)return -1;
ffff800000804382:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000804389:	ff ff ff 
ffff80000080438c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804390:	48 89 c2             	mov    rdx,rax
ffff800000804393:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804397:	48 29 d0             	sub    rax,rdx
ffff80000080439a:	48 c1 f8 02          	sar    rax,0x2
ffff80000080439e:	48 89 c2             	mov    rdx,rax
ffff8000008043a1:	48 b8 19 9c 8f c1 f9 	movabs rax,0x8f9c18f9c18f9c19
ffff8000008043a8:	18 9c 8f 
ffff8000008043ab:	48 0f af c2          	imul   rax,rdx
ffff8000008043af:	89 c7                	mov    edi,eax
ffff8000008043b1:	49 89 df             	mov    r15,rbx
ffff8000008043b4:	48 b8 18 16 fe ff ff 	movabs rax,0xfffffffffffe1618
ffff8000008043bb:	ff ff ff 
ffff8000008043be:	48 01 d8             	add    rax,rbx
ffff8000008043c1:	ff d0                	call   rax
ffff8000008043c3:	85 c0                	test   eax,eax
ffff8000008043c5:	74 07                	je     ffff8000008043ce <init_vfs+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:434 (discriminator 1)
ffff8000008043c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008043cc:	eb 1b                	jmp    ffff8000008043e9 <init_vfs+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432
    for(;p;p=p->next)
ffff8000008043ce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008043d2:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff8000008043d9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432 (discriminator 1)
ffff8000008043dd:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff8000008043e2:	75 9e                	jne    ffff800000804382 <init_vfs+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:437
    }

    return 0;
ffff8000008043e4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:438
}
ffff8000008043e9:	48 83 c4 10          	add    rsp,0x10
ffff8000008043ed:	5b                   	pop    rbx
ffff8000008043ee:	41 5f                	pop    r15
ffff8000008043f0:	5d                   	pop    rbp
ffff8000008043f1:	c3                   	ret    

ffff8000008043f2 <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
ffff8000008043f2:	f3 0f 1e fa          	endbr64 
ffff8000008043f6:	55                   	push   rbp
ffff8000008043f7:	48 89 e5             	mov    rbp,rsp
ffff8000008043fa:	41 57                	push   r15
ffff8000008043fc:	48 81 ec 88 00 00 00 	sub    rsp,0x88
ffff800000804403:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804403 <make_dentry+0x11>
ffff80000080440a:	49 bb 7d e6 01 00 00 	movabs r11,0x1e67d
ffff800000804411:	00 00 00 
ffff800000804414:	4c 01 d8             	add    rax,r11
ffff800000804417:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080441b:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff80000080441f:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
ffff800000804422:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff800000804426:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
    strcpy(d->name,name);
ffff80000080442d:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff800000804431:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000804434:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
ffff800000804438:	48 89 ce             	mov    rsi,rcx
ffff80000080443b:	48 89 d7             	mov    rdi,rdx
ffff80000080443e:	49 89 c7             	mov    r15,rax
ffff800000804441:	48 ba 49 12 ff ff ff 	movabs rdx,0xffffffffffff1249
ffff800000804448:	ff ff ff 
ffff80000080444b:	48 01 c2             	add    rdx,rax
ffff80000080444e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
    d->name_length=namelen;
ffff800000804450:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000804454:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
ffff800000804457:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
ffff80000080445a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080445e:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff800000804465:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    list_init(&d->subdirs_list);
ffff800000804469:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080446d:	48 83 c0 28          	add    rax,0x28
ffff800000804471:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    struct List * next;
};

__attribute__((always_inline)) inline void list_init(struct List * list)
{
    list->prev = NULL;
ffff800000804475:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804479:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000804480:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804484:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080448b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080448c:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    list_init(&d->child_node);
ffff80000080448d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000804491:	48 83 c0 10          	add    rax,0x10
ffff800000804495:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000804499:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080449d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008044a4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008044a8:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008044af:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008044b0:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
    d->child_node.data=d;
ffff8000008044b1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008044b5:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff8000008044b9:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
    d->parent=parent;
ffff8000008044bd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008044c1:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008044c5:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:43
    list_add(&parent->subdirs_list,&d->child_node);
ffff8000008044c9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008044cd:	48 83 c0 10          	add    rax,0x10
ffff8000008044d1:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008044d5:	48 83 c2 28          	add    rdx,0x28
ffff8000008044d9:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008044dd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
        new->next->prev = new;
    entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    if(entry->next==NULL)
ffff8000008044e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008044e5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008044e9:	48 85 c0             	test   rax,rax
ffff8000008044ec:	75 58                	jne    ffff800000804546 <make_dentry+0x154>
ffff8000008044ee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008044f2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff8000008044f6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008044fa:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008044fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804502:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000804506:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080450a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080450e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804512:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804516:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000804519:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080451d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804521:	48 85 c0             	test   rax,rax
ffff800000804524:	74 0f                	je     ffff800000804535 <make_dentry+0x143>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000804526:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080452a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080452e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804532:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000804535:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804539:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080453d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000804541:	e9 9c 00 00 00       	jmp    ffff8000008045e2 <make_dentry+0x1f0>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        list_add_to_behind(entry,new);
    else{
        struct List* p=entry;
ffff800000804546:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080454a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080454e:	eb 21                	jmp    ffff800000804571 <make_dentry+0x17f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff800000804550:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804554:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000804558:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080455c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000804560:	48 39 c2             	cmp    rdx,rax
ffff800000804563:	74 7c                	je     ffff8000008045e1 <make_dentry+0x1ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000804565:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804569:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080456d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff800000804571:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804575:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804579:	48 85 c0             	test   rax,rax
ffff80000080457c:	74 0e                	je     ffff80000080458c <make_dentry+0x19a>
ffff80000080457e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804582:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804586:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff80000080458a:	75 c4                	jne    ffff800000804550 <make_dentry+0x15e>
ffff80000080458c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804590:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffff800000804594:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804598:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080459c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008045a0:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008045a4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008045a8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008045ac:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008045b0:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008045b4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008045b7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008045bb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008045bf:	48 85 c0             	test   rax,rax
ffff8000008045c2:	74 0f                	je     ffff8000008045d3 <make_dentry+0x1e1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008045c4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008045c8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008045cc:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008045d0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff8000008045d3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008045d7:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008045db:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008045df:	eb 01                	jmp    ffff8000008045e2 <make_dentry+0x1f0>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff8000008045e1:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:44
}
ffff8000008045e2:	90                   	nop
ffff8000008045e3:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008045e7:	c9                   	leave  
ffff8000008045e8:	c3                   	ret    

ffff8000008045e9 <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:45
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,super_block* sb){
ffff8000008045e9:	f3 0f 1e fa          	endbr64 
ffff8000008045ed:	55                   	push   rbp
ffff8000008045ee:	48 89 e5             	mov    rbp,rsp
ffff8000008045f1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008045f1 <make_inode+0x8>
ffff8000008045f8:	49 bb 8f e4 01 00 00 	movabs r11,0x1e48f
ffff8000008045ff:	00 00 00 
ffff800000804602:	4c 01 d8             	add    rax,r11
ffff800000804605:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000804609:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080460d:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000804611:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000804615:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:46
    i->f_ops=fops;
ffff800000804619:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080461d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804621:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
    i->attribute=attr;
ffff800000804625:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804629:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080462d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:48
    i->sb=sb;
ffff800000804631:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804635:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804639:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:49
    i->file_size=0;
ffff80000080463d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804641:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:50
    i->inode_ops=iops;
ffff800000804648:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080464c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000804650:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:51
}
ffff800000804654:	90                   	nop
ffff800000804655:	5d                   	pop    rbp
ffff800000804656:	c3                   	ret    

ffff800000804657 <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:52
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* ddev,struct file_operations* fops){
ffff800000804657:	f3 0f 1e fa          	endbr64 
ffff80000080465b:	55                   	push   rbp
ffff80000080465c:	48 89 e5             	mov    rbp,rsp
ffff80000080465f:	41 57                	push   r15
ffff800000804661:	41 54                	push   r12
ffff800000804663:	53                   	push   rbx
ffff800000804664:	48 83 ec 78          	sub    rsp,0x78
ffff800000804668:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804668 <make_devf+0x11>
ffff80000080466f:	49 bb 18 e4 01 00 00 	movabs r11,0x1e418
ffff800000804676:	00 00 00 
ffff800000804679:	4c 01 db             	add    rbx,r11
ffff80000080467c:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000804680:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff800000804684:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff800000804688:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff80000080468c:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:53
    make_dentry(d,name, strlen(name),root_sb->root,&dev_dir_dops);
ffff800000804693:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080469a:	ff ff ff 
ffff80000080469d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046a1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008046a4:	4c 8b 20             	mov    r12,QWORD PTR [rax]
ffff8000008046a7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008046ab:	48 89 c7             	mov    rdi,rax
ffff8000008046ae:	49 89 df             	mov    r15,rbx
ffff8000008046b1:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff8000008046b8:	ff ff ff 
ffff8000008046bb:	48 01 d8             	add    rax,rbx
ffff8000008046be:	ff d0                	call   rax
ffff8000008046c0:	89 c2                	mov    edx,eax
ffff8000008046c2:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff8000008046c6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008046ca:	48 b9 a8 ff ff ff ff 	movabs rcx,0xffffffffffffffa8
ffff8000008046d1:	ff ff ff 
ffff8000008046d4:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff8000008046d8:	49 89 c8             	mov    r8,rcx
ffff8000008046db:	4c 89 e1             	mov    rcx,r12
ffff8000008046de:	48 89 c7             	mov    rdi,rax
ffff8000008046e1:	49 89 df             	mov    r15,rbx
ffff8000008046e4:	48 b8 72 19 fe ff ff 	movabs rax,0xfffffffffffe1972
ffff8000008046eb:	ff ff ff 
ffff8000008046ee:	48 01 d8             	add    rax,rbx
ffff8000008046f1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:54
    d->dir_inode=i;
ffff8000008046f3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008046f7:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff8000008046fb:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
    make_inode(i,ddev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
ffff8000008046ff:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804706:	ff ff ff 
ffff800000804709:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080470d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000804710:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000804714:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804718:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
ffff80000080471c:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff800000804723:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000804727:	49 89 c8             	mov    r8,rcx
ffff80000080472a:	b9 04 00 00 00       	mov    ecx,0x4
ffff80000080472f:	48 89 c7             	mov    rdi,rax
ffff800000804732:	49 89 df             	mov    r15,rbx
ffff800000804735:	48 b8 69 1b fe ff ff 	movabs rax,0xfffffffffffe1b69
ffff80000080473c:	ff ff ff 
ffff80000080473f:	48 01 d8             	add    rax,rbx
ffff800000804742:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:56
    list_add(&ddev->subdirs_list,&d->child_node);//添加到/dev下
ffff800000804744:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000804748:	48 83 c0 10          	add    rax,0x10
ffff80000080474c:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000804750:	48 83 c2 28          	add    rdx,0x28
ffff800000804754:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000804758:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080475c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804760:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804764:	48 85 c0             	test   rax,rax
ffff800000804767:	75 58                	jne    ffff8000008047c1 <make_devf+0x16a>
ffff800000804769:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080476d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff800000804771:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804775:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000804779:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080477d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000804781:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804785:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000804789:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080478d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804791:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000804794:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804798:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080479c:	48 85 c0             	test   rax,rax
ffff80000080479f:	74 0f                	je     ffff8000008047b0 <make_devf+0x159>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008047a1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008047a5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008047a9:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008047ad:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff8000008047b0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008047b4:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008047b8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008047bc:	e9 9c 00 00 00       	jmp    ffff80000080485d <make_devf+0x206>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff8000008047c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008047c5:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008047c9:	eb 21                	jmp    ffff8000008047ec <make_devf+0x195>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff8000008047cb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008047cf:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008047d3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008047d7:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008047db:	48 39 c2             	cmp    rdx,rax
ffff8000008047de:	74 7c                	je     ffff80000080485c <make_devf+0x205>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008047e0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008047e4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008047e8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff8000008047ec:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008047f0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008047f4:	48 85 c0             	test   rax,rax
ffff8000008047f7:	74 0e                	je     ffff800000804807 <make_devf+0x1b0>
ffff8000008047f9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008047fd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804801:	48 39 45 b8          	cmp    QWORD PTR [rbp-0x48],rax
ffff800000804805:	75 c4                	jne    ffff8000008047cb <make_devf+0x174>
ffff800000804807:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080480b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff80000080480f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804813:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000804817:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080481b:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080481f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804823:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000804827:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080482b:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080482f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000804832:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804836:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080483a:	48 85 c0             	test   rax,rax
ffff80000080483d:	74 0f                	je     ffff80000080484e <make_devf+0x1f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080483f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804843:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804847:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080484b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080484e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000804852:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000804856:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080485a:	eb 01                	jmp    ffff80000080485d <make_devf+0x206>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080485c:	90                   	nop
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:57
}
ffff80000080485d:	90                   	nop
ffff80000080485e:	48 83 c4 78          	add    rsp,0x78
ffff800000804862:	5b                   	pop    rbx
ffff800000804863:	41 5c                	pop    r12
ffff800000804865:	41 5f                	pop    r15
ffff800000804867:	5d                   	pop    rbp
ffff800000804868:	c3                   	ret    

ffff800000804869 <init_devman>:
init_devman():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:65
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
struct dir_entry* ddev=NULL,*dmnt,*dconsole,*dhd0,*dtty;
struct file ftty;
int init_devman()
{
ffff800000804869:	f3 0f 1e fa          	endbr64 
ffff80000080486d:	55                   	push   rbp
ffff80000080486e:	48 89 e5             	mov    rbp,rsp
ffff800000804871:	41 57                	push   r15
ffff800000804873:	53                   	push   rbx
ffff800000804874:	48 83 ec 30          	sub    rsp,0x30
ffff800000804878:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804878 <init_devman+0xf>
ffff80000080487f:	49 bb 08 e2 01 00 00 	movabs r11,0x1e208
ffff800000804886:	00 00 00 
ffff800000804889:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:67
    //创建dev文件夹
    ddev=(struct dir_entry*) kmalloc();
ffff80000080488c:	49 89 df             	mov    r15,rbx
ffff80000080488f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804894:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000080489b:	ff ff ff 
ffff80000080489e:	48 01 da             	add    rdx,rbx
ffff8000008048a1:	ff d2                	call   rdx
ffff8000008048a3:	48 89 c2             	mov    rdx,rax
ffff8000008048a6:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008048ad:	ff ff ff 
ffff8000008048b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048b4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
    struct index_node* idev=ddev+1;
ffff8000008048b7:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008048be:	ff ff ff 
ffff8000008048c1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048c5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048c8:	48 83 c0 58          	add    rax,0x58
ffff8000008048cc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    ddev->name=idev+1;
ffff8000008048d0:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008048d7:	ff ff ff 
ffff8000008048da:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048de:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048e1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008048e5:	48 83 c2 38          	add    rdx,0x38
ffff8000008048e9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    make_dentry(ddev,"dev",3,root_sb->root,root_sb->root->dir_ops);
ffff8000008048ec:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff8000008048f3:	ff ff ff 
ffff8000008048f6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048fa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804900:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff800000804904:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080490b:	ff ff ff 
ffff80000080490e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804912:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804915:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804918:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080491f:	ff ff ff 
ffff800000804922:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804926:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804929:	49 89 c8             	mov    r8,rcx
ffff80000080492c:	48 89 d1             	mov    rcx,rdx
ffff80000080492f:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804934:	48 be c8 d4 ff ff ff 	movabs rsi,0xffffffffffffd4c8
ffff80000080493b:	ff ff ff 
ffff80000080493e:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff800000804942:	48 89 c7             	mov    rdi,rax
ffff800000804945:	49 89 df             	mov    r15,rbx
ffff800000804948:	48 b8 72 19 fe ff ff 	movabs rax,0xfffffffffffe1972
ffff80000080494f:	ff ff ff 
ffff800000804952:	48 01 d8             	add    rax,rbx
ffff800000804955:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    ddev->dir_inode=idev;
ffff800000804957:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080495e:	ff ff ff 
ffff800000804961:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804965:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804968:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080496c:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    make_inode(idev,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff800000804970:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804977:	ff ff ff 
ffff80000080497a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080497e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000804981:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804988:	ff ff ff 
ffff80000080498b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080498f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804992:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804995:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804999:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080499d:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff8000008049a4:	ff ff ff 
ffff8000008049a7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049ab:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049b1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008049b5:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
ffff8000008049b9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049bd:	49 89 c8             	mov    r8,rcx
ffff8000008049c0:	b9 02 00 00 00       	mov    ecx,0x2
ffff8000008049c5:	48 89 c7             	mov    rdi,rax
ffff8000008049c8:	49 89 df             	mov    r15,rbx
ffff8000008049cb:	48 b8 69 1b fe ff ff 	movabs rax,0xfffffffffffe1b69
ffff8000008049d2:	ff ff ff 
ffff8000008049d5:	48 01 d8             	add    rax,rbx
ffff8000008049d8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:73
    idev->private_index_info=ddev;
ffff8000008049da:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008049e1:	ff ff ff 
ffff8000008049e4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049e8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008049eb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049ef:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:76

    //创建mnt文件夹
    dmnt=(struct dir_entry*) kmalloc();
ffff8000008049f3:	49 89 df             	mov    r15,rbx
ffff8000008049f6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008049fb:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000804a02:	ff ff ff 
ffff800000804a05:	48 01 da             	add    rdx,rbx
ffff800000804a08:	ff d2                	call   rdx
ffff800000804a0a:	48 89 c2             	mov    rdx,rax
ffff800000804a0d:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804a14:	ff ff ff 
ffff800000804a17:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a1b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77
    struct index_node* imnt=dmnt+1;
ffff800000804a1e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804a25:	ff ff ff 
ffff800000804a28:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a2c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a2f:	48 83 c0 58          	add    rax,0x58
ffff800000804a33:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    dmnt->name=imnt+1;
ffff800000804a37:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804a3e:	ff ff ff 
ffff800000804a41:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a45:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a48:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804a4c:	48 83 c2 38          	add    rdx,0x38
ffff800000804a50:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
ffff800000804a53:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804a5a:	ff ff ff 
ffff800000804a5d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a61:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a64:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a67:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff800000804a6b:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804a72:	ff ff ff 
ffff800000804a75:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a79:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a7c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804a7f:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804a86:	ff ff ff 
ffff800000804a89:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a8d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a90:	49 89 c8             	mov    r8,rcx
ffff800000804a93:	48 89 d1             	mov    rcx,rdx
ffff800000804a96:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804a9b:	48 be cc d4 ff ff ff 	movabs rsi,0xffffffffffffd4cc
ffff800000804aa2:	ff ff ff 
ffff800000804aa5:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff800000804aa9:	48 89 c7             	mov    rdi,rax
ffff800000804aac:	49 89 df             	mov    r15,rbx
ffff800000804aaf:	48 b8 72 19 fe ff ff 	movabs rax,0xfffffffffffe1972
ffff800000804ab6:	ff ff ff 
ffff800000804ab9:	48 01 d8             	add    rax,rbx
ffff800000804abc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    dmnt->dir_inode=imnt;
ffff800000804abe:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804ac5:	ff ff ff 
ffff800000804ac8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804acc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804acf:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804ad3:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:81
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff800000804ad7:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804ade:	ff ff ff 
ffff800000804ae1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804ae5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000804ae8:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804aef:	ff ff ff 
ffff800000804af2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804af6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804af9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804afc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804b00:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff800000804b04:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804b0b:	ff ff ff 
ffff800000804b0e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b12:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804b15:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804b18:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804b1c:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
ffff800000804b20:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b24:	49 89 c8             	mov    r8,rcx
ffff800000804b27:	b9 02 00 00 00       	mov    ecx,0x2
ffff800000804b2c:	48 89 c7             	mov    rdi,rax
ffff800000804b2f:	49 89 df             	mov    r15,rbx
ffff800000804b32:	48 b8 69 1b fe ff ff 	movabs rax,0xfffffffffffe1b69
ffff800000804b39:	ff ff ff 
ffff800000804b3c:	48 01 d8             	add    rax,rbx
ffff800000804b3f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:82
    imnt->private_index_info=dmnt;
ffff800000804b41:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804b48:	ff ff ff 
ffff800000804b4b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b4f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804b52:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b56:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87


    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc();
ffff800000804b5a:	49 89 df             	mov    r15,rbx
ffff800000804b5d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804b62:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000804b69:	ff ff ff 
ffff800000804b6c:	48 01 da             	add    rdx,rbx
ffff800000804b6f:	ff d2                	call   rdx
ffff800000804b71:	48 89 c2             	mov    rdx,rax
ffff800000804b74:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff800000804b7b:	ff ff ff 
ffff800000804b7e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b82:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    struct index_node* iconsole=dconsole+1;
ffff800000804b85:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff800000804b8c:	ff ff ff 
ffff800000804b8f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b93:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804b96:	48 83 c0 58          	add    rax,0x58
ffff800000804b9a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:89
    dconsole->name=iconsole+1;
ffff800000804b9e:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff800000804ba5:	ff ff ff 
ffff800000804ba8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804bac:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804baf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804bb3:	48 83 c2 38          	add    rdx,0x38
ffff800000804bb7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:90
    make_devf(dconsole,iconsole,"console",ddev,&framebuffer_fops);
ffff800000804bba:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000804bc1:	ff ff ff 
ffff800000804bc4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804bc8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804bcb:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff800000804bd2:	ff ff ff 
ffff800000804bd5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804bd9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804bdc:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000804be0:	48 b9 28 fe ff ff ff 	movabs rcx,0xfffffffffffffe28
ffff800000804be7:	ff ff ff 
ffff800000804bea:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804bee:	49 89 c8             	mov    r8,rcx
ffff800000804bf1:	48 89 d1             	mov    rcx,rdx
ffff800000804bf4:	48 ba d0 d4 ff ff ff 	movabs rdx,0xffffffffffffd4d0
ffff800000804bfb:	ff ff ff 
ffff800000804bfe:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804c02:	48 89 c7             	mov    rdi,rax
ffff800000804c05:	49 89 df             	mov    r15,rbx
ffff800000804c08:	48 b8 d7 1b fe ff ff 	movabs rax,0xfffffffffffe1bd7
ffff800000804c0f:	ff ff ff 
ffff800000804c12:	48 01 d8             	add    rax,rbx
ffff800000804c15:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc();
ffff800000804c17:	49 89 df             	mov    r15,rbx
ffff800000804c1a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804c1f:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000804c26:	ff ff ff 
ffff800000804c29:	48 01 da             	add    rdx,rbx
ffff800000804c2c:	ff d2                	call   rdx
ffff800000804c2e:	48 89 c2             	mov    rdx,rax
ffff800000804c31:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000804c38:	ff ff ff 
ffff800000804c3b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c3f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:93
    struct index_node* ihd0=dhd0+1;
ffff800000804c42:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000804c49:	ff ff ff 
ffff800000804c4c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c50:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804c53:	48 83 c0 58          	add    rax,0x58
ffff800000804c57:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:94
    dhd0->name=ihd0+1;
ffff800000804c5b:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000804c62:	ff ff ff 
ffff800000804c65:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c69:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804c6c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804c70:	48 83 c2 38          	add    rdx,0x38
ffff800000804c74:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:95
    make_devf(dhd0,ihd0,"hd0",ddev,&hd_fops);
ffff800000804c77:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000804c7e:	ff ff ff 
ffff800000804c81:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c85:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804c88:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000804c8f:	ff ff ff 
ffff800000804c92:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c96:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804c99:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000804c9d:	48 b9 a8 fd ff ff ff 	movabs rcx,0xfffffffffffffda8
ffff800000804ca4:	ff ff ff 
ffff800000804ca7:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804cab:	49 89 c8             	mov    r8,rcx
ffff800000804cae:	48 89 d1             	mov    rcx,rdx
ffff800000804cb1:	48 ba d8 d4 ff ff ff 	movabs rdx,0xffffffffffffd4d8
ffff800000804cb8:	ff ff ff 
ffff800000804cbb:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804cbf:	48 89 c7             	mov    rdi,rax
ffff800000804cc2:	49 89 df             	mov    r15,rbx
ffff800000804cc5:	48 b8 d7 1b fe ff ff 	movabs rax,0xfffffffffffe1bd7
ffff800000804ccc:	ff ff ff 
ffff800000804ccf:	48 01 d8             	add    rax,rbx
ffff800000804cd2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:97
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc();
ffff800000804cd4:	49 89 df             	mov    r15,rbx
ffff800000804cd7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804cdc:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000804ce3:	ff ff ff 
ffff800000804ce6:	48 01 da             	add    rdx,rbx
ffff800000804ce9:	ff d2                	call   rdx
ffff800000804ceb:	48 89 c2             	mov    rdx,rax
ffff800000804cee:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff800000804cf5:	ff ff ff 
ffff800000804cf8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804cfc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:98
    struct index_node* itty=dtty+1;
ffff800000804cff:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff800000804d06:	ff ff ff 
ffff800000804d09:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804d0d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804d10:	48 83 c0 58          	add    rax,0x58
ffff800000804d14:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:99
    dtty->name=itty+1;
ffff800000804d18:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff800000804d1f:	ff ff ff 
ffff800000804d22:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804d26:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804d29:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804d2d:	48 83 c2 38          	add    rdx,0x38
ffff800000804d31:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:100
    make_devf(dtty,itty,"tty",ddev,&tty_fops);
ffff800000804d34:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000804d3b:	ff ff ff 
ffff800000804d3e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804d42:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804d45:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff800000804d4c:	ff ff ff 
ffff800000804d4f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804d53:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804d56:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff800000804d5a:	48 b9 b0 fe ff ff ff 	movabs rcx,0xfffffffffffffeb0
ffff800000804d61:	ff ff ff 
ffff800000804d64:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804d68:	49 89 c8             	mov    r8,rcx
ffff800000804d6b:	48 89 d1             	mov    rcx,rdx
ffff800000804d6e:	48 ba dc d4 ff ff ff 	movabs rdx,0xffffffffffffd4dc
ffff800000804d75:	ff ff ff 
ffff800000804d78:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804d7c:	48 89 c7             	mov    rdi,rax
ffff800000804d7f:	49 89 df             	mov    r15,rbx
ffff800000804d82:	48 b8 d7 1b fe ff ff 	movabs rax,0xfffffffffffe1bd7
ffff800000804d89:	ff ff ff 
ffff800000804d8c:	48 01 d8             	add    rax,rbx
ffff800000804d8f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:102
    //初始化一下
    tty_fops.open(itty,&ftty);
ffff800000804d91:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000804d98:	ff ff ff 
ffff800000804d9b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804d9f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804da2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804da6:	48 b9 10 fe ff ff ff 	movabs rcx,0xfffffffffffffe10
ffff800000804dad:	ff ff ff 
ffff800000804db0:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804db4:	48 89 ce             	mov    rsi,rcx
ffff800000804db7:	48 89 c7             	mov    rdi,rax
ffff800000804dba:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:104

}
ffff800000804dbc:	90                   	nop
ffff800000804dbd:	48 83 c4 30          	add    rsp,0x30
ffff800000804dc1:	5b                   	pop    rbx
ffff800000804dc2:	41 5f                	pop    r15
ffff800000804dc4:	5d                   	pop    rbp
ffff800000804dc5:	c3                   	ret    

ffff800000804dc6 <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106
//
long open_dev(struct index_node * inode,struct file * filp){
ffff800000804dc6:	f3 0f 1e fa          	endbr64 
ffff800000804dca:	55                   	push   rbp
ffff800000804dcb:	48 89 e5             	mov    rbp,rsp
ffff800000804dce:	41 57                	push   r15
ffff800000804dd0:	53                   	push   rbx
ffff800000804dd1:	48 83 ec 20          	sub    rsp,0x20
ffff800000804dd5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804dd5 <open_dev+0xf>
ffff800000804ddc:	49 bb ab dc 01 00 00 	movabs r11,0x1dcab
ffff800000804de3:	00 00 00 
ffff800000804de6:	4c 01 db             	add    rbx,r11
ffff800000804de9:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804ded:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:108
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804df1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804df5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804df9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804dfc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:109
    char* p=name+ strlen(name)-1;
ffff800000804e00:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e04:	48 89 c7             	mov    rdi,rax
ffff800000804e07:	49 89 df             	mov    r15,rbx
ffff800000804e0a:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff800000804e11:	ff ff ff 
ffff800000804e14:	48 01 d8             	add    rax,rbx
ffff800000804e17:	ff d0                	call   rax
ffff800000804e19:	48 98                	cdqe   
ffff800000804e1b:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804e1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e23:	48 01 d0             	add    rax,rdx
ffff800000804e26:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110
    for(;*p!='/'&&p>=name;p--);
ffff800000804e2a:	eb 05                	jmp    ffff800000804e31 <open_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 3)
ffff800000804e2c:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 1)
ffff800000804e31:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e35:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804e38:	3c 2f                	cmp    al,0x2f
ffff800000804e3a:	74 0a                	je     ffff800000804e46 <open_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 2)
ffff800000804e3c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e40:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804e44:	73 e6                	jae    ffff800000804e2c <open_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111
    if(p>=name)
ffff800000804e46:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e4a:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804e4e:	72 0c                	jb     ffff800000804e5c <open_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:112
        name=p+1;
ffff800000804e50:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e54:	48 83 c0 01          	add    rax,0x1
ffff800000804e58:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:113
    if(memcmp(name,"tty",3)==0){
ffff800000804e5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e60:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804e65:	48 b9 dc d4 ff ff ff 	movabs rcx,0xffffffffffffd4dc
ffff800000804e6c:	ff ff ff 
ffff800000804e6f:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804e73:	48 89 ce             	mov    rsi,rcx
ffff800000804e76:	48 89 c7             	mov    rdi,rax
ffff800000804e79:	49 89 df             	mov    r15,rbx
ffff800000804e7c:	48 b8 8f 11 ff ff ff 	movabs rax,0xffffffffffff118f
ffff800000804e83:	ff ff ff 
ffff800000804e86:	48 01 d8             	add    rax,rbx
ffff800000804e89:	ff d0                	call   rax
ffff800000804e8b:	85 c0                	test   eax,eax
ffff800000804e8d:	75 22                	jne    ffff800000804eb1 <open_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:114
        return init_tty(inode,filp);
ffff800000804e8f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804e93:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804e97:	48 89 d6             	mov    rsi,rdx
ffff800000804e9a:	48 89 c7             	mov    rdi,rax
ffff800000804e9d:	49 89 df             	mov    r15,rbx
ffff800000804ea0:	48 b8 0d 05 ff ff ff 	movabs rax,0xffffffffffff050d
ffff800000804ea7:	ff ff ff 
ffff800000804eaa:	48 01 d8             	add    rax,rbx
ffff800000804ead:	ff d0                	call   rax
ffff800000804eaf:	eb 57                	jmp    ffff800000804f08 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:115
    }else if(strcmp(name,"console")==0){
ffff800000804eb1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804eb5:	48 ba d0 d4 ff ff ff 	movabs rdx,0xffffffffffffd4d0
ffff800000804ebc:	ff ff ff 
ffff800000804ebf:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804ec3:	48 89 d6             	mov    rsi,rdx
ffff800000804ec6:	48 89 c7             	mov    rdi,rax
ffff800000804ec9:	49 89 df             	mov    r15,rbx
ffff800000804ecc:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff800000804ed3:	ff ff ff 
ffff800000804ed6:	48 01 d8             	add    rax,rbx
ffff800000804ed9:	ff d0                	call   rax
ffff800000804edb:	85 c0                	test   eax,eax
ffff800000804edd:	75 22                	jne    ffff800000804f01 <open_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:116
        return open_framebuffer(inode,filp);
ffff800000804edf:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804ee3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804ee7:	48 89 d6             	mov    rsi,rdx
ffff800000804eea:	48 89 c7             	mov    rdi,rax
ffff800000804eed:	49 89 df             	mov    r15,rbx
ffff800000804ef0:	48 b8 db 97 fe ff ff 	movabs rax,0xfffffffffffe97db
ffff800000804ef7:	ff ff ff 
ffff800000804efa:	48 01 d8             	add    rax,rbx
ffff800000804efd:	ff d0                	call   rax
ffff800000804eff:	eb 07                	jmp    ffff800000804f08 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:118
    }
    return -1;
ffff800000804f01:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:119
}
ffff800000804f08:	48 83 c4 20          	add    rsp,0x20
ffff800000804f0c:	5b                   	pop    rbx
ffff800000804f0d:	41 5f                	pop    r15
ffff800000804f0f:	5d                   	pop    rbp
ffff800000804f10:	c3                   	ret    

ffff800000804f11 <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120
long close_dev(struct index_node * inode,struct file * filp){
ffff800000804f11:	f3 0f 1e fa          	endbr64 
ffff800000804f15:	55                   	push   rbp
ffff800000804f16:	48 89 e5             	mov    rbp,rsp
ffff800000804f19:	41 57                	push   r15
ffff800000804f1b:	53                   	push   rbx
ffff800000804f1c:	48 83 ec 20          	sub    rsp,0x20
ffff800000804f20:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804f20 <close_dev+0xf>
ffff800000804f27:	49 bb 60 db 01 00 00 	movabs r11,0x1db60
ffff800000804f2e:	00 00 00 
ffff800000804f31:	4c 01 db             	add    rbx,r11
ffff800000804f34:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804f38:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:122
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804f3c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804f40:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804f44:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804f47:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:123
    char* p=name+ strlen(name)-1;
ffff800000804f4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804f4f:	48 89 c7             	mov    rdi,rax
ffff800000804f52:	49 89 df             	mov    r15,rbx
ffff800000804f55:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff800000804f5c:	ff ff ff 
ffff800000804f5f:	48 01 d8             	add    rax,rbx
ffff800000804f62:	ff d0                	call   rax
ffff800000804f64:	48 98                	cdqe   
ffff800000804f66:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804f6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804f6e:	48 01 d0             	add    rax,rdx
ffff800000804f71:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124
    for(;*p!='/'&&p>=name;p--);
ffff800000804f75:	eb 05                	jmp    ffff800000804f7c <close_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 3)
ffff800000804f77:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 1)
ffff800000804f7c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f80:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804f83:	3c 2f                	cmp    al,0x2f
ffff800000804f85:	74 0a                	je     ffff800000804f91 <close_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 2)
ffff800000804f87:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f8b:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804f8f:	73 e6                	jae    ffff800000804f77 <close_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125
    if(p>=name)
ffff800000804f91:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f95:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804f99:	72 0c                	jb     ffff800000804fa7 <close_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:126
        name=p+1;
ffff800000804f9b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f9f:	48 83 c0 01          	add    rax,0x1
ffff800000804fa3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:127
    if(memcmp(name,"tty",3)==0){
ffff800000804fa7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804fab:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804fb0:	48 b9 dc d4 ff ff ff 	movabs rcx,0xffffffffffffd4dc
ffff800000804fb7:	ff ff ff 
ffff800000804fba:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804fbe:	48 89 ce             	mov    rsi,rcx
ffff800000804fc1:	48 89 c7             	mov    rdi,rax
ffff800000804fc4:	49 89 df             	mov    r15,rbx
ffff800000804fc7:	48 b8 8f 11 ff ff ff 	movabs rax,0xffffffffffff118f
ffff800000804fce:	ff ff ff 
ffff800000804fd1:	48 01 d8             	add    rax,rbx
ffff800000804fd4:	ff d0                	call   rax
ffff800000804fd6:	85 c0                	test   eax,eax
ffff800000804fd8:	75 22                	jne    ffff800000804ffc <close_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:128
        return close_tty(inode,filp);
ffff800000804fda:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804fde:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804fe2:	48 89 d6             	mov    rsi,rdx
ffff800000804fe5:	48 89 c7             	mov    rdi,rax
ffff800000804fe8:	49 89 df             	mov    r15,rbx
ffff800000804feb:	48 b8 40 04 ff ff ff 	movabs rax,0xffffffffffff0440
ffff800000804ff2:	ff ff ff 
ffff800000804ff5:	48 01 d8             	add    rax,rbx
ffff800000804ff8:	ff d0                	call   rax
ffff800000804ffa:	eb 57                	jmp    ffff800000805053 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:129
    }else if(strcmp(name,"console")==0){
ffff800000804ffc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805000:	48 ba d0 d4 ff ff ff 	movabs rdx,0xffffffffffffd4d0
ffff800000805007:	ff ff ff 
ffff80000080500a:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080500e:	48 89 d6             	mov    rsi,rdx
ffff800000805011:	48 89 c7             	mov    rdi,rax
ffff800000805014:	49 89 df             	mov    r15,rbx
ffff800000805017:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff80000080501e:	ff ff ff 
ffff800000805021:	48 01 d8             	add    rax,rbx
ffff800000805024:	ff d0                	call   rax
ffff800000805026:	85 c0                	test   eax,eax
ffff800000805028:	75 22                	jne    ffff80000080504c <close_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130
        return close_framebuffer(inode,filp);
ffff80000080502a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080502e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805032:	48 89 d6             	mov    rsi,rdx
ffff800000805035:	48 89 c7             	mov    rdi,rax
ffff800000805038:	49 89 df             	mov    r15,rbx
ffff80000080503b:	48 b8 32 98 fe ff ff 	movabs rax,0xfffffffffffe9832
ffff800000805042:	ff ff ff 
ffff800000805045:	48 01 d8             	add    rax,rbx
ffff800000805048:	ff d0                	call   rax
ffff80000080504a:	eb 07                	jmp    ffff800000805053 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:132
    }
    return -1;
ffff80000080504c:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:134

}
ffff800000805053:	48 83 c4 20          	add    rsp,0x20
ffff800000805057:	5b                   	pop    rbx
ffff800000805058:	41 5f                	pop    r15
ffff80000080505a:	5d                   	pop    rbp
ffff80000080505b:	c3                   	ret    

ffff80000080505c <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:135
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080505c:	f3 0f 1e fa          	endbr64 
ffff800000805060:	55                   	push   rbp
ffff800000805061:	48 89 e5             	mov    rbp,rsp
ffff800000805064:	41 57                	push   r15
ffff800000805066:	53                   	push   rbx
ffff800000805067:	48 83 ec 30          	sub    rsp,0x30
ffff80000080506b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080506b <read_dev+0xf>
ffff800000805072:	49 bb 15 da 01 00 00 	movabs r11,0x1da15
ffff800000805079:	00 00 00 
ffff80000080507c:	4c 01 db             	add    rbx,r11
ffff80000080507f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000805083:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000805087:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080508b:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:137
    //查看文件名
    char* name=filp->dentry->name;
ffff80000080508f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805093:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000805097:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080509a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:138
    char* p=name+ strlen(name)-1;
ffff80000080509e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008050a2:	48 89 c7             	mov    rdi,rax
ffff8000008050a5:	49 89 df             	mov    r15,rbx
ffff8000008050a8:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff8000008050af:	ff ff ff 
ffff8000008050b2:	48 01 d8             	add    rax,rbx
ffff8000008050b5:	ff d0                	call   rax
ffff8000008050b7:	48 98                	cdqe   
ffff8000008050b9:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008050bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008050c1:	48 01 d0             	add    rax,rdx
ffff8000008050c4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139
    for(;*p!='/'&&p>=name;p--);
ffff8000008050c8:	eb 05                	jmp    ffff8000008050cf <read_dev+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 3)
ffff8000008050ca:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 1)
ffff8000008050cf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008050d3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008050d6:	3c 2f                	cmp    al,0x2f
ffff8000008050d8:	74 0a                	je     ffff8000008050e4 <read_dev+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 2)
ffff8000008050da:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008050de:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008050e2:	73 e6                	jae    ffff8000008050ca <read_dev+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:140
    if(p>=name)
ffff8000008050e4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008050e8:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008050ec:	72 0c                	jb     ffff8000008050fa <read_dev+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:141
        name=p+1;
ffff8000008050ee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008050f2:	48 83 c0 01          	add    rax,0x1
ffff8000008050f6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142
    if(memcmp(name,"tty",3)==0){
ffff8000008050fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008050fe:	ba 03 00 00 00       	mov    edx,0x3
ffff800000805103:	48 b9 dc d4 ff ff ff 	movabs rcx,0xffffffffffffd4dc
ffff80000080510a:	ff ff ff 
ffff80000080510d:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000805111:	48 89 ce             	mov    rsi,rcx
ffff800000805114:	48 89 c7             	mov    rdi,rax
ffff800000805117:	49 89 df             	mov    r15,rbx
ffff80000080511a:	48 b8 8f 11 ff ff ff 	movabs rax,0xffffffffffff118f
ffff800000805121:	ff ff ff 
ffff800000805124:	48 01 d8             	add    rax,rbx
ffff800000805127:	ff d0                	call   rax
ffff800000805129:	85 c0                	test   eax,eax
ffff80000080512b:	75 27                	jne    ffff800000805154 <read_dev+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:143
        return read_tty(filp,buf,count,position);
ffff80000080512d:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000805131:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805135:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000805139:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080513d:	48 89 c7             	mov    rdi,rax
ffff800000805140:	49 89 df             	mov    r15,rbx
ffff800000805143:	48 b8 61 06 ff ff ff 	movabs rax,0xffffffffffff0661
ffff80000080514a:	ff ff ff 
ffff80000080514d:	48 01 d8             	add    rax,rbx
ffff800000805150:	ff d0                	call   rax
ffff800000805152:	eb 5c                	jmp    ffff8000008051b0 <read_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:144
    }else if(strcmp(name,"console")==0){
ffff800000805154:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805158:	48 ba d0 d4 ff ff ff 	movabs rdx,0xffffffffffffd4d0
ffff80000080515f:	ff ff ff 
ffff800000805162:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000805166:	48 89 d6             	mov    rsi,rdx
ffff800000805169:	48 89 c7             	mov    rdi,rax
ffff80000080516c:	49 89 df             	mov    r15,rbx
ffff80000080516f:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff800000805176:	ff ff ff 
ffff800000805179:	48 01 d8             	add    rax,rbx
ffff80000080517c:	ff d0                	call   rax
ffff80000080517e:	85 c0                	test   eax,eax
ffff800000805180:	75 27                	jne    ffff8000008051a9 <read_dev+0x14d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
        return read_framebuffer(filp,buf,count,position);
ffff800000805182:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000805186:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080518a:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080518e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805192:	48 89 c7             	mov    rdi,rax
ffff800000805195:	49 89 df             	mov    r15,rbx
ffff800000805198:	48 b8 59 98 fe ff ff 	movabs rax,0xfffffffffffe9859
ffff80000080519f:	ff ff ff 
ffff8000008051a2:	48 01 d8             	add    rax,rbx
ffff8000008051a5:	ff d0                	call   rax
ffff8000008051a7:	eb 07                	jmp    ffff8000008051b0 <read_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147
    }
    return -1;
ffff8000008051a9:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:149

}
ffff8000008051b0:	48 83 c4 30          	add    rsp,0x30
ffff8000008051b4:	5b                   	pop    rbx
ffff8000008051b5:	41 5f                	pop    r15
ffff8000008051b7:	5d                   	pop    rbp
ffff8000008051b8:	c3                   	ret    

ffff8000008051b9 <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:150
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff8000008051b9:	f3 0f 1e fa          	endbr64 
ffff8000008051bd:	55                   	push   rbp
ffff8000008051be:	48 89 e5             	mov    rbp,rsp
ffff8000008051c1:	41 57                	push   r15
ffff8000008051c3:	53                   	push   rbx
ffff8000008051c4:	48 83 ec 30          	sub    rsp,0x30
ffff8000008051c8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008051c8 <write_dev+0xf>
ffff8000008051cf:	49 bb b8 d8 01 00 00 	movabs r11,0x1d8b8
ffff8000008051d6:	00 00 00 
ffff8000008051d9:	4c 01 db             	add    rbx,r11
ffff8000008051dc:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008051e0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff8000008051e4:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff8000008051e8:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152
    //查看文件名
    char* name=filp->dentry->name;
ffff8000008051ec:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008051f0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008051f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008051f7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
    char* p=name+ strlen(name)-1;
ffff8000008051fb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008051ff:	48 89 c7             	mov    rdi,rax
ffff800000805202:	49 89 df             	mov    r15,rbx
ffff800000805205:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff80000080520c:	ff ff ff 
ffff80000080520f:	48 01 d8             	add    rax,rbx
ffff800000805212:	ff d0                	call   rax
ffff800000805214:	48 98                	cdqe   
ffff800000805216:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080521a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080521e:	48 01 d0             	add    rax,rdx
ffff800000805221:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154
    for(;*p!='/'&&p>=name;p--);
ffff800000805225:	eb 05                	jmp    ffff80000080522c <write_dev+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 3)
ffff800000805227:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 1)
ffff80000080522c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805230:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000805233:	3c 2f                	cmp    al,0x2f
ffff800000805235:	74 0a                	je     ffff800000805241 <write_dev+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 2)
ffff800000805237:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080523b:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080523f:	73 e6                	jae    ffff800000805227 <write_dev+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    if(p>=name)
ffff800000805241:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805245:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000805249:	72 0c                	jb     ffff800000805257 <write_dev+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:156
        name=p+1;
ffff80000080524b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080524f:	48 83 c0 01          	add    rax,0x1
ffff800000805253:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:157
    if(memcmp(name,"tty",3)==0){
ffff800000805257:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080525b:	ba 03 00 00 00       	mov    edx,0x3
ffff800000805260:	48 b9 dc d4 ff ff ff 	movabs rcx,0xffffffffffffd4dc
ffff800000805267:	ff ff ff 
ffff80000080526a:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff80000080526e:	48 89 ce             	mov    rsi,rcx
ffff800000805271:	48 89 c7             	mov    rdi,rax
ffff800000805274:	49 89 df             	mov    r15,rbx
ffff800000805277:	48 b8 8f 11 ff ff ff 	movabs rax,0xffffffffffff118f
ffff80000080527e:	ff ff ff 
ffff800000805281:	48 01 d8             	add    rax,rbx
ffff800000805284:	ff d0                	call   rax
ffff800000805286:	85 c0                	test   eax,eax
ffff800000805288:	75 27                	jne    ffff8000008052b1 <write_dev+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:158
        return write_tty(filp,buf,count,position);
ffff80000080528a:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080528e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805292:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000805296:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080529a:	48 89 c7             	mov    rdi,rax
ffff80000080529d:	49 89 df             	mov    r15,rbx
ffff8000008052a0:	48 b8 22 07 ff ff ff 	movabs rax,0xffffffffffff0722
ffff8000008052a7:	ff ff ff 
ffff8000008052aa:	48 01 d8             	add    rax,rbx
ffff8000008052ad:	ff d0                	call   rax
ffff8000008052af:	eb 5c                	jmp    ffff80000080530d <write_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:159
    }else if(strcmp(name,"console")==0){
ffff8000008052b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008052b5:	48 ba d0 d4 ff ff ff 	movabs rdx,0xffffffffffffd4d0
ffff8000008052bc:	ff ff ff 
ffff8000008052bf:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff8000008052c3:	48 89 d6             	mov    rsi,rdx
ffff8000008052c6:	48 89 c7             	mov    rdi,rax
ffff8000008052c9:	49 89 df             	mov    r15,rbx
ffff8000008052cc:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff8000008052d3:	ff ff ff 
ffff8000008052d6:	48 01 d8             	add    rax,rbx
ffff8000008052d9:	ff d0                	call   rax
ffff8000008052db:	85 c0                	test   eax,eax
ffff8000008052dd:	75 27                	jne    ffff800000805306 <write_dev+0x14d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:160
        return write_framebuffer(filp,buf,count,position);
ffff8000008052df:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff8000008052e3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008052e7:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008052eb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008052ef:	48 89 c7             	mov    rdi,rax
ffff8000008052f2:	49 89 df             	mov    r15,rbx
ffff8000008052f5:	48 b8 88 98 fe ff ff 	movabs rax,0xfffffffffffe9888
ffff8000008052fc:	ff ff ff 
ffff8000008052ff:	48 01 d8             	add    rax,rbx
ffff800000805302:	ff d0                	call   rax
ffff800000805304:	eb 07                	jmp    ffff80000080530d <write_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:162
    }
    return -1;
ffff800000805306:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164

}
ffff80000080530d:	48 83 c4 30          	add    rsp,0x30
ffff800000805311:	5b                   	pop    rbx
ffff800000805312:	41 5f                	pop    r15
ffff800000805314:	5d                   	pop    rbp
ffff800000805315:	c3                   	ret    

ffff800000805316 <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:165
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff800000805316:	f3 0f 1e fa          	endbr64 
ffff80000080531a:	55                   	push   rbp
ffff80000080531b:	48 89 e5             	mov    rbp,rsp
ffff80000080531e:	41 57                	push   r15
ffff800000805320:	53                   	push   rbx
ffff800000805321:	48 83 ec 30          	sub    rsp,0x30
ffff800000805325:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805325 <ioctl_dev+0xf>
ffff80000080532c:	49 bb 5b d7 01 00 00 	movabs r11,0x1d75b
ffff800000805333:	00 00 00 
ffff800000805336:	4c 01 db             	add    rbx,r11
ffff800000805339:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080533d:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000805341:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000805345:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
    //查看文件名
    char* name=filp->dentry->name;
ffff800000805349:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080534d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000805351:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805354:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
    char* p=name+ strlen(name)-1;
ffff800000805358:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080535c:	48 89 c7             	mov    rdi,rax
ffff80000080535f:	49 89 df             	mov    r15,rbx
ffff800000805362:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff800000805369:	ff ff ff 
ffff80000080536c:	48 01 d8             	add    rax,rbx
ffff80000080536f:	ff d0                	call   rax
ffff800000805371:	48 98                	cdqe   
ffff800000805373:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000805377:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080537b:	48 01 d0             	add    rax,rdx
ffff80000080537e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
    for(;*p!='/'&&p>=name;p--);
ffff800000805382:	eb 05                	jmp    ffff800000805389 <ioctl_dev+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 3)
ffff800000805384:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 1)
ffff800000805389:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080538d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000805390:	3c 2f                	cmp    al,0x2f
ffff800000805392:	74 0a                	je     ffff80000080539e <ioctl_dev+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 2)
ffff800000805394:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805398:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080539c:	73 e6                	jae    ffff800000805384 <ioctl_dev+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:170
    if(p>=name)
ffff80000080539e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053a2:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008053a6:	72 0c                	jb     ffff8000008053b4 <ioctl_dev+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:171
        name=p+1;
ffff8000008053a8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053ac:	48 83 c0 01          	add    rax,0x1
ffff8000008053b0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
    if(memcmp(name,"tty",3)==0){
ffff8000008053b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008053b8:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008053bd:	48 b9 dc d4 ff ff ff 	movabs rcx,0xffffffffffffd4dc
ffff8000008053c4:	ff ff ff 
ffff8000008053c7:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff8000008053cb:	48 89 ce             	mov    rsi,rcx
ffff8000008053ce:	48 89 c7             	mov    rdi,rax
ffff8000008053d1:	49 89 df             	mov    r15,rbx
ffff8000008053d4:	48 b8 8f 11 ff ff ff 	movabs rax,0xffffffffffff118f
ffff8000008053db:	ff ff ff 
ffff8000008053de:	48 01 d8             	add    rax,rbx
ffff8000008053e1:	ff d0                	call   rax
ffff8000008053e3:	85 c0                	test   eax,eax
ffff8000008053e5:	75 27                	jne    ffff80000080540e <ioctl_dev+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:173
        return ioctl_tty(inode, filp, cmd, arg);
ffff8000008053e7:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff8000008053eb:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008053ef:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008053f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008053f7:	48 89 c7             	mov    rdi,rax
ffff8000008053fa:	49 89 df             	mov    r15,rbx
ffff8000008053fd:	48 b8 12 08 ff ff ff 	movabs rax,0xffffffffffff0812
ffff800000805404:	ff ff ff 
ffff800000805407:	48 01 d8             	add    rax,rbx
ffff80000080540a:	ff d0                	call   rax
ffff80000080540c:	eb 5c                	jmp    ffff80000080546a <ioctl_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:174
    }else if(strcmp(name,"console")==0){
ffff80000080540e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805412:	48 ba d0 d4 ff ff ff 	movabs rdx,0xffffffffffffd4d0
ffff800000805419:	ff ff ff 
ffff80000080541c:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000805420:	48 89 d6             	mov    rsi,rdx
ffff800000805423:	48 89 c7             	mov    rdi,rax
ffff800000805426:	49 89 df             	mov    r15,rbx
ffff800000805429:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff800000805430:	ff ff ff 
ffff800000805433:	48 01 d8             	add    rax,rbx
ffff800000805436:	ff d0                	call   rax
ffff800000805438:	85 c0                	test   eax,eax
ffff80000080543a:	75 27                	jne    ffff800000805463 <ioctl_dev+0x14d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:175
        return ioctl_framebuffer(inode,filp,cmd,arg);
ffff80000080543c:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000805440:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805444:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000805448:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080544c:	48 89 c7             	mov    rdi,rax
ffff80000080544f:	49 89 df             	mov    r15,rbx
ffff800000805452:	48 b8 a9 99 fe ff ff 	movabs rax,0xfffffffffffe99a9
ffff800000805459:	ff ff ff 
ffff80000080545c:	48 01 d8             	add    rax,rbx
ffff80000080545f:	ff d0                	call   rax
ffff800000805461:	eb 07                	jmp    ffff80000080546a <ioctl_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    }
    return -1;
ffff800000805463:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:179

}
ffff80000080546a:	48 83 c4 30          	add    rsp,0x30
ffff80000080546e:	5b                   	pop    rbx
ffff80000080546f:	41 5f                	pop    r15
ffff800000805471:	5d                   	pop    rbp
ffff800000805472:	c3                   	ret    

ffff800000805473 <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:181
int load_driver(char *path)
{
ffff800000805473:	f3 0f 1e fa          	endbr64 
ffff800000805477:	55                   	push   rbp
ffff800000805478:	48 89 e5             	mov    rbp,rsp
ffff80000080547b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080547b <load_driver+0x8>
ffff800000805482:	49 bb 05 d6 01 00 00 	movabs r11,0x1d605
ffff800000805489:	00 00 00 
ffff80000080548c:	4c 01 d8             	add    rax,r11
ffff80000080548f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:183
    
}
ffff800000805493:	90                   	nop
ffff800000805494:	5d                   	pop    rbp
ffff800000805495:	c3                   	ret    

ffff800000805496 <reg_device>:
reg_device():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:186

int reg_device(device* dev)
{
ffff800000805496:	f3 0f 1e fa          	endbr64 
ffff80000080549a:	55                   	push   rbp
ffff80000080549b:	48 89 e5             	mov    rbp,rsp
ffff80000080549e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080549e <reg_device+0x8>
ffff8000008054a5:	49 bb e2 d5 01 00 00 	movabs r11,0x1d5e2
ffff8000008054ac:	00 00 00 
ffff8000008054af:	4c 01 d8             	add    rax,r11
ffff8000008054b2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190
    //TODO:查重

    //放入数组
    int i=0;
ffff8000008054b6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    for(;i<MAX_DEVICES;i++)
ffff8000008054bd:	e9 6b 01 00 00       	jmp    ffff80000080562d <reg_device+0x197>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:193
    {
        if(devs[i].flag==DEV_FLAG_EMPTY)
ffff8000008054c2:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff8000008054c9:	ff ff ff 
ffff8000008054cc:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff8000008054d0:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008054d3:	48 63 ca             	movsxd rcx,edx
ffff8000008054d6:	48 89 ca             	mov    rdx,rcx
ffff8000008054d9:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008054dd:	48 01 ca             	add    rdx,rcx
ffff8000008054e0:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008054e4:	48 01 ca             	add    rdx,rcx
ffff8000008054e7:	48 c1 e2 03          	shl    rdx,0x3
ffff8000008054eb:	48 01 f2             	add    rdx,rsi
ffff8000008054ee:	48 83 c2 10          	add    rdx,0x10
ffff8000008054f2:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008054f4:	85 d2                	test   edx,edx
ffff8000008054f6:	0f 85 2d 01 00 00    	jne    ffff800000805629 <reg_device+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:195
        {
            devs[i]=*dev;
ffff8000008054fc:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000805503:	ff ff ff 
ffff800000805506:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080550a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080550d:	48 63 ca             	movsxd rcx,edx
ffff800000805510:	48 89 ca             	mov    rdx,rcx
ffff800000805513:	48 c1 e2 02          	shl    rdx,0x2
ffff800000805517:	48 01 ca             	add    rdx,rcx
ffff80000080551a:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080551e:	48 01 ca             	add    rdx,rcx
ffff800000805521:	48 c1 e2 03          	shl    rdx,0x3
ffff800000805525:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff800000805529:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080552d:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805530:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
ffff800000805534:	48 89 31             	mov    QWORD PTR [rcx],rsi
ffff800000805537:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
ffff80000080553b:	48 8b 72 10          	mov    rsi,QWORD PTR [rdx+0x10]
ffff80000080553f:	48 8b 7a 18          	mov    rdi,QWORD PTR [rdx+0x18]
ffff800000805543:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
ffff800000805547:	48 89 79 18          	mov    QWORD PTR [rcx+0x18],rdi
ffff80000080554b:	48 8b 72 20          	mov    rsi,QWORD PTR [rdx+0x20]
ffff80000080554f:	48 8b 7a 28          	mov    rdi,QWORD PTR [rdx+0x28]
ffff800000805553:	48 89 71 20          	mov    QWORD PTR [rcx+0x20],rsi
ffff800000805557:	48 89 79 28          	mov    QWORD PTR [rcx+0x28],rdi
ffff80000080555b:	48 8b 72 30          	mov    rsi,QWORD PTR [rdx+0x30]
ffff80000080555f:	48 8b 7a 38          	mov    rdi,QWORD PTR [rdx+0x38]
ffff800000805563:	48 89 71 30          	mov    QWORD PTR [rcx+0x30],rsi
ffff800000805567:	48 89 79 38          	mov    QWORD PTR [rcx+0x38],rdi
ffff80000080556b:	48 8b 72 40          	mov    rsi,QWORD PTR [rdx+0x40]
ffff80000080556f:	48 8b 7a 48          	mov    rdi,QWORD PTR [rdx+0x48]
ffff800000805573:	48 89 71 40          	mov    QWORD PTR [rcx+0x40],rsi
ffff800000805577:	48 89 79 48          	mov    QWORD PTR [rcx+0x48],rdi
ffff80000080557b:	48 8b 72 50          	mov    rsi,QWORD PTR [rdx+0x50]
ffff80000080557f:	48 8b 7a 58          	mov    rdi,QWORD PTR [rdx+0x58]
ffff800000805583:	48 89 71 50          	mov    QWORD PTR [rcx+0x50],rsi
ffff800000805587:	48 89 79 58          	mov    QWORD PTR [rcx+0x58],rdi
ffff80000080558b:	48 8b 72 60          	mov    rsi,QWORD PTR [rdx+0x60]
ffff80000080558f:	48 8b 7a 68          	mov    rdi,QWORD PTR [rdx+0x68]
ffff800000805593:	48 89 71 60          	mov    QWORD PTR [rcx+0x60],rsi
ffff800000805597:	48 89 79 68          	mov    QWORD PTR [rcx+0x68],rdi
ffff80000080559b:	48 8b 72 70          	mov    rsi,QWORD PTR [rdx+0x70]
ffff80000080559f:	48 8b 7a 78          	mov    rdi,QWORD PTR [rdx+0x78]
ffff8000008055a3:	48 89 71 70          	mov    QWORD PTR [rcx+0x70],rsi
ffff8000008055a7:	48 89 79 78          	mov    QWORD PTR [rcx+0x78],rdi
ffff8000008055ab:	48 8b b2 80 00 00 00 	mov    rsi,QWORD PTR [rdx+0x80]
ffff8000008055b2:	48 8b ba 88 00 00 00 	mov    rdi,QWORD PTR [rdx+0x88]
ffff8000008055b9:	48 89 b1 80 00 00 00 	mov    QWORD PTR [rcx+0x80],rsi
ffff8000008055c0:	48 89 b9 88 00 00 00 	mov    QWORD PTR [rcx+0x88],rdi
ffff8000008055c7:	48 8b b2 90 00 00 00 	mov    rsi,QWORD PTR [rdx+0x90]
ffff8000008055ce:	48 8b ba 98 00 00 00 	mov    rdi,QWORD PTR [rdx+0x98]
ffff8000008055d5:	48 89 b1 90 00 00 00 	mov    QWORD PTR [rcx+0x90],rsi
ffff8000008055dc:	48 89 b9 98 00 00 00 	mov    QWORD PTR [rcx+0x98],rdi
ffff8000008055e3:	48 8b 92 a0 00 00 00 	mov    rdx,QWORD PTR [rdx+0xa0]
ffff8000008055ea:	48 89 91 a0 00 00 00 	mov    QWORD PTR [rcx+0xa0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:196
            devs[i].flag=DEV_FLAG_USED;
ffff8000008055f1:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff8000008055f8:	ff ff ff 
ffff8000008055fb:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff8000008055ff:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805602:	48 63 ca             	movsxd rcx,edx
ffff800000805605:	48 89 ca             	mov    rdx,rcx
ffff800000805608:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080560c:	48 01 ca             	add    rdx,rcx
ffff80000080560f:	48 c1 e2 02          	shl    rdx,0x2
ffff800000805613:	48 01 ca             	add    rdx,rcx
ffff800000805616:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080561a:	48 01 f2             	add    rdx,rsi
ffff80000080561d:	48 83 c2 10          	add    rdx,0x10
ffff800000805621:	c7 02 01 00 00 00    	mov    DWORD PTR [rdx],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:197
            break;
ffff800000805627:	eb 0e                	jmp    ffff800000805637 <reg_device+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    for(;i<MAX_DEVICES;i++)
ffff800000805629:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191 (discriminator 1)
ffff80000080562d:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000805631:	0f 8e 8b fe ff ff    	jle    ffff8000008054c2 <reg_device+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200
        }
    }
    if(i==MAX_DEVICES)
ffff800000805637:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff80000080563b:	75 0a                	jne    ffff800000805647 <reg_device+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:201
        return -1;
ffff80000080563d:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805642:	e9 c5 01 00 00       	jmp    ffff80000080580c <reg_device+0x376>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:203
    //添加到链表
    device* p=NULL,*neo=&devs[i],**pp;
ffff800000805647:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080564e:	00 
ffff80000080564f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805652:	48 63 ca             	movsxd rcx,edx
ffff800000805655:	48 89 ca             	mov    rdx,rcx
ffff800000805658:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080565c:	48 01 ca             	add    rdx,rcx
ffff80000080565f:	48 c1 e2 02          	shl    rdx,0x2
ffff800000805663:	48 01 ca             	add    rdx,rcx
ffff800000805666:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080566a:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff800000805671:	ff ff ff 
ffff800000805674:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000805678:	48 01 ca             	add    rdx,rcx
ffff80000080567b:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:204
    switch (dev->type)
ffff80000080567f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000805683:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000805686:	83 fa 03             	cmp    edx,0x3
ffff800000805689:	74 6f                	je     ffff8000008056fa <reg_device+0x264>
ffff80000080568b:	83 fa 03             	cmp    edx,0x3
ffff80000080568e:	0f 8f 94 00 00 00    	jg     ffff800000805728 <reg_device+0x292>
ffff800000805694:	83 fa 01             	cmp    edx,0x1
ffff800000805697:	74 0a                	je     ffff8000008056a3 <reg_device+0x20d>
ffff800000805699:	83 fa 02             	cmp    edx,0x2
ffff80000080569c:	74 2e                	je     ffff8000008056cc <reg_device+0x236>
ffff80000080569e:	e9 85 00 00 00       	jmp    ffff800000805728 <reg_device+0x292>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:207
    {
    case DEV_TYPE_BLKDEV:
        p=dev_tree[DEVTREE_BLKDEVI];pp=&dev_tree[DEVTREE_BLKDEVI];
ffff8000008056a3:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008056aa:	ff ff ff 
ffff8000008056ad:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008056b1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008056b4:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff8000008056b8:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008056bf:	ff ff ff 
ffff8000008056c2:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008056c6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:208
        break;
ffff8000008056ca:	eb 66                	jmp    ffff800000805732 <reg_device+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:211
    
    case DEV_TYPE_CHRDEV:
        p=dev_tree[DEVTREE_CHRDEVI];pp=&dev_tree[DEVTREE_CHRDEVI];
ffff8000008056cc:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008056d3:	ff ff ff 
ffff8000008056d6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008056da:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff8000008056de:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff8000008056e2:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008056e9:	ff ff ff 
ffff8000008056ec:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008056f0:	48 8d 40 08          	lea    rax,[rax+0x8]
ffff8000008056f4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:212
        break;
ffff8000008056f8:	eb 38                	jmp    ffff800000805732 <reg_device+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:215
        
    case DEV_TYPE_OTHERS:
        p=dev_tree[DEVTREE_OTHERDEVI];pp=&dev_tree[DEVTREE_OTHERDEVI];
ffff8000008056fa:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff800000805701:	ff ff ff 
ffff800000805704:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805708:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080570c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000805710:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff800000805717:	ff ff ff 
ffff80000080571a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080571e:	48 8d 40 10          	lea    rax,[rax+0x10]
ffff800000805722:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:216
        break;
ffff800000805726:	eb 0a                	jmp    ffff800000805732 <reg_device+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:217
    default:return -1;//不可能有其他情况
ffff800000805728:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080572d:	e9 da 00 00 00       	jmp    ffff80000080580c <reg_device+0x376>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:219
    }
    if(!p){
ffff800000805732:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff800000805737:	75 2b                	jne    ffff800000805764 <reg_device+0x2ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:220
        *pp=neo;
ffff800000805739:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080573d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000805741:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:221
        neo->prev=NULL;
ffff800000805744:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805748:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x0
ffff80000080574f:	00 00 00 00 
ffff800000805753:	eb 3d                	jmp    ffff800000805792 <reg_device+0x2fc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:224 (discriminator 2)
    }
    else{
        for(;p->next;p=p->next);
ffff800000805755:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805759:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff800000805760:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:224 (discriminator 1)
ffff800000805764:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805768:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff80000080576f:	48 85 c0             	test   rax,rax
ffff800000805772:	75 e1                	jne    ffff800000805755 <reg_device+0x2bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:225
        p->next=neo;
ffff800000805774:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805778:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080577c:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:226
        neo->prev=p;
ffff800000805783:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805787:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080578b:	48 89 90 98 00 00 00 	mov    QWORD PTR [rax+0x98],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:228
    }
    neo->next=NULL;
ffff800000805792:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805796:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x0
ffff80000080579d:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:230
    //设置相应的请求函数
    switch (neo->stype)
ffff8000008057a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008057a5:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff8000008057a8:	83 f8 04             	cmp    eax,0x4
ffff8000008057ab:	74 3b                	je     ffff8000008057e8 <reg_device+0x352>
ffff8000008057ad:	83 f8 04             	cmp    eax,0x4
ffff8000008057b0:	7f 56                	jg     ffff800000805808 <reg_device+0x372>
ffff8000008057b2:	83 f8 03             	cmp    eax,0x3
ffff8000008057b5:	74 21                	je     ffff8000008057d8 <reg_device+0x342>
ffff8000008057b7:	83 f8 03             	cmp    eax,0x3
ffff8000008057ba:	7f 4c                	jg     ffff800000805808 <reg_device+0x372>
ffff8000008057bc:	83 f8 01             	cmp    eax,0x1
ffff8000008057bf:	74 07                	je     ffff8000008057c8 <reg_device+0x332>
ffff8000008057c1:	83 f8 02             	cmp    eax,0x2
ffff8000008057c4:	74 32                	je     ffff8000008057f8 <reg_device+0x362>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:246
        break;
    case DEV_STYPE_TTY:
        neo->operi=OPERATIONS_TTY;
        break;
    default:
        break;
ffff8000008057c6:	eb 40                	jmp    ffff800000805808 <reg_device+0x372>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:233
        neo->operi=OPERATIONS_HD;
ffff8000008057c8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008057cc:	c7 80 a0 00 00 00 00 	mov    DWORD PTR [rax+0xa0],0x0
ffff8000008057d3:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:234
        break;
ffff8000008057d6:	eb 31                	jmp    ffff800000805809 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:237
        neo->operi=OPERATIONS_MOUSE;
ffff8000008057d8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008057dc:	c7 80 a0 00 00 00 02 	mov    DWORD PTR [rax+0xa0],0x2
ffff8000008057e3:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:238
        break;
ffff8000008057e6:	eb 21                	jmp    ffff800000805809 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:240
        neo->operi=OPERATIONS_KEYBOARD;
ffff8000008057e8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008057ec:	c7 80 a0 00 00 00 03 	mov    DWORD PTR [rax+0xa0],0x3
ffff8000008057f3:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:241
        break;
ffff8000008057f6:	eb 11                	jmp    ffff800000805809 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243
        neo->operi=OPERATIONS_TTY;
ffff8000008057f8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008057fc:	c7 80 a0 00 00 00 01 	mov    DWORD PTR [rax+0xa0],0x1
ffff800000805803:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:244
        break;
ffff800000805806:	eb 01                	jmp    ffff800000805809 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:246
        break;
ffff800000805808:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:248
    }
    return i;
ffff800000805809:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:249
}
ffff80000080580c:	5d                   	pop    rbp
ffff80000080580d:	c3                   	ret    

ffff80000080580e <reg_driver>:
reg_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:253


int reg_driver(driver *drv)
{
ffff80000080580e:	f3 0f 1e fa          	endbr64 
ffff800000805812:	55                   	push   rbp
ffff800000805813:	48 89 e5             	mov    rbp,rsp
ffff800000805816:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff800000805816 <reg_driver+0x8>
ffff80000080581d:	49 bb 6a d2 01 00 00 	movabs r11,0x1d26a
ffff800000805824:	00 00 00 
ffff800000805827:	4c 01 d9             	add    rcx,r11
ffff80000080582a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254
    for(int i=0;i<MAX_DRIVERS;i++)
ffff80000080582e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000805835:	e9 43 01 00 00       	jmp    ffff80000080597d <reg_driver+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:256
    {
        if(drvs[i].flag==DRV_FLAG_EMPTY)
ffff80000080583a:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000805841:	ff ff ff 
ffff800000805844:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff800000805848:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080584b:	48 63 d0             	movsxd rdx,eax
ffff80000080584e:	48 89 d0             	mov    rax,rdx
ffff800000805851:	48 c1 e0 02          	shl    rax,0x2
ffff800000805855:	48 01 d0             	add    rax,rdx
ffff800000805858:	48 c1 e0 05          	shl    rax,0x5
ffff80000080585c:	48 01 f0             	add    rax,rsi
ffff80000080585f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805861:	85 c0                	test   eax,eax
ffff800000805863:	0f 85 10 01 00 00    	jne    ffff800000805979 <reg_driver+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:258
        {
            drvs[i]=*drv;
ffff800000805869:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000805870:	ff ff ff 
ffff800000805873:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff800000805877:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080587a:	48 63 d0             	movsxd rdx,eax
ffff80000080587d:	48 89 d0             	mov    rax,rdx
ffff800000805880:	48 c1 e0 02          	shl    rax,0x2
ffff800000805884:	48 01 d0             	add    rax,rdx
ffff800000805887:	48 c1 e0 05          	shl    rax,0x5
ffff80000080588b:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
ffff80000080588f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805893:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000805896:	48 8b 78 08          	mov    rdi,QWORD PTR [rax+0x8]
ffff80000080589a:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff80000080589d:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
ffff8000008058a1:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
ffff8000008058a5:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
ffff8000008058a9:	48 89 72 10          	mov    QWORD PTR [rdx+0x10],rsi
ffff8000008058ad:	48 89 7a 18          	mov    QWORD PTR [rdx+0x18],rdi
ffff8000008058b1:	48 8b 70 20          	mov    rsi,QWORD PTR [rax+0x20]
ffff8000008058b5:	48 8b 78 28          	mov    rdi,QWORD PTR [rax+0x28]
ffff8000008058b9:	48 89 72 20          	mov    QWORD PTR [rdx+0x20],rsi
ffff8000008058bd:	48 89 7a 28          	mov    QWORD PTR [rdx+0x28],rdi
ffff8000008058c1:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008058c5:	48 8b 78 38          	mov    rdi,QWORD PTR [rax+0x38]
ffff8000008058c9:	48 89 72 30          	mov    QWORD PTR [rdx+0x30],rsi
ffff8000008058cd:	48 89 7a 38          	mov    QWORD PTR [rdx+0x38],rdi
ffff8000008058d1:	48 8b 70 40          	mov    rsi,QWORD PTR [rax+0x40]
ffff8000008058d5:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
ffff8000008058d9:	48 89 72 40          	mov    QWORD PTR [rdx+0x40],rsi
ffff8000008058dd:	48 89 7a 48          	mov    QWORD PTR [rdx+0x48],rdi
ffff8000008058e1:	48 8b 70 50          	mov    rsi,QWORD PTR [rax+0x50]
ffff8000008058e5:	48 8b 78 58          	mov    rdi,QWORD PTR [rax+0x58]
ffff8000008058e9:	48 89 72 50          	mov    QWORD PTR [rdx+0x50],rsi
ffff8000008058ed:	48 89 7a 58          	mov    QWORD PTR [rdx+0x58],rdi
ffff8000008058f1:	48 8b 70 60          	mov    rsi,QWORD PTR [rax+0x60]
ffff8000008058f5:	48 8b 78 68          	mov    rdi,QWORD PTR [rax+0x68]
ffff8000008058f9:	48 89 72 60          	mov    QWORD PTR [rdx+0x60],rsi
ffff8000008058fd:	48 89 7a 68          	mov    QWORD PTR [rdx+0x68],rdi
ffff800000805901:	48 8b 70 70          	mov    rsi,QWORD PTR [rax+0x70]
ffff800000805905:	48 8b 78 78          	mov    rdi,QWORD PTR [rax+0x78]
ffff800000805909:	48 89 72 70          	mov    QWORD PTR [rdx+0x70],rsi
ffff80000080590d:	48 89 7a 78          	mov    QWORD PTR [rdx+0x78],rdi
ffff800000805911:	48 8b b0 80 00 00 00 	mov    rsi,QWORD PTR [rax+0x80]
ffff800000805918:	48 8b b8 88 00 00 00 	mov    rdi,QWORD PTR [rax+0x88]
ffff80000080591f:	48 89 b2 80 00 00 00 	mov    QWORD PTR [rdx+0x80],rsi
ffff800000805926:	48 89 ba 88 00 00 00 	mov    QWORD PTR [rdx+0x88],rdi
ffff80000080592d:	48 8b b0 90 00 00 00 	mov    rsi,QWORD PTR [rax+0x90]
ffff800000805934:	48 8b b8 98 00 00 00 	mov    rdi,QWORD PTR [rax+0x98]
ffff80000080593b:	48 89 b2 90 00 00 00 	mov    QWORD PTR [rdx+0x90],rsi
ffff800000805942:	48 89 ba 98 00 00 00 	mov    QWORD PTR [rdx+0x98],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:259
            drvs[i].flag=DRV_FLAG_USED;
ffff800000805949:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000805950:	ff ff ff 
ffff800000805953:	48 8b 0c 01          	mov    rcx,QWORD PTR [rcx+rax*1]
ffff800000805957:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080595a:	48 63 d0             	movsxd rdx,eax
ffff80000080595d:	48 89 d0             	mov    rax,rdx
ffff800000805960:	48 c1 e0 02          	shl    rax,0x2
ffff800000805964:	48 01 d0             	add    rax,rdx
ffff800000805967:	48 c1 e0 05          	shl    rax,0x5
ffff80000080596b:	48 01 c8             	add    rax,rcx
ffff80000080596e:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:260
            return i;
ffff800000805974:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805977:	eb 13                	jmp    ffff80000080598c <reg_driver+0x17e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254 (discriminator 2)
    for(int i=0;i<MAX_DRIVERS;i++)
ffff800000805979:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254 (discriminator 1)
ffff80000080597d:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000805981:	0f 8e b3 fe ff ff    	jle    ffff80000080583a <reg_driver+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:263
        }
    }
    return -1;
ffff800000805987:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:264
}
ffff80000080598c:	5d                   	pop    rbp
ffff80000080598d:	c3                   	ret    

ffff80000080598e <sys_find_dev>:
sys_find_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:267

int sys_find_dev(char *name)
{
ffff80000080598e:	f3 0f 1e fa          	endbr64 
ffff800000805992:	55                   	push   rbp
ffff800000805993:	48 89 e5             	mov    rbp,rsp
ffff800000805996:	41 57                	push   r15
ffff800000805998:	53                   	push   rbx
ffff800000805999:	48 83 ec 20          	sub    rsp,0x20
ffff80000080599d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080599d <sys_find_dev+0xf>
ffff8000008059a4:	49 bb e3 d0 01 00 00 	movabs r11,0x1d0e3
ffff8000008059ab:	00 00 00 
ffff8000008059ae:	4c 01 db             	add    rbx,r11
ffff8000008059b1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268
    for(int i=0;i<MAX_DEVICES;i++)
ffff8000008059b5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008059bc:	e9 93 00 00 00       	jmp    ffff800000805a54 <sys_find_dev+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:270
    {
        if(devs[i].flag!=DEV_FLAG_EMPTY&&strcmp(name,devs[i].name)==0)
ffff8000008059c1:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008059c8:	ff ff ff 
ffff8000008059cb:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008059cf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008059d2:	48 63 d0             	movsxd rdx,eax
ffff8000008059d5:	48 89 d0             	mov    rax,rdx
ffff8000008059d8:	48 c1 e0 02          	shl    rax,0x2
ffff8000008059dc:	48 01 d0             	add    rax,rdx
ffff8000008059df:	48 c1 e0 02          	shl    rax,0x2
ffff8000008059e3:	48 01 d0             	add    rax,rdx
ffff8000008059e6:	48 c1 e0 03          	shl    rax,0x3
ffff8000008059ea:	48 01 c8             	add    rax,rcx
ffff8000008059ed:	48 83 c0 10          	add    rax,0x10
ffff8000008059f1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008059f3:	85 c0                	test   eax,eax
ffff8000008059f5:	74 59                	je     ffff800000805a50 <sys_find_dev+0xc2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:270 (discriminator 1)
ffff8000008059f7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008059fa:	48 63 d0             	movsxd rdx,eax
ffff8000008059fd:	48 89 d0             	mov    rax,rdx
ffff800000805a00:	48 c1 e0 02          	shl    rax,0x2
ffff800000805a04:	48 01 d0             	add    rax,rdx
ffff800000805a07:	48 c1 e0 02          	shl    rax,0x2
ffff800000805a0b:	48 01 d0             	add    rax,rdx
ffff800000805a0e:	48 c1 e0 03          	shl    rax,0x3
ffff800000805a12:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000805a16:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805a1d:	ff ff ff 
ffff800000805a20:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805a24:	48 01 d0             	add    rax,rdx
ffff800000805a27:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffff800000805a2b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805a2f:	48 89 d6             	mov    rsi,rdx
ffff800000805a32:	48 89 c7             	mov    rdi,rax
ffff800000805a35:	49 89 df             	mov    r15,rbx
ffff800000805a38:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff800000805a3f:	ff ff ff 
ffff800000805a42:	48 01 d8             	add    rax,rbx
ffff800000805a45:	ff d0                	call   rax
ffff800000805a47:	85 c0                	test   eax,eax
ffff800000805a49:	75 05                	jne    ffff800000805a50 <sys_find_dev+0xc2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:271
            return i;
ffff800000805a4b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805a4e:	eb 13                	jmp    ffff800000805a63 <sys_find_dev+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268 (discriminator 2)
    for(int i=0;i<MAX_DEVICES;i++)
ffff800000805a50:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268 (discriminator 1)
ffff800000805a54:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff800000805a58:	0f 8e 63 ff ff ff    	jle    ffff8000008059c1 <sys_find_dev+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:273
    }
    return -1;
ffff800000805a5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:274
}
ffff800000805a63:	48 83 c4 20          	add    rsp,0x20
ffff800000805a67:	5b                   	pop    rbx
ffff800000805a68:	41 5f                	pop    r15
ffff800000805a6a:	5d                   	pop    rbp
ffff800000805a6b:	c3                   	ret    

ffff800000805a6c <sys_operate_dev>:
sys_operate_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:277

int sys_operate_dev(char *name,int func,driver_args* args)
{
ffff800000805a6c:	f3 0f 1e fa          	endbr64 
ffff800000805a70:	55                   	push   rbp
ffff800000805a71:	48 89 e5             	mov    rbp,rsp
ffff800000805a74:	41 57                	push   r15
ffff800000805a76:	53                   	push   rbx
ffff800000805a77:	48 83 ec 30          	sub    rsp,0x30
ffff800000805a7b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805a7b <sys_operate_dev+0xf>
ffff800000805a82:	49 bb 05 d0 01 00 00 	movabs r11,0x1d005
ffff800000805a89:	00 00 00 
ffff800000805a8c:	4c 01 db             	add    rbx,r11
ffff800000805a8f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000805a93:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
ffff800000805a96:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:278
    int i=0;
ffff800000805a9a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279
    for(;i<MAX_DEVICES;i++)
ffff800000805aa1:	e9 8e 00 00 00       	jmp    ffff800000805b34 <sys_operate_dev+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:281
    {
        if(devs[i].flag!=DEV_FLAG_EMPTY&&strcmp(name,devs[i].name)==0)
ffff800000805aa6:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805aad:	ff ff ff 
ffff800000805ab0:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805ab4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805ab7:	48 63 d0             	movsxd rdx,eax
ffff800000805aba:	48 89 d0             	mov    rax,rdx
ffff800000805abd:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ac1:	48 01 d0             	add    rax,rdx
ffff800000805ac4:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ac8:	48 01 d0             	add    rax,rdx
ffff800000805acb:	48 c1 e0 03          	shl    rax,0x3
ffff800000805acf:	48 01 c8             	add    rax,rcx
ffff800000805ad2:	48 83 c0 10          	add    rax,0x10
ffff800000805ad6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805ad8:	85 c0                	test   eax,eax
ffff800000805ada:	74 54                	je     ffff800000805b30 <sys_operate_dev+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:281 (discriminator 1)
ffff800000805adc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805adf:	48 63 d0             	movsxd rdx,eax
ffff800000805ae2:	48 89 d0             	mov    rax,rdx
ffff800000805ae5:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ae9:	48 01 d0             	add    rax,rdx
ffff800000805aec:	48 c1 e0 02          	shl    rax,0x2
ffff800000805af0:	48 01 d0             	add    rax,rdx
ffff800000805af3:	48 c1 e0 03          	shl    rax,0x3
ffff800000805af7:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000805afb:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805b02:	ff ff ff 
ffff800000805b05:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b09:	48 01 d0             	add    rax,rdx
ffff800000805b0c:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffff800000805b10:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805b14:	48 89 d6             	mov    rsi,rdx
ffff800000805b17:	48 89 c7             	mov    rdi,rax
ffff800000805b1a:	49 89 df             	mov    r15,rbx
ffff800000805b1d:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff800000805b24:	ff ff ff 
ffff800000805b27:	48 01 d8             	add    rax,rbx
ffff800000805b2a:	ff d0                	call   rax
ffff800000805b2c:	85 c0                	test   eax,eax
ffff800000805b2e:	74 10                	je     ffff800000805b40 <sys_operate_dev+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279
    for(;i<MAX_DEVICES;i++)
ffff800000805b30:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279 (discriminator 1)
ffff800000805b34:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff800000805b38:	0f 8e 68 ff ff ff    	jle    ffff800000805aa6 <sys_operate_dev+0x3a>
ffff800000805b3e:	eb 01                	jmp    ffff800000805b41 <sys_operate_dev+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:282
            break;
ffff800000805b40:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:284
    }
    if(i==MAX_DEVICES)return -1;
ffff800000805b41:	83 7d ec 40          	cmp    DWORD PTR [rbp-0x14],0x40
ffff800000805b45:	75 0a                	jne    ffff800000805b51 <sys_operate_dev+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:284 (discriminator 1)
ffff800000805b47:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805b4c:	e9 68 03 00 00       	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:285
    switch (func) {
ffff800000805b51:	83 7d d4 0b          	cmp    DWORD PTR [rbp-0x2c],0xb
ffff800000805b55:	0f 87 59 03 00 00    	ja     ffff800000805eb4 <sys_operate_dev+0x448>
ffff800000805b5b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000805b5e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805b65:	00 
ffff800000805b66:	48 8d 05 f3 a3 01 00 	lea    rax,[rip+0x1a3f3]        # ffff80000081ff60 <.LC4+0x4>
ffff800000805b6d:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000805b71:	48 8d 15 e8 a3 01 00 	lea    rdx,[rip+0x1a3e8]        # ffff80000081ff60 <.LC4+0x4>
ffff800000805b78:	48 01 d0             	add    rax,rdx
ffff800000805b7b:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:286
        case DRVF_OPEN :return devs[i].drv->open(args);
ffff800000805b7e:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805b85:	ff ff ff 
ffff800000805b88:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805b8c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805b8f:	48 63 d0             	movsxd rdx,eax
ffff800000805b92:	48 89 d0             	mov    rax,rdx
ffff800000805b95:	48 c1 e0 02          	shl    rax,0x2
ffff800000805b99:	48 01 d0             	add    rax,rdx
ffff800000805b9c:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ba0:	48 01 d0             	add    rax,rdx
ffff800000805ba3:	48 c1 e0 03          	shl    rax,0x3
ffff800000805ba7:	48 01 c8             	add    rax,rcx
ffff800000805baa:	48 83 c0 78          	add    rax,0x78
ffff800000805bae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805bb1:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000805bb5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805bb9:	48 89 c7             	mov    rdi,rax
ffff800000805bbc:	ff d2                	call   rdx
ffff800000805bbe:	e9 f6 02 00 00       	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:287
        case DRVF_CLOSE:return devs[i].drv->close(args);
ffff800000805bc3:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805bca:	ff ff ff 
ffff800000805bcd:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805bd1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805bd4:	48 63 d0             	movsxd rdx,eax
ffff800000805bd7:	48 89 d0             	mov    rax,rdx
ffff800000805bda:	48 c1 e0 02          	shl    rax,0x2
ffff800000805bde:	48 01 d0             	add    rax,rdx
ffff800000805be1:	48 c1 e0 02          	shl    rax,0x2
ffff800000805be5:	48 01 d0             	add    rax,rdx
ffff800000805be8:	48 c1 e0 03          	shl    rax,0x3
ffff800000805bec:	48 01 c8             	add    rax,rcx
ffff800000805bef:	48 83 c0 78          	add    rax,0x78
ffff800000805bf3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805bf6:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000805bfa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805bfe:	48 89 c7             	mov    rdi,rax
ffff800000805c01:	ff d2                	call   rdx
ffff800000805c03:	e9 b1 02 00 00       	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:288
        case DRVF_READ :return devs[i].drv->read(args);
ffff800000805c08:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805c0f:	ff ff ff 
ffff800000805c12:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805c16:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805c19:	48 63 d0             	movsxd rdx,eax
ffff800000805c1c:	48 89 d0             	mov    rax,rdx
ffff800000805c1f:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c23:	48 01 d0             	add    rax,rdx
ffff800000805c26:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c2a:	48 01 d0             	add    rax,rdx
ffff800000805c2d:	48 c1 e0 03          	shl    rax,0x3
ffff800000805c31:	48 01 c8             	add    rax,rcx
ffff800000805c34:	48 83 c0 78          	add    rax,0x78
ffff800000805c38:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805c3b:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff800000805c3f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805c43:	48 89 c7             	mov    rdi,rax
ffff800000805c46:	ff d2                	call   rdx
ffff800000805c48:	e9 6c 02 00 00       	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:289
        case DRVF_WRITE:return devs[i].drv->write(args);
ffff800000805c4d:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805c54:	ff ff ff 
ffff800000805c57:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805c5b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805c5e:	48 63 d0             	movsxd rdx,eax
ffff800000805c61:	48 89 d0             	mov    rax,rdx
ffff800000805c64:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c68:	48 01 d0             	add    rax,rdx
ffff800000805c6b:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c6f:	48 01 d0             	add    rax,rdx
ffff800000805c72:	48 c1 e0 03          	shl    rax,0x3
ffff800000805c76:	48 01 c8             	add    rax,rcx
ffff800000805c79:	48 83 c0 78          	add    rax,0x78
ffff800000805c7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805c80:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff800000805c84:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805c88:	48 89 c7             	mov    rdi,rax
ffff800000805c8b:	ff d2                	call   rdx
ffff800000805c8d:	e9 27 02 00 00       	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:290
        case DRVF_CHK  :return devs[i].drv->check(args);
ffff800000805c92:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805c99:	ff ff ff 
ffff800000805c9c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805ca0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805ca3:	48 63 d0             	movsxd rdx,eax
ffff800000805ca6:	48 89 d0             	mov    rax,rdx
ffff800000805ca9:	48 c1 e0 02          	shl    rax,0x2
ffff800000805cad:	48 01 d0             	add    rax,rdx
ffff800000805cb0:	48 c1 e0 02          	shl    rax,0x2
ffff800000805cb4:	48 01 d0             	add    rax,rdx
ffff800000805cb7:	48 c1 e0 03          	shl    rax,0x3
ffff800000805cbb:	48 01 c8             	add    rax,rcx
ffff800000805cbe:	48 83 c0 78          	add    rax,0x78
ffff800000805cc2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805cc5:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000805cc9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805ccd:	48 89 c7             	mov    rdi,rax
ffff800000805cd0:	ff d2                	call   rdx
ffff800000805cd2:	e9 e2 01 00 00       	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:291
        case DRVF_RSVD :return devs[i].drv->reserved(args);
ffff800000805cd7:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805cde:	ff ff ff 
ffff800000805ce1:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805ce5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805ce8:	48 63 d0             	movsxd rdx,eax
ffff800000805ceb:	48 89 d0             	mov    rax,rdx
ffff800000805cee:	48 c1 e0 02          	shl    rax,0x2
ffff800000805cf2:	48 01 d0             	add    rax,rdx
ffff800000805cf5:	48 c1 e0 02          	shl    rax,0x2
ffff800000805cf9:	48 01 d0             	add    rax,rdx
ffff800000805cfc:	48 c1 e0 03          	shl    rax,0x3
ffff800000805d00:	48 01 c8             	add    rax,rcx
ffff800000805d03:	48 83 c0 78          	add    rax,0x78
ffff800000805d07:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805d0a:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffff800000805d0e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805d12:	48 89 c7             	mov    rdi,rax
ffff800000805d15:	ff d2                	call   rdx
ffff800000805d17:	e9 9d 01 00 00       	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:292
        case DRVF_INT  :return devs[i].drv->inthandler(args);
ffff800000805d1c:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805d23:	ff ff ff 
ffff800000805d26:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805d2a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805d2d:	48 63 d0             	movsxd rdx,eax
ffff800000805d30:	48 89 d0             	mov    rax,rdx
ffff800000805d33:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d37:	48 01 d0             	add    rax,rdx
ffff800000805d3a:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d3e:	48 01 d0             	add    rax,rdx
ffff800000805d41:	48 c1 e0 03          	shl    rax,0x3
ffff800000805d45:	48 01 c8             	add    rax,rcx
ffff800000805d48:	48 83 c0 78          	add    rax,0x78
ffff800000805d4c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805d4f:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
ffff800000805d53:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805d57:	48 89 c7             	mov    rdi,rax
ffff800000805d5a:	ff d2                	call   rdx
ffff800000805d5c:	e9 58 01 00 00       	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:293
        case DRVF_FIND :return devs[i].drv->find(args);
ffff800000805d61:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805d68:	ff ff ff 
ffff800000805d6b:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805d6f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805d72:	48 63 d0             	movsxd rdx,eax
ffff800000805d75:	48 89 d0             	mov    rax,rdx
ffff800000805d78:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d7c:	48 01 d0             	add    rax,rdx
ffff800000805d7f:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d83:	48 01 d0             	add    rax,rdx
ffff800000805d86:	48 c1 e0 03          	shl    rax,0x3
ffff800000805d8a:	48 01 c8             	add    rax,rcx
ffff800000805d8d:	48 83 c0 78          	add    rax,0x78
ffff800000805d91:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805d94:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff800000805d98:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805d9c:	48 89 c7             	mov    rdi,rax
ffff800000805d9f:	ff d2                	call   rdx
ffff800000805da1:	e9 13 01 00 00       	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:294
        case DRVF_RM   :return devs[i].drv->rm(args);
ffff800000805da6:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805dad:	ff ff ff 
ffff800000805db0:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805db4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805db7:	48 63 d0             	movsxd rdx,eax
ffff800000805dba:	48 89 d0             	mov    rax,rdx
ffff800000805dbd:	48 c1 e0 02          	shl    rax,0x2
ffff800000805dc1:	48 01 d0             	add    rax,rdx
ffff800000805dc4:	48 c1 e0 02          	shl    rax,0x2
ffff800000805dc8:	48 01 d0             	add    rax,rdx
ffff800000805dcb:	48 c1 e0 03          	shl    rax,0x3
ffff800000805dcf:	48 01 c8             	add    rax,rcx
ffff800000805dd2:	48 83 c0 78          	add    rax,0x78
ffff800000805dd6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805dd9:	48 8b 50 48          	mov    rdx,QWORD PTR [rax+0x48]
ffff800000805ddd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805de1:	48 89 c7             	mov    rdi,rax
ffff800000805de4:	ff d2                	call   rdx
ffff800000805de6:	e9 ce 00 00 00       	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:295
        case DRVF_TOUCH:return devs[i].drv->touch(args);
ffff800000805deb:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805df2:	ff ff ff 
ffff800000805df5:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805df9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805dfc:	48 63 d0             	movsxd rdx,eax
ffff800000805dff:	48 89 d0             	mov    rax,rdx
ffff800000805e02:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e06:	48 01 d0             	add    rax,rdx
ffff800000805e09:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e0d:	48 01 d0             	add    rax,rdx
ffff800000805e10:	48 c1 e0 03          	shl    rax,0x3
ffff800000805e14:	48 01 c8             	add    rax,rcx
ffff800000805e17:	48 83 c0 78          	add    rax,0x78
ffff800000805e1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805e1e:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
ffff800000805e22:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805e26:	48 89 c7             	mov    rdi,rax
ffff800000805e29:	ff d2                	call   rdx
ffff800000805e2b:	e9 89 00 00 00       	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:296
        case DRVF_MKDIR:return devs[i].drv->mkdir(args);
ffff800000805e30:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805e37:	ff ff ff 
ffff800000805e3a:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805e3e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805e41:	48 63 d0             	movsxd rdx,eax
ffff800000805e44:	48 89 d0             	mov    rax,rdx
ffff800000805e47:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e4b:	48 01 d0             	add    rax,rdx
ffff800000805e4e:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e52:	48 01 d0             	add    rax,rdx
ffff800000805e55:	48 c1 e0 03          	shl    rax,0x3
ffff800000805e59:	48 01 c8             	add    rax,rcx
ffff800000805e5c:	48 83 c0 78          	add    rax,0x78
ffff800000805e60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805e63:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff800000805e67:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805e6b:	48 89 c7             	mov    rdi,rax
ffff800000805e6e:	ff d2                	call   rdx
ffff800000805e70:	eb 47                	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:297
        case DRVF_LS:return    devs[i].drv->ls(args);
ffff800000805e72:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805e79:	ff ff ff 
ffff800000805e7c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805e80:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805e83:	48 63 d0             	movsxd rdx,eax
ffff800000805e86:	48 89 d0             	mov    rax,rdx
ffff800000805e89:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e8d:	48 01 d0             	add    rax,rdx
ffff800000805e90:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e94:	48 01 d0             	add    rax,rdx
ffff800000805e97:	48 c1 e0 03          	shl    rax,0x3
ffff800000805e9b:	48 01 c8             	add    rax,rcx
ffff800000805e9e:	48 83 c0 78          	add    rax,0x78
ffff800000805ea2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805ea5:	48 8b 50 60          	mov    rdx,QWORD PTR [rax+0x60]
ffff800000805ea9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805ead:	48 89 c7             	mov    rdi,rax
ffff800000805eb0:	ff d2                	call   rdx
ffff800000805eb2:	eb 05                	jmp    ffff800000805eb9 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:299
    }
    return -1;
ffff800000805eb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:300
}
ffff800000805eb9:	48 83 c4 30          	add    rsp,0x30
ffff800000805ebd:	5b                   	pop    rbx
ffff800000805ebe:	41 5f                	pop    r15
ffff800000805ec0:	5d                   	pop    rbp
ffff800000805ec1:	c3                   	ret    

ffff800000805ec2 <call_drv_func>:
call_drv_func():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:302
int call_drv_func(int drv_n,int func_n,driver_args *args)
{
ffff800000805ec2:	f3 0f 1e fa          	endbr64 
ffff800000805ec6:	55                   	push   rbp
ffff800000805ec7:	48 89 e5             	mov    rbp,rsp
ffff800000805eca:	48 83 ec 10          	sub    rsp,0x10
ffff800000805ece:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805ece <call_drv_func+0xc>
ffff800000805ed5:	49 bb b2 cb 01 00 00 	movabs r11,0x1cbb2
ffff800000805edc:	00 00 00 
ffff800000805edf:	4c 01 d8             	add    rax,r11
ffff800000805ee2:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000805ee5:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000805ee8:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:303
    if(drvs[drv_n].flag==DRV_FLAG_EMPTY)return -1;
ffff800000805eec:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000805ef3:	ff ff ff 
ffff800000805ef6:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000805efa:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805efd:	48 63 ca             	movsxd rcx,edx
ffff800000805f00:	48 89 ca             	mov    rdx,rcx
ffff800000805f03:	48 c1 e2 02          	shl    rdx,0x2
ffff800000805f07:	48 01 ca             	add    rdx,rcx
ffff800000805f0a:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805f0e:	48 01 f2             	add    rdx,rsi
ffff800000805f11:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805f13:	85 d2                	test   edx,edx
ffff800000805f15:	75 0a                	jne    ffff800000805f21 <call_drv_func+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:303 (discriminator 1)
ffff800000805f17:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805f1c:	e9 e1 02 00 00       	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:306
    /*driverfunc f=drvs[drv_n].func_thunk[func_n];
    return f(args);*/
    switch (func_n) {
ffff800000805f21:	83 7d f8 0b          	cmp    DWORD PTR [rbp-0x8],0xb
ffff800000805f25:	0f 87 d2 02 00 00    	ja     ffff8000008061fd <call_drv_func+0x33b>
ffff800000805f2b:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000805f2e:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805f35:	00 
ffff800000805f36:	48 8d 15 83 a0 01 00 	lea    rdx,[rip+0x1a083]        # ffff80000081ffc0 <.LC4+0x64>
ffff800000805f3d:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff800000805f41:	48 8d 0d 78 a0 01 00 	lea    rcx,[rip+0x1a078]        # ffff80000081ffc0 <.LC4+0x64>
ffff800000805f48:	48 01 ca             	add    rdx,rcx
ffff800000805f4b:	3e ff e2             	notrack jmp rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:307
        case DRVF_OPEN :return drvs[drv_n].open(args);
ffff800000805f4e:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000805f55:	ff ff ff 
ffff800000805f58:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805f5c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805f5f:	48 63 d0             	movsxd rdx,eax
ffff800000805f62:	48 89 d0             	mov    rax,rdx
ffff800000805f65:	48 c1 e0 02          	shl    rax,0x2
ffff800000805f69:	48 01 d0             	add    rax,rdx
ffff800000805f6c:	48 c1 e0 05          	shl    rax,0x5
ffff800000805f70:	48 01 c8             	add    rax,rcx
ffff800000805f73:	48 83 c0 08          	add    rax,0x8
ffff800000805f77:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805f7a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805f7e:	48 89 c7             	mov    rdi,rax
ffff800000805f81:	ff d2                	call   rdx
ffff800000805f83:	e9 7a 02 00 00       	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:308
        case DRVF_CLOSE:return drvs[drv_n].close(args);
ffff800000805f88:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000805f8f:	ff ff ff 
ffff800000805f92:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805f96:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805f99:	48 63 d0             	movsxd rdx,eax
ffff800000805f9c:	48 89 d0             	mov    rax,rdx
ffff800000805f9f:	48 c1 e0 02          	shl    rax,0x2
ffff800000805fa3:	48 01 d0             	add    rax,rdx
ffff800000805fa6:	48 c1 e0 05          	shl    rax,0x5
ffff800000805faa:	48 01 c8             	add    rax,rcx
ffff800000805fad:	48 83 c0 10          	add    rax,0x10
ffff800000805fb1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805fb4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805fb8:	48 89 c7             	mov    rdi,rax
ffff800000805fbb:	ff d2                	call   rdx
ffff800000805fbd:	e9 40 02 00 00       	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:309
        case DRVF_READ :return drvs[drv_n].read(args);
ffff800000805fc2:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000805fc9:	ff ff ff 
ffff800000805fcc:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805fd0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805fd3:	48 63 d0             	movsxd rdx,eax
ffff800000805fd6:	48 89 d0             	mov    rax,rdx
ffff800000805fd9:	48 c1 e0 02          	shl    rax,0x2
ffff800000805fdd:	48 01 d0             	add    rax,rdx
ffff800000805fe0:	48 c1 e0 05          	shl    rax,0x5
ffff800000805fe4:	48 01 c8             	add    rax,rcx
ffff800000805fe7:	48 83 c0 18          	add    rax,0x18
ffff800000805feb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805fee:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805ff2:	48 89 c7             	mov    rdi,rax
ffff800000805ff5:	ff d2                	call   rdx
ffff800000805ff7:	e9 06 02 00 00       	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:310
        case DRVF_WRITE:return drvs[drv_n].write(args);
ffff800000805ffc:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000806003:	ff ff ff 
ffff800000806006:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080600a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080600d:	48 63 d0             	movsxd rdx,eax
ffff800000806010:	48 89 d0             	mov    rax,rdx
ffff800000806013:	48 c1 e0 02          	shl    rax,0x2
ffff800000806017:	48 01 d0             	add    rax,rdx
ffff80000080601a:	48 c1 e0 05          	shl    rax,0x5
ffff80000080601e:	48 01 c8             	add    rax,rcx
ffff800000806021:	48 83 c0 20          	add    rax,0x20
ffff800000806025:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806028:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080602c:	48 89 c7             	mov    rdi,rax
ffff80000080602f:	ff d2                	call   rdx
ffff800000806031:	e9 cc 01 00 00       	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:311
        case DRVF_CHK  :return drvs[drv_n].check(args);
ffff800000806036:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080603d:	ff ff ff 
ffff800000806040:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000806044:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806047:	48 63 d0             	movsxd rdx,eax
ffff80000080604a:	48 89 d0             	mov    rax,rdx
ffff80000080604d:	48 c1 e0 02          	shl    rax,0x2
ffff800000806051:	48 01 d0             	add    rax,rdx
ffff800000806054:	48 c1 e0 05          	shl    rax,0x5
ffff800000806058:	48 01 c8             	add    rax,rcx
ffff80000080605b:	48 83 c0 28          	add    rax,0x28
ffff80000080605f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806062:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806066:	48 89 c7             	mov    rdi,rax
ffff800000806069:	ff d2                	call   rdx
ffff80000080606b:	e9 92 01 00 00       	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:312
        case DRVF_RSVD :return drvs[drv_n].reserved(args);
ffff800000806070:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000806077:	ff ff ff 
ffff80000080607a:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080607e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806081:	48 63 d0             	movsxd rdx,eax
ffff800000806084:	48 89 d0             	mov    rax,rdx
ffff800000806087:	48 c1 e0 02          	shl    rax,0x2
ffff80000080608b:	48 01 d0             	add    rax,rdx
ffff80000080608e:	48 c1 e0 05          	shl    rax,0x5
ffff800000806092:	48 01 c8             	add    rax,rcx
ffff800000806095:	48 83 c0 30          	add    rax,0x30
ffff800000806099:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080609c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008060a0:	48 89 c7             	mov    rdi,rax
ffff8000008060a3:	ff d2                	call   rdx
ffff8000008060a5:	e9 58 01 00 00       	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:313
        case DRVF_INT  :return drvs[drv_n].inthandler(args);
ffff8000008060aa:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008060b1:	ff ff ff 
ffff8000008060b4:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff8000008060b8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008060bb:	48 63 d0             	movsxd rdx,eax
ffff8000008060be:	48 89 d0             	mov    rax,rdx
ffff8000008060c1:	48 c1 e0 02          	shl    rax,0x2
ffff8000008060c5:	48 01 d0             	add    rax,rdx
ffff8000008060c8:	48 c1 e0 05          	shl    rax,0x5
ffff8000008060cc:	48 01 c8             	add    rax,rcx
ffff8000008060cf:	48 83 c0 38          	add    rax,0x38
ffff8000008060d3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008060d6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008060da:	48 89 c7             	mov    rdi,rax
ffff8000008060dd:	ff d2                	call   rdx
ffff8000008060df:	e9 1e 01 00 00       	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:314
        case DRVF_FIND :return drvs[drv_n].find(args);
ffff8000008060e4:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008060eb:	ff ff ff 
ffff8000008060ee:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff8000008060f2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008060f5:	48 63 d0             	movsxd rdx,eax
ffff8000008060f8:	48 89 d0             	mov    rax,rdx
ffff8000008060fb:	48 c1 e0 02          	shl    rax,0x2
ffff8000008060ff:	48 01 d0             	add    rax,rdx
ffff800000806102:	48 c1 e0 05          	shl    rax,0x5
ffff800000806106:	48 01 c8             	add    rax,rcx
ffff800000806109:	48 83 c0 40          	add    rax,0x40
ffff80000080610d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806110:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806114:	48 89 c7             	mov    rdi,rax
ffff800000806117:	ff d2                	call   rdx
ffff800000806119:	e9 e4 00 00 00       	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:315
        case DRVF_RM   :return drvs[drv_n].rm(args);
ffff80000080611e:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000806125:	ff ff ff 
ffff800000806128:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080612c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080612f:	48 63 d0             	movsxd rdx,eax
ffff800000806132:	48 89 d0             	mov    rax,rdx
ffff800000806135:	48 c1 e0 02          	shl    rax,0x2
ffff800000806139:	48 01 d0             	add    rax,rdx
ffff80000080613c:	48 c1 e0 05          	shl    rax,0x5
ffff800000806140:	48 01 c8             	add    rax,rcx
ffff800000806143:	48 83 c0 48          	add    rax,0x48
ffff800000806147:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080614a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080614e:	48 89 c7             	mov    rdi,rax
ffff800000806151:	ff d2                	call   rdx
ffff800000806153:	e9 aa 00 00 00       	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:316
        case DRVF_TOUCH:return drvs[drv_n].touch(args);
ffff800000806158:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080615f:	ff ff ff 
ffff800000806162:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000806166:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806169:	48 63 d0             	movsxd rdx,eax
ffff80000080616c:	48 89 d0             	mov    rax,rdx
ffff80000080616f:	48 c1 e0 02          	shl    rax,0x2
ffff800000806173:	48 01 d0             	add    rax,rdx
ffff800000806176:	48 c1 e0 05          	shl    rax,0x5
ffff80000080617a:	48 01 c8             	add    rax,rcx
ffff80000080617d:	48 83 c0 50          	add    rax,0x50
ffff800000806181:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806184:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806188:	48 89 c7             	mov    rdi,rax
ffff80000080618b:	ff d2                	call   rdx
ffff80000080618d:	eb 73                	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:317
        case DRVF_MKDIR:return drvs[drv_n].mkdir(args);
ffff80000080618f:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000806196:	ff ff ff 
ffff800000806199:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080619d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008061a0:	48 63 d0             	movsxd rdx,eax
ffff8000008061a3:	48 89 d0             	mov    rax,rdx
ffff8000008061a6:	48 c1 e0 02          	shl    rax,0x2
ffff8000008061aa:	48 01 d0             	add    rax,rdx
ffff8000008061ad:	48 c1 e0 05          	shl    rax,0x5
ffff8000008061b1:	48 01 c8             	add    rax,rcx
ffff8000008061b4:	48 83 c0 58          	add    rax,0x58
ffff8000008061b8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008061bb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008061bf:	48 89 c7             	mov    rdi,rax
ffff8000008061c2:	ff d2                	call   rdx
ffff8000008061c4:	eb 3c                	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:318
        case DRVF_LS:return drvs[drv_n].ls(args);
ffff8000008061c6:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008061cd:	ff ff ff 
ffff8000008061d0:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff8000008061d4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008061d7:	48 63 d0             	movsxd rdx,eax
ffff8000008061da:	48 89 d0             	mov    rax,rdx
ffff8000008061dd:	48 c1 e0 02          	shl    rax,0x2
ffff8000008061e1:	48 01 d0             	add    rax,rdx
ffff8000008061e4:	48 c1 e0 05          	shl    rax,0x5
ffff8000008061e8:	48 01 c8             	add    rax,rcx
ffff8000008061eb:	48 83 c0 60          	add    rax,0x60
ffff8000008061ef:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008061f2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008061f6:	48 89 c7             	mov    rdi,rax
ffff8000008061f9:	ff d2                	call   rdx
ffff8000008061fb:	eb 05                	jmp    ffff800000806202 <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:320
    }
    return -1;
ffff8000008061fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:321
}
ffff800000806202:	c9                   	leave  
ffff800000806203:	c3                   	ret    

ffff800000806204 <dispose_device>:
dispose_device():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:322
int dispose_device(int dev){
ffff800000806204:	f3 0f 1e fa          	endbr64 
ffff800000806208:	55                   	push   rbp
ffff800000806209:	48 89 e5             	mov    rbp,rsp
ffff80000080620c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080620c <dispose_device+0x8>
ffff800000806213:	49 bb 74 c8 01 00 00 	movabs r11,0x1c874
ffff80000080621a:	00 00 00 
ffff80000080621d:	4c 01 da             	add    rdx,r11
ffff800000806220:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:323
    if(devs[dev].flag!=DEV_FLAG_USED)return -1;
ffff800000806223:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080622a:	ff ff ff 
ffff80000080622d:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff800000806231:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806234:	48 63 c8             	movsxd rcx,eax
ffff800000806237:	48 89 c8             	mov    rax,rcx
ffff80000080623a:	48 c1 e0 02          	shl    rax,0x2
ffff80000080623e:	48 01 c8             	add    rax,rcx
ffff800000806241:	48 c1 e0 02          	shl    rax,0x2
ffff800000806245:	48 01 c8             	add    rax,rcx
ffff800000806248:	48 c1 e0 03          	shl    rax,0x3
ffff80000080624c:	48 01 f0             	add    rax,rsi
ffff80000080624f:	48 83 c0 10          	add    rax,0x10
ffff800000806253:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806255:	83 f8 01             	cmp    eax,0x1
ffff800000806258:	74 07                	je     ffff800000806261 <dispose_device+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:323 (discriminator 1)
ffff80000080625a:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080625f:	eb 6d                	jmp    ffff8000008062ce <dispose_device+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:324
    device* p=&devs[dev];
ffff800000806261:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806264:	48 63 c8             	movsxd rcx,eax
ffff800000806267:	48 89 c8             	mov    rax,rcx
ffff80000080626a:	48 c1 e0 02          	shl    rax,0x2
ffff80000080626e:	48 01 c8             	add    rax,rcx
ffff800000806271:	48 c1 e0 02          	shl    rax,0x2
ffff800000806275:	48 01 c8             	add    rax,rcx
ffff800000806278:	48 c1 e0 03          	shl    rax,0x3
ffff80000080627c:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff800000806283:	ff ff ff 
ffff800000806286:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff80000080628a:	48 01 d0             	add    rax,rdx
ffff80000080628d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:326
    //从链表删除
    if(p->prev)p->prev->next=p->next;
ffff800000806291:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806295:	48 8b 80 98 00 00 00 	mov    rax,QWORD PTR [rax+0x98]
ffff80000080629c:	48 85 c0             	test   rax,rax
ffff80000080629f:	74 1d                	je     ffff8000008062be <dispose_device+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:326 (discriminator 1)
ffff8000008062a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008062a5:	48 8b 80 98 00 00 00 	mov    rax,QWORD PTR [rax+0x98]
ffff8000008062ac:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008062b0:	48 8b 92 90 00 00 00 	mov    rdx,QWORD PTR [rdx+0x90]
ffff8000008062b7:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:327
    p->flag=DEV_FLAG_EMPTY;
ffff8000008062be:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008062c2:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:328
    return 0;
ffff8000008062c9:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:329
}
ffff8000008062ce:	5d                   	pop    rbp
ffff8000008062cf:	c3                   	ret    

ffff8000008062d0 <dispose_driver>:
dispose_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:330
int dispose_driver(driver *drv){
ffff8000008062d0:	f3 0f 1e fa          	endbr64 
ffff8000008062d4:	55                   	push   rbp
ffff8000008062d5:	48 89 e5             	mov    rbp,rsp
ffff8000008062d8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008062d8 <dispose_driver+0x8>
ffff8000008062df:	49 bb a8 c7 01 00 00 	movabs r11,0x1c7a8
ffff8000008062e6:	00 00 00 
ffff8000008062e9:	4c 01 d8             	add    rax,r11
ffff8000008062ec:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:332

}
ffff8000008062f0:	90                   	nop
ffff8000008062f1:	5d                   	pop    rbp
ffff8000008062f2:	c3                   	ret    

ffff8000008062f3 <get_dev>:
get_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:335

device *get_dev(int devi)
{
ffff8000008062f3:	f3 0f 1e fa          	endbr64 
ffff8000008062f7:	55                   	push   rbp
ffff8000008062f8:	48 89 e5             	mov    rbp,rsp
ffff8000008062fb:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008062fb <get_dev+0x8>
ffff800000806302:	49 bb 85 c7 01 00 00 	movabs r11,0x1c785
ffff800000806309:	00 00 00 
ffff80000080630c:	4c 01 da             	add    rdx,r11
ffff80000080630f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:336
    return &devs[devi];
ffff800000806312:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806315:	48 63 c8             	movsxd rcx,eax
ffff800000806318:	48 89 c8             	mov    rax,rcx
ffff80000080631b:	48 c1 e0 02          	shl    rax,0x2
ffff80000080631f:	48 01 c8             	add    rax,rcx
ffff800000806322:	48 c1 e0 02          	shl    rax,0x2
ffff800000806326:	48 01 c8             	add    rax,rcx
ffff800000806329:	48 c1 e0 03          	shl    rax,0x3
ffff80000080632d:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff800000806334:	ff ff ff 
ffff800000806337:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff80000080633b:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:337
}
ffff80000080633e:	5d                   	pop    rbp
ffff80000080633f:	c3                   	ret    

ffff800000806340 <get_drv>:
get_drv():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:339
driver *get_drv(int drvi)
{
ffff800000806340:	f3 0f 1e fa          	endbr64 
ffff800000806344:	55                   	push   rbp
ffff800000806345:	48 89 e5             	mov    rbp,rsp
ffff800000806348:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000806348 <get_drv+0x8>
ffff80000080634f:	49 bb 38 c7 01 00 00 	movabs r11,0x1c738
ffff800000806356:	00 00 00 
ffff800000806359:	4c 01 da             	add    rdx,r11
ffff80000080635c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:340
    return &drvs[drvi];
ffff80000080635f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806362:	48 63 c8             	movsxd rcx,eax
ffff800000806365:	48 89 c8             	mov    rax,rcx
ffff800000806368:	48 c1 e0 02          	shl    rax,0x2
ffff80000080636c:	48 01 c8             	add    rax,rcx
ffff80000080636f:	48 c1 e0 05          	shl    rax,0x5
ffff800000806373:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff80000080637a:	ff ff ff 
ffff80000080637d:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff800000806381:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:341
}
ffff800000806384:	5d                   	pop    rbp
ffff800000806385:	c3                   	ret    

ffff800000806386 <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:345

//发送一个操作设备的申请
int make_request(driver_args* args)
{
ffff800000806386:	f3 0f 1e fa          	endbr64 
ffff80000080638a:	55                   	push   rbp
ffff80000080638b:	48 89 e5             	mov    rbp,rsp
ffff80000080638e:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080638e <make_request+0x8>
ffff800000806395:	49 bb f2 c6 01 00 00 	movabs r11,0x1c6f2
ffff80000080639c:	00 00 00 
ffff80000080639f:	4c 01 d9             	add    rcx,r11
ffff8000008063a2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:347
    //在数组中寻找空项
    int i=0;
ffff8000008063a6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348
    for(;i<NR_REQS;i++)
ffff8000008063ad:	eb 34                	jmp    ffff8000008063e3 <make_request+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:350
    {
        if(reqs[i].stat==REQ_STAT_EMPTY)break;
ffff8000008063af:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff8000008063b6:	ff ff ff 
ffff8000008063b9:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff8000008063bd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008063c0:	48 63 d0             	movsxd rdx,eax
ffff8000008063c3:	48 89 d0             	mov    rax,rdx
ffff8000008063c6:	48 01 c0             	add    rax,rax
ffff8000008063c9:	48 01 d0             	add    rax,rdx
ffff8000008063cc:	48 c1 e0 06          	shl    rax,0x6
ffff8000008063d0:	48 01 f0             	add    rax,rsi
ffff8000008063d3:	48 05 ac 00 00 00    	add    rax,0xac
ffff8000008063d9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008063db:	85 c0                	test   eax,eax
ffff8000008063dd:	74 0c                	je     ffff8000008063eb <make_request+0x65>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348
    for(;i<NR_REQS;i++)
ffff8000008063df:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348 (discriminator 1)
ffff8000008063e3:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff8000008063e7:	7e c6                	jle    ffff8000008063af <make_request+0x29>
ffff8000008063e9:	eb 01                	jmp    ffff8000008063ec <make_request+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:350
        if(reqs[i].stat==REQ_STAT_EMPTY)break;
ffff8000008063eb:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:352
    }
    if(i==NR_REQS)return -1;//满了
ffff8000008063ec:	83 7d fc 20          	cmp    DWORD PTR [rbp-0x4],0x20
ffff8000008063f0:	75 0a                	jne    ffff8000008063fc <make_request+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:352 (discriminator 1)
ffff8000008063f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008063f7:	e9 25 02 00 00       	jmp    ffff800000806621 <make_request+0x29b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:353
    reqs[i]=*args;//放入数组
ffff8000008063fc:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff800000806403:	ff ff ff 
ffff800000806406:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff80000080640a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080640d:	48 63 d0             	movsxd rdx,eax
ffff800000806410:	48 89 d0             	mov    rax,rdx
ffff800000806413:	48 01 c0             	add    rax,rax
ffff800000806416:	48 01 d0             	add    rax,rdx
ffff800000806419:	48 c1 e0 06          	shl    rax,0x6
ffff80000080641d:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
ffff800000806421:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000806425:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000806428:	48 8b 78 08          	mov    rdi,QWORD PTR [rax+0x8]
ffff80000080642c:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff80000080642f:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
ffff800000806433:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
ffff800000806437:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
ffff80000080643b:	48 89 72 10          	mov    QWORD PTR [rdx+0x10],rsi
ffff80000080643f:	48 89 7a 18          	mov    QWORD PTR [rdx+0x18],rdi
ffff800000806443:	48 8b 70 20          	mov    rsi,QWORD PTR [rax+0x20]
ffff800000806447:	48 8b 78 28          	mov    rdi,QWORD PTR [rax+0x28]
ffff80000080644b:	48 89 72 20          	mov    QWORD PTR [rdx+0x20],rsi
ffff80000080644f:	48 89 7a 28          	mov    QWORD PTR [rdx+0x28],rdi
ffff800000806453:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff800000806457:	48 8b 78 38          	mov    rdi,QWORD PTR [rax+0x38]
ffff80000080645b:	48 89 72 30          	mov    QWORD PTR [rdx+0x30],rsi
ffff80000080645f:	48 89 7a 38          	mov    QWORD PTR [rdx+0x38],rdi
ffff800000806463:	48 8b 70 40          	mov    rsi,QWORD PTR [rax+0x40]
ffff800000806467:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
ffff80000080646b:	48 89 72 40          	mov    QWORD PTR [rdx+0x40],rsi
ffff80000080646f:	48 89 7a 48          	mov    QWORD PTR [rdx+0x48],rdi
ffff800000806473:	48 8b 70 50          	mov    rsi,QWORD PTR [rax+0x50]
ffff800000806477:	48 8b 78 58          	mov    rdi,QWORD PTR [rax+0x58]
ffff80000080647b:	48 89 72 50          	mov    QWORD PTR [rdx+0x50],rsi
ffff80000080647f:	48 89 7a 58          	mov    QWORD PTR [rdx+0x58],rdi
ffff800000806483:	48 8b 70 60          	mov    rsi,QWORD PTR [rax+0x60]
ffff800000806487:	48 8b 78 68          	mov    rdi,QWORD PTR [rax+0x68]
ffff80000080648b:	48 89 72 60          	mov    QWORD PTR [rdx+0x60],rsi
ffff80000080648f:	48 89 7a 68          	mov    QWORD PTR [rdx+0x68],rdi
ffff800000806493:	48 8b 70 70          	mov    rsi,QWORD PTR [rax+0x70]
ffff800000806497:	48 8b 78 78          	mov    rdi,QWORD PTR [rax+0x78]
ffff80000080649b:	48 89 72 70          	mov    QWORD PTR [rdx+0x70],rsi
ffff80000080649f:	48 89 7a 78          	mov    QWORD PTR [rdx+0x78],rdi
ffff8000008064a3:	48 8b b0 80 00 00 00 	mov    rsi,QWORD PTR [rax+0x80]
ffff8000008064aa:	48 8b b8 88 00 00 00 	mov    rdi,QWORD PTR [rax+0x88]
ffff8000008064b1:	48 89 b2 80 00 00 00 	mov    QWORD PTR [rdx+0x80],rsi
ffff8000008064b8:	48 89 ba 88 00 00 00 	mov    QWORD PTR [rdx+0x88],rdi
ffff8000008064bf:	48 8b b0 90 00 00 00 	mov    rsi,QWORD PTR [rax+0x90]
ffff8000008064c6:	48 8b b8 98 00 00 00 	mov    rdi,QWORD PTR [rax+0x98]
ffff8000008064cd:	48 89 b2 90 00 00 00 	mov    QWORD PTR [rdx+0x90],rsi
ffff8000008064d4:	48 89 ba 98 00 00 00 	mov    QWORD PTR [rdx+0x98],rdi
ffff8000008064db:	48 8b b0 a0 00 00 00 	mov    rsi,QWORD PTR [rax+0xa0]
ffff8000008064e2:	48 8b b8 a8 00 00 00 	mov    rdi,QWORD PTR [rax+0xa8]
ffff8000008064e9:	48 89 b2 a0 00 00 00 	mov    QWORD PTR [rdx+0xa0],rsi
ffff8000008064f0:	48 89 ba a8 00 00 00 	mov    QWORD PTR [rdx+0xa8],rdi
ffff8000008064f7:	48 8b b0 b0 00 00 00 	mov    rsi,QWORD PTR [rax+0xb0]
ffff8000008064fe:	48 8b b8 b8 00 00 00 	mov    rdi,QWORD PTR [rax+0xb8]
ffff800000806505:	48 89 b2 b0 00 00 00 	mov    QWORD PTR [rdx+0xb0],rsi
ffff80000080650c:	48 89 ba b8 00 00 00 	mov    QWORD PTR [rdx+0xb8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:355
    //插入具体设备的等待链表中
    device* dev=&devs[args->dev];
ffff800000806513:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000806517:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
ffff80000080651d:	48 63 d0             	movsxd rdx,eax
ffff800000806520:	48 89 d0             	mov    rax,rdx
ffff800000806523:	48 c1 e0 02          	shl    rax,0x2
ffff800000806527:	48 01 d0             	add    rax,rdx
ffff80000080652a:	48 c1 e0 02          	shl    rax,0x2
ffff80000080652e:	48 01 d0             	add    rax,rdx
ffff800000806531:	48 c1 e0 03          	shl    rax,0x3
ffff800000806535:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080653c:	ff ff ff 
ffff80000080653f:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff800000806543:	48 01 d0             	add    rax,rdx
ffff800000806546:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:356
    if(!dev->waiting_reqs)//空的等待队列
ffff80000080654a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080654e:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff800000806555:	48 85 c0             	test   rax,rax
ffff800000806558:	75 34                	jne    ffff80000080658e <make_request+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:357
        dev->waiting_reqs=&reqs[i];
ffff80000080655a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080655d:	48 63 d0             	movsxd rdx,eax
ffff800000806560:	48 89 d0             	mov    rax,rdx
ffff800000806563:	48 01 c0             	add    rax,rax
ffff800000806566:	48 01 d0             	add    rax,rdx
ffff800000806569:	48 c1 e0 06          	shl    rax,0x6
ffff80000080656d:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff800000806574:	ff ff ff 
ffff800000806577:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff80000080657b:	48 01 c2             	add    rdx,rax
ffff80000080657e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806582:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
ffff800000806589:	e9 90 00 00 00       	jmp    ffff80000080661e <make_request+0x298>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:359
    else{
        driver_args* p=dev->waiting_reqs;
ffff80000080658e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806592:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff800000806599:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360
        for(;p->next;p=p->next);
ffff80000080659d:	eb 0f                	jmp    ffff8000008065ae <make_request+0x228>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360 (discriminator 2)
ffff80000080659f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008065a3:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
ffff8000008065aa:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360 (discriminator 1)
ffff8000008065ae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008065b2:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
ffff8000008065b9:	48 85 c0             	test   rax,rax
ffff8000008065bc:	75 e1                	jne    ffff80000080659f <make_request+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:361
        p->next=&reqs[i];
ffff8000008065be:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008065c1:	48 63 d0             	movsxd rdx,eax
ffff8000008065c4:	48 89 d0             	mov    rax,rdx
ffff8000008065c7:	48 01 c0             	add    rax,rax
ffff8000008065ca:	48 01 d0             	add    rax,rdx
ffff8000008065cd:	48 c1 e0 06          	shl    rax,0x6
ffff8000008065d1:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff8000008065d8:	ff ff ff 
ffff8000008065db:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff8000008065df:	48 01 c2             	add    rdx,rax
ffff8000008065e2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008065e6:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:362
        reqs[i].next=NULL;
ffff8000008065ed:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff8000008065f4:	ff ff ff 
ffff8000008065f7:	48 8b 0c 01          	mov    rcx,QWORD PTR [rcx+rax*1]
ffff8000008065fb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008065fe:	48 63 d0             	movsxd rdx,eax
ffff800000806601:	48 89 d0             	mov    rax,rdx
ffff800000806604:	48 01 c0             	add    rax,rax
ffff800000806607:	48 01 d0             	add    rax,rdx
ffff80000080660a:	48 c1 e0 06          	shl    rax,0x6
ffff80000080660e:	48 01 c8             	add    rax,rcx
ffff800000806611:	48 05 b8 00 00 00    	add    rax,0xb8
ffff800000806617:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:365
    }

    return i;
ffff80000080661e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:366
}
ffff800000806621:	5d                   	pop    rbp
ffff800000806622:	c3                   	ret    

ffff800000806623 <do_req>:
do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:369
//取出一个申请并且执行
int do_req()
{
ffff800000806623:	f3 0f 1e fa          	endbr64 
ffff800000806627:	55                   	push   rbp
ffff800000806628:	48 89 e5             	mov    rbp,rsp
ffff80000080662b:	53                   	push   rbx
ffff80000080662c:	48 83 ec 18          	sub    rsp,0x18
ffff800000806630:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806630 <do_req+0xd>
ffff800000806637:	49 bb 50 c4 01 00 00 	movabs r11,0x1c450
ffff80000080663e:	00 00 00 
ffff800000806641:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372
    //查看每个设备的请求情况
    //块设备
    for(int i=0;i<3;i++)
ffff800000806644:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080664b:	e9 c1 00 00 00       	jmp    ffff800000806711 <do_req+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:374
    {
        device* p=dev_tree[i];
ffff800000806650:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff800000806657:	ff ff ff 
ffff80000080665a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080665e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000806661:	48 63 d2             	movsxd rdx,edx
ffff800000806664:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff800000806668:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375
        for(;p;p=p->next)
ffff80000080666c:	e9 91 00 00 00       	jmp    ffff800000806702 <do_req+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:378
        {
            //如果没有请求运行而且有请求要运行
            if(!p->running_req&&p->waiting_reqs)
ffff800000806671:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806675:	48 8b 80 80 00 00 00 	mov    rax,QWORD PTR [rax+0x80]
ffff80000080667c:	48 85 c0             	test   rax,rax
ffff80000080667f:	75 72                	jne    ffff8000008066f3 <do_req+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:378 (discriminator 1)
ffff800000806681:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806685:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff80000080668c:	48 85 c0             	test   rax,rax
ffff80000080668f:	74 62                	je     ffff8000008066f3 <do_req+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:380
            {
                p->running_req=p->waiting_reqs;
ffff800000806691:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806695:	48 8b 90 88 00 00 00 	mov    rdx,QWORD PTR [rax+0x88]
ffff80000080669c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008066a0:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:381
                p->waiting_reqs=p->waiting_reqs->next;//取出一个
ffff8000008066a7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008066ab:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff8000008066b2:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
ffff8000008066b9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008066bd:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:382
                dev_funcs[p->operi](p->running_req);
ffff8000008066c4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008066c8:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [rax+0xa0]
ffff8000008066ce:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff8000008066d5:	ff ff ff 
ffff8000008066d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066dc:	48 63 d2             	movsxd rdx,edx
ffff8000008066df:	48 8b 14 d0          	mov    rdx,QWORD PTR [rax+rdx*8]
ffff8000008066e3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008066e7:	48 8b 80 80 00 00 00 	mov    rax,QWORD PTR [rax+0x80]
ffff8000008066ee:	48 89 c7             	mov    rdi,rax
ffff8000008066f1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375
        for(;p;p=p->next)
ffff8000008066f3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008066f7:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff8000008066fe:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375 (discriminator 1)
ffff800000806702:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000806707:	0f 85 64 ff ff ff    	jne    ffff800000806671 <do_req+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372 (discriminator 2)
    for(int i=0;i<3;i++)
ffff80000080670d:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372 (discriminator 1)
ffff800000806711:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
ffff800000806715:	0f 8e 35 ff ff ff    	jle    ffff800000806650 <do_req+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:388
            }
            //如果还在运行（DONE的状态不能直接覆盖，因为里面的运行结果可能还没被拿走）
        }
    }
    
    return 0;
ffff80000080671b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:389
}
ffff800000806720:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff800000806724:	c9                   	leave  
ffff800000806725:	c3                   	ret    

ffff800000806726 <wait_on_req>:
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:393


void wait_on_req(int reqi)
{
ffff800000806726:	f3 0f 1e fa          	endbr64 
ffff80000080672a:	55                   	push   rbp
ffff80000080672b:	48 89 e5             	mov    rbp,rsp
ffff80000080672e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080672e <wait_on_req+0x8>
ffff800000806735:	49 bb 52 c3 01 00 00 	movabs r11,0x1c352
ffff80000080673c:	00 00 00 
ffff80000080673f:	4c 01 da             	add    rdx,r11
ffff800000806742:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:394
    while(reqs[reqi].stat!=REQ_STAT_DONE);
ffff800000806745:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:394 (discriminator 1)
ffff800000806746:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff80000080674d:	ff ff ff 
ffff800000806750:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff800000806754:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806757:	48 63 c8             	movsxd rcx,eax
ffff80000080675a:	48 89 c8             	mov    rax,rcx
ffff80000080675d:	48 01 c0             	add    rax,rax
ffff800000806760:	48 01 c8             	add    rax,rcx
ffff800000806763:	48 c1 e0 06          	shl    rax,0x6
ffff800000806767:	48 01 f0             	add    rax,rsi
ffff80000080676a:	48 05 ac 00 00 00    	add    rax,0xac
ffff800000806770:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806772:	83 f8 03             	cmp    eax,0x3
ffff800000806775:	75 cf                	jne    ffff800000806746 <wait_on_req+0x20>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:395
}
ffff800000806777:	90                   	nop
ffff800000806778:	90                   	nop
ffff800000806779:	5d                   	pop    rbp
ffff80000080677a:	c3                   	ret    

ffff80000080677b <clear_req>:
clear_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:397
void clear_req(int reqi)
{
ffff80000080677b:	f3 0f 1e fa          	endbr64 
ffff80000080677f:	55                   	push   rbp
ffff800000806780:	48 89 e5             	mov    rbp,rsp
ffff800000806783:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806783 <clear_req+0x8>
ffff80000080678a:	49 bb fd c2 01 00 00 	movabs r11,0x1c2fd
ffff800000806791:	00 00 00 
ffff800000806794:	4c 01 d8             	add    rax,r11
ffff800000806797:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:398
    reqs[reqi].stat=REQ_STAT_EMPTY;
ffff80000080679a:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff8000008067a1:	ff ff ff 
ffff8000008067a4:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff8000008067a8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008067ab:	48 63 d0             	movsxd rdx,eax
ffff8000008067ae:	48 89 d0             	mov    rax,rdx
ffff8000008067b1:	48 01 c0             	add    rax,rax
ffff8000008067b4:	48 01 d0             	add    rax,rdx
ffff8000008067b7:	48 c1 e0 06          	shl    rax,0x6
ffff8000008067bb:	48 01 c8             	add    rax,rcx
ffff8000008067be:	48 05 ac 00 00 00    	add    rax,0xac
ffff8000008067c4:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:399
ffff8000008067ca:	90                   	nop
ffff8000008067cb:	5d                   	pop    rbp
ffff8000008067cc:	c3                   	ret    

ffff8000008067cd <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:27
TSS *tss=0xffff800000108000ul;
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
void init_proc(){
ffff8000008067cd:	f3 0f 1e fa          	endbr64 
ffff8000008067d1:	55                   	push   rbp
ffff8000008067d2:	48 89 e5             	mov    rbp,rsp
ffff8000008067d5:	41 57                	push   r15
ffff8000008067d7:	53                   	push   rbx
ffff8000008067d8:	48 83 ec 10          	sub    rsp,0x10
ffff8000008067dc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008067dc <init_proc+0xf>
ffff8000008067e3:	49 bb a4 c2 01 00 00 	movabs r11,0x1c2a4
ffff8000008067ea:	00 00 00 
ffff8000008067ed:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
ffff8000008067f0:	be 0d 00 00 00       	mov    esi,0xd
ffff8000008067f5:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008067fa:	49 89 df             	mov    r15,rbx
ffff8000008067fd:	48 b8 28 f7 fd ff ff 	movabs rax,0xfffffffffffdf728
ffff800000806804:	ff ff ff 
ffff800000806807:	48 01 d8             	add    rax,rbx
ffff80000080680a:	ff d0                	call   rax
ffff80000080680c:	48 89 c2             	mov    rdx,rax
ffff80000080680f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806816:	ff ff ff 
ffff800000806819:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080681d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff800000806820:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000806827:	eb 7b                	jmp    ffff8000008068a4 <init_proc+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31 (discriminator 3)
        task[i].pid=-1;
ffff800000806829:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806830:	ff ff ff 
ffff800000806833:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806837:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080683a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080683d:	48 98                	cdqe   
ffff80000080683f:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806846:	48 01 d0             	add    rax,rdx
ffff800000806849:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
        task[i].stat=TASK_EMPTY;
ffff80000080684f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806856:	ff ff ff 
ffff800000806859:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080685d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806860:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806863:	48 98                	cdqe   
ffff800000806865:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080686c:	48 01 d0             	add    rax,rdx
ffff80000080686f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:33 (discriminator 3)
        task[i].parent_pid=-1;
ffff800000806876:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080687d:	ff ff ff 
ffff800000806880:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806884:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806887:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080688a:	48 98                	cdqe   
ffff80000080688c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806893:	48 01 d0             	add    rax,rdx
ffff800000806896:	c7 80 bc 00 00 00 ff 	mov    DWORD PTR [rax+0xbc],0xffffffff
ffff80000080689d:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff8000008068a0:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 1)
ffff8000008068a4:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff8000008068a8:	0f 8e 7b ff ff ff    	jle    ffff800000806829 <init_proc+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35
    }
    cur_proc=0;//proc zero
ffff8000008068ae:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008068b5:	ff ff ff 
ffff8000008068b8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068bc:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:36
    current=task;
ffff8000008068c2:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008068c9:	ff ff ff 
ffff8000008068cc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068d0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008068d3:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff8000008068da:	ff ff ff 
ffff8000008068dd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068e1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:37
    pidd=1;
ffff8000008068e4:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff8000008068eb:	ff ff ff 
ffff8000008068ee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068f2:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:42


    //asm volatile("lldt %0"::"m"(xi));
    //asm volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
ffff8000008068f8:	68 00 00 80 00       	push   0x800000
ffff8000008068fd:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000806904:	ff 
ffff800000806905:	68 00 00 80 00       	push   0x800000
ffff80000080690a:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000806911:	ff 
ffff800000806912:	68 00 00 80 00       	push   0x800000
ffff800000806917:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff80000080691e:	ff 
ffff80000080691f:	68 00 00 80 00       	push   0x800000
ffff800000806924:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff80000080692b:	ff 
ffff80000080692c:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
ffff800000806933:	80 ff ff 
ffff800000806936:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
ffff80000080693d:	80 ff ff 
ffff800000806940:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
ffff800000806947:	80 ff ff 
ffff80000080694a:	48 89 c1             	mov    rcx,rax
ffff80000080694d:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000806954:	80 ff ff 
ffff800000806957:	48 89 c2             	mov    rdx,rax
ffff80000080695a:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000806961:	80 ff ff 
ffff800000806964:	48 89 c6             	mov    rsi,rax
ffff800000806967:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080696e:	80 ff ff 
ffff800000806971:	48 89 c7             	mov    rdi,rax
ffff800000806974:	49 89 df             	mov    r15,rbx
ffff800000806977:	48 b8 5b 5d fe ff ff 	movabs rax,0xfffffffffffe5d5b
ffff80000080697e:	ff ff ff 
ffff800000806981:	48 01 d8             	add    rax,rbx
ffff800000806984:	ff d0                	call   rax
ffff800000806986:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:47
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);

    //===============创建0号进程======================
    int zi= init_proc0();
ffff80000080698a:	49 89 df             	mov    r15,rbx
ffff80000080698d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806992:	48 ba dc 42 fe ff ff 	movabs rdx,0xfffffffffffe42dc
ffff800000806999:	ff ff ff 
ffff80000080699c:	48 01 da             	add    rdx,rbx
ffff80000080699f:	ff d2                	call   rdx
ffff8000008069a1:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:48
    task[zi].stat=TASK_READY;
ffff8000008069a4:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008069ab:	ff ff ff 
ffff8000008069ae:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008069b2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008069b5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008069b8:	48 98                	cdqe   
ffff8000008069ba:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008069c1:	48 01 d0             	add    rax,rdx
ffff8000008069c4:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:50
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
ffff8000008069cb:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff8000008069d2:	ff ff ff 
ffff8000008069d5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008069d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008069dc:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
ffff8000008069e0:	48 89 c6             	mov    rsi,rax
ffff8000008069e3:	bf a8 06 00 00       	mov    edi,0x6a8
ffff8000008069e8:	49 89 df             	mov    r15,rbx
ffff8000008069eb:	48 b8 10 e5 fd ff ff 	movabs rax,0xfffffffffffde510
ffff8000008069f2:	ff ff ff 
ffff8000008069f5:	48 01 d8             	add    rax,rbx
ffff8000008069f8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:52
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
ffff8000008069fa:	be 08 00 00 00       	mov    esi,0x8
ffff8000008069ff:	bf 74 01 00 00       	mov    edi,0x174
ffff800000806a04:	49 89 df             	mov    r15,rbx
ffff800000806a07:	48 b8 10 e5 fd ff ff 	movabs rax,0xfffffffffffde510
ffff800000806a0e:	ff ff ff 
ffff800000806a11:	48 01 d8             	add    rax,rbx
ffff800000806a14:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:54
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
ffff800000806a16:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
ffff800000806a1d:	00 20 00 
ffff800000806a20:	48 89 c6             	mov    rsi,rax
ffff800000806a23:	b8 81 00 00 c0       	mov    eax,0xc0000081
ffff800000806a28:	48 89 c7             	mov    rdi,rax
ffff800000806a2b:	49 89 df             	mov    r15,rbx
ffff800000806a2e:	48 b8 10 e5 fd ff ff 	movabs rax,0xfffffffffffde510
ffff800000806a35:	ff ff ff 
ffff800000806a38:	48 01 d8             	add    rax,rbx
ffff800000806a3b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:56

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
ffff800000806a3d:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff800000806a44:	ff ff ff 
ffff800000806a47:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a4b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806a4e:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff800000806a52:	48 89 c6             	mov    rsi,rax
ffff800000806a55:	48 b8 a0 d5 ff ff ff 	movabs rax,0xffffffffffffd5a0
ffff800000806a5c:	ff ff ff 
ffff800000806a5f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000806a63:	48 89 c7             	mov    rdi,rax
ffff800000806a66:	49 89 df             	mov    r15,rbx
ffff800000806a69:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806a6e:	48 ba a4 0c ff ff ff 	movabs rdx,0xffffffffffff0ca4
ffff800000806a75:	ff ff ff 
ffff800000806a78:	48 01 da             	add    rdx,rbx
ffff800000806a7b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:59
    //创建一个测试进程
//    create_test_proc();
}
ffff800000806a7d:	90                   	nop
ffff800000806a7e:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000806a82:	5b                   	pop    rbx
ffff800000806a83:	41 5f                	pop    r15
ffff800000806a85:	5d                   	pop    rbp
ffff800000806a86:	c3                   	ret    

ffff800000806a87 <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:60
void create_test_proc(){
ffff800000806a87:	f3 0f 1e fa          	endbr64 
ffff800000806a8b:	55                   	push   rbp
ffff800000806a8c:	48 89 e5             	mov    rbp,rsp
ffff800000806a8f:	41 57                	push   r15
ffff800000806a91:	53                   	push   rbx
ffff800000806a92:	48 83 ec 20          	sub    rsp,0x20
ffff800000806a96:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806a96 <create_test_proc+0xf>
ffff800000806a9d:	49 bb ea bf 01 00 00 	movabs r11,0x1bfea
ffff800000806aa4:	00 00 00 
ffff800000806aa7:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62

    int index=req_proc();
ffff800000806aaa:	49 89 df             	mov    r15,rbx
ffff800000806aad:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806ab2:	48 ba 1e 45 fe ff ff 	movabs rdx,0xfffffffffffe451e
ffff800000806ab9:	ff ff ff 
ffff800000806abc:	48 01 da             	add    rdx,rbx
ffff800000806abf:	ff d2                	call   rdx
ffff800000806ac1:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:63
    task[index].stat=TASK_READY;
ffff800000806ac4:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806acb:	ff ff ff 
ffff800000806ace:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ad2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806ad5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806ad8:	48 98                	cdqe   
ffff800000806ada:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806ae1:	48 01 d0             	add    rax,rdx
ffff800000806ae4:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64
    int currsp=0x9fc00-1;
ffff800000806aeb:	c7 45 dc ff fb 09 00 	mov    DWORD PTR [rbp-0x24],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:65
    asm volatile("mov %%rsp,%0":"=m"(currsp));
ffff800000806af2:	48 89 65 dc          	mov    QWORD PTR [rbp-0x24],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:66
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff800000806af6:	48 b8 20 fe ff ff ff 	movabs rax,0xfffffffffffffe20
ffff800000806afd:	ff ff ff 
ffff800000806b00:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b04:	48 89 c2             	mov    rdx,rax
ffff800000806b07:	48 83 ec 08          	sub    rsp,0x8
ffff800000806b0b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806b0e:	50                   	push   rax
ffff800000806b0f:	6a 00                	push   0x0
ffff800000806b11:	52                   	push   rdx
ffff800000806b12:	6a 00                	push   0x0
ffff800000806b14:	6a 00                	push   0x0
ffff800000806b16:	6a 00                	push   0x0
ffff800000806b18:	68 58 7d 00 00       	push   0x7d58
ffff800000806b1d:	6a 10                	push   0x10
ffff800000806b1f:	6a 10                	push   0x10
ffff800000806b21:	6a 10                	push   0x10
ffff800000806b23:	6a 10                	push   0x10
ffff800000806b25:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff800000806b2b:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff800000806b31:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000806b36:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806b3b:	be 00 00 00 00       	mov    esi,0x0
ffff800000806b40:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806b45:	49 89 df             	mov    r15,rbx
ffff800000806b48:	48 b8 6f 46 fe ff ff 	movabs rax,0xfffffffffffe466f
ffff800000806b4f:	ff ff ff 
ffff800000806b52:	48 01 d8             	add    rax,rbx
ffff800000806b55:	ff d0                	call   rax
ffff800000806b57:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)ret_sys_call, 0, index);
    task[index].tss.rsp0=0x400000;
ffff800000806b5b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806b62:	ff ff ff 
ffff800000806b65:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b69:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b6c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806b6f:	48 98                	cdqe   
ffff800000806b71:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806b78:	48 01 d0             	add    rax,rdx
ffff800000806b7b:	48 c7 80 fc 01 00 00 	mov    QWORD PTR [rax+0x1fc],0x400000
ffff800000806b82:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:69
    task[index].mem_struct.stack_top=0x7e00;
ffff800000806b86:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806b8d:	ff ff ff 
ffff800000806b90:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b94:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b97:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806b9a:	48 98                	cdqe   
ffff800000806b9c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806ba3:	48 01 d0             	add    rax,rdx
ffff800000806ba6:	48 c7 40 40 00 7e 00 	mov    QWORD PTR [rax+0x40],0x7e00
ffff800000806bad:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
    task[index].mem_struct.stack_bottom=0x6e00;
ffff800000806bae:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806bb5:	ff ff ff 
ffff800000806bb8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806bbc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806bbf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806bc2:	48 98                	cdqe   
ffff800000806bc4:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806bcb:	48 01 d0             	add    rax,rdx
ffff800000806bce:	48 c7 40 38 00 6e 00 	mov    QWORD PTR [rax+0x38],0x6e00
ffff800000806bd5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:71
    task[index].mem_struct.heap_top=0x1101000;
ffff800000806bd6:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806bdd:	ff ff ff 
ffff800000806be0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806be4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806be7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806bea:	48 98                	cdqe   
ffff800000806bec:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806bf3:	48 01 d0             	add    rax,rdx
ffff800000806bf6:	48 c7 40 30 00 10 10 	mov    QWORD PTR [rax+0x30],0x1101000
ffff800000806bfd:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:72
    task[index].mem_struct.heap_base=0x1100000;
ffff800000806bfe:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806c05:	ff ff ff 
ffff800000806c08:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c0c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c0f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806c12:	48 98                	cdqe   
ffff800000806c14:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806c1b:	48 01 d0             	add    rax,rdx
ffff800000806c1e:	48 c7 40 28 00 00 10 	mov    QWORD PTR [rax+0x28],0x1100000
ffff800000806c25:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:75

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
ffff800000806c26:	48 c7 45 e0 58 7d 00 	mov    QWORD PTR [rbp-0x20],0x7d58
ffff800000806c2d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:76
    str->rax=0;
ffff800000806c2e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c32:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000806c39:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77
    str->rbx=0;
ffff800000806c3a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c3e:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
ffff800000806c45:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rcx=proc_zero;//sysret采用的返回地址
ffff800000806c46:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000806c4d:	ff ff ff 
ffff800000806c50:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c54:	48 89 c2             	mov    rdx,rax
ffff800000806c57:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c5b:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rdx=0;
ffff800000806c5f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c63:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffff800000806c6a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->rsi=0;
ffff800000806c6b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c6f:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff800000806c76:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->rdi=0;
ffff800000806c77:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c7b:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffff800000806c82:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->r15=0;
ffff800000806c83:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c87:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000806c8e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->r14=0;
ffff800000806c8f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c93:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff800000806c9a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r13=0;
ffff800000806c9b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c9f:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff800000806ca6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r12=0;
ffff800000806ca7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806cab:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff800000806cb2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r11=0x200;
ffff800000806cb3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806cb7:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
ffff800000806cbe:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r10=0;
ffff800000806cbf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806cc3:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff800000806cca:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->r9=0;
ffff800000806ccb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806ccf:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
ffff800000806cd6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->r8=0;
ffff800000806cd7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806cdb:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
ffff800000806ce2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->rip=proc_zero;
ffff800000806ce3:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000806cea:	ff ff ff 
ffff800000806ced:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806cf1:	48 89 c2             	mov    rdx,rax
ffff800000806cf4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806cf8:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->cs=0x8;
ffff800000806cff:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806d03:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
ffff800000806d0a:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->rflags=0x00200206;
ffff800000806d0e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806d12:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
ffff800000806d19:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->rsp=0x7e00;
ffff800000806d1d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806d21:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
ffff800000806d28:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->ss=0x2b;
ffff800000806d2c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806d30:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
ffff800000806d37:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:95
    str->ds=0x2b;
ffff800000806d3b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806d3f:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:96
    str->es=0x2b;
ffff800000806d46:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806d4a:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
ffff800000806d51:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:98

}
ffff800000806d52:	90                   	nop
ffff800000806d53:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000806d57:	5b                   	pop    rbx
ffff800000806d58:	41 5f                	pop    r15
ffff800000806d5a:	5d                   	pop    rbp
ffff800000806d5b:	c3                   	ret    

ffff800000806d5c <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:100
int init_proc0()
{
ffff800000806d5c:	f3 0f 1e fa          	endbr64 
ffff800000806d60:	55                   	push   rbp
ffff800000806d61:	48 89 e5             	mov    rbp,rsp
ffff800000806d64:	41 57                	push   r15
ffff800000806d66:	53                   	push   rbx
ffff800000806d67:	48 83 ec 10          	sub    rsp,0x10
ffff800000806d6b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806d6b <init_proc0+0xf>
ffff800000806d72:	49 bb 15 bd 01 00 00 	movabs r11,0x1bd15
ffff800000806d79:	00 00 00 
ffff800000806d7c:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102

    task[0].pid=pidd++;
ffff800000806d7f:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000806d86:	ff ff ff 
ffff800000806d89:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d8d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806d8f:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000806d92:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000806d99:	ff ff ff 
ffff800000806d9c:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806da0:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000806da2:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000806da9:	ff ff ff 
ffff800000806dac:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806db0:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806db3:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:103
    task[0].stat=TASK_RUNNING;
ffff800000806db5:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806dbc:	ff ff ff 
ffff800000806dbf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806dc3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806dc6:	c7 40 18 01 00 00 00 	mov    DWORD PTR [rax+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:104
    task[0].utime=0;
ffff800000806dcd:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806dd4:	ff ff ff 
ffff800000806dd7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ddb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806dde:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:105
    task[0].priority=0;
ffff800000806de5:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806dec:	ff ff ff 
ffff800000806def:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806df3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806df6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:107

    struct process *pz=task;
ffff800000806dfd:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806e04:	ff ff ff 
ffff800000806e07:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e0b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806e0e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:116
//    task[index].tss.eip=(long)proc_zero;
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    pz->openf[0]=(struct file*)&ftty;
ffff800000806e12:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e16:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000806e1d:	ff ff ff 
ffff800000806e20:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806e24:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:117
    pz->openf[1]=(struct file*)&ftty;
ffff800000806e2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e2f:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000806e36:	ff ff ff 
ffff800000806e39:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806e3d:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:118
    pz->openf[2]=(struct file*)&ftty;
ffff800000806e44:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e48:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000806e4f:	ff ff ff 
ffff800000806e52:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806e56:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120

    pz->mem_struct.stack_top=STACK_TOP;
ffff800000806e5d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e61:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000806e68:	7f 00 00 
ffff800000806e6b:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:121
    pz->mem_struct.stack_bottom=STACK_TOP;
ffff800000806e6f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e73:	48 89 70 38          	mov    QWORD PTR [rax+0x38],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122
    pz->mem_struct.heap_top=HEAP_BASE;
ffff800000806e77:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e7b:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x1000000
ffff800000806e82:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    pz->mem_struct.heap_base=HEAP_BASE;
ffff800000806e83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e87:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000806e8e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:124
    memcpy(&pz->tss,tss, sizeof(TSS));
ffff800000806e8f:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff800000806e96:	ff ff ff 
ffff800000806e99:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e9d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806ea0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806ea4:	48 8d 8a f8 01 00 00 	lea    rcx,[rdx+0x1f8]
ffff800000806eab:	ba 6c 00 00 00       	mov    edx,0x6c
ffff800000806eb0:	48 89 c6             	mov    rsi,rax
ffff800000806eb3:	48 89 cf             	mov    rdi,rcx
ffff800000806eb6:	49 89 df             	mov    r15,rbx
ffff800000806eb9:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff800000806ec0:	ff ff ff 
ffff800000806ec3:	48 01 d8             	add    rax,rbx
ffff800000806ec6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:126

    pz->child_procs=NULL;
ffff800000806ec8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806ecc:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000806ed3:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:129

    //这个是进程切换的时候要读取的值
    pz->regs.cr3=PML4_ADDR&~KNL_BASE;
ffff800000806ed7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806edb:	48 c7 80 64 02 00 00 	mov    QWORD PTR [rax+0x264],0x101000
ffff800000806ee2:	00 10 10 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:130
    pz->pml4=PML4_ADDR;
ffff800000806ee6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806eea:	48 bf 00 10 10 00 00 	movabs rdi,0xffff800000101000
ffff800000806ef1:	80 ff ff 
ffff800000806ef4:	48 89 b8 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131
    pz->cwd=root_sb->root;
ffff800000806efb:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000806f02:	ff ff ff 
ffff800000806f05:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806f09:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806f0c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806f0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f13:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    pz->exef=NULL;
ffff800000806f1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f1e:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffff800000806f25:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:133
    list_init(&pz->node);
ffff800000806f29:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f2d:	48 05 34 03 00 00    	add    rax,0x334
ffff800000806f33:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000806f37:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806f3b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000806f42:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806f46:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000806f4d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000806f4e:	90                   	nop
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:134
    pz->node.data=pz;
ffff800000806f4f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f53:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806f57:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    
    pz->gpid=pz->pid;
ffff800000806f5e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f62:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000806f64:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f68:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:137
    pz->sid=pz->pid;
ffff800000806f6b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f6f:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000806f71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f75:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    pz->fg_pgid=pz->pid;
ffff800000806f78:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f7c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000806f7e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f82:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    pz->in_bgpg=0;
ffff800000806f85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f89:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
    return 0;
ffff800000806f90:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
}
ffff800000806f95:	48 83 c4 10          	add    rsp,0x10
ffff800000806f99:	5b                   	pop    rbx
ffff800000806f9a:	41 5f                	pop    r15
ffff800000806f9c:	5d                   	pop    rbp
ffff800000806f9d:	c3                   	ret    

ffff800000806f9e <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
int req_proc(){
ffff800000806f9e:	f3 0f 1e fa          	endbr64 
ffff800000806fa2:	55                   	push   rbp
ffff800000806fa3:	48 89 e5             	mov    rbp,rsp
ffff800000806fa6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806fa6 <req_proc+0x8>
ffff800000806fad:	49 bb da ba 01 00 00 	movabs r11,0x1bada
ffff800000806fb4:	00 00 00 
ffff800000806fb7:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    int num=0;
ffff800000806fba:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000806fc1:	eb 04                	jmp    ffff800000806fc7 <req_proc+0x29>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:146
    num<=MAX_PROC_COUNT){
        num++;
ffff800000806fc3:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000806fc7:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000806fce:	ff ff ff 
ffff800000806fd1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806fd5:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806fd8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000806fdb:	48 63 d2             	movsxd rdx,edx
ffff800000806fde:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000806fe5:	48 01 ca             	add    rdx,rcx
ffff800000806fe8:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806fea:	83 fa ff             	cmp    edx,0xffffffff
ffff800000806fed:	74 2e                	je     ffff80000080701d <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144 (discriminator 1)
ffff800000806fef:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000806ff6:	ff ff ff 
ffff800000806ff9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806ffd:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807000:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807003:	48 63 d2             	movsxd rdx,edx
ffff800000807006:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080700d:	48 01 ca             	add    rdx,rcx
ffff800000807010:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000807013:	85 d2                	test   edx,edx
ffff800000807015:	74 06                	je     ffff80000080701d <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144 (discriminator 2)
ffff800000807017:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff80000080701b:	7e a6                	jle    ffff800000806fc3 <req_proc+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
    }
    if(num>=MAX_PROC_COUNT)
ffff80000080701d:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000807021:	7e 0a                	jle    ffff80000080702d <req_proc+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:149
        return -1;
ffff800000807023:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807028:	e9 c0 00 00 00       	jmp    ffff8000008070ed <req_proc+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    task[num].pid=pidd++;
ffff80000080702d:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807034:	ff ff ff 
ffff800000807037:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080703b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080703d:	8d 72 01             	lea    esi,[rdx+0x1]
ffff800000807040:	48 b9 40 fe ff ff ff 	movabs rcx,0xfffffffffffffe40
ffff800000807047:	ff ff ff 
ffff80000080704a:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080704e:	89 31                	mov    DWORD PTR [rcx],esi
ffff800000807050:	48 b9 a8 fe ff ff ff 	movabs rcx,0xfffffffffffffea8
ffff800000807057:	ff ff ff 
ffff80000080705a:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080705e:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff800000807061:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807064:	48 63 c9             	movsxd rcx,ecx
ffff800000807067:	48 69 c9 54 03 00 00 	imul   rcx,rcx,0x354
ffff80000080706e:	48 01 f1             	add    rcx,rsi
ffff800000807071:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
    task[num].stat=TASK_ZOMBIE;
ffff800000807073:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080707a:	ff ff ff 
ffff80000080707d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807081:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807084:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807087:	48 63 d2             	movsxd rdx,edx
ffff80000080708a:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807091:	48 01 ca             	add    rdx,rcx
ffff800000807094:	c7 42 18 04 00 00 00 	mov    DWORD PTR [rdx+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    task[num].utime=0;
ffff80000080709b:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008070a2:	ff ff ff 
ffff8000008070a5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008070a9:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008070ac:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008070af:	48 63 d2             	movsxd rdx,edx
ffff8000008070b2:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008070b9:	48 01 ca             	add    rdx,rcx
ffff8000008070bc:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    task[num].priority=0;
ffff8000008070c3:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008070ca:	ff ff ff 
ffff8000008070cd:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008070d1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008070d4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008070d7:	48 98                	cdqe   
ffff8000008070d9:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008070e0:	48 01 d0             	add    rax,rdx
ffff8000008070e3:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
    return num;
ffff8000008070ea:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:155
}
ffff8000008070ed:	5d                   	pop    rbp
ffff8000008070ee:	c3                   	ret    

ffff8000008070ef <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
ffff8000008070ef:	f3 0f 1e fa          	endbr64 
ffff8000008070f3:	55                   	push   rbp
ffff8000008070f4:	48 89 e5             	mov    rbp,rsp
ffff8000008070f7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008070f7 <set_proc+0x8>
ffff8000008070fe:	49 bb 89 b9 01 00 00 	movabs r11,0x1b989
ffff800000807105:	00 00 00 
ffff800000807108:	4c 01 d8             	add    rax,r11
ffff80000080710b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080710f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000807113:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000807117:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff80000080711b:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffff80000080711f:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:158
    struct process* proc=&task[proc_nr];
ffff800000807123:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080712a:	ff ff ff 
ffff80000080712d:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807131:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807134:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
ffff800000807137:	48 98                	cdqe   
ffff800000807139:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807140:	48 01 d0             	add    rax,rdx
ffff800000807143:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
    proc->regs.rax=rax;
ffff800000807147:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080714b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080714f:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    proc->regs.rbx=rbx;
ffff800000807156:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080715a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080715e:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rcx=rcx;
ffff800000807165:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807169:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080716d:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:162
    proc->regs.rdx=rdx;
ffff800000807174:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807178:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080717c:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    proc->regs.es=es;
ffff800000807183:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807187:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080718b:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:164
    proc->regs.cs=cs;
ffff800000807192:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807196:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080719a:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165
    proc->regs.ss=ss;
ffff8000008071a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071a5:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
ffff8000008071a9:	48 89 90 cc 02 00 00 	mov    QWORD PTR [rax+0x2cc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.ds=ds;
ffff8000008071b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071b4:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff8000008071b8:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.fs=fs;
ffff8000008071bf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071c3:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
ffff8000008071c7:	48 89 90 dc 02 00 00 	mov    QWORD PTR [rax+0x2dc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.gs=gs;
ffff8000008071ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071d2:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff8000008071d6:	48 89 90 e4 02 00 00 	mov    QWORD PTR [rax+0x2e4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->regs.rsp=rsp;
ffff8000008071dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071e1:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff8000008071e5:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:170
    proc->regs.rbp=rbp;
ffff8000008071ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071f0:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
ffff8000008071f4:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:171
    proc->regs.rsi=rsi;
ffff8000008071fb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071ff:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
ffff800000807203:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172
    proc->regs.rdi=rdi;
ffff80000080720a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080720e:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
ffff800000807212:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:173
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
ffff800000807219:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080721d:	48 c7 80 74 02 00 00 	mov    QWORD PTR [rax+0x274],0x202
ffff800000807224:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:175
    //能接受中断
    proc->regs.rip=rip;
ffff800000807228:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080722c:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
ffff800000807230:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:177

    proc->regs.cs=cs;
ffff800000807237:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080723b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080723f:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:178
    proc->regs.ds=ds;
ffff800000807246:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080724a:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff80000080724e:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:179
    proc->regs.es=es;
ffff800000807255:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807259:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080725d:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:180
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
ffff800000807264:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807268:	48 b9 00 10 10 00 00 	movabs rcx,0xffff800000101000
ffff80000080726f:	80 ff ff 
ffff800000807272:	48 89 88 64 02 00 00 	mov    QWORD PTR [rax+0x264],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:181
    proc->pml4=PML4_ADDR;
ffff800000807279:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080727d:	48 89 88 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:184


}
ffff800000807284:	90                   	nop
ffff800000807285:	5d                   	pop    rbp
ffff800000807286:	c3                   	ret    

ffff800000807287 <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:186
void proc_zero()
{
ffff800000807287:	f3 0f 1e fa          	endbr64 
ffff80000080728b:	55                   	push   rbp
ffff80000080728c:	48 89 e5             	mov    rbp,rsp
ffff80000080728f:	41 57                	push   r15
ffff800000807291:	53                   	push   rbx
ffff800000807292:	48 83 ec 10          	sub    rsp,0x10
ffff800000807296:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807296 <proc_zero+0xf>
ffff80000080729d:	49 bb ea b7 01 00 00 	movabs r11,0x1b7ea
ffff8000008072a4:	00 00 00 
ffff8000008072a7:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
ffff8000008072aa:	49 89 df             	mov    r15,rbx
ffff8000008072ad:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008072b2:	48 ba dc bd fe ff ff 	movabs rdx,0xfffffffffffebddc
ffff8000008072b9:	ff ff ff 
ffff8000008072bc:	48 01 da             	add    rdx,rbx
ffff8000008072bf:	ff d2                	call   rdx
ffff8000008072c1:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:200 (discriminator 1)
        putchar(c);
ffff8000008072c4:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff8000008072c8:	89 c7                	mov    edi,eax
ffff8000008072ca:	49 89 df             	mov    r15,rbx
ffff8000008072cd:	48 b8 0b ed fd ff ff 	movabs rax,0xfffffffffffded0b
ffff8000008072d4:	ff ff ff 
ffff8000008072d7:	48 01 d8             	add    rax,rbx
ffff8000008072da:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:198 (discriminator 1)
    {
ffff8000008072dc:	eb cc                	jmp    ffff8000008072aa <proc_zero+0x23>

ffff8000008072de <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:203
    }
}
void save_rsp(){
ffff8000008072de:	f3 0f 1e fa          	endbr64 
ffff8000008072e2:	55                   	push   rbp
ffff8000008072e3:	48 89 e5             	mov    rbp,rsp
ffff8000008072e6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008072e6 <save_rsp+0x8>
ffff8000008072ed:	49 bb 9a b7 01 00 00 	movabs r11,0x1b79a
ffff8000008072f4:	00 00 00 
ffff8000008072f7:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
ffff8000008072fa:	48 be f0 ff 7f 00 00 	movabs rsi,0xffff8000007ffff0
ffff800000807301:	80 ff ff 
ffff800000807304:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:206
    current->regs.rsp=*p;
ffff800000807308:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080730c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080730f:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff800000807316:	ff ff ff 
ffff800000807319:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080731d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807320:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
}
ffff800000807327:	90                   	nop
ffff800000807328:	5d                   	pop    rbp
ffff800000807329:	c3                   	ret    

ffff80000080732a <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
void manage_proc(){
ffff80000080732a:	f3 0f 1e fa          	endbr64 
ffff80000080732e:	55                   	push   rbp
ffff80000080732f:	48 89 e5             	mov    rbp,rsp
ffff800000807332:	41 57                	push   r15
ffff800000807334:	48 83 ec 18          	sub    rsp,0x18
ffff800000807338:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807338 <manage_proc+0xe>
ffff80000080733f:	49 bb 48 b7 01 00 00 	movabs r11,0x1b748
ffff800000807346:	00 00 00 
ffff800000807349:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
    if(cur_proc!=-1)
ffff80000080734c:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807353:	ff ff ff 
ffff800000807356:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080735a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080735c:	83 fa ff             	cmp    edx,0xffffffff
ffff80000080735f:	74 37                	je     ffff800000807398 <manage_proc+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210
        task[cur_proc].utime++;
ffff800000807361:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807368:	ff ff ff 
ffff80000080736b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080736f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807372:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807379:	ff ff ff 
ffff80000080737c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807380:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807382:	48 63 d2             	movsxd rdx,edx
ffff800000807385:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080738c:	48 01 ca             	add    rdx,rcx
ffff80000080738f:	8b 4a 1c             	mov    ecx,DWORD PTR [rdx+0x1c]
ffff800000807392:	83 c1 01             	add    ecx,0x1
ffff800000807395:	89 4a 1c             	mov    DWORD PTR [rdx+0x1c],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000807398:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080739f:	ff ff ff 
ffff8000008073a2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073a6:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008073a8:	83 fa ff             	cmp    edx,0xffffffff
ffff8000008073ab:	74 70                	je     ffff80000080741d <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 1)
ffff8000008073ad:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008073b4:	ff ff ff 
ffff8000008073b7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073bb:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008073be:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008073c5:	ff ff ff 
ffff8000008073c8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073cc:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008073ce:	48 63 d2             	movsxd rdx,edx
ffff8000008073d1:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008073d8:	48 01 ca             	add    rdx,rcx
ffff8000008073db:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff8000008073de:	83 fa 0a             	cmp    edx,0xa
ffff8000008073e1:	77 3a                	ja     ffff80000080741d <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
ffff8000008073e3:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008073ea:	ff ff ff 
ffff8000008073ed:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073f1:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008073f4:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008073fb:	ff ff ff 
ffff8000008073fe:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807402:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807404:	48 63 d2             	movsxd rdx,edx
ffff800000807407:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080740e:	48 01 ca             	add    rdx,rcx
ffff800000807411:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000807414:	83 fa 02             	cmp    edx,0x2
ffff800000807417:	0f 84 bf 01 00 00    	je     ffff8000008075dc <manage_proc+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
        if(cur_proc!=-1)
ffff80000080741d:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807424:	ff ff ff 
ffff800000807427:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080742b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080742d:	83 fa ff             	cmp    edx,0xffffffff
ffff800000807430:	74 35                	je     ffff800000807467 <manage_proc+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:214
            task[cur_proc].utime=0;
ffff800000807432:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807439:	ff ff ff 
ffff80000080743c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807440:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807443:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080744a:	ff ff ff 
ffff80000080744d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807451:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807453:	48 63 d2             	movsxd rdx,edx
ffff800000807456:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080745d:	48 01 ca             	add    rdx,rcx
ffff800000807460:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:216
        //find
        int i=cur_proc+1;
ffff800000807467:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080746e:	ff ff ff 
ffff800000807471:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807475:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807477:	83 c2 01             	add    edx,0x1
ffff80000080747a:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:217
        int times=0;
ffff80000080747d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
        //轮询，直到有一个符合条件
        while(times<10){
ffff800000807484:	eb 7b                	jmp    ffff800000807501 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
ffff800000807486:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080748d:	ff ff ff 
ffff800000807490:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807494:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807497:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080749a:	48 63 d2             	movsxd rdx,edx
ffff80000080749d:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008074a4:	48 01 ca             	add    rdx,rcx
ffff8000008074a7:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008074a9:	83 fa ff             	cmp    edx,0xffffffff
ffff8000008074ac:	74 3e                	je     ffff8000008074ec <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220 (discriminator 1)
ffff8000008074ae:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008074b5:	ff ff ff 
ffff8000008074b8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008074bc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008074bf:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008074c2:	48 63 d2             	movsxd rdx,edx
ffff8000008074c5:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008074cc:	48 01 ca             	add    rdx,rcx
ffff8000008074cf:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff8000008074d2:	83 fa 02             	cmp    edx,0x2
ffff8000008074d5:	75 15                	jne    ffff8000008074ec <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220 (discriminator 2)
ffff8000008074d7:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008074de:	ff ff ff 
ffff8000008074e1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008074e5:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008074e7:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff8000008074ea:	75 21                	jne    ffff80000080750d <manage_proc+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
                break;
            }
            i++;
ffff8000008074ec:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:224
            if(i>=MAX_TASKS){
ffff8000008074f0:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff8000008074f4:	7e 0b                	jle    ffff800000807501 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:225
                times++;
ffff8000008074f6:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:226
                i=0;
ffff8000008074fa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
        while(times<10){
ffff800000807501:	83 7d e8 09          	cmp    DWORD PTR [rbp-0x18],0x9
ffff800000807505:	0f 8e 7b ff ff ff    	jle    ffff800000807486 <manage_proc+0x15c>
ffff80000080750b:	eb 01                	jmp    ffff80000080750e <manage_proc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:221
                break;
ffff80000080750d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:229
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff80000080750e:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
ffff800000807512:	0f 84 c7 00 00 00    	je     ffff8000008075df <manage_proc+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
        //switch
        task[cur_proc].stat=TASK_READY;
ffff800000807518:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080751f:	ff ff ff 
ffff800000807522:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807526:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807529:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807530:	ff ff ff 
ffff800000807533:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807537:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807539:	48 63 d2             	movsxd rdx,edx
ffff80000080753c:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807543:	48 01 ca             	add    rdx,rcx
ffff800000807546:	c7 42 18 02 00 00 00 	mov    DWORD PTR [rdx+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:232
        task[i].stat=TASK_RUNNING;
ffff80000080754d:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807554:	ff ff ff 
ffff800000807557:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080755b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080755e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807561:	48 63 d2             	movsxd rdx,edx
ffff800000807564:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080756b:	48 01 ca             	add    rdx,rcx
ffff80000080756e:	c7 42 18 01 00 00 00 	mov    DWORD PTR [rdx+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:233
        switch_to(&task[cur_proc], &task[i]);
ffff800000807575:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080757c:	ff ff ff 
ffff80000080757f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807583:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807586:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807589:	48 63 d2             	movsxd rdx,edx
ffff80000080758c:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807593:	48 01 d1             	add    rcx,rdx
ffff800000807596:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080759d:	ff ff ff 
ffff8000008075a0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008075a4:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008075a7:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008075ae:	ff ff ff 
ffff8000008075b1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008075b5:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008075b7:	48 63 d2             	movsxd rdx,edx
ffff8000008075ba:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008075c1:	48 01 f2             	add    rdx,rsi
ffff8000008075c4:	48 89 ce             	mov    rsi,rcx
ffff8000008075c7:	48 89 d7             	mov    rdi,rdx
ffff8000008075ca:	49 89 c7             	mov    r15,rax
ffff8000008075cd:	48 ba 53 5b fe ff ff 	movabs rdx,0xfffffffffffe5b53
ffff8000008075d4:	ff ff ff 
ffff8000008075d7:	48 01 c2             	add    rdx,rax
ffff8000008075da:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
    }
    return;
ffff8000008075dc:	90                   	nop
ffff8000008075dd:	eb 01                	jmp    ffff8000008075e0 <manage_proc+0x2b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:229
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff8000008075df:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:236
}
ffff8000008075e0:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008075e4:	c9                   	leave  
ffff8000008075e5:	c3                   	ret    

ffff8000008075e6 <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:239

void switch_proc_tss(int pnr)
{
ffff8000008075e6:	f3 0f 1e fa          	endbr64 
ffff8000008075ea:	55                   	push   rbp
ffff8000008075eb:	48 89 e5             	mov    rbp,rsp
ffff8000008075ee:	41 57                	push   r15
ffff8000008075f0:	48 83 ec 28          	sub    rsp,0x28
ffff8000008075f4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008075f4 <switch_proc_tss+0xe>
ffff8000008075fb:	49 bb 8c b4 01 00 00 	movabs r11,0x1b48c
ffff800000807602:	00 00 00 
ffff800000807605:	4c 01 d8             	add    rax,r11
ffff800000807608:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:240
    int sel=_TSS_IND(pnr)*8;
ffff80000080760b:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080760e:	01 d2                	add    edx,edx
ffff800000807610:	83 c2 05             	add    edx,0x5
ffff800000807613:	c1 e2 03             	shl    edx,0x3
ffff800000807616:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241
    cur_proc=pnr;
ffff800000807619:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807620:	ff ff ff 
ffff800000807623:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807627:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff80000080762a:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
    switch_proc_asm(sel);
ffff80000080762c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080762f:	89 d7                	mov    edi,edx
ffff800000807631:	49 89 c7             	mov    r15,rax
ffff800000807634:	48 ba 67 1a ff ff ff 	movabs rdx,0xffffffffffff1a67
ffff80000080763b:	ff ff ff 
ffff80000080763e:	48 01 c2             	add    rdx,rax
ffff800000807641:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
}
ffff800000807643:	90                   	nop
ffff800000807644:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000807648:	c9                   	leave  
ffff800000807649:	c3                   	ret    

ffff80000080764a <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:244
void switch_proc(int pnr){
ffff80000080764a:	f3 0f 1e fa          	endbr64 
ffff80000080764e:	55                   	push   rbp
ffff80000080764f:	48 89 e5             	mov    rbp,rsp
ffff800000807652:	41 57                	push   r15
ffff800000807654:	53                   	push   rbx
ffff800000807655:	48 81 ec 70 03 00 00 	sub    rsp,0x370
ffff80000080765c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080765c <switch_proc+0x12>
ffff800000807663:	49 bb 24 b4 01 00 00 	movabs r11,0x1b424
ffff80000080766a:	00 00 00 
ffff80000080766d:	4c 01 db             	add    rbx,r11
ffff800000807670:	89 bd 8c fc ff ff    	mov    DWORD PTR [rbp-0x374],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:247
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
ffff800000807676:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080767d:	ff ff ff 
ffff800000807680:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807684:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807687:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff80000080768d:	48 98                	cdqe   
ffff80000080768f:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807696:	48 01 c2             	add    rdx,rax
ffff800000807699:	48 8d 85 90 fc ff ff 	lea    rax,[rbp-0x370]
ffff8000008076a0:	b9 6a 00 00 00       	mov    ecx,0x6a
ffff8000008076a5:	48 89 c7             	mov    rdi,rax
ffff8000008076a8:	48 89 d6             	mov    rsi,rdx
ffff8000008076ab:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
ffff8000008076ae:	48 89 f2             	mov    rdx,rsi
ffff8000008076b1:	48 89 f8             	mov    rax,rdi
ffff8000008076b4:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff8000008076b6:	89 08                	mov    DWORD PTR [rax],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:248
    save_context(&task[cur_proc].tss);
ffff8000008076b8:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008076bf:	ff ff ff 
ffff8000008076c2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008076c6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008076c9:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008076d0:	ff ff ff 
ffff8000008076d3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008076d7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008076d9:	48 98                	cdqe   
ffff8000008076db:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008076e2:	48 01 d0             	add    rax,rdx
ffff8000008076e5:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff8000008076eb:	48 89 c7             	mov    rdi,rax
ffff8000008076ee:	49 89 df             	mov    r15,rbx
ffff8000008076f1:	48 b8 f7 4c fe ff ff 	movabs rax,0xfffffffffffe4cf7
ffff8000008076f8:	ff ff ff 
ffff8000008076fb:	48 01 d8             	add    rax,rbx
ffff8000008076fe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:253
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
ffff800000807700:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000807707:	ff ff ff 
ffff80000080770a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080770e:	8b 95 8c fc ff ff    	mov    edx,DWORD PTR [rbp-0x374]
ffff800000807714:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:254
    int sel=_TSS_IND(pnr)*8;
ffff800000807716:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff80000080771c:	01 c0                	add    eax,eax
ffff80000080771e:	83 c0 05             	add    eax,0x5
ffff800000807721:	c1 e0 03             	shl    eax,0x3
ffff800000807724:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:255
    switch_to(NULL, &task[pnr].tss);
ffff800000807727:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080772e:	ff ff ff 
ffff800000807731:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807735:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807738:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff80000080773e:	48 98                	cdqe   
ffff800000807740:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807747:	48 01 d0             	add    rax,rdx
ffff80000080774a:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff800000807750:	48 89 c6             	mov    rsi,rax
ffff800000807753:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807758:	49 89 df             	mov    r15,rbx
ffff80000080775b:	48 b8 53 5b fe ff ff 	movabs rax,0xfffffffffffe5b53
ffff800000807762:	ff ff ff 
ffff800000807765:	48 01 d8             	add    rax,rbx
ffff800000807768:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:258
    //asm volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
ffff80000080776a:	90                   	nop
ffff80000080776b:	48 81 c4 70 03 00 00 	add    rsp,0x370
ffff800000807772:	5b                   	pop    rbx
ffff800000807773:	41 5f                	pop    r15
ffff800000807775:	5d                   	pop    rbp
ffff800000807776:	c3                   	ret    

ffff800000807777 <save_context>:
save_context():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:260
void save_context(TSS *tss)
{
ffff800000807777:	f3 0f 1e fa          	endbr64 
ffff80000080777b:	55                   	push   rbp
ffff80000080777c:	48 89 e5             	mov    rbp,rsp
ffff80000080777f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080777f <save_context+0x8>
ffff800000807786:	49 bb 01 b3 01 00 00 	movabs r11,0x1b301
ffff80000080778d:	00 00 00 
ffff800000807790:	4c 01 d8             	add    rax,r11
ffff800000807793:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:271
//    tss->esi=scene_saver.esi;
//    tss->edi=scene_saver.edi;
//    tss->eflags=scene_saver.eflags;
//    tss->esp=scene_saver.esp;
//    tss->ebp=scene_saver.ebp;
}
ffff800000807797:	90                   	nop
ffff800000807798:	5d                   	pop    rbp
ffff800000807799:	c3                   	ret    

ffff80000080779a <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:432
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
ffff80000080779a:	f3 0f 1e fa          	endbr64 
ffff80000080779e:	55                   	push   rbp
ffff80000080779f:	48 89 e5             	mov    rbp,rsp
ffff8000008077a2:	41 57                	push   r15
ffff8000008077a4:	53                   	push   rbx
ffff8000008077a5:	48 83 ec 60          	sub    rsp,0x60
ffff8000008077a9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008077a9 <palloc+0xf>
ffff8000008077b0:	49 bb d7 b2 01 00 00 	movabs r11,0x1b2d7
ffff8000008077b7:	00 00 00 
ffff8000008077ba:	4c 01 db             	add    rbx,r11
ffff8000008077bd:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff8000008077c0:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433
    int page_c=size/4096+size%4096?1:0;
ffff8000008077c3:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff8000008077c6:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008077cc:	85 c0                	test   eax,eax
ffff8000008077ce:	0f 48 c2             	cmovs  eax,edx
ffff8000008077d1:	c1 f8 0c             	sar    eax,0xc
ffff8000008077d4:	89 c1                	mov    ecx,eax
ffff8000008077d6:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff8000008077d9:	99                   	cdq    
ffff8000008077da:	c1 ea 14             	shr    edx,0x14
ffff8000008077dd:	01 d0                	add    eax,edx
ffff8000008077df:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008077e4:	29 d0                	sub    eax,edx
ffff8000008077e6:	01 c8                	add    eax,ecx
ffff8000008077e8:	85 c0                	test   eax,eax
ffff8000008077ea:	0f 95 c0             	setne  al
ffff8000008077ed:	0f b6 c0             	movzx  eax,al
ffff8000008077f0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434
    int c=0;
ffff8000008077f3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:435
    void *ptr=NULL;
ffff8000008077fa:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff800000807801:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
ffff800000807802:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000807809:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437
    pgind++;
ffff80000080780a:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:438
    for(int i=1;i<1024;i++)
ffff80000080780f:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
ffff800000807816:	e9 07 03 00 00       	jmp    ffff800000807b22 <palloc+0x388>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440
    {
        page_item* tblp=*pgind&0xfffff000;
ffff80000080781b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080781f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807822:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000807827:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:441
        for(int j=0;j<1024;j++)
ffff80000080782b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000807832:	e9 d5 02 00 00       	jmp    ffff800000807b0c <palloc+0x372>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:443
        {
            int v=*tblp&PAGE_PRESENT;
ffff800000807837:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080783b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080783e:	83 e0 01             	and    eax,0x1
ffff800000807841:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:444
            if(!v)
ffff800000807844:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff800000807848:	0f 85 b5 02 00 00    	jne    ffff800000807b03 <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
            {
                int new_pg=req_a_page();
ffff80000080784e:	49 89 df             	mov    r15,rbx
ffff800000807851:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807856:	48 ba 28 01 fe ff ff 	movabs rdx,0xfffffffffffe0128
ffff80000080785d:	ff ff ff 
ffff800000807860:	48 01 da             	add    rdx,rbx
ffff800000807863:	ff d2                	call   rdx
ffff800000807865:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:447
                if(new_pg==-1)
ffff800000807868:	83 7d b8 ff          	cmp    DWORD PTR [rbp-0x48],0xffffffff
ffff80000080786c:	0f 85 0c 01 00 00    	jne    ffff80000080797e <palloc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:450
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff800000807872:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807879:	ff ff ff 
ffff80000080787c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807880:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807883:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807886:	48 98                	cdqe   
ffff800000807888:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080788f:	48 01 d0             	add    rax,rdx
ffff800000807892:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000807899:	0f b7 c0             	movzx  eax,ax
ffff80000080789c:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:451
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff80000080789f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008078a6:	ff ff ff 
ffff8000008078a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008078ad:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008078b0:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008078b3:	48 98                	cdqe   
ffff8000008078b5:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008078bc:	48 01 d0             	add    rax,rdx
ffff8000008078bf:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008078c6:	0f b7 c0             	movzx  eax,ax
ffff8000008078c9:	c1 e0 10             	shl    eax,0x10
ffff8000008078cc:	25 00 00 0f 00       	and    eax,0xf0000
ffff8000008078d1:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:452
                    size+=c;
ffff8000008078d4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008078d7:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:453
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff8000008078da:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008078e1:	ff ff ff 
ffff8000008078e4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008078e8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008078eb:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008078ee:	48 98                	cdqe   
ffff8000008078f0:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008078f7:	48 01 d0             	add    rax,rdx
ffff8000008078fa:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
ffff8000008078fd:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:454
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff800000807904:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080790b:	ff ff ff 
ffff80000080790e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807912:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807915:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807918:	48 98                	cdqe   
ffff80000080791a:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807921:	48 01 d0             	add    rax,rdx
ffff800000807924:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff80000080792b:	0f b7 c0             	movzx  eax,ax
ffff80000080792e:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:455
                    tmp_attr&=0xfff0;
ffff800000807931:	81 65 a0 f0 ff 00 00 	and    DWORD PTR [rbp-0x60],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:456
                    tmp_attr+=(size>>16)&0xf;
ffff800000807938:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080793b:	c1 e8 10             	shr    eax,0x10
ffff80000080793e:	83 e0 0f             	and    eax,0xf
ffff800000807941:	89 c2                	mov    edx,eax
ffff800000807943:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffff800000807946:	01 d0                	add    eax,edx
ffff800000807948:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:457
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff80000080794b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807952:	ff ff ff 
ffff800000807955:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807959:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080795c:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080795f:	48 98                	cdqe   
ffff800000807961:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807968:	48 01 d0             	add    rax,rdx
ffff80000080796b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
ffff80000080796e:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:458
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
ffff800000807975:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807979:	e9 b6 01 00 00       	jmp    ffff800000807b34 <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:460
                }
                int addr=get_phyaddr(new_pg);
ffff80000080797e:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff800000807981:	89 c7                	mov    edi,eax
ffff800000807983:	49 89 df             	mov    r15,rbx
ffff800000807986:	48 b8 15 05 fe ff ff 	movabs rax,0xfffffffffffe0515
ffff80000080798d:	ff ff ff 
ffff800000807990:	48 01 d8             	add    rax,rbx
ffff800000807993:	ff d0                	call   rax
ffff800000807995:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:461
                set_page_item(tblp,addr,PAGE_PRESENT|\
ffff800000807998:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
ffff80000080799b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080799f:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008079a4:	89 ce                	mov    esi,ecx
ffff8000008079a6:	48 89 c7             	mov    rdi,rax
ffff8000008079a9:	49 89 df             	mov    r15,rbx
ffff8000008079ac:	48 b8 49 05 fe ff ff 	movabs rax,0xfffffffffffe0549
ffff8000008079b3:	ff ff ff 
ffff8000008079b6:	48 01 d8             	add    rax,rbx
ffff8000008079b9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:463
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
ffff8000008079bb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008079be:	c1 e0 0a             	shl    eax,0xa
ffff8000008079c1:	89 c2                	mov    edx,eax
ffff8000008079c3:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008079c6:	01 d0                	add    eax,edx
ffff8000008079c8:	c1 e0 0c             	shl    eax,0xc
ffff8000008079cb:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:464
                if(ptr==NULL)
ffff8000008079ce:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff8000008079d3:	75 13                	jne    ffff8000008079e8 <palloc+0x24e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:467
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
ffff8000008079d5:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff8000008079dc:	ff ff ff 
ffff8000008079df:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008079e3:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
ffff8000008079e6:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                }
                page_c--;
ffff8000008079e8:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                c++;
ffff8000008079ec:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:471
                if(page_c==0)
ffff8000008079f0:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008079f4:	0f 85 09 01 00 00    	jne    ffff800000807b03 <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:474
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff8000008079fa:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807a01:	ff ff ff 
ffff800000807a04:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a08:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a0b:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807a0e:	48 98                	cdqe   
ffff800000807a10:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807a17:	48 01 d0             	add    rax,rdx
ffff800000807a1a:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000807a21:	0f b7 c0             	movzx  eax,ax
ffff800000807a24:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:475
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff800000807a27:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807a2e:	ff ff ff 
ffff800000807a31:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a35:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a38:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807a3b:	48 98                	cdqe   
ffff800000807a3d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807a44:	48 01 d0             	add    rax,rdx
ffff800000807a47:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000807a4e:	0f b7 c0             	movzx  eax,ax
ffff800000807a51:	c1 e0 10             	shl    eax,0x10
ffff800000807a54:	25 00 00 0f 00       	and    eax,0xf0000
ffff800000807a59:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:476
                    size+=c;
ffff800000807a5c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807a5f:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:477
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff800000807a62:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807a69:	ff ff ff 
ffff800000807a6c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a70:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a73:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807a76:	48 98                	cdqe   
ffff800000807a78:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807a7f:	48 01 d0             	add    rax,rdx
ffff800000807a82:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000807a85:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:478
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff800000807a8c:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807a93:	ff ff ff 
ffff800000807a96:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a9a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a9d:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807aa0:	48 98                	cdqe   
ffff800000807aa2:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807aa9:	48 01 d0             	add    rax,rdx
ffff800000807aac:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000807ab3:	0f b7 c0             	movzx  eax,ax
ffff800000807ab6:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:479
                    tmp_attr&=0xfff0;
ffff800000807ab9:	81 65 a8 f0 ff 00 00 	and    DWORD PTR [rbp-0x58],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:480
                    tmp_attr+=(size>>16)&0xf;
ffff800000807ac0:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000807ac3:	c1 e8 10             	shr    eax,0x10
ffff800000807ac6:	83 e0 0f             	and    eax,0xf
ffff800000807ac9:	89 c2                	mov    edx,eax
ffff800000807acb:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
ffff800000807ace:	01 d0                	add    eax,edx
ffff800000807ad0:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:481
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff800000807ad3:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807ada:	ff ff ff 
ffff800000807add:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ae1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807ae4:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807ae7:	48 98                	cdqe   
ffff800000807ae9:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807af0:	48 01 d0             	add    rax,rdx
ffff800000807af3:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffff800000807af6:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:482
                    return ptr;
ffff800000807afd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807b01:	eb 31                	jmp    ffff800000807b34 <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:485 (discriminator 2)
                }
            }
            tblp++;
ffff800000807b03:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:441 (discriminator 2)
        for(int j=0;j<1024;j++)
ffff800000807b08:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:441 (discriminator 1)
ffff800000807b0c:	81 7d cc ff 03 00 00 	cmp    DWORD PTR [rbp-0x34],0x3ff
ffff800000807b13:	0f 8e 1e fd ff ff    	jle    ffff800000807837 <palloc+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:487 (discriminator 2)
        }
        pgind++;
ffff800000807b19:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:438 (discriminator 2)
    for(int i=1;i<1024;i++)
ffff800000807b1e:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:438 (discriminator 1)
ffff800000807b22:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
ffff800000807b29:	0f 8e ec fc ff ff    	jle    ffff80000080781b <palloc+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:489
    }
    return NULL;
ffff800000807b2f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:490
}
ffff800000807b34:	48 83 c4 60          	add    rsp,0x60
ffff800000807b38:	5b                   	pop    rbx
ffff800000807b39:	41 5f                	pop    r15
ffff800000807b3b:	5d                   	pop    rbp
ffff800000807b3c:	c3                   	ret    

ffff800000807b3d <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:493
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
ffff800000807b3d:	f3 0f 1e fa          	endbr64 
ffff800000807b41:	55                   	push   rbp
ffff800000807b42:	48 89 e5             	mov    rbp,rsp
ffff800000807b45:	41 57                	push   r15
ffff800000807b47:	48 83 ec 18          	sub    rsp,0x18
ffff800000807b4b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807b4b <malloc+0xe>
ffff800000807b52:	49 bb 35 af 01 00 00 	movabs r11,0x1af35
ffff800000807b59:	00 00 00 
ffff800000807b5c:	4c 01 d8             	add    rax,r11
ffff800000807b5f:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:494
    return palloc(cur_proc,size);
ffff800000807b62:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807b69:	ff ff ff 
ffff800000807b6c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807b70:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807b72:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff800000807b75:	89 ce                	mov    esi,ecx
ffff800000807b77:	89 d7                	mov    edi,edx
ffff800000807b79:	49 89 c7             	mov    r15,rax
ffff800000807b7c:	48 ba 1a 4d fe ff ff 	movabs rdx,0xfffffffffffe4d1a
ffff800000807b83:	ff ff ff 
ffff800000807b86:	48 01 c2             	add    rdx,rax
ffff800000807b89:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:495
}
ffff800000807b8b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000807b8f:	c9                   	leave  
ffff800000807b90:	c3                   	ret    

ffff800000807b91 <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:497
void proc_end()
{
ffff800000807b91:	f3 0f 1e fa          	endbr64 
ffff800000807b95:	55                   	push   rbp
ffff800000807b96:	48 89 e5             	mov    rbp,rsp
ffff800000807b99:	41 57                	push   r15
ffff800000807b9b:	53                   	push   rbx
ffff800000807b9c:	48 83 ec 10          	sub    rsp,0x10
ffff800000807ba0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807ba0 <proc_end+0xf>
ffff800000807ba7:	49 bb e0 ae 01 00 00 	movabs r11,0x1aee0
ffff800000807bae:	00 00 00 
ffff800000807bb1:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:499
    int ret;
    asm volatile("mov %%eax,%0":"=m"(ret));
ffff800000807bb4:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:503
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //asm volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
ffff800000807bb7:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000807bbe:	ff ff ff 
ffff800000807bc1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807bc5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807bc7:	89 c7                	mov    edi,eax
ffff800000807bc9:	49 89 df             	mov    r15,rbx
ffff800000807bcc:	48 b8 58 52 fe ff ff 	movabs rax,0xfffffffffffe5258
ffff800000807bd3:	ff ff ff 
ffff800000807bd6:	48 01 d8             	add    rax,rbx
ffff800000807bd9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:504
    if(task[cur_proc].parent_pid!=-1){
ffff800000807bdb:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807be2:	ff ff ff 
ffff800000807be5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807be9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807bec:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000807bf3:	ff ff ff 
ffff800000807bf6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807bfa:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807bfc:	48 98                	cdqe   
ffff800000807bfe:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807c05:	48 01 d0             	add    rax,rdx
ffff800000807c08:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000807c0e:	83 f8 ff             	cmp    eax,0xffffffff
ffff800000807c11:	0f 84 a0 00 00 00    	je     ffff800000807cb7 <proc_end+0x126>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:505
        task[task[cur_proc].parent_pid].stat=TASK_READY;
ffff800000807c17:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807c1e:	ff ff ff 
ffff800000807c21:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c25:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807c28:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807c2f:	ff ff ff 
ffff800000807c32:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c36:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807c39:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000807c40:	ff ff ff 
ffff800000807c43:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c47:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807c49:	48 98                	cdqe   
ffff800000807c4b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807c52:	48 01 c8             	add    rax,rcx
ffff800000807c55:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000807c5b:	89 c0                	mov    eax,eax
ffff800000807c5d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807c64:	48 01 d0             	add    rax,rdx
ffff800000807c67:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:506
        switch_proc_tss(task[cur_proc].parent_pid);
ffff800000807c6e:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807c75:	ff ff ff 
ffff800000807c78:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c7c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807c7f:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000807c86:	ff ff ff 
ffff800000807c89:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c8d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807c8f:	48 98                	cdqe   
ffff800000807c91:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807c98:	48 01 d0             	add    rax,rdx
ffff800000807c9b:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000807ca1:	89 c7                	mov    edi,eax
ffff800000807ca3:	49 89 df             	mov    r15,rbx
ffff800000807ca6:	48 b8 66 4b fe ff ff 	movabs rax,0xfffffffffffe4b66
ffff800000807cad:	ff ff ff 
ffff800000807cb0:	48 01 d8             	add    rax,rbx
ffff800000807cb3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:511
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
ffff800000807cb5:	eb 17                	jmp    ffff800000807cce <proc_end+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:509
        switch_proc_tss(0);
ffff800000807cb7:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807cbc:	49 89 df             	mov    r15,rbx
ffff800000807cbf:	48 b8 66 4b fe ff ff 	movabs rax,0xfffffffffffe4b66
ffff800000807cc6:	ff ff ff 
ffff800000807cc9:	48 01 d8             	add    rax,rbx
ffff800000807ccc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:511
}
ffff800000807cce:	90                   	nop
ffff800000807ccf:	48 83 c4 10          	add    rsp,0x10
ffff800000807cd3:	5b                   	pop    rbx
ffff800000807cd4:	41 5f                	pop    r15
ffff800000807cd6:	5d                   	pop    rbp
ffff800000807cd7:	c3                   	ret    

ffff800000807cd8 <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:513
void del_proc(int pnr)
{
ffff800000807cd8:	f3 0f 1e fa          	endbr64 
ffff800000807cdc:	55                   	push   rbp
ffff800000807cdd:	48 89 e5             	mov    rbp,rsp
ffff800000807ce0:	41 57                	push   r15
ffff800000807ce2:	53                   	push   rbx
ffff800000807ce3:	48 83 ec 20          	sub    rsp,0x20
ffff800000807ce7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807ce7 <del_proc+0xf>
ffff800000807cee:	49 bb 99 ad 01 00 00 	movabs r11,0x1ad99
ffff800000807cf5:	00 00 00 
ffff800000807cf8:	4c 01 db             	add    rbx,r11
ffff800000807cfb:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:514
    task[pnr].stat=TASK_ZOMBIE;
ffff800000807cfe:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807d05:	ff ff ff 
ffff800000807d08:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d0c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807d0f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807d12:	48 98                	cdqe   
ffff800000807d14:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807d1b:	48 01 d0             	add    rax,rdx
ffff800000807d1e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:517
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
ffff800000807d25:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807d2c:	ff ff ff 
ffff800000807d2f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d33:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807d36:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807d39:	48 98                	cdqe   
ffff800000807d3b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807d42:	48 01 d0             	add    rax,rdx
ffff800000807d45:	48 89 c7             	mov    rdi,rax
ffff800000807d48:	49 89 df             	mov    r15,rbx
ffff800000807d4b:	48 b8 35 69 fe ff ff 	movabs rax,0xfffffffffffe6935
ffff800000807d52:	ff ff ff 
ffff800000807d55:	48 01 d8             	add    rax,rbx
ffff800000807d58:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:519
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
ffff800000807d5a:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807d61:	ff ff ff 
ffff800000807d64:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d68:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807d6b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807d6e:	48 98                	cdqe   
ffff800000807d70:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807d77:	48 01 d0             	add    rax,rdx
ffff800000807d7a:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000807d81:	48 89 c7             	mov    rdi,rax
ffff800000807d84:	49 89 df             	mov    r15,rbx
ffff800000807d87:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000807d8e:	ff ff ff 
ffff800000807d91:	48 01 d8             	add    rax,rbx
ffff800000807d94:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000807d96:	c7 45 ec 03 00 00 00 	mov    DWORD PTR [rbp-0x14],0x3
ffff800000807d9d:	eb 4f                	jmp    ffff800000807dee <del_proc+0x116>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
        if(task[pnr].openf[i]){
ffff800000807d9f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807da6:	ff ff ff 
ffff800000807da9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807dad:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807db0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807db3:	48 98                	cdqe   
ffff800000807db5:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807dbc:	48 01 d0             	add    rax,rdx
ffff800000807dbf:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807dc2:	48 63 d2             	movsxd rdx,edx
ffff800000807dc5:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807dc9:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807dce:	48 85 c0             	test   rax,rax
ffff800000807dd1:	74 17                	je     ffff800000807dea <del_proc+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:523
            sys_close(i);
ffff800000807dd3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807dd6:	89 c7                	mov    edi,eax
ffff800000807dd8:	49 89 df             	mov    r15,rbx
ffff800000807ddb:	48 b8 2f aa fe ff ff 	movabs rax,0xfffffffffffeaa2f
ffff800000807de2:	ff ff ff 
ffff800000807de5:	48 01 d8             	add    rax,rbx
ffff800000807de8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000807dea:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521 (discriminator 1)
ffff800000807dee:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000807df2:	7e ab                	jle    ffff800000807d9f <del_proc+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:527
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
ffff800000807df4:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807dfb:	ff ff ff 
ffff800000807dfe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807e02:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807e05:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807e08:	48 98                	cdqe   
ffff800000807e0a:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807e11:	48 01 d0             	add    rax,rdx
ffff800000807e14:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000807e17:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807e1e:	ff ff ff 
ffff800000807e21:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807e25:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807e28:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807e2b:	48 98                	cdqe   
ffff800000807e2d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807e34:	48 01 c8             	add    rax,rcx
ffff800000807e37:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807e39:	39 c2                	cmp    edx,eax
ffff800000807e3b:	75 79                	jne    ffff800000807eb6 <del_proc+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:529
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
ffff800000807e3d:	ba 00 00 00 00       	mov    edx,0x0
ffff800000807e42:	be 02 00 00 00       	mov    esi,0x2
ffff800000807e47:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807e4c:	49 89 df             	mov    r15,rbx
ffff800000807e4f:	48 b8 d2 75 fe ff ff 	movabs rax,0xfffffffffffe75d2
ffff800000807e56:	ff ff ff 
ffff800000807e59:	48 01 d8             	add    rax,rbx
ffff800000807e5c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:530
        sys_close(0);
ffff800000807e5e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807e63:	49 89 df             	mov    r15,rbx
ffff800000807e66:	48 b8 2f aa fe ff ff 	movabs rax,0xfffffffffffeaa2f
ffff800000807e6d:	ff ff ff 
ffff800000807e70:	48 01 d8             	add    rax,rbx
ffff800000807e73:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:531
        sys_close(1);
ffff800000807e75:	bf 01 00 00 00       	mov    edi,0x1
ffff800000807e7a:	49 89 df             	mov    r15,rbx
ffff800000807e7d:	48 b8 2f aa fe ff ff 	movabs rax,0xfffffffffffeaa2f
ffff800000807e84:	ff ff ff 
ffff800000807e87:	48 01 d8             	add    rax,rbx
ffff800000807e8a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:532
        sys_close(2);
ffff800000807e8c:	bf 02 00 00 00       	mov    edi,0x2
ffff800000807e91:	49 89 df             	mov    r15,rbx
ffff800000807e94:	48 b8 2f aa fe ff ff 	movabs rax,0xfffffffffffeaa2f
ffff800000807e9b:	ff ff ff 
ffff800000807e9e:	48 01 d8             	add    rax,rbx
ffff800000807ea1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:534
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
ffff800000807ea3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000807eaa:	eb 04                	jmp    ffff800000807eb0 <del_proc+0x1d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:534 (discriminator 3)
ffff800000807eac:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:534 (discriminator 1)
ffff800000807eb0:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000807eb4:	7e f6                	jle    ffff800000807eac <del_proc+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:544
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
ffff800000807eb6:	90                   	nop
ffff800000807eb7:	48 83 c4 20          	add    rsp,0x20
ffff800000807ebb:	5b                   	pop    rbx
ffff800000807ebc:	41 5f                	pop    r15
ffff800000807ebe:	5d                   	pop    rbp
ffff800000807ebf:	c3                   	ret    

ffff800000807ec0 <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547

int set_proc_stat(int pid,int stat)
{
ffff800000807ec0:	f3 0f 1e fa          	endbr64 
ffff800000807ec4:	55                   	push   rbp
ffff800000807ec5:	48 89 e5             	mov    rbp,rsp
ffff800000807ec8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807ec8 <set_proc_stat+0x8>
ffff800000807ecf:	49 bb b8 ab 01 00 00 	movabs r11,0x1abb8
ffff800000807ed6:	00 00 00 
ffff800000807ed9:	4c 01 d8             	add    rax,r11
ffff800000807edc:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807edf:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:548
    if(pid==-1)return -1;
ffff800000807ee2:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000807ee6:	75 0a                	jne    ffff800000807ef2 <set_proc_stat+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:548 (discriminator 1)
ffff800000807ee8:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807eed:	e9 b9 00 00 00       	jmp    ffff800000807fab <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549
    int i=0;
ffff800000807ef2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550
    for(;task[i].pid!=pid;i++);
ffff800000807ef9:	eb 04                	jmp    ffff800000807eff <set_proc_stat+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550 (discriminator 2)
ffff800000807efb:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550 (discriminator 1)
ffff800000807eff:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807f06:	ff ff ff 
ffff800000807f09:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f0d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807f10:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807f13:	48 63 d2             	movsxd rdx,edx
ffff800000807f16:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807f1d:	48 01 ca             	add    rdx,rcx
ffff800000807f20:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807f22:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807f25:	39 d1                	cmp    ecx,edx
ffff800000807f27:	75 d2                	jne    ffff800000807efb <set_proc_stat+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:551
    if(i==MAX_PROC_COUNT)return -1;
ffff800000807f29:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000807f2d:	75 07                	jne    ffff800000807f36 <set_proc_stat+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:551 (discriminator 1)
ffff800000807f2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807f34:	eb 75                	jmp    ffff800000807fab <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:552
    task[i].stat=stat;
ffff800000807f36:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807f3d:	ff ff ff 
ffff800000807f40:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f44:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807f47:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807f4a:	48 63 d2             	movsxd rdx,edx
ffff800000807f4d:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807f54:	48 01 d1             	add    rcx,rdx
ffff800000807f57:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807f5a:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:554
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
ffff800000807f5d:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807f64:	ff ff ff 
ffff800000807f67:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f6b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807f6d:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000807f70:	75 34                	jne    ffff800000807fa6 <set_proc_stat+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:555
        task[cur_proc].utime=MAX_UTIME;
ffff800000807f72:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807f79:	ff ff ff 
ffff800000807f7c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f80:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807f83:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807f8a:	ff ff ff 
ffff800000807f8d:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807f91:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807f93:	48 98                	cdqe   
ffff800000807f95:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807f9c:	48 01 c8             	add    rax,rcx
ffff800000807f9f:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:556
    return 0;
ffff800000807fa6:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:557
}
ffff800000807fab:	5d                   	pop    rbp
ffff800000807fac:	c3                   	ret    

ffff800000807fad <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:589
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
ffff800000807fad:	f3 0f 1e fa          	endbr64 
ffff800000807fb1:	55                   	push   rbp
ffff800000807fb2:	48 89 e5             	mov    rbp,rsp
ffff800000807fb5:	41 57                	push   r15
ffff800000807fb7:	53                   	push   rbx
ffff800000807fb8:	48 83 ec 10          	sub    rsp,0x10
ffff800000807fbc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807fbc <sys_exit+0xf>
ffff800000807fc3:	49 bb c4 aa 01 00 00 	movabs r11,0x1aac4
ffff800000807fca:	00 00 00 
ffff800000807fcd:	4c 01 db             	add    rbx,r11
ffff800000807fd0:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:590
    current->exit_code=code;
ffff800000807fd3:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000807fda:	ff ff ff 
ffff800000807fdd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807fe1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807fe4:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807fe7:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:591
    del_proc(cur_proc);
ffff800000807fea:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000807ff1:	ff ff ff 
ffff800000807ff4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ff8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807ffa:	89 c7                	mov    edi,eax
ffff800000807ffc:	49 89 df             	mov    r15,rbx
ffff800000807fff:	48 b8 58 52 fe ff ff 	movabs rax,0xfffffffffffe5258
ffff800000808006:	ff ff ff 
ffff800000808009:	48 01 d8             	add    rax,rbx
ffff80000080800c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:593 (discriminator 1)
    while(1)
        manage_proc();
ffff80000080800e:	49 89 df             	mov    r15,rbx
ffff800000808011:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808016:	48 ba aa 48 fe ff ff 	movabs rdx,0xfffffffffffe48aa
ffff80000080801d:	ff ff ff 
ffff800000808020:	48 01 da             	add    rdx,rbx
ffff800000808023:	ff d2                	call   rdx
ffff800000808025:	eb e7                	jmp    ffff80000080800e <sys_exit+0x61>

ffff800000808027 <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:649
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
ffff800000808027:	f3 0f 1e fa          	endbr64 
ffff80000080802b:	55                   	push   rbp
ffff80000080802c:	48 89 e5             	mov    rbp,rsp
ffff80000080802f:	41 57                	push   r15
ffff800000808031:	41 54                	push   r12
ffff800000808033:	53                   	push   rbx
ffff800000808034:	48 83 ec 48          	sub    rsp,0x48
ffff800000808038:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808038 <reg_proc+0x11>
ffff80000080803f:	49 bb 48 aa 01 00 00 	movabs r11,0x1aa48
ffff800000808046:	00 00 00 
ffff800000808049:	4c 01 db             	add    rbx,r11
ffff80000080804c:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000808050:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff800000808054:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651
    
    int i=req_proc();
ffff800000808058:	49 89 df             	mov    r15,rbx
ffff80000080805b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808060:	48 ba 1e 45 fe ff ff 	movabs rdx,0xfffffffffffe451e
ffff800000808067:	ff ff ff 
ffff80000080806a:	48 01 da             	add    rdx,rbx
ffff80000080806d:	ff d2                	call   rdx
ffff80000080806f:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:652
    if(i==-1)return -1;
ffff800000808072:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000808076:	75 0a                	jne    ffff800000808082 <reg_proc+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:652 (discriminator 1)
ffff800000808078:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080807d:	e9 7e 02 00 00       	jmp    ffff800000808300 <reg_proc+0x2d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:655

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
ffff800000808082:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808086:	48 83 ec 08          	sub    rsp,0x8
ffff80000080808a:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080808d:	52                   	push   rdx
ffff80000080808e:	6a 00                	push   0x0
ffff800000808090:	50                   	push   rax
ffff800000808091:	6a 00                	push   0x0
ffff800000808093:	6a 00                	push   0x0
ffff800000808095:	6a 00                	push   0x0
ffff800000808097:	68 00 f0 ff ff       	push   0xfffffffffffff000
ffff80000080809c:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
ffff8000008080a3:	00 
ffff8000008080a4:	6a 28                	push   0x28
ffff8000008080a6:	6a 28                	push   0x28
ffff8000008080a8:	6a 28                	push   0x28
ffff8000008080aa:	6a 28                	push   0x28
ffff8000008080ac:	41 b9 30 00 00 00    	mov    r9d,0x30
ffff8000008080b2:	41 b8 28 00 00 00    	mov    r8d,0x28
ffff8000008080b8:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008080bd:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008080c2:	be 00 00 00 00       	mov    esi,0x0
ffff8000008080c7:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008080cc:	49 89 df             	mov    r15,rbx
ffff8000008080cf:	48 b8 6f 46 fe ff ff 	movabs rax,0xfffffffffffe466f
ffff8000008080d6:	ff ff ff 
ffff8000008080d9:	48 01 d8             	add    rax,rbx
ffff8000008080dc:	ff d0                	call   rax
ffff8000008080de:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:657
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc();
ffff8000008080e2:	49 89 df             	mov    r15,rbx
ffff8000008080e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008080ea:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff8000008080f1:	ff ff ff 
ffff8000008080f4:	48 01 da             	add    rdx,rbx
ffff8000008080f7:	ff d2                	call   rdx
ffff8000008080f9:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000808100:	ff ff ff 
ffff800000808103:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808107:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080810a:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080810d:	48 63 d2             	movsxd rdx,edx
ffff800000808110:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000808117:	48 01 ca             	add    rdx,rcx
ffff80000080811a:	48 89 82 e0 00 00 00 	mov    QWORD PTR [rdx+0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:658
    task[i].pml4[0]= kmalloc();
ffff800000808121:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808128:	ff ff ff 
ffff80000080812b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080812f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808132:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808135:	48 98                	cdqe   
ffff800000808137:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080813e:	48 01 d0             	add    rax,rdx
ffff800000808141:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000808148:	49 89 df             	mov    r15,rbx
ffff80000080814b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808150:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000808157:	ff ff ff 
ffff80000080815a:	48 01 da             	add    rdx,rbx
ffff80000080815d:	ff d2                	call   rdx
ffff80000080815f:	49 89 04 24          	mov    QWORD PTR [r12],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:659
    unsigned long *pdpt=task[i].pml4;
ffff800000808163:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080816a:	ff ff ff 
ffff80000080816d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808171:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808174:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808177:	48 98                	cdqe   
ffff800000808179:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808180:	48 01 d0             	add    rax,rdx
ffff800000808183:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff80000080818a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:661
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
ffff80000080818e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808192:	ba 03 00 00 00       	mov    edx,0x3
ffff800000808197:	be 00 00 00 00       	mov    esi,0x0
ffff80000080819c:	48 89 c7             	mov    rdi,rax
ffff80000080819f:	49 89 df             	mov    r15,rbx
ffff8000008081a2:	48 b8 ae 05 fe ff ff 	movabs rax,0xfffffffffffe05ae
ffff8000008081a9:	ff ff ff 
ffff8000008081ac:	48 01 d8             	add    rax,rbx
ffff8000008081af:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:664

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc();
ffff8000008081b1:	49 89 df             	mov    r15,rbx
ffff8000008081b4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008081b9:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff8000008081c0:	ff ff ff 
ffff8000008081c3:	48 01 da             	add    rdx,rbx
ffff8000008081c6:	ff d2                	call   rdx
ffff8000008081c8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:665
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
ffff8000008081cc:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008081d0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008081d4:	48 83 c0 18          	add    rax,0x18
ffff8000008081d8:	48 83 ca 07          	or     rdx,0x7
ffff8000008081dc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:666
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
ffff8000008081df:	49 89 df             	mov    r15,rbx
ffff8000008081e2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008081e7:	48 ba 28 01 fe ff ff 	movabs rdx,0xfffffffffffe0128
ffff8000008081ee:	ff ff ff 
ffff8000008081f1:	48 01 da             	add    rdx,rbx
ffff8000008081f4:	ff d2                	call   rdx
ffff8000008081f6:	89 c7                	mov    edi,eax
ffff8000008081f8:	49 89 df             	mov    r15,rbx
ffff8000008081fb:	48 b8 15 05 fe ff ff 	movabs rax,0xfffffffffffe0515
ffff800000808202:	ff ff ff 
ffff800000808205:	48 01 d8             	add    rax,rbx
ffff800000808208:	ff d0                	call   rax
ffff80000080820a:	89 c1                	mov    ecx,eax
ffff80000080820c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000808210:	48 05 f8 0f 00 00    	add    rax,0xff8
ffff800000808216:	ba 06 00 00 00       	mov    edx,0x6
ffff80000080821b:	89 ce                	mov    esi,ecx
ffff80000080821d:	48 89 c7             	mov    rdi,rax
ffff800000808220:	49 89 df             	mov    r15,rbx
ffff800000808223:	48 b8 19 06 fe ff ff 	movabs rax,0xfffffffffffe0619
ffff80000080822a:	ff ff ff 
ffff80000080822d:	48 01 d8             	add    rax,rbx
ffff800000808230:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:667
    task[i].regs.cr3=task[i].pml4;
ffff800000808232:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808239:	ff ff ff 
ffff80000080823c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808240:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808243:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808246:	48 98                	cdqe   
ffff800000808248:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080824f:	48 01 d0             	add    rax,rdx
ffff800000808252:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000808259:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808260:	ff ff ff 
ffff800000808263:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808267:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080826a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080826d:	48 98                	cdqe   
ffff80000080826f:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808276:	48 01 c8             	add    rax,rcx
ffff800000808279:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:669

    task[i].stat=TASK_READY;
ffff800000808280:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808287:	ff ff ff 
ffff80000080828a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080828e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808291:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808294:	48 98                	cdqe   
ffff800000808296:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080829d:	48 01 d0             	add    rax,rdx
ffff8000008082a0:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:670
    task[i].cwd=cwd;
ffff8000008082a7:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008082ae:	ff ff ff 
ffff8000008082b1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008082b5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008082b8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008082bb:	48 98                	cdqe   
ffff8000008082bd:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008082c4:	48 01 c2             	add    rdx,rax
ffff8000008082c7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008082cb:	48 89 82 e8 00 00 00 	mov    QWORD PTR [rdx+0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:671
    task[i].exef=exef;
ffff8000008082d2:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008082d9:	ff ff ff 
ffff8000008082dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008082e0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008082e3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008082e6:	48 98                	cdqe   
ffff8000008082e8:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008082ef:	48 01 c2             	add    rdx,rax
ffff8000008082f2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008082f6:	48 89 82 f0 00 00 00 	mov    QWORD PTR [rdx+0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:673

    return i;
ffff8000008082fd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:728
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
ffff800000808300:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff800000808304:	5b                   	pop    rbx
ffff800000808305:	41 5c                	pop    r12
ffff800000808307:	41 5f                	pop    r15
ffff800000808309:	5d                   	pop    rbp
ffff80000080830a:	c3                   	ret    

ffff80000080830b <sys_malloc>:
sys_malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:731

void * sys_malloc(int size)
{
ffff80000080830b:	f3 0f 1e fa          	endbr64 
ffff80000080830f:	55                   	push   rbp
ffff800000808310:	48 89 e5             	mov    rbp,rsp
ffff800000808313:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808313 <sys_malloc+0x8>
ffff80000080831a:	49 bb 6d a7 01 00 00 	movabs r11,0x1a76d
ffff800000808321:	00 00 00 
ffff800000808324:	4c 01 d8             	add    rax,r11
ffff800000808327:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:733
    //
    int n=size/CHUNK_SIZE+size%CHUNK_SIZE?1:0;
ffff80000080832a:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080832d:	8d 8a ff 0f 00 00    	lea    ecx,[rdx+0xfff]
ffff800000808333:	85 d2                	test   edx,edx
ffff800000808335:	0f 48 d1             	cmovs  edx,ecx
ffff800000808338:	c1 fa 0c             	sar    edx,0xc
ffff80000080833b:	89 d6                	mov    esi,edx
ffff80000080833d:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000808340:	89 d1                	mov    ecx,edx
ffff800000808342:	c1 f9 1f             	sar    ecx,0x1f
ffff800000808345:	c1 e9 14             	shr    ecx,0x14
ffff800000808348:	01 ca                	add    edx,ecx
ffff80000080834a:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff800000808350:	29 ca                	sub    edx,ecx
ffff800000808352:	01 f2                	add    edx,esi
ffff800000808354:	85 d2                	test   edx,edx
ffff800000808356:	0f 95 c2             	setne  dl
ffff800000808359:	0f b6 d2             	movzx  edx,dl
ffff80000080835c:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:734
    chunk_header *hp=(chunk_header*)task[cur_proc].mem_struct.heap_base;
ffff80000080835f:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000808366:	ff ff ff 
ffff800000808369:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080836d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808370:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000808377:	ff ff ff 
ffff80000080837a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080837e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000808380:	48 63 d2             	movsxd rdx,edx
ffff800000808383:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080838a:	48 01 ca             	add    rdx,rcx
ffff80000080838d:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000808391:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000808395:	eb 0c                	jmp    ffff8000008083a3 <sys_malloc+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:736
        hp=hp->next;
ffff800000808397:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080839b:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080839f:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff8000008083a3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008083a7:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff8000008083ab:	48 85 d2             	test   rdx,rdx
ffff8000008083ae:	74 16                	je     ffff8000008083c6 <sys_malloc+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735 (discriminator 1)
ffff8000008083b0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008083b4:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff8000008083b7:	85 d2                	test   edx,edx
ffff8000008083b9:	75 0b                	jne    ffff8000008083c6 <sys_malloc+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735 (discriminator 2)
ffff8000008083bb:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008083bf:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008083c1:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff8000008083c4:	7e d1                	jle    ffff800000808397 <sys_malloc+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:737
    if(hp->pgn<n)
ffff8000008083c6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008083ca:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008083cc:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff8000008083cf:	0f 8e b8 00 00 00    	jle    ffff80000080848d <sys_malloc+0x182>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:740
    {
        //上抬heap top
        if(task[cur_proc].mem_struct.heap_top+CHUNK_SIZE*n>=HEAP_MAXTOP)
ffff8000008083d5:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008083dc:	ff ff ff 
ffff8000008083df:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008083e3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008083e6:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008083ed:	ff ff ff 
ffff8000008083f0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008083f4:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008083f6:	48 63 d2             	movsxd rdx,edx
ffff8000008083f9:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000808400:	48 01 ca             	add    rdx,rcx
ffff800000808403:	48 8b 4a 30          	mov    rcx,QWORD PTR [rdx+0x30]
ffff800000808407:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080840a:	c1 e2 0c             	shl    edx,0xc
ffff80000080840d:	48 63 d2             	movsxd rdx,edx
ffff800000808410:	48 01 ca             	add    rdx,rcx
ffff800000808413:	48 81 fa ff ff ef 01 	cmp    rdx,0x1efffff
ffff80000080841a:	76 0a                	jbe    ffff800000808426 <sys_malloc+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:743
        {
            //超过顶部
            return NULL;
ffff80000080841c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808421:	e9 e0 00 00 00       	jmp    ffff800000808506 <sys_malloc+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:745
        }
        int needed=n-hp->pgn;
ffff800000808426:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080842a:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080842c:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080842f:	29 ca                	sub    edx,ecx
ffff800000808431:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:746
        char* p=task[cur_proc].mem_struct.heap_top;
ffff800000808434:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080843b:	ff ff ff 
ffff80000080843e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808442:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808445:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080844c:	ff ff ff 
ffff80000080844f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808453:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808455:	48 98                	cdqe   
ffff800000808457:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080845e:	48 01 c8             	add    rax,rcx
ffff800000808461:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000808465:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000808469:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000808470:	eb 13                	jmp    ffff800000808485 <sys_malloc+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749 (discriminator 3)
        {
            *p=0;//触发缺页中断
ffff800000808472:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808476:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:750 (discriminator 3)
            p+=PAGE_SIZE;
ffff800000808479:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
ffff800000808480:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747 (discriminator 3)
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000808481:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747 (discriminator 1)
ffff800000808485:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808488:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
ffff80000080848b:	7c e5                	jl     ffff800000808472 <sys_malloc+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:753
        }
    }
    if(hp->pgn>n)
ffff80000080848d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808491:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808493:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
ffff800000808496:	7d 59                	jge    ffff8000008084f1 <sys_malloc+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:756
    {
        //在后面新建一个头
        char *p=hp;
ffff800000808498:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080849c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:757
        p+=(n+1)*CHUNK_SIZE;//算上存储头一个
ffff8000008084a0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008084a3:	83 c0 01             	add    eax,0x1
ffff8000008084a6:	c1 e0 0c             	shl    eax,0xc
ffff8000008084a9:	48 98                	cdqe   
ffff8000008084ab:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:758
        chunk_header *np=p;
ffff8000008084af:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008084b3:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:759
        np->pgn=hp->pgn-n-1;
ffff8000008084b7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008084bb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008084bd:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff8000008084c0:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008084c3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008084c7:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:760
        np->next=hp->next;
ffff8000008084c9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008084cd:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008084d1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008084d5:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761
        np->prev=hp;
ffff8000008084d9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008084dd:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008084e1:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:762
        hp->next=np;
ffff8000008084e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008084e9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008084ed:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:764
    }
    hp->alloc=1;//分配完毕
ffff8000008084f1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008084f5:	c7 40 04 01 00 00 00 	mov    DWORD PTR [rax+0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:765
    return (char*)hp+CHUNK_SIZE;//返回后边的第一个数据块地址
ffff8000008084fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808500:	48 05 00 10 00 00    	add    rax,0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:766
}
ffff800000808506:	5d                   	pop    rbp
ffff800000808507:	c3                   	ret    

ffff800000808508 <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:768
int sys_free(int ptr)
{
ffff800000808508:	f3 0f 1e fa          	endbr64 
ffff80000080850c:	55                   	push   rbp
ffff80000080850d:	48 89 e5             	mov    rbp,rsp
ffff800000808510:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808510 <sys_free+0x8>
ffff800000808517:	49 bb 70 a5 01 00 00 	movabs r11,0x1a570
ffff80000080851e:	00 00 00 
ffff800000808521:	4c 01 d8             	add    rax,r11
ffff800000808524:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:769
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
ffff800000808527:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080852a:	2d 00 10 00 00       	sub    eax,0x1000
ffff80000080852f:	48 98                	cdqe   
ffff800000808531:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:770
    hp->alloc=0;    //合并
ffff800000808535:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808539:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
    //向后合并
    chunk_header *p=hp->next;
ffff800000808540:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808544:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808548:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:773
    while(p!=NULL)
ffff80000080854c:	eb 2e                	jmp    ffff80000080857c <sys_free+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:775
    {
        if(p->alloc==0)
ffff80000080854e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808552:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808555:	85 c0                	test   eax,eax
ffff800000808557:	75 2c                	jne    ffff800000808585 <sys_free+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:777
        {
            hp->pgn+=p->pgn+1;//把区域合并
ffff800000808559:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080855d:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080855f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808563:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808565:	83 c0 01             	add    eax,0x1
ffff800000808568:	01 c2                	add    edx,eax
ffff80000080856a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080856e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:780
        }else
            break;
        p=p->next;
ffff800000808570:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808574:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808578:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:773
    while(p!=NULL)
ffff80000080857c:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000808581:	75 cb                	jne    ffff80000080854e <sys_free+0x46>
ffff800000808583:	eb 01                	jmp    ffff800000808586 <sys_free+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:779
            break;
ffff800000808585:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:783
    }
    //向前合并
    p=hp->prev;
ffff800000808586:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080858a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080858e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:784
    while(p!=NULL)
ffff800000808592:	eb 2e                	jmp    ffff8000008085c2 <sys_free+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:786
    {
        if(p->alloc==0)
ffff800000808594:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808598:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080859b:	85 c0                	test   eax,eax
ffff80000080859d:	75 2c                	jne    ffff8000008085cb <sys_free+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:788
        {
            p->pgn+=hp->pgn+1;//把区域合并
ffff80000080859f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008085a3:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008085a5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008085a9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008085ab:	83 c0 01             	add    eax,0x1
ffff8000008085ae:	01 c2                	add    edx,eax
ffff8000008085b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008085b4:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:791
        }else
            break;
        p=p->prev;
ffff8000008085b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008085ba:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008085be:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:784
    while(p!=NULL)
ffff8000008085c2:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008085c7:	75 cb                	jne    ffff800000808594 <sys_free+0x8c>
ffff8000008085c9:	eb 01                	jmp    ffff8000008085cc <sys_free+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:790
            break;
ffff8000008085cb:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:794
    }
    //合并完成
    return 0;
ffff8000008085cc:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:795
}
ffff8000008085d1:	5d                   	pop    rbp
ffff8000008085d2:	c3                   	ret    

ffff8000008085d3 <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:797

void switch_to(struct process *from, struct process *to) {
ffff8000008085d3:	f3 0f 1e fa          	endbr64 
ffff8000008085d7:	55                   	push   rbp
ffff8000008085d8:	48 89 e5             	mov    rbp,rsp
ffff8000008085db:	53                   	push   rbx
ffff8000008085dc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008085dc <switch_to+0x9>
ffff8000008085e3:	49 bb a4 a4 01 00 00 	movabs r11,0x1a4a4
ffff8000008085ea:	00 00 00 
ffff8000008085ed:	4c 01 d8             	add    rax,r11
ffff8000008085f0:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffff8000008085f4:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    cur_proc=to-task;
ffff8000008085f8:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008085ff:	ff ff ff 
ffff800000808602:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808606:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808609:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080860d:	48 29 ca             	sub    rdx,rcx
ffff800000808610:	48 89 d1             	mov    rcx,rdx
ffff800000808613:	48 c1 f9 02          	sar    rcx,0x2
ffff800000808617:	48 ba 7d 38 0d a1 92 	movabs rdx,0xb3146e92a10d387d
ffff80000080861e:	6e 14 b3 
ffff800000808621:	48 0f af d1          	imul   rdx,rcx
ffff800000808625:	89 d1                	mov    ecx,edx
ffff800000808627:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080862e:	ff ff ff 
ffff800000808631:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808635:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:799
    current=&task[cur_proc];
ffff800000808637:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080863e:	ff ff ff 
ffff800000808641:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808645:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808648:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080864f:	ff ff ff 
ffff800000808652:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808656:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000808658:	48 63 d2             	movsxd rdx,edx
ffff80000080865b:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000808662:	48 01 ca             	add    rdx,rcx
ffff800000808665:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff80000080866c:	ff ff ff 
ffff80000080866f:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000808673:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:801
    //cr3需要物理地址,regs.cr3里面填的就是物理地址
    asm volatile("mov %0,%%rax\n"
ffff800000808676:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080867a:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
ffff800000808681:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:803
                 "mov %%rax,%%cr3\n":"=m"(to->regs.cr3));
    asm volatile("mov %%rsp,%0\r\n"
ffff800000808684:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
ffff800000808688:	4c 8b 55 f0          	mov    r10,QWORD PTR [rbp-0x10]
ffff80000080868c:	4c 8b 5d f0          	mov    r11,QWORD PTR [rbp-0x10]
ffff800000808690:	48 8b 5d f0          	mov    rbx,QWORD PTR [rbp-0x10]
ffff800000808694:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808698:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080869c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008086a0:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
ffff8000008086a4:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffff8000008086a8:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff8000008086ac:	49 89 a1 9c 02 00 00 	mov    QWORD PTR [r9+0x29c],rsp
ffff8000008086b3:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # ffff8000008086de <done>
ffff8000008086ba:	49 89 82 6c 02 00 00 	mov    QWORD PTR [r10+0x26c],rax
ffff8000008086c1:	41 8c a3 dc 02 00 00 	mov    WORD PTR [r11+0x2dc],fs
ffff8000008086c8:	8c ab e4 02 00 00    	mov    WORD PTR [rbx+0x2e4],gs
ffff8000008086ce:	48 8b a1 9c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x29c]
ffff8000008086d5:	41 ff b0 6c 02 00 00 	push   QWORD PTR [r8+0x26c]
ffff8000008086dc:	eb 08                	jmp    ffff8000008086e6 <__switch_to>

ffff8000008086de <done>:
ffff8000008086de:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:817
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
ffff8000008086df:	90                   	nop
ffff8000008086e0:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff8000008086e4:	c9                   	leave  
ffff8000008086e5:	c3                   	ret    

ffff8000008086e6 <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:818
void __switch_to(struct process *from, struct process *to) {
ffff8000008086e6:	f3 0f 1e fa          	endbr64 
ffff8000008086ea:	55                   	push   rbp
ffff8000008086eb:	48 89 e5             	mov    rbp,rsp
ffff8000008086ee:	41 57                	push   r15
ffff8000008086f0:	41 54                	push   r12
ffff8000008086f2:	53                   	push   rbx
ffff8000008086f3:	48 83 ec 18          	sub    rsp,0x18
ffff8000008086f7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008086f7 <__switch_to+0x11>
ffff8000008086fe:	49 bb 89 a3 01 00 00 	movabs r11,0x1a389
ffff800000808705:	00 00 00 
ffff800000808708:	4c 01 d8             	add    rax,r11
ffff80000080870b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080870f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:819
    set_tss(to->tss.rsp0,to->tss.rsp1,to->tss.rsp2,to->tss.ists[0],to->tss.ists[1],
ffff800000808713:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000808717:	4c 8b 9a 4c 02 00 00 	mov    r11,QWORD PTR [rdx+0x24c]
ffff80000080871e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000808722:	4c 8b 92 44 02 00 00 	mov    r10,QWORD PTR [rdx+0x244]
ffff800000808729:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080872d:	4c 8b 8a 3c 02 00 00 	mov    r9,QWORD PTR [rdx+0x23c]
ffff800000808734:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000808738:	4c 8b 82 34 02 00 00 	mov    r8,QWORD PTR [rdx+0x234]
ffff80000080873f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000808743:	4c 8b a2 2c 02 00 00 	mov    r12,QWORD PTR [rdx+0x22c]
ffff80000080874a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080874e:	48 8b 9a 24 02 00 00 	mov    rbx,QWORD PTR [rdx+0x224]
ffff800000808755:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000808759:	48 8b 8a 1c 02 00 00 	mov    rcx,QWORD PTR [rdx+0x21c]
ffff800000808760:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000808764:	48 8b 92 0c 02 00 00 	mov    rdx,QWORD PTR [rdx+0x20c]
ffff80000080876b:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080876f:	48 8b b6 04 02 00 00 	mov    rsi,QWORD PTR [rsi+0x204]
ffff800000808776:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffff80000080877a:	48 8b bf fc 01 00 00 	mov    rdi,QWORD PTR [rdi+0x1fc]
ffff800000808781:	41 53                	push   r11
ffff800000808783:	41 52                	push   r10
ffff800000808785:	41 51                	push   r9
ffff800000808787:	41 50                	push   r8
ffff800000808789:	4d 89 e1             	mov    r9,r12
ffff80000080878c:	49 89 d8             	mov    r8,rbx
ffff80000080878f:	49 89 c7             	mov    r15,rax
ffff800000808792:	49 ba 5b 5d fe ff ff 	movabs r10,0xfffffffffffe5d5b
ffff800000808799:	ff ff ff 
ffff80000080879c:	49 01 c2             	add    r10,rax
ffff80000080879f:	41 ff d2             	call   r10
ffff8000008087a2:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:821
            to->tss.ists[2],to->tss.ists[3],to->tss.ists[4],to->tss.ists[5],to->tss.ists[6]);
    asm volatile("mov %%fs,%0\r\n"
ffff8000008087a6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008087aa:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008087ae:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008087b2:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008087b6:	8c a0 dc 02 00 00    	mov    WORD PTR [rax+0x2dc],fs
ffff8000008087bc:	8c ae e4 02 00 00    	mov    WORD PTR [rsi+0x2e4],gs
ffff8000008087c2:	8e a2 dc 02 00 00    	mov    fs,WORD PTR [rdx+0x2dc]
ffff8000008087c8:	8e a9 e4 02 00 00    	mov    gs,WORD PTR [rcx+0x2e4]
ffff8000008087ce:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:827
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
ffff8000008087cf:	90                   	nop
ffff8000008087d0:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff8000008087d4:	5b                   	pop    rbx
ffff8000008087d5:	41 5c                	pop    r12
ffff8000008087d7:	41 5f                	pop    r15
ffff8000008087d9:	5d                   	pop    rbp
ffff8000008087da:	c3                   	ret    

ffff8000008087db <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:829

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
ffff8000008087db:	f3 0f 1e fa          	endbr64 
ffff8000008087df:	55                   	push   rbp
ffff8000008087e0:	48 89 e5             	mov    rbp,rsp
ffff8000008087e3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008087e3 <set_tss+0x8>
ffff8000008087ea:	49 bb 9d a2 01 00 00 	movabs r11,0x1a29d
ffff8000008087f1:	00 00 00 
ffff8000008087f4:	4c 01 d8             	add    rax,r11
ffff8000008087f7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008087fb:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008087ff:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000808803:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000808807:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffff80000080880b:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:830
    tss->rsp0=rsp0;
ffff80000080880f:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff800000808816:	ff ff ff 
ffff800000808819:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080881d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808820:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000808824:	48 89 4a 04          	mov    QWORD PTR [rdx+0x4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:831
    tss->rsp1=rsp1;
ffff800000808828:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080882f:	ff ff ff 
ffff800000808832:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808836:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808839:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080883d:	48 89 4a 0c          	mov    QWORD PTR [rdx+0xc],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:832
    tss->rsp2=rsp2;
ffff800000808841:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff800000808848:	ff ff ff 
ffff80000080884b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080884f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808852:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000808856:	48 89 4a 14          	mov    QWORD PTR [rdx+0x14],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:833
    tss->ists[0]=ist0;
ffff80000080885a:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff800000808861:	ff ff ff 
ffff800000808864:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808868:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080886b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080886f:	48 89 4a 24          	mov    QWORD PTR [rdx+0x24],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:834
    tss->ists[1]=ist1;
ffff800000808873:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080887a:	ff ff ff 
ffff80000080887d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808881:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808884:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000808888:	48 89 4a 2c          	mov    QWORD PTR [rdx+0x2c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:835
    tss->ists[2]=ist2;
ffff80000080888c:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff800000808893:	ff ff ff 
ffff800000808896:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080889a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080889d:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff8000008088a1:	48 89 4a 34          	mov    QWORD PTR [rdx+0x34],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:836
    tss->ists[3]=ist3;
ffff8000008088a5:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff8000008088ac:	ff ff ff 
ffff8000008088af:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008088b3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008088b6:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff8000008088ba:	48 89 4a 3c          	mov    QWORD PTR [rdx+0x3c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:837
    tss->ists[4]=ist4;
ffff8000008088be:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff8000008088c5:	ff ff ff 
ffff8000008088c8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008088cc:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008088cf:	48 8b 4d 18          	mov    rcx,QWORD PTR [rbp+0x18]
ffff8000008088d3:	48 89 4a 44          	mov    QWORD PTR [rdx+0x44],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:838
    tss->ists[5]=ist5;
ffff8000008088d7:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff8000008088de:	ff ff ff 
ffff8000008088e1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008088e5:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008088e8:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff8000008088ec:	48 89 4a 4c          	mov    QWORD PTR [rdx+0x4c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:839
    tss->ists[6]=ist6;
ffff8000008088f0:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff8000008088f7:	ff ff ff 
ffff8000008088fa:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008088fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808901:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff800000808905:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:840
}
ffff800000808909:	90                   	nop
ffff80000080890a:	5d                   	pop    rbp
ffff80000080890b:	c3                   	ret    

ffff80000080890c <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:842

int fork_child_ret(){
ffff80000080890c:	f3 0f 1e fa          	endbr64 
ffff800000808910:	55                   	push   rbp
ffff800000808911:	48 89 e5             	mov    rbp,rsp
ffff800000808914:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808914 <fork_child_ret+0x8>
ffff80000080891b:	49 bb 6c a1 01 00 00 	movabs r11,0x1a16c
ffff800000808922:	00 00 00 
ffff800000808925:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:843
    return 0;
ffff800000808928:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:845

}
ffff80000080892d:	5d                   	pop    rbp
ffff80000080892e:	c3                   	ret    

ffff80000080892f <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847

int sys_fork(void){
ffff80000080892f:	f3 0f 1e fa          	endbr64 
ffff800000808933:	55                   	push   rbp
ffff800000808934:	48 89 e5             	mov    rbp,rsp
ffff800000808937:	41 57                	push   r15
ffff800000808939:	53                   	push   rbx
ffff80000080893a:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff800000808941:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808941 <sys_fork+0x12>
ffff800000808948:	49 bb 3f a1 01 00 00 	movabs r11,0x1a13f
ffff80000080894f:	00 00 00 
ffff800000808952:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:848
    int pid=req_proc();
ffff800000808955:	49 89 df             	mov    r15,rbx
ffff800000808958:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080895d:	48 ba 1e 45 fe ff ff 	movabs rdx,0xfffffffffffe451e
ffff800000808964:	ff ff ff 
ffff800000808967:	48 01 da             	add    rdx,rbx
ffff80000080896a:	ff d2                	call   rdx
ffff80000080896c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849
    int pids=task[pid].pid;
ffff80000080896f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808976:	ff ff ff 
ffff800000808979:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080897d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808980:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808983:	48 98                	cdqe   
ffff800000808985:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080898c:	48 01 d0             	add    rax,rdx
ffff80000080898f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808991:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850
    if(pid==-1)return -1;
ffff800000808994:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000808998:	75 0a                	jne    ffff8000008089a4 <sys_fork+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850 (discriminator 1)
ffff80000080899a:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080899f:	e9 05 0a 00 00       	jmp    ffff8000008093a9 <sys_fork+0xa7a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852
    //首先完全复制
    task[pid]=*current;
ffff8000008089a4:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff8000008089ab:	ff ff ff 
ffff8000008089ae:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008089b2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008089b5:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008089bc:	ff ff ff 
ffff8000008089bf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008089c3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008089c6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008089c9:	48 98                	cdqe   
ffff8000008089cb:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008089d2:	48 01 d0             	add    rax,rdx
ffff8000008089d5:	48 89 c2             	mov    rdx,rax
ffff8000008089d8:	48 89 c8             	mov    rax,rcx
ffff8000008089db:	b9 54 03 00 00       	mov    ecx,0x354
ffff8000008089e0:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008089e3:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff8000008089e6:	89 ce                	mov    esi,ecx
ffff8000008089e8:	48 01 d6             	add    rsi,rdx
ffff8000008089eb:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
ffff8000008089ef:	89 ce                	mov    esi,ecx
ffff8000008089f1:	48 01 c6             	add    rsi,rax
ffff8000008089f4:	48 83 c6 08          	add    rsi,0x8
ffff8000008089f8:	48 8b 76 f0          	mov    rsi,QWORD PTR [rsi-0x10]
ffff8000008089fc:	48 89 77 f0          	mov    QWORD PTR [rdi-0x10],rsi
ffff800000808a00:	48 8d 7a 08          	lea    rdi,[rdx+0x8]
ffff800000808a04:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
ffff800000808a08:	48 29 fa             	sub    rdx,rdi
ffff800000808a0b:	48 29 d0             	sub    rax,rdx
ffff800000808a0e:	01 d1                	add    ecx,edx
ffff800000808a10:	83 e1 f8             	and    ecx,0xfffffff8
ffff800000808a13:	c1 e9 03             	shr    ecx,0x3
ffff800000808a16:	89 ca                	mov    edx,ecx
ffff800000808a18:	89 d2                	mov    edx,edx
ffff800000808a1a:	48 89 c6             	mov    rsi,rax
ffff800000808a1d:	48 89 d1             	mov    rcx,rdx
ffff800000808a20:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:853
    task[pid].pid=pids;
ffff800000808a23:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808a2a:	ff ff ff 
ffff800000808a2d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808a31:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808a34:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808a37:	48 98                	cdqe   
ffff800000808a39:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808a40:	48 01 c2             	add    rdx,rax
ffff800000808a43:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000808a46:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:860

//    asm volatile("mov %%r10,%0"::"m"(r->rip));
    // r->rip=current->regs.rip;

    // memcpy(&task[pid].tss,tss, sizeof(TSS));
    task[pid].stat=TASK_READY;
ffff800000808a48:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808a4f:	ff ff ff 
ffff800000808a52:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808a56:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808a59:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808a5c:	48 98                	cdqe   
ffff800000808a5e:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808a65:	48 01 d0             	add    rax,rdx
ffff800000808a68:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:861
    task[pid].parent_pid=current->pid;
ffff800000808a6f:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808a76:	ff ff ff 
ffff800000808a79:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808a7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808a80:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000808a87:	ff ff ff 
ffff800000808a8a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808a8e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808a91:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000808a94:	48 63 d2             	movsxd rdx,edx
ffff800000808a97:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000808a9e:	48 01 ca             	add    rdx,rcx
ffff800000808aa1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808aa3:	89 82 bc 00 00 00    	mov    DWORD PTR [rdx+0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
ffff800000808aa9:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808ab0:	ff ff ff 
ffff800000808ab3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808ab7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808aba:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808abd:	48 98                	cdqe   
ffff800000808abf:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808ac6:	48 01 d0             	add    rax,rdx
ffff800000808ac9:	48 05 34 03 00 00    	add    rax,0x334
ffff800000808acf:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000808ad3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808ad7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000808ade:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808ae2:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000808ae9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000808aea:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:864
    task[pid].child_procs=NULL;
ffff800000808aeb:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808af2:	ff ff ff 
ffff800000808af5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808af9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808afc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808aff:	48 98                	cdqe   
ffff800000808b01:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808b08:	48 01 d0             	add    rax,rdx
ffff800000808b0b:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000808b12:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865
    task[pid].node.data=&task[pid];
ffff800000808b16:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808b1d:	ff ff ff 
ffff800000808b20:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b24:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808b27:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808b2a:	48 98                	cdqe   
ffff800000808b2c:	48 69 d0 54 03 00 00 	imul   rdx,rax,0x354
ffff800000808b33:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808b3a:	ff ff ff 
ffff800000808b3d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b41:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000808b44:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808b47:	48 98                	cdqe   
ffff800000808b49:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808b50:	48 01 f0             	add    rax,rsi
ffff800000808b53:	48 01 ca             	add    rdx,rcx
ffff800000808b56:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:866
    if(!current->child_procs)
ffff800000808b5d:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808b64:	ff ff ff 
ffff800000808b67:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b6b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808b6e:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000808b75:	48 85 c0             	test   rax,rax
ffff800000808b78:	75 44                	jne    ffff800000808bbe <sys_fork+0x28f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:867
        current->child_procs=&task[pid].node;
ffff800000808b7a:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808b81:	ff ff ff 
ffff800000808b84:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b88:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808b8b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808b8e:	48 98                	cdqe   
ffff800000808b90:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808b97:	48 01 c2             	add    rdx,rax
ffff800000808b9a:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808ba1:	ff ff ff 
ffff800000808ba4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808ba8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808bab:	48 81 c2 34 03 00 00 	add    rdx,0x334
ffff800000808bb2:	48 89 90 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],rdx
ffff800000808bb9:	e9 85 01 00 00       	jmp    ffff800000808d43 <sys_fork+0x414>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:869
    else
        list_add(current->child_procs,&task[pid].node);
ffff800000808bbe:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808bc5:	ff ff ff 
ffff800000808bc8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808bcc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808bcf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808bd2:	48 98                	cdqe   
ffff800000808bd4:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808bdb:	48 01 d0             	add    rax,rdx
ffff800000808bde:	48 8d 90 34 03 00 00 	lea    rdx,[rax+0x334]
ffff800000808be5:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808bec:	ff ff ff 
ffff800000808bef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808bf3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808bf6:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000808bfd:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff800000808c01:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff800000808c05:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808c09:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808c0d:	48 85 c0             	test   rax,rax
ffff800000808c10:	75 58                	jne    ffff800000808c6a <sys_fork+0x33b>
ffff800000808c12:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808c16:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff800000808c1a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000808c1e:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000808c22:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000808c26:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000808c2a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808c2e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000808c32:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808c36:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff800000808c3a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000808c3d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808c41:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808c45:	48 85 c0             	test   rax,rax
ffff800000808c48:	74 0f                	je     ffff800000808c59 <sys_fork+0x32a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000808c4a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808c4e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808c52:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000808c56:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000808c59:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000808c5d:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000808c61:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000808c65:	e9 d9 00 00 00       	jmp    ffff800000808d43 <sys_fork+0x414>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff800000808c6a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808c6e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000808c75:	eb 2e                	jmp    ffff800000808ca5 <sys_fork+0x376>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff800000808c77:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808c7e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000808c82:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000808c86:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808c8a:	48 39 c2             	cmp    rdx,rax
ffff800000808c8d:	0f 84 af 00 00 00    	je     ffff800000808d42 <sys_fork+0x413>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000808c93:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808c9a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808c9e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff800000808ca5:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808cac:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808cb0:	48 85 c0             	test   rax,rax
ffff800000808cb3:	74 14                	je     ffff800000808cc9 <sys_fork+0x39a>
ffff800000808cb5:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808cbc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808cc0:	48 39 85 78 ff ff ff 	cmp    QWORD PTR [rbp-0x88],rax
ffff800000808cc7:	75 ae                	jne    ffff800000808c77 <sys_fork+0x348>
ffff800000808cc9:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808cd0:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffff800000808cd7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000808cdb:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000808ce2:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808ce9:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000808ced:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808cf4:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000808cf8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808cff:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff800000808d06:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000808d09:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808d10:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808d14:	48 85 c0             	test   rax,rax
ffff800000808d17:	74 15                	je     ffff800000808d2e <sys_fork+0x3ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000808d19:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808d20:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808d24:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff800000808d2b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000808d2e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808d35:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff800000808d3c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000808d40:	eb 01                	jmp    ffff800000808d43 <sys_fork+0x414>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff800000808d42:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:871

    task[pid].utime=0;
ffff800000808d43:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808d4a:	ff ff ff 
ffff800000808d4d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808d51:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808d54:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808d57:	48 98                	cdqe   
ffff800000808d59:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808d60:	48 01 d0             	add    rax,rdx
ffff800000808d63:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:874

    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
ffff800000808d6a:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808d71:	ff ff ff 
ffff800000808d74:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808d78:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808d7b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808d7e:	48 98                	cdqe   
ffff800000808d80:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808d87:	48 01 c2             	add    rdx,rax
ffff800000808d8a:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808d91:	ff ff ff 
ffff800000808d94:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808d98:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808d9b:	48 89 d6             	mov    rsi,rdx
ffff800000808d9e:	48 89 c7             	mov    rdi,rax
ffff800000808da1:	49 89 df             	mov    r15,rbx
ffff800000808da4:	48 b8 d7 6c fe ff ff 	movabs rax,0xfffffffffffe6cd7
ffff800000808dab:	ff ff ff 
ffff800000808dae:	48 01 d8             	add    rax,rbx
ffff800000808db1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:879
    
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000808db3:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808dba:	ff ff ff 
ffff800000808dbd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808dc1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808dc4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808dc7:	48 98                	cdqe   
ffff800000808dc9:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808dd0:	48 01 d0             	add    rax,rdx
ffff800000808dd3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000808dd7:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000808ddd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:880
    addr_t tmpla=KNL_BASE+0x80000000;
ffff800000808de1:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff800000808de8:	80 ff ff 
ffff800000808deb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000808def:	e9 d1 00 00 00       	jmp    ffff800000808ec5 <sys_fork+0x596>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:882 (discriminator 2)
        addr_t new_stkpg= pmalloc();
ffff800000808df4:	49 89 df             	mov    r15,rbx
ffff800000808df7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808dfc:	48 ba eb 02 fe ff ff 	movabs rdx,0xfffffffffffe02eb
ffff800000808e03:	ff ff ff 
ffff800000808e06:	48 01 da             	add    rdx,rbx
ffff800000808e09:	ff d2                	call   rdx
ffff800000808e0b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:883 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000808e0f:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808e16:	ff ff ff 
ffff800000808e19:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808e1d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808e20:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000808e27:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000808e2b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808e2f:	48 89 d1             	mov    rcx,rdx
ffff800000808e32:	ba 03 00 00 00       	mov    edx,0x3
ffff800000808e37:	48 89 c7             	mov    rdi,rax
ffff800000808e3a:	49 89 df             	mov    r15,rbx
ffff800000808e3d:	48 b8 62 f1 fd ff ff 	movabs rax,0xfffffffffffdf162
ffff800000808e44:	ff ff ff 
ffff800000808e47:	48 01 d8             	add    rax,rbx
ffff800000808e4a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:884 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000808e4c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000808e50:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808e54:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808e59:	48 89 ce             	mov    rsi,rcx
ffff800000808e5c:	48 89 c7             	mov    rdi,rax
ffff800000808e5f:	49 89 df             	mov    r15,rbx
ffff800000808e62:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff800000808e69:	ff ff ff 
ffff800000808e6c:	48 01 d8             	add    rax,rbx
ffff800000808e6f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:887 (discriminator 2)
        
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000808e71:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808e78:	ff ff ff 
ffff800000808e7b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808e7f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808e82:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808e85:	48 98                	cdqe   
ffff800000808e87:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808e8e:	48 01 d0             	add    rax,rdx
ffff800000808e91:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000808e98:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000808e9c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808ea0:	48 89 d1             	mov    rcx,rdx
ffff800000808ea3:	ba 07 00 00 00       	mov    edx,0x7
ffff800000808ea8:	48 89 c7             	mov    rdi,rax
ffff800000808eab:	49 89 df             	mov    r15,rbx
ffff800000808eae:	48 b8 62 f1 fd ff ff 	movabs rax,0xfffffffffffdf162
ffff800000808eb5:	ff ff ff 
ffff800000808eb8:	48 01 d8             	add    rax,rbx
ffff800000808ebb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000808ebd:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
ffff800000808ec4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881 (discriminator 1)
ffff800000808ec5:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808ecc:	ff ff ff 
ffff800000808ecf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808ed3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808ed6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808ed9:	48 98                	cdqe   
ffff800000808edb:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808ee2:	48 01 d0             	add    rax,rdx
ffff800000808ee5:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000808ee9:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff800000808eed:	0f 83 01 ff ff ff    	jae    ffff800000808df4 <sys_fork+0x4c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889
    }
    if(task[pid].mem_struct.stack_top<=task[pid].mem_struct.stack_bottom){
ffff800000808ef3:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808efa:	ff ff ff 
ffff800000808efd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f01:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808f04:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808f07:	48 98                	cdqe   
ffff800000808f09:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808f10:	48 01 d0             	add    rax,rdx
ffff800000808f13:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff800000808f17:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808f1e:	ff ff ff 
ffff800000808f21:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f25:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808f28:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808f2b:	48 98                	cdqe   
ffff800000808f2d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808f34:	48 01 c8             	add    rax,rcx
ffff800000808f37:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000808f3b:	48 39 c2             	cmp    rdx,rax
ffff800000808f3e:	0f 87 bd 00 00 00    	ja     ffff800000809001 <sys_fork+0x6d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:892
        //父进程没有栈空间（一般是不可能的，这个几乎就是为了内核进程fork而写）
        //开辟一页空栈。
        addr_t new_stkpg= (addr_t) pmalloc();
ffff800000808f44:	49 89 df             	mov    r15,rbx
ffff800000808f47:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808f4c:	48 ba eb 02 fe ff ff 	movabs rdx,0xfffffffffffe02eb
ffff800000808f53:	ff ff ff 
ffff800000808f56:	48 01 da             	add    rdx,rbx
ffff800000808f59:	ff d2                	call   rdx
ffff800000808f5b:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:893
        stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000808f5f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808f66:	ff ff ff 
ffff800000808f69:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f6d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808f70:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808f73:	48 98                	cdqe   
ffff800000808f75:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808f7c:	48 01 d0             	add    rax,rdx
ffff800000808f7f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000808f83:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000808f89:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:895
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000808f8d:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808f94:	ff ff ff 
ffff800000808f97:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f9b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808f9e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808fa1:	48 98                	cdqe   
ffff800000808fa3:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808faa:	48 01 d0             	add    rax,rdx
ffff800000808fad:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000808fb4:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000808fb8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000808fbc:	48 89 d1             	mov    rcx,rdx
ffff800000808fbf:	ba 07 00 00 00       	mov    edx,0x7
ffff800000808fc4:	48 89 c7             	mov    rdi,rax
ffff800000808fc7:	49 89 df             	mov    r15,rbx
ffff800000808fca:	48 b8 62 f1 fd ff ff 	movabs rax,0xfffffffffffdf162
ffff800000808fd1:	ff ff ff 
ffff800000808fd4:	48 01 d8             	add    rax,rbx
ffff800000808fd7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897
        //给新进程分配一页栈
        task[pid].mem_struct.stack_bottom=stk;
ffff800000808fd9:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808fe0:	ff ff ff 
ffff800000808fe3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808fe7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808fea:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808fed:	48 98                	cdqe   
ffff800000808fef:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808ff6:	48 01 c2             	add    rdx,rax
ffff800000808ff9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808ffd:	48 89 42 38          	mov    QWORD PTR [rdx+0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:903
        //给这页新的栈填上恢复上下文需要的内容
        
    }
    //中断使用的栈空间
    //ist一页就够
    addr_t new_stkpg= kmalloc();
ffff800000809001:	49 89 df             	mov    r15,rbx
ffff800000809004:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809009:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000809010:	ff ff ff 
ffff800000809013:	48 01 da             	add    rdx,rbx
ffff800000809016:	ff d2                	call   rdx
ffff800000809018:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:904
    memcpy(new_stkpg,current->tss.ists[0]-PAGE_4K_SIZE,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff80000080901c:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000809023:	ff ff ff 
ffff800000809026:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080902a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080902d:	48 8b 80 1c 02 00 00 	mov    rax,QWORD PTR [rax+0x21c]
ffff800000809034:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff80000080903a:	48 89 c1             	mov    rcx,rax
ffff80000080903d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809041:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809046:	48 89 ce             	mov    rsi,rcx
ffff800000809049:	48 89 c7             	mov    rdi,rax
ffff80000080904c:	49 89 df             	mov    r15,rbx
ffff80000080904f:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff800000809056:	ff ff ff 
ffff800000809059:	48 01 d8             	add    rax,rbx
ffff80000080905c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:905
    stack_store_regs* ctx_dup=new_stkpg+PAGE_4K_SIZE-sizeof(stack_store_regs);//拷贝的上下文
ffff80000080905e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809062:	48 05 58 0f 00 00    	add    rax,0xf58
ffff800000809068:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:906
    ctx_dup->rax=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
ffff80000080906c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809070:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000809077:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:907
    task[pid].regs.rip=clock_ret;
ffff800000809078:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080907f:	ff ff ff 
ffff800000809082:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809086:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809089:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080908c:	48 98                	cdqe   
ffff80000080908e:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809095:	48 01 d0             	add    rax,rdx
ffff800000809098:	48 ba b0 ff ff ff ff 	movabs rdx,0xffffffffffffffb0
ffff80000080909f:	ff ff ff 
ffff8000008090a2:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008090a6:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:908
    task[pid].regs.rsp=ctx_dup;
ffff8000008090ad:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008090b4:	ff ff ff 
ffff8000008090b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008090bb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008090be:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008090c1:	48 98                	cdqe   
ffff8000008090c3:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008090ca:	48 01 c2             	add    rdx,rax
ffff8000008090cd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008090d1:	48 89 82 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:909
    task[pid].tss.ists[0]=new_stkpg+PAGE_4K_SIZE;
ffff8000008090d8:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008090df:	ff ff ff 
ffff8000008090e2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008090e6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008090e9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008090ec:	48 98                	cdqe   
ffff8000008090ee:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008090f5:	48 01 d0             	add    rax,rdx
ffff8000008090f8:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008090fc:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000809103:	48 89 90 1c 02 00 00 	mov    QWORD PTR [rax+0x21c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:910
    task[pid].tss.ists[1]=new_stkpg+PAGE_4K_SIZE;
ffff80000080910a:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809111:	ff ff ff 
ffff800000809114:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809118:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080911b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080911e:	48 98                	cdqe   
ffff800000809120:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809127:	48 01 d0             	add    rax,rdx
ffff80000080912a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080912e:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000809135:	48 89 90 24 02 00 00 	mov    QWORD PTR [rax+0x224],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:911
    task[pid].tss.ists[2]=new_stkpg+PAGE_4K_SIZE;
ffff80000080913c:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809143:	ff ff ff 
ffff800000809146:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080914a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080914d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809150:	48 98                	cdqe   
ffff800000809152:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809159:	48 01 d0             	add    rax,rdx
ffff80000080915c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000809160:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000809167:	48 89 90 2c 02 00 00 	mov    QWORD PTR [rax+0x22c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:912
    task[pid].tss.ists[3]=new_stkpg+PAGE_4K_SIZE;
ffff80000080916e:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809175:	ff ff ff 
ffff800000809178:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080917c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080917f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809182:	48 98                	cdqe   
ffff800000809184:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080918b:	48 01 d0             	add    rax,rdx
ffff80000080918e:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000809192:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000809199:	48 89 90 34 02 00 00 	mov    QWORD PTR [rax+0x234],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:913
    task[pid].tss.ists[4]=new_stkpg+PAGE_4K_SIZE;
ffff8000008091a0:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008091a7:	ff ff ff 
ffff8000008091aa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008091ae:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008091b1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008091b4:	48 98                	cdqe   
ffff8000008091b6:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008091bd:	48 01 d0             	add    rax,rdx
ffff8000008091c0:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008091c4:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff8000008091cb:	48 89 90 3c 02 00 00 	mov    QWORD PTR [rax+0x23c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:914
    task[pid].tss.ists[5]=new_stkpg+PAGE_4K_SIZE;
ffff8000008091d2:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008091d9:	ff ff ff 
ffff8000008091dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008091e0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008091e3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008091e6:	48 98                	cdqe   
ffff8000008091e8:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008091ef:	48 01 d0             	add    rax,rdx
ffff8000008091f2:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008091f6:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff8000008091fd:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:915
    task[pid].tss.ists[6]=new_stkpg+PAGE_4K_SIZE;
ffff800000809204:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080920b:	ff ff ff 
ffff80000080920e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809212:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809215:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809218:	48 98                	cdqe   
ffff80000080921a:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809221:	48 01 d0             	add    rax,rdx
ffff800000809224:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000809228:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff80000080922f:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918

    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
ffff800000809236:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080923d:	ff ff ff 
ffff800000809240:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809244:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809247:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080924a:	48 98                	cdqe   
ffff80000080924c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809253:	48 01 d0             	add    rax,rdx
ffff800000809256:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080925a:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000809260:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000809264:	e9 d1 00 00 00       	jmp    ffff80000080933a <sys_fork+0xa0b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920 (discriminator 2)
        addr_t new_hppg= pmalloc();
ffff800000809269:	49 89 df             	mov    r15,rbx
ffff80000080926c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809271:	48 ba eb 02 fe ff ff 	movabs rdx,0xfffffffffffe02eb
ffff800000809278:	ff ff ff 
ffff80000080927b:	48 01 da             	add    rdx,rbx
ffff80000080927e:	ff d2                	call   rdx
ffff800000809280:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:921 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000809284:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080928b:	ff ff ff 
ffff80000080928e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809292:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809295:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080929c:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008092a0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008092a4:	48 89 d1             	mov    rcx,rdx
ffff8000008092a7:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008092ac:	48 89 c7             	mov    rdi,rax
ffff8000008092af:	49 89 df             	mov    r15,rbx
ffff8000008092b2:	48 b8 62 f1 fd ff ff 	movabs rax,0xfffffffffffdf162
ffff8000008092b9:	ff ff ff 
ffff8000008092bc:	48 01 d8             	add    rax,rbx
ffff8000008092bf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff8000008092c1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff8000008092c5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008092c9:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008092ce:	48 89 ce             	mov    rsi,rcx
ffff8000008092d1:	48 89 c7             	mov    rdi,rax
ffff8000008092d4:	49 89 df             	mov    r15,rbx
ffff8000008092d7:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff8000008092de:	ff ff ff 
ffff8000008092e1:	48 01 d8             	add    rax,rbx
ffff8000008092e4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:924 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff8000008092e6:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008092ed:	ff ff ff 
ffff8000008092f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008092f4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008092f7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008092fa:	48 98                	cdqe   
ffff8000008092fc:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809303:	48 01 d0             	add    rax,rdx
ffff800000809306:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080930d:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000809311:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809315:	48 89 d1             	mov    rcx,rdx
ffff800000809318:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080931d:	48 89 c7             	mov    rdi,rax
ffff800000809320:	49 89 df             	mov    r15,rbx
ffff800000809323:	48 b8 62 f1 fd ff ff 	movabs rax,0xfffffffffffdf162
ffff80000080932a:	ff ff ff 
ffff80000080932d:	48 01 d8             	add    rax,rbx
ffff800000809330:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000809332:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
ffff800000809339:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919 (discriminator 1)
ffff80000080933a:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809341:	ff ff ff 
ffff800000809344:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809348:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080934b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080934e:	48 98                	cdqe   
ffff800000809350:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809357:	48 01 d0             	add    rax,rdx
ffff80000080935a:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080935e:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000809362:	0f 83 01 ff ff ff    	jae    ffff800000809269 <sys_fork+0x93a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:926
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
ffff800000809368:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080936f:	ff ff ff 
ffff800000809372:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809376:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809379:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000809380:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809384:	48 89 d1             	mov    rcx,rdx
ffff800000809387:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080938c:	48 89 c6             	mov    rsi,rax
ffff80000080938f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000809394:	49 89 df             	mov    r15,rbx
ffff800000809397:	48 b8 62 f1 fd ff ff 	movabs rax,0xfffffffffffdf162
ffff80000080939e:	ff ff ff 
ffff8000008093a1:	48 01 d8             	add    rax,rbx
ffff8000008093a4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:932
    


    //如果父进程没有堆，不开辟。留给load_xx函数。
    //父进程运行到这里
    return pid;
ffff8000008093a6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:933
}
ffff8000008093a9:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff8000008093b0:	5b                   	pop    rbx
ffff8000008093b1:	41 5f                	pop    r15
ffff8000008093b3:	5d                   	pop    rbp
ffff8000008093b4:	c3                   	ret    

ffff8000008093b5 <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:935
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
ffff8000008093b5:	f3 0f 1e fa          	endbr64 
ffff8000008093b9:	55                   	push   rbp
ffff8000008093ba:	48 89 e5             	mov    rbp,rsp
ffff8000008093bd:	41 57                	push   r15
ffff8000008093bf:	53                   	push   rbx
ffff8000008093c0:	48 83 ec 50          	sub    rsp,0x50
ffff8000008093c4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008093c4 <release_mmap+0xf>
ffff8000008093cb:	49 bb bc 96 01 00 00 	movabs r11,0x196bc
ffff8000008093d2:	00 00 00 
ffff8000008093d5:	4c 01 db             	add    rbx,r11
ffff8000008093d8:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936
    page_item * pml4p=p->pml4;
ffff8000008093dc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008093e0:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff8000008093e7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:938
    //复制pdpt
    page_item *pml4e= pml4p;
ffff8000008093eb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008093ef:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff8000008093f3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008093fa:	e9 40 03 00 00       	jmp    ffff80000080973f <release_mmap+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:941
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff8000008093ff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809402:	48 98                	cdqe   
ffff800000809404:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080940b:	00 
ffff80000080940c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809410:	48 01 d0             	add    rax,rdx
ffff800000809413:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809416:	83 e0 01             	and    eax,0x1
ffff800000809419:	48 85 c0             	test   rax,rax
ffff80000080941c:	0f 84 19 03 00 00    	je     ffff80000080973b <release_mmap+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK|KNL_BASE;
ffff800000809422:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809425:	48 98                	cdqe   
ffff800000809427:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080942e:	00 
ffff80000080942f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809433:	48 01 d0             	add    rax,rdx
ffff800000809436:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809439:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000809440:	7f 00 00 
ffff800000809443:	48 21 c2             	and    rdx,rax
ffff800000809446:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080944d:	80 ff ff 
ffff800000809450:	48 09 d0             	or     rax,rdx
ffff800000809453:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:943
            for(int j=0;j<512;j++)
ffff800000809457:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080945e:	e9 85 02 00 00       	jmp    ffff8000008096e8 <release_mmap+0x333>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:945
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff800000809463:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809466:	48 98                	cdqe   
ffff800000809468:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080946f:	00 
ffff800000809470:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809474:	48 01 d0             	add    rax,rdx
ffff800000809477:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080947a:	83 e0 01             	and    eax,0x1
ffff80000080947d:	48 85 c0             	test   rax,rax
ffff800000809480:	0f 84 5e 02 00 00    	je     ffff8000008096e4 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:945 (discriminator 1)
ffff800000809486:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809489:	48 98                	cdqe   
ffff80000080948b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809492:	00 
ffff800000809493:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809497:	48 01 d0             	add    rax,rdx
ffff80000080949a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080949d:	25 80 00 00 00       	and    eax,0x80
ffff8000008094a2:	48 85 c0             	test   rax,rax
ffff8000008094a5:	0f 85 39 02 00 00    	jne    ffff8000008096e4 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:946
                    page_item *pde=pdpte[j]&PAGE_4K_MASK|KNL_BASE;
ffff8000008094ab:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008094ae:	48 98                	cdqe   
ffff8000008094b0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008094b7:	00 
ffff8000008094b8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008094bc:	48 01 d0             	add    rax,rdx
ffff8000008094bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008094c2:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008094c9:	7f 00 00 
ffff8000008094cc:	48 21 c2             	and    rdx,rax
ffff8000008094cf:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008094d6:	80 ff ff 
ffff8000008094d9:	48 09 d0             	or     rax,rdx
ffff8000008094dc:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:947
                    for(int k=0;k<512;k++)
ffff8000008094e0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008094e7:	e9 a5 01 00 00       	jmp    ffff800000809691 <release_mmap+0x2dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:949
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff8000008094ec:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008094ef:	48 98                	cdqe   
ffff8000008094f1:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008094f8:	00 
ffff8000008094f9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008094fd:	48 01 d0             	add    rax,rdx
ffff800000809500:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809503:	83 e0 01             	and    eax,0x1
ffff800000809506:	48 85 c0             	test   rax,rax
ffff800000809509:	0f 84 09 01 00 00    	je     ffff800000809618 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:949 (discriminator 1)
ffff80000080950f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809512:	48 98                	cdqe   
ffff800000809514:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080951b:	00 
ffff80000080951c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809520:	48 01 d0             	add    rax,rdx
ffff800000809523:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809526:	25 80 00 00 00       	and    eax,0x80
ffff80000080952b:	48 85 c0             	test   rax,rax
ffff80000080952e:	0f 85 e4 00 00 00    	jne    ffff800000809618 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:950
                            page_item *pte=pde[k]&PAGE_4K_MASK|KNL_BASE;
ffff800000809534:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809537:	48 98                	cdqe   
ffff800000809539:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809540:	00 
ffff800000809541:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809545:	48 01 d0             	add    rax,rdx
ffff800000809548:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080954b:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000809552:	7f 00 00 
ffff800000809555:	48 21 c2             	and    rdx,rax
ffff800000809558:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080955f:	80 ff ff 
ffff800000809562:	48 09 d0             	or     rax,rdx
ffff800000809565:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951
                            for(int l=0;l<512;l++){
ffff800000809569:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000809570:	eb 55                	jmp    ffff8000008095c7 <release_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952
                                if(pte[l]&PAGE_PRESENT){
ffff800000809572:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809575:	48 98                	cdqe   
ffff800000809577:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080957e:	00 
ffff80000080957f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809583:	48 01 d0             	add    rax,rdx
ffff800000809586:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809589:	83 e0 01             	and    eax,0x1
ffff80000080958c:	48 85 c0             	test   rax,rax
ffff80000080958f:	74 32                	je     ffff8000008095c3 <release_mmap+0x20e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955
                                    //释放申请的物理内存
                                    //TODO:这里有一个问题：目前fork时候堆栈空间使用的是vmalloc内存，这样的话free_page是释放不了的。
                                    free_page(pte[l]&PAGE_4K_MASK);
ffff800000809591:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809594:	48 98                	cdqe   
ffff800000809596:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080959d:	00 
ffff80000080959e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008095a2:	48 01 d0             	add    rax,rdx
ffff8000008095a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008095a8:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008095ae:	48 89 c7             	mov    rdi,rax
ffff8000008095b1:	49 89 df             	mov    r15,rbx
ffff8000008095b4:	48 b8 7b 03 fe ff ff 	movabs rax,0xfffffffffffe037b
ffff8000008095bb:	ff ff ff 
ffff8000008095be:	48 01 d8             	add    rax,rbx
ffff8000008095c1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951 (discriminator 2)
                            for(int l=0;l<512;l++){
ffff8000008095c3:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951 (discriminator 1)
ffff8000008095c7:	81 7d e0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x20],0x1ff
ffff8000008095ce:	7e a2                	jle    ffff800000809572 <release_mmap+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK|KNL_BASE);
ffff8000008095d0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008095d3:	48 98                	cdqe   
ffff8000008095d5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008095dc:	00 
ffff8000008095dd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008095e1:	48 01 d0             	add    rax,rdx
ffff8000008095e4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008095e7:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008095ee:	7f 00 00 
ffff8000008095f1:	48 21 c2             	and    rdx,rax
ffff8000008095f4:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008095fb:	80 ff ff 
ffff8000008095fe:	48 09 d0             	or     rax,rdx
ffff800000809601:	48 89 c7             	mov    rdi,rax
ffff800000809604:	49 89 df             	mov    r15,rbx
ffff800000809607:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080960e:	ff ff ff 
ffff800000809611:	48 01 d8             	add    rax,rbx
ffff800000809614:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:949
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff800000809616:	eb 75                	jmp    ffff80000080968d <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:960
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k] & PDE_2MB)){
ffff800000809618:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080961b:	48 98                	cdqe   
ffff80000080961d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809624:	00 
ffff800000809625:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809629:	48 01 d0             	add    rax,rdx
ffff80000080962c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080962f:	83 e0 01             	and    eax,0x1
ffff800000809632:	48 85 c0             	test   rax,rax
ffff800000809635:	74 56                	je     ffff80000080968d <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:960 (discriminator 1)
ffff800000809637:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080963a:	48 98                	cdqe   
ffff80000080963c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809643:	00 
ffff800000809644:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809648:	48 01 d0             	add    rax,rdx
ffff80000080964b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080964e:	25 80 00 00 00       	and    eax,0x80
ffff800000809653:	48 85 c0             	test   rax,rax
ffff800000809656:	74 35                	je     ffff80000080968d <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:962
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
ffff800000809658:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080965b:	48 98                	cdqe   
ffff80000080965d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809664:	00 
ffff800000809665:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809669:	48 01 d0             	add    rax,rdx
ffff80000080966c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080966f:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000809674:	be 00 02 00 00       	mov    esi,0x200
ffff800000809679:	89 c7                	mov    edi,eax
ffff80000080967b:	49 89 df             	mov    r15,rbx
ffff80000080967e:	48 b8 2d 04 fe ff ff 	movabs rax,0xfffffffffffe042d
ffff800000809685:	ff ff ff 
ffff800000809688:	48 01 d8             	add    rax,rbx
ffff80000080968b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:947 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff80000080968d:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:947 (discriminator 1)
ffff800000809691:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000809698:	0f 8e 4e fe ff ff    	jle    ffff8000008094ec <release_mmap+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:966
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK|KNL_BASE);
ffff80000080969e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008096a1:	48 98                	cdqe   
ffff8000008096a3:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008096aa:	00 
ffff8000008096ab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008096af:	48 01 d0             	add    rax,rdx
ffff8000008096b2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008096b5:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008096bc:	7f 00 00 
ffff8000008096bf:	48 21 c2             	and    rdx,rax
ffff8000008096c2:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008096c9:	80 ff ff 
ffff8000008096cc:	48 09 d0             	or     rax,rdx
ffff8000008096cf:	48 89 c7             	mov    rdi,rax
ffff8000008096d2:	49 89 df             	mov    r15,rbx
ffff8000008096d5:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff8000008096dc:	ff ff ff 
ffff8000008096df:	48 01 d8             	add    rax,rbx
ffff8000008096e2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:943 (discriminator 2)
            for(int j=0;j<512;j++)
ffff8000008096e4:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:943 (discriminator 1)
ffff8000008096e8:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff8000008096ef:	0f 8e 6e fd ff ff    	jle    ffff800000809463 <release_mmap+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:971
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK|KNL_BASE);
ffff8000008096f5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008096f8:	48 98                	cdqe   
ffff8000008096fa:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809701:	00 
ffff800000809702:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809706:	48 01 d0             	add    rax,rdx
ffff800000809709:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080970c:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000809713:	7f 00 00 
ffff800000809716:	48 21 c2             	and    rdx,rax
ffff800000809719:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000809720:	80 ff ff 
ffff800000809723:	48 09 d0             	or     rax,rdx
ffff800000809726:	48 89 c7             	mov    rdi,rax
ffff800000809729:	49 89 df             	mov    r15,rbx
ffff80000080972c:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000809733:	ff ff ff 
ffff800000809736:	48 01 d8             	add    rax,rbx
ffff800000809739:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939 (discriminator 2)
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff80000080973b:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939 (discriminator 1)
ffff80000080973f:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffff800000809746:	0f 8e b3 fc ff ff    	jle    ffff8000008093ff <release_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:974
        }
    }
}
ffff80000080974c:	90                   	nop
ffff80000080974d:	90                   	nop
ffff80000080974e:	48 83 c4 50          	add    rsp,0x50
ffff800000809752:	5b                   	pop    rbx
ffff800000809753:	41 5f                	pop    r15
ffff800000809755:	5d                   	pop    rbp
ffff800000809756:	c3                   	ret    

ffff800000809757 <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:975
void copy_mmap(struct process* from, struct process *to){
ffff800000809757:	f3 0f 1e fa          	endbr64 
ffff80000080975b:	55                   	push   rbp
ffff80000080975c:	48 89 e5             	mov    rbp,rsp
ffff80000080975f:	41 57                	push   r15
ffff800000809761:	53                   	push   rbx
ffff800000809762:	48 83 ec 70          	sub    rsp,0x70
ffff800000809766:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809766 <copy_mmap+0xf>
ffff80000080976d:	49 bb 1a 93 01 00 00 	movabs r11,0x1931a
ffff800000809774:	00 00 00 
ffff800000809777:	4c 01 db             	add    rbx,r11
ffff80000080977a:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080977e:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976
    page_item * pml4p= kmalloc();
ffff800000809782:	49 89 df             	mov    r15,rbx
ffff800000809785:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080978a:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000809791:	ff ff ff 
ffff800000809794:	48 01 da             	add    rdx,rbx
ffff800000809797:	ff d2                	call   rdx
ffff800000809799:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:977
    memcpy(pml4p, (unsigned char *) from->pml4, PAGE_4K_SIZE);//复制pml4
ffff80000080979d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008097a1:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff8000008097a8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008097ac:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008097b1:	48 89 ce             	mov    rsi,rcx
ffff8000008097b4:	48 89 c7             	mov    rdi,rax
ffff8000008097b7:	49 89 df             	mov    r15,rbx
ffff8000008097ba:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff8000008097c1:	ff ff ff 
ffff8000008097c4:	48 01 d8             	add    rax,rbx
ffff8000008097c7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:978
    to->regs.cr3=(unsigned long)pml4p&~KNL_BASE;
ffff8000008097c9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008097cd:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff8000008097d4:	7f 00 00 
ffff8000008097d7:	48 21 c2             	and    rdx,rax
ffff8000008097da:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008097de:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:979
    to->pml4=pml4p;
ffff8000008097e5:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008097e9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008097ed:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:982
    //复制pdpt

    page_item *pml4e= pml4p;
ffff8000008097f4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008097f8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983
    for(int i=0;i<512;i++)
ffff8000008097fc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000809803:	e9 0e 03 00 00       	jmp    ffff800000809b16 <copy_mmap+0x3bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:985
    {
        if((pml4e[i]&PAGE_PRESENT)==0)
ffff800000809808:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080980b:	48 98                	cdqe   
ffff80000080980d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809814:	00 
ffff800000809815:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809819:	48 01 d0             	add    rax,rdx
ffff80000080981c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080981f:	83 e0 01             	and    eax,0x1
ffff800000809822:	48 85 c0             	test   rax,rax
ffff800000809825:	0f 84 e6 02 00 00    	je     ffff800000809b11 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:987
            continue;
        addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080982b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080982e:	48 98                	cdqe   
ffff800000809830:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809837:	00 
ffff800000809838:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080983c:	48 01 d0             	add    rax,rdx
ffff80000080983f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809842:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:988
        addr_t m4=kmalloc();
ffff800000809846:	49 89 df             	mov    r15,rbx
ffff800000809849:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080984e:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000809855:	ff ff ff 
ffff800000809858:	48 01 da             	add    rdx,rbx
ffff80000080985b:	ff d2                	call   rdx
ffff80000080985d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:989
        pml4e[i]= (m4&~KNL_BASE) | (old_data & ~PAGE_4K_MASK);
ffff800000809861:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000809868:	7f 00 00 
ffff80000080986b:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff80000080986f:	48 89 c2             	mov    rdx,rax
ffff800000809872:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809876:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080987b:	48 89 c1             	mov    rcx,rax
ffff80000080987e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809881:	48 98                	cdqe   
ffff800000809883:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff80000080988a:	00 
ffff80000080988b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080988f:	48 01 f0             	add    rax,rsi
ffff800000809892:	48 09 ca             	or     rdx,rcx
ffff800000809895:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990
        memcpy((unsigned char *) m4, old_data & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000809898:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff80000080989f:	7f 00 00 
ffff8000008098a2:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
ffff8000008098a6:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008098ad:	80 ff ff 
ffff8000008098b0:	48 09 d0             	or     rax,rdx
ffff8000008098b3:	48 89 c1             	mov    rcx,rax
ffff8000008098b6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008098ba:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008098bf:	48 89 ce             	mov    rsi,rcx
ffff8000008098c2:	48 89 c7             	mov    rdi,rax
ffff8000008098c5:	49 89 df             	mov    r15,rbx
ffff8000008098c8:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff8000008098cf:	ff ff ff 
ffff8000008098d2:	48 01 d8             	add    rax,rbx
ffff8000008098d5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
        page_item *pdpte= (page_item *) m4;
ffff8000008098d7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008098db:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992
        for(int j=0;j<512;j++)
ffff8000008098df:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008098e6:	e9 17 02 00 00       	jmp    ffff800000809b02 <copy_mmap+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:994
        {
            if((pdpte[j]&PAGE_PRESENT)==0||(pdpte[j]&PDPTE_1GB)!=0)
ffff8000008098eb:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008098ee:	48 98                	cdqe   
ffff8000008098f0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008098f7:	00 
ffff8000008098f8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008098fc:	48 01 d0             	add    rax,rdx
ffff8000008098ff:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809902:	83 e0 01             	and    eax,0x1
ffff800000809905:	48 85 c0             	test   rax,rax
ffff800000809908:	0f 84 ef 01 00 00    	je     ffff800000809afd <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:994 (discriminator 2)
ffff80000080990e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809911:	48 98                	cdqe   
ffff800000809913:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080991a:	00 
ffff80000080991b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080991f:	48 01 d0             	add    rax,rdx
ffff800000809922:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809925:	25 80 00 00 00       	and    eax,0x80
ffff80000080992a:	48 85 c0             	test   rax,rax
ffff80000080992d:	0f 85 ca 01 00 00    	jne    ffff800000809afd <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:996
                continue;
            addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000809933:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809936:	48 98                	cdqe   
ffff800000809938:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080993f:	00 
ffff800000809940:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809944:	48 01 d0             	add    rax,rdx
ffff800000809947:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080994a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:997
            addr_t m3=kmalloc();
ffff80000080994e:	49 89 df             	mov    r15,rbx
ffff800000809951:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809956:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000080995d:	ff ff ff 
ffff800000809960:	48 01 da             	add    rdx,rbx
ffff800000809963:	ff d2                	call   rdx
ffff800000809965:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:998
            pdpte[j]= (m3&~KNL_BASE) | (old_data2 & ~PAGE_4K_MASK);
ffff800000809969:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000809970:	7f 00 00 
ffff800000809973:	48 23 45 a8          	and    rax,QWORD PTR [rbp-0x58]
ffff800000809977:	48 89 c2             	mov    rdx,rax
ffff80000080997a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080997e:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000809983:	48 89 c1             	mov    rcx,rax
ffff800000809986:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809989:	48 98                	cdqe   
ffff80000080998b:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000809992:	00 
ffff800000809993:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809997:	48 01 f0             	add    rax,rsi
ffff80000080999a:	48 09 ca             	or     rdx,rcx
ffff80000080999d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999
            memcpy((unsigned char *) m3, old_data2 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008099a0:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008099a7:	7f 00 00 
ffff8000008099aa:	48 23 45 b0          	and    rax,QWORD PTR [rbp-0x50]
ffff8000008099ae:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008099b5:	80 ff ff 
ffff8000008099b8:	48 09 d0             	or     rax,rdx
ffff8000008099bb:	48 89 c1             	mov    rcx,rax
ffff8000008099be:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008099c2:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008099c7:	48 89 ce             	mov    rsi,rcx
ffff8000008099ca:	48 89 c7             	mov    rdi,rax
ffff8000008099cd:	49 89 df             	mov    r15,rbx
ffff8000008099d0:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff8000008099d7:	ff ff ff 
ffff8000008099da:	48 01 d8             	add    rax,rbx
ffff8000008099dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1000
            page_item *pde= (page_item *) m3;
ffff8000008099df:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008099e3:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001
            for(int k=0;k<512;k++)
ffff8000008099e7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008099ee:	e9 fb 00 00 00       	jmp    ffff800000809aee <copy_mmap+0x397>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003
            {
                if((pde[j]&PAGE_PRESENT)==0||(pde[j]&PDE_2MB)!=0)
ffff8000008099f3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008099f6:	48 98                	cdqe   
ffff8000008099f8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008099ff:	00 
ffff800000809a00:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000809a04:	48 01 d0             	add    rax,rdx
ffff800000809a07:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a0a:	83 e0 01             	and    eax,0x1
ffff800000809a0d:	48 85 c0             	test   rax,rax
ffff800000809a10:	0f 84 d3 00 00 00    	je     ffff800000809ae9 <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003 (discriminator 2)
ffff800000809a16:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809a19:	48 98                	cdqe   
ffff800000809a1b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809a22:	00 
ffff800000809a23:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000809a27:	48 01 d0             	add    rax,rdx
ffff800000809a2a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a2d:	25 80 00 00 00       	and    eax,0x80
ffff800000809a32:	48 85 c0             	test   rax,rax
ffff800000809a35:	0f 85 ae 00 00 00    	jne    ffff800000809ae9 <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005
                    continue;
                addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000809a3b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809a3e:	48 98                	cdqe   
ffff800000809a40:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809a47:	00 
ffff800000809a48:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000809a4c:	48 01 d0             	add    rax,rdx
ffff800000809a4f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a52:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1006
                addr_t m2=kmalloc();
ffff800000809a56:	49 89 df             	mov    r15,rbx
ffff800000809a59:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809a5e:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000809a65:	ff ff ff 
ffff800000809a68:	48 01 da             	add    rdx,rbx
ffff800000809a6b:	ff d2                	call   rdx
ffff800000809a6d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
                pde[k]= (m2&~KNL_BASE) | (old_data3 & ~PAGE_4K_MASK);
ffff800000809a71:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000809a78:	7f 00 00 
ffff800000809a7b:	48 23 45 90          	and    rax,QWORD PTR [rbp-0x70]
ffff800000809a7f:	48 89 c2             	mov    rdx,rax
ffff800000809a82:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000809a86:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000809a8b:	48 89 c1             	mov    rcx,rax
ffff800000809a8e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809a91:	48 98                	cdqe   
ffff800000809a93:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000809a9a:	00 
ffff800000809a9b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000809a9f:	48 01 f0             	add    rax,rsi
ffff800000809aa2:	48 09 ca             	or     rdx,rcx
ffff800000809aa5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008
                memcpy((unsigned char *) m2, old_data3 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000809aa8:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000809aaf:	7f 00 00 
ffff800000809ab2:	48 23 45 98          	and    rax,QWORD PTR [rbp-0x68]
ffff800000809ab6:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff800000809abd:	80 ff ff 
ffff800000809ac0:	48 09 d0             	or     rax,rdx
ffff800000809ac3:	48 89 c1             	mov    rcx,rax
ffff800000809ac6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809aca:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809acf:	48 89 ce             	mov    rsi,rcx
ffff800000809ad2:	48 89 c7             	mov    rdi,rax
ffff800000809ad5:	49 89 df             	mov    r15,rbx
ffff800000809ad8:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff800000809adf:	ff ff ff 
ffff800000809ae2:	48 01 d8             	add    rax,rbx
ffff800000809ae5:	ff d0                	call   rax
ffff800000809ae7:	eb 01                	jmp    ffff800000809aea <copy_mmap+0x393>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
                    continue;
ffff800000809ae9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001 (discriminator 2)
            for(int k=0;k<512;k++)
ffff800000809aea:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001 (discriminator 1)
ffff800000809aee:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000809af5:	0f 8e f8 fe ff ff    	jle    ffff8000008099f3 <copy_mmap+0x29c>
ffff800000809afb:	eb 01                	jmp    ffff800000809afe <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:995
                continue;
ffff800000809afd:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992 (discriminator 2)
        for(int j=0;j<512;j++)
ffff800000809afe:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992 (discriminator 1)
ffff800000809b02:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff800000809b09:	0f 8e dc fd ff ff    	jle    ffff8000008098eb <copy_mmap+0x194>
ffff800000809b0f:	eb 01                	jmp    ffff800000809b12 <copy_mmap+0x3bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:986
            continue;
ffff800000809b11:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983 (discriminator 2)
    for(int i=0;i<512;i++)
ffff800000809b12:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983 (discriminator 1)
ffff800000809b16:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff800000809b1d:	0f 8e e5 fc ff ff    	jle    ffff800000809808 <copy_mmap+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1015
            }

        }

    }
}
ffff800000809b23:	90                   	nop
ffff800000809b24:	90                   	nop
ffff800000809b25:	48 83 c4 70          	add    rsp,0x70
ffff800000809b29:	5b                   	pop    rbx
ffff800000809b2a:	41 5f                	pop    r15
ffff800000809b2c:	5d                   	pop    rbp
ffff800000809b2d:	c3                   	ret    

ffff800000809b2e <getpgrp>:
getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017

pid_t getpgrp(void){
ffff800000809b2e:	f3 0f 1e fa          	endbr64 
ffff800000809b32:	55                   	push   rbp
ffff800000809b33:	48 89 e5             	mov    rbp,rsp
ffff800000809b36:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809b36 <getpgrp+0x8>
ffff800000809b3d:	49 bb 4a 8f 01 00 00 	movabs r11,0x18f4a
ffff800000809b44:	00 00 00 
ffff800000809b47:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1018
    return current->gpid;
ffff800000809b4a:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809b51:	ff ff ff 
ffff800000809b54:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809b58:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b5b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019
}
ffff800000809b5e:	5d                   	pop    rbp
ffff800000809b5f:	c3                   	ret    

ffff800000809b60 <getpgid>:
getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021

int getpgid(pid_t pid,gid_t gid){
ffff800000809b60:	f3 0f 1e fa          	endbr64 
ffff800000809b64:	55                   	push   rbp
ffff800000809b65:	48 89 e5             	mov    rbp,rsp
ffff800000809b68:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809b68 <getpgid+0x8>
ffff800000809b6f:	49 bb 18 8f 01 00 00 	movabs r11,0x18f18
ffff800000809b76:	00 00 00 
ffff800000809b79:	4c 01 d8             	add    rax,r11
ffff800000809b7c:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000809b7f:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1022
    if(pid==0)
ffff800000809b82:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000809b86:	75 16                	jne    ffff800000809b9e <getpgid+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023
        return current->gpid;
ffff800000809b88:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809b8f:	ff ff ff 
ffff800000809b92:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809b96:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b99:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809b9c:	eb 67                	jmp    ffff800000809c05 <getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809b9e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000809ba5:	eb 53                	jmp    ffff800000809bfa <getpgid+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1025
        if(task[i].pid==pid)
ffff800000809ba7:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809bae:	ff ff ff 
ffff800000809bb1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809bb5:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809bb8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809bbb:	48 63 d2             	movsxd rdx,edx
ffff800000809bbe:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000809bc5:	48 01 ca             	add    rdx,rcx
ffff800000809bc8:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000809bca:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000809bcd:	39 d1                	cmp    ecx,edx
ffff800000809bcf:	75 25                	jne    ffff800000809bf6 <getpgid+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1026
            return task[i].gpid;
ffff800000809bd1:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809bd8:	ff ff ff 
ffff800000809bdb:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809bdf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809be2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809be5:	48 98                	cdqe   
ffff800000809be7:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809bee:	48 01 d0             	add    rax,rdx
ffff800000809bf1:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809bf4:	eb 0f                	jmp    ffff800000809c05 <getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809bf6:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024 (discriminator 1)
ffff800000809bfa:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000809bfe:	7e a7                	jle    ffff800000809ba7 <getpgid+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1028
    }
    return -1;
ffff800000809c00:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1029
}
ffff800000809c05:	5d                   	pop    rbp
ffff800000809c06:	c3                   	ret    

ffff800000809c07 <setpgid>:
setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1030
int setpgid(pid_t pid,gid_t gid){
ffff800000809c07:	f3 0f 1e fa          	endbr64 
ffff800000809c0b:	55                   	push   rbp
ffff800000809c0c:	48 89 e5             	mov    rbp,rsp
ffff800000809c0f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809c0f <setpgid+0x8>
ffff800000809c16:	49 bb 71 8e 01 00 00 	movabs r11,0x18e71
ffff800000809c1d:	00 00 00 
ffff800000809c20:	4c 01 d8             	add    rax,r11
ffff800000809c23:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000809c26:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1031
    if(pid==0)
ffff800000809c29:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000809c2d:	75 56                	jne    ffff800000809c85 <setpgid+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1033
    {
        if(current->sid==current->pid)
ffff800000809c2f:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809c36:	ff ff ff 
ffff800000809c39:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809c3d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809c40:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000809c43:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809c4a:	ff ff ff 
ffff800000809c4d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809c51:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809c54:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809c56:	39 d1                	cmp    ecx,edx
ffff800000809c58:	75 0a                	jne    ffff800000809c64 <setpgid+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1034
            return -1;
ffff800000809c5a:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809c5f:	e9 e9 00 00 00       	jmp    ffff800000809d4d <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1035
        current->gpid=gid;
ffff800000809c64:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809c6b:	ff ff ff 
ffff800000809c6e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809c72:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809c75:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809c78:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
        return 0;
ffff800000809c7b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809c80:	e9 c8 00 00 00       	jmp    ffff800000809d4d <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809c85:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000809c8c:	e9 ad 00 00 00       	jmp    ffff800000809d3e <setpgid+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1039
        if(task[i].pid==pid)
ffff800000809c91:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809c98:	ff ff ff 
ffff800000809c9b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809c9f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809ca2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809ca5:	48 63 d2             	movsxd rdx,edx
ffff800000809ca8:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000809caf:	48 01 ca             	add    rdx,rcx
ffff800000809cb2:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000809cb4:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000809cb7:	39 d1                	cmp    ecx,edx
ffff800000809cb9:	75 7f                	jne    ffff800000809d3a <setpgid+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041
        {
            if(task[i].sid==task[i].pid)
ffff800000809cbb:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809cc2:	ff ff ff 
ffff800000809cc5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809cc9:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809ccc:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809ccf:	48 63 d2             	movsxd rdx,edx
ffff800000809cd2:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000809cd9:	48 01 ca             	add    rdx,rcx
ffff800000809cdc:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000809cdf:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809ce6:	ff ff ff 
ffff800000809ce9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809ced:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000809cf0:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809cf3:	48 63 d2             	movsxd rdx,edx
ffff800000809cf6:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000809cfd:	48 01 f2             	add    rdx,rsi
ffff800000809d00:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809d02:	39 d1                	cmp    ecx,edx
ffff800000809d04:	75 07                	jne    ffff800000809d0d <setpgid+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042
                return -1;
ffff800000809d06:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809d0b:	eb 40                	jmp    ffff800000809d4d <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1043
            task[i].gpid=gid;
ffff800000809d0d:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809d14:	ff ff ff 
ffff800000809d17:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809d1b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809d1e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809d21:	48 98                	cdqe   
ffff800000809d23:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809d2a:	48 01 c2             	add    rdx,rax
ffff800000809d2d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809d30:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1044
            return 0;
ffff800000809d33:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809d38:	eb 13                	jmp    ffff800000809d4d <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809d3a:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038 (discriminator 1)
ffff800000809d3e:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000809d42:	0f 8e 49 ff ff ff    	jle    ffff800000809c91 <setpgid+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1047
        }
    }
    return -1;
ffff800000809d48:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1048
}
ffff800000809d4d:	5d                   	pop    rbp
ffff800000809d4e:	c3                   	ret    

ffff800000809d4f <setsid>:
setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050

pid_t setsid(void){
ffff800000809d4f:	f3 0f 1e fa          	endbr64 
ffff800000809d53:	55                   	push   rbp
ffff800000809d54:	48 89 e5             	mov    rbp,rsp
ffff800000809d57:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809d57 <setsid+0x8>
ffff800000809d5e:	49 bb 29 8d 01 00 00 	movabs r11,0x18d29
ffff800000809d65:	00 00 00 
ffff800000809d68:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1051
    current->sid=current->pid;
ffff800000809d6b:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809d72:	ff ff ff 
ffff800000809d75:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809d79:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809d7c:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff800000809d83:	ff ff ff 
ffff800000809d86:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000809d8a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809d8d:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809d8f:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052
}
ffff800000809d92:	90                   	nop
ffff800000809d93:	5d                   	pop    rbp
ffff800000809d94:	c3                   	ret    

ffff800000809d95 <getsid>:
getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1053
pid_t getsid(pid_t pid){
ffff800000809d95:	f3 0f 1e fa          	endbr64 
ffff800000809d99:	55                   	push   rbp
ffff800000809d9a:	48 89 e5             	mov    rbp,rsp
ffff800000809d9d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809d9d <getsid+0x8>
ffff800000809da4:	49 bb e3 8c 01 00 00 	movabs r11,0x18ce3
ffff800000809dab:	00 00 00 
ffff800000809dae:	4c 01 d8             	add    rax,r11
ffff800000809db1:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1054
    if(pid==0)
ffff800000809db4:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000809db8:	75 16                	jne    ffff800000809dd0 <getsid+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1055
        return current->sid;
ffff800000809dba:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809dc1:	ff ff ff 
ffff800000809dc4:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809dc8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809dcb:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809dce:	eb 67                	jmp    ffff800000809e37 <getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1056
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809dd0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000809dd7:	eb 53                	jmp    ffff800000809e2c <getsid+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1057
        if(task[i].pid==pid)
ffff800000809dd9:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809de0:	ff ff ff 
ffff800000809de3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809de7:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809dea:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809ded:	48 63 d2             	movsxd rdx,edx
ffff800000809df0:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000809df7:	48 01 ca             	add    rdx,rcx
ffff800000809dfa:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000809dfc:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000809dff:	39 d1                	cmp    ecx,edx
ffff800000809e01:	75 25                	jne    ffff800000809e28 <getsid+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1058
            return task[i].sid;
ffff800000809e03:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809e0a:	ff ff ff 
ffff800000809e0d:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809e11:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809e14:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809e17:	48 98                	cdqe   
ffff800000809e19:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809e20:	48 01 d0             	add    rax,rdx
ffff800000809e23:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809e26:	eb 0f                	jmp    ffff800000809e37 <getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1056 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809e28:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1056 (discriminator 1)
ffff800000809e2c:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000809e30:	7e a7                	jle    ffff800000809dd9 <getsid+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1060
    }
    return -1;
ffff800000809e32:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1061
}
ffff800000809e37:	5d                   	pop    rbp
ffff800000809e38:	c3                   	ret    

ffff800000809e39 <tcsetpgrp>:
tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1062
int tcsetpgrp(int fildes,pid_t pgid_id){
ffff800000809e39:	f3 0f 1e fa          	endbr64 
ffff800000809e3d:	55                   	push   rbp
ffff800000809e3e:	48 89 e5             	mov    rbp,rsp
ffff800000809e41:	41 57                	push   r15
ffff800000809e43:	53                   	push   rbx
ffff800000809e44:	48 83 ec 20          	sub    rsp,0x20
ffff800000809e48:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809e48 <tcsetpgrp+0xf>
ffff800000809e4f:	49 bb 38 8c 01 00 00 	movabs r11,0x18c38
ffff800000809e56:	00 00 00 
ffff800000809e59:	4c 01 db             	add    rbx,r11
ffff800000809e5c:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000809e5f:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1064
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
ffff800000809e62:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809e65:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809e6a:	be 02 00 00 00       	mov    esi,0x2
ffff800000809e6f:	89 c7                	mov    edi,eax
ffff800000809e71:	49 89 df             	mov    r15,rbx
ffff800000809e74:	48 b8 d2 75 fe ff ff 	movabs rax,0xfffffffffffe75d2
ffff800000809e7b:	ff ff ff 
ffff800000809e7e:	48 01 d8             	add    rax,rbx
ffff800000809e81:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1065
    int sid= getsid(0);//获取session id
ffff800000809e83:	bf 00 00 00 00       	mov    edi,0x0
ffff800000809e88:	49 89 df             	mov    r15,rbx
ffff800000809e8b:	48 b8 15 73 fe ff ff 	movabs rax,0xfffffffffffe7315
ffff800000809e92:	ff ff ff 
ffff800000809e95:	48 01 d8             	add    rax,rbx
ffff800000809e98:	ff d0                	call   rax
ffff800000809e9a:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1066
    struct process* new_fgl=NULL;
ffff800000809e9d:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000809ea4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1067
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809ea5:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000809eac:	e9 fb 00 00 00       	jmp    ffff800000809fac <tcsetpgrp+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000809eb1:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809eb8:	ff ff ff 
ffff800000809ebb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809ebf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809ec2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809ec5:	48 98                	cdqe   
ffff800000809ec7:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809ece:	48 01 d0             	add    rax,rdx
ffff800000809ed1:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000809ed4:	83 f8 04             	cmp    eax,0x4
ffff800000809ed7:	0f 84 ca 00 00 00    	je     ffff800000809fa7 <tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068 (discriminator 2)
ffff800000809edd:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809ee4:	ff ff ff 
ffff800000809ee7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809eeb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809eee:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809ef1:	48 98                	cdqe   
ffff800000809ef3:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809efa:	48 01 d0             	add    rax,rdx
ffff800000809efd:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000809f00:	85 c0                	test   eax,eax
ffff800000809f02:	0f 84 9f 00 00 00    	je     ffff800000809fa7 <tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1069
        if(task[i].sid==sid){
ffff800000809f08:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809f0f:	ff ff ff 
ffff800000809f12:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809f16:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809f19:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809f1c:	48 98                	cdqe   
ffff800000809f1e:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809f25:	48 01 d0             	add    rax,rdx
ffff800000809f28:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000809f2b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809f2e:	39 c2                	cmp    edx,eax
ffff800000809f30:	75 76                	jne    ffff800000809fa8 <tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1070
            task[i].fg_pgid=pgid_id;
ffff800000809f32:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809f39:	ff ff ff 
ffff800000809f3c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809f40:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809f43:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809f46:	48 98                	cdqe   
ffff800000809f48:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809f4f:	48 01 c2             	add    rdx,rax
ffff800000809f52:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000809f55:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1071
            if(task[i].pid==pgid_id){
ffff800000809f58:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809f5f:	ff ff ff 
ffff800000809f62:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809f66:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809f69:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809f6c:	48 98                	cdqe   
ffff800000809f6e:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809f75:	48 01 d0             	add    rax,rdx
ffff800000809f78:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809f7a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000809f7d:	39 c2                	cmp    edx,eax
ffff800000809f7f:	75 27                	jne    ffff800000809fa8 <tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1073
                //这是新前台进程组的leader
                new_fgl=&task[i];
ffff800000809f81:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809f88:	ff ff ff 
ffff800000809f8b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809f8f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809f92:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809f95:	48 98                	cdqe   
ffff800000809f97:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809f9e:	48 01 d0             	add    rax,rdx
ffff800000809fa1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000809fa5:	eb 01                	jmp    ffff800000809fa8 <tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000809fa7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1067 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809fa8:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1067 (discriminator 1)
ffff800000809fac:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff800000809fb0:	0f 8e fb fe ff ff    	jle    ffff800000809eb1 <tcsetpgrp+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1078
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
ffff800000809fb6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809fba:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffff800000809fbd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809fc1:	48 63 d2             	movsxd rdx,edx
ffff800000809fc4:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809fc8:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809fcd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809fd1:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
ffff800000809fd5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809fd9:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809fdc:	48 63 d2             	movsxd rdx,edx
ffff800000809fdf:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809fe3:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
ffff800000809fe8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809fec:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809fef:	48 63 d2             	movsxd rdx,edx
ffff800000809ff2:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809ff6:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809ffb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000809fff:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080a003:	b9 00 00 00 00       	mov    ecx,0x0
ffff80000080a008:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080a00d:	48 89 c7             	mov    rdi,rax
ffff80000080a010:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1080
    ,TTY_CONNECT,0);
}
ffff80000080a013:	90                   	nop
ffff80000080a014:	48 83 c4 20          	add    rsp,0x20
ffff80000080a018:	5b                   	pop    rbx
ffff80000080a019:	41 5f                	pop    r15
ffff80000080a01b:	5d                   	pop    rbp
ffff80000080a01c:	c3                   	ret    

ffff80000080a01d <tcgetpgrp>:
tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1081
pid_t tcgetpgrp(int fildes){
ffff80000080a01d:	f3 0f 1e fa          	endbr64 
ffff80000080a021:	55                   	push   rbp
ffff80000080a022:	48 89 e5             	mov    rbp,rsp
ffff80000080a025:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a025 <tcgetpgrp+0x8>
ffff80000080a02c:	49 bb 5b 8a 01 00 00 	movabs r11,0x18a5b
ffff80000080a033:	00 00 00 
ffff80000080a036:	4c 01 d8             	add    rax,r11
ffff80000080a039:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1082
    return current->fg_pgid;
ffff80000080a03c:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080a043:	ff ff ff 
ffff80000080a046:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a04a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a04d:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1083
}
ffff80000080a050:	5d                   	pop    rbp
ffff80000080a051:	c3                   	ret    

ffff80000080a052 <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1086
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
ffff80000080a052:	f3 0f 1e fa          	endbr64 
ffff80000080a056:	55                   	push   rbp
ffff80000080a057:	48 89 e5             	mov    rbp,rsp
ffff80000080a05a:	48 83 ec 10          	sub    rsp,0x10
ffff80000080a05e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a05e <sys_ioctl+0xc>
ffff80000080a065:	49 bb 22 8a 01 00 00 	movabs r11,0x18a22
ffff80000080a06c:	00 00 00 
ffff80000080a06f:	4c 01 d8             	add    rax,r11
ffff80000080a072:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff80000080a075:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff80000080a078:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1087
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
ffff80000080a07c:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080a083:	ff ff ff 
ffff80000080a086:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a08a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080a08d:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080a090:	48 63 c9             	movsxd rcx,ecx
ffff80000080a093:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080a097:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080a09c:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080a0a0:	4c 8b 42 28          	mov    r8,QWORD PTR [rdx+0x28]
ffff80000080a0a4:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080a0a7:	48 63 d2             	movsxd rdx,edx
ffff80000080a0aa:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff80000080a0b1:	ff ff ff 
ffff80000080a0b4:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080a0b8:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffff80000080a0bb:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff80000080a0be:	48 63 f6             	movsxd rsi,esi
ffff80000080a0c1:	48 83 c6 1e          	add    rsi,0x1e
ffff80000080a0c5:	48 8b 74 f1 08       	mov    rsi,QWORD PTR [rcx+rsi*8+0x8]
ffff80000080a0ca:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff80000080a0d1:	ff ff ff 
ffff80000080a0d4:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080a0d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a0db:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080a0de:	48 63 c9             	movsxd rcx,ecx
ffff80000080a0e1:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080a0e5:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
ffff80000080a0ea:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a0ee:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080a0f2:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080a0f6:	48 89 c7             	mov    rdi,rax
ffff80000080a0f9:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1089
    ,request,args);
ffff80000080a0fc:	90                   	nop
ffff80000080a0fd:	c9                   	leave  
ffff80000080a0fe:	c3                   	ret    
ffff80000080a0ff:	90                   	nop

ffff80000080a100 <outb>:
outb():
ffff80000080a100:	66 89 fa             	mov    dx,di
ffff80000080a103:	66 89 f0             	mov    ax,si
ffff80000080a106:	ee                   	out    dx,al
ffff80000080a107:	e8 29 00 00 00       	call   ffff80000080a135 <io_delay>
ffff80000080a10c:	c3                   	ret    

ffff80000080a10d <outw>:
outw():
ffff80000080a10d:	66 89 fa             	mov    dx,di
ffff80000080a110:	66 89 f0             	mov    ax,si
ffff80000080a113:	66 ef                	out    dx,ax
ffff80000080a115:	90                   	nop
ffff80000080a116:	90                   	nop
ffff80000080a117:	90                   	nop
ffff80000080a118:	c3                   	ret    

ffff80000080a119 <inb>:
inb():
ffff80000080a119:	31 c0                	xor    eax,eax
ffff80000080a11b:	66 89 fa             	mov    dx,di
ffff80000080a11e:	ec                   	in     al,dx
ffff80000080a11f:	90                   	nop
ffff80000080a120:	90                   	nop
ffff80000080a121:	90                   	nop
ffff80000080a122:	c3                   	ret    

ffff80000080a123 <inw>:
inw():
ffff80000080a123:	31 c0                	xor    eax,eax
ffff80000080a125:	66 89 fa             	mov    dx,di
ffff80000080a128:	66 ed                	in     ax,dx
ffff80000080a12a:	90                   	nop
ffff80000080a12b:	90                   	nop
ffff80000080a12c:	90                   	nop
ffff80000080a12d:	c3                   	ret    

ffff80000080a12e <eoi>:
eoi():
ffff80000080a12e:	b0 20                	mov    al,0x20
ffff80000080a130:	e6 a0                	out    0xa0,al
ffff80000080a132:	e6 20                	out    0x20,al
ffff80000080a134:	c3                   	ret    

ffff80000080a135 <io_delay>:
io_delay():
ffff80000080a135:	90                   	nop
ffff80000080a136:	90                   	nop
ffff80000080a137:	90                   	nop
ffff80000080a138:	90                   	nop
ffff80000080a139:	c3                   	ret    

ffff80000080a13a <turn_on_int>:
turn_on_int():
ffff80000080a13a:	b0 f8                	mov    al,0xf8
ffff80000080a13c:	e6 21                	out    0x21,al
ffff80000080a13e:	e8 f2 ff ff ff       	call   ffff80000080a135 <io_delay>
ffff80000080a143:	b0 af                	mov    al,0xaf
ffff80000080a145:	e6 a1                	out    0xa1,al
ffff80000080a147:	e8 e9 ff ff ff       	call   ffff80000080a135 <io_delay>
ffff80000080a14c:	48 b8 00 70 10 00 00 	movabs rax,0xffff800000107000
ffff80000080a153:	80 ff ff 
ffff80000080a156:	0f 01 18             	lidt   [rax]
ffff80000080a159:	90                   	nop
ffff80000080a15a:	90                   	nop
ffff80000080a15b:	90                   	nop
ffff80000080a15c:	90                   	nop
ffff80000080a15d:	c3                   	ret    

ffff80000080a15e <report_back_trace_of_err>:
report_back_trace_of_err():
ffff80000080a15e:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff80000080a163:	50                   	push   rax
ffff80000080a164:	83 c4 08             	add    esp,0x8
ffff80000080a167:	c3                   	ret    

ffff80000080a168 <bt_msg>:
bt_msg():
ffff80000080a168:	65 72 72             	gs jb  ffff80000080a1dd <fill_desc+0x3a>
ffff80000080a16b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff80000080a16c:	72 20                	jb     ffff80000080a18e <init_gdt+0x11>
ffff80000080a16e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff80000080a16f:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
ffff80000080a172:	72 73                	jb     ffff80000080a1e7 <fill_desc+0x44>
ffff80000080a174:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
ffff80000080a177:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # ffff800000eefdf5 <_knl_end+0x2efdf5>

ffff80000080a17d <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:9
#include "proc.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
ffff80000080a17d:	f3 0f 1e fa          	endbr64 
ffff80000080a181:	55                   	push   rbp
ffff80000080a182:	48 89 e5             	mov    rbp,rsp
ffff80000080a185:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a185 <init_gdt+0x8>
ffff80000080a18c:	49 bb fb 88 01 00 00 	movabs r11,0x188fb
ffff80000080a193:	00 00 00 
ffff80000080a196:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:11
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    asm volatile("mov $0x48,%ax\r\n"
ffff80000080a199:	66 b8 48 00          	mov    ax,0x48
ffff80000080a19d:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:13
                 "ltr %ax");  
}
ffff80000080a1a0:	90                   	nop
ffff80000080a1a1:	5d                   	pop    rbp
ffff80000080a1a2:	c3                   	ret    

ffff80000080a1a3 <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
ffff80000080a1a3:	f3 0f 1e fa          	endbr64 
ffff80000080a1a7:	55                   	push   rbp
ffff80000080a1a8:	48 89 e5             	mov    rbp,rsp
ffff80000080a1ab:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a1ab <fill_desc+0x8>
ffff80000080a1b2:	49 bb d5 88 01 00 00 	movabs r11,0x188d5
ffff80000080a1b9:	00 00 00 
ffff80000080a1bc:	4c 01 d8             	add    rax,r11
ffff80000080a1bf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080a1c3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080a1c7:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffff80000080a1ca:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_12=base&0xffff;
ffff80000080a1ce:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a1d5:	ff ff ff 
ffff80000080a1d8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a1dc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a1df:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a1e2:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a1e6:	48 01 ca             	add    rdx,rcx
ffff80000080a1e9:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff80000080a1ed:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_3=(base>>16)&0xff;
ffff80000080a1f1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a1f5:	48 89 d6             	mov    rsi,rdx
ffff80000080a1f8:	48 c1 ee 10          	shr    rsi,0x10
ffff80000080a1fc:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a203:	ff ff ff 
ffff80000080a206:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a20a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a20d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a210:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a214:	48 01 ca             	add    rdx,rcx
ffff80000080a217:	89 f1                	mov    ecx,esi
ffff80000080a219:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_4=(base>>24)&0xff;
ffff80000080a21c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a220:	48 89 d6             	mov    rsi,rdx
ffff80000080a223:	48 c1 ee 18          	shr    rsi,0x18
ffff80000080a227:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a22e:	ff ff ff 
ffff80000080a231:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a235:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a238:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a23b:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a23f:	48 01 ca             	add    rdx,rcx
ffff80000080a242:	89 f1                	mov    ecx,esi
ffff80000080a244:	88 4a 07             	mov    BYTE PTR [rdx+0x7],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].base_5678=(base>>32)&0xffffffff;
ffff80000080a247:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a24b:	48 89 d1             	mov    rcx,rdx
ffff80000080a24e:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080a252:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a259:	ff ff ff 
ffff80000080a25c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a260:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080a263:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a266:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a26a:	48 01 f2             	add    rdx,rsi
ffff80000080a26d:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].limit_lo16=limit&0xffff;
ffff80000080a270:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a277:	ff ff ff 
ffff80000080a27a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a27e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a281:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a284:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a288:	48 01 ca             	add    rdx,rcx
ffff80000080a28b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080a28f:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:21
    gdt[index].attr=attr|((limit>>8)&0xf0);
ffff80000080a292:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a296:	48 c1 ea 08          	shr    rdx,0x8
ffff80000080a29a:	89 d1                	mov    ecx,edx
ffff80000080a29c:	66 81 e1 f0 00       	and    cx,0xf0
ffff80000080a2a1:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a2a8:	ff ff ff 
ffff80000080a2ab:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a2af:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a2b2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080a2b5:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a2b9:	48 01 c2             	add    rdx,rax
ffff80000080a2bc:	89 c8                	mov    eax,ecx
ffff80000080a2be:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
ffff80000080a2c2:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:23

}
ffff80000080a2c6:	90                   	nop
ffff80000080a2c7:	5d                   	pop    rbp
ffff80000080a2c8:	c3                   	ret    

ffff80000080a2c9 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
ffff80000080a2c9:	f3 0f 1e fa          	endbr64 
ffff80000080a2cd:	55                   	push   rbp
ffff80000080a2ce:	48 89 e5             	mov    rbp,rsp
ffff80000080a2d1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a2d1 <fill_gate+0x8>
ffff80000080a2d8:	49 bb af 87 01 00 00 	movabs r11,0x187af
ffff80000080a2df:	00 00 00 
ffff80000080a2e2:	4c 01 d8             	add    rax,r11
ffff80000080a2e5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080a2e8:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff80000080a2eb:	89 d6                	mov    esi,edx
ffff80000080a2ed:	89 ca                	mov    edx,ecx
ffff80000080a2ef:	89 f1                	mov    ecx,esi
ffff80000080a2f1:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffff80000080a2f5:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    gate* ptr=gdt;
ffff80000080a2f9:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a300:	ff ff ff 
ffff80000080a303:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a307:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a30a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_low=offset&0xffff;
ffff80000080a30e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a311:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a315:	48 89 c2             	mov    rdx,rax
ffff80000080a318:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a31c:	48 01 d0             	add    rax,rdx
ffff80000080a31f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a322:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].offset_high=(offset>>16)&0xffff;
ffff80000080a325:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a328:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a32c:	48 89 c2             	mov    rdx,rax
ffff80000080a32f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a333:	48 01 d0             	add    rax,rdx
ffff80000080a336:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a339:	c1 ea 10             	shr    edx,0x10
ffff80000080a33c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].selector=selector;
ffff80000080a33f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a342:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a346:	48 89 c2             	mov    rdx,rax
ffff80000080a349:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a34d:	48 01 c2             	add    rdx,rax
ffff80000080a350:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffff80000080a354:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
    ptr[index].attr=attr;
ffff80000080a358:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a35b:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a35f:	48 89 c2             	mov    rdx,rax
ffff80000080a362:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a366:	48 01 c2             	add    rdx,rax
ffff80000080a369:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
ffff80000080a36d:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:32
}
ffff80000080a371:	90                   	nop
ffff80000080a372:	5d                   	pop    rbp
ffff80000080a373:	c3                   	ret    

ffff80000080a374 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:35

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
ffff80000080a374:	f3 0f 1e fa          	endbr64 
ffff80000080a378:	55                   	push   rbp
ffff80000080a379:	48 89 e5             	mov    rbp,rsp
ffff80000080a37c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a37c <fill_ldt_desc+0x8>
ffff80000080a383:	49 bb 04 87 01 00 00 	movabs r11,0x18704
ffff80000080a38a:	00 00 00 
ffff80000080a38d:	4c 01 d8             	add    rax,r11
ffff80000080a390:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff80000080a393:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff80000080a396:	89 d0                	mov    eax,edx
ffff80000080a398:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080a39c:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:41
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
ffff80000080a3a0:	90                   	nop
ffff80000080a3a1:	5d                   	pop    rbp
ffff80000080a3a2:	c3                   	ret    
ffff80000080a3a3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080a3aa:	00 00 00 
ffff80000080a3ad:	0f 1f 00             	nop    DWORD PTR [rax]

ffff80000080a3b0 <fill_desc>:
fill_desc():
ffff80000080a3b0:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff80000080a3b5:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
ffff80000080a3ba:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff80000080a3bf:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
ffff80000080a3c4:	be 00 60 00 00       	mov    esi,0x6000
ffff80000080a3c9:	c1 e2 03             	shl    edx,0x3
ffff80000080a3cc:	01 d6                	add    esi,edx
ffff80000080a3ce:	66 67 89 1e          	mov    WORD PTR [esi],bx
ffff80000080a3d2:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
ffff80000080a3d7:	c1 e8 10             	shr    eax,0x10
ffff80000080a3da:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
ffff80000080a3de:	c1 eb 10             	shr    ebx,0x10
ffff80000080a3e1:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
ffff80000080a3e5:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
ffff80000080a3e9:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
ffff80000080a3ed:	c3                   	ret    

ffff80000080a3ee <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
ffff80000080a3ee:	f3 0f 1e fa          	endbr64 
ffff80000080a3f2:	55                   	push   rbp
ffff80000080a3f3:	48 89 e5             	mov    rbp,rsp
ffff80000080a3f6:	41 57                	push   r15
ffff80000080a3f8:	53                   	push   rbx
ffff80000080a3f9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a3f9 <clock_c+0xb>
ffff80000080a400:	49 bb 87 86 01 00 00 	movabs r11,0x18687
ffff80000080a407:	00 00 00 
ffff80000080a40a:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    execute_request();
ffff80000080a40d:	49 89 df             	mov    r15,rbx
ffff80000080a410:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a415:	48 ba a5 c5 fe ff ff 	movabs rdx,0xfffffffffffec5a5
ffff80000080a41c:	ff ff ff 
ffff80000080a41f:	48 01 da             	add    rdx,rbx
ffff80000080a422:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:12
    do_req();
ffff80000080a424:	49 89 df             	mov    r15,rbx
ffff80000080a427:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a42c:	48 ba a3 3b fe ff ff 	movabs rdx,0xfffffffffffe3ba3
ffff80000080a433:	ff ff ff 
ffff80000080a436:	48 01 da             	add    rdx,rbx
ffff80000080a439:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    if(!manage_proc_lock)
ffff80000080a43b:	48 b8 08 fd ff ff ff 	movabs rax,0xfffffffffffffd08
ffff80000080a442:	ff ff ff 
ffff80000080a445:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a449:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a44b:	85 c0                	test   eax,eax
ffff80000080a44d:	75 17                	jne    ffff80000080a466 <clock_c+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:15
    {
        manage_proc();
ffff80000080a44f:	49 89 df             	mov    r15,rbx
ffff80000080a452:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a457:	48 ba aa 48 fe ff ff 	movabs rdx,0xfffffffffffe48aa
ffff80000080a45e:	ff ff ff 
ffff80000080a461:	48 01 da             	add    rdx,rbx
ffff80000080a464:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:18
    }
    //puts("1 disk req executed.");
ffff80000080a466:	90                   	nop
ffff80000080a467:	5b                   	pop    rbx
ffff80000080a468:	41 5f                	pop    r15
ffff80000080a46a:	5d                   	pop    rbp
ffff80000080a46b:	c3                   	ret    
ffff80000080a46c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff80000080a470 <clock>:
clock():
ffff80000080a470:	50                   	push   rax
ffff80000080a471:	53                   	push   rbx
ffff80000080a472:	51                   	push   rcx
ffff80000080a473:	52                   	push   rdx
ffff80000080a474:	57                   	push   rdi
ffff80000080a475:	56                   	push   rsi
ffff80000080a476:	41 50                	push   r8
ffff80000080a478:	41 51                	push   r9
ffff80000080a47a:	41 52                	push   r10
ffff80000080a47c:	41 53                	push   r11
ffff80000080a47e:	41 54                	push   r12
ffff80000080a480:	41 55                	push   r13
ffff80000080a482:	41 56                	push   r14
ffff80000080a484:	41 57                	push   r15
ffff80000080a486:	e8 53 ce ff ff       	call   ffff8000008072de <save_rsp>
ffff80000080a48b:	66 8c c0             	mov    ax,es
ffff80000080a48e:	50                   	push   rax
ffff80000080a48f:	66 8c d8             	mov    ax,ds
ffff80000080a492:	50                   	push   rax
ffff80000080a493:	66 b8 10 00          	mov    ax,0x10
ffff80000080a497:	8e c0                	mov    es,eax
ffff80000080a499:	8e d8                	mov    ds,eax

ffff80000080a49b <clock.normal_part>:
clock.normal_part():
ffff80000080a49b:	b0 20                	mov    al,0x20
ffff80000080a49d:	e6 a0                	out    0xa0,al
ffff80000080a49f:	e6 20                	out    0x20,al
ffff80000080a4a1:	e8 48 ff ff ff       	call   ffff80000080a3ee <clock_c>

ffff80000080a4a6 <clock_ret>:
clock_ret():
ffff80000080a4a6:	58                   	pop    rax
ffff80000080a4a7:	8e d8                	mov    ds,eax
ffff80000080a4a9:	58                   	pop    rax
ffff80000080a4aa:	8e c0                	mov    es,eax
ffff80000080a4ac:	41 5f                	pop    r15
ffff80000080a4ae:	41 5e                	pop    r14
ffff80000080a4b0:	41 5d                	pop    r13
ffff80000080a4b2:	41 5c                	pop    r12
ffff80000080a4b4:	41 5b                	pop    r11
ffff80000080a4b6:	41 5a                	pop    r10
ffff80000080a4b8:	41 59                	pop    r9
ffff80000080a4ba:	41 58                	pop    r8
ffff80000080a4bc:	5e                   	pop    rsi
ffff80000080a4bd:	5f                   	pop    rdi
ffff80000080a4be:	5a                   	pop    rdx
ffff80000080a4bf:	59                   	pop    rcx
ffff80000080a4c0:	5b                   	pop    rbx
ffff80000080a4c1:	58                   	pop    rax
ffff80000080a4c2:	48 cf                	iretq  

ffff80000080a4c4 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:118
    return ind;
}
*/

int execute(char *path, char **argv)
{
ffff80000080a4c4:	f3 0f 1e fa          	endbr64 
ffff80000080a4c8:	55                   	push   rbp
ffff80000080a4c9:	48 89 e5             	mov    rbp,rsp
ffff80000080a4cc:	41 57                	push   r15
ffff80000080a4ce:	53                   	push   rbx
ffff80000080a4cf:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a4d3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a4d3 <execute+0xf>
ffff80000080a4da:	49 bb ad 85 01 00 00 	movabs r11,0x185ad
ffff80000080a4e1:	00 00 00 
ffff80000080a4e4:	4c 01 db             	add    rbx,r11
ffff80000080a4e7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080a4eb:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:121
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
ffff80000080a4ef:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
ffff80000080a4f6:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
ffff80000080a4fd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a501:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080a506:	48 89 c7             	mov    rdi,rax
ffff80000080a509:	49 89 df             	mov    r15,rbx
ffff80000080a50c:	48 b8 7b a3 fe ff ff 	movabs rax,0xfffffffffffea37b
ffff80000080a513:	ff ff ff 
ffff80000080a516:	48 01 d8             	add    rax,rbx
ffff80000080a519:	ff d0                	call   rax
ffff80000080a51b:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080a51e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080a522:	79 0a                	jns    ffff80000080a52e <execute+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122 (discriminator 1)
ffff80000080a524:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080a529:	e9 f2 00 00 00       	jmp    ffff80000080a620 <execute+0x15c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124
    //
    char *p=path;
ffff80000080a52e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a532:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125
    for(;*p!='\0';p++);
ffff80000080a536:	eb 05                	jmp    ffff80000080a53d <execute+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 2)
ffff80000080a538:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 1)
ffff80000080a53d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a541:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a544:	84 c0                	test   al,al
ffff80000080a546:	75 f0                	jne    ffff80000080a538 <execute+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126
    for(;*p!='/'&&p>path;p--);
ffff80000080a548:	eb 05                	jmp    ffff80000080a54f <execute+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 3)
ffff80000080a54a:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 1)
ffff80000080a54f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a553:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a556:	3c 2f                	cmp    al,0x2f
ffff80000080a558:	74 0a                	je     ffff80000080a564 <execute+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 2)
ffff80000080a55a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a55e:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080a562:	77 e6                	ja     ffff80000080a54a <execute+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    if(p>path)
ffff80000080a564:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a568:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080a56c:	76 3c                	jbe    ffff80000080a5aa <execute+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
    {
        *p='\0';
ffff80000080a56e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a572:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
ffff80000080a575:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a579:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080a57e:	48 89 c7             	mov    rdi,rax
ffff80000080a581:	49 89 df             	mov    r15,rbx
ffff80000080a584:	48 b8 7b a3 fe ff ff 	movabs rax,0xfffffffffffea37b
ffff80000080a58b:	ff ff ff 
ffff80000080a58e:	48 01 d8             	add    rax,rbx
ffff80000080a591:	ff d0                	call   rax
ffff80000080a593:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080a596:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080a59a:	79 07                	jns    ffff80000080a5a3 <execute+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130 (discriminator 1)
ffff80000080a59c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080a5a1:	eb 7d                	jmp    ffff80000080a620 <execute+0x15c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131
        *p='/';
ffff80000080a5a3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a5a7:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:135
    }
    extern struct file opened[];
    extern struct process task[];
    int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
ffff80000080a5aa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a5ad:	48 63 d0             	movsxd rdx,eax
ffff80000080a5b0:	48 89 d0             	mov    rax,rdx
ffff80000080a5b3:	48 c1 e0 02          	shl    rax,0x2
ffff80000080a5b7:	48 01 d0             	add    rax,rdx
ffff80000080a5ba:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a5be:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080a5c5:	ff ff ff 
ffff80000080a5c8:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080a5cc:	48 01 c2             	add    rdx,rax
ffff80000080a5cf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a5d2:	48 63 c8             	movsxd rcx,eax
ffff80000080a5d5:	48 89 c8             	mov    rax,rcx
ffff80000080a5d8:	48 c1 e0 02          	shl    rax,0x2
ffff80000080a5dc:	48 01 c8             	add    rax,rcx
ffff80000080a5df:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a5e3:	48 b9 e8 fe ff ff ff 	movabs rcx,0xfffffffffffffee8
ffff80000080a5ea:	ff ff ff 
ffff80000080a5ed:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080a5f1:	48 01 c8             	add    rax,rcx
ffff80000080a5f4:	48 b9 90 ff ff ff ff 	movabs rcx,0xffffffffffffff90
ffff80000080a5fb:	ff ff ff 
ffff80000080a5fe:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080a602:	48 89 c6             	mov    rsi,rax
ffff80000080a605:	48 89 cf             	mov    rdi,rcx
ffff80000080a608:	49 89 df             	mov    r15,rbx
ffff80000080a60b:	48 b8 a7 55 fe ff ff 	movabs rax,0xfffffffffffe55a7
ffff80000080a612:	ff ff ff 
ffff80000080a615:	48 01 d8             	add    rax,rbx
ffff80000080a618:	ff d0                	call   rax
ffff80000080a61a:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:136
    return pi;
ffff80000080a61d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:137
}
ffff80000080a620:	48 83 c4 30          	add    rsp,0x30
ffff80000080a624:	5b                   	pop    rbx
ffff80000080a625:	41 5f                	pop    r15
ffff80000080a627:	5d                   	pop    rbp
ffff80000080a628:	c3                   	ret    

ffff80000080a629 <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139

int sys_execve(char *path, int argc, char **argv) {
ffff80000080a629:	f3 0f 1e fa          	endbr64 
ffff80000080a62d:	55                   	push   rbp
ffff80000080a62e:	48 89 e5             	mov    rbp,rsp
ffff80000080a631:	41 57                	push   r15
ffff80000080a633:	53                   	push   rbx
ffff80000080a634:	48 83 ec 50          	sub    rsp,0x50
ffff80000080a638:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a638 <sys_execve+0xf>
ffff80000080a63f:	49 bb 48 84 01 00 00 	movabs r11,0x18448
ffff80000080a646:	00 00 00 
ffff80000080a649:	4c 01 db             	add    rbx,r11
ffff80000080a64c:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff80000080a650:	89 75 b4             	mov    DWORD PTR [rbp-0x4c],esi
ffff80000080a653:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:140
    int fno=-1,cwd_fno=-1;
ffff80000080a657:	c7 45 e0 ff ff ff ff 	mov    DWORD PTR [rbp-0x20],0xffffffff
ffff80000080a65e:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
ffff80000080a665:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080a669:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080a66e:	48 89 c7             	mov    rdi,rax
ffff80000080a671:	49 89 df             	mov    r15,rbx
ffff80000080a674:	48 b8 7b a3 fe ff ff 	movabs rax,0xfffffffffffea37b
ffff80000080a67b:	ff ff ff 
ffff80000080a67e:	48 01 d8             	add    rax,rbx
ffff80000080a681:	ff d0                	call   rax
ffff80000080a683:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffff80000080a686:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff80000080a68a:	79 0a                	jns    ffff80000080a696 <sys_execve+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141 (discriminator 1)
ffff80000080a68c:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
ffff80000080a691:	e9 f3 01 00 00       	jmp    ffff80000080a889 <sys_execve+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:145

    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
ffff80000080a696:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a69d:	ff ff ff 
ffff80000080a6a0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a6a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a6a7:	48 89 c7             	mov    rdi,rax
ffff80000080a6aa:	49 89 df             	mov    r15,rbx
ffff80000080a6ad:	48 b8 35 69 fe ff ff 	movabs rax,0xfffffffffffe6935
ffff80000080a6b4:	ff ff ff 
ffff80000080a6b7:	48 01 d8             	add    rax,rbx
ffff80000080a6ba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:149
    // current->regs.rsp=STACK_TOP;//清空栈
    extern TSS* tss;

    current->exef=current->openf[fno];//改变执行文件
ffff80000080a6bc:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a6c3:	ff ff ff 
ffff80000080a6c6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a6ca:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a6cd:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a6d4:	ff ff ff 
ffff80000080a6d7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a6db:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a6de:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
ffff80000080a6e1:	48 63 c9             	movsxd rcx,ecx
ffff80000080a6e4:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080a6e8:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080a6ed:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:150
    addr_t entry= load_elf(current->exef);
ffff80000080a6f4:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a6fb:	ff ff ff 
ffff80000080a6fe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a702:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a705:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff80000080a70c:	48 89 c7             	mov    rdi,rax
ffff80000080a70f:	49 89 df             	mov    r15,rbx
ffff80000080a712:	48 b8 3f 89 fe ff ff 	movabs rax,0xfffffffffffe893f
ffff80000080a719:	ff ff ff 
ffff80000080a71c:	48 01 d8             	add    rax,rbx
ffff80000080a71f:	ff d0                	call   rax
ffff80000080a721:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:151
    if(entry==-1)
ffff80000080a725:	48 83 7d d0 ff       	cmp    QWORD PTR [rbp-0x30],0xffffffffffffffff
ffff80000080a72a:	75 4d                	jne    ffff80000080a779 <sys_execve+0x150>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:153
    {
        comprintf("failed execve, errcode:%d\n",current->regs.errcode);
ffff80000080a72c:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a733:	ff ff ff 
ffff80000080a736:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a73a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a73d:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
ffff80000080a744:	48 89 c6             	mov    rsi,rax
ffff80000080a747:	48 b8 bf d5 ff ff ff 	movabs rax,0xffffffffffffd5bf
ffff80000080a74e:	ff ff ff 
ffff80000080a751:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080a755:	48 89 c7             	mov    rdi,rax
ffff80000080a758:	49 89 df             	mov    r15,rbx
ffff80000080a75b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a760:	48 ba a4 0c ff ff ff 	movabs rdx,0xffffffffffff0ca4
ffff80000080a767:	ff ff ff 
ffff80000080a76a:	48 01 da             	add    rdx,rbx
ffff80000080a76d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:154
        return -1;
ffff80000080a76f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080a774:	e9 10 01 00 00       	jmp    ffff80000080a889 <sys_execve+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:156
    }
    if(sys_close(fno)<0)return -1;
ffff80000080a779:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080a77c:	89 c7                	mov    edi,eax
ffff80000080a77e:	49 89 df             	mov    r15,rbx
ffff80000080a781:	48 b8 2f aa fe ff ff 	movabs rax,0xfffffffffffeaa2f
ffff80000080a788:	ff ff ff 
ffff80000080a78b:	48 01 d8             	add    rax,rbx
ffff80000080a78e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:159

    //sysret直接返回到新程序的main
    void *retp= (void *) entry;
ffff80000080a790:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a794:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:160
    stack_store_regs *rs= (stack_store_regs *) (tss->ists[0] - sizeof(stack_store_regs));
ffff80000080a798:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff80000080a79f:	ff ff ff 
ffff80000080a7a2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a7a6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a7a9:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff80000080a7ad:	48 2d a8 00 00 00    	sub    rax,0xa8
ffff80000080a7b3:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:161
    rs->rcx= (unsigned long) retp;
ffff80000080a7b7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080a7bb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a7bf:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163
    //第一个参数argc
    rs->rsi=argc;
ffff80000080a7c3:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080a7c6:	48 63 d0             	movsxd rdx,eax
ffff80000080a7c9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a7cd:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165
    //第二个参数argv需要把内容从内核空间拷贝到用户堆里面
    char* p= (char *) current->mem_struct.heap_base;
ffff80000080a7d1:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a7d8:	ff ff ff 
ffff80000080a7db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a7df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a7e2:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080a7e6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:166
    for(int i=0;i<argc;i++){
ffff80000080a7ea:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080a7f1:	eb 6c                	jmp    ffff80000080a85f <sys_execve+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:167 (discriminator 3)
        strcpy(p,argv[i]);
ffff80000080a7f3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a7f6:	48 98                	cdqe   
ffff80000080a7f8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a7ff:	00 
ffff80000080a800:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a804:	48 01 d0             	add    rax,rdx
ffff80000080a807:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a80a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a80e:	48 89 d6             	mov    rsi,rdx
ffff80000080a811:	48 89 c7             	mov    rdi,rax
ffff80000080a814:	49 89 df             	mov    r15,rbx
ffff80000080a817:	48 b8 49 12 ff ff ff 	movabs rax,0xffffffffffff1249
ffff80000080a81e:	ff ff ff 
ffff80000080a821:	48 01 d8             	add    rax,rbx
ffff80000080a824:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 3)
        p+= strlen(argv[i])+1;
ffff80000080a826:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a829:	48 98                	cdqe   
ffff80000080a82b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a832:	00 
ffff80000080a833:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a837:	48 01 d0             	add    rax,rdx
ffff80000080a83a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a83d:	48 89 c7             	mov    rdi,rax
ffff80000080a840:	49 89 df             	mov    r15,rbx
ffff80000080a843:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff80000080a84a:	ff ff ff 
ffff80000080a84d:	48 01 d8             	add    rax,rbx
ffff80000080a850:	ff d0                	call   rax
ffff80000080a852:	83 c0 01             	add    eax,0x1
ffff80000080a855:	48 98                	cdqe   
ffff80000080a857:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:166 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff80000080a85b:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:166 (discriminator 1)
ffff80000080a85f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a862:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
ffff80000080a865:	7c 8c                	jl     ffff80000080a7f3 <sys_execve+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:170
    }
    rs->rdi=current->mem_struct.heap_base;
ffff80000080a867:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a86e:	ff ff ff 
ffff80000080a871:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a875:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a878:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080a87c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a880:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174
    //以下部分是临时测试代码
//    int (*pmain)(int argc,char **argv)=(int (*)(int, char **)) entry;
//    pmain(argc, (char **) rs->rdi);
    return 0;
ffff80000080a884:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175
}
ffff80000080a889:	48 83 c4 50          	add    rsp,0x50
ffff80000080a88d:	5b                   	pop    rbx
ffff80000080a88e:	41 5f                	pop    r15
ffff80000080a890:	5d                   	pop    rbp
ffff80000080a891:	c3                   	ret    

ffff80000080a892 <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177
int exec_call(char *path)
{
ffff80000080a892:	f3 0f 1e fa          	endbr64 
ffff80000080a896:	55                   	push   rbp
ffff80000080a897:	48 89 e5             	mov    rbp,rsp
ffff80000080a89a:	41 57                	push   r15
ffff80000080a89c:	53                   	push   rbx
ffff80000080a89d:	48 83 ec 20          	sub    rsp,0x20
ffff80000080a8a1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a8a1 <exec_call+0xf>
ffff80000080a8a8:	49 bb df 81 01 00 00 	movabs r11,0x181df
ffff80000080a8af:	00 00 00 
ffff80000080a8b2:	4c 01 db             	add    rbx,r11
ffff80000080a8b5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:178
    int pi= execute(path, NULL);
ffff80000080a8b9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a8bd:	be 00 00 00 00       	mov    esi,0x0
ffff80000080a8c2:	48 89 c7             	mov    rdi,rax
ffff80000080a8c5:	49 89 df             	mov    r15,rbx
ffff80000080a8c8:	48 b8 44 7a fe ff ff 	movabs rax,0xfffffffffffe7a44
ffff80000080a8cf:	ff ff ff 
ffff80000080a8d2:	48 01 d8             	add    rax,rbx
ffff80000080a8d5:	ff d0                	call   rax
ffff80000080a8d7:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:179
    int tss= _TSS_IND(pi)*8;
ffff80000080a8da:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a8dd:	01 c0                	add    eax,eax
ffff80000080a8df:	83 c0 05             	add    eax,0x5
ffff80000080a8e2:	c1 e0 03             	shl    eax,0x3
ffff80000080a8e5:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:182
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
ffff80000080a8e8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a8eb:	89 c7                	mov    edi,eax
ffff80000080a8ed:	49 89 df             	mov    r15,rbx
ffff80000080a8f0:	48 b8 66 4b fe ff ff 	movabs rax,0xfffffffffffe4b66
ffff80000080a8f7:	ff ff ff 
ffff80000080a8fa:	48 01 d8             	add    rax,rbx
ffff80000080a8fd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:183
    while(task[pi].stat != TASK_ZOMBIE);
ffff80000080a8ff:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:183 (discriminator 1)
ffff80000080a900:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080a907:	ff ff ff 
ffff80000080a90a:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080a90e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a911:	48 98                	cdqe   
ffff80000080a913:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080a91a:	48 01 d0             	add    rax,rdx
ffff80000080a91d:	48 83 c0 10          	add    rax,0x10
ffff80000080a921:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a924:	83 f8 04             	cmp    eax,0x4
ffff80000080a927:	75 d7                	jne    ffff80000080a900 <exec_call+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:184
    return task[pi].exit_code;
ffff80000080a929:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080a930:	ff ff ff 
ffff80000080a933:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080a937:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a93a:	48 98                	cdqe   
ffff80000080a93c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080a943:	48 01 d0             	add    rax,rdx
ffff80000080a946:	48 83 c0 20          	add    rax,0x20
ffff80000080a94a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:185
}
ffff80000080a94d:	48 83 c4 20          	add    rsp,0x20
ffff80000080a951:	5b                   	pop    rbx
ffff80000080a952:	41 5f                	pop    r15
ffff80000080a954:	5d                   	pop    rbp
ffff80000080a955:	c3                   	ret    

ffff80000080a956 <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:187
int proc_start()
{
ffff80000080a956:	f3 0f 1e fa          	endbr64 
ffff80000080a95a:	55                   	push   rbp
ffff80000080a95b:	48 89 e5             	mov    rbp,rsp
ffff80000080a95e:	41 57                	push   r15
ffff80000080a960:	53                   	push   rbx
ffff80000080a961:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a961 <proc_start+0xb>
ffff80000080a968:	49 bb 1f 81 01 00 00 	movabs r11,0x1811f
ffff80000080a96f:	00 00 00 
ffff80000080a972:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
ffff80000080a975:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080a97c:	ff ff ff 
ffff80000080a97f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a983:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a985:	48 98                	cdqe   
ffff80000080a987:	48 69 d0 54 03 00 00 	imul   rdx,rax,0x354
ffff80000080a98e:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080a995:	ff ff ff 
ffff80000080a998:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a99c:	48 01 d0             	add    rax,rdx
ffff80000080a99f:	48 89 c7             	mov    rdi,rax
ffff80000080a9a2:	49 89 df             	mov    r15,rbx
ffff80000080a9a5:	48 b8 51 7f fe ff ff 	movabs rax,0xfffffffffffe7f51
ffff80000080a9ac:	ff ff ff 
ffff80000080a9af:	48 01 d8             	add    rax,rbx
ffff80000080a9b2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:192
    //释放进程资源
    sys_exit(0);
ffff80000080a9b4:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080a9b9:	49 89 df             	mov    r15,rbx
ffff80000080a9bc:	48 b8 2d 55 fe ff ff 	movabs rax,0xfffffffffffe552d
ffff80000080a9c3:	ff ff ff 
ffff80000080a9c6:	48 01 d8             	add    rax,rbx
ffff80000080a9c9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:193
}
ffff80000080a9cb:	90                   	nop
ffff80000080a9cc:	5b                   	pop    rbx
ffff80000080a9cd:	41 5f                	pop    r15
ffff80000080a9cf:	5d                   	pop    rbp
ffff80000080a9d0:	c3                   	ret    

ffff80000080a9d1 <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
ffff80000080a9d1:	f3 0f 1e fa          	endbr64 
ffff80000080a9d5:	55                   	push   rbp
ffff80000080a9d6:	48 89 e5             	mov    rbp,rsp
ffff80000080a9d9:	41 57                	push   r15
ffff80000080a9db:	53                   	push   rbx
ffff80000080a9dc:	48 81 ec 10 03 00 00 	sub    rsp,0x310
ffff80000080a9e3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a9e3 <load_pe+0x12>
ffff80000080a9ea:	49 bb 9d 80 01 00 00 	movabs r11,0x1809d
ffff80000080a9f1:	00 00 00 
ffff80000080a9f4:	4c 01 db             	add    rbx,r11
ffff80000080a9f7:	48 89 bd e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:198
    // 读取文件头
    struct file *f=proc->exef;
ffff80000080a9fe:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff80000080aa05:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff80000080aa0c:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:199
    int exefno=-1;
ffff80000080aa10:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:200
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080aa17:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080aa1e:	eb 32                	jmp    ffff80000080aa52 <load_pe+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:201
        if(current->openf[i]==f)
ffff80000080aa20:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080aa27:	ff ff ff 
ffff80000080aa2a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080aa2e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080aa31:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080aa34:	48 63 d2             	movsxd rdx,edx
ffff80000080aa37:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080aa3b:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080aa40:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff80000080aa44:	75 08                	jne    ffff80000080aa4e <load_pe+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:203
        {
            exefno=i;
ffff80000080aa46:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080aa49:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:204
            break;
ffff80000080aa4c:	eb 0a                	jmp    ffff80000080aa58 <load_pe+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:200 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080aa4e:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:200 (discriminator 1)
ffff80000080aa52:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff80000080aa56:	7e c8                	jle    ffff80000080aa20 <load_pe+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:206
        }
    if(exefno==-1)return ERR;
ffff80000080aa58:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff80000080aa5c:	75 0a                	jne    ffff80000080aa68 <load_pe+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:206 (discriminator 1)
ffff80000080aa5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080aa63:	e9 6a 08 00 00       	jmp    ffff80000080b2d2 <load_pe+0x901>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:210

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
ffff80000080aa68:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
ffff80000080aa6f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aa72:	ba 44 00 00 00       	mov    edx,0x44
ffff80000080aa77:	48 89 ce             	mov    rsi,rcx
ffff80000080aa7a:	89 c7                	mov    edi,eax
ffff80000080aa7c:	49 89 df             	mov    r15,rbx
ffff80000080aa7f:	48 b8 26 ab fe ff ff 	movabs rax,0xfffffffffffeab26
ffff80000080aa86:	ff ff ff 
ffff80000080aa89:	48 01 d8             	add    rax,rbx
ffff80000080aa8c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:211
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
ffff80000080aa8e:	48 8b 85 6c fe ff ff 	mov    rax,QWORD PTR [rbp-0x194]
ffff80000080aa95:	48 89 c1             	mov    rcx,rax
ffff80000080aa98:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aa9b:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080aaa0:	48 89 ce             	mov    rsi,rcx
ffff80000080aaa3:	89 c7                	mov    edi,eax
ffff80000080aaa5:	49 89 df             	mov    r15,rbx
ffff80000080aaa8:	48 b8 c2 ac fe ff ff 	movabs rax,0xfffffffffffeacc2
ffff80000080aaaf:	ff ff ff 
ffff80000080aab2:	48 01 d8             	add    rax,rbx
ffff80000080aab5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212
    sys_read(exefno, &tnth, sizeof(tnth));
ffff80000080aab7:	48 8d 8d 20 fd ff ff 	lea    rcx,[rbp-0x2e0]
ffff80000080aabe:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aac1:	ba 0c 01 00 00       	mov    edx,0x10c
ffff80000080aac6:	48 89 ce             	mov    rsi,rcx
ffff80000080aac9:	89 c7                	mov    edi,eax
ffff80000080aacb:	49 89 df             	mov    r15,rbx
ffff80000080aace:	48 b8 26 ab fe ff ff 	movabs rax,0xfffffffffffeab26
ffff80000080aad5:	ff ff ff 
ffff80000080aad8:	48 01 d8             	add    rax,rbx
ffff80000080aadb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:215

    //是否需要移动base(先不检查)
    addr_t nbase=tnth.OptionalHeader.ImageBase;
ffff80000080aadd:	48 8b 85 54 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2ac]
ffff80000080aae4:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:216
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
ffff80000080aae8:	8b 85 74 fd ff ff    	mov    eax,DWORD PTR [rbp-0x28c]
ffff80000080aaee:	c1 e8 0c             	shr    eax,0xc
ffff80000080aaf1:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:241
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
ffff80000080aaf7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aafa:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080aaff:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ab04:	89 c7                	mov    edi,eax
ffff80000080ab06:	49 89 df             	mov    r15,rbx
ffff80000080ab09:	48 b8 c2 ac fe ff ff 	movabs rax,0xfffffffffffeacc2
ffff80000080ab10:	ff ff ff 
ffff80000080ab13:	48 01 d8             	add    rax,rbx
ffff80000080ab16:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:242
    sys_read(exefno, nbase, PAGE_SIZE);
ffff80000080ab18:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffff80000080ab1c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ab1f:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080ab24:	48 89 ce             	mov    rsi,rcx
ffff80000080ab27:	89 c7                	mov    edi,eax
ffff80000080ab29:	49 89 df             	mov    r15,rbx
ffff80000080ab2c:	48 b8 26 ab fe ff ff 	movabs rax,0xfffffffffffeab26
ffff80000080ab33:	ff ff ff 
ffff80000080ab36:	48 01 d8             	add    rax,rbx
ffff80000080ab39:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:244
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
ffff80000080ab3b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ab3f:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:245
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
ffff80000080ab46:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ab4d:	48 8b 50 3c          	mov    rdx,QWORD PTR [rax+0x3c]
ffff80000080ab51:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ab55:	48 01 d0             	add    rax,rdx
ffff80000080ab58:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:246
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
ffff80000080ab5f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ab66:	48 83 c0 04          	add    rax,0x4
ffff80000080ab6a:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:249
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
ffff80000080ab71:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ab78:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
ffff80000080ab7b:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:250
    int page_count=prog_size/4096;
ffff80000080ab81:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff80000080ab87:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000080ab8d:	85 c0                	test   eax,eax
ffff80000080ab8f:	0f 48 c2             	cmovs  eax,edx
ffff80000080ab92:	c1 f8 0c             	sar    eax,0xc
ffff80000080ab95:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:252

    addr_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
ffff80000080ab9b:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080aba2:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
ffff80000080aba5:	89 c2                	mov    edx,eax
ffff80000080aba7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080abab:	48 01 d0             	add    rax,rdx
ffff80000080abae:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:253
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
ffff80000080abb5:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff80000080abbb:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
ffff80000080abc1:	85 c0                	test   eax,eax
ffff80000080abc3:	0f 48 c2             	cmovs  eax,edx
ffff80000080abc6:	c1 f8 0a             	sar    eax,0xa
ffff80000080abc9:	89 c1                	mov    ecx,eax
ffff80000080abcb:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff80000080abd1:	99                   	cdq    
ffff80000080abd2:	c1 ea 16             	shr    edx,0x16
ffff80000080abd5:	01 d0                	add    eax,edx
ffff80000080abd7:	25 ff 03 00 00       	and    eax,0x3ff
ffff80000080abdc:	29 d0                	sub    eax,edx
ffff80000080abde:	01 c8                	add    eax,ecx
ffff80000080abe0:	85 c0                	test   eax,eax
ffff80000080abe2:	0f 95 c0             	setne  al
ffff80000080abe5:	0f b6 c0             	movzx  eax,al
ffff80000080abe8:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:254
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
ffff80000080abee:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080abf5:	48 c1 e8 15          	shr    rax,0x15
ffff80000080abf9:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:257

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
ffff80000080abff:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ac06:	89 c0                	mov    eax,eax
ffff80000080ac08:	48 05 0c 01 00 00    	add    rax,0x10c
ffff80000080ac0e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:259
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
ffff80000080ac12:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ac19:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff80000080ac1d:	0f b7 d0             	movzx  edx,ax
ffff80000080ac20:	89 d0                	mov    eax,edx
ffff80000080ac22:	c1 e0 02             	shl    eax,0x2
ffff80000080ac25:	01 d0                	add    eax,edx
ffff80000080ac27:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
ffff80000080ac2a:	05 50 01 00 00       	add    eax,0x150
ffff80000080ac2f:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:260
    int align=nth->OptionalHeader.FileAlignment;
ffff80000080ac35:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ac3c:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
ffff80000080ac3f:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261
    data_start=data_start%align?data_start-data_start%align+align:data_start;
ffff80000080ac45:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080ac4b:	99                   	cdq    
ffff80000080ac4c:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff80000080ac52:	89 d0                	mov    eax,edx
ffff80000080ac54:	85 c0                	test   eax,eax
ffff80000080ac56:	74 23                	je     ffff80000080ac7b <load_pe+0x2aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261 (discriminator 1)
ffff80000080ac58:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080ac5e:	99                   	cdq    
ffff80000080ac5f:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff80000080ac65:	89 d1                	mov    ecx,edx
ffff80000080ac67:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080ac6d:	29 c8                	sub    eax,ecx
ffff80000080ac6f:	89 c2                	mov    edx,eax
ffff80000080ac71:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
ffff80000080ac77:	01 d0                	add    eax,edx
ffff80000080ac79:	eb 06                	jmp    ffff80000080ac81 <load_pe+0x2b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261 (discriminator 2)
ffff80000080ac7b:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261 (discriminator 4)
ffff80000080ac81:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff80000080ac87:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080ac8e:	e9 85 00 00 00       	jmp    ffff80000080ad18 <load_pe+0x347>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:264
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
ffff80000080ac93:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ac97:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080ac9a:	25 00 00 00 02       	and    eax,0x2000000
ffff80000080ac9f:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:265
        if(disca)
ffff80000080aca5:	83 bd b0 fe ff ff 00 	cmp    DWORD PTR [rbp-0x150],0x0
ffff80000080acac:	75 60                	jne    ffff80000080ad0e <load_pe+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:268
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
ffff80000080acae:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080acb2:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080acb5:	89 c1                	mov    ecx,eax
ffff80000080acb7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080acba:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080acbf:	48 89 ce             	mov    rsi,rcx
ffff80000080acc2:	89 c7                	mov    edi,eax
ffff80000080acc4:	49 89 df             	mov    r15,rbx
ffff80000080acc7:	48 b8 c2 ac fe ff ff 	movabs rax,0xfffffffffffeacc2
ffff80000080acce:	ff ff ff 
ffff80000080acd1:	48 01 d8             	add    rax,rbx
ffff80000080acd4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:269
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
ffff80000080acd6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080acda:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080acdd:	89 c2                	mov    edx,eax
ffff80000080acdf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ace3:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080ace6:	89 c1                	mov    ecx,eax
ffff80000080ace8:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080acec:	48 01 c8             	add    rax,rcx
ffff80000080acef:	48 89 c1             	mov    rcx,rax
ffff80000080acf2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080acf5:	48 89 ce             	mov    rsi,rcx
ffff80000080acf8:	89 c7                	mov    edi,eax
ffff80000080acfa:	49 89 df             	mov    r15,rbx
ffff80000080acfd:	48 b8 26 ab fe ff ff 	movabs rax,0xfffffffffffeab26
ffff80000080ad04:	ff ff ff 
ffff80000080ad07:	48 01 d8             	add    rax,rbx
ffff80000080ad0a:	ff d0                	call   rax
ffff80000080ad0c:	eb 01                	jmp    ffff80000080ad0f <load_pe+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:266
            continue;
ffff80000080ad0e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff80000080ad0f:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
ffff80000080ad13:	48 83 45 e0 28       	add    QWORD PTR [rbp-0x20],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262 (discriminator 1)
ffff80000080ad18:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ad1f:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff80000080ad23:	0f b7 c0             	movzx  eax,ax
ffff80000080ad26:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff80000080ad29:	0f 8c 64 ff ff ff    	jl     ffff80000080ac93 <load_pe+0x2c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
ffff80000080ad2f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ad36:	48 05 90 00 00 00    	add    rax,0x90
ffff80000080ad3c:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:275
    if(impd->Size>0)
ffff80000080ad43:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080ad4a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080ad4d:	85 c0                	test   eax,eax
ffff80000080ad4f:	0f 84 bc 02 00 00    	je     ffff80000080b011 <load_pe+0x640>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:277
    {
        int tmpi=impd->VirtualAddress+nbase;
ffff80000080ad55:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080ad5c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080ad5e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ad62:	01 d0                	add    eax,edx
ffff80000080ad64:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:278
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
ffff80000080ad6a:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
ffff80000080ad70:	48 98                	cdqe   
ffff80000080ad72:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
        int dllp;
        while (impdes->Characteristics)
ffff80000080ad76:	e9 88 02 00 00       	jmp    ffff80000080b003 <load_pe+0x632>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:283
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
ffff80000080ad7b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ad7f:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080ad82:	89 c2                	mov    edx,eax
ffff80000080ad84:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ad88:	48 01 d0             	add    rax,rdx
ffff80000080ad8b:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:286
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
ffff80000080ad92:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff80000080ad99:	48 ba da d5 ff ff ff 	movabs rdx,0xffffffffffffd5da
ffff80000080ada0:	ff ff ff 
ffff80000080ada3:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080ada7:	48 89 d6             	mov    rsi,rdx
ffff80000080adaa:	48 89 c7             	mov    rdi,rax
ffff80000080adad:	49 89 df             	mov    r15,rbx
ffff80000080adb0:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff80000080adb7:	ff ff ff 
ffff80000080adba:	48 01 d8             	add    rax,rbx
ffff80000080adbd:	ff d0                	call   rax
ffff80000080adbf:	85 c0                	test   eax,eax
ffff80000080adc1:	75 09                	jne    ffff80000080adcc <load_pe+0x3fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:288
            {
                dllp=0x1c00000;
ffff80000080adc3:	c7 45 cc 00 00 c0 01 	mov    DWORD PTR [rbp-0x34],0x1c00000
ffff80000080adca:	eb 3d                	jmp    ffff80000080ae09 <load_pe+0x438>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:291
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
ffff80000080adcc:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff80000080add3:	48 89 c7             	mov    rdi,rax
ffff80000080add6:	48 b8 51 7f fe ff ff 	movabs rax,0xfffffffffffe7f51
ffff80000080addd:	ff ff ff 
ffff80000080ade0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ade4:	ff d0                	call   rax
ffff80000080ade6:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:294
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
ffff80000080adec:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff80000080adf2:	89 c7                	mov    edi,eax
ffff80000080adf4:	49 89 df             	mov    r15,rbx
ffff80000080adf7:	48 b8 5e 88 fe ff ff 	movabs rax,0xfffffffffffe885e
ffff80000080adfe:	ff ff ff 
ffff80000080ae01:	48 01 d8             	add    rax,rbx
ffff80000080ae04:	ff d0                	call   rax
ffff80000080ae06:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:297
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
ffff80000080ae09:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ae0c:	48 98                	cdqe   
ffff80000080ae0e:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:298
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
ffff80000080ae15:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ae18:	48 63 d0             	movsxd rdx,eax
ffff80000080ae1b:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000080ae22:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ae26:	48 01 d0             	add    rax,rdx
ffff80000080ae29:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:299
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
ffff80000080ae30:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080ae37:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
ffff80000080ae3d:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ae40:	01 d0                	add    eax,edx
ffff80000080ae42:	89 c0                	mov    eax,eax
ffff80000080ae44:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:300
            int funcn=dllexp->NumberOfNames;
ffff80000080ae4b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080ae52:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080ae55:	89 85 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:301
            char **fnames=dllexp->AddressOfNames+dllp;
ffff80000080ae5b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080ae62:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
ffff80000080ae65:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ae68:	01 d0                	add    eax,edx
ffff80000080ae6a:	89 c0                	mov    eax,eax
ffff80000080ae6c:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:302
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
ffff80000080ae73:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080ae7a:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff80000080ae7d:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ae80:	01 d0                	add    eax,edx
ffff80000080ae82:	89 c0                	mov    eax,eax
ffff80000080ae84:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:303
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
ffff80000080ae8b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080ae92:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff80000080ae95:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ae98:	01 d0                	add    eax,edx
ffff80000080ae9a:	89 c0                	mov    eax,eax
ffff80000080ae9c:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:305
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
ffff80000080aea3:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080aeaa:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080aead:	89 85 e4 fe ff ff    	mov    DWORD PTR [rbp-0x11c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:307
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
ffff80000080aeb3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080aeb7:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080aeba:	89 c2                	mov    edx,eax
ffff80000080aebc:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080aec0:	48 01 d0             	add    rax,rdx
ffff80000080aec3:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:308
            char **siataddrs=impdes->FirstThunk+nbase;
ffff80000080aec7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080aecb:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080aece:	89 c2                	mov    edx,eax
ffff80000080aed0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080aed4:	48 01 d0             	add    rax,rdx
ffff80000080aed7:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:309
            while (*iataddrs)
ffff80000080aedb:	e9 10 01 00 00       	jmp    ffff80000080aff0 <load_pe+0x61f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:312
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
ffff80000080aee0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080aee4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080aee6:	85 c0                	test   eax,eax
ffff80000080aee8:	79 43                	jns    ffff80000080af2d <load_pe+0x55c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:315
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
ffff80000080aeea:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080aeee:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080aef0:	25 ff ff ff 7f       	and    eax,0x7fffffff
ffff80000080aef5:	2b 85 e4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x11c]
ffff80000080aefb:	89 85 d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:316
                    *iataddrs=funcaddrs[ord]+dllp;
ffff80000080af01:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
ffff80000080af07:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080af0e:	00 
ffff80000080af0f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000080af16:	48 01 d0             	add    rax,rdx
ffff80000080af19:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080af1b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080af1e:	01 d0                	add    eax,edx
ffff80000080af20:	89 c2                	mov    edx,eax
ffff80000080af22:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080af26:	89 10                	mov    DWORD PTR [rax],edx
ffff80000080af28:	e9 b9 00 00 00       	jmp    ffff80000080afe6 <load_pe+0x615>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:320
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
ffff80000080af2d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080af31:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080af33:	89 c0                	mov    eax,eax
ffff80000080af35:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
                    import_by_name_p+=2;//跳过开头两字节序号
ffff80000080af3c:	48 83 85 d8 fe ff ff 	add    QWORD PTR [rbp-0x128],0x2
ffff80000080af43:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:322
                    int i=0;
ffff80000080af44:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:323
                    for(;i<funcn;i++)
ffff80000080af4b:	e9 87 00 00 00       	jmp    ffff80000080afd7 <load_pe+0x606>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:325
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
ffff80000080af50:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080af53:	48 98                	cdqe   
ffff80000080af55:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080af5c:	00 
ffff80000080af5d:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000080af64:	48 01 d0             	add    rax,rdx
ffff80000080af67:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080af6a:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffff80000080af71:	48 89 d6             	mov    rsi,rdx
ffff80000080af74:	48 89 c7             	mov    rdi,rax
ffff80000080af77:	49 89 df             	mov    r15,rbx
ffff80000080af7a:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff80000080af81:	ff ff ff 
ffff80000080af84:	48 01 d8             	add    rax,rbx
ffff80000080af87:	ff d0                	call   rax
ffff80000080af89:	85 c0                	test   eax,eax
ffff80000080af8b:	75 46                	jne    ffff80000080afd3 <load_pe+0x602>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:327
                        {
                            int ordi=funcords[i];
ffff80000080af8d:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080af90:	48 98                	cdqe   
ffff80000080af92:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffff80000080af96:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000080af9d:	48 01 d0             	add    rax,rdx
ffff80000080afa0:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080afa3:	98                   	cwde   
ffff80000080afa4:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:328
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
ffff80000080afaa:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
ffff80000080afb0:	48 98                	cdqe   
ffff80000080afb2:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080afb9:	00 
ffff80000080afba:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000080afc1:	48 01 d0             	add    rax,rdx
ffff80000080afc4:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080afc6:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080afc9:	01 d0                	add    eax,edx
ffff80000080afcb:	89 c2                	mov    edx,eax
ffff80000080afcd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080afd1:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:323
                    for(;i<funcn;i++)
ffff80000080afd3:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:323 (discriminator 1)
ffff80000080afd7:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080afda:	3b 85 04 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xfc]
ffff80000080afe0:	0f 8c 6a ff ff ff    	jl     ffff80000080af50 <load_pe+0x57f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
                        }
                    }
                }
                iataddrs++;
ffff80000080afe6:	48 83 45 c0 04       	add    QWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:333
                siataddrs++;
ffff80000080afeb:	48 83 45 b8 08       	add    QWORD PTR [rbp-0x48],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:309
            while (*iataddrs)
ffff80000080aff0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080aff4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080aff6:	85 c0                	test   eax,eax
ffff80000080aff8:	0f 85 e2 fe ff ff    	jne    ffff80000080aee0 <load_pe+0x50f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
            }
            impdes++;
ffff80000080affe:	48 83 45 d0 14       	add    QWORD PTR [rbp-0x30],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
        while (impdes->Characteristics)
ffff80000080b003:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b007:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b009:	85 c0                	test   eax,eax
ffff80000080b00b:	0f 85 6a fd ff ff    	jne    ffff80000080ad7b <load_pe+0x3aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
ffff80000080b011:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff80000080b018:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:343
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
ffff80000080b019:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080b020:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
ffff80000080b026:	85 c0                	test   eax,eax
ffff80000080b028:	0f 84 ec 00 00 00    	je     ffff80000080b11a <load_pe+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff80000080b02e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080b035:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:346
                                +(u32)nbase);
ffff80000080b03b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff80000080b03f:	01 d0                	add    eax,edx
ffff80000080b041:	89 c0                	mov    eax,eax
ffff80000080b043:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:347
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
ffff80000080b047:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b04b:	48 83 c0 40          	add    rax,0x40
ffff80000080b04f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:348
        u16 *rtype=reloc+1;
ffff80000080b053:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b057:	48 83 c0 02          	add    rax,0x2
ffff80000080b05b:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:349
        int old_base=nth->OptionalHeader.ImageBase;
ffff80000080b05f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080b066:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080b06a:	89 85 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:350
        while(relp->VirtualAddress){
ffff80000080b070:	e9 97 00 00 00       	jmp    ffff80000080b10c <load_pe+0x73b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:351
            int pgva=relp->VirtualAddress+nbase;
ffff80000080b075:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b079:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080b07b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b07f:	01 d0                	add    eax,edx
ffff80000080b081:	89 85 c8 fe ff ff    	mov    DWORD PTR [rbp-0x138],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:352
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff80000080b087:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
ffff80000080b08e:	eb 5a                	jmp    ffff80000080b0ea <load_pe+0x719>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:354
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff80000080b090:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b094:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080b097:	66 85 c0             	test   ax,ax
ffff80000080b09a:	74 49                	je     ffff80000080b0e5 <load_pe+0x714>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:355
                int *at=*reloc+pgva;//要重定位的数据的地址
ffff80000080b09c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b0a0:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080b0a3:	0f b7 d0             	movzx  edx,ax
ffff80000080b0a6:	8b 85 c8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x138]
ffff80000080b0ac:	01 d0                	add    eax,edx
ffff80000080b0ae:	48 98                	cdqe   
ffff80000080b0b0:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:356
                *at=*at-old_base+nbase;
ffff80000080b0b7:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff80000080b0be:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b0c0:	2b 85 cc fe ff ff    	sub    eax,DWORD PTR [rbp-0x134]
ffff80000080b0c6:	89 c2                	mov    edx,eax
ffff80000080b0c8:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b0cc:	01 d0                	add    eax,edx
ffff80000080b0ce:	89 c2                	mov    edx,eax
ffff80000080b0d0:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff80000080b0d7:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358
                //下一个
                reloc+=2;
ffff80000080b0d9:	48 83 45 a0 04       	add    QWORD PTR [rbp-0x60],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:359
                rtype+=2;
ffff80000080b0de:	48 83 45 98 04       	add    QWORD PTR [rbp-0x68],0x4
ffff80000080b0e3:	eb 01                	jmp    ffff80000080b0e6 <load_pe+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:354
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff80000080b0e5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:352 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff80000080b0e6:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:352 (discriminator 1)
ffff80000080b0ea:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b0ee:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080b0f1:	c1 e8 02             	shr    eax,0x2
ffff80000080b0f4:	89 c2                	mov    edx,eax
ffff80000080b0f6:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080b0f9:	39 c2                	cmp    edx,eax
ffff80000080b0fb:	77 93                	ja     ffff80000080b090 <load_pe+0x6bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:361
            }
            relp=(int)relp+0x1000;
ffff80000080b0fd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b101:	05 00 10 00 00       	add    eax,0x1000
ffff80000080b106:	48 98                	cdqe   
ffff80000080b108:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:350
        while(relp->VirtualAddress){
ffff80000080b10c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b110:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b112:	85 c0                	test   eax,eax
ffff80000080b114:	0f 85 5b ff ff ff    	jne    ffff80000080b075 <load_pe+0x6a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:367
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
ffff80000080b11a:	c7 85 00 fd ff ff 00 	mov    DWORD PTR [rbp-0x300],0x0
ffff80000080b121:	00 00 00 
ffff80000080b124:	c7 85 04 fd ff ff 00 	mov    DWORD PTR [rbp-0x2fc],0x0
ffff80000080b12b:	00 00 00 
ffff80000080b12e:	48 c7 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],0x0
ffff80000080b135:	00 00 00 00 
ffff80000080b139:	48 c7 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],0x0
ffff80000080b140:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:374
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff80000080b144:	48 8d 85 00 fd ff ff 	lea    rax,[rbp-0x300]
ffff80000080b14b:	ba 18 00 00 00       	mov    edx,0x18
ffff80000080b150:	48 89 c6             	mov    rsi,rax
ffff80000080b153:	bf 00 00 00 01       	mov    edi,0x1000000
ffff80000080b158:	49 89 df             	mov    r15,rbx
ffff80000080b15b:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff80000080b162:	ff ff ff 
ffff80000080b165:	48 01 d8             	add    rax,rbx
ffff80000080b168:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:375
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
ffff80000080b16a:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080b171:	ff ff ff 
ffff80000080b174:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b178:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b17a:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b181:	ff ff ff 
ffff80000080b184:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b188:	48 98                	cdqe   
ffff80000080b18a:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080b191:	48 01 d0             	add    rax,rdx
ffff80000080b194:	48 83 c0 20          	add    rax,0x20
ffff80000080b198:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x1000000
ffff80000080b19f:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:376
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff80000080b1a0:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080b1a7:	ff ff ff 
ffff80000080b1aa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b1ae:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b1b0:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b1b7:	ff ff ff 
ffff80000080b1ba:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b1be:	48 98                	cdqe   
ffff80000080b1c0:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080b1c7:	48 01 d0             	add    rax,rdx
ffff80000080b1ca:	48 83 c0 20          	add    rax,0x20
ffff80000080b1ce:	48 c7 40 10 00 10 00 	mov    QWORD PTR [rax+0x10],0x1001000
ffff80000080b1d5:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:378
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
ffff80000080b1d6:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080b1dd:	ff ff ff 
ffff80000080b1e0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b1e4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b1e6:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b1ed:	ff ff ff 
ffff80000080b1f0:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b1f4:	48 98                	cdqe   
ffff80000080b1f6:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080b1fd:	48 01 d0             	add    rax,rdx
ffff80000080b200:	48 83 c0 30          	add    rax,0x30
ffff80000080b204:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff80000080b20b:	7f 00 00 
ffff80000080b20e:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:385


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
ffff80000080b212:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080b219:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:386
    int ecode=main(0,NULL);
ffff80000080b220:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffff80000080b227:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b22c:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080b231:	ff d0                	call   rax
ffff80000080b233:	89 85 b4 fe ff ff    	mov    DWORD PTR [rbp-0x14c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
ffff80000080b239:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x14c]
ffff80000080b23f:	48 98                	cdqe   
ffff80000080b241:	48 c7 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],0x14
ffff80000080b248:	14 00 00 00 
ffff80000080b24c:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffff80000080b253:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
ffff80000080b25a:	00 00 00 00 
ffff80000080b25e:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0x0
ffff80000080b265:	00 00 00 00 
ffff80000080b269:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffff80000080b270:	00 00 00 00 
ffff80000080b274:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0x0
ffff80000080b27b:	00 00 00 00 
ffff80000080b27f:	48 c7 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],0x0
ffff80000080b286:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:191
        asm volatile(".byte 0x48\n"
ffff80000080b28a:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080b291:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffff80000080b298:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
ffff80000080b29f:	48 8b 95 90 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x170]
ffff80000080b2a6:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
ffff80000080b2ad:	4c 8b 85 80 fe ff ff 	mov    r8,QWORD PTR [rbp-0x180]
ffff80000080b2b4:	4c 8b 8d 78 fe ff ff 	mov    r9,QWORD PTR [rbp-0x188]
ffff80000080b2bb:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:193
        long ret=0;
ffff80000080b2be:	48 c7 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],0x0
ffff80000080b2c5:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:194
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff80000080b2c9:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390 (discriminator 1)
    //
    //不应该执行到这
    while(1);
ffff80000080b2d0:	eb fe                	jmp    ffff80000080b2d0 <load_pe+0x8ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:392 (discriminator 2)
    return task[cur_proc].exit_code;
}
ffff80000080b2d2:	48 81 c4 10 03 00 00 	add    rsp,0x310
ffff80000080b2d9:	5b                   	pop    rbx
ffff80000080b2da:	41 5f                	pop    r15
ffff80000080b2dc:	5d                   	pop    rbp
ffff80000080b2dd:	c3                   	ret    

ffff80000080b2de <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:395

int get_module_addr(int mi)
{
ffff80000080b2de:	f3 0f 1e fa          	endbr64 
ffff80000080b2e2:	55                   	push   rbp
ffff80000080b2e3:	48 89 e5             	mov    rbp,rsp
ffff80000080b2e6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b2e6 <get_module_addr+0x8>
ffff80000080b2ed:	49 bb 9a 77 01 00 00 	movabs r11,0x1779a
ffff80000080b2f4:	00 00 00 
ffff80000080b2f7:	4c 01 d8             	add    rax,r11
ffff80000080b2fa:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:396
    return modules[mi].base;
ffff80000080b2fd:	48 ba e0 fd ff ff ff 	movabs rdx,0xfffffffffffffde0
ffff80000080b304:	ff ff ff 
ffff80000080b307:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b30b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080b30e:	48 63 d2             	movsxd rdx,edx
ffff80000080b311:	8b 04 d0             	mov    eax,DWORD PTR [rax+rdx*8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397
}
ffff80000080b314:	5d                   	pop    rbp
ffff80000080b315:	c3                   	ret    

ffff80000080b316 <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:399
int dispose_library(int dlln)
{
ffff80000080b316:	f3 0f 1e fa          	endbr64 
ffff80000080b31a:	55                   	push   rbp
ffff80000080b31b:	48 89 e5             	mov    rbp,rsp
ffff80000080b31e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b31e <dispose_library+0x8>
ffff80000080b325:	49 bb 62 77 01 00 00 	movabs r11,0x17762
ffff80000080b32c:	00 00 00 
ffff80000080b32f:	4c 01 d8             	add    rax,r11
ffff80000080b332:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:400
    if(dlln<0||dlln>=MAX_DLLS)return -1;
ffff80000080b335:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000080b339:	78 09                	js     ffff80000080b344 <dispose_library+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:400 (discriminator 2)
ffff80000080b33b:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffff80000080b342:	7e 07                	jle    ffff80000080b34b <dispose_library+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:400 (discriminator 3)
ffff80000080b344:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080b349:	eb 2c                	jmp    ffff80000080b377 <dispose_library+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:405
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
ffff80000080b34b:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080b352:	ff ff ff 
ffff80000080b355:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b359:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080b35c:	48 98                	cdqe   
ffff80000080b35e:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
ffff80000080b365:	48 01 d0             	add    rax,rdx
ffff80000080b368:	48 83 c0 08          	add    rax,0x8
ffff80000080b36c:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:406
    return 0;
ffff80000080b372:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:407
}
ffff80000080b377:	5d                   	pop    rbp
ffff80000080b378:	c3                   	ret    

ffff80000080b379 <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:455

    return 0;
} */

int sys_insmod(char *path)
{
ffff80000080b379:	f3 0f 1e fa          	endbr64 
ffff80000080b37d:	55                   	push   rbp
ffff80000080b37e:	48 89 e5             	mov    rbp,rsp
ffff80000080b381:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b381 <sys_insmod+0x8>
ffff80000080b388:	49 bb ff 76 01 00 00 	movabs r11,0x176ff
ffff80000080b38f:	00 00 00 
ffff80000080b392:	4c 01 d8             	add    rax,r11
ffff80000080b395:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:457

}
ffff80000080b399:	90                   	nop
ffff80000080b39a:	5d                   	pop    rbp
ffff80000080b39b:	c3                   	ret    

ffff80000080b39c <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:459
int sys_rmmod(char *name)
{
ffff80000080b39c:	f3 0f 1e fa          	endbr64 
ffff80000080b3a0:	55                   	push   rbp
ffff80000080b3a1:	48 89 e5             	mov    rbp,rsp
ffff80000080b3a4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b3a4 <sys_rmmod+0x8>
ffff80000080b3ab:	49 bb dc 76 01 00 00 	movabs r11,0x176dc
ffff80000080b3b2:	00 00 00 
ffff80000080b3b5:	4c 01 d8             	add    rax,r11
ffff80000080b3b8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:461

}
ffff80000080b3bc:	90                   	nop
ffff80000080b3bd:	5d                   	pop    rbp
ffff80000080b3be:	c3                   	ret    

ffff80000080b3bf <load_elf>:
load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:463
//切换进程前,在execve系统调用中
addr_t load_elf(struct file *elf) {
ffff80000080b3bf:	f3 0f 1e fa          	endbr64 
ffff80000080b3c3:	55                   	push   rbp
ffff80000080b3c4:	48 89 e5             	mov    rbp,rsp
ffff80000080b3c7:	41 57                	push   r15
ffff80000080b3c9:	53                   	push   rbx
ffff80000080b3ca:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
ffff80000080b3d1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b3d1 <load_elf+0x12>
ffff80000080b3d8:	49 bb af 76 01 00 00 	movabs r11,0x176af
ffff80000080b3df:	00 00 00 
ffff80000080b3e2:	4c 01 db             	add    rbx,r11
ffff80000080b3e5:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:466
    // 读取文件头

    addr_t tmpla=KNL_BASE+0x80000000;
ffff80000080b3ec:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff80000080b3f3:	80 ff ff 
ffff80000080b3f6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:468
    //读取文件头，当前就是要加载程序的进程，所以不用搞临时映射
    addr_t pma= (addr_t) pmalloc();
ffff80000080b3fa:	49 89 df             	mov    r15,rbx
ffff80000080b3fd:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b402:	48 ba eb 02 fe ff ff 	movabs rdx,0xfffffffffffe02eb
ffff80000080b409:	ff ff ff 
ffff80000080b40c:	48 01 da             	add    rdx,rbx
ffff80000080b40f:	ff d2                	call   rdx
ffff80000080b411:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:469
    if(pma==-1)
ffff80000080b415:	48 83 7d c8 ff       	cmp    QWORD PTR [rbp-0x38],0xffffffffffffffff
ffff80000080b41a:	75 28                	jne    ffff80000080b444 <load_elf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:471
    {
        current->regs.errcode=-ENOMEM;
ffff80000080b41c:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b423:	ff ff ff 
ffff80000080b426:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b42a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b42d:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff80000080b434:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:472
        return -1;
ffff80000080b438:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080b43f:	e9 7e 03 00 00       	jmp    ffff80000080b7c2 <load_elf+0x403>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:474
    }
    smmap(pma , 0x400000, PAGE_PRESENT | PAGE_RWX | PAGE_FOR_ALL, current->pml4);
ffff80000080b444:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b44b:	ff ff ff 
ffff80000080b44e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b452:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b455:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080b45c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b460:	48 89 d1             	mov    rcx,rdx
ffff80000080b463:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080b468:	be 00 00 40 00       	mov    esi,0x400000
ffff80000080b46d:	48 89 c7             	mov    rdi,rax
ffff80000080b470:	49 89 df             	mov    r15,rbx
ffff80000080b473:	48 b8 62 f1 fd ff ff 	movabs rax,0xfffffffffffdf162
ffff80000080b47a:	ff ff ff 
ffff80000080b47d:	48 01 d8             	add    rax,rbx
ffff80000080b480:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:475
    elf->position=0;
ffff80000080b482:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b489:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:477
    //读取文件头
    elf->f_ops->read(elf, (char *) 0x400000, PAGE_4K_SIZE, &elf->position);
ffff80000080b490:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b497:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b49b:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080b49f:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff80000080b4a6:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b4ad:	48 89 d1             	mov    rcx,rdx
ffff80000080b4b0:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080b4b5:	be 00 00 40 00       	mov    esi,0x400000
ffff80000080b4ba:	48 89 c7             	mov    rdi,rax
ffff80000080b4bd:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:479

    unsigned long bin= (unsigned long) 0x400000;
ffff80000080b4c0:	48 c7 45 c0 00 00 40 	mov    QWORD PTR [rbp-0x40],0x400000
ffff80000080b4c7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:480
    Elf64_Ehdr *ehdr=(Elf64_Phdr*)bin;
ffff80000080b4c8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b4cc:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:481
    u16 entn=ehdr->e_phnum;
ffff80000080b4d0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b4d4:	0f b7 40 38          	movzx  eax,WORD PTR [rax+0x38]
ffff80000080b4d8:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:482
    u16 ents=ehdr->e_phentsize;
ffff80000080b4dc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b4e0:	0f b7 40 36          	movzx  eax,WORD PTR [rax+0x36]
ffff80000080b4e4:	66 89 45 b4          	mov    WORD PTR [rbp-0x4c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:483
    struct Elf64_Shdr* sh= (struct Elf64_Shdr *) (bin + ehdr->e_shoff);
ffff80000080b4e8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b4ec:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080b4f0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b4f4:	48 01 d0             	add    rax,rdx
ffff80000080b4f7:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:484
    Elf64_Phdr *ph= (Elf64_Phdr *) (bin + ehdr->e_phoff);
ffff80000080b4fb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b4ff:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080b503:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b507:	48 01 d0             	add    rax,rdx
ffff80000080b50a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485
    for(int i=0;i<entn;i++){
ffff80000080b50e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080b515:	e9 67 01 00 00       	jmp    ffff80000080b681 <load_elf+0x2c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:488
        //加载节
        if((ph->p_type|PT_LOAD)!=0){
            unsigned long off=ph->p_offset;
ffff80000080b51a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b51e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b522:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:489
            unsigned long fs=ph->p_filesz;
ffff80000080b526:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b52a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080b52e:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:490
            char* vptr= (char *) ph->p_vaddr;
ffff80000080b532:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b536:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b53a:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:491
            elf->position=off;
ffff80000080b53e:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080b542:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b549:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:494

            //先映射好内存
            int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080b54c:	c7 85 7c ff ff ff 05 	mov    DWORD PTR [rbp-0x84],0x5
ffff80000080b553:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:496
            if((ph->p_flags|PF_X)!=0||(ph->p_flags|PF_W)!=0)
                attr|=PAGE_RWX;
ffff80000080b556:	83 8d 7c ff ff ff 02 	or     DWORD PTR [rbp-0x84],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:497
            int pgc=fs/PAGE_4K_SIZE;
ffff80000080b55d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b561:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080b565:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:498
            if(!pgc)pgc=1;
ffff80000080b568:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff80000080b56c:	75 07                	jne    ffff80000080b575 <load_elf+0x1b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:498 (discriminator 1)
ffff80000080b56e:	c7 45 e0 01 00 00 00 	mov    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:499
            for(int j=0;j<pgc;j++){
ffff80000080b575:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080b57c:	e9 c0 00 00 00       	jmp    ffff80000080b641 <load_elf+0x282>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:500
                addr_t dest=(addr_t) (vptr + j * PAGE_4K_SIZE);
ffff80000080b581:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080b584:	c1 e0 0c             	shl    eax,0xc
ffff80000080b587:	48 63 d0             	movsxd rdx,eax
ffff80000080b58a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b58e:	48 01 d0             	add    rax,rdx
ffff80000080b591:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:501
                if(dest==0x400000)continue;
ffff80000080b598:	48 81 bd 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],0x400000
ffff80000080b59f:	00 00 40 00 
ffff80000080b5a3:	0f 84 93 00 00 00    	je     ffff80000080b63c <load_elf+0x27d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:502
                addr_t lma=pmalloc();
ffff80000080b5a9:	49 89 df             	mov    r15,rbx
ffff80000080b5ac:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b5b1:	48 ba eb 02 fe ff ff 	movabs rdx,0xfffffffffffe02eb
ffff80000080b5b8:	ff ff ff 
ffff80000080b5bb:	48 01 da             	add    rdx,rbx
ffff80000080b5be:	ff d2                	call   rdx
ffff80000080b5c0:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:503
                if(lma==-1)
ffff80000080b5c7:	48 83 bd 68 ff ff ff 	cmp    QWORD PTR [rbp-0x98],0xffffffffffffffff
ffff80000080b5ce:	ff 
ffff80000080b5cf:	75 28                	jne    ffff80000080b5f9 <load_elf+0x23a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:505
                {
                    current->regs.errcode=-ENOMEM;
ffff80000080b5d1:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b5d8:	ff ff ff 
ffff80000080b5db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5e2:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff80000080b5e9:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:506
                    return -1;
ffff80000080b5ed:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080b5f4:	e9 c9 01 00 00       	jmp    ffff80000080b7c2 <load_elf+0x403>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:508
                }
                smmap(lma , dest, attr, current->pml4);
ffff80000080b5f9:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b600:	ff ff ff 
ffff80000080b603:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b607:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b60a:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff80000080b611:	8b 95 7c ff ff ff    	mov    edx,DWORD PTR [rbp-0x84]
ffff80000080b617:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
ffff80000080b61e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080b625:	48 89 c7             	mov    rdi,rax
ffff80000080b628:	49 89 df             	mov    r15,rbx
ffff80000080b62b:	48 b8 62 f1 fd ff ff 	movabs rax,0xfffffffffffdf162
ffff80000080b632:	ff ff ff 
ffff80000080b635:	48 01 d8             	add    rax,rbx
ffff80000080b638:	ff d0                	call   rax
ffff80000080b63a:	eb 01                	jmp    ffff80000080b63d <load_elf+0x27e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:501
                if(dest==0x400000)continue;
ffff80000080b63c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:499 (discriminator 2)
            for(int j=0;j<pgc;j++){
ffff80000080b63d:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:499 (discriminator 1)
ffff80000080b641:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080b644:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff80000080b647:	0f 8c 34 ff ff ff    	jl     ffff80000080b581 <load_elf+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:511
            }
            //读取
            elf->f_ops->read(elf,vptr,fs,&elf->position);
ffff80000080b64d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b654:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b658:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080b65c:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffff80000080b663:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080b667:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
ffff80000080b66b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b672:	48 89 c7             	mov    rdi,rax
ffff80000080b675:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:514

        }
        ph++;
ffff80000080b678:	48 83 45 e8 38       	add    QWORD PTR [rbp-0x18],0x38
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485
    for(int i=0;i<entn;i++){
ffff80000080b67d:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485 (discriminator 1)
ffff80000080b681:	0f b7 45 b6          	movzx  eax,WORD PTR [rbp-0x4a]
ffff80000080b685:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080b688:	0f 8c 8c fe ff ff    	jl     ffff80000080b51a <load_elf+0x15b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:517
    }
    //初始化堆
    chunk_header hdrtmp={
ffff80000080b68e:	c7 85 50 ff ff ff 00 	mov    DWORD PTR [rbp-0xb0],0x0
ffff80000080b695:	00 00 00 
ffff80000080b698:	c7 85 54 ff ff ff 00 	mov    DWORD PTR [rbp-0xac],0x0
ffff80000080b69f:	00 00 00 
ffff80000080b6a2:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
ffff80000080b6a9:	00 00 00 00 
ffff80000080b6ad:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x0
ffff80000080b6b4:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:525
            .pgn=0,
            .prev=NULL
    };
    //空堆
    //分配堆
    addr_t lma=pmalloc();
ffff80000080b6b8:	49 89 df             	mov    r15,rbx
ffff80000080b6bb:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b6c0:	48 ba eb 02 fe ff ff 	movabs rdx,0xfffffffffffe02eb
ffff80000080b6c7:	ff ff ff 
ffff80000080b6ca:	48 01 da             	add    rdx,rbx
ffff80000080b6cd:	ff d2                	call   rdx
ffff80000080b6cf:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:526
    if(lma==-1)
ffff80000080b6d3:	48 83 7d a0 ff       	cmp    QWORD PTR [rbp-0x60],0xffffffffffffffff
ffff80000080b6d8:	75 28                	jne    ffff80000080b702 <load_elf+0x343>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:528
    {
        current->regs.errcode=-ENOMEM;
ffff80000080b6da:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b6e1:	ff ff ff 
ffff80000080b6e4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b6e8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6eb:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff80000080b6f2:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:529
        return -1;
ffff80000080b6f6:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080b6fd:	e9 c0 00 00 00       	jmp    ffff80000080b7c2 <load_elf+0x403>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:531
    }
    smmap(lma, HEAP_BASE, PAGE_PRESENT | PAGE_FOR_ALL | PAGE_RWX, current->pml4);
ffff80000080b702:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b709:	ff ff ff 
ffff80000080b70c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b710:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b713:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080b71a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b71e:	48 89 d1             	mov    rcx,rdx
ffff80000080b721:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080b726:	be 00 00 00 01       	mov    esi,0x1000000
ffff80000080b72b:	48 89 c7             	mov    rdi,rax
ffff80000080b72e:	49 89 df             	mov    r15,rbx
ffff80000080b731:	48 b8 62 f1 fd ff ff 	movabs rax,0xfffffffffffdf162
ffff80000080b738:	ff ff ff 
ffff80000080b73b:	48 01 d8             	add    rax,rbx
ffff80000080b73e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:532
    memset((unsigned char *) HEAP_BASE, 0, CHUNK_SIZE);
ffff80000080b740:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080b745:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b74a:	bf 00 00 00 01       	mov    edi,0x1000000
ffff80000080b74f:	49 89 df             	mov    r15,rbx
ffff80000080b752:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000080b759:	ff ff ff 
ffff80000080b75c:	48 01 d8             	add    rax,rbx
ffff80000080b75f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533
    current->mem_struct.heap_base=HEAP_BASE;
ffff80000080b761:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b768:	ff ff ff 
ffff80000080b76b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b76f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b772:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff80000080b779:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:534
    current->mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff80000080b77a:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b781:	ff ff ff 
ffff80000080b784:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b788:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b78b:	48 c7 40 30 00 10 00 	mov    QWORD PTR [rax+0x30],0x1001000
ffff80000080b792:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:536
    //设置栈
    current->mem_struct.stack_top=STACK_TOP;
ffff80000080b793:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b79a:	ff ff ff 
ffff80000080b79d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b7a1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b7a4:	48 bf 00 f0 ff ff ff 	movabs rdi,0x7ffffffff000
ffff80000080b7ab:	7f 00 00 
ffff80000080b7ae:	48 89 78 40          	mov    QWORD PTR [rax+0x40],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:537
    addr_t entry=ehdr->e_entry;
ffff80000080b7b2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b7b6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b7ba:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:539
    //从系统调用返回
    return entry;
ffff80000080b7be:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:540 (discriminator 1)
ffff80000080b7c2:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
ffff80000080b7c9:	5b                   	pop    rbx
ffff80000080b7ca:	41 5f                	pop    r15
ffff80000080b7cc:	5d                   	pop    rbp
ffff80000080b7cd:	c3                   	ret    
ffff80000080b7ce:	66 90                	xchg   ax,ax

ffff80000080b7d0 <_syscall>:
_syscall():
ffff80000080b7d0:	fa                   	cli    
ffff80000080b7d1:	55                   	push   rbp
ffff80000080b7d2:	48 bd 00 80 10 00 00 	movabs rbp,0xffff800000108000
ffff80000080b7d9:	80 ff ff 
ffff80000080b7dc:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
ffff80000080b7e0:	48 8b 65 24          	mov    rsp,QWORD PTR [rbp+0x24]
ffff80000080b7e4:	6a 2b                	push   0x2b
ffff80000080b7e6:	54                   	push   rsp
ffff80000080b7e7:	9c                   	pushf  
ffff80000080b7e8:	6a 33                	push   0x33
ffff80000080b7ea:	51                   	push   rcx
ffff80000080b7eb:	50                   	push   rax
ffff80000080b7ec:	53                   	push   rbx
ffff80000080b7ed:	51                   	push   rcx
ffff80000080b7ee:	52                   	push   rdx
ffff80000080b7ef:	57                   	push   rdi
ffff80000080b7f0:	56                   	push   rsi
ffff80000080b7f1:	41 50                	push   r8
ffff80000080b7f3:	41 51                	push   r9
ffff80000080b7f5:	41 52                	push   r10
ffff80000080b7f7:	41 53                	push   r11
ffff80000080b7f9:	41 54                	push   r12
ffff80000080b7fb:	41 55                	push   r13
ffff80000080b7fd:	41 56                	push   r14
ffff80000080b7ff:	41 57                	push   r15
ffff80000080b801:	66 8c c0             	mov    ax,es
ffff80000080b804:	50                   	push   rax
ffff80000080b805:	66 8c d8             	mov    ax,ds
ffff80000080b808:	50                   	push   rax
ffff80000080b809:	66 b8 10 00          	mov    ax,0x10
ffff80000080b80d:	8e c0                	mov    es,eax
ffff80000080b80f:	8e d8                	mov    ds,eax
ffff80000080b811:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
ffff80000080b816:	41 53                	push   r11
ffff80000080b818:	51                   	push   rcx
ffff80000080b819:	49 87 ca             	xchg   r10,rcx
ffff80000080b81c:	57                   	push   rdi
ffff80000080b81d:	48 bf 48 85 40 00 00 	movabs rdi,0xffff800000408548
ffff80000080b824:	80 ff ff 
ffff80000080b827:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
ffff80000080b82a:	4c 89 97 6c 02 00 00 	mov    QWORD PTR [rdi+0x26c],r10
ffff80000080b831:	5f                   	pop    rdi
ffff80000080b832:	e8 ea 52 ff ff       	call   ffff800000800b21 <syscall>

ffff80000080b837 <_syscall_sysret>:
_syscall_sysret():
ffff80000080b837:	4c 87 d1             	xchg   rcx,r10
ffff80000080b83a:	59                   	pop    rcx
ffff80000080b83b:	41 5b                	pop    r11
ffff80000080b83d:	58                   	pop    rax
ffff80000080b83e:	8e d8                	mov    ds,eax
ffff80000080b840:	58                   	pop    rax
ffff80000080b841:	8e c0                	mov    es,eax
ffff80000080b843:	41 5f                	pop    r15
ffff80000080b845:	41 5e                	pop    r14
ffff80000080b847:	41 5d                	pop    r13
ffff80000080b849:	41 5c                	pop    r12
ffff80000080b84b:	41 5b                	pop    r11
ffff80000080b84d:	41 5a                	pop    r10
ffff80000080b84f:	41 59                	pop    r9
ffff80000080b851:	41 58                	pop    r8
ffff80000080b853:	5e                   	pop    rsi
ffff80000080b854:	5f                   	pop    rdi
ffff80000080b855:	5a                   	pop    rdx
ffff80000080b856:	59                   	pop    rcx
ffff80000080b857:	5b                   	pop    rbx
ffff80000080b858:	48 83 c4 08          	add    rsp,0x8
ffff80000080b85c:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
ffff80000080b860:	5d                   	pop    rbp
ffff80000080b861:	fb                   	sti    
ffff80000080b862:	48 0f 07             	sysretq 

ffff80000080b865 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:27
static u32 font_width_bytes;
static u8 *glyph_table;
static u32 bytes_per_glyph, glyph_nr;
int font_size=1;
void init_framebuffer()
{
ffff80000080b865:	f3 0f 1e fa          	endbr64 
ffff80000080b869:	55                   	push   rbp
ffff80000080b86a:	48 89 e5             	mov    rbp,rsp
ffff80000080b86d:	41 57                	push   r15
ffff80000080b86f:	53                   	push   rbx
ffff80000080b870:	48 83 ec 50          	sub    rsp,0x50
ffff80000080b874:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b874 <init_framebuffer+0xf>
ffff80000080b87b:	49 bb 0c 72 01 00 00 	movabs r11,0x1720c
ffff80000080b882:	00 00 00 
ffff80000080b885:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
ffff80000080b888:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b88f:	ff ff ff 
ffff80000080b892:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b896:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080b899:	89 c0                	mov    eax,eax
ffff80000080b89b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:30
    size_t h=framebuffer.common.framebuffer_height;
ffff80000080b89f:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b8a6:	ff ff ff 
ffff80000080b8a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b8ad:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080b8b0:	89 c0                	mov    eax,eax
ffff80000080b8b2:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
ffff80000080b8b6:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b8bd:	ff ff ff 
ffff80000080b8c0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b8c4:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080b8c8:	c0 e8 03             	shr    al,0x3
ffff80000080b8cb:	0f b6 c0             	movzx  eax,al
ffff80000080b8ce:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t inter=framebuffer.common.framebuffer_pitch;
ffff80000080b8d2:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b8d9:	ff ff ff 
ffff80000080b8dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b8e0:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080b8e3:	89 c0                	mov    eax,eax
ffff80000080b8e5:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t pc=w*h;
ffff80000080b8e9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b8ed:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
ffff80000080b8f2:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t size=h*inter;
ffff80000080b8f6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b8fa:	48 0f af 45 b8       	imul   rax,QWORD PTR [rbp-0x48]
ffff80000080b8ff:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    int pgc=size/PAGE_SIZE;
ffff80000080b903:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b907:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080b90e:	48 85 c0             	test   rax,rax
ffff80000080b911:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080b915:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080b919:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    addr_t p=FRAMEBUFFER_ADDR;
ffff80000080b91c:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080b923:	80 ff ff 
ffff80000080b926:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    addr_t pp=framebuffer.common.framebuffer_addr;
ffff80000080b92a:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b931:	ff ff ff 
ffff80000080b934:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b938:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b93c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    for (size_t i = 0; i < pgc; i++)
ffff80000080b940:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080b947:	00 
ffff80000080b948:	eb 44                	jmp    ffff80000080b98e <init_framebuffer+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
ffff80000080b94a:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080b94e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b952:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
ffff80000080b959:	80 ff ff 
ffff80000080b95c:	48 89 d1             	mov    rcx,rdx
ffff80000080b95f:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080b964:	48 89 c7             	mov    rdi,rax
ffff80000080b967:	49 89 df             	mov    r15,rbx
ffff80000080b96a:	48 b8 62 f1 fd ff ff 	movabs rax,0xfffffffffffdf162
ffff80000080b971:	ff ff ff 
ffff80000080b974:	48 01 d8             	add    rax,rbx
ffff80000080b977:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:41 (discriminator 3)
        pp+=PAGE_SIZE;
ffff80000080b979:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080b980:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
        p+=PAGE_SIZE;
ffff80000080b981:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffff80000080b988:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
ffff80000080b989:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 1)
ffff80000080b98e:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080b991:	48 98                	cdqe   
ffff80000080b993:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080b997:	7c b1                	jl     ffff80000080b94a <init_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:46
    }
    
    
}
ffff80000080b999:	90                   	nop
ffff80000080b99a:	90                   	nop
ffff80000080b99b:	48 83 c4 50          	add    rsp,0x50
ffff80000080b99f:	5b                   	pop    rbx
ffff80000080b9a0:	41 5f                	pop    r15
ffff80000080b9a2:	5d                   	pop    rbp
ffff80000080b9a3:	c3                   	ret    

ffff80000080b9a4 <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
void init_font(){
ffff80000080b9a4:	f3 0f 1e fa          	endbr64 
ffff80000080b9a8:	55                   	push   rbp
ffff80000080b9a9:	48 89 e5             	mov    rbp,rsp
ffff80000080b9ac:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080b9ac <init_font+0x8>
ffff80000080b9b3:	49 bb d4 70 01 00 00 	movabs r11,0x170d4
ffff80000080b9ba:	00 00 00 
ffff80000080b9bd:	4c 01 d9             	add    rcx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
ffff80000080b9c0:	48 b8 a0 8b bf ff ff 	movabs rax,0xffffffffffbf8ba0
ffff80000080b9c7:	ff ff ff 
ffff80000080b9ca:	48 ba 98 fd ff ff ff 	movabs rdx,0xfffffffffffffd98
ffff80000080b9d1:	ff ff ff 
ffff80000080b9d4:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff80000080b9d8:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:50

    font_width_bytes = (boot_font->width + 7) / 8;
ffff80000080b9dc:	48 b8 a0 8b bf ff ff 	movabs rax,0xffffffffffbf8ba0
ffff80000080b9e3:	ff ff ff 
ffff80000080b9e6:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b9ea:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080b9ed:	83 c0 07             	add    eax,0x7
ffff80000080b9f0:	c1 e8 03             	shr    eax,0x3
ffff80000080b9f3:	89 c2                	mov    edx,eax
ffff80000080b9f5:	48 b8 b0 8b bf ff ff 	movabs rax,0xffffffffffbf8bb0
ffff80000080b9fc:	ff ff ff 
ffff80000080b9ff:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51
    font_width = font_width_bytes * 8;
ffff80000080ba02:	48 b8 b0 8b bf ff ff 	movabs rax,0xffffffffffbf8bb0
ffff80000080ba09:	ff ff ff 
ffff80000080ba0c:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080ba0f:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff80000080ba16:	48 b8 a8 8b bf ff ff 	movabs rax,0xffffffffffbf8ba8
ffff80000080ba1d:	ff ff ff 
ffff80000080ba20:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_height = boot_font->height;
ffff80000080ba23:	48 b8 a0 8b bf ff ff 	movabs rax,0xffffffffffbf8ba0
ffff80000080ba2a:	ff ff ff 
ffff80000080ba2d:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080ba31:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080ba34:	48 ba ac 8b bf ff ff 	movabs rdx,0xffffffffffbf8bac
ffff80000080ba3b:	ff ff ff 
ffff80000080ba3e:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:54

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
ffff80000080ba41:	48 b8 a0 8b bf ff ff 	movabs rax,0xffffffffffbf8ba0
ffff80000080ba48:	ff ff ff 
ffff80000080ba4b:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080ba4f:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080ba52:	89 c2                	mov    edx,eax
ffff80000080ba54:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff80000080ba5b:	ff ff ff 
ffff80000080ba5e:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080ba62:	48 01 c2             	add    rdx,rax
ffff80000080ba65:	48 b8 b8 8b bf ff ff 	movabs rax,0xffffffffffbf8bb8
ffff80000080ba6c:	ff ff ff 
ffff80000080ba6f:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55
    glyph_nr = boot_font->glyph_nr;
ffff80000080ba73:	48 b8 a0 8b bf ff ff 	movabs rax,0xffffffffffbf8ba0
ffff80000080ba7a:	ff ff ff 
ffff80000080ba7d:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080ba81:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080ba84:	48 ba c4 8b bf ff ff 	movabs rdx,0xffffffffffbf8bc4
ffff80000080ba8b:	ff ff ff 
ffff80000080ba8e:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    bytes_per_glyph = boot_font->bytes_per_glyph;
ffff80000080ba91:	48 b8 a0 8b bf ff ff 	movabs rax,0xffffffffffbf8ba0
ffff80000080ba98:	ff ff ff 
ffff80000080ba9b:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080ba9f:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080baa2:	48 ba c0 8b bf ff ff 	movabs rdx,0xffffffffffbf8bc0
ffff80000080baa9:	ff ff ff 
ffff80000080baac:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:58

    fb_cursor_x = fb_cursor_y = 0;
ffff80000080baaf:	48 b8 90 8b bf ff ff 	movabs rax,0xffffffffffbf8b90
ffff80000080bab6:	ff ff ff 
ffff80000080bab9:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
ffff80000080bac0:	48 b8 90 8b bf ff ff 	movabs rax,0xffffffffffbf8b90
ffff80000080bac7:	ff ff ff 
ffff80000080baca:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080bacd:	48 ba 8c 8b bf ff ff 	movabs rdx,0xffffffffffbf8b8c
ffff80000080bad4:	ff ff ff 
ffff80000080bad7:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
ffff80000080bada:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080bae1:	ff ff ff 
ffff80000080bae4:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080bae8:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080baeb:	48 ba a8 8b bf ff ff 	movabs rdx,0xffffffffffbf8ba8
ffff80000080baf2:	ff ff ff 
ffff80000080baf5:	8b 34 11             	mov    esi,DWORD PTR [rcx+rdx*1]
ffff80000080baf8:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080bafd:	f7 f6                	div    esi
ffff80000080baff:	89 c2                	mov    edx,eax
ffff80000080bb01:	48 b8 94 8b bf ff ff 	movabs rax,0xffffffffffbf8b94
ffff80000080bb08:	ff ff ff 
ffff80000080bb0b:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
ffff80000080bb0e:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080bb15:	ff ff ff 
ffff80000080bb18:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080bb1c:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080bb1f:	48 ba ac 8b bf ff ff 	movabs rdx,0xffffffffffbf8bac
ffff80000080bb26:	ff ff ff 
ffff80000080bb29:	8b 3c 11             	mov    edi,DWORD PTR [rcx+rdx*1]
ffff80000080bb2c:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080bb31:	f7 f7                	div    edi
ffff80000080bb33:	89 c2                	mov    edx,eax
ffff80000080bb35:	48 b8 98 8b bf ff ff 	movabs rax,0xffffffffffbf8b98
ffff80000080bb3c:	ff ff ff 
ffff80000080bb3f:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    font_size=1;
ffff80000080bb42:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080bb49:	ff ff ff 
ffff80000080bb4c:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080bb50:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
}
ffff80000080bb56:	90                   	nop
ffff80000080bb57:	5d                   	pop    rbp
ffff80000080bb58:	c3                   	ret    

ffff80000080bb59 <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
ffff80000080bb59:	f3 0f 1e fa          	endbr64 
ffff80000080bb5d:	55                   	push   rbp
ffff80000080bb5e:	48 89 e5             	mov    rbp,rsp
ffff80000080bb61:	53                   	push   rbx
ffff80000080bb62:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bb62 <set_framebuffer+0x9>
ffff80000080bb69:	49 bb 1e 6f 01 00 00 	movabs r11,0x16f1e
ffff80000080bb70:	00 00 00 
ffff80000080bb73:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:65
    framebuffer=tag;
ffff80000080bb76:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bb7d:	ff ff ff 
ffff80000080bb80:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080bb84:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff80000080bb88:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
ffff80000080bb8c:	48 89 08             	mov    QWORD PTR [rax],rcx
ffff80000080bb8f:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
ffff80000080bb93:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff80000080bb97:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
ffff80000080bb9b:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffff80000080bb9f:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffff80000080bba3:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff80000080bba7:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
}
ffff80000080bbab:	90                   	nop
ffff80000080bbac:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080bbb0:	c9                   	leave  
ffff80000080bbb1:	c3                   	ret    

ffff80000080bbb2 <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68

void fill_rect(int x,int y,int w,int h,unsigned int color){
ffff80000080bbb2:	f3 0f 1e fa          	endbr64 
ffff80000080bbb6:	55                   	push   rbp
ffff80000080bbb7:	48 89 e5             	mov    rbp,rsp
ffff80000080bbba:	4c 8d 0d f9 ff ff ff 	lea    r9,[rip+0xfffffffffffffff9]        # ffff80000080bbba <fill_rect+0x8>
ffff80000080bbc1:	49 bb c6 6e 01 00 00 	movabs r11,0x16ec6
ffff80000080bbc8:	00 00 00 
ffff80000080bbcb:	4d 01 d9             	add    r9,r11
ffff80000080bbce:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080bbd1:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080bbd4:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080bbd7:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff80000080bbda:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
ffff80000080bbde:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080bbe5:	80 ff ff 
ffff80000080bbe8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
ffff80000080bbec:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bbef:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffff80000080bbf2:	e9 82 00 00 00       	jmp    ffff80000080bc79 <fill_rect+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72
        for(int px=y;px<w+y;px++){
ffff80000080bbf7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bbfa:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffff80000080bbfd:	eb 69                	jmp    ffff80000080bc68 <fill_rect+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080bbff:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080bc06:	ff ff ff 
ffff80000080bc09:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080bc0d:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff80000080bc10:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080bc13:	0f af c2             	imul   eax,edx
ffff80000080bc16:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:74 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080bc18:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080bc1f:	ff ff ff 
ffff80000080bc22:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080bc26:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080bc2a:	0f b6 c0             	movzx  eax,al
ffff80000080bc2d:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
ffff80000080bc31:	8d 50 07             	lea    edx,[rax+0x7]
ffff80000080bc34:	85 c0                	test   eax,eax
ffff80000080bc36:	0f 48 c2             	cmovs  eax,edx
ffff80000080bc39:	c1 f8 03             	sar    eax,0x3
ffff80000080bc3c:	48 98                	cdqe   
ffff80000080bc3e:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080bc42:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080bc49:	80 ff ff 
ffff80000080bc4c:	48 01 d0             	add    rax,rdx
ffff80000080bc4f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 3)
            fb=(unsigned int*)ptr;
ffff80000080bc53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bc57:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
            *fb=color;
ffff80000080bc5b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bc5f:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080bc62:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 3)
        for(int px=y;px<w+y;px++){
ffff80000080bc64:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 1)
ffff80000080bc68:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080bc6b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bc6e:	01 d0                	add    eax,edx
ffff80000080bc70:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
ffff80000080bc73:	7c 8a                	jl     ffff80000080bbff <fill_rect+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 2)
    for(int py=x;py<h+x;py++){
ffff80000080bc75:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 1)
ffff80000080bc79:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080bc7c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bc7f:	01 d0                	add    eax,edx
ffff80000080bc81:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffff80000080bc84:	0f 8c 6d ff ff ff    	jl     ffff80000080bbf7 <fill_rect+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79
        }
    }
}
ffff80000080bc8a:	90                   	nop
ffff80000080bc8b:	90                   	nop
ffff80000080bc8c:	5d                   	pop    rbp
ffff80000080bc8d:	c3                   	ret    

ffff80000080bc8e <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:82
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
ffff80000080bc8e:	f3 0f 1e fa          	endbr64 
ffff80000080bc92:	55                   	push   rbp
ffff80000080bc93:	48 89 e5             	mov    rbp,rsp
ffff80000080bc96:	41 57                	push   r15
ffff80000080bc98:	53                   	push   rbx
ffff80000080bc99:	48 83 ec 30          	sub    rsp,0x30
ffff80000080bc9d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080bc9d <draw_text+0xf>
ffff80000080bca4:	49 bb e3 6d 01 00 00 	movabs r11,0x16de3
ffff80000080bcab:	00 00 00 
ffff80000080bcae:	4c 01 db             	add    rbx,r11
ffff80000080bcb1:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080bcb4:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080bcb7:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080bcba:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
    int tx=x;
ffff80000080bcbe:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bcc1:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080bcc4:	eb 75                	jmp    ffff80000080bd3b <draw_text+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
    {
        if(*str=='\n')
ffff80000080bcc6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bcca:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bccd:	3c 0a                	cmp    al,0xa
ffff80000080bccf:	75 23                	jne    ffff80000080bcf4 <draw_text+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
        {
            y+=font_height*size;
ffff80000080bcd1:	48 b8 ac 8b bf ff ff 	movabs rax,0xffffffffffbf8bac
ffff80000080bcd8:	ff ff ff 
ffff80000080bcdb:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080bcde:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080bce1:	0f af d0             	imul   edx,eax
ffff80000080bce4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bce7:	01 d0                	add    eax,edx
ffff80000080bce9:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:89
            tx=x;
ffff80000080bcec:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bcef:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080bcf2:	eb 42                	jmp    ffff80000080bd36 <draw_text+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
        }
        else
        {
            draw_letter(tx,y,size,*str);
ffff80000080bcf4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bcf8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bcfb:	0f be c8             	movsx  ecx,al
ffff80000080bcfe:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080bd01:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
ffff80000080bd04:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080bd07:	89 c7                	mov    edi,eax
ffff80000080bd09:	49 89 df             	mov    r15,rbx
ffff80000080bd0c:	48 b8 d1 92 fe ff ff 	movabs rax,0xfffffffffffe92d1
ffff80000080bd13:	ff ff ff 
ffff80000080bd16:	48 01 d8             	add    rax,rbx
ffff80000080bd19:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:94
            tx+=size*font_width;
ffff80000080bd1b:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080bd1e:	48 b8 a8 8b bf ff ff 	movabs rax,0xffffffffffbf8ba8
ffff80000080bd25:	ff ff ff 
ffff80000080bd28:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080bd2b:	0f af d0             	imul   edx,eax
ffff80000080bd2e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080bd31:	01 d0                	add    eax,edx
ffff80000080bd33:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:96
        }
        str++;
ffff80000080bd36:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080bd3b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bd3f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bd42:	84 c0                	test   al,al
ffff80000080bd44:	75 80                	jne    ffff80000080bcc6 <draw_text+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
    }
}
ffff80000080bd46:	90                   	nop
ffff80000080bd47:	90                   	nop
ffff80000080bd48:	48 83 c4 30          	add    rsp,0x30
ffff80000080bd4c:	5b                   	pop    rbx
ffff80000080bd4d:	41 5f                	pop    r15
ffff80000080bd4f:	5d                   	pop    rbp
ffff80000080bd50:	c3                   	ret    

ffff80000080bd51 <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:99
void draw_letter(int x, volatile int y, int size, char c) {
ffff80000080bd51:	f3 0f 1e fa          	endbr64 
ffff80000080bd55:	55                   	push   rbp
ffff80000080bd56:	48 89 e5             	mov    rbp,rsp
ffff80000080bd59:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bd59 <draw_letter+0x8>
ffff80000080bd60:	49 bb 27 6d 01 00 00 	movabs r11,0x16d27
ffff80000080bd67:	00 00 00 
ffff80000080bd6a:	4c 01 d8             	add    rax,r11
ffff80000080bd6d:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080bd70:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
ffff80000080bd73:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
ffff80000080bd76:	89 ca                	mov    edx,ecx
ffff80000080bd78:	88 55 c0             	mov    BYTE PTR [rbp-0x40],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
    u8 *glyph = glyph_table;
ffff80000080bd7b:	48 ba b8 8b bf ff ff 	movabs rdx,0xffffffffffbf8bb8
ffff80000080bd82:	ff ff ff 
ffff80000080bd85:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bd89:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:101
    if (c < glyph_nr) {
ffff80000080bd8d:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080bd91:	48 ba c4 8b bf ff ff 	movabs rdx,0xffffffffffbf8bc4
ffff80000080bd98:	ff ff ff 
ffff80000080bd9b:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bd9e:	39 d1                	cmp    ecx,edx
ffff80000080bda0:	73 1a                	jae    ffff80000080bdbc <draw_letter+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
        glyph += c * bytes_per_glyph;
ffff80000080bda2:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080bda6:	48 ba c0 8b bf ff ff 	movabs rdx,0xffffffffffbf8bc0
ffff80000080bdad:	ff ff ff 
ffff80000080bdb0:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bdb3:	0f af d1             	imul   edx,ecx
ffff80000080bdb6:	89 d2                	mov    edx,edx
ffff80000080bdb8:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080bdbc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080bdc3:	e9 f8 00 00 00       	jmp    ffff80000080bec0 <draw_letter+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        u8 mask = 1 << 7;
ffff80000080bdc8:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080bdcc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080bdd3:	e9 bb 00 00 00       	jmp    ffff80000080be93 <draw_letter+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
            int px=x+ch_x*size;
ffff80000080bdd8:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080bddb:	89 d1                	mov    ecx,edx
ffff80000080bddd:	0f af 4d ec          	imul   ecx,DWORD PTR [rbp-0x14]
ffff80000080bde1:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080bde4:	01 ca                	add    edx,ecx
ffff80000080bde6:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
            int py=y+ch_y*size;
ffff80000080bde9:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080bdec:	89 d1                	mov    ecx,edx
ffff80000080bdee:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
ffff80000080bdf2:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff80000080bdf5:	01 ca                	add    edx,ecx
ffff80000080bdf7:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080bdfa:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080be01:	ff ff ff 
ffff80000080be04:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080be08:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080be0b:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080be0e:	0f af d1             	imul   edx,ecx
ffff80000080be11:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112
                     +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080be13:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080be1a:	ff ff ff 
ffff80000080be1d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080be21:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080be25:	0f b6 d2             	movzx  edx,dl
ffff80000080be28:	0f af 55 e8          	imul   edx,DWORD PTR [rbp-0x18]
ffff80000080be2c:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080be2f:	85 d2                	test   edx,edx
ffff80000080be31:	0f 48 d1             	cmovs  edx,ecx
ffff80000080be34:	c1 fa 03             	sar    edx,0x3
ffff80000080be37:	48 63 d2             	movsxd rdx,edx
ffff80000080be3a:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080be3e:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080be45:	80 ff ff 
ffff80000080be48:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080be4b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            if ((*(glyph + ch_x / 8) & mask) != 0) {
ffff80000080be4f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080be52:	c1 ea 03             	shr    edx,0x3
ffff80000080be55:	89 d1                	mov    ecx,edx
ffff80000080be57:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080be5b:	48 01 ca             	add    rdx,rcx
ffff80000080be5e:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080be61:	22 55 f3             	and    dl,BYTE PTR [rbp-0xd]
ffff80000080be64:	84 d2                	test   dl,dl
ffff80000080be66:	74 0c                	je     ffff80000080be74 <draw_letter+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
                *ptr=-1;
ffff80000080be68:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080be6c:	c7 02 ff ff ff ff    	mov    DWORD PTR [rdx],0xffffffff
ffff80000080be72:	eb 0a                	jmp    ffff80000080be7e <draw_letter+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
            } else {
                *ptr=0;
ffff80000080be74:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080be78:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:119
            }

            mask >>= 1;
ffff80000080be7e:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            if (ch_x % 8 == 0) {
ffff80000080be81:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080be84:	83 e2 07             	and    edx,0x7
ffff80000080be87:	85 d2                	test   edx,edx
ffff80000080be89:	75 04                	jne    ffff80000080be8f <draw_letter+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:121
                mask = 1 << 7;
ffff80000080be8b:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080be8f:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 1)
ffff80000080be93:	48 ba a8 8b bf ff ff 	movabs rdx,0xffffffffffbf8ba8
ffff80000080be9a:	ff ff ff 
ffff80000080be9d:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bea0:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080bea3:	0f 82 2f ff ff ff    	jb     ffff80000080bdd8 <draw_letter+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
ffff80000080bea9:	48 ba b0 8b bf ff ff 	movabs rdx,0xffffffffffbf8bb0
ffff80000080beb0:	ff ff ff 
ffff80000080beb3:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080beb6:	89 d2                	mov    edx,edx
ffff80000080beb8:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080bebc:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 1)
ffff80000080bec0:	48 ba ac 8b bf ff ff 	movabs rdx,0xffffffffffbf8bac
ffff80000080bec7:	ff ff ff 
ffff80000080beca:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080becd:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080bed0:	0f 82 f2 fe ff ff    	jb     ffff80000080bdc8 <draw_letter+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:127
    }
}
ffff80000080bed6:	90                   	nop
ffff80000080bed7:	90                   	nop
ffff80000080bed8:	5d                   	pop    rbp
ffff80000080bed9:	c3                   	ret    

ffff80000080beda <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129
//向上滚动一个像素
void scr_up(){
ffff80000080beda:	f3 0f 1e fa          	endbr64 
ffff80000080bede:	55                   	push   rbp
ffff80000080bedf:	48 89 e5             	mov    rbp,rsp
ffff80000080bee2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bee2 <scr_up+0x8>
ffff80000080bee9:	49 bb 9e 6b 01 00 00 	movabs r11,0x16b9e
ffff80000080bef0:	00 00 00 
ffff80000080bef3:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080bef6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080befd:	e9 ad 00 00 00       	jmp    ffff80000080bfaf <scr_up+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080bf02:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080bf09:	e9 81 00 00 00       	jmp    ffff80000080bf8f <scr_up+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
                    dy*framebuffer.common.framebuffer_pitch
ffff80000080bf0e:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bf15:	ff ff ff 
ffff80000080bf18:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bf1c:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080bf1f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080bf22:	0f af d1             	imul   edx,ecx
ffff80000080bf25:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134 (discriminator 3)
                    +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080bf27:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bf2e:	ff ff ff 
ffff80000080bf31:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bf35:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080bf39:	0f b6 d2             	movzx  edx,dl
ffff80000080bf3c:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080bf40:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080bf43:	85 d2                	test   edx,edx
ffff80000080bf45:	0f 48 d1             	cmovs  edx,ecx
ffff80000080bf48:	c1 fa 03             	sar    edx,0x3
ffff80000080bf4b:	48 63 d2             	movsxd rdx,edx
ffff80000080bf4e:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080bf52:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080bf59:	80 ff ff 
ffff80000080bf5c:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:132 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
ffff80000080bf5f:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135 (discriminator 3)
            *p=*(p+framebuffer.common.framebuffer_pitch);
ffff80000080bf63:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bf6a:	ff ff ff 
ffff80000080bf6d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bf71:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080bf74:	89 d1                	mov    ecx,edx
ffff80000080bf76:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bf7a:	48 01 ca             	add    rdx,rcx
ffff80000080bf7d:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080bf80:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bf84:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136 (discriminator 3)
            p++;
ffff80000080bf86:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 3)
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080bf8b:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 1)
ffff80000080bf8f:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bf96:	ff ff ff 
ffff80000080bf99:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bf9d:	8b 4a 14             	mov    ecx,DWORD PTR [rdx+0x14]
ffff80000080bfa0:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080bfa3:	39 d1                	cmp    ecx,edx
ffff80000080bfa5:	0f 87 63 ff ff ff    	ja     ffff80000080bf0e <scr_up+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 2)
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080bfab:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 1)
ffff80000080bfaf:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bfb6:	ff ff ff 
ffff80000080bfb9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bfbd:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080bfc0:	8d 4a ff             	lea    ecx,[rdx-0x1]
ffff80000080bfc3:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080bfc6:	39 d1                	cmp    ecx,edx
ffff80000080bfc8:	0f 87 34 ff ff ff    	ja     ffff80000080bf02 <scr_up+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:142
        }

    }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
ffff80000080bfce:	90                   	nop
ffff80000080bfcf:	90                   	nop
ffff80000080bfd0:	5d                   	pop    rbp
ffff80000080bfd1:	c3                   	ret    

ffff80000080bfd2 <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:143
void scr_down(){
ffff80000080bfd2:	f3 0f 1e fa          	endbr64 
ffff80000080bfd6:	55                   	push   rbp
ffff80000080bfd7:	48 89 e5             	mov    rbp,rsp
ffff80000080bfda:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bfda <scr_down+0x8>
ffff80000080bfe1:	49 bb a6 6a 01 00 00 	movabs r11,0x16aa6
ffff80000080bfe8:	00 00 00 
ffff80000080bfeb:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080bfee:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffff80000080bff5:	e9 aa 00 00 00       	jmp    ffff80000080c0a4 <scr_down+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080bffa:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080c001:	e9 82 00 00 00       	jmp    ffff80000080c088 <scr_down+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080c006:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080c00d:	ff ff ff 
ffff80000080c010:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c014:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080c017:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080c01a:	0f af d1             	imul   edx,ecx
ffff80000080c01d:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:147 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080c01f:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080c026:	ff ff ff 
ffff80000080c029:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c02d:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080c031:	0f b6 d2             	movzx  edx,dl
ffff80000080c034:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080c038:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080c03b:	85 d2                	test   edx,edx
ffff80000080c03d:	0f 48 d1             	cmovs  edx,ecx
ffff80000080c040:	c1 fa 03             	sar    edx,0x3
ffff80000080c043:	48 63 d2             	movsxd rdx,edx
ffff80000080c046:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080c04a:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080c051:	80 ff ff 
ffff80000080c054:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080c057:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:148 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
ffff80000080c05b:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080c062:	ff ff ff 
ffff80000080c065:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c069:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080c06c:	89 d2                	mov    edx,edx
ffff80000080c06e:	48 89 d1             	mov    rcx,rdx
ffff80000080c071:	48 f7 d9             	neg    rcx
ffff80000080c074:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c078:	48 01 ca             	add    rdx,rcx
ffff80000080c07b:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080c07e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c082:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080c084:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 1)
ffff80000080c088:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080c08b:	48 ba 94 8b bf ff ff 	movabs rdx,0xffffffffffbf8b94
ffff80000080c092:	ff ff ff 
ffff80000080c095:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080c098:	39 d1                	cmp    ecx,edx
ffff80000080c09a:	0f 82 66 ff ff ff    	jb     ffff80000080c006 <scr_down+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080c0a0:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 1)
ffff80000080c0a4:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080c0a7:	48 ba 98 8b bf ff ff 	movabs rdx,0xffffffffffbf8b98
ffff80000080c0ae:	ff ff ff 
ffff80000080c0b1:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080c0b4:	39 d1                	cmp    ecx,edx
ffff80000080c0b6:	0f 82 3e ff ff ff    	jb     ffff80000080bffa <scr_down+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
        }

    }
}
ffff80000080c0bc:	90                   	nop
ffff80000080c0bd:	90                   	nop
ffff80000080c0be:	5d                   	pop    rbp
ffff80000080c0bf:	c3                   	ret    

ffff80000080c0c0 <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
void print(char* s){
ffff80000080c0c0:	f3 0f 1e fa          	endbr64 
ffff80000080c0c4:	55                   	push   rbp
ffff80000080c0c5:	48 89 e5             	mov    rbp,rsp
ffff80000080c0c8:	41 57                	push   r15
ffff80000080c0ca:	53                   	push   rbx
ffff80000080c0cb:	48 83 ec 10          	sub    rsp,0x10
ffff80000080c0cf:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c0cf <print+0xf>
ffff80000080c0d6:	49 bb b1 69 01 00 00 	movabs r11,0x169b1
ffff80000080c0dd:	00 00 00 
ffff80000080c0e0:	4c 01 db             	add    rbx,r11
ffff80000080c0e3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080c0e7:	e9 55 01 00 00       	jmp    ffff80000080c241 <print+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
ffff80000080c0ec:	48 b8 8c 8b bf ff ff 	movabs rax,0xffffffffffbf8b8c
ffff80000080c0f3:	ff ff ff 
ffff80000080c0f6:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080c0f9:	48 b8 94 8b bf ff ff 	movabs rax,0xffffffffffbf8b94
ffff80000080c100:	ff ff ff 
ffff80000080c103:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c106:	39 c2                	cmp    edx,eax
ffff80000080c108:	77 0b                	ja     ffff80000080c115 <print+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 1)
ffff80000080c10a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c10e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c111:	3c 0a                	cmp    al,0xa
ffff80000080c113:	75 2e                	jne    ffff80000080c143 <print+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157
        {
            fb_cursor_y+=1;
ffff80000080c115:	48 b8 90 8b bf ff ff 	movabs rax,0xffffffffffbf8b90
ffff80000080c11c:	ff ff ff 
ffff80000080c11f:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c122:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080c125:	48 b8 90 8b bf ff ff 	movabs rax,0xffffffffffbf8b90
ffff80000080c12c:	ff ff ff 
ffff80000080c12f:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:158
            fb_cursor_x=0;
ffff80000080c132:	48 b8 8c 8b bf ff ff 	movabs rax,0xffffffffffbf8b8c
ffff80000080c139:	ff ff ff 
ffff80000080c13c:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        }
        if(*s=='\n')continue;
ffff80000080c143:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c147:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c14a:	3c 0a                	cmp    al,0xa
ffff80000080c14c:	0f 84 e9 00 00 00    	je     ffff80000080c23b <print+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        if(fb_cursor_y>=max_ch_nr_y-1){
ffff80000080c152:	48 b8 98 8b bf ff ff 	movabs rax,0xffffffffffbf8b98
ffff80000080c159:	ff ff ff 
ffff80000080c15c:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c15f:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080c162:	48 b8 90 8b bf ff ff 	movabs rax,0xffffffffffbf8b90
ffff80000080c169:	ff ff ff 
ffff80000080c16c:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c16f:	39 c2                	cmp    edx,eax
ffff80000080c171:	77 11                	ja     ffff80000080c184 <print+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:165
//            for(int i=0;i<font_height*font_size;i++)
////                scr_up();
////            fb_cursor_y=max_ch_nr_y-1;
            fb_cursor_y=0;
ffff80000080c173:	48 b8 90 8b bf ff ff 	movabs rax,0xffffffffffbf8b90
ffff80000080c17a:	ff ff ff 
ffff80000080c17d:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
ffff80000080c184:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c188:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c18b:	0f be d0             	movsx  edx,al
ffff80000080c18e:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c195:	ff ff ff 
ffff80000080c198:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c19c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c19e:	48 b9 90 8b bf ff ff 	movabs rcx,0xffffffffffbf8b90
ffff80000080c1a5:	ff ff ff 
ffff80000080c1a8:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080c1ab:	48 b9 ac 8b bf ff ff 	movabs rcx,0xffffffffffbf8bac
ffff80000080c1b2:	ff ff ff 
ffff80000080c1b5:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080c1b8:	0f af f1             	imul   esi,ecx
ffff80000080c1bb:	48 b9 00 fe ff ff ff 	movabs rcx,0xfffffffffffffe00
ffff80000080c1c2:	ff ff ff 
ffff80000080c1c5:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080c1c9:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080c1cb:	0f af ce             	imul   ecx,esi
ffff80000080c1ce:	41 89 c8             	mov    r8d,ecx
ffff80000080c1d1:	48 b9 8c 8b bf ff ff 	movabs rcx,0xffffffffffbf8b8c
ffff80000080c1d8:	ff ff ff 
ffff80000080c1db:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080c1de:	48 b9 a8 8b bf ff ff 	movabs rcx,0xffffffffffbf8ba8
ffff80000080c1e5:	ff ff ff 
ffff80000080c1e8:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080c1eb:	0f af f1             	imul   esi,ecx
ffff80000080c1ee:	48 b9 00 fe ff ff ff 	movabs rcx,0xfffffffffffffe00
ffff80000080c1f5:	ff ff ff 
ffff80000080c1f8:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080c1fc:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080c1fe:	0f af ce             	imul   ecx,esi
ffff80000080c201:	89 cf                	mov    edi,ecx
ffff80000080c203:	89 d1                	mov    ecx,edx
ffff80000080c205:	89 c2                	mov    edx,eax
ffff80000080c207:	44 89 c6             	mov    esi,r8d
ffff80000080c20a:	49 89 df             	mov    r15,rbx
ffff80000080c20d:	48 b8 d1 92 fe ff ff 	movabs rax,0xfffffffffffe92d1
ffff80000080c214:	ff ff ff 
ffff80000080c217:	48 01 d8             	add    rax,rbx
ffff80000080c21a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:168
        fb_cursor_x+=1;
ffff80000080c21c:	48 b8 8c 8b bf ff ff 	movabs rax,0xffffffffffbf8b8c
ffff80000080c223:	ff ff ff 
ffff80000080c226:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c229:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080c22c:	48 b8 8c 8b bf ff ff 	movabs rax,0xffffffffffbf8b8c
ffff80000080c233:	ff ff ff 
ffff80000080c236:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
ffff80000080c239:	eb 01                	jmp    ffff80000080c23c <print+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        if(*s=='\n')continue;
ffff80000080c23b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080c23c:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
ffff80000080c241:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c245:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c248:	84 c0                	test   al,al
ffff80000080c24a:	0f 85 9c fe ff ff    	jne    ffff80000080c0ec <print+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
    }
}
ffff80000080c250:	90                   	nop
ffff80000080c251:	90                   	nop
ffff80000080c252:	48 83 c4 10          	add    rsp,0x10
ffff80000080c256:	5b                   	pop    rbx
ffff80000080c257:	41 5f                	pop    r15
ffff80000080c259:	5d                   	pop    rbp
ffff80000080c25a:	c3                   	ret    

ffff80000080c25b <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080c25b:	f3 0f 1e fa          	endbr64 
ffff80000080c25f:	55                   	push   rbp
ffff80000080c260:	48 89 e5             	mov    rbp,rsp
ffff80000080c263:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c263 <open_framebuffer+0x8>
ffff80000080c26a:	49 bb 1d 68 01 00 00 	movabs r11,0x1681d
ffff80000080c271:	00 00 00 
ffff80000080c274:	4c 01 d8             	add    rax,r11
ffff80000080c277:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c27b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
    inode->f_ops=&framebuffer_fops;
ffff80000080c27f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c283:	48 b9 28 fe ff ff ff 	movabs rcx,0xfffffffffffffe28
ffff80000080c28a:	ff ff ff 
ffff80000080c28d:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080c291:	48 89 4a 20          	mov    QWORD PTR [rdx+0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
    filp->f_ops=&framebuffer_fops;
ffff80000080c295:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c299:	48 b9 28 fe ff ff ff 	movabs rcx,0xfffffffffffffe28
ffff80000080c2a0:	ff ff ff 
ffff80000080c2a3:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080c2a7:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
    return 1;
ffff80000080c2ab:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:179
}
ffff80000080c2b0:	5d                   	pop    rbp
ffff80000080c2b1:	c3                   	ret    

ffff80000080c2b2 <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
long close_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080c2b2:	f3 0f 1e fa          	endbr64 
ffff80000080c2b6:	55                   	push   rbp
ffff80000080c2b7:	48 89 e5             	mov    rbp,rsp
ffff80000080c2ba:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c2ba <close_framebuffer+0x8>
ffff80000080c2c1:	49 bb c6 67 01 00 00 	movabs r11,0x167c6
ffff80000080c2c8:	00 00 00 
ffff80000080c2cb:	4c 01 d8             	add    rax,r11
ffff80000080c2ce:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c2d2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:182

}
ffff80000080c2d6:	90                   	nop
ffff80000080c2d7:	5d                   	pop    rbp
ffff80000080c2d8:	c3                   	ret    

ffff80000080c2d9 <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:183
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080c2d9:	f3 0f 1e fa          	endbr64 
ffff80000080c2dd:	55                   	push   rbp
ffff80000080c2de:	48 89 e5             	mov    rbp,rsp
ffff80000080c2e1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c2e1 <read_framebuffer+0x8>
ffff80000080c2e8:	49 bb 9f 67 01 00 00 	movabs r11,0x1679f
ffff80000080c2ef:	00 00 00 
ffff80000080c2f2:	4c 01 d8             	add    rax,r11
ffff80000080c2f5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c2f9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c2fd:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c301:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185

}
ffff80000080c305:	90                   	nop
ffff80000080c306:	5d                   	pop    rbp
ffff80000080c307:	c3                   	ret    

ffff80000080c308 <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080c308:	f3 0f 1e fa          	endbr64 
ffff80000080c30c:	55                   	push   rbp
ffff80000080c30d:	48 89 e5             	mov    rbp,rsp
ffff80000080c310:	41 57                	push   r15
ffff80000080c312:	53                   	push   rbx
ffff80000080c313:	48 83 ec 40          	sub    rsp,0x40
ffff80000080c317:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c317 <write_framebuffer+0xf>
ffff80000080c31e:	49 bb 69 67 01 00 00 	movabs r11,0x16769
ffff80000080c325:	00 00 00 
ffff80000080c328:	4c 01 db             	add    rbx,r11
ffff80000080c32b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080c32f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080c333:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080c337:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    char *tmp= (char*) kmalloc();
ffff80000080c33b:	49 89 df             	mov    r15,rbx
ffff80000080c33e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c343:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000080c34a:	ff ff ff 
ffff80000080c34d:	48 01 da             	add    rdx,rbx
ffff80000080c350:	ff d2                	call   rdx
ffff80000080c352:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    int c=count/(PAGE_4K_SIZE-1),p=0;
ffff80000080c356:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080c35a:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
ffff80000080c361:	01 10 00 
ffff80000080c364:	48 89 c8             	mov    rax,rcx
ffff80000080c367:	48 f7 e2             	mul    rdx
ffff80000080c36a:	48 89 c8             	mov    rax,rcx
ffff80000080c36d:	48 29 d0             	sub    rax,rdx
ffff80000080c370:	48 d1 e8             	shr    rax,1
ffff80000080c373:	48 01 d0             	add    rax,rdx
ffff80000080c376:	48 c1 e8 0b          	shr    rax,0xb
ffff80000080c37a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080c37d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
ffff80000080c384:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080c38b:	eb 60                	jmp    ffff80000080c3ed <write_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:191 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
ffff80000080c38d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080c390:	48 63 d0             	movsxd rdx,eax
ffff80000080c393:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c397:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080c39b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c39f:	ba ff 0f 00 00       	mov    edx,0xfff
ffff80000080c3a4:	48 89 ce             	mov    rsi,rcx
ffff80000080c3a7:	48 89 c7             	mov    rdi,rax
ffff80000080c3aa:	49 89 df             	mov    r15,rbx
ffff80000080c3ad:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff80000080c3b4:	ff ff ff 
ffff80000080c3b7:	48 01 d8             	add    rax,rbx
ffff80000080c3ba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
ffff80000080c3bc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c3c0:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080c3c6:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193 (discriminator 7)
        print(tmp);
ffff80000080c3c9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c3cd:	48 89 c7             	mov    rdi,rax
ffff80000080c3d0:	49 89 df             	mov    r15,rbx
ffff80000080c3d3:	48 b8 40 96 fe ff ff 	movabs rax,0xfffffffffffe9640
ffff80000080c3da:	ff ff ff 
ffff80000080c3dd:	48 01 d8             	add    rax,rbx
ffff80000080c3e0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:194 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
ffff80000080c3e2:	81 45 ec ff 0f 00 00 	add    DWORD PTR [rbp-0x14],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
ffff80000080c3e9:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 1)
ffff80000080c3ed:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080c3f1:	74 05                	je     ffff80000080c3f8 <write_framebuffer+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 3)
ffff80000080c3f3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c3f6:	eb 05                	jmp    ffff80000080c3fd <write_framebuffer+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 4)
ffff80000080c3f8:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 6)
ffff80000080c3fd:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
ffff80000080c400:	7f 8b                	jg     ffff80000080c38d <write_framebuffer+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
    }
    kmfree(tmp);
ffff80000080c402:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c406:	48 89 c7             	mov    rdi,rax
ffff80000080c409:	49 89 df             	mov    r15,rbx
ffff80000080c40c:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080c413:	ff ff ff 
ffff80000080c416:	48 01 d8             	add    rax,rbx
ffff80000080c419:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    return 0;
ffff80000080c41b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
}
ffff80000080c420:	48 83 c4 40          	add    rsp,0x40
ffff80000080c424:	5b                   	pop    rbx
ffff80000080c425:	41 5f                	pop    r15
ffff80000080c427:	5d                   	pop    rbp
ffff80000080c428:	c3                   	ret    

ffff80000080c429 <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:199
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080c429:	f3 0f 1e fa          	endbr64 
ffff80000080c42d:	55                   	push   rbp
ffff80000080c42e:	48 89 e5             	mov    rbp,rsp
ffff80000080c431:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c431 <ioctl_framebuffer+0x8>
ffff80000080c438:	49 bb 4f 66 01 00 00 	movabs r11,0x1664f
ffff80000080c43f:	00 00 00 
ffff80000080c442:	4c 01 d8             	add    rax,r11
ffff80000080c445:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c449:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c44d:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c451:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201

}
ffff80000080c455:	90                   	nop
ffff80000080c456:	5d                   	pop    rbp
ffff80000080c457:	c3                   	ret    

ffff80000080c458 <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:13
#include "log.h"
#include "mem.h"
#include "str.h"

struct dir_entry * path_walk(char * name,unsigned long flags)
{
ffff80000080c458:	f3 0f 1e fa          	endbr64 
ffff80000080c45c:	55                   	push   rbp
ffff80000080c45d:	48 89 e5             	mov    rbp,rsp
ffff80000080c460:	41 57                	push   r15
ffff80000080c462:	53                   	push   rbx
ffff80000080c463:	48 83 ec 70          	sub    rsp,0x70
ffff80000080c467:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c467 <path_walk+0xf>
ffff80000080c46e:	49 bb 19 66 01 00 00 	movabs r11,0x16619
ffff80000080c475:	00 00 00 
ffff80000080c478:	4c 01 db             	add    rbx,r11
ffff80000080c47b:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080c47f:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:14
    char * tmpname = NULL;
ffff80000080c483:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080c48a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:15
    int tmpnamelen = 0;
ffff80000080c48b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:16
    struct dir_entry * parent = root_sb->root;
ffff80000080c492:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080c499:	ff ff ff 
ffff80000080c49c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c4a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c4a3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c4a6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:17
    struct dir_entry * path = NULL;
ffff80000080c4aa:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080c4b1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:19

    while(*name == '/')
ffff80000080c4b2:	eb 05                	jmp    ffff80000080c4b9 <path_walk+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20
        name++;
ffff80000080c4b4:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:19
    while(*name == '/')
ffff80000080c4b9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c4bd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c4c0:	3c 2f                	cmp    al,0x2f
ffff80000080c4c2:	74 f0                	je     ffff80000080c4b4 <path_walk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:22

    if(!*name)
ffff80000080c4c4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c4c8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c4cb:	84 c0                	test   al,al
ffff80000080c4cd:	75 09                	jne    ffff80000080c4d8 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:24
    {
        return parent;
ffff80000080c4cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c4d3:	e9 06 03 00 00       	jmp    ffff80000080c7de <path_walk+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:29
    }

    for(;;)
    {
        tmpname = name;
ffff80000080c4d8:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c4dc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        while(*name && (*name != '/'))
ffff80000080c4e0:	eb 05                	jmp    ffff80000080c4e7 <path_walk+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
            name++;
ffff80000080c4e2:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        while(*name && (*name != '/'))
ffff80000080c4e7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c4eb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c4ee:	84 c0                	test   al,al
ffff80000080c4f0:	74 0b                	je     ffff80000080c4fd <path_walk+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30 (discriminator 1)
ffff80000080c4f2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c4f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c4f9:	3c 2f                	cmp    al,0x2f
ffff80000080c4fb:	75 e5                	jne    ffff80000080c4e2 <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
        tmpnamelen = name - tmpname;
ffff80000080c4fd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c501:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
ffff80000080c505:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:34

        path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff80000080c508:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c50d:	bf 58 00 00 00       	mov    edi,0x58
ffff80000080c512:	49 89 df             	mov    r15,rbx
ffff80000080c515:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c51a:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000080c521:	ff ff ff 
ffff80000080c524:	48 01 da             	add    rdx,rbx
ffff80000080c527:	ff d2                	call   rdx
ffff80000080c529:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:35
        memset(path,0,sizeof(struct dir_entry));
ffff80000080c52d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c531:	ba 58 00 00 00       	mov    edx,0x58
ffff80000080c536:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c53b:	48 89 c7             	mov    rdi,rax
ffff80000080c53e:	49 89 df             	mov    r15,rbx
ffff80000080c541:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000080c548:	ff ff ff 
ffff80000080c54b:	48 01 d8             	add    rax,rbx
ffff80000080c54e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:37

        path->name = kmalloc();
ffff80000080c550:	49 89 df             	mov    r15,rbx
ffff80000080c553:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c558:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000080c55f:	ff ff ff 
ffff80000080c562:	48 01 da             	add    rdx,rbx
ffff80000080c565:	ff d2                	call   rdx
ffff80000080c567:	48 89 c2             	mov    rdx,rax
ffff80000080c56a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c56e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38
        memset(path->name,0,tmpnamelen+1);
ffff80000080c571:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c574:	83 c0 01             	add    eax,0x1
ffff80000080c577:	89 c2                	mov    edx,eax
ffff80000080c579:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c57d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c580:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c585:	48 89 c7             	mov    rdi,rax
ffff80000080c588:	49 89 df             	mov    r15,rbx
ffff80000080c58b:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000080c592:	ff ff ff 
ffff80000080c595:	48 01 d8             	add    rax,rbx
ffff80000080c598:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:39
        memcpy(path->name,tmpname,tmpnamelen);
ffff80000080c59a:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080c59d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c5a1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c5a4:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080c5a8:	48 89 ce             	mov    rsi,rcx
ffff80000080c5ab:	48 89 c7             	mov    rdi,rax
ffff80000080c5ae:	49 89 df             	mov    r15,rbx
ffff80000080c5b1:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff80000080c5b8:	ff ff ff 
ffff80000080c5bb:	48 01 d8             	add    rax,rbx
ffff80000080c5be:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        path->name_length = tmpnamelen;
ffff80000080c5c0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c5c4:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080c5c7:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:42

        path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
ffff80000080c5ca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c5ce:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c5d2:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080c5d6:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080c5da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c5de:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c5e2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080c5e6:	48 89 d6             	mov    rsi,rdx
ffff80000080c5e9:	48 89 c7             	mov    rdi,rax
ffff80000080c5ec:	ff d1                	call   rcx
ffff80000080c5ee:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:43
        if(path == NULL)
ffff80000080c5f2:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffff80000080c5f7:	75 71                	jne    ffff80000080c66a <path_walk+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:45
        {
            printf("can not find file or dir:%s\n",path->name);
ffff80000080c5f9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c5fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c600:	48 89 c6             	mov    rsi,rax
ffff80000080c603:	48 b8 e2 d5 ff ff ff 	movabs rax,0xffffffffffffd5e2
ffff80000080c60a:	ff ff ff 
ffff80000080c60d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c611:	48 89 c7             	mov    rdi,rax
ffff80000080c614:	49 89 df             	mov    r15,rbx
ffff80000080c617:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c61c:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080c623:	ff ff ff 
ffff80000080c626:	48 01 da             	add    rdx,rbx
ffff80000080c629:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:46
            kmfree(path->name);
ffff80000080c62b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c62f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c632:	48 89 c7             	mov    rdi,rax
ffff80000080c635:	49 89 df             	mov    r15,rbx
ffff80000080c638:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080c63f:	ff ff ff 
ffff80000080c642:	48 01 d8             	add    rax,rbx
ffff80000080c645:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:47
            kmfree(path);
ffff80000080c647:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c64b:	48 89 c7             	mov    rdi,rax
ffff80000080c64e:	49 89 df             	mov    r15,rbx
ffff80000080c651:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080c658:	ff ff ff 
ffff80000080c65b:	48 01 d8             	add    rax,rbx
ffff80000080c65e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:48
            return NULL;
ffff80000080c660:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c665:	e9 74 01 00 00       	jmp    ffff80000080c7de <path_walk+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:53
        }

//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
        path->parent = parent;
ffff80000080c66a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c66e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c672:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:56
        //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
        //对于/dev这样的文件夹，lookup返回的就是链表里的dentry，data会一样
        list_add(&parent->subdirs_list,&path->child_node);
ffff80000080c676:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c67a:	48 83 c0 10          	add    rax,0x10
ffff80000080c67e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c682:	48 83 c2 28          	add    rdx,0x28
ffff80000080c686:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080c68a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080c68e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c692:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c696:	48 85 c0             	test   rax,rax
ffff80000080c699:	75 58                	jne    ffff80000080c6f3 <path_walk+0x29b>
ffff80000080c69b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c69f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff80000080c6a3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c6a7:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080c6ab:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c6af:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080c6b3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c6b7:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080c6bb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c6bf:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080c6c3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080c6c6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c6ca:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c6ce:	48 85 c0             	test   rax,rax
ffff80000080c6d1:	74 0f                	je     ffff80000080c6e2 <path_walk+0x28a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080c6d3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c6d7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c6db:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080c6df:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080c6e2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c6e6:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080c6ea:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080c6ee:	e9 9c 00 00 00       	jmp    ffff80000080c78f <path_walk+0x337>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080c6f3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c6f7:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080c6fb:	eb 21                	jmp    ffff80000080c71e <path_walk+0x2c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080c6fd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c701:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080c705:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c709:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c70d:	48 39 c2             	cmp    rdx,rax
ffff80000080c710:	74 7c                	je     ffff80000080c78e <path_walk+0x336>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080c712:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c716:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c71a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080c71e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c722:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c726:	48 85 c0             	test   rax,rax
ffff80000080c729:	74 0e                	je     ffff80000080c739 <path_walk+0x2e1>
ffff80000080c72b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c72f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c733:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080c737:	75 c4                	jne    ffff80000080c6fd <path_walk+0x2a5>
ffff80000080c739:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c73d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff80000080c741:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c745:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080c749:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c74d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080c751:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c755:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080c759:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c75d:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080c761:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080c764:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c768:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c76c:	48 85 c0             	test   rax,rax
ffff80000080c76f:	74 0f                	je     ffff80000080c780 <path_walk+0x328>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080c771:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c775:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c779:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080c77d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080c780:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c784:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080c788:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080c78c:	eb 01                	jmp    ffff80000080c78f <path_walk+0x337>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080c78e:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:58

        if(!*name)
ffff80000080c78f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c793:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c796:	84 c0                	test   al,al
ffff80000080c798:	74 2a                	je     ffff80000080c7c4 <path_walk+0x36c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
            goto last_component;
        while(*name == '/')
ffff80000080c79a:	eb 05                	jmp    ffff80000080c7a1 <path_walk+0x349>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
            name++;
ffff80000080c79c:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
        while(*name == '/')
ffff80000080c7a1:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c7a5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c7a8:	3c 2f                	cmp    al,0x2f
ffff80000080c7aa:	74 f0                	je     ffff80000080c79c <path_walk+0x344>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62
        if(!*name)
ffff80000080c7ac:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c7b0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c7b3:	84 c0                	test   al,al
ffff80000080c7b5:	74 10                	je     ffff80000080c7c7 <path_walk+0x36f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:65
            goto last_slash;

        parent = path;
ffff80000080c7b7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c7bb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:29
        tmpname = name;
ffff80000080c7bf:	e9 14 fd ff ff       	jmp    ffff80000080c4d8 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59
            goto last_component;
ffff80000080c7c4:	90                   	nop
ffff80000080c7c5:	eb 01                	jmp    ffff80000080c7c8 <path_walk+0x370>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:63
            goto last_slash;
ffff80000080c7c7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:71
    }

    last_slash:
    last_component:

    if(flags & 1)
ffff80000080c7c8:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080c7cc:	83 e0 01             	and    eax,0x1
ffff80000080c7cf:	48 85 c0             	test   rax,rax
ffff80000080c7d2:	74 06                	je     ffff80000080c7da <path_walk+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:73
    {
        return parent;
ffff80000080c7d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c7d8:	eb 04                	jmp    ffff80000080c7de <path_walk+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:76
    }

    return path;
ffff80000080c7da:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:77
}
ffff80000080c7de:	48 83 c4 70          	add    rsp,0x70
ffff80000080c7e2:	5b                   	pop    rbx
ffff80000080c7e3:	41 5f                	pop    r15
ffff80000080c7e5:	5d                   	pop    rbp
ffff80000080c7e6:	c3                   	ret    

ffff80000080c7e7 <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:81


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
ffff80000080c7e7:	f3 0f 1e fa          	endbr64 
ffff80000080c7eb:	55                   	push   rbp
ffff80000080c7ec:	48 89 e5             	mov    rbp,rsp
ffff80000080c7ef:	41 57                	push   r15
ffff80000080c7f1:	48 83 ec 48          	sub    rsp,0x48
ffff80000080c7f5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c7f5 <fill_dentry+0xe>
ffff80000080c7fc:	49 bb 8b 62 01 00 00 	movabs r11,0x1628b
ffff80000080c803:	00 00 00 
ffff80000080c806:	4c 01 d8             	add    rax,r11
ffff80000080c809:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080c80d:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080c811:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080c815:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff80000080c819:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:82
    struct dirent* dent = (struct dirent*)buf;
ffff80000080c81d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c821:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:84

    if((unsigned long)buf < PAGE_4K_SIZE)
ffff80000080c825:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c829:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff80000080c830:	77 07                	ja     ffff80000080c839 <fill_dentry+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:85
        return -EFAULT;
ffff80000080c832:	b8 eb ff ff ff       	mov    eax,0xffffffeb
ffff80000080c837:	eb 53                	jmp    ffff80000080c88c <fill_dentry+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:87

    memcpy(name,dent->d_name,namelen);
ffff80000080c839:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c83d:	89 d7                	mov    edi,edx
ffff80000080c83f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c843:	48 8d 72 18          	lea    rsi,[rdx+0x18]
ffff80000080c847:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080c84b:	89 fa                	mov    edx,edi
ffff80000080c84d:	48 89 cf             	mov    rdi,rcx
ffff80000080c850:	49 89 c7             	mov    r15,rax
ffff80000080c853:	48 b9 45 11 ff ff ff 	movabs rcx,0xffffffffffff1145
ffff80000080c85a:	ff ff ff 
ffff80000080c85d:	48 01 c1             	add    rcx,rax
ffff80000080c860:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:88
    dent->d_namelen = namelen;
ffff80000080c862:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c866:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c86a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
    dent->d_type = type;
ffff80000080c86e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c872:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080c876:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:90
    dent->d_offset = offset;
ffff80000080c87a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c87e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080c882:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:91
    return sizeof(struct dirent) + namelen;
ffff80000080c885:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c889:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:92
}
ffff80000080c88c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c890:	c9                   	leave  
ffff80000080c891:	c3                   	ret    

ffff80000080c892 <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:99
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000080c892:	f3 0f 1e fa          	endbr64 
ffff80000080c896:	55                   	push   rbp
ffff80000080c897:	48 89 e5             	mov    rbp,rsp
ffff80000080c89a:	41 57                	push   r15
ffff80000080c89c:	53                   	push   rbx
ffff80000080c89d:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c8a1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c8a1 <mount_fs+0xf>
ffff80000080c8a8:	49 bb df 61 01 00 00 	movabs r11,0x161df
ffff80000080c8af:	00 00 00 
ffff80000080c8b2:	4c 01 db             	add    rbx,r11
ffff80000080c8b5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080c8b9:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080c8bd:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
    struct file_system_type * p = NULL;
ffff80000080c8c1:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c8c8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102

    for(p = &filesystem;p;p = p->next)
ffff80000080c8c9:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080c8d0:	ff ff ff 
ffff80000080c8d3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c8d7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080c8db:	eb 4d                	jmp    ffff80000080c92a <mount_fs+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103
        if(!strcmp(p->name,name))
ffff80000080c8dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c8e1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c8e4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c8e8:	48 89 d6             	mov    rsi,rdx
ffff80000080c8eb:	48 89 c7             	mov    rdi,rax
ffff80000080c8ee:	49 89 df             	mov    r15,rbx
ffff80000080c8f1:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff80000080c8f8:	ff ff ff 
ffff80000080c8fb:	48 01 d8             	add    rax,rbx
ffff80000080c8fe:	ff d0                	call   rax
ffff80000080c900:	85 c0                	test   eax,eax
ffff80000080c902:	75 1a                	jne    ffff80000080c91e <mount_fs+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:105
        {
            return p->read_superblock(DPTE,buf);
ffff80000080c904:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c908:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffff80000080c90c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c910:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c914:	48 89 d6             	mov    rsi,rdx
ffff80000080c917:	48 89 c7             	mov    rdi,rax
ffff80000080c91a:	ff d1                	call   rcx
ffff80000080c91c:	eb 18                	jmp    ffff80000080c936 <mount_fs+0xa4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080c91e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c922:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c926:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102 (discriminator 1)
ffff80000080c92a:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c92f:	75 ac                	jne    ffff80000080c8dd <mount_fs+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:107
        }
    return 0;
ffff80000080c931:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108
}
ffff80000080c936:	48 83 c4 30          	add    rsp,0x30
ffff80000080c93a:	5b                   	pop    rbx
ffff80000080c93b:	41 5f                	pop    r15
ffff80000080c93d:	5d                   	pop    rbp
ffff80000080c93e:	c3                   	ret    

ffff80000080c93f <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:111

unsigned long register_filesystem(struct file_system_type * fs)
{
ffff80000080c93f:	f3 0f 1e fa          	endbr64 
ffff80000080c943:	55                   	push   rbp
ffff80000080c944:	48 89 e5             	mov    rbp,rsp
ffff80000080c947:	41 57                	push   r15
ffff80000080c949:	53                   	push   rbx
ffff80000080c94a:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c94e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c94e <register_filesystem+0xf>
ffff80000080c955:	49 bb 32 61 01 00 00 	movabs r11,0x16132
ffff80000080c95c:	00 00 00 
ffff80000080c95f:	4c 01 db             	add    rbx,r11
ffff80000080c962:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112
    struct file_system_type * p = NULL;
ffff80000080c966:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c96d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114

    for(p = &filesystem;p;p = p->next)
ffff80000080c96e:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080c975:	ff ff ff 
ffff80000080c978:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c97c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080c980:	eb 3d                	jmp    ffff80000080c9bf <register_filesystem+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115
        if(!strcmp(fs->name,p->name))
ffff80000080c982:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c986:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c989:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c98d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c990:	48 89 d6             	mov    rsi,rdx
ffff80000080c993:	48 89 c7             	mov    rdi,rax
ffff80000080c996:	49 89 df             	mov    r15,rbx
ffff80000080c999:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff80000080c9a0:	ff ff ff 
ffff80000080c9a3:	48 01 d8             	add    rax,rbx
ffff80000080c9a6:	ff d0                	call   rax
ffff80000080c9a8:	85 c0                	test   eax,eax
ffff80000080c9aa:	75 07                	jne    ffff80000080c9b3 <register_filesystem+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116
            return 0;
ffff80000080c9ac:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c9b1:	eb 48                	jmp    ffff80000080c9fb <register_filesystem+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080c9b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c9b7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c9bb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114 (discriminator 1)
ffff80000080c9bf:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c9c4:	75 bc                	jne    ffff80000080c982 <register_filesystem+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:118

    fs->next = filesystem.next;
ffff80000080c9c6:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080c9cd:	ff ff ff 
ffff80000080c9d0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c9d4:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080c9d8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c9dc:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:119
    filesystem.next = fs;
ffff80000080c9e0:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080c9e7:	ff ff ff 
ffff80000080c9ea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c9ee:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c9f2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:121

    return 1;
ffff80000080c9f6:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:122
}
ffff80000080c9fb:	48 83 c4 20          	add    rsp,0x20
ffff80000080c9ff:	5b                   	pop    rbx
ffff80000080ca00:	41 5f                	pop    r15
ffff80000080ca02:	5d                   	pop    rbp
ffff80000080ca03:	c3                   	ret    

ffff80000080ca04 <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:125

unsigned long unregister_filesystem(struct file_system_type * fs)
{
ffff80000080ca04:	f3 0f 1e fa          	endbr64 
ffff80000080ca08:	55                   	push   rbp
ffff80000080ca09:	48 89 e5             	mov    rbp,rsp
ffff80000080ca0c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ca0c <unregister_filesystem+0x8>
ffff80000080ca13:	49 bb 74 60 01 00 00 	movabs r11,0x16074
ffff80000080ca1a:	00 00 00 
ffff80000080ca1d:	4c 01 d8             	add    rax,r11
ffff80000080ca20:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126
    struct file_system_type * p = &filesystem;
ffff80000080ca24:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000080ca2b:	ff ff ff 
ffff80000080ca2e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080ca32:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:128

    while(p->next)
ffff80000080ca36:	eb 41                	jmp    ffff80000080ca79 <unregister_filesystem+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129
        if(p->next == fs)
ffff80000080ca38:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080ca3c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ca40:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080ca44:	75 27                	jne    ffff80000080ca6d <unregister_filesystem+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:131
        {
            p->next = p->next->next;
ffff80000080ca46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080ca4a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ca4e:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080ca52:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080ca56:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:132
            fs->next = NULL;
ffff80000080ca5a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ca5e:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080ca65:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:133
            return 1;
ffff80000080ca66:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080ca6b:	eb 1e                	jmp    ffff80000080ca8b <unregister_filesystem+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:136
        }
        else
            p = p->next;
ffff80000080ca6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080ca71:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ca75:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:128
    while(p->next)
ffff80000080ca79:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080ca7d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ca81:	48 85 c0             	test   rax,rax
ffff80000080ca84:	75 b2                	jne    ffff80000080ca38 <unregister_filesystem+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
    return 0;
ffff80000080ca86:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
}
ffff80000080ca8b:	5d                   	pop    rbp
ffff80000080ca8c:	c3                   	ret    

ffff80000080ca8d <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:140
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080ca8d:	f3 0f 1e fa          	endbr64 
ffff80000080ca91:	55                   	push   rbp
ffff80000080ca92:	48 89 e5             	mov    rbp,rsp
ffff80000080ca95:	41 57                	push   r15
ffff80000080ca97:	53                   	push   rbx
ffff80000080ca98:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ca9c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ca9c <root_lookup+0xf>
ffff80000080caa3:	49 bb e4 5f 01 00 00 	movabs r11,0x15fe4
ffff80000080caaa:	00 00 00 
ffff80000080caad:	4c 01 db             	add    rbx,r11
ffff80000080cab0:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080cab4:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:141
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
ffff80000080cab8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cabc:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080cac0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
    struct List* p= tmp->subdirs_list.next;
ffff80000080cac4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cac8:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080cacc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    while (p){
ffff80000080cad0:	eb 61                	jmp    ffff80000080cb33 <root_lookup+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
        struct dir_entry* dp=p->data;
ffff80000080cad2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cad6:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080cada:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:145
        if(strcmp(dp->name,dest_dentry->name)==0){
ffff80000080cade:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080cae2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cae5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cae9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080caec:	48 89 d6             	mov    rsi,rdx
ffff80000080caef:	48 89 c7             	mov    rdi,rax
ffff80000080caf2:	49 89 df             	mov    r15,rbx
ffff80000080caf5:	48 b8 97 14 ff ff ff 	movabs rax,0xffffffffffff1497
ffff80000080cafc:	ff ff ff 
ffff80000080caff:	48 01 d8             	add    rax,rbx
ffff80000080cb02:	ff d0                	call   rax
ffff80000080cb04:	85 c0                	test   eax,eax
ffff80000080cb06:	75 1f                	jne    ffff80000080cb27 <root_lookup+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:146
            kmfree(dest_dentry);
ffff80000080cb08:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080cb0c:	48 89 c7             	mov    rdi,rax
ffff80000080cb0f:	49 89 df             	mov    r15,rbx
ffff80000080cb12:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080cb19:	ff ff ff 
ffff80000080cb1c:	48 01 d8             	add    rax,rbx
ffff80000080cb1f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:147
            return dp;
ffff80000080cb21:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cb25:	eb 31                	jmp    ffff80000080cb58 <root_lookup+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:149
        }
        p=p->next;
ffff80000080cb27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cb2b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cb2f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    while (p){
ffff80000080cb33:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080cb38:	75 98                	jne    ffff80000080cad2 <root_lookup+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:151
    }
    kmfree(dest_dentry);
ffff80000080cb3a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080cb3e:	48 89 c7             	mov    rdi,rax
ffff80000080cb41:	49 89 df             	mov    r15,rbx
ffff80000080cb44:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080cb4b:	ff ff ff 
ffff80000080cb4e:	48 01 d8             	add    rax,rbx
ffff80000080cb51:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:152
    return NULL;
ffff80000080cb53:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:153
}
ffff80000080cb58:	48 83 c4 30          	add    rsp,0x30
ffff80000080cb5c:	5b                   	pop    rbx
ffff80000080cb5d:	41 5f                	pop    r15
ffff80000080cb5f:	5d                   	pop    rbp
ffff80000080cb60:	c3                   	ret    

ffff80000080cb61 <mount_rootfs>:
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:157
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void mount_rootfs(){
ffff80000080cb61:	f3 0f 1e fa          	endbr64 
ffff80000080cb65:	55                   	push   rbp
ffff80000080cb66:	48 89 e5             	mov    rbp,rsp
ffff80000080cb69:	41 57                	push   r15
ffff80000080cb6b:	53                   	push   rbx
ffff80000080cb6c:	48 83 ec 20          	sub    rsp,0x20
ffff80000080cb70:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cb70 <mount_rootfs+0xf>
ffff80000080cb77:	49 bb 10 5f 01 00 00 	movabs r11,0x15f10
ffff80000080cb7e:	00 00 00 
ffff80000080cb81:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:158
    root_sb=(struct super_block*) kmalloc();
ffff80000080cb84:	49 89 df             	mov    r15,rbx
ffff80000080cb87:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cb8c:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000080cb93:	ff ff ff 
ffff80000080cb96:	48 01 da             	add    rdx,rbx
ffff80000080cb99:	ff d2                	call   rdx
ffff80000080cb9b:	48 89 c2             	mov    rdx,rax
ffff80000080cb9e:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cba5:	ff ff ff 
ffff80000080cba8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cbac:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:159
    root_sb->root=root_sb+1;//紧凑跟在后面
ffff80000080cbaf:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cbb6:	ff ff ff 
ffff80000080cbb9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cbbd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cbc0:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cbc7:	ff ff ff 
ffff80000080cbca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cbce:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cbd1:	48 83 c2 18          	add    rdx,0x18
ffff80000080cbd5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160
    root_sb->sb_ops=NULL;
ffff80000080cbd8:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cbdf:	ff ff ff 
ffff80000080cbe2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cbe6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cbe9:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080cbf0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:161
    struct index_node* ir=root_sb->root+1;
ffff80000080cbf1:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cbf8:	ff ff ff 
ffff80000080cbfb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cbff:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cc02:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cc05:	48 83 c0 58          	add    rax,0x58
ffff80000080cc09:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:162
    root_sb->root->dir_inode=ir;
ffff80000080cc0d:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cc14:	ff ff ff 
ffff80000080cc17:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cc1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cc1e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cc21:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080cc25:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163
    ir->sb=root_sb;
ffff80000080cc29:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cc30:	ff ff ff 
ffff80000080cc33:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cc37:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cc3a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc3e:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:164
    ir->attribute=FS_ATTR_DIR;
ffff80000080cc42:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc46:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff80000080cc4d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:165
    ir->file_size=0;
ffff80000080cc4e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc52:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:166
    ir->inode_ops=&root_iops;//lookup函数是必要的
ffff80000080cc59:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc5d:	48 ba 28 fd ff ff ff 	movabs rdx,0xfffffffffffffd28
ffff80000080cc64:	ff ff ff 
ffff80000080cc67:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080cc6b:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167
    ir->f_ops=NULL;
ffff80000080cc6f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc73:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff80000080cc7a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    ir->private_index_info=root_sb->root;
ffff80000080cc7b:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cc82:	ff ff ff 
ffff80000080cc85:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cc89:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cc8c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cc8f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc93:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170

    root_sb->root->name=ir+1;//紧凑跟在后面
ffff80000080cc97:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cc9e:	ff ff ff 
ffff80000080cca1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cca5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cca8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ccab:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ccaf:	48 83 c2 38          	add    rdx,0x38
ffff80000080ccb3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:171
    strcpy(root_sb->root->name,"/");
ffff80000080ccb6:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080ccbd:	ff ff ff 
ffff80000080ccc0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ccc4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ccc7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ccca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cccd:	48 ba 0a d6 ff ff ff 	movabs rdx,0xffffffffffffd60a
ffff80000080ccd4:	ff ff ff 
ffff80000080ccd7:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080ccdb:	48 89 d6             	mov    rsi,rdx
ffff80000080ccde:	48 89 c7             	mov    rdi,rax
ffff80000080cce1:	49 89 df             	mov    r15,rbx
ffff80000080cce4:	48 b8 49 12 ff ff ff 	movabs rax,0xffffffffffff1249
ffff80000080cceb:	ff ff ff 
ffff80000080ccee:	48 01 d8             	add    rax,rbx
ffff80000080ccf1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:172
    root_sb->root->name_length=1;
ffff80000080ccf3:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080ccfa:	ff ff ff 
ffff80000080ccfd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cd01:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cd04:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cd07:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:173
    root_sb->root->parent=root_sb->root;
ffff80000080cd0e:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cd15:	ff ff ff 
ffff80000080cd18:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cd1c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cd1f:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cd26:	ff ff ff 
ffff80000080cd29:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cd2d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cd30:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cd33:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080cd36:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:174
    list_init(&root_sb->root->subdirs_list);
ffff80000080cd3a:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cd41:	ff ff ff 
ffff80000080cd44:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cd48:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cd4b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cd4e:	48 83 c0 28          	add    rax,0x28
ffff80000080cd52:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cd56:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cd5a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cd61:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cd65:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080cd6c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cd6d:	90                   	nop
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:175
    list_init(&root_sb->root->child_node);
ffff80000080cd6e:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cd75:	ff ff ff 
ffff80000080cd78:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cd7c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cd7f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cd82:	48 83 c0 10          	add    rax,0x10
ffff80000080cd86:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cd8a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cd8e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cd95:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cd99:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080cda0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cda1:	90                   	nop
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:177

}
ffff80000080cda2:	90                   	nop
ffff80000080cda3:	48 83 c4 20          	add    rsp,0x20
ffff80000080cda7:	5b                   	pop    rbx
ffff80000080cda8:	41 5f                	pop    r15
ffff80000080cdaa:	5d                   	pop    rbp
ffff80000080cdab:	c3                   	ret    

ffff80000080cdac <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:20
#include "syscall.h"
#include "int.h"


unsigned long sys_putstring(char *string)
{
ffff80000080cdac:	f3 0f 1e fa          	endbr64 
ffff80000080cdb0:	55                   	push   rbp
ffff80000080cdb1:	48 89 e5             	mov    rbp,rsp
ffff80000080cdb4:	41 57                	push   r15
ffff80000080cdb6:	48 83 ec 18          	sub    rsp,0x18
ffff80000080cdba:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080cdba <sys_putstring+0xe>
ffff80000080cdc1:	49 bb c6 5c 01 00 00 	movabs r11,0x15cc6
ffff80000080cdc8:	00 00 00 
ffff80000080cdcb:	4c 01 da             	add    rdx,r11
ffff80000080cdce:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:21
    printf(string);
ffff80000080cdd2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cdd6:	48 89 c7             	mov    rdi,rax
ffff80000080cdd9:	49 89 d7             	mov    r15,rdx
ffff80000080cddc:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cde1:	48 b9 5c ed fd ff ff 	movabs rcx,0xfffffffffffded5c
ffff80000080cde8:	ff ff ff 
ffff80000080cdeb:	48 01 d1             	add    rcx,rdx
ffff80000080cdee:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
    return 0;
ffff80000080cdf0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
}
ffff80000080cdf5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080cdf9:	c9                   	leave  
ffff80000080cdfa:	c3                   	ret    

ffff80000080cdfb <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:26

unsigned long sys_open(char *filename,int flags)
{
ffff80000080cdfb:	f3 0f 1e fa          	endbr64 
ffff80000080cdff:	55                   	push   rbp
ffff80000080ce00:	48 89 e5             	mov    rbp,rsp
ffff80000080ce03:	41 57                	push   r15
ffff80000080ce05:	53                   	push   rbx
ffff80000080ce06:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffff80000080ce0d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ce0d <sys_open+0x12>
ffff80000080ce14:	49 bb 73 5c 01 00 00 	movabs r11,0x15c73
ffff80000080ce1b:	00 00 00 
ffff80000080ce1e:	4c 01 db             	add    rbx,r11
ffff80000080ce21:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
ffff80000080ce28:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:27
    char * path = NULL;
ffff80000080ce2e:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080ce35:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28
    long pathlen = 0;
ffff80000080ce36:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080ce3d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    long error = 0;
ffff80000080ce3e:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080ce45:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    struct dir_entry * dentry = NULL;
ffff80000080ce46:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080ce4d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    struct file * filp = NULL;
ffff80000080ce4e:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080ce55:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct file ** f = NULL;
ffff80000080ce56:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080ce5d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    int fd = -1;
ffff80000080ce5e:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:37
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc();
ffff80000080ce65:	49 89 df             	mov    r15,rbx
ffff80000080ce68:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ce6d:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000080ce74:	ff ff ff 
ffff80000080ce77:	48 01 da             	add    rdx,rbx
ffff80000080ce7a:	ff d2                	call   rdx
ffff80000080ce7c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:38
    if(path == NULL)
ffff80000080ce80:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080ce85:	75 0c                	jne    ffff80000080ce93 <sys_open+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
        return -ENOMEM;
ffff80000080ce87:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080ce8e:	e9 10 06 00 00       	jmp    ffff80000080d4a3 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
    memset(path,0,PAGE_4K_SIZE);
ffff80000080ce93:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ce97:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080ce9c:	be 00 00 00 00       	mov    esi,0x0
ffff80000080cea1:	48 89 c7             	mov    rdi,rax
ffff80000080cea4:	49 89 df             	mov    r15,rbx
ffff80000080cea7:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000080ceae:	ff ff ff 
ffff80000080ceb1:	48 01 d8             	add    rax,rbx
ffff80000080ceb4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
    pathlen = strlen(filename);
ffff80000080ceb6:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080cebd:	48 89 c7             	mov    rdi,rax
ffff80000080cec0:	49 89 df             	mov    r15,rbx
ffff80000080cec3:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff80000080ceca:	ff ff ff 
ffff80000080cecd:	48 01 d8             	add    rax,rbx
ffff80000080ced0:	ff d0                	call   rax
ffff80000080ced2:	48 98                	cdqe   
ffff80000080ced4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    if(pathlen <= 0)
ffff80000080ced8:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080cedd:	7f 25                	jg     ffff80000080cf04 <sys_open+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:44
    {
        kmfree(path);
ffff80000080cedf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cee3:	48 89 c7             	mov    rdi,rax
ffff80000080cee6:	49 89 df             	mov    r15,rbx
ffff80000080cee9:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080cef0:	ff ff ff 
ffff80000080cef3:	48 01 d8             	add    rax,rbx
ffff80000080cef6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:45
        return -EFAULT;
ffff80000080cef8:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080ceff:	e9 9f 05 00 00       	jmp    ffff80000080d4a3 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:47
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080cf04:	48 81 7d c0 ff 0f 00 	cmp    QWORD PTR [rbp-0x40],0xfff
ffff80000080cf0b:	00 
ffff80000080cf0c:	7e 25                	jle    ffff80000080cf33 <sys_open+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:49
    {
        kmfree(path);
ffff80000080cf0e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cf12:	48 89 c7             	mov    rdi,rax
ffff80000080cf15:	49 89 df             	mov    r15,rbx
ffff80000080cf18:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080cf1f:	ff ff ff 
ffff80000080cf22:	48 01 d8             	add    rax,rbx
ffff80000080cf25:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:50
        return -ENAMETOOLONG;
ffff80000080cf27:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080cf2e:	e9 70 05 00 00       	jmp    ffff80000080d4a3 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:52
    }
    strcpy(path,filename);
ffff80000080cf33:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
ffff80000080cf3a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cf3e:	48 89 d6             	mov    rsi,rdx
ffff80000080cf41:	48 89 c7             	mov    rdi,rax
ffff80000080cf44:	49 89 df             	mov    r15,rbx
ffff80000080cf47:	48 b8 49 12 ff ff ff 	movabs rax,0xffffffffffff1249
ffff80000080cf4e:	ff ff ff 
ffff80000080cf51:	48 01 d8             	add    rax,rbx
ffff80000080cf54:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:54

    dentry = path_walk(path,0);
ffff80000080cf56:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cf5a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080cf5f:	48 89 c7             	mov    rdi,rax
ffff80000080cf62:	49 89 df             	mov    r15,rbx
ffff80000080cf65:	48 b8 d8 99 fe ff ff 	movabs rax,0xfffffffffffe99d8
ffff80000080cf6c:	ff ff ff 
ffff80000080cf6f:	48 01 d8             	add    rax,rbx
ffff80000080cf72:	ff d0                	call   rax
ffff80000080cf74:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:56

    if(dentry == NULL){
ffff80000080cf78:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080cf7d:	0f 85 bc 02 00 00    	jne    ffff80000080d23f <sys_open+0x444>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:61
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //找到上一级目录
        char* p=path+strlen(path)-1;
ffff80000080cf83:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cf87:	48 89 c7             	mov    rdi,rax
ffff80000080cf8a:	49 89 df             	mov    r15,rbx
ffff80000080cf8d:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff80000080cf94:	ff ff ff 
ffff80000080cf97:	48 01 d8             	add    rax,rbx
ffff80000080cf9a:	ff d0                	call   rax
ffff80000080cf9c:	48 98                	cdqe   
ffff80000080cf9e:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080cfa2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cfa6:	48 01 d0             	add    rax,rdx
ffff80000080cfa9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62
        for(;*p!='/'&&p>path;p--);
ffff80000080cfad:	eb 05                	jmp    ffff80000080cfb4 <sys_open+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 3)
ffff80000080cfaf:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 1)
ffff80000080cfb4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080cfb8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080cfbb:	3c 2f                	cmp    al,0x2f
ffff80000080cfbd:	74 0a                	je     ffff80000080cfc9 <sys_open+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 2)
ffff80000080cfbf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080cfc3:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080cfc7:	77 e6                	ja     ffff80000080cfaf <sys_open+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63
        *p='\0';
ffff80000080cfc9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080cfcd:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
ffff80000080cfd0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cfd4:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080cfd9:	48 89 c7             	mov    rdi,rax
ffff80000080cfdc:	49 89 df             	mov    r15,rbx
ffff80000080cfdf:	48 b8 d8 99 fe ff ff 	movabs rax,0xfffffffffffe99d8
ffff80000080cfe6:	ff ff ff 
ffff80000080cfe9:	48 01 d8             	add    rax,rbx
ffff80000080cfec:	ff d0                	call   rax
ffff80000080cfee:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        if(parent==NULL)
ffff80000080cff2:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080cff7:	75 0c                	jne    ffff80000080d005 <sys_open+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
            return -ENOENT;//上级目录也不在
ffff80000080cff9:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080d000:	e9 9e 04 00 00       	jmp    ffff80000080d4a3 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:68
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc();
ffff80000080d005:	49 89 df             	mov    r15,rbx
ffff80000080d008:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d00d:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000080d014:	ff ff ff 
ffff80000080d017:	48 01 da             	add    rdx,rbx
ffff80000080d01a:	ff d2                	call   rdx
ffff80000080d01c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:69
        list_init(&dentry->subdirs_list);
ffff80000080d020:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d024:	48 83 c0 28          	add    rax,0x28
ffff80000080d028:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080d02f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080d036:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080d03d:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080d044:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080d04b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080d04c:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:70
        list_init(&dentry->child_node);
ffff80000080d04d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d051:	48 83 c0 10          	add    rax,0x10
ffff80000080d055:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080d05c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080d063:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080d06a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080d071:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080d078:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080d079:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        dentry->child_node.data=dentry;
ffff80000080d07a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d07e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d082:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        list_add(&parent->subdirs_list,&dentry->child_node);
ffff80000080d086:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d08a:	48 83 c0 10          	add    rax,0x10
ffff80000080d08e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080d092:	48 83 c2 28          	add    rdx,0x28
ffff80000080d096:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffff80000080d09a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080d09e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080d0a2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d0a6:	48 85 c0             	test   rax,rax
ffff80000080d0a9:	75 58                	jne    ffff80000080d103 <sys_open+0x308>
ffff80000080d0ab:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080d0af:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080d0b3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080d0b7:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080d0bb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080d0bf:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080d0c3:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080d0c7:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080d0cb:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080d0cf:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080d0d3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080d0d6:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080d0da:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d0de:	48 85 c0             	test   rax,rax
ffff80000080d0e1:	74 0f                	je     ffff80000080d0f2 <sys_open+0x2f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080d0e3:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080d0e7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d0eb:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080d0ef:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080d0f2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080d0f6:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080d0fa:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080d0fe:	e9 c1 00 00 00       	jmp    ffff80000080d1c4 <sys_open+0x3c9>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080d103:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080d107:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080d10b:	eb 25                	jmp    ffff80000080d132 <sys_open+0x337>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080d10d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080d111:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080d115:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080d119:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d11d:	48 39 c2             	cmp    rdx,rax
ffff80000080d120:	0f 84 9d 00 00 00    	je     ffff80000080d1c3 <sys_open+0x3c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080d126:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080d12a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d12e:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff80000080d132:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080d136:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d13a:	48 85 c0             	test   rax,rax
ffff80000080d13d:	74 0e                	je     ffff80000080d14d <sys_open+0x352>
ffff80000080d13f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080d143:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d147:	48 39 45 80          	cmp    QWORD PTR [rbp-0x80],rax
ffff80000080d14b:	75 c0                	jne    ffff80000080d10d <sys_open+0x312>
ffff80000080d14d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080d151:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff80000080d158:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080d15c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080d163:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080d16a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080d16e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080d175:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080d179:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080d180:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080d187:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080d18a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080d191:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d195:	48 85 c0             	test   rax,rax
ffff80000080d198:	74 15                	je     ffff80000080d1af <sys_open+0x3b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080d19a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080d1a1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d1a5:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff80000080d1ac:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080d1af:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080d1b6:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff80000080d1bd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080d1c1:	eb 01                	jmp    ffff80000080d1c4 <sys_open+0x3c9>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080d1c3:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        dentry->parent=parent;
ffff80000080d1c4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d1c8:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080d1cc:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        dentry->dir_inode=dentry+1;//放在后面
ffff80000080d1d0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d1d4:	48 8d 50 58          	lea    rdx,[rax+0x58]
ffff80000080d1d8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d1dc:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        dentry->dir_inode->file_size=0;
ffff80000080d1e0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d1e4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d1e8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:77
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
ffff80000080d1ef:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080d1f3:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080d1f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d1fb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d1ff:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000080d203:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:78
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
ffff80000080d207:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080d20b:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080d20f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d213:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d217:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080d21b:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:79
        dentry->dir_ops=parent->dir_ops;
ffff80000080d21f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080d223:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
ffff80000080d227:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d22b:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:81
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
ffff80000080d22f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d233:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d237:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080d23e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:83
    }
    kmfree(path);
ffff80000080d23f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d243:	48 89 c7             	mov    rdi,rax
ffff80000080d246:	49 89 df             	mov    r15,rbx
ffff80000080d249:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080d250:	ff ff ff 
ffff80000080d253:	48 01 d8             	add    rax,rbx
ffff80000080d256:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:85

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
ffff80000080d258:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080d25e:	25 00 40 00 00       	and    eax,0x4000
ffff80000080d263:	85 c0                	test   eax,eax
ffff80000080d265:	74 1e                	je     ffff80000080d285 <sys_open+0x48a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:85 (discriminator 1)
ffff80000080d267:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d26b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d26f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d273:	48 83 f8 02          	cmp    rax,0x2
ffff80000080d277:	74 0c                	je     ffff80000080d285 <sys_open+0x48a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86
        return -ENOTDIR;
ffff80000080d279:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080d280:	e9 1e 02 00 00       	jmp    ffff80000080d4a3 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
ffff80000080d285:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080d28b:	25 00 40 00 00       	and    eax,0x4000
ffff80000080d290:	85 c0                	test   eax,eax
ffff80000080d292:	75 1e                	jne    ffff80000080d2b2 <sys_open+0x4b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87 (discriminator 1)
ffff80000080d294:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d298:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d29c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d2a0:	48 83 f8 02          	cmp    rax,0x2
ffff80000080d2a4:	75 0c                	jne    ffff80000080d2b2 <sys_open+0x4b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88
        return -EISDIR;
ffff80000080d2a6:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
ffff80000080d2ad:	e9 f1 01 00 00       	jmp    ffff80000080d4a3 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:90

    filp = (struct file *) kmalloc();
ffff80000080d2b2:	49 89 df             	mov    r15,rbx
ffff80000080d2b5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d2ba:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000080d2c1:	ff ff ff 
ffff80000080d2c4:	48 01 da             	add    rdx,rbx
ffff80000080d2c7:	ff d2                	call   rdx
ffff80000080d2c9:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91
    memset(filp,0,sizeof(struct file));
ffff80000080d2cd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d2d1:	ba 28 00 00 00       	mov    edx,0x28
ffff80000080d2d6:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d2db:	48 89 c7             	mov    rdi,rax
ffff80000080d2de:	49 89 df             	mov    r15,rbx
ffff80000080d2e1:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000080d2e8:	ff ff ff 
ffff80000080d2eb:	48 01 d8             	add    rax,rbx
ffff80000080d2ee:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:92
    filp->dentry = dentry;
ffff80000080d2f0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d2f4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d2f8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:93
    filp->mode = flags;
ffff80000080d2fc:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080d302:	48 63 d0             	movsxd rdx,eax
ffff80000080d305:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d309:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:95

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
ffff80000080d30d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d311:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d315:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d319:	83 e0 04             	and    eax,0x4
ffff80000080d31c:	48 85 c0             	test   rax,rax
ffff80000080d31f:	74 18                	je     ffff80000080d339 <sys_open+0x53e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:97
        extern struct file_operations dev_dir_fops;
        filp->f_ops = &dev_dir_fops;	//////	find device file operation function
ffff80000080d321:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d325:	48 ba d8 ff ff ff ff 	movabs rdx,0xffffffffffffffd8
ffff80000080d32c:	ff ff ff 
ffff80000080d32f:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d333:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffff80000080d337:	eb 14                	jmp    ffff80000080d34d <sys_open+0x552>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:100
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
ffff80000080d339:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d33d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d341:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080d345:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d349:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101
    if(filp->f_ops && filp->f_ops->open)
ffff80000080d34d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d351:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d355:	48 85 c0             	test   rax,rax
ffff80000080d358:	74 33                	je     ffff80000080d38d <sys_open+0x592>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101 (discriminator 1)
ffff80000080d35a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d35e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d362:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d365:	48 85 c0             	test   rax,rax
ffff80000080d368:	74 23                	je     ffff80000080d38d <sys_open+0x592>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102
        error = filp->f_ops->open(dentry->dir_inode,filp);
ffff80000080d36a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d36e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d372:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080d375:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d379:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d37d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080d381:	48 89 d6             	mov    rsi,rdx
ffff80000080d384:	48 89 c7             	mov    rdi,rax
ffff80000080d387:	ff d1                	call   rcx
ffff80000080d389:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:103
    if(error != 1)
ffff80000080d38d:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080d392:	74 25                	je     ffff80000080d3b9 <sys_open+0x5be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:105
    {
        kmfree(filp);
ffff80000080d394:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d398:	48 89 c7             	mov    rdi,rax
ffff80000080d39b:	49 89 df             	mov    r15,rbx
ffff80000080d39e:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080d3a5:	ff ff ff 
ffff80000080d3a8:	48 01 d8             	add    rax,rbx
ffff80000080d3ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
        return -EFAULT;
ffff80000080d3ad:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080d3b4:	e9 ea 00 00 00       	jmp    ffff80000080d4a3 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:109
    }

    if(filp->mode & O_TRUNC)
ffff80000080d3b9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d3bd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d3c1:	25 00 02 00 00       	and    eax,0x200
ffff80000080d3c6:	48 85 c0             	test   rax,rax
ffff80000080d3c9:	74 13                	je     ffff80000080d3de <sys_open+0x5e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:111
    {
        filp->dentry->dir_inode->file_size = 0;
ffff80000080d3cb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d3cf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d3d3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d3d7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:113
    }
    if(filp->mode & O_APPEND)
ffff80000080d3de:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d3e2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d3e6:	25 00 04 00 00       	and    eax,0x400
ffff80000080d3eb:	48 85 c0             	test   rax,rax
ffff80000080d3ee:	74 19                	je     ffff80000080d409 <sys_open+0x60e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:115
    {
        filp->position = filp->dentry->dir_inode->file_size;
ffff80000080d3f0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d3f4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d3f8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d3fc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d3ff:	48 89 c2             	mov    rdx,rax
ffff80000080d402:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d406:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:118
    }

    f = current->openf;
ffff80000080d409:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080d410:	ff ff ff 
ffff80000080d413:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d417:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d41a:	48 05 f8 00 00 00    	add    rax,0xf8
ffff80000080d420:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080d424:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080d42b:	eb 28                	jmp    ffff80000080d455 <sys_open+0x65a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120
        if(f[i] == NULL)
ffff80000080d42d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d430:	48 98                	cdqe   
ffff80000080d432:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080d439:	00 
ffff80000080d43a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d43e:	48 01 d0             	add    rax,rdx
ffff80000080d441:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d444:	48 85 c0             	test   rax,rax
ffff80000080d447:	75 08                	jne    ffff80000080d451 <sys_open+0x656>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:122
        {
            fd = i;
ffff80000080d449:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d44c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
            break;
ffff80000080d44f:	eb 0a                	jmp    ffff80000080d45b <sys_open+0x660>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080d451:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119 (discriminator 1)
ffff80000080d455:	83 7d d8 1f          	cmp    DWORD PTR [rbp-0x28],0x1f
ffff80000080d459:	7e d2                	jle    ffff80000080d42d <sys_open+0x632>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:125
        }
    if(i == MAX_TASKS)
ffff80000080d45b:	83 7d d8 20          	cmp    DWORD PTR [rbp-0x28],0x20
ffff80000080d45f:	75 22                	jne    ffff80000080d483 <sys_open+0x688>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:127
    {
        kmfree(filp);
ffff80000080d461:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d465:	48 89 c7             	mov    rdi,rax
ffff80000080d468:	49 89 df             	mov    r15,rbx
ffff80000080d46b:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080d472:	ff ff ff 
ffff80000080d475:	48 01 d8             	add    rax,rbx
ffff80000080d478:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:129
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
ffff80000080d47a:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
ffff80000080d481:	eb 20                	jmp    ffff80000080d4a3 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:131
    }
    f[fd] = filp;
ffff80000080d483:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d486:	48 98                	cdqe   
ffff80000080d488:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080d48f:	00 
ffff80000080d490:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d494:	48 01 c2             	add    rdx,rax
ffff80000080d497:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d49b:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:133

    return fd;
ffff80000080d49e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d4a1:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:134
}
ffff80000080d4a3:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffff80000080d4aa:	5b                   	pop    rbx
ffff80000080d4ab:	41 5f                	pop    r15
ffff80000080d4ad:	5d                   	pop    rbp
ffff80000080d4ae:	c3                   	ret    

ffff80000080d4af <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:137

unsigned long sys_close(int fd)
{
ffff80000080d4af:	f3 0f 1e fa          	endbr64 
ffff80000080d4b3:	55                   	push   rbp
ffff80000080d4b4:	48 89 e5             	mov    rbp,rsp
ffff80000080d4b7:	41 57                	push   r15
ffff80000080d4b9:	53                   	push   rbx
ffff80000080d4ba:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d4be:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d4be <sys_close+0xf>
ffff80000080d4c5:	49 bb c2 55 01 00 00 	movabs r11,0x155c2
ffff80000080d4cc:	00 00 00 
ffff80000080d4cf:	4c 01 db             	add    rbx,r11
ffff80000080d4d2:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:138
    struct file * filp = NULL;
ffff80000080d4d5:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080d4dc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080d4dd:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080d4e1:	78 06                	js     ffff80000080d4e9 <sys_close+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141 (discriminator 1)
ffff80000080d4e3:	83 7d dc 1f          	cmp    DWORD PTR [rbp-0x24],0x1f
ffff80000080d4e7:	7e 0c                	jle    ffff80000080d4f5 <sys_close+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142
        return -EBADF;
ffff80000080d4e9:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d4f0:	e9 a8 00 00 00       	jmp    ffff80000080d59d <sys_close+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:144

    filp = current->openf[fd];
ffff80000080d4f5:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080d4fc:	ff ff ff 
ffff80000080d4ff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d503:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d506:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d509:	48 63 d2             	movsxd rdx,edx
ffff80000080d50c:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d510:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d515:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145
    if(filp->f_ops && filp->f_ops->close)
ffff80000080d519:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d51d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d521:	48 85 c0             	test   rax,rax
ffff80000080d524:	74 35                	je     ffff80000080d55b <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145 (discriminator 1)
ffff80000080d526:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d52a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d52e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d532:	48 85 c0             	test   rax,rax
ffff80000080d535:	74 24                	je     ffff80000080d55b <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146
        filp->f_ops->close(filp->dentry->dir_inode,filp);
ffff80000080d537:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d53b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d53f:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080d543:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d547:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d54b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d54f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d553:	48 89 d6             	mov    rsi,rdx
ffff80000080d556:	48 89 c7             	mov    rdi,rax
ffff80000080d559:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:148

    kmfree(filp);
ffff80000080d55b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d55f:	48 89 c7             	mov    rdi,rax
ffff80000080d562:	49 89 df             	mov    r15,rbx
ffff80000080d565:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080d56c:	ff ff ff 
ffff80000080d56f:	48 01 d8             	add    rax,rbx
ffff80000080d572:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149
    current->openf[fd] = NULL;
ffff80000080d574:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080d57b:	ff ff ff 
ffff80000080d57e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d582:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d585:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d588:	48 63 d2             	movsxd rdx,edx
ffff80000080d58b:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d58f:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
ffff80000080d596:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:151

    return 0;
ffff80000080d598:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152
}
ffff80000080d59d:	48 83 c4 20          	add    rsp,0x20
ffff80000080d5a1:	5b                   	pop    rbx
ffff80000080d5a2:	41 5f                	pop    r15
ffff80000080d5a4:	5d                   	pop    rbp
ffff80000080d5a5:	c3                   	ret    

ffff80000080d5a6 <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:155

unsigned long sys_read(int fd,void * buf,long count)
{
ffff80000080d5a6:	f3 0f 1e fa          	endbr64 
ffff80000080d5aa:	55                   	push   rbp
ffff80000080d5ab:	48 89 e5             	mov    rbp,rsp
ffff80000080d5ae:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d5b2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d5b2 <sys_read+0xc>
ffff80000080d5b9:	49 bb ce 54 01 00 00 	movabs r11,0x154ce
ffff80000080d5c0:	00 00 00 
ffff80000080d5c3:	4c 01 d8             	add    rax,r11
ffff80000080d5c6:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080d5c9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d5cd:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:156
    struct file * filp = NULL;
ffff80000080d5d1:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080d5d8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:157
    unsigned long ret = 0;
ffff80000080d5d9:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d5e0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080d5e1:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080d5e5:	78 06                	js     ffff80000080d5ed <sys_read+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160 (discriminator 1)
ffff80000080d5e7:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080d5eb:	7e 09                	jle    ffff80000080d5f6 <sys_read+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161
        return -EBADF;
ffff80000080d5ed:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d5f4:	eb 7c                	jmp    ffff80000080d672 <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:162
    if(count < 0)
ffff80000080d5f6:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080d5fb:	79 09                	jns    ffff80000080d606 <sys_read+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163
        return -EINVAL;
ffff80000080d5fd:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080d604:	eb 6c                	jmp    ffff80000080d672 <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:165

    filp = current->openf[fd];
ffff80000080d606:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d60d:	ff ff ff 
ffff80000080d610:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d614:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d617:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080d61a:	48 63 d2             	movsxd rdx,edx
ffff80000080d61d:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d621:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d626:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166
    if(filp->f_ops && filp->f_ops->read)
ffff80000080d62a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d62e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d632:	48 85 c0             	test   rax,rax
ffff80000080d635:	74 37                	je     ffff80000080d66e <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166 (discriminator 1)
ffff80000080d637:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d63b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d63f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d643:	48 85 c0             	test   rax,rax
ffff80000080d646:	74 26                	je     ffff80000080d66e <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
ffff80000080d648:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d64c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d650:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080d654:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080d658:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d65c:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080d660:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d664:	48 89 c7             	mov    rdi,rax
ffff80000080d667:	41 ff d0             	call   r8
ffff80000080d66a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:168
    return ret;
ffff80000080d66e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169
}
ffff80000080d672:	c9                   	leave  
ffff80000080d673:	c3                   	ret    

ffff80000080d674 <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:172

unsigned long sys_write(int fd,void * buf,long count)
{
ffff80000080d674:	f3 0f 1e fa          	endbr64 
ffff80000080d678:	55                   	push   rbp
ffff80000080d679:	48 89 e5             	mov    rbp,rsp
ffff80000080d67c:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d680:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d680 <sys_write+0xc>
ffff80000080d687:	49 bb 00 54 01 00 00 	movabs r11,0x15400
ffff80000080d68e:	00 00 00 
ffff80000080d691:	4c 01 d8             	add    rax,r11
ffff80000080d694:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080d697:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d69b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:173
    struct file * filp = NULL;
ffff80000080d69f:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080d6a6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:174
    unsigned long ret = 0;
ffff80000080d6a7:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d6ae:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080d6af:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080d6b3:	78 06                	js     ffff80000080d6bb <sys_write+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177 (discriminator 1)
ffff80000080d6b5:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080d6b9:	7e 09                	jle    ffff80000080d6c4 <sys_write+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178
        return -EBADF;
ffff80000080d6bb:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d6c2:	eb 7c                	jmp    ffff80000080d740 <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:179
    if(count < 0)
ffff80000080d6c4:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080d6c9:	79 09                	jns    ffff80000080d6d4 <sys_write+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180
        return -EINVAL;
ffff80000080d6cb:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080d6d2:	eb 6c                	jmp    ffff80000080d740 <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:182

    filp = current->openf[fd];
ffff80000080d6d4:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d6db:	ff ff ff 
ffff80000080d6de:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d6e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d6e5:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080d6e8:	48 63 d2             	movsxd rdx,edx
ffff80000080d6eb:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d6ef:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d6f4:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183
    if(filp->f_ops && filp->f_ops->write)
ffff80000080d6f8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d6fc:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d700:	48 85 c0             	test   rax,rax
ffff80000080d703:	74 37                	je     ffff80000080d73c <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183 (discriminator 1)
ffff80000080d705:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d709:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d70d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d711:	48 85 c0             	test   rax,rax
ffff80000080d714:	74 26                	je     ffff80000080d73c <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
ffff80000080d716:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d71a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d71e:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
ffff80000080d722:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080d726:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d72a:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080d72e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d732:	48 89 c7             	mov    rdi,rax
ffff80000080d735:	41 ff d0             	call   r8
ffff80000080d738:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:185
    return ret;
ffff80000080d73c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186
}
ffff80000080d740:	c9                   	leave  
ffff80000080d741:	c3                   	ret    

ffff80000080d742 <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:190


unsigned long sys_lseek(int filds,long offset,int whence)
{
ffff80000080d742:	f3 0f 1e fa          	endbr64 
ffff80000080d746:	55                   	push   rbp
ffff80000080d747:	48 89 e5             	mov    rbp,rsp
ffff80000080d74a:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d74e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d74e <sys_lseek+0xc>
ffff80000080d755:	49 bb 32 53 01 00 00 	movabs r11,0x15332
ffff80000080d75c:	00 00 00 
ffff80000080d75f:	4c 01 d8             	add    rax,r11
ffff80000080d762:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080d765:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d769:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:191
    struct file * filp = NULL;
ffff80000080d76c:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080d773:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:192
    unsigned long ret = 0;
ffff80000080d774:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d77b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
ffff80000080d77c:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080d780:	78 06                	js     ffff80000080d788 <sys_lseek+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195 (discriminator 1)
ffff80000080d782:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080d786:	7e 0c                	jle    ffff80000080d794 <sys_lseek+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196
        return -EBADF;
ffff80000080d788:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d78f:	e9 82 00 00 00       	jmp    ffff80000080d816 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197
    if(whence < 0 || whence >= SEEK_MAX)
ffff80000080d794:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080d798:	78 06                	js     ffff80000080d7a0 <sys_lseek+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197 (discriminator 1)
ffff80000080d79a:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
ffff80000080d79e:	7e 09                	jle    ffff80000080d7a9 <sys_lseek+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198
        return -EINVAL;
ffff80000080d7a0:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080d7a7:	eb 6d                	jmp    ffff80000080d816 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:200

    filp = current->openf[filds];
ffff80000080d7a9:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d7b0:	ff ff ff 
ffff80000080d7b3:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d7b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d7ba:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080d7bd:	48 63 d2             	movsxd rdx,edx
ffff80000080d7c0:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d7c4:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d7c9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201
    if(filp->f_ops && filp->f_ops->lseek)
ffff80000080d7cd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d7d1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d7d5:	48 85 c0             	test   rax,rax
ffff80000080d7d8:	74 38                	je     ffff80000080d812 <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201 (discriminator 1)
ffff80000080d7da:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d7de:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d7e2:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080d7e6:	48 85 c0             	test   rax,rax
ffff80000080d7e9:	74 27                	je     ffff80000080d812 <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202
        ret = filp->f_ops->lseek(filp,offset,whence);
ffff80000080d7eb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d7ef:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d7f3:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
ffff80000080d7f7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080d7fa:	48 63 d0             	movsxd rdx,eax
ffff80000080d7fd:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080d801:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d805:	48 89 ce             	mov    rsi,rcx
ffff80000080d808:	48 89 c7             	mov    rdi,rax
ffff80000080d80b:	41 ff d0             	call   r8
ffff80000080d80e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:203
    return ret;
ffff80000080d812:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204
}
ffff80000080d816:	c9                   	leave  
ffff80000080d817:	c3                   	ret    

ffff80000080d818 <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:214
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
ffff80000080d818:	f3 0f 1e fa          	endbr64 
ffff80000080d81c:	55                   	push   rbp
ffff80000080d81d:	48 89 e5             	mov    rbp,rsp
ffff80000080d820:	41 57                	push   r15
ffff80000080d822:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d826:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080d826 <sys_vfork+0xe>
ffff80000080d82d:	49 bb 5a 52 01 00 00 	movabs r11,0x1525a
ffff80000080d834:	00 00 00 
ffff80000080d837:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:215
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
ffff80000080d83a:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080d841:	ff ff ff 
ffff80000080d844:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080d848:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d84b:	48 8b 80 fc 01 00 00 	mov    rax,QWORD PTR [rax+0x1fc]
ffff80000080d852:	48 2d d0 00 00 00    	sub    rax,0xd0
ffff80000080d858:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:216
    printf("sys_vfork\n");
ffff80000080d85c:	48 b8 10 d6 ff ff ff 	movabs rax,0xffffffffffffd610
ffff80000080d863:	ff ff ff 
ffff80000080d866:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080d86a:	48 89 c7             	mov    rdi,rax
ffff80000080d86d:	49 89 d7             	mov    r15,rdx
ffff80000080d870:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d875:	48 b9 5c ed fd ff ff 	movabs rcx,0xfffffffffffded5c
ffff80000080d87c:	ff ff ff 
ffff80000080d87f:	48 01 d1             	add    rcx,rdx
ffff80000080d882:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:218
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
ffff80000080d884:	90                   	nop
ffff80000080d885:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d889:	c9                   	leave  
ffff80000080d88a:	c3                   	ret    

ffff80000080d88b <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:261

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
ffff80000080d88b:	f3 0f 1e fa          	endbr64 
ffff80000080d88f:	55                   	push   rbp
ffff80000080d890:	48 89 e5             	mov    rbp,rsp
ffff80000080d893:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d893 <sys_wait+0x8>
ffff80000080d89a:	49 bb ed 51 01 00 00 	movabs r11,0x151ed
ffff80000080d8a1:	00 00 00 
ffff80000080d8a4:	4c 01 d8             	add    rax,r11
ffff80000080d8a7:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
ffff80000080d8aa:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000080d8ae:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:262
    struct process* waitee=NULL;
ffff80000080d8b1:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d8b8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:264
    extern struct process task[];
    if(!current->child_procs)
ffff80000080d8b9:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d8c0:	ff ff ff 
ffff80000080d8c3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d8c7:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d8ca:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080d8d1:	48 85 d2             	test   rdx,rdx
ffff80000080d8d4:	75 0c                	jne    ffff80000080d8e2 <sys_wait+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:265
        return -ECHILD;//没有子进程可以等
ffff80000080d8d6:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080d8dd:	e9 ef 01 00 00       	jmp    ffff80000080dad1 <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266
    if(pid==-1){
ffff80000080d8e2:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
ffff80000080d8e6:	75 58                	jne    ffff80000080d940 <sys_wait+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d8e8:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d8ef:	ff ff ff 
ffff80000080d8f2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d8f6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d8f9:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080d900:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080d904:	eb 31                	jmp    ffff80000080d937 <sys_wait+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
                struct process* p=l->data;
ffff80000080d906:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080d90a:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080d90e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:271
                if(p->stat == TASK_ZOMBIE) {
ffff80000080d912:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080d916:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080d919:	83 fa 04             	cmp    edx,0x4
ffff80000080d91c:	75 0d                	jne    ffff80000080d92b <sys_wait+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:272
                    waitee=p;
ffff80000080d91e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080d922:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
                    goto done;
ffff80000080d926:	e9 46 01 00 00       	jmp    ffff80000080da71 <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d92b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080d92f:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080d933:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269 (discriminator 1)
ffff80000080d937:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff80000080d93c:	75 c8                	jne    ffff80000080d906 <sys_wait+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
ffff80000080d93e:	eb a8                	jmp    ffff80000080d8e8 <sys_wait+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:278
                }
            }
        }

    }else if(pid==0) {
ffff80000080d940:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080d944:	75 77                	jne    ffff80000080d9bd <sys_wait+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d946:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d94d:	ff ff ff 
ffff80000080d950:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d954:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d957:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080d95e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080d962:	eb 50                	jmp    ffff80000080d9b4 <sys_wait+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
                struct process* p=l->data;
ffff80000080d964:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d968:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080d96c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
ffff80000080d970:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d974:	8b 4a 04             	mov    ecx,DWORD PTR [rdx+0x4]
ffff80000080d977:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d97e:	ff ff ff 
ffff80000080d981:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d985:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d988:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080d98b:	39 d1                	cmp    ecx,edx
ffff80000080d98d:	75 19                	jne    ffff80000080d9a8 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283 (discriminator 1)
ffff80000080d98f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d993:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080d996:	83 fa 04             	cmp    edx,0x4
ffff80000080d999:	75 0d                	jne    ffff80000080d9a8 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284
                    waitee=p;
ffff80000080d99b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080d99f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
                    goto done;
ffff80000080d9a3:	e9 c9 00 00 00       	jmp    ffff80000080da71 <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d9a8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d9ac:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080d9b0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281 (discriminator 1)
ffff80000080d9b4:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d9b9:	75 a9                	jne    ffff80000080d964 <sys_wait+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281
ffff80000080d9bb:	eb 89                	jmp    ffff80000080d946 <sys_wait+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:290
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
ffff80000080d9bd:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080d9c1:	79 03                	jns    ffff80000080d9c6 <sys_wait+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:290 (discriminator 1)
ffff80000080d9c3:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080d9c6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080d9cd:	eb 4f                	jmp    ffff80000080da1e <sys_wait+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293
            if(task[i].pid==pid){
ffff80000080d9cf:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080d9d6:	ff ff ff 
ffff80000080d9d9:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d9dd:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080d9e0:	48 63 d2             	movsxd rdx,edx
ffff80000080d9e3:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080d9ea:	48 01 ca             	add    rdx,rcx
ffff80000080d9ed:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080d9ef:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080d9f2:	39 d1                	cmp    ecx,edx
ffff80000080d9f4:	75 24                	jne    ffff80000080da1a <sys_wait+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294
                waitee=&task[i];
ffff80000080d9f6:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080d9f9:	48 63 d2             	movsxd rdx,edx
ffff80000080d9fc:	48 69 ca 54 03 00 00 	imul   rcx,rdx,0x354
ffff80000080da03:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080da0a:	ff ff ff 
ffff80000080da0d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080da11:	48 01 ca             	add    rdx,rcx
ffff80000080da14:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295
                break;
ffff80000080da18:	eb 0a                	jmp    ffff80000080da24 <sys_wait+0x199>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080da1a:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292 (discriminator 1)
ffff80000080da1e:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080da22:	7e ab                	jle    ffff80000080d9cf <sys_wait+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
ffff80000080da24:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080da29:	74 21                	je     ffff80000080da4c <sys_wait+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298 (discriminator 1)
ffff80000080da2b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080da2f:	8b 92 bc 00 00 00    	mov    edx,DWORD PTR [rdx+0xbc]
ffff80000080da35:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff80000080da3c:	ff ff ff 
ffff80000080da3f:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080da43:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080da46:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080da48:	39 c2                	cmp    edx,eax
ffff80000080da4a:	74 09                	je     ffff80000080da55 <sys_wait+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
            return -ECHILD;//没有这个进程或者不是子进程
ffff80000080da4c:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080da53:	eb 7c                	jmp    ffff80000080dad1 <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:301
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
ffff80000080da55:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:301 (discriminator 1)
ffff80000080da56:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080da5a:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080da5d:	83 f8 04             	cmp    eax,0x4
ffff80000080da60:	75 f4                	jne    ffff80000080da56 <sys_wait+0x1cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302
        *stat_loc=waitee->exit_code;
ffff80000080da62:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080da66:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080da69:	89 c2                	mov    edx,eax
ffff80000080da6b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080da6f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:306
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
ffff80000080da71:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080da75:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:308
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
ffff80000080da7c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080da80:	48 05 34 03 00 00    	add    rax,0x334
ffff80000080da86:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
    }
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
ffff80000080da8a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080da8e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080da91:	48 85 c0             	test   rax,rax
ffff80000080da94:	74 13                	je     ffff80000080daa9 <sys_wait+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:48
        entry->prev->next=entry->next;
ffff80000080da96:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080da9a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080da9d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080daa1:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080daa5:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:49
    if(entry->next)
ffff80000080daa9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080daad:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080dab1:	48 85 c0             	test   rax,rax
ffff80000080dab4:	74 12                	je     ffff80000080dac8 <sys_wait+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:50
        entry->next->prev=entry->prev;
ffff80000080dab6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080daba:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080dabe:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080dac2:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080dac5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:51
}
ffff80000080dac8:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:310
    //TODO 被信号中断时返回-1
    return waitee->pid;
ffff80000080dac9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080dacd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080dacf:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:311
}
ffff80000080dad1:	5d                   	pop    rbp
ffff80000080dad2:	c3                   	ret    

ffff80000080dad3 <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:313
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
ffff80000080dad3:	f3 0f 1e fa          	endbr64 
ffff80000080dad7:	55                   	push   rbp
ffff80000080dad8:	48 89 e5             	mov    rbp,rsp
ffff80000080dadb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dadb <sys_wait4+0x8>
ffff80000080dae2:	49 bb a5 4f 01 00 00 	movabs r11,0x14fa5
ffff80000080dae9:	00 00 00 
ffff80000080daec:	4c 01 d8             	add    rax,r11
ffff80000080daef:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080daf3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080daf7:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080dafa:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:349
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
ffff80000080dafe:	90                   	nop
ffff80000080daff:	5d                   	pop    rbp
ffff80000080db00:	c3                   	ret    

ffff80000080db01 <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:352

unsigned long sys_brk(unsigned long brk)
{
ffff80000080db01:	f3 0f 1e fa          	endbr64 
ffff80000080db05:	55                   	push   rbp
ffff80000080db06:	48 89 e5             	mov    rbp,rsp
ffff80000080db09:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080db09 <sys_brk+0x8>
ffff80000080db10:	49 bb 77 4f 01 00 00 	movabs r11,0x14f77
ffff80000080db17:	00 00 00 
ffff80000080db1a:	4c 01 d8             	add    rax,r11
ffff80000080db1d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:366
//
//    new_brk = do_brk(current->mm->end_brk,new_brk - current->mm->end_brk);	//expand brk space
//
//    current->mm->end_brk = new_brk;
//    return new_brk;
}
ffff80000080db21:	90                   	nop
ffff80000080db22:	5d                   	pop    rbp
ffff80000080db23:	c3                   	ret    

ffff80000080db24 <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:369

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
ffff80000080db24:	f3 0f 1e fa          	endbr64 
ffff80000080db28:	55                   	push   rbp
ffff80000080db29:	48 89 e5             	mov    rbp,rsp
ffff80000080db2c:	41 57                	push   r15
ffff80000080db2e:	53                   	push   rbx
ffff80000080db2f:	48 83 ec 10          	sub    rsp,0x10
ffff80000080db33:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080db33 <sys_reboot+0xf>
ffff80000080db3a:	49 bb 4d 4f 01 00 00 	movabs r11,0x14f4d
ffff80000080db41:	00 00 00 
ffff80000080db44:	4c 01 db             	add    rbx,r11
ffff80000080db47:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080db4b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:370
    printf("sys_reboot\n");
ffff80000080db4f:	48 b8 1b d6 ff ff ff 	movabs rax,0xffffffffffffd61b
ffff80000080db56:	ff ff ff 
ffff80000080db59:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080db5d:	48 89 c7             	mov    rdi,rax
ffff80000080db60:	49 89 df             	mov    r15,rbx
ffff80000080db63:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080db68:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080db6f:	ff ff ff 
ffff80000080db72:	48 01 da             	add    rdx,rbx
ffff80000080db75:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:371
    switch(cmd)
ffff80000080db77:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080db7c:	74 09                	je     ffff80000080db87 <sys_reboot+0x63>
ffff80000080db7e:	48 83 7d e8 02       	cmp    QWORD PTR [rbp-0x18],0x2
ffff80000080db83:	74 20                	je     ffff80000080dba5 <sys_reboot+0x81>
ffff80000080db85:	eb 48                	jmp    ffff80000080dbcf <sys_reboot+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:374
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
ffff80000080db87:	be fe 00 00 00       	mov    esi,0xfe
ffff80000080db8c:	bf 64 00 00 00       	mov    edi,0x64
ffff80000080db91:	49 89 df             	mov    r15,rbx
ffff80000080db94:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080db9b:	ff ff ff 
ffff80000080db9e:	48 01 d8             	add    rax,rbx
ffff80000080dba1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:375
            break;
ffff80000080dba3:	eb 53                	jmp    ffff80000080dbf8 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:378

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
ffff80000080dba5:	48 b8 28 d6 ff ff ff 	movabs rax,0xffffffffffffd628
ffff80000080dbac:	ff ff ff 
ffff80000080dbaf:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080dbb3:	48 89 c7             	mov    rdi,rax
ffff80000080dbb6:	49 89 df             	mov    r15,rbx
ffff80000080dbb9:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dbbe:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080dbc5:	ff ff ff 
ffff80000080dbc8:	48 01 da             	add    rdx,rbx
ffff80000080dbcb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:379
            break;
ffff80000080dbcd:	eb 29                	jmp    ffff80000080dbf8 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:382

        default:
            printf("sys_reboot cmd ERROR!\n");
ffff80000080dbcf:	48 b8 48 d6 ff ff ff 	movabs rax,0xffffffffffffd648
ffff80000080dbd6:	ff ff ff 
ffff80000080dbd9:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080dbdd:	48 89 c7             	mov    rdi,rax
ffff80000080dbe0:	49 89 df             	mov    r15,rbx
ffff80000080dbe3:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dbe8:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080dbef:	ff ff ff 
ffff80000080dbf2:	48 01 da             	add    rdx,rbx
ffff80000080dbf5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383
            break;
ffff80000080dbf7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:385
    }
    return 0;
ffff80000080dbf8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386
}
ffff80000080dbfd:	48 83 c4 10          	add    rsp,0x10
ffff80000080dc01:	5b                   	pop    rbx
ffff80000080dc02:	41 5f                	pop    r15
ffff80000080dc04:	5d                   	pop    rbp
ffff80000080dc05:	c3                   	ret    

ffff80000080dc06 <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:390


unsigned long sys_chdir(char *filename)
{
ffff80000080dc06:	f3 0f 1e fa          	endbr64 
ffff80000080dc0a:	55                   	push   rbp
ffff80000080dc0b:	48 89 e5             	mov    rbp,rsp
ffff80000080dc0e:	41 57                	push   r15
ffff80000080dc10:	53                   	push   rbx
ffff80000080dc11:	48 83 ec 30          	sub    rsp,0x30
ffff80000080dc15:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dc15 <sys_chdir+0xf>
ffff80000080dc1c:	49 bb 6b 4e 01 00 00 	movabs r11,0x14e6b
ffff80000080dc23:	00 00 00 
ffff80000080dc26:	4c 01 db             	add    rbx,r11
ffff80000080dc29:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:391
    char * path = NULL;
ffff80000080dc2d:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080dc34:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:392
    long pathlen = 0;
ffff80000080dc35:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080dc3c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:393
    struct dir_entry * dentry = NULL;
ffff80000080dc3d:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080dc44:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:395

    printf("sys_chdir\n");
ffff80000080dc45:	48 b8 5f d6 ff ff ff 	movabs rax,0xffffffffffffd65f
ffff80000080dc4c:	ff ff ff 
ffff80000080dc4f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080dc53:	48 89 c7             	mov    rdi,rax
ffff80000080dc56:	49 89 df             	mov    r15,rbx
ffff80000080dc59:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dc5e:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080dc65:	ff ff ff 
ffff80000080dc68:	48 01 da             	add    rdx,rbx
ffff80000080dc6b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:396
    path = (char *) kmalloc();
ffff80000080dc6d:	49 89 df             	mov    r15,rbx
ffff80000080dc70:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dc75:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000080dc7c:	ff ff ff 
ffff80000080dc7f:	48 01 da             	add    rdx,rbx
ffff80000080dc82:	ff d2                	call   rdx
ffff80000080dc84:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:398

    if(path == NULL)
ffff80000080dc88:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080dc8d:	75 0c                	jne    ffff80000080dc9b <sys_chdir+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:399
        return -ENOMEM;
ffff80000080dc8f:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080dc96:	e9 28 01 00 00       	jmp    ffff80000080ddc3 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:400
    memset(path,0,PAGE_4K_SIZE);
ffff80000080dc9b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dc9f:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080dca4:	be 00 00 00 00       	mov    esi,0x0
ffff80000080dca9:	48 89 c7             	mov    rdi,rax
ffff80000080dcac:	49 89 df             	mov    r15,rbx
ffff80000080dcaf:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000080dcb6:	ff ff ff 
ffff80000080dcb9:	48 01 d8             	add    rax,rbx
ffff80000080dcbc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:401
    pathlen = strlen(filename);
ffff80000080dcbe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080dcc2:	48 89 c7             	mov    rdi,rax
ffff80000080dcc5:	49 89 df             	mov    r15,rbx
ffff80000080dcc8:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff80000080dccf:	ff ff ff 
ffff80000080dcd2:	48 01 d8             	add    rax,rbx
ffff80000080dcd5:	ff d0                	call   rax
ffff80000080dcd7:	48 98                	cdqe   
ffff80000080dcd9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:402
    if(pathlen <= 0)
ffff80000080dcdd:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080dce2:	7f 25                	jg     ffff80000080dd09 <sys_chdir+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:404
    {
        kmfree(path);
ffff80000080dce4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dce8:	48 89 c7             	mov    rdi,rax
ffff80000080dceb:	49 89 df             	mov    r15,rbx
ffff80000080dcee:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080dcf5:	ff ff ff 
ffff80000080dcf8:	48 01 d8             	add    rax,rbx
ffff80000080dcfb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
        return -EFAULT;
ffff80000080dcfd:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080dd04:	e9 ba 00 00 00       	jmp    ffff80000080ddc3 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:407
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080dd09:	48 81 7d e0 ff 0f 00 	cmp    QWORD PTR [rbp-0x20],0xfff
ffff80000080dd10:	00 
ffff80000080dd11:	7e 25                	jle    ffff80000080dd38 <sys_chdir+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:409
    {
        kmfree(path);
ffff80000080dd13:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dd17:	48 89 c7             	mov    rdi,rax
ffff80000080dd1a:	49 89 df             	mov    r15,rbx
ffff80000080dd1d:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080dd24:	ff ff ff 
ffff80000080dd27:	48 01 d8             	add    rax,rbx
ffff80000080dd2a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:410
        return -ENAMETOOLONG;
ffff80000080dd2c:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080dd33:	e9 8b 00 00 00       	jmp    ffff80000080ddc3 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:412
    }
    strcpy(filename,path);
ffff80000080dd38:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dd3c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080dd40:	48 89 d6             	mov    rsi,rdx
ffff80000080dd43:	48 89 c7             	mov    rdi,rax
ffff80000080dd46:	49 89 df             	mov    r15,rbx
ffff80000080dd49:	48 b8 49 12 ff ff ff 	movabs rax,0xffffffffffff1249
ffff80000080dd50:	ff ff ff 
ffff80000080dd53:	48 01 d8             	add    rax,rbx
ffff80000080dd56:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:414

    dentry = path_walk(path,0);
ffff80000080dd58:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dd5c:	be 00 00 00 00       	mov    esi,0x0
ffff80000080dd61:	48 89 c7             	mov    rdi,rax
ffff80000080dd64:	49 89 df             	mov    r15,rbx
ffff80000080dd67:	48 b8 d8 99 fe ff ff 	movabs rax,0xfffffffffffe99d8
ffff80000080dd6e:	ff ff ff 
ffff80000080dd71:	48 01 d8             	add    rax,rbx
ffff80000080dd74:	ff d0                	call   rax
ffff80000080dd76:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:415
    kmfree(path);
ffff80000080dd7a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dd7e:	48 89 c7             	mov    rdi,rax
ffff80000080dd81:	49 89 df             	mov    r15,rbx
ffff80000080dd84:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000080dd8b:	ff ff ff 
ffff80000080dd8e:	48 01 d8             	add    rax,rbx
ffff80000080dd91:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:417

    if(dentry == NULL)
ffff80000080dd93:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080dd98:	75 09                	jne    ffff80000080dda3 <sys_chdir+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:418
        return -ENOENT;
ffff80000080dd9a:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080dda1:	eb 20                	jmp    ffff80000080ddc3 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
ffff80000080dda3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080dda7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ddab:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ddaf:	48 83 f8 02          	cmp    rax,0x2
ffff80000080ddb3:	74 09                	je     ffff80000080ddbe <sys_chdir+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:420
        return -ENOTDIR;
ffff80000080ddb5:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080ddbc:	eb 05                	jmp    ffff80000080ddc3 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421
    return 0;
ffff80000080ddbe:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
}
ffff80000080ddc3:	48 83 c4 30          	add    rsp,0x30
ffff80000080ddc7:	5b                   	pop    rbx
ffff80000080ddc8:	41 5f                	pop    r15
ffff80000080ddca:	5d                   	pop    rbp
ffff80000080ddcb:	c3                   	ret    

ffff80000080ddcc <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:425

unsigned long sys_getdents(int fd, void * dirent, long count)
{
ffff80000080ddcc:	f3 0f 1e fa          	endbr64 
ffff80000080ddd0:	55                   	push   rbp
ffff80000080ddd1:	48 89 e5             	mov    rbp,rsp
ffff80000080ddd4:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ddd8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ddd8 <sys_getdents+0xc>
ffff80000080dddf:	49 bb a8 4c 01 00 00 	movabs r11,0x14ca8
ffff80000080dde6:	00 00 00 
ffff80000080dde9:	4c 01 d8             	add    rax,r11
ffff80000080ddec:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080ddef:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080ddf3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426
    struct file * filp = NULL;
ffff80000080ddf7:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080ddfe:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:427
    unsigned long ret = 0;
ffff80000080ddff:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080de06:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
ffff80000080de07:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080de0b:	78 06                	js     ffff80000080de13 <sys_getdents+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430 (discriminator 1)
ffff80000080de0d:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
ffff80000080de11:	7e 0c                	jle    ffff80000080de1f <sys_getdents+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431
        return -EBADF;
ffff80000080de13:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080de1a:	e9 85 00 00 00       	jmp    ffff80000080dea4 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:432
    if(count < 0)
ffff80000080de1f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080de24:	79 09                	jns    ffff80000080de2f <sys_getdents+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:433
        return -EINVAL;
ffff80000080de26:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080de2d:	eb 75                	jmp    ffff80000080dea4 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:435

    filp = current->openf[fd];
ffff80000080de2f:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080de36:	ff ff ff 
ffff80000080de39:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080de3d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080de40:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080de43:	48 63 c9             	movsxd rcx,ecx
ffff80000080de46:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080de4a:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080de4f:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436
    if(filp->f_ops && filp->f_ops->readdir)
ffff80000080de53:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080de57:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080de5b:	48 85 d2             	test   rdx,rdx
ffff80000080de5e:	74 40                	je     ffff80000080dea0 <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436 (discriminator 1)
ffff80000080de60:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080de64:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080de68:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080de6c:	48 85 d2             	test   rdx,rdx
ffff80000080de6f:	74 2f                	je     ffff80000080dea0 <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
ffff80000080de71:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080de75:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080de79:	4c 8b 42 30          	mov    r8,QWORD PTR [rdx+0x30]
ffff80000080de7d:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080de81:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080de85:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080de8c:	ff ff ff 
ffff80000080de8f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080de93:	48 89 c2             	mov    rdx,rax
ffff80000080de96:	48 89 cf             	mov    rdi,rcx
ffff80000080de99:	41 ff d0             	call   r8
ffff80000080de9c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:438
    return ret;
ffff80000080dea0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439
}
ffff80000080dea4:	c9                   	leave  
ffff80000080dea5:	c3                   	ret    

ffff80000080dea6 <init_ramfs>:
init_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:28
};
struct index_node_operations ramfs_iops={
        .lookup=lookup_inode_ramfs,.create=create_inode_ramfs
};
struct index_node* test;
void init_ramfs(){
ffff80000080dea6:	f3 0f 1e fa          	endbr64 
ffff80000080deaa:	55                   	push   rbp
ffff80000080deab:	48 89 e5             	mov    rbp,rsp
ffff80000080deae:	41 57                	push   r15
ffff80000080deb0:	53                   	push   rbx
ffff80000080deb1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080deb1 <init_ramfs+0xb>
ffff80000080deb8:	49 bb cf 4b 01 00 00 	movabs r11,0x14bcf
ffff80000080debf:	00 00 00 
ffff80000080dec2:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:30
    //挂载新文件系统到/mnt
    ramdisk_base= (char *) kmallocat(0, 100);
ffff80000080dec5:	be 64 00 00 00       	mov    esi,0x64
ffff80000080deca:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080decf:	49 89 df             	mov    r15,rbx
ffff80000080ded2:	48 b8 28 f7 fd ff ff 	movabs rax,0xfffffffffffdf728
ffff80000080ded9:	ff ff ff 
ffff80000080dedc:	48 01 d8             	add    rax,rbx
ffff80000080dedf:	ff d0                	call   rax
ffff80000080dee1:	48 89 c2             	mov    rdx,rax
ffff80000080dee4:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff80000080deeb:	ff ff ff 
ffff80000080deee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080def2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:31
    if(ramdisk_base==-1){
ffff80000080def5:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff80000080defc:	ff ff ff 
ffff80000080deff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df03:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080df06:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
ffff80000080df0a:	75 2d                	jne    ffff80000080df39 <init_ramfs+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:32
        comprintf("failed to init ramfs.\n");
ffff80000080df0c:	48 b8 6a d6 ff ff ff 	movabs rax,0xffffffffffffd66a
ffff80000080df13:	ff ff ff 
ffff80000080df16:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080df1a:	48 89 c7             	mov    rdi,rax
ffff80000080df1d:	49 89 df             	mov    r15,rbx
ffff80000080df20:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080df25:	48 ba a4 0c ff ff ff 	movabs rdx,0xffffffffffff0ca4
ffff80000080df2c:	ff ff ff 
ffff80000080df2f:	48 01 da             	add    rdx,rbx
ffff80000080df32:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:33
        return;
ffff80000080df34:	e9 c2 01 00 00       	jmp    ffff80000080e0fb <init_ramfs+0x255>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:35
    }
    ramdisk_size=PAGE_4K_SIZE*100;
ffff80000080df39:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff80000080df40:	ff ff ff 
ffff80000080df43:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df47:	48 c7 00 00 40 06 00 	mov    QWORD PTR [rax],0x64000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:37

    ramfs_sb.sb_ops=&ramfs_fops;
ffff80000080df4e:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff80000080df55:	ff ff ff 
ffff80000080df58:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df5c:	48 ba 10 fd ff ff ff 	movabs rdx,0xfffffffffffffd10
ffff80000080df63:	ff ff ff 
ffff80000080df66:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080df6a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:38
    ramfs_sb.root=dmnt;
ffff80000080df6e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080df75:	ff ff ff 
ffff80000080df78:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df7c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080df7f:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff80000080df86:	ff ff ff 
ffff80000080df89:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df8d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:40
    //解压img里面的test程序
    memcpy(ramdisk_base, _binary_bin_test_elf_start, (char*)_binary_bin_test_elf_end - (char*)_binary_bin_test_elf_start);
ffff80000080df90:	48 b8 18 fd ff ff ff 	movabs rax,0xfffffffffffffd18
ffff80000080df97:	ff ff ff 
ffff80000080df9a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df9e:	48 89 c2             	mov    rdx,rax
ffff80000080dfa1:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000080dfa8:	ff ff ff 
ffff80000080dfab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dfaf:	48 89 c1             	mov    rcx,rax
ffff80000080dfb2:	48 89 d0             	mov    rax,rdx
ffff80000080dfb5:	48 29 c8             	sub    rax,rcx
ffff80000080dfb8:	89 c2                	mov    edx,eax
ffff80000080dfba:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff80000080dfc1:	ff ff ff 
ffff80000080dfc4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dfc8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080dfcb:	48 b9 90 fd ff ff ff 	movabs rcx,0xfffffffffffffd90
ffff80000080dfd2:	ff ff ff 
ffff80000080dfd5:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080dfd9:	48 89 ce             	mov    rsi,rcx
ffff80000080dfdc:	48 89 c7             	mov    rdi,rax
ffff80000080dfdf:	49 89 df             	mov    r15,rbx
ffff80000080dfe2:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff80000080dfe9:	ff ff ff 
ffff80000080dfec:	48 01 d8             	add    rax,rbx
ffff80000080dfef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:41
    test= (struct index_node *) kmalloc();
ffff80000080dff1:	49 89 df             	mov    r15,rbx
ffff80000080dff4:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dff9:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000080e000:	ff ff ff 
ffff80000080e003:	48 01 da             	add    rdx,rbx
ffff80000080e006:	ff d2                	call   rdx
ffff80000080e008:	48 89 c2             	mov    rdx,rax
ffff80000080e00b:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e012:	ff ff ff 
ffff80000080e015:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e019:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:42
    test->f_ops=&ramfs_fops;
ffff80000080e01c:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e023:	ff ff ff 
ffff80000080e026:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e02a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e02d:	48 ba 10 fd ff ff ff 	movabs rdx,0xfffffffffffffd10
ffff80000080e034:	ff ff ff 
ffff80000080e037:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e03b:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:43
    test->file_size= (char*)_binary_bin_test_elf_end - (char*)_binary_bin_test_elf_start;
ffff80000080e03f:	48 b8 18 fd ff ff ff 	movabs rax,0xfffffffffffffd18
ffff80000080e046:	ff ff ff 
ffff80000080e049:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e04d:	48 89 c2             	mov    rdx,rax
ffff80000080e050:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000080e057:	ff ff ff 
ffff80000080e05a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e05e:	48 29 c2             	sub    rdx,rax
ffff80000080e061:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e068:	ff ff ff 
ffff80000080e06b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e06f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e072:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:44
    test->sb=&ramfs_sb;
ffff80000080e075:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e07c:	ff ff ff 
ffff80000080e07f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e083:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e086:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000080e08d:	ff ff ff 
ffff80000080e090:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e094:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:45
    test->attribute=FS_ATTR_FILE;
ffff80000080e098:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e09f:	ff ff ff 
ffff80000080e0a2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e0a6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e0a9:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080e0b0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:46
    test->inode_ops=&ramfs_iops;
ffff80000080e0b1:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e0b8:	ff ff ff 
ffff80000080e0bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e0bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e0c2:	48 ba c0 ff ff ff ff 	movabs rdx,0xffffffffffffffc0
ffff80000080e0c9:	ff ff ff 
ffff80000080e0cc:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e0d0:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:48
    //设置一下dmnt的inode的操作，查找的时候会用到
    dmnt->dir_inode->inode_ops=&ramfs_iops;
ffff80000080e0d4:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080e0db:	ff ff ff 
ffff80000080e0de:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e0e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e0e5:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080e0e9:	48 ba c0 ff ff ff ff 	movabs rdx,0xffffffffffffffc0
ffff80000080e0f0:	ff ff ff 
ffff80000080e0f3:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e0f7:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:49
}
ffff80000080e0fb:	5b                   	pop    rbx
ffff80000080e0fc:	41 5f                	pop    r15
ffff80000080e0fe:	5d                   	pop    rbp
ffff80000080e0ff:	c3                   	ret    

ffff80000080e100 <create_inode_ramfs>:
create_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:51

long create_inode_ramfs(struct index_node * inode,struct dir_entry * dentry,int mode){}
ffff80000080e100:	f3 0f 1e fa          	endbr64 
ffff80000080e104:	55                   	push   rbp
ffff80000080e105:	48 89 e5             	mov    rbp,rsp
ffff80000080e108:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e108 <create_inode_ramfs+0x8>
ffff80000080e10f:	49 bb 78 49 01 00 00 	movabs r11,0x14978
ffff80000080e116:	00 00 00 
ffff80000080e119:	4c 01 d8             	add    rax,r11
ffff80000080e11c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e120:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080e124:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080e127:	90                   	nop
ffff80000080e128:	5d                   	pop    rbp
ffff80000080e129:	c3                   	ret    

ffff80000080e12a <lookup_inode_ramfs>:
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:52
struct dir_entry* lookup_inode_ramfs(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080e12a:	f3 0f 1e fa          	endbr64 
ffff80000080e12e:	55                   	push   rbp
ffff80000080e12f:	48 89 e5             	mov    rbp,rsp
ffff80000080e132:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e132 <lookup_inode_ramfs+0x8>
ffff80000080e139:	49 bb 4e 49 01 00 00 	movabs r11,0x1494e
ffff80000080e140:	00 00 00 
ffff80000080e143:	4c 01 d8             	add    rax,r11
ffff80000080e146:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080e14a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:53
    list_init(&dest_dentry->subdirs_list);
ffff80000080e14e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e152:	48 83 c2 28          	add    rdx,0x28
ffff80000080e156:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080e15a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e15e:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080e165:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e169:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080e170:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080e171:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:54
    list_init(&dest_dentry->child_node);
ffff80000080e172:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e176:	48 83 c2 10          	add    rdx,0x10
ffff80000080e17a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080e17e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080e182:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080e189:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080e18d:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080e194:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080e195:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:55
    dest_dentry->dir_inode=test;
ffff80000080e196:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080e19d:	ff ff ff 
ffff80000080e1a0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e1a4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e1a7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e1ab:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:56
    dest_dentry->child_node.data=dest_dentry;
ffff80000080e1af:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e1b3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e1b7:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:57
    return dest_dentry;
ffff80000080e1bb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:58
}
ffff80000080e1bf:	5d                   	pop    rbp
ffff80000080e1c0:	c3                   	ret    

ffff80000080e1c1 <open_ramfs>:
open_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:59
long open_ramfs(struct index_node * inode,struct file * filp){
ffff80000080e1c1:	f3 0f 1e fa          	endbr64 
ffff80000080e1c5:	55                   	push   rbp
ffff80000080e1c6:	48 89 e5             	mov    rbp,rsp
ffff80000080e1c9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e1c9 <open_ramfs+0x8>
ffff80000080e1d0:	49 bb b7 48 01 00 00 	movabs r11,0x148b7
ffff80000080e1d7:	00 00 00 
ffff80000080e1da:	4c 01 d8             	add    rax,r11
ffff80000080e1dd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e1e1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:60
    filp->f_ops=inode->f_ops;
ffff80000080e1e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080e1e9:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080e1ed:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e1f1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:61
    filp->position=0;
ffff80000080e1f5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e1f9:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:62
    return 1;
ffff80000080e200:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:63
}
ffff80000080e205:	5d                   	pop    rbp
ffff80000080e206:	c3                   	ret    

ffff80000080e207 <close_ramfs>:
close_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:65

long close_ramfs(struct index_node * inode,struct file * filp){
ffff80000080e207:	f3 0f 1e fa          	endbr64 
ffff80000080e20b:	55                   	push   rbp
ffff80000080e20c:	48 89 e5             	mov    rbp,rsp
ffff80000080e20f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e20f <close_ramfs+0x8>
ffff80000080e216:	49 bb 71 48 01 00 00 	movabs r11,0x14871
ffff80000080e21d:	00 00 00 
ffff80000080e220:	4c 01 d8             	add    rax,r11
ffff80000080e223:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e227:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:66
    return 0;
ffff80000080e22b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:67
}
ffff80000080e230:	5d                   	pop    rbp
ffff80000080e231:	c3                   	ret    

ffff80000080e232 <read_ramfs>:
read_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:69
//注意一下:position是指针
long read_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080e232:	f3 0f 1e fa          	endbr64 
ffff80000080e236:	55                   	push   rbp
ffff80000080e237:	48 89 e5             	mov    rbp,rsp
ffff80000080e23a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e23a <read_ramfs+0x8>
ffff80000080e241:	49 bb 46 48 01 00 00 	movabs r11,0x14846
ffff80000080e248:	00 00 00 
ffff80000080e24b:	4c 01 d8             	add    rax,r11
ffff80000080e24e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080e252:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080e256:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080e25a:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:70
    int len= (char*)_binary_bin_test_elf_end - (char*)_binary_bin_test_elf_start - *position;
ffff80000080e25e:	48 ba 18 fd ff ff ff 	movabs rdx,0xfffffffffffffd18
ffff80000080e265:	ff ff ff 
ffff80000080e268:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e26c:	48 89 d1             	mov    rcx,rdx
ffff80000080e26f:	48 ba 90 fd ff ff ff 	movabs rdx,0xfffffffffffffd90
ffff80000080e276:	ff ff ff 
ffff80000080e279:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e27d:	48 89 d6             	mov    rsi,rdx
ffff80000080e280:	48 29 f1             	sub    rcx,rsi
ffff80000080e283:	48 89 ca             	mov    rdx,rcx
ffff80000080e286:	89 d1                	mov    ecx,edx
ffff80000080e288:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080e28c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e28f:	89 d6                	mov    esi,edx
ffff80000080e291:	29 f1                	sub    ecx,esi
ffff80000080e293:	89 ca                	mov    edx,ecx
ffff80000080e295:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:71
    if(len>count)len=count;
ffff80000080e298:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e29b:	48 63 d2             	movsxd rdx,edx
ffff80000080e29e:	48 39 55 d8          	cmp    QWORD PTR [rbp-0x28],rdx
ffff80000080e2a2:	73 07                	jae    ffff80000080e2ab <read_ramfs+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:71 (discriminator 1)
ffff80000080e2a4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080e2a8:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:72
    for(int i=0;i<len;i++){
ffff80000080e2ab:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080e2b2:	eb 36                	jmp    ffff80000080e2ea <read_ramfs+0xb8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:73 (discriminator 3)
        buf[i]=_binary_bin_test_elf_start[i + *position];
ffff80000080e2b4:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080e2b7:	48 63 ca             	movsxd rcx,edx
ffff80000080e2ba:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080e2be:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e2c1:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080e2c5:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080e2c8:	48 63 ca             	movsxd rcx,edx
ffff80000080e2cb:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e2cf:	48 01 d1             	add    rcx,rdx
ffff80000080e2d2:	48 ba 90 fd ff ff ff 	movabs rdx,0xfffffffffffffd90
ffff80000080e2d9:	ff ff ff 
ffff80000080e2dc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e2e0:	0f b6 14 32          	movzx  edx,BYTE PTR [rdx+rsi*1]
ffff80000080e2e4:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:72 (discriminator 3)
    for(int i=0;i<len;i++){
ffff80000080e2e6:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:72 (discriminator 1)
ffff80000080e2ea:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080e2ed:	3b 55 fc             	cmp    edx,DWORD PTR [rbp-0x4]
ffff80000080e2f0:	7c c2                	jl     ffff80000080e2b4 <read_ramfs+0x82>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:75
    }
    *position+=len;
ffff80000080e2f2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080e2f6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e2f9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080e2fc:	48 98                	cdqe   
ffff80000080e2fe:	48 01 c2             	add    rdx,rax
ffff80000080e301:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080e305:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:76
    return 0;
ffff80000080e308:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:77
}
ffff80000080e30d:	5d                   	pop    rbp
ffff80000080e30e:	c3                   	ret    

ffff80000080e30f <write_ramfs>:
write_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:78
long write_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080e30f:	f3 0f 1e fa          	endbr64 
ffff80000080e313:	55                   	push   rbp
ffff80000080e314:	48 89 e5             	mov    rbp,rsp
ffff80000080e317:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e317 <write_ramfs+0x8>
ffff80000080e31e:	49 bb 69 47 01 00 00 	movabs r11,0x14769
ffff80000080e325:	00 00 00 
ffff80000080e328:	4c 01 d8             	add    rax,r11
ffff80000080e32b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e32f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080e333:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080e337:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:79
    return 0;
ffff80000080e33b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:80
}
ffff80000080e340:	5d                   	pop    rbp
ffff80000080e341:	c3                   	ret    

ffff80000080e342 <ioctl_ramfs>:
ioctl_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:81
long ioctl_ramfs(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080e342:	f3 0f 1e fa          	endbr64 
ffff80000080e346:	55                   	push   rbp
ffff80000080e347:	48 89 e5             	mov    rbp,rsp
ffff80000080e34a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e34a <ioctl_ramfs+0x8>
ffff80000080e351:	49 bb 36 47 01 00 00 	movabs r11,0x14736
ffff80000080e358:	00 00 00 
ffff80000080e35b:	4c 01 d8             	add    rax,r11
ffff80000080e35e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e362:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080e366:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080e36a:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:82
    return 0;
ffff80000080e36e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:83
ffff80000080e373:	5d                   	pop    rbp
ffff80000080e374:	c3                   	ret    

ffff80000080e375 <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
ffff80000080e375:	f3 0f 1e fa          	endbr64 
ffff80000080e379:	55                   	push   rbp
ffff80000080e37a:	48 89 e5             	mov    rbp,rsp
ffff80000080e37d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e37d <shift+0x8>
ffff80000080e384:	49 bb 03 47 01 00 00 	movabs r11,0x14703
ffff80000080e38b:	00 00 00 
ffff80000080e38e:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:134
    k_shift=!k_shift;
ffff80000080e391:	48 ba 60 ff ff ff ff 	movabs rdx,0xffffffffffffff60
ffff80000080e398:	ff ff ff 
ffff80000080e39b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e39f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e3a2:	84 d2                	test   dl,dl
ffff80000080e3a4:	0f 94 c2             	sete   dl
ffff80000080e3a7:	89 d1                	mov    ecx,edx
ffff80000080e3a9:	48 ba 60 ff ff ff ff 	movabs rdx,0xffffffffffffff60
ffff80000080e3b0:	ff ff ff 
ffff80000080e3b3:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e3b7:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
}
ffff80000080e3b9:	90                   	nop
ffff80000080e3ba:	5d                   	pop    rbp
ffff80000080e3bb:	c3                   	ret    

ffff80000080e3bc <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
void ctrl()
{
ffff80000080e3bc:	f3 0f 1e fa          	endbr64 
ffff80000080e3c0:	55                   	push   rbp
ffff80000080e3c1:	48 89 e5             	mov    rbp,rsp
ffff80000080e3c4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e3c4 <ctrl+0x8>
ffff80000080e3cb:	49 bb bc 46 01 00 00 	movabs r11,0x146bc
ffff80000080e3d2:	00 00 00 
ffff80000080e3d5:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:138
    k_ctrl=!k_ctrl;
ffff80000080e3d8:	48 ba 00 fd ff ff ff 	movabs rdx,0xfffffffffffffd00
ffff80000080e3df:	ff ff ff 
ffff80000080e3e2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e3e6:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e3e9:	84 d2                	test   dl,dl
ffff80000080e3eb:	0f 94 c2             	sete   dl
ffff80000080e3ee:	89 d1                	mov    ecx,edx
ffff80000080e3f0:	48 ba 00 fd ff ff ff 	movabs rdx,0xfffffffffffffd00
ffff80000080e3f7:	ff ff ff 
ffff80000080e3fa:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e3fe:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
}
ffff80000080e400:	90                   	nop
ffff80000080e401:	5d                   	pop    rbp
ffff80000080e402:	c3                   	ret    

ffff80000080e403 <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
void capslock()
{
ffff80000080e403:	f3 0f 1e fa          	endbr64 
ffff80000080e407:	55                   	push   rbp
ffff80000080e408:	48 89 e5             	mov    rbp,rsp
ffff80000080e40b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e40b <capslock+0x8>
ffff80000080e412:	49 bb 75 46 01 00 00 	movabs r11,0x14675
ffff80000080e419:	00 00 00 
ffff80000080e41c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:142
    k_capslock=k_capslock==0?1:0;
ffff80000080e41f:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080e426:	ff ff ff 
ffff80000080e429:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e42d:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e430:	84 d2                	test   dl,dl
ffff80000080e432:	0f 94 c2             	sete   dl
ffff80000080e435:	89 d1                	mov    ecx,edx
ffff80000080e437:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080e43e:	ff ff ff 
ffff80000080e441:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e445:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:143
}
ffff80000080e447:	90                   	nop
ffff80000080e448:	5d                   	pop    rbp
ffff80000080e449:	c3                   	ret    

ffff80000080e44a <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
char to_ascii(char scan_code)
{
ffff80000080e44a:	f3 0f 1e fa          	endbr64 
ffff80000080e44e:	55                   	push   rbp
ffff80000080e44f:	48 89 e5             	mov    rbp,rsp
ffff80000080e452:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e452 <to_ascii+0x8>
ffff80000080e459:	49 bb 2e 46 01 00 00 	movabs r11,0x1462e
ffff80000080e460:	00 00 00 
ffff80000080e463:	4c 01 d8             	add    rax,r11
ffff80000080e466:	89 fa                	mov    edx,edi
ffff80000080e468:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e46b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080e472:	e9 25 01 00 00       	jmp    ffff80000080e59c <to_ascii+0x152>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
        if(key_map[i].scan_code==scan_code)
ffff80000080e477:	48 be a0 d6 ff ff ff 	movabs rsi,0xffffffffffffd6a0
ffff80000080e47e:	ff ff ff 
ffff80000080e481:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e484:	48 63 ca             	movsxd rcx,edx
ffff80000080e487:	48 89 ca             	mov    rdx,rcx
ffff80000080e48a:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e48e:	48 01 ca             	add    rdx,rcx
ffff80000080e491:	48 01 c2             	add    rdx,rax
ffff80000080e494:	48 01 f2             	add    rdx,rsi
ffff80000080e497:	48 83 c2 02          	add    rdx,0x2
ffff80000080e49b:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e49e:	38 55 ec             	cmp    BYTE PTR [rbp-0x14],dl
ffff80000080e4a1:	0f 85 f1 00 00 00    	jne    ffff80000080e598 <to_ascii+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
ffff80000080e4a7:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080e4ae:	ff ff ff 
ffff80000080e4b1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e4b5:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e4b8:	84 d2                	test   dl,dl
ffff80000080e4ba:	74 79                	je     ffff80000080e535 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 1)
ffff80000080e4bc:	48 be a0 d6 ff ff ff 	movabs rsi,0xffffffffffffd6a0
ffff80000080e4c3:	ff ff ff 
ffff80000080e4c6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e4c9:	48 63 ca             	movsxd rcx,edx
ffff80000080e4cc:	48 01 c6             	add    rsi,rax
ffff80000080e4cf:	48 89 ca             	mov    rdx,rcx
ffff80000080e4d2:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e4d6:	48 01 ca             	add    rdx,rcx
ffff80000080e4d9:	48 01 f2             	add    rdx,rsi
ffff80000080e4dc:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e4df:	80 fa 60             	cmp    dl,0x60
ffff80000080e4e2:	7e 51                	jle    ffff80000080e535 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 2)
ffff80000080e4e4:	48 be a0 d6 ff ff ff 	movabs rsi,0xffffffffffffd6a0
ffff80000080e4eb:	ff ff ff 
ffff80000080e4ee:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e4f1:	48 63 ca             	movsxd rcx,edx
ffff80000080e4f4:	48 01 c6             	add    rsi,rax
ffff80000080e4f7:	48 89 ca             	mov    rdx,rcx
ffff80000080e4fa:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e4fe:	48 01 ca             	add    rdx,rcx
ffff80000080e501:	48 01 f2             	add    rdx,rsi
ffff80000080e504:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e507:	80 fa 7a             	cmp    dl,0x7a
ffff80000080e50a:	7f 29                	jg     ffff80000080e535 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 3)
ffff80000080e50c:	48 be a0 d6 ff ff ff 	movabs rsi,0xffffffffffffd6a0
ffff80000080e513:	ff ff ff 
ffff80000080e516:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e519:	48 63 ca             	movsxd rcx,edx
ffff80000080e51c:	48 89 ca             	mov    rdx,rcx
ffff80000080e51f:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e523:	48 01 ca             	add    rdx,rcx
ffff80000080e526:	48 01 d0             	add    rax,rdx
ffff80000080e529:	48 01 f0             	add    rax,rsi
ffff80000080e52c:	48 83 c0 01          	add    rax,0x1
ffff80000080e530:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e533:	eb 76                	jmp    ffff80000080e5ab <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
            else if(k_shift)return key_map[i].ascii_shift;
ffff80000080e535:	48 ba 60 ff ff ff ff 	movabs rdx,0xffffffffffffff60
ffff80000080e53c:	ff ff ff 
ffff80000080e53f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e543:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e546:	84 d2                	test   dl,dl
ffff80000080e548:	74 29                	je     ffff80000080e573 <to_ascii+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150 (discriminator 1)
ffff80000080e54a:	48 be a0 d6 ff ff ff 	movabs rsi,0xffffffffffffd6a0
ffff80000080e551:	ff ff ff 
ffff80000080e554:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e557:	48 63 ca             	movsxd rcx,edx
ffff80000080e55a:	48 89 ca             	mov    rdx,rcx
ffff80000080e55d:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e561:	48 01 ca             	add    rdx,rcx
ffff80000080e564:	48 01 d0             	add    rax,rdx
ffff80000080e567:	48 01 f0             	add    rax,rsi
ffff80000080e56a:	48 83 c0 01          	add    rax,0x1
ffff80000080e56e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e571:	eb 38                	jmp    ffff80000080e5ab <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
            else return key_map[i].ascii;
ffff80000080e573:	48 b9 a0 d6 ff ff ff 	movabs rcx,0xffffffffffffd6a0
ffff80000080e57a:	ff ff ff 
ffff80000080e57d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e580:	48 63 d2             	movsxd rdx,edx
ffff80000080e583:	48 01 c1             	add    rcx,rax
ffff80000080e586:	48 89 d0             	mov    rax,rdx
ffff80000080e589:	48 c1 e0 02          	shl    rax,0x2
ffff80000080e58d:	48 01 d0             	add    rax,rdx
ffff80000080e590:	48 01 c8             	add    rax,rcx
ffff80000080e593:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e596:	eb 13                	jmp    ffff80000080e5ab <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e598:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146 (discriminator 1)
ffff80000080e59c:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
ffff80000080e5a0:	0f 8e d1 fe ff ff    	jle    ffff80000080e477 <to_ascii+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:154
        }

    return '\0';
ffff80000080e5a6:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
}
ffff80000080e5ab:	5d                   	pop    rbp
ffff80000080e5ac:	c3                   	ret    

ffff80000080e5ad <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:157
int init_kb()
{
ffff80000080e5ad:	f3 0f 1e fa          	endbr64 
ffff80000080e5b1:	55                   	push   rbp
ffff80000080e5b2:	48 89 e5             	mov    rbp,rsp
ffff80000080e5b5:	41 57                	push   r15
ffff80000080e5b7:	53                   	push   rbx
ffff80000080e5b8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e5b8 <init_kb+0xb>
ffff80000080e5bf:	49 bb c8 44 01 00 00 	movabs r11,0x144c8
ffff80000080e5c6:	00 00 00 
ffff80000080e5c9:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:158
    reg_device(&dev_keyboard);
ffff80000080e5cc:	48 b8 30 ff ff ff ff 	movabs rax,0xffffffffffffff30
ffff80000080e5d3:	ff ff ff 
ffff80000080e5d6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e5da:	48 89 c7             	mov    rdi,rax
ffff80000080e5dd:	49 89 df             	mov    r15,rbx
ffff80000080e5e0:	48 b8 16 2a fe ff ff 	movabs rax,0xfffffffffffe2a16
ffff80000080e5e7:	ff ff ff 
ffff80000080e5ea:	48 01 d8             	add    rax,rbx
ffff80000080e5ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:159
    reg_driver(&drv_keyboard);
ffff80000080e5ef:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080e5f6:	ff ff ff 
ffff80000080e5f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e5fd:	48 89 c7             	mov    rdi,rax
ffff80000080e600:	49 89 df             	mov    r15,rbx
ffff80000080e603:	48 b8 8e 2d fe ff ff 	movabs rax,0xfffffffffffe2d8e
ffff80000080e60a:	ff ff ff 
ffff80000080e60d:	48 01 d8             	add    rax,rbx
ffff80000080e610:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:160
}
ffff80000080e612:	90                   	nop
ffff80000080e613:	5b                   	pop    rbx
ffff80000080e614:	41 5f                	pop    r15
ffff80000080e616:	5d                   	pop    rbp
ffff80000080e617:	c3                   	ret    

ffff80000080e618 <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:162
int key_proc()
{
ffff80000080e618:	f3 0f 1e fa          	endbr64 
ffff80000080e61c:	55                   	push   rbp
ffff80000080e61d:	48 89 e5             	mov    rbp,rsp
ffff80000080e620:	41 57                	push   r15
ffff80000080e622:	53                   	push   rbx
ffff80000080e623:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e627:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e627 <key_proc+0xf>
ffff80000080e62e:	49 bb 59 44 01 00 00 	movabs r11,0x14459
ffff80000080e635:	00 00 00 
ffff80000080e638:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:163
    asm volatile("cli");
ffff80000080e63b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:165
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
ffff80000080e63c:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffff80000080e640:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
ffff80000080e644:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
    key_code tmpc;
    scan1=inb(0x60);
ffff80000080e648:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080e64d:	49 89 df             	mov    r15,rbx
ffff80000080e650:	48 b8 99 76 fe ff ff 	movabs rax,0xfffffffffffe7699
ffff80000080e657:	ff ff ff 
ffff80000080e65a:	48 01 d8             	add    rax,rbx
ffff80000080e65d:	ff d0                	call   rax
ffff80000080e65f:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:179
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
ffff80000080e662:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e669:	ff ff ff 
ffff80000080e66c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e670:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e673:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e676:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e67d:	ff ff ff 
ffff80000080e680:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e684:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e687:	89 d0                	mov    eax,edx
ffff80000080e689:	99                   	cdq    
ffff80000080e68a:	f7 f9                	idiv   ecx
ffff80000080e68c:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e693:	ff ff ff 
ffff80000080e696:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e69a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e69d:	39 c2                	cmp    edx,eax
ffff80000080e69f:	74 68                	je     ffff80000080e709 <key_proc+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:181
    {
        key_bufq.data[key_bufq.tail]=scan1;
ffff80000080e6a1:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e6a8:	ff ff ff 
ffff80000080e6ab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6af:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e6b2:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e6b9:	ff ff ff 
ffff80000080e6bc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6c0:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e6c3:	48 98                	cdqe   
ffff80000080e6c5:	48 01 c2             	add    rdx,rax
ffff80000080e6c8:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e6cc:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:182
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
ffff80000080e6ce:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e6d5:	ff ff ff 
ffff80000080e6d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6dc:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e6df:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e6e2:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e6e9:	ff ff ff 
ffff80000080e6ec:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6f0:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e6f3:	89 d0                	mov    eax,edx
ffff80000080e6f5:	99                   	cdq    
ffff80000080e6f6:	f7 f9                	idiv   ecx
ffff80000080e6f8:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e6ff:	ff ff ff 
ffff80000080e702:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e706:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:185
    }

    if(scan1==0x48)
ffff80000080e709:	80 7d ef 48          	cmp    BYTE PTR [rbp-0x11],0x48
ffff80000080e70d:	75 17                	jne    ffff80000080e726 <key_proc+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:186
        scr_up();
ffff80000080e70f:	49 89 df             	mov    r15,rbx
ffff80000080e712:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e717:	48 ba 5a 94 fe ff ff 	movabs rdx,0xfffffffffffe945a
ffff80000080e71e:	ff ff ff 
ffff80000080e721:	48 01 da             	add    rdx,rbx
ffff80000080e724:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
    if(scan1==0x50)
ffff80000080e726:	80 7d ef 50          	cmp    BYTE PTR [rbp-0x11],0x50
ffff80000080e72a:	75 17                	jne    ffff80000080e743 <key_proc+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
        scr_down();
ffff80000080e72c:	49 89 df             	mov    r15,rbx
ffff80000080e72f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e734:	48 ba 52 95 fe ff ff 	movabs rdx,0xfffffffffffe9552
ffff80000080e73b:	ff ff ff 
ffff80000080e73e:	48 01 da             	add    rdx,rbx
ffff80000080e741:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:189
    switch (scan1)
ffff80000080e743:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e747:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e74c:	74 45                	je     ffff80000080e793 <key_proc+0x17b>
ffff80000080e74e:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e753:	0f 8f 85 00 00 00    	jg     ffff80000080e7de <key_proc+0x1c6>
ffff80000080e759:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e75e:	74 33                	je     ffff80000080e793 <key_proc+0x17b>
ffff80000080e760:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e765:	7f 77                	jg     ffff80000080e7de <key_proc+0x1c6>
ffff80000080e767:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e76c:	74 3e                	je     ffff80000080e7ac <key_proc+0x194>
ffff80000080e76e:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e773:	7f 69                	jg     ffff80000080e7de <key_proc+0x1c6>
ffff80000080e775:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e778:	74 4b                	je     ffff80000080e7c5 <key_proc+0x1ad>
ffff80000080e77a:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e77d:	7f 5f                	jg     ffff80000080e7de <key_proc+0x1c6>
ffff80000080e77f:	83 f8 36             	cmp    eax,0x36
ffff80000080e782:	74 0f                	je     ffff80000080e793 <key_proc+0x17b>
ffff80000080e784:	83 f8 36             	cmp    eax,0x36
ffff80000080e787:	7f 55                	jg     ffff80000080e7de <key_proc+0x1c6>
ffff80000080e789:	83 f8 1d             	cmp    eax,0x1d
ffff80000080e78c:	74 1e                	je     ffff80000080e7ac <key_proc+0x194>
ffff80000080e78e:	83 f8 2a             	cmp    eax,0x2a
ffff80000080e791:	75 4b                	jne    ffff80000080e7de <key_proc+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:195
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
ffff80000080e793:	49 89 df             	mov    r15,rbx
ffff80000080e796:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e79b:	48 ba f5 b8 fe ff ff 	movabs rdx,0xfffffffffffeb8f5
ffff80000080e7a2:	ff ff ff 
ffff80000080e7a5:	48 01 da             	add    rdx,rbx
ffff80000080e7a8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
            break;
ffff80000080e7aa:	eb 33                	jmp    ffff80000080e7df <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:199
        case 0x1d:
        case 0x9d:
            ctrl();
ffff80000080e7ac:	49 89 df             	mov    r15,rbx
ffff80000080e7af:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e7b4:	48 ba 3c b9 fe ff ff 	movabs rdx,0xfffffffffffeb93c
ffff80000080e7bb:	ff ff ff 
ffff80000080e7be:	48 01 da             	add    rdx,rbx
ffff80000080e7c1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
            break;
ffff80000080e7c3:	eb 1a                	jmp    ffff80000080e7df <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:202
        case 0x3a:
            capslock();
ffff80000080e7c5:	49 89 df             	mov    r15,rbx
ffff80000080e7c8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e7cd:	48 ba 83 b9 fe ff ff 	movabs rdx,0xfffffffffffeb983
ffff80000080e7d4:	ff ff ff 
ffff80000080e7d7:	48 01 da             	add    rdx,rbx
ffff80000080e7da:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:203
            break;
ffff80000080e7dc:	eb 01                	jmp    ffff80000080e7df <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:205
        default:
            break;
ffff80000080e7de:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:208
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
ffff80000080e7df:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e7e3:	84 c0                	test   al,al
ffff80000080e7e5:	78 51                	js     ffff80000080e838 <key_proc+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:209
        char ch= to_ascii(scan1);
ffff80000080e7e7:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e7eb:	0f be c0             	movsx  eax,al
ffff80000080e7ee:	89 c7                	mov    edi,eax
ffff80000080e7f0:	49 89 df             	mov    r15,rbx
ffff80000080e7f3:	48 b8 ca b9 fe ff ff 	movabs rax,0xfffffffffffeb9ca
ffff80000080e7fa:	ff ff ff 
ffff80000080e7fd:	48 01 d8             	add    rax,rbx
ffff80000080e800:	ff d0                	call   rax
ffff80000080e802:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:210
        unsigned long args[]={(unsigned long) &ch, 1};
ffff80000080e805:	48 8d 45 e7          	lea    rax,[rbp-0x19]
ffff80000080e809:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000080e80d:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffff80000080e814:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:212
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
ffff80000080e815:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffff80000080e819:	48 89 c2             	mov    rdx,rax
ffff80000080e81c:	be 03 00 00 00       	mov    esi,0x3
ffff80000080e821:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e826:	49 89 df             	mov    r15,rbx
ffff80000080e829:	48 b8 d2 75 fe ff ff 	movabs rax,0xfffffffffffe75d2
ffff80000080e830:	ff ff ff 
ffff80000080e833:	48 01 d8             	add    rax,rbx
ffff80000080e836:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
ffff80000080e838:	49 89 df             	mov    r15,rbx
ffff80000080e83b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e840:	48 ba ae 76 fe ff ff 	movabs rdx,0xfffffffffffe76ae
ffff80000080e847:	ff ff ff 
ffff80000080e84a:	48 01 da             	add    rdx,rbx
ffff80000080e84d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    asm volatile("leave\r\n iretq");
ffff80000080e84f:	c9                   	leave  
ffff80000080e850:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
}
ffff80000080e852:	90                   	nop
ffff80000080e853:	48 83 c4 20          	add    rsp,0x20
ffff80000080e857:	5b                   	pop    rbx
ffff80000080e858:	41 5f                	pop    r15
ffff80000080e85a:	5d                   	pop    rbp
ffff80000080e85b:	c3                   	ret    

ffff80000080e85c <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:236

char sys_analyse_key()
{
ffff80000080e85c:	f3 0f 1e fa          	endbr64 
ffff80000080e860:	55                   	push   rbp
ffff80000080e861:	48 89 e5             	mov    rbp,rsp
ffff80000080e864:	41 57                	push   r15
ffff80000080e866:	53                   	push   rbx
ffff80000080e867:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e86b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e86b <sys_analyse_key+0xf>
ffff80000080e872:	49 bb 15 42 01 00 00 	movabs r11,0x14215
ffff80000080e879:	00 00 00 
ffff80000080e87c:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    if(key_bufq.tail==key_bufq.head)return -1;
ffff80000080e87f:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e886:	ff ff ff 
ffff80000080e889:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e88d:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000080e890:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e897:	ff ff ff 
ffff80000080e89a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e89e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e8a1:	39 c2                	cmp    edx,eax
ffff80000080e8a3:	75 0a                	jne    ffff80000080e8af <sys_analyse_key+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237 (discriminator 1)
ffff80000080e8a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e8aa:	e9 b1 01 00 00       	jmp    ffff80000080ea60 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    char c=key_buf[key_bufq.head];
ffff80000080e8af:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e8b6:	ff ff ff 
ffff80000080e8b9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e8bd:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e8c0:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff80000080e8c7:	ff ff ff 
ffff80000080e8ca:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e8ce:	48 98                	cdqe   
ffff80000080e8d0:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080e8d4:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
ffff80000080e8d7:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e8de:	ff ff ff 
ffff80000080e8e1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e8e5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e8e8:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e8eb:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e8f2:	ff ff ff 
ffff80000080e8f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e8f9:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e8fc:	89 d0                	mov    eax,edx
ffff80000080e8fe:	99                   	cdq    
ffff80000080e8ff:	f7 f9                	idiv   ecx
ffff80000080e901:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e908:	ff ff ff 
ffff80000080e90b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e90f:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
ffff80000080e912:	48 b8 76 d8 ff ff ff 	movabs rax,0xffffffffffffd876
ffff80000080e919:	ff ff ff 
ffff80000080e91c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e920:	48 89 c7             	mov    rdi,rax
ffff80000080e923:	49 89 df             	mov    r15,rbx
ffff80000080e926:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e92b:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080e932:	ff ff ff 
ffff80000080e935:	48 01 da             	add    rdx,rbx
ffff80000080e938:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242
    char res[33]={0};
ffff80000080e93a:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080e941:	00 
ffff80000080e942:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080e949:	00 
ffff80000080e94a:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080e951:	00 
ffff80000080e952:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080e959:	00 
ffff80000080e95a:	c6 45 e0 00          	mov    BYTE PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:243
    itoa(res,16,c);
ffff80000080e95e:	0f be 55 ef          	movsx  edx,BYTE PTR [rbp-0x11]
ffff80000080e962:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e966:	be 10 00 00 00       	mov    esi,0x10
ffff80000080e96b:	48 89 c7             	mov    rdi,rax
ffff80000080e96e:	49 89 df             	mov    r15,rbx
ffff80000080e971:	48 b8 e2 eb fd ff ff 	movabs rax,0xfffffffffffdebe2
ffff80000080e978:	ff ff ff 
ffff80000080e97b:	48 01 d8             	add    rax,rbx
ffff80000080e97e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:244
    printf(res);
ffff80000080e980:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e984:	48 89 c7             	mov    rdi,rax
ffff80000080e987:	49 89 df             	mov    r15,rbx
ffff80000080e98a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e98f:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080e996:	ff ff ff 
ffff80000080e999:	48 01 da             	add    rdx,rbx
ffff80000080e99c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:245
    if(c&FLAG_BREAK){
ffff80000080e99e:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff80000080e9a2:	79 32                	jns    ffff80000080e9d6 <sys_analyse_key+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:246
        printf("\n");
ffff80000080e9a4:	48 b8 81 d8 ff ff ff 	movabs rax,0xffffffffffffd881
ffff80000080e9ab:	ff ff ff 
ffff80000080e9ae:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e9b2:	48 89 c7             	mov    rdi,rax
ffff80000080e9b5:	49 89 df             	mov    r15,rbx
ffff80000080e9b8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e9bd:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080e9c4:	ff ff ff 
ffff80000080e9c7:	48 01 da             	add    rdx,rbx
ffff80000080e9ca:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:247
        return -1;
ffff80000080e9cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e9d1:	e9 8a 00 00 00       	jmp    ffff80000080ea60 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:249
    }
    c= to_ascii(c&0x7f);
ffff80000080e9d6:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e9da:	83 e0 7f             	and    eax,0x7f
ffff80000080e9dd:	89 c7                	mov    edi,eax
ffff80000080e9df:	49 89 df             	mov    r15,rbx
ffff80000080e9e2:	48 b8 ca b9 fe ff ff 	movabs rax,0xfffffffffffeb9ca
ffff80000080e9e9:	ff ff ff 
ffff80000080e9ec:	48 01 d8             	add    rax,rbx
ffff80000080e9ef:	ff d0                	call   rax
ffff80000080e9f1:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:250
    printf(" char:");
ffff80000080e9f4:	48 b8 83 d8 ff ff ff 	movabs rax,0xffffffffffffd883
ffff80000080e9fb:	ff ff ff 
ffff80000080e9fe:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ea02:	48 89 c7             	mov    rdi,rax
ffff80000080ea05:	49 89 df             	mov    r15,rbx
ffff80000080ea08:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ea0d:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080ea14:	ff ff ff 
ffff80000080ea17:	48 01 da             	add    rdx,rbx
ffff80000080ea1a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:251
    putchar(c);
ffff80000080ea1c:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080ea20:	89 c7                	mov    edi,eax
ffff80000080ea22:	49 89 df             	mov    r15,rbx
ffff80000080ea25:	48 b8 0b ed fd ff ff 	movabs rax,0xfffffffffffded0b
ffff80000080ea2c:	ff ff ff 
ffff80000080ea2f:	48 01 d8             	add    rax,rbx
ffff80000080ea32:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:252
    printf("\n");
ffff80000080ea34:	48 b8 81 d8 ff ff ff 	movabs rax,0xffffffffffffd881
ffff80000080ea3b:	ff ff ff 
ffff80000080ea3e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ea42:	48 89 c7             	mov    rdi,rax
ffff80000080ea45:	49 89 df             	mov    r15,rbx
ffff80000080ea48:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ea4d:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080ea54:	ff ff ff 
ffff80000080ea57:	48 01 da             	add    rdx,rbx
ffff80000080ea5a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:253
    return c;
ffff80000080ea5c:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:254 (discriminator 1)
ffff80000080ea60:	48 83 c4 30          	add    rsp,0x30
ffff80000080ea64:	5b                   	pop    rbx
ffff80000080ea65:	41 5f                	pop    r15
ffff80000080ea67:	5d                   	pop    rbp
ffff80000080ea68:	c3                   	ret    

ffff80000080ea69 <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
        .read=async_read_disk,
        .write=async_write_disk
};
int disks[4];//四块硬盘的dev号
int init_disk()
{
ffff80000080ea69:	f3 0f 1e fa          	endbr64 
ffff80000080ea6d:	55                   	push   rbp
ffff80000080ea6e:	48 89 e5             	mov    rbp,rsp
ffff80000080ea71:	41 57                	push   r15
ffff80000080ea73:	48 83 ec 08          	sub    rsp,0x8
ffff80000080ea77:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080ea77 <init_disk+0xe>
ffff80000080ea7e:	49 bb 09 40 01 00 00 	movabs r11,0x14009
ffff80000080ea85:	00 00 00 
ffff80000080ea88:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    hd_iterate();
ffff80000080ea8b:	49 89 d7             	mov    r15,rdx
ffff80000080ea8e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ea93:	48 b9 89 d0 fe ff ff 	movabs rcx,0xfffffffffffed089
ffff80000080ea9a:	ff ff ff 
ffff80000080ea9d:	48 01 d1             	add    rcx,rdx
ffff80000080eaa0:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    return 0;
ffff80000080eaa2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:33
}
ffff80000080eaa7:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080eaab:	c9                   	leave  
ffff80000080eaac:	c3                   	ret    

ffff80000080eaad <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:36

int disk_int_handler_c()
{
ffff80000080eaad:	f3 0f 1e fa          	endbr64 
ffff80000080eab1:	55                   	push   rbp
ffff80000080eab2:	48 89 e5             	mov    rbp,rsp
ffff80000080eab5:	41 57                	push   r15
ffff80000080eab7:	53                   	push   rbx
ffff80000080eab8:	48 83 ec 20          	sub    rsp,0x20
ffff80000080eabc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080eabc <disk_int_handler_c+0xf>
ffff80000080eac3:	49 bb c4 3f 01 00 00 	movabs r11,0x13fc4
ffff80000080eaca:	00 00 00 
ffff80000080eacd:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    if(running_req==NULL)
ffff80000080ead0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ead7:	ff ff ff 
ffff80000080eada:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eade:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eae1:	48 85 c0             	test   rax,rax
ffff80000080eae4:	75 0a                	jne    ffff80000080eaf0 <disk_int_handler_c+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40
    {
        //printf("err:null running dreq\n");
        return 1;//同步读写硬盘
ffff80000080eae6:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080eaeb:	e9 c6 02 00 00       	jmp    ffff80000080edb6 <disk_int_handler_c+0x309>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    }
    short *p=running_req->buf;
ffff80000080eaf0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080eaf7:	ff ff ff 
ffff80000080eafa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eafe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eb01:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080eb05:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:43
    int port=PORT_DISK_MAJOR;
ffff80000080eb09:	c7 45 e4 f0 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:44
    if(running_req->disk==DISK_SLAVE_MAJOR||\
ffff80000080eb10:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080eb17:	ff ff ff 
ffff80000080eb1a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eb1e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eb21:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080eb24:	83 f8 02             	cmp    eax,0x2
ffff80000080eb27:	74 19                	je     ffff80000080eb42 <disk_int_handler_c+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:45 (discriminator 1)
    running_req->disk==DISK_SLAVE_SLAVE)
ffff80000080eb29:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080eb30:	ff ff ff 
ffff80000080eb33:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eb37:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eb3a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:44 (discriminator 1)
    if(running_req->disk==DISK_SLAVE_MAJOR||\
ffff80000080eb3d:	83 f8 03             	cmp    eax,0x3
ffff80000080eb40:	75 07                	jne    ffff80000080eb49 <disk_int_handler_c+0x9c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
        port=PORT_DISK_SLAVE;
ffff80000080eb42:	c7 45 e4 70 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:47
    if(running_req->func==DISKREQ_READ)
ffff80000080eb49:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080eb50:	ff ff ff 
ffff80000080eb53:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eb57:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eb5a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080eb5c:	85 c0                	test   eax,eax
ffff80000080eb5e:	75 71                	jne    ffff80000080ebd1 <disk_int_handler_c+0x124>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080eb60:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080eb67:	eb 2f                	jmp    ffff80000080eb98 <disk_int_handler_c+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
        {
            *p++=inw(port);
ffff80000080eb69:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080eb6c:	0f b7 c0             	movzx  eax,ax
ffff80000080eb6f:	89 c7                	mov    edi,eax
ffff80000080eb71:	49 89 df             	mov    r15,rbx
ffff80000080eb74:	48 b8 a3 76 fe ff ff 	movabs rax,0xfffffffffffe76a3
ffff80000080eb7b:	ff ff ff 
ffff80000080eb7e:	48 01 d8             	add    rax,rbx
ffff80000080eb81:	ff d0                	call   rax
ffff80000080eb83:	89 c2                	mov    edx,eax
ffff80000080eb85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080eb89:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffff80000080eb8d:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080eb91:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51 (discriminator 3)
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080eb94:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51 (discriminator 1)
ffff80000080eb98:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080eb9f:	ff ff ff 
ffff80000080eba2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eba6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eba9:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080ebac:	c1 e0 08             	shl    eax,0x8
ffff80000080ebaf:	39 45 e0             	cmp    DWORD PTR [rbp-0x20],eax
ffff80000080ebb2:	7c b5                	jl     ffff80000080eb69 <disk_int_handler_c+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:55
        }
        running_req->result=DISK_CHK_OK;
ffff80000080ebb4:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ebbb:	ff ff ff 
ffff80000080ebbe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ebc2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ebc5:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
ffff80000080ebcc:	e9 64 01 00 00       	jmp    ffff80000080ed35 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    }else if(running_req->func==DISKREQ_WRITE)
ffff80000080ebd1:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ebd8:	ff ff ff 
ffff80000080ebdb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ebdf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ebe2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ebe4:	83 f8 01             	cmp    eax,0x1
ffff80000080ebe7:	75 74                	jne    ffff80000080ec5d <disk_int_handler_c+0x1b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58
    {
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080ebe9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080ebf0:	eb 32                	jmp    ffff80000080ec24 <disk_int_handler_c+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:59 (discriminator 3)
            outw(port,*p++);
ffff80000080ebf2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ebf6:	48 8d 50 02          	lea    rdx,[rax+0x2]
ffff80000080ebfa:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080ebfe:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080ec01:	0f b7 d0             	movzx  edx,ax
ffff80000080ec04:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080ec07:	0f b7 c0             	movzx  eax,ax
ffff80000080ec0a:	89 d6                	mov    esi,edx
ffff80000080ec0c:	89 c7                	mov    edi,eax
ffff80000080ec0e:	49 89 df             	mov    r15,rbx
ffff80000080ec11:	48 b8 8d 76 fe ff ff 	movabs rax,0xfffffffffffe768d
ffff80000080ec18:	ff ff ff 
ffff80000080ec1b:	48 01 d8             	add    rax,rbx
ffff80000080ec1e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58 (discriminator 3)
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080ec20:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58 (discriminator 1)
ffff80000080ec24:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ec2b:	ff ff ff 
ffff80000080ec2e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec32:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ec35:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080ec38:	c1 e0 08             	shl    eax,0x8
ffff80000080ec3b:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff80000080ec3e:	7c b2                	jl     ffff80000080ebf2 <disk_int_handler_c+0x145>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        running_req->result=DISK_CHK_OK;
ffff80000080ec40:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ec47:	ff ff ff 
ffff80000080ec4a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec4e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ec51:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
ffff80000080ec58:	e9 d8 00 00 00       	jmp    ffff80000080ed35 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:61
    }else if(running_req->func==DISKREQ_CHECK)
ffff80000080ec5d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ec64:	ff ff ff 
ffff80000080ec67:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec6b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ec6e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ec70:	83 f8 02             	cmp    eax,0x2
ffff80000080ec73:	75 58                	jne    ffff80000080eccd <disk_int_handler_c+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:63
    {
        char stat=inb(port+7);
ffff80000080ec75:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080ec78:	83 c0 07             	add    eax,0x7
ffff80000080ec7b:	0f b6 c0             	movzx  eax,al
ffff80000080ec7e:	89 c7                	mov    edi,eax
ffff80000080ec80:	49 89 df             	mov    r15,rbx
ffff80000080ec83:	48 b8 99 76 fe ff ff 	movabs rax,0xfffffffffffe7699
ffff80000080ec8a:	ff ff ff 
ffff80000080ec8d:	48 01 d8             	add    rax,rbx
ffff80000080ec90:	ff d0                	call   rax
ffff80000080ec92:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:64
        short dat=inw(port);
ffff80000080ec95:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080ec98:	0f b7 c0             	movzx  eax,ax
ffff80000080ec9b:	89 c7                	mov    edi,eax
ffff80000080ec9d:	49 89 df             	mov    r15,rbx
ffff80000080eca0:	48 b8 a3 76 fe ff ff 	movabs rax,0xfffffffffffe76a3
ffff80000080eca7:	ff ff ff 
ffff80000080ecaa:	48 01 d8             	add    rax,rbx
ffff80000080ecad:	ff d0                	call   rax
ffff80000080ecaf:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        if(1)
        {
            running_req->result=DISK_CHK_OK;
ffff80000080ecb3:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ecba:	ff ff ff 
ffff80000080ecbd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ecc1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ecc4:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
ffff80000080eccb:	eb 68                	jmp    ffff80000080ed35 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:75
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            running_req->result=DISK_CHK_ERR;
            request(running_req->disk,DISKREQ_RESET,0,0,0);
        }
    }else if(running_req->func==DISKREQ_RESET)
ffff80000080eccd:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ecd4:	ff ff ff 
ffff80000080ecd7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ecdb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ecde:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ece0:	83 f8 03             	cmp    eax,0x3
ffff80000080ece3:	75 50                	jne    ffff80000080ed35 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    {
        int stat=inb(port+7);
ffff80000080ece5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080ece8:	83 c0 07             	add    eax,0x7
ffff80000080eceb:	0f b6 c0             	movzx  eax,al
ffff80000080ecee:	89 c7                	mov    edi,eax
ffff80000080ecf0:	49 89 df             	mov    r15,rbx
ffff80000080ecf3:	48 b8 99 76 fe ff ff 	movabs rax,0xfffffffffffe7699
ffff80000080ecfa:	ff ff ff 
ffff80000080ecfd:	48 01 d8             	add    rax,rbx
ffff80000080ed00:	ff d0                	call   rax
ffff80000080ed02:	0f b6 c0             	movzx  eax,al
ffff80000080ed05:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
        printf("reset disk done.\nstat now:%x\n",stat);
ffff80000080ed08:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ed0b:	89 c6                	mov    esi,eax
ffff80000080ed0d:	48 b8 8a d8 ff ff ff 	movabs rax,0xffffffffffffd88a
ffff80000080ed14:	ff ff ff 
ffff80000080ed17:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ed1b:	48 89 c7             	mov    rdi,rax
ffff80000080ed1e:	49 89 df             	mov    r15,rbx
ffff80000080ed21:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ed26:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080ed2d:	ff ff ff 
ffff80000080ed30:	48 01 da             	add    rdx,rbx
ffff80000080ed33:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
    }
    running_req->stat=REQ_STAT_DONE;
ffff80000080ed35:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ed3c:	ff ff ff 
ffff80000080ed3f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed43:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ed46:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    running_req->args->stat=REQ_STAT_EMPTY;
ffff80000080ed4d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ed54:	ff ff ff 
ffff80000080ed57:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed5b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ed5e:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080ed62:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
ffff80000080ed69:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    running_devman_req->stat=REQ_STAT_DONE;
ffff80000080ed6c:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff80000080ed73:	ff ff ff 
ffff80000080ed76:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed7a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ed7d:	c7 80 ac 00 00 00 03 	mov    DWORD PTR [rax+0xac],0x3
ffff80000080ed84:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
    running_devman_req=NULL;
ffff80000080ed87:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff80000080ed8e:	ff ff ff 
ffff80000080ed91:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed95:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080ed9c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080eda3:	ff ff ff 
ffff80000080eda6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080edaa:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    return 0;
ffff80000080edb1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
}
ffff80000080edb6:	48 83 c4 20          	add    rsp,0x20
ffff80000080edba:	5b                   	pop    rbx
ffff80000080edbb:	41 5f                	pop    r15
ffff80000080edbd:	5d                   	pop    rbp
ffff80000080edbe:	c3                   	ret    

ffff80000080edbf <check_dreq_stat>:
check_dreq_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
int check_dreq_stat(int req_id)
{
ffff80000080edbf:	f3 0f 1e fa          	endbr64 
ffff80000080edc3:	55                   	push   rbp
ffff80000080edc4:	48 89 e5             	mov    rbp,rsp
ffff80000080edc7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080edc7 <check_dreq_stat+0x8>
ffff80000080edce:	49 bb b9 3c 01 00 00 	movabs r11,0x13cb9
ffff80000080edd5:	00 00 00 
ffff80000080edd8:	4c 01 d8             	add    rax,r11
ffff80000080eddb:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    return disk_reqs[req_id].stat;
ffff80000080edde:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff80000080ede5:	ff ff ff 
ffff80000080ede8:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080edec:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080edef:	48 63 d0             	movsxd rdx,eax
ffff80000080edf2:	48 89 d0             	mov    rax,rdx
ffff80000080edf5:	48 01 c0             	add    rax,rax
ffff80000080edf8:	48 01 d0             	add    rax,rdx
ffff80000080edfb:	48 c1 e0 04          	shl    rax,0x4
ffff80000080edff:	48 01 c8             	add    rax,rcx
ffff80000080ee02:	48 83 c0 1c          	add    rax,0x1c
ffff80000080ee06:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
}
ffff80000080ee08:	5d                   	pop    rbp
ffff80000080ee09:	c3                   	ret    

ffff80000080ee0a <request>:
request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
int request(int disk,int func,int lba,int secn,char *buf){
ffff80000080ee0a:	f3 0f 1e fa          	endbr64 
ffff80000080ee0e:	55                   	push   rbp
ffff80000080ee0f:	48 89 e5             	mov    rbp,rsp
ffff80000080ee12:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ee12 <request+0x8>
ffff80000080ee19:	49 bb 6e 3c 01 00 00 	movabs r11,0x13c6e
ffff80000080ee20:	00 00 00 
ffff80000080ee23:	4c 01 d8             	add    rax,r11
ffff80000080ee26:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080ee29:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff80000080ee2c:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff80000080ee2f:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
ffff80000080ee32:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    if((tail+1)%MAX_DISK_REQUEST_COUNT==head)
ffff80000080ee36:	48 ba b4 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb4
ffff80000080ee3d:	ff ff ff 
ffff80000080ee40:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ee43:	83 c2 01             	add    edx,0x1
ffff80000080ee46:	48 63 ca             	movsxd rcx,edx
ffff80000080ee49:	48 69 c9 89 88 88 88 	imul   rcx,rcx,0xffffffff88888889
ffff80000080ee50:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080ee54:	01 d1                	add    ecx,edx
ffff80000080ee56:	c1 f9 07             	sar    ecx,0x7
ffff80000080ee59:	89 d6                	mov    esi,edx
ffff80000080ee5b:	c1 fe 1f             	sar    esi,0x1f
ffff80000080ee5e:	29 f1                	sub    ecx,esi
ffff80000080ee60:	69 f1 f0 00 00 00    	imul   esi,ecx,0xf0
ffff80000080ee66:	89 d1                	mov    ecx,edx
ffff80000080ee68:	29 f1                	sub    ecx,esi
ffff80000080ee6a:	48 ba b0 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb0
ffff80000080ee71:	ff ff ff 
ffff80000080ee74:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ee77:	39 d1                	cmp    ecx,edx
ffff80000080ee79:	75 0a                	jne    ffff80000080ee85 <request+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    {
        return -1;
ffff80000080ee7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080ee80:	e9 9e 01 00 00       	jmp    ffff80000080f023 <request+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97
    }
    disk_reqs[tail].disk=disk;
ffff80000080ee85:	48 ba b4 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb4
ffff80000080ee8c:	ff ff ff 
ffff80000080ee8f:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ee92:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080ee99:	ff ff ff 
ffff80000080ee9c:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080eea0:	48 63 ca             	movsxd rcx,edx
ffff80000080eea3:	48 89 ca             	mov    rdx,rcx
ffff80000080eea6:	48 01 d2             	add    rdx,rdx
ffff80000080eea9:	48 01 ca             	add    rdx,rcx
ffff80000080eeac:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080eeb0:	48 01 f2             	add    rdx,rsi
ffff80000080eeb3:	48 8d 4a 04          	lea    rcx,[rdx+0x4]
ffff80000080eeb7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080eeba:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98
    disk_reqs[tail].func=func;
ffff80000080eebc:	48 ba b4 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb4
ffff80000080eec3:	ff ff ff 
ffff80000080eec6:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080eec9:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080eed0:	ff ff ff 
ffff80000080eed3:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080eed7:	48 63 ca             	movsxd rcx,edx
ffff80000080eeda:	48 89 ca             	mov    rdx,rcx
ffff80000080eedd:	48 01 d2             	add    rdx,rdx
ffff80000080eee0:	48 01 ca             	add    rdx,rcx
ffff80000080eee3:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080eee7:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080eeeb:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080eeee:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99
    disk_reqs[tail].lba=lba;
ffff80000080eef0:	48 ba b4 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb4
ffff80000080eef7:	ff ff ff 
ffff80000080eefa:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080eefd:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080ef04:	ff ff ff 
ffff80000080ef07:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080ef0b:	48 63 ca             	movsxd rcx,edx
ffff80000080ef0e:	48 89 ca             	mov    rdx,rcx
ffff80000080ef11:	48 01 d2             	add    rdx,rdx
ffff80000080ef14:	48 01 ca             	add    rdx,rcx
ffff80000080ef17:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ef1b:	48 01 f2             	add    rdx,rsi
ffff80000080ef1e:	48 8d 4a 08          	lea    rcx,[rdx+0x8]
ffff80000080ef22:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080ef25:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:100
    disk_reqs[tail].sec_n=secn;
ffff80000080ef27:	48 ba b4 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb4
ffff80000080ef2e:	ff ff ff 
ffff80000080ef31:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ef34:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080ef3b:	ff ff ff 
ffff80000080ef3e:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080ef42:	48 63 ca             	movsxd rcx,edx
ffff80000080ef45:	48 89 ca             	mov    rdx,rcx
ffff80000080ef48:	48 01 d2             	add    rdx,rdx
ffff80000080ef4b:	48 01 ca             	add    rdx,rcx
ffff80000080ef4e:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ef52:	48 01 f2             	add    rdx,rsi
ffff80000080ef55:	48 8d 4a 0c          	lea    rcx,[rdx+0xc]
ffff80000080ef59:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000080ef5c:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:101
    disk_reqs[tail].stat=REQ_STAT_READY;
ffff80000080ef5e:	48 ba b4 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb4
ffff80000080ef65:	ff ff ff 
ffff80000080ef68:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ef6b:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080ef72:	ff ff ff 
ffff80000080ef75:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080ef79:	48 63 ca             	movsxd rcx,edx
ffff80000080ef7c:	48 89 ca             	mov    rdx,rcx
ffff80000080ef7f:	48 01 d2             	add    rdx,rdx
ffff80000080ef82:	48 01 ca             	add    rdx,rcx
ffff80000080ef85:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ef89:	48 01 f2             	add    rdx,rsi
ffff80000080ef8c:	48 83 c2 1c          	add    rdx,0x1c
ffff80000080ef90:	c7 02 01 00 00 00    	mov    DWORD PTR [rdx],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:102
    disk_reqs[tail].buf=buf;
ffff80000080ef96:	48 ba b4 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb4
ffff80000080ef9d:	ff ff ff 
ffff80000080efa0:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080efa3:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080efaa:	ff ff ff 
ffff80000080efad:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080efb1:	48 63 ca             	movsxd rcx,edx
ffff80000080efb4:	48 89 ca             	mov    rdx,rcx
ffff80000080efb7:	48 01 d2             	add    rdx,rdx
ffff80000080efba:	48 01 ca             	add    rdx,rcx
ffff80000080efbd:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080efc1:	48 01 f2             	add    rdx,rsi
ffff80000080efc4:	48 8d 4a 10          	lea    rcx,[rdx+0x10]
ffff80000080efc8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080efcc:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:103
    int r=tail;
ffff80000080efcf:	48 ba b4 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb4
ffff80000080efd6:	ff ff ff 
ffff80000080efd9:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080efdc:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:104
    tail=(tail+1)%MAX_DISK_REQUEST_COUNT;
ffff80000080efdf:	48 ba b4 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb4
ffff80000080efe6:	ff ff ff 
ffff80000080efe9:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080efec:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000080efef:	48 63 d1             	movsxd rdx,ecx
ffff80000080eff2:	48 69 d2 89 88 88 88 	imul   rdx,rdx,0xffffffff88888889
ffff80000080eff9:	48 c1 ea 20          	shr    rdx,0x20
ffff80000080effd:	01 ca                	add    edx,ecx
ffff80000080efff:	c1 fa 07             	sar    edx,0x7
ffff80000080f002:	89 ce                	mov    esi,ecx
ffff80000080f004:	c1 fe 1f             	sar    esi,0x1f
ffff80000080f007:	29 f2                	sub    edx,esi
ffff80000080f009:	69 f2 f0 00 00 00    	imul   esi,edx,0xf0
ffff80000080f00f:	29 f1                	sub    ecx,esi
ffff80000080f011:	89 ca                	mov    edx,ecx
ffff80000080f013:	48 b9 b4 bb bf ff ff 	movabs rcx,0xffffffffffbfbbb4
ffff80000080f01a:	ff ff ff 
ffff80000080f01d:	89 14 08             	mov    DWORD PTR [rax+rcx*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:105
    return r;
ffff80000080f020:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:106
}
ffff80000080f023:	5d                   	pop    rbp
ffff80000080f024:	c3                   	ret    

ffff80000080f025 <execute_request>:
execute_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:107
int execute_request(){
ffff80000080f025:	f3 0f 1e fa          	endbr64 
ffff80000080f029:	55                   	push   rbp
ffff80000080f02a:	48 89 e5             	mov    rbp,rsp
ffff80000080f02d:	41 57                	push   r15
ffff80000080f02f:	48 83 ec 18          	sub    rsp,0x18
ffff80000080f033:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f033 <execute_request+0xe>
ffff80000080f03a:	49 bb 4d 3a 01 00 00 	movabs r11,0x13a4d
ffff80000080f041:	00 00 00 
ffff80000080f044:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:109
    //查看是否有已经在运行的请求
    if(running_req!=NULL)
ffff80000080f047:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f04e:	ff ff ff 
ffff80000080f051:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f055:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f058:	48 85 d2             	test   rdx,rdx
ffff80000080f05b:	0f 84 a6 00 00 00    	je     ffff80000080f107 <execute_request+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:111
    {
        running_req->time++;
ffff80000080f061:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f068:	ff ff ff 
ffff80000080f06b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f06f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f072:	8b 4a 24             	mov    ecx,DWORD PTR [rdx+0x24]
ffff80000080f075:	83 c1 01             	add    ecx,0x1
ffff80000080f078:	89 4a 24             	mov    DWORD PTR [rdx+0x24],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:112
        if(running_req->func!=DISKREQ_CHECK)
ffff80000080f07b:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f082:	ff ff ff 
ffff80000080f085:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f089:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f08c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080f08e:	83 fa 02             	cmp    edx,0x2
ffff80000080f091:	74 0a                	je     ffff80000080f09d <execute_request+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:113
            return 2;
ffff80000080f093:	b8 02 00 00 00       	mov    eax,0x2
ffff80000080f098:	e9 c4 02 00 00       	jmp    ffff80000080f361 <execute_request+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:114
        if(running_req->time>MAX_DISK_CHKTIME)
ffff80000080f09d:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f0a4:	ff ff ff 
ffff80000080f0a7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f0ab:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f0ae:	8b 52 24             	mov    edx,DWORD PTR [rdx+0x24]
ffff80000080f0b1:	83 fa 0a             	cmp    edx,0xa
ffff80000080f0b4:	7e 47                	jle    ffff80000080f0fd <execute_request+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:117
        {
            //检测硬盘超时，视为没有硬盘连接
            running_req->result=DISK_CHK_ERR;
ffff80000080f0b6:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f0bd:	ff ff ff 
ffff80000080f0c0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f0c4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f0c7:	c7 42 20 02 00 00 00 	mov    DWORD PTR [rdx+0x20],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:118
            running_req->stat=REQ_STAT_DONE;
ffff80000080f0ce:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f0d5:	ff ff ff 
ffff80000080f0d8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f0dc:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f0df:	c7 42 1c 03 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119
            running_req=NULL;
ffff80000080f0e6:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f0ed:	ff ff ff 
ffff80000080f0f0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f0f4:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
ffff80000080f0fb:	eb 0a                	jmp    ffff80000080f107 <execute_request+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
        }else
        {
            //未到时间继续等待
            return 2;
ffff80000080f0fd:	b8 02 00 00 00       	mov    eax,0x2
ffff80000080f102:	e9 5a 02 00 00       	jmp    ffff80000080f361 <execute_request+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        }
    }
    if(head==tail)return 1;//检查是否为空
ffff80000080f107:	48 ba b0 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb0
ffff80000080f10e:	ff ff ff 
ffff80000080f111:	8b 0c 10             	mov    ecx,DWORD PTR [rax+rdx*1]
ffff80000080f114:	48 ba b4 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb4
ffff80000080f11b:	ff ff ff 
ffff80000080f11e:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080f121:	39 d1                	cmp    ecx,edx
ffff80000080f123:	75 0a                	jne    ffff80000080f12f <execute_request+0x10a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126 (discriminator 1)
ffff80000080f125:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080f12a:	e9 32 02 00 00       	jmp    ffff80000080f361 <execute_request+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    running_req=&disk_reqs[head];
ffff80000080f12f:	48 ba b0 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb0
ffff80000080f136:	ff ff ff 
ffff80000080f139:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080f13c:	48 63 ca             	movsxd rcx,edx
ffff80000080f13f:	48 89 ca             	mov    rdx,rcx
ffff80000080f142:	48 01 d2             	add    rdx,rdx
ffff80000080f145:	48 01 ca             	add    rdx,rcx
ffff80000080f148:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f14c:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080f153:	ff ff ff 
ffff80000080f156:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080f15a:	48 01 d1             	add    rcx,rdx
ffff80000080f15d:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f164:	ff ff ff 
ffff80000080f167:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f16b:	48 89 0a             	mov    QWORD PTR [rdx],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
    head=(head+1)%MAX_DISK_REQUEST_COUNT;
ffff80000080f16e:	48 ba b0 bb bf ff ff 	movabs rdx,0xffffffffffbfbbb0
ffff80000080f175:	ff ff ff 
ffff80000080f178:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080f17b:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000080f17e:	48 63 d1             	movsxd rdx,ecx
ffff80000080f181:	48 69 d2 89 88 88 88 	imul   rdx,rdx,0xffffffff88888889
ffff80000080f188:	48 c1 ea 20          	shr    rdx,0x20
ffff80000080f18c:	01 ca                	add    edx,ecx
ffff80000080f18e:	c1 fa 07             	sar    edx,0x7
ffff80000080f191:	89 ce                	mov    esi,ecx
ffff80000080f193:	c1 fe 1f             	sar    esi,0x1f
ffff80000080f196:	29 f2                	sub    edx,esi
ffff80000080f198:	69 f2 f0 00 00 00    	imul   esi,edx,0xf0
ffff80000080f19e:	29 f1                	sub    ecx,esi
ffff80000080f1a0:	89 ca                	mov    edx,ecx
ffff80000080f1a2:	48 b9 b0 bb bf ff ff 	movabs rcx,0xffffffffffbfbbb0
ffff80000080f1a9:	ff ff ff 
ffff80000080f1ac:	89 14 08             	mov    DWORD PTR [rax+rcx*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:129
    running_req->stat=REQ_STAT_WORKING;
ffff80000080f1af:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f1b6:	ff ff ff 
ffff80000080f1b9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f1bd:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f1c0:	c7 42 1c 02 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    //set_proc_stat(running_req->pid,TASK_SUSPENDED);
    int r=0;
ffff80000080f1c7:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:132
    switch (running_req->func)
ffff80000080f1ce:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f1d5:	ff ff ff 
ffff80000080f1d8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f1dc:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f1df:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080f1e1:	83 fa 03             	cmp    edx,0x3
ffff80000080f1e4:	0f 84 37 01 00 00    	je     ffff80000080f321 <execute_request+0x2fc>
ffff80000080f1ea:	83 fa 03             	cmp    edx,0x3
ffff80000080f1ed:	0f 8f 5b 01 00 00    	jg     ffff80000080f34e <execute_request+0x329>
ffff80000080f1f3:	83 fa 02             	cmp    edx,0x2
ffff80000080f1f6:	0f 84 f8 00 00 00    	je     ffff80000080f2f4 <execute_request+0x2cf>
ffff80000080f1fc:	83 fa 02             	cmp    edx,0x2
ffff80000080f1ff:	0f 8f 49 01 00 00    	jg     ffff80000080f34e <execute_request+0x329>
ffff80000080f205:	85 d2                	test   edx,edx
ffff80000080f207:	74 0a                	je     ffff80000080f213 <execute_request+0x1ee>
ffff80000080f209:	83 fa 01             	cmp    edx,0x1
ffff80000080f20c:	74 77                	je     ffff80000080f285 <execute_request+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:150
        break;
    case DISKREQ_RESET:
        r=async_reset_disk(running_req->disk);
        break;
    default:
        break;
ffff80000080f20e:	e9 3b 01 00 00       	jmp    ffff80000080f34e <execute_request+0x329>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f213:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f21a:	ff ff ff 
ffff80000080f21d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f221:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
ffff80000080f224:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f228:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f22f:	ff ff ff 
ffff80000080f232:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f236:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
ffff80000080f239:	8b 52 0c             	mov    edx,DWORD PTR [rdx+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f23c:	48 be b8 fe ff ff ff 	movabs rsi,0xfffffffffffffeb8
ffff80000080f243:	ff ff ff 
ffff80000080f246:	48 8b 34 30          	mov    rsi,QWORD PTR [rax+rsi*1]
ffff80000080f24a:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
ffff80000080f24d:	8b 76 08             	mov    esi,DWORD PTR [rsi+0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
ffff80000080f250:	41 89 f0             	mov    r8d,esi
ffff80000080f253:	48 be b8 fe ff ff ff 	movabs rsi,0xfffffffffffffeb8
ffff80000080f25a:	ff ff ff 
ffff80000080f25d:	48 8b 34 30          	mov    rsi,QWORD PTR [rax+rsi*1]
ffff80000080f261:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
ffff80000080f264:	8b 7e 04             	mov    edi,DWORD PTR [rsi+0x4]
ffff80000080f267:	44 89 c6             	mov    esi,r8d
ffff80000080f26a:	49 89 c7             	mov    r15,rax
ffff80000080f26d:	49 b8 33 c9 fe ff ff 	movabs r8,0xfffffffffffec933
ffff80000080f274:	ff ff ff 
ffff80000080f277:	49 01 c0             	add    r8,rax
ffff80000080f27a:	41 ff d0             	call   r8
ffff80000080f27d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        break;
ffff80000080f280:	e9 ca 00 00 00       	jmp    ffff80000080f34f <execute_request+0x32a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f285:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f28c:	ff ff ff 
ffff80000080f28f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f293:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
ffff80000080f296:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f29a:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f2a1:	ff ff ff 
ffff80000080f2a4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f2a8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
ffff80000080f2ab:	8b 52 0c             	mov    edx,DWORD PTR [rdx+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f2ae:	48 be b8 fe ff ff ff 	movabs rsi,0xfffffffffffffeb8
ffff80000080f2b5:	ff ff ff 
ffff80000080f2b8:	48 8b 34 30          	mov    rsi,QWORD PTR [rax+rsi*1]
ffff80000080f2bc:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
ffff80000080f2bf:	8b 76 08             	mov    esi,DWORD PTR [rsi+0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
ffff80000080f2c2:	41 89 f0             	mov    r8d,esi
ffff80000080f2c5:	48 be b8 fe ff ff ff 	movabs rsi,0xfffffffffffffeb8
ffff80000080f2cc:	ff ff ff 
ffff80000080f2cf:	48 8b 34 30          	mov    rsi,QWORD PTR [rax+rsi*1]
ffff80000080f2d3:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
ffff80000080f2d6:	8b 7e 04             	mov    edi,DWORD PTR [rsi+0x4]
ffff80000080f2d9:	44 89 c6             	mov    esi,r8d
ffff80000080f2dc:	49 89 c7             	mov    r15,rax
ffff80000080f2df:	49 b8 b7 ca fe ff ff 	movabs r8,0xfffffffffffecab7
ffff80000080f2e6:	ff ff ff 
ffff80000080f2e9:	49 01 c0             	add    r8,rax
ffff80000080f2ec:	41 ff d0             	call   r8
ffff80000080f2ef:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
        break;
ffff80000080f2f2:	eb 5b                	jmp    ffff80000080f34f <execute_request+0x32a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
        r=async_check_disk(running_req->disk);
ffff80000080f2f4:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f2fb:	ff ff ff 
ffff80000080f2fe:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f302:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f305:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080f308:	89 d7                	mov    edi,edx
ffff80000080f30a:	49 89 c7             	mov    r15,rax
ffff80000080f30d:	48 ba 9c d3 fe ff ff 	movabs rdx,0xfffffffffffed39c
ffff80000080f314:	ff ff ff 
ffff80000080f317:	48 01 c2             	add    rdx,rax
ffff80000080f31a:	ff d2                	call   rdx
ffff80000080f31c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
        break;
ffff80000080f31f:	eb 2e                	jmp    ffff80000080f34f <execute_request+0x32a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147
        r=async_reset_disk(running_req->disk);
ffff80000080f321:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f328:	ff ff ff 
ffff80000080f32b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f32f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f332:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080f335:	89 d7                	mov    edi,edx
ffff80000080f337:	49 89 c7             	mov    r15,rax
ffff80000080f33a:	48 ba e7 c8 fe ff ff 	movabs rdx,0xfffffffffffec8e7
ffff80000080f341:	ff ff ff 
ffff80000080f344:	48 01 c2             	add    rdx,rax
ffff80000080f347:	ff d2                	call   rdx
ffff80000080f349:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148
        break;
ffff80000080f34c:	eb 01                	jmp    ffff80000080f34f <execute_request+0x32a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:150
        break;
ffff80000080f34e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:152
    }
    if(r==-1)return -1;
ffff80000080f34f:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff80000080f353:	75 07                	jne    ffff80000080f35c <execute_request+0x337>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:152 (discriminator 1)
ffff80000080f355:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f35a:	eb 05                	jmp    ffff80000080f361 <execute_request+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:153
    return 0;
ffff80000080f35c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:154
}
ffff80000080f361:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f365:	c9                   	leave  
ffff80000080f366:	c3                   	ret    

ffff80000080f367 <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:156
int async_reset_disk(int disk)
{
ffff80000080f367:	f3 0f 1e fa          	endbr64 
ffff80000080f36b:	55                   	push   rbp
ffff80000080f36c:	48 89 e5             	mov    rbp,rsp
ffff80000080f36f:	41 57                	push   r15
ffff80000080f371:	48 83 ec 18          	sub    rsp,0x18
ffff80000080f375:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f375 <async_reset_disk+0xe>
ffff80000080f37c:	49 bb 0b 37 01 00 00 	movabs r11,0x1370b
ffff80000080f383:	00 00 00 
ffff80000080f386:	4c 01 d8             	add    rax,r11
ffff80000080f389:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:157
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
ffff80000080f38c:	be 0c 00 00 00       	mov    esi,0xc
ffff80000080f391:	bf f6 03 00 00       	mov    edi,0x3f6
ffff80000080f396:	49 89 c7             	mov    r15,rax
ffff80000080f399:	48 ba 80 76 fe ff ff 	movabs rdx,0xfffffffffffe7680
ffff80000080f3a0:	ff ff ff 
ffff80000080f3a3:	48 01 c2             	add    rdx,rax
ffff80000080f3a6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:158
    return 0;
ffff80000080f3a8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:159
}
ffff80000080f3ad:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f3b1:	c9                   	leave  
ffff80000080f3b2:	c3                   	ret    

ffff80000080f3b3 <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:161
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
ffff80000080f3b3:	f3 0f 1e fa          	endbr64 
ffff80000080f3b7:	55                   	push   rbp
ffff80000080f3b8:	48 89 e5             	mov    rbp,rsp
ffff80000080f3bb:	41 57                	push   r15
ffff80000080f3bd:	53                   	push   rbx
ffff80000080f3be:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f3c2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f3c2 <async_read_disk+0xf>
ffff80000080f3c9:	49 bb be 36 01 00 00 	movabs r11,0x136be
ffff80000080f3d0:	00 00 00 
ffff80000080f3d3:	4c 01 db             	add    rbx,r11
ffff80000080f3d6:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080f3d9:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f3dc:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080f3df:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:162
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080f3e3:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:163
    int slave_disk=0;
ffff80000080f3e9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:164
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080f3f0:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080f3f4:	74 06                	je     ffff80000080f3fc <async_read_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:164 (discriminator 1)
ffff80000080f3f6:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f3fa:	75 06                	jne    ffff80000080f402 <async_read_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:165
        port=PORT_DISK_SLAVE;
ffff80000080f3fc:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080f402:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f406:	74 06                	je     ffff80000080f40e <async_read_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 1)
ffff80000080f408:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080f40c:	75 07                	jne    ffff80000080f415 <async_read_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
        slave_disk=1;
ffff80000080f40e:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:168
    outb(port+2,sec_n);
ffff80000080f415:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f418:	0f b6 d0             	movzx  edx,al
ffff80000080f41b:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f41f:	83 c0 02             	add    eax,0x2
ffff80000080f422:	0f b7 c0             	movzx  eax,ax
ffff80000080f425:	89 d6                	mov    esi,edx
ffff80000080f427:	89 c7                	mov    edi,eax
ffff80000080f429:	49 89 df             	mov    r15,rbx
ffff80000080f42c:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f433:	ff ff ff 
ffff80000080f436:	48 01 d8             	add    rax,rbx
ffff80000080f439:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
    outb(port+3,lba&0xff);
ffff80000080f43b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f43e:	0f b6 d0             	movzx  edx,al
ffff80000080f441:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f445:	83 c0 03             	add    eax,0x3
ffff80000080f448:	0f b7 c0             	movzx  eax,ax
ffff80000080f44b:	89 d6                	mov    esi,edx
ffff80000080f44d:	89 c7                	mov    edi,eax
ffff80000080f44f:	49 89 df             	mov    r15,rbx
ffff80000080f452:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f459:	ff ff ff 
ffff80000080f45c:	48 01 d8             	add    rax,rbx
ffff80000080f45f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:170
    outb(port+4,(lba>>8)&0xff);
ffff80000080f461:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f464:	c1 e8 08             	shr    eax,0x8
ffff80000080f467:	0f b6 d0             	movzx  edx,al
ffff80000080f46a:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f46e:	83 c0 04             	add    eax,0x4
ffff80000080f471:	0f b7 c0             	movzx  eax,ax
ffff80000080f474:	89 d6                	mov    esi,edx
ffff80000080f476:	89 c7                	mov    edi,eax
ffff80000080f478:	49 89 df             	mov    r15,rbx
ffff80000080f47b:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f482:	ff ff ff 
ffff80000080f485:	48 01 d8             	add    rax,rbx
ffff80000080f488:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    outb(port+5,(lba>>16)&0xff);
ffff80000080f48a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f48d:	c1 e8 10             	shr    eax,0x10
ffff80000080f490:	0f b6 d0             	movzx  edx,al
ffff80000080f493:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f497:	83 c0 05             	add    eax,0x5
ffff80000080f49a:	0f b7 c0             	movzx  eax,ax
ffff80000080f49d:	89 d6                	mov    esi,edx
ffff80000080f49f:	89 c7                	mov    edi,eax
ffff80000080f4a1:	49 89 df             	mov    r15,rbx
ffff80000080f4a4:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f4ab:	ff ff ff 
ffff80000080f4ae:	48 01 d8             	add    rax,rbx
ffff80000080f4b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172
    char drv=slave_disk?0x10:0;
ffff80000080f4b3:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080f4b7:	74 07                	je     ffff80000080f4c0 <async_read_disk+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 1)
ffff80000080f4b9:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080f4be:	eb 05                	jmp    ffff80000080f4c5 <async_read_disk+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 2)
ffff80000080f4c0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 4)
ffff80000080f4c5:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:173 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080f4c8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f4cb:	c1 e8 18             	shr    eax,0x18
ffff80000080f4ce:	83 e0 0f             	and    eax,0xf
ffff80000080f4d1:	89 c2                	mov    edx,eax
ffff80000080f4d3:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080f4d7:	09 d0                	or     eax,edx
ffff80000080f4d9:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080f4dc:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:174 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080f4df:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffff80000080f4e3:	0f b6 d0             	movzx  edx,al
ffff80000080f4e6:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f4ea:	83 c0 06             	add    eax,0x6
ffff80000080f4ed:	0f b7 c0             	movzx  eax,ax
ffff80000080f4f0:	89 d6                	mov    esi,edx
ffff80000080f4f2:	89 c7                	mov    edi,eax
ffff80000080f4f4:	49 89 df             	mov    r15,rbx
ffff80000080f4f7:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f4fe:	ff ff ff 
ffff80000080f501:	48 01 d8             	add    rax,rbx
ffff80000080f504:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:175 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
ffff80000080f506:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f50a:	83 c0 07             	add    eax,0x7
ffff80000080f50d:	0f b7 c0             	movzx  eax,ax
ffff80000080f510:	be 20 00 00 00       	mov    esi,0x20
ffff80000080f515:	89 c7                	mov    edi,eax
ffff80000080f517:	49 89 df             	mov    r15,rbx
ffff80000080f51a:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f521:	ff ff ff 
ffff80000080f524:	48 01 d8             	add    rax,rbx
ffff80000080f527:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:195 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
ffff80000080f529:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:196 (discriminator 4)
}
ffff80000080f52e:	48 83 c4 30          	add    rsp,0x30
ffff80000080f532:	5b                   	pop    rbx
ffff80000080f533:	41 5f                	pop    r15
ffff80000080f535:	5d                   	pop    rbp
ffff80000080f536:	c3                   	ret    

ffff80000080f537 <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
ffff80000080f537:	f3 0f 1e fa          	endbr64 
ffff80000080f53b:	55                   	push   rbp
ffff80000080f53c:	48 89 e5             	mov    rbp,rsp
ffff80000080f53f:	41 57                	push   r15
ffff80000080f541:	53                   	push   rbx
ffff80000080f542:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f546:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f546 <async_write_disk+0xf>
ffff80000080f54d:	49 bb 3a 35 01 00 00 	movabs r11,0x1353a
ffff80000080f554:	00 00 00 
ffff80000080f557:	4c 01 db             	add    rbx,r11
ffff80000080f55a:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080f55d:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f560:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080f563:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080f567:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    int slave_disk=0;
ffff80000080f56d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080f574:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080f578:	74 06                	je     ffff80000080f580 <async_write_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
ffff80000080f57a:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f57e:	75 06                	jne    ffff80000080f586 <async_write_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        port=PORT_DISK_SLAVE;
ffff80000080f580:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080f586:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f58a:	74 06                	je     ffff80000080f592 <async_write_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
ffff80000080f58c:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080f590:	75 07                	jne    ffff80000080f599 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        slave_disk=1;
ffff80000080f592:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    while (1)
    {
        byte t=inb(0x1f7);
ffff80000080f599:	bf f7 00 00 00       	mov    edi,0xf7
ffff80000080f59e:	49 89 df             	mov    r15,rbx
ffff80000080f5a1:	48 b8 99 76 fe ff ff 	movabs rax,0xfffffffffffe7699
ffff80000080f5a8:	ff ff ff 
ffff80000080f5ab:	48 01 d8             	add    rax,rbx
ffff80000080f5ae:	ff d0                	call   rax
ffff80000080f5b0:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
        //logf("istat:%x",t);
        byte err=t&1;
ffff80000080f5b3:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080f5b7:	83 e0 01             	and    eax,0x1
ffff80000080f5ba:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
        if(err!=0)
ffff80000080f5bd:	80 7d e6 00          	cmp    BYTE PTR [rbp-0x1a],0x0
ffff80000080f5c1:	74 0a                	je     ffff80000080f5cd <async_write_disk+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:213
        {
            //printf("ERR iwriting disk\n");
            return -1;
ffff80000080f5c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f5c8:	e9 23 01 00 00       	jmp    ffff80000080f6f0 <async_write_disk+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:215
        }
        t&=0x88;
ffff80000080f5cd:	80 65 e7 88          	and    BYTE PTR [rbp-0x19],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:216
        if(t==0x8)break;
ffff80000080f5d1:	80 7d e7 08          	cmp    BYTE PTR [rbp-0x19],0x8
ffff80000080f5d5:	74 02                	je     ffff80000080f5d9 <async_write_disk+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    {
ffff80000080f5d7:	eb c0                	jmp    ffff80000080f599 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:216
        if(t==0x8)break;
ffff80000080f5d9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:218
    }
    outb(port+2,sec_n);
ffff80000080f5da:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f5dd:	0f b6 d0             	movzx  edx,al
ffff80000080f5e0:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f5e4:	83 c0 02             	add    eax,0x2
ffff80000080f5e7:	0f b7 c0             	movzx  eax,ax
ffff80000080f5ea:	89 d6                	mov    esi,edx
ffff80000080f5ec:	89 c7                	mov    edi,eax
ffff80000080f5ee:	49 89 df             	mov    r15,rbx
ffff80000080f5f1:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f5f8:	ff ff ff 
ffff80000080f5fb:	48 01 d8             	add    rax,rbx
ffff80000080f5fe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:219
    outb(port+3,lba&0xff);
ffff80000080f600:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f603:	0f b6 d0             	movzx  edx,al
ffff80000080f606:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f60a:	83 c0 03             	add    eax,0x3
ffff80000080f60d:	0f b7 c0             	movzx  eax,ax
ffff80000080f610:	89 d6                	mov    esi,edx
ffff80000080f612:	89 c7                	mov    edi,eax
ffff80000080f614:	49 89 df             	mov    r15,rbx
ffff80000080f617:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f61e:	ff ff ff 
ffff80000080f621:	48 01 d8             	add    rax,rbx
ffff80000080f624:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:220
    outb(port+4,(lba>>8)&0xff);
ffff80000080f626:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f629:	c1 e8 08             	shr    eax,0x8
ffff80000080f62c:	0f b6 d0             	movzx  edx,al
ffff80000080f62f:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f633:	83 c0 04             	add    eax,0x4
ffff80000080f636:	0f b7 c0             	movzx  eax,ax
ffff80000080f639:	89 d6                	mov    esi,edx
ffff80000080f63b:	89 c7                	mov    edi,eax
ffff80000080f63d:	49 89 df             	mov    r15,rbx
ffff80000080f640:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f647:	ff ff ff 
ffff80000080f64a:	48 01 d8             	add    rax,rbx
ffff80000080f64d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    outb(port+5,(lba>>16)&0xff);
ffff80000080f64f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f652:	c1 e8 10             	shr    eax,0x10
ffff80000080f655:	0f b6 d0             	movzx  edx,al
ffff80000080f658:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f65c:	83 c0 05             	add    eax,0x5
ffff80000080f65f:	0f b7 c0             	movzx  eax,ax
ffff80000080f662:	89 d6                	mov    esi,edx
ffff80000080f664:	89 c7                	mov    edi,eax
ffff80000080f666:	49 89 df             	mov    r15,rbx
ffff80000080f669:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f670:	ff ff ff 
ffff80000080f673:	48 01 d8             	add    rax,rbx
ffff80000080f676:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
    char drv=slave_disk?0x10:0;
ffff80000080f678:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080f67c:	74 07                	je     ffff80000080f685 <async_write_disk+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 1)
ffff80000080f67e:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080f683:	eb 05                	jmp    ffff80000080f68a <async_write_disk+0x153>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 2)
ffff80000080f685:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 4)
ffff80000080f68a:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:223 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080f68d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f690:	c1 e8 18             	shr    eax,0x18
ffff80000080f693:	83 e0 0f             	and    eax,0xf
ffff80000080f696:	89 c2                	mov    edx,eax
ffff80000080f698:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffff80000080f69c:	09 d0                	or     eax,edx
ffff80000080f69e:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080f6a1:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:224 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080f6a4:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000080f6a8:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f6ac:	83 c0 06             	add    eax,0x6
ffff80000080f6af:	0f b7 c0             	movzx  eax,ax
ffff80000080f6b2:	89 d6                	mov    esi,edx
ffff80000080f6b4:	89 c7                	mov    edi,eax
ffff80000080f6b6:	49 89 df             	mov    r15,rbx
ffff80000080f6b9:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f6c0:	ff ff ff 
ffff80000080f6c3:	48 01 d8             	add    rax,rbx
ffff80000080f6c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:225 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
ffff80000080f6c8:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f6cc:	83 c0 07             	add    eax,0x7
ffff80000080f6cf:	0f b7 c0             	movzx  eax,ax
ffff80000080f6d2:	be 30 00 00 00       	mov    esi,0x30
ffff80000080f6d7:	89 c7                	mov    edi,eax
ffff80000080f6d9:	49 89 df             	mov    r15,rbx
ffff80000080f6dc:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080f6e3:	ff ff ff 
ffff80000080f6e6:	48 01 d8             	add    rax,rbx
ffff80000080f6e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
ffff80000080f6eb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
}
ffff80000080f6f0:	48 83 c4 30          	add    rsp,0x30
ffff80000080f6f4:	5b                   	pop    rbx
ffff80000080f6f5:	41 5f                	pop    r15
ffff80000080f6f7:	5d                   	pop    rbp
ffff80000080f6f8:	c3                   	ret    

ffff80000080f6f9 <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:245
int read_disk(int disk, int lba, int secn, char *dest)
{
ffff80000080f6f9:	f3 0f 1e fa          	endbr64 
ffff80000080f6fd:	55                   	push   rbp
ffff80000080f6fe:	48 89 e5             	mov    rbp,rsp
ffff80000080f701:	41 57                	push   r15
ffff80000080f703:	53                   	push   rbx
ffff80000080f704:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f708:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f708 <read_disk+0xf>
ffff80000080f70f:	49 bb 78 33 01 00 00 	movabs r11,0x13378
ffff80000080f716:	00 00 00 
ffff80000080f719:	4c 01 db             	add    rbx,r11
ffff80000080f71c:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080f71f:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f722:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080f725:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    request(disk,DISKREQ_READ,lba,secn,dest);
ffff80000080f729:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff80000080f72d:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080f730:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080f733:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f736:	49 89 f0             	mov    r8,rsi
ffff80000080f739:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f73e:	89 c7                	mov    edi,eax
ffff80000080f740:	49 89 df             	mov    r15,rbx
ffff80000080f743:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000080f74a:	ff ff ff 
ffff80000080f74d:	48 01 d8             	add    rax,rbx
ffff80000080f750:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:247
    int ret=read_disk_asm(lba,secn,dest);
ffff80000080f752:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f756:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080f759:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f75c:	89 ce                	mov    esi,ecx
ffff80000080f75e:	89 c7                	mov    edi,eax
ffff80000080f760:	49 89 df             	mov    r15,rbx
ffff80000080f763:	48 b8 4c d6 fe ff ff 	movabs rax,0xfffffffffffed64c
ffff80000080f76a:	ff ff ff 
ffff80000080f76d:	48 01 d8             	add    rax,rbx
ffff80000080f770:	ff d0                	call   rax
ffff80000080f772:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:249
//    chk_result(ret);
    if(running_req){
ffff80000080f775:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f77c:	ff ff ff 
ffff80000080f77f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f783:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f786:	48 85 c0             	test   rax,rax
ffff80000080f789:	74 37                	je     ffff80000080f7c2 <read_disk+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:251

        running_req->stat=REQ_STAT_DONE;
ffff80000080f78b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f792:	ff ff ff 
ffff80000080f795:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f799:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f79c:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:252
        running_req->args->stat=REQ_STAT_EMPTY;
ffff80000080f7a3:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f7aa:	ff ff ff 
ffff80000080f7ad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f7b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f7b4:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080f7b8:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
ffff80000080f7bf:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:255
    }
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080f7c2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f7c9:	ff ff ff 
ffff80000080f7cc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f7d0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:256
    return ret;
ffff80000080f7d7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:257
}
ffff80000080f7da:	48 83 c4 30          	add    rsp,0x30
ffff80000080f7de:	5b                   	pop    rbx
ffff80000080f7df:	41 5f                	pop    r15
ffff80000080f7e1:	5d                   	pop    rbp
ffff80000080f7e2:	c3                   	ret    

ffff80000080f7e3 <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:259
int write_disk(int disk, int lba, int secn, char *src)
{
ffff80000080f7e3:	f3 0f 1e fa          	endbr64 
ffff80000080f7e7:	55                   	push   rbp
ffff80000080f7e8:	48 89 e5             	mov    rbp,rsp
ffff80000080f7eb:	41 57                	push   r15
ffff80000080f7ed:	53                   	push   rbx
ffff80000080f7ee:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f7f2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f7f2 <write_disk+0xf>
ffff80000080f7f9:	49 bb 8e 32 01 00 00 	movabs r11,0x1328e
ffff80000080f800:	00 00 00 
ffff80000080f803:	4c 01 db             	add    rbx,r11
ffff80000080f806:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080f809:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f80c:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080f80f:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:260
    request(disk,DISKREQ_WRITE,lba,secn,src);
ffff80000080f813:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff80000080f817:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080f81a:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080f81d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f820:	49 89 f0             	mov    r8,rsi
ffff80000080f823:	be 01 00 00 00       	mov    esi,0x1
ffff80000080f828:	89 c7                	mov    edi,eax
ffff80000080f82a:	49 89 df             	mov    r15,rbx
ffff80000080f82d:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000080f834:	ff ff ff 
ffff80000080f837:	48 01 d8             	add    rax,rbx
ffff80000080f83a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:261
    int ret=write_disk_asm(lba,secn,src);
ffff80000080f83c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f840:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080f843:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f846:	89 ce                	mov    esi,ecx
ffff80000080f848:	89 c7                	mov    edi,eax
ffff80000080f84a:	49 89 df             	mov    r15,rbx
ffff80000080f84d:	48 b8 c0 d6 fe ff ff 	movabs rax,0xfffffffffffed6c0
ffff80000080f854:	ff ff ff 
ffff80000080f857:	48 01 d8             	add    rax,rbx
ffff80000080f85a:	ff d0                	call   rax
ffff80000080f85c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:263
//    chk_result(ret);
    if(running_req){
ffff80000080f85f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f866:	ff ff ff 
ffff80000080f869:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f86d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f870:	48 85 c0             	test   rax,rax
ffff80000080f873:	74 37                	je     ffff80000080f8ac <write_disk+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:265

        running_req->stat=REQ_STAT_DONE;
ffff80000080f875:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f87c:	ff ff ff 
ffff80000080f87f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f883:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f886:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:266
        running_req->args->stat=REQ_STAT_EMPTY;
ffff80000080f88d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f894:	ff ff ff 
ffff80000080f897:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f89b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f89e:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080f8a2:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
ffff80000080f8a9:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:268
    }
    running_req=NULL;
ffff80000080f8ac:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f8b3:	ff ff ff 
ffff80000080f8b6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f8ba:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:269
    return ret;
ffff80000080f8c1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:270
}
ffff80000080f8c4:	48 83 c4 30          	add    rsp,0x30
ffff80000080f8c8:	5b                   	pop    rbx
ffff80000080f8c9:	41 5f                	pop    r15
ffff80000080f8cb:	5d                   	pop    rbp
ffff80000080f8cc:	c3                   	ret    

ffff80000080f8cd <chk_result>:
chk_result():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:272
int chk_result(int r)
{
ffff80000080f8cd:	f3 0f 1e fa          	endbr64 
ffff80000080f8d1:	55                   	push   rbp
ffff80000080f8d2:	48 89 e5             	mov    rbp,rsp
ffff80000080f8d5:	41 57                	push   r15
ffff80000080f8d7:	48 83 ec 18          	sub    rsp,0x18
ffff80000080f8db:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080f8db <chk_result+0xe>
ffff80000080f8e2:	49 bb a5 31 01 00 00 	movabs r11,0x131a5
ffff80000080f8e9:	00 00 00 
ffff80000080f8ec:	4c 01 da             	add    rdx,r11
ffff80000080f8ef:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:273
    while(disk_reqs[r].stat!=REQ_STAT_DONE);
ffff80000080f8f2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:273 (discriminator 1)
ffff80000080f8f3:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080f8fa:	ff ff ff 
ffff80000080f8fd:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff80000080f901:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f904:	48 63 c8             	movsxd rcx,eax
ffff80000080f907:	48 89 c8             	mov    rax,rcx
ffff80000080f90a:	48 01 c0             	add    rax,rax
ffff80000080f90d:	48 01 c8             	add    rax,rcx
ffff80000080f910:	48 c1 e0 04          	shl    rax,0x4
ffff80000080f914:	48 01 f0             	add    rax,rsi
ffff80000080f917:	48 83 c0 1c          	add    rax,0x1c
ffff80000080f91b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f91d:	83 f8 03             	cmp    eax,0x3
ffff80000080f920:	75 d1                	jne    ffff80000080f8f3 <chk_result+0x26>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:274
    if(disk_reqs[r].result==DISK_CHK_OK)
ffff80000080f922:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080f929:	ff ff ff 
ffff80000080f92c:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff80000080f930:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f933:	48 63 c8             	movsxd rcx,eax
ffff80000080f936:	48 89 c8             	mov    rax,rcx
ffff80000080f939:	48 01 c0             	add    rax,rax
ffff80000080f93c:	48 01 c8             	add    rax,rcx
ffff80000080f93f:	48 c1 e0 04          	shl    rax,0x4
ffff80000080f943:	48 01 f0             	add    rax,rsi
ffff80000080f946:	48 83 c0 20          	add    rax,0x20
ffff80000080f94a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f94c:	83 f8 01             	cmp    eax,0x1
ffff80000080f94f:	75 07                	jne    ffff80000080f958 <chk_result+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:275
        return 1;
ffff80000080f951:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080f956:	eb 2d                	jmp    ffff80000080f985 <chk_result+0xb8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:276
    comprintf("disk err\n");
ffff80000080f958:	48 b8 a8 d8 ff ff ff 	movabs rax,0xffffffffffffd8a8
ffff80000080f95f:	ff ff ff 
ffff80000080f962:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080f966:	48 89 c7             	mov    rdi,rax
ffff80000080f969:	49 89 d7             	mov    r15,rdx
ffff80000080f96c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f971:	48 b9 a4 0c ff ff ff 	movabs rcx,0xffffffffffff0ca4
ffff80000080f978:	ff ff ff 
ffff80000080f97b:	48 01 d1             	add    rcx,rdx
ffff80000080f97e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:277
    return 0;
ffff80000080f980:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:278
}
ffff80000080f985:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f989:	c9                   	leave  
ffff80000080f98a:	c3                   	ret    

ffff80000080f98b <await_diskreq>:
await_diskreq():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:279
int await_diskreq(){
ffff80000080f98b:	f3 0f 1e fa          	endbr64 
ffff80000080f98f:	55                   	push   rbp
ffff80000080f990:	48 89 e5             	mov    rbp,rsp
ffff80000080f993:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f993 <await_diskreq+0x8>
ffff80000080f99a:	49 bb ed 30 01 00 00 	movabs r11,0x130ed
ffff80000080f9a1:	00 00 00 
ffff80000080f9a4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:280
    while (running_req->stat!=REQ_STAT_DONE);
ffff80000080f9a7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:280 (discriminator 1)
ffff80000080f9a8:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f9af:	ff ff ff 
ffff80000080f9b2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f9b6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f9b9:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff80000080f9bc:	83 fa 03             	cmp    edx,0x3
ffff80000080f9bf:	75 e7                	jne    ffff80000080f9a8 <await_diskreq+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:281
    if(running_req->result==DISK_CHK_OK)
ffff80000080f9c1:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f9c8:	ff ff ff 
ffff80000080f9cb:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080f9cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f9d2:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
ffff80000080f9d5:	83 f8 01             	cmp    eax,0x1
ffff80000080f9d8:	75 07                	jne    ffff80000080f9e1 <await_diskreq+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:282
        return 1;
ffff80000080f9da:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080f9df:	eb 05                	jmp    ffff80000080f9e6 <await_diskreq+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:283
    return 0;
ffff80000080f9e1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:285

}
ffff80000080f9e6:	5d                   	pop    rbp
ffff80000080f9e7:	c3                   	ret    

ffff80000080f9e8 <disk_existent>:
disk_existent():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:287
int disk_existent(int disk)
{
ffff80000080f9e8:	f3 0f 1e fa          	endbr64 
ffff80000080f9ec:	55                   	push   rbp
ffff80000080f9ed:	48 89 e5             	mov    rbp,rsp
ffff80000080f9f0:	41 57                	push   r15
ffff80000080f9f2:	48 83 ec 18          	sub    rsp,0x18
ffff80000080f9f6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f9f6 <disk_existent+0xe>
ffff80000080f9fd:	49 bb 8a 30 01 00 00 	movabs r11,0x1308a
ffff80000080fa04:	00 00 00 
ffff80000080fa07:	4c 01 d8             	add    rax,r11
ffff80000080fa0a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:288
    switch (disk)
ffff80000080fa0d:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
ffff80000080fa11:	0f 84 b8 00 00 00    	je     ffff80000080facf <disk_existent+0xe7>
ffff80000080fa17:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
ffff80000080fa1b:	0f 8f dc 00 00 00    	jg     ffff80000080fafd <disk_existent+0x115>
ffff80000080fa21:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
ffff80000080fa25:	74 7a                	je     ffff80000080faa1 <disk_existent+0xb9>
ffff80000080fa27:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
ffff80000080fa2b:	0f 8f cc 00 00 00    	jg     ffff80000080fafd <disk_existent+0x115>
ffff80000080fa31:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080fa35:	74 0b                	je     ffff80000080fa42 <disk_existent+0x5a>
ffff80000080fa37:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
ffff80000080fa3b:	74 36                	je     ffff80000080fa73 <disk_existent+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:306
        
    case DISK_SLAVE_SLAVE:
        return sys_find_dev("hd3")!=-1;
        break;
    default:
        break;
ffff80000080fa3d:	e9 bb 00 00 00       	jmp    ffff80000080fafd <disk_existent+0x115>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:291
        return sys_find_dev("hd0")!=-1;
ffff80000080fa42:	48 ba b2 d8 ff ff ff 	movabs rdx,0xffffffffffffd8b2
ffff80000080fa49:	ff ff ff 
ffff80000080fa4c:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080fa50:	48 89 d7             	mov    rdi,rdx
ffff80000080fa53:	49 89 c7             	mov    r15,rax
ffff80000080fa56:	48 ba 0e 2f fe ff ff 	movabs rdx,0xfffffffffffe2f0e
ffff80000080fa5d:	ff ff ff 
ffff80000080fa60:	48 01 c2             	add    rdx,rax
ffff80000080fa63:	ff d2                	call   rdx
ffff80000080fa65:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080fa68:	0f 95 c0             	setne  al
ffff80000080fa6b:	0f b6 c0             	movzx  eax,al
ffff80000080fa6e:	e9 90 00 00 00       	jmp    ffff80000080fb03 <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:295
        return sys_find_dev("hd1")!=-1;
ffff80000080fa73:	48 ba b6 d8 ff ff ff 	movabs rdx,0xffffffffffffd8b6
ffff80000080fa7a:	ff ff ff 
ffff80000080fa7d:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080fa81:	48 89 d7             	mov    rdi,rdx
ffff80000080fa84:	49 89 c7             	mov    r15,rax
ffff80000080fa87:	48 ba 0e 2f fe ff ff 	movabs rdx,0xfffffffffffe2f0e
ffff80000080fa8e:	ff ff ff 
ffff80000080fa91:	48 01 c2             	add    rdx,rax
ffff80000080fa94:	ff d2                	call   rdx
ffff80000080fa96:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080fa99:	0f 95 c0             	setne  al
ffff80000080fa9c:	0f b6 c0             	movzx  eax,al
ffff80000080fa9f:	eb 62                	jmp    ffff80000080fb03 <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:299
        return sys_find_dev("hd2")!=-1;
ffff80000080faa1:	48 ba ba d8 ff ff ff 	movabs rdx,0xffffffffffffd8ba
ffff80000080faa8:	ff ff ff 
ffff80000080faab:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080faaf:	48 89 d7             	mov    rdi,rdx
ffff80000080fab2:	49 89 c7             	mov    r15,rax
ffff80000080fab5:	48 ba 0e 2f fe ff ff 	movabs rdx,0xfffffffffffe2f0e
ffff80000080fabc:	ff ff ff 
ffff80000080fabf:	48 01 c2             	add    rdx,rax
ffff80000080fac2:	ff d2                	call   rdx
ffff80000080fac4:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080fac7:	0f 95 c0             	setne  al
ffff80000080faca:	0f b6 c0             	movzx  eax,al
ffff80000080facd:	eb 34                	jmp    ffff80000080fb03 <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:303
        return sys_find_dev("hd3")!=-1;
ffff80000080facf:	48 ba be d8 ff ff ff 	movabs rdx,0xffffffffffffd8be
ffff80000080fad6:	ff ff ff 
ffff80000080fad9:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080fadd:	48 89 d7             	mov    rdi,rdx
ffff80000080fae0:	49 89 c7             	mov    r15,rax
ffff80000080fae3:	48 ba 0e 2f fe ff ff 	movabs rdx,0xfffffffffffe2f0e
ffff80000080faea:	ff ff ff 
ffff80000080faed:	48 01 c2             	add    rdx,rax
ffff80000080faf0:	ff d2                	call   rdx
ffff80000080faf2:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080faf5:	0f 95 c0             	setne  al
ffff80000080faf8:	0f b6 c0             	movzx  eax,al
ffff80000080fafb:	eb 06                	jmp    ffff80000080fb03 <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:306
        break;
ffff80000080fafd:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:308
    }
    return 0;
ffff80000080fafe:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:309
}
ffff80000080fb03:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080fb07:	c9                   	leave  
ffff80000080fb08:	c3                   	ret    

ffff80000080fb09 <hd_iterate>:
hd_iterate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:311
int hd_iterate()
{
ffff80000080fb09:	f3 0f 1e fa          	endbr64 
ffff80000080fb0d:	55                   	push   rbp
ffff80000080fb0e:	48 89 e5             	mov    rbp,rsp
ffff80000080fb11:	41 57                	push   r15
ffff80000080fb13:	53                   	push   rbx
ffff80000080fb14:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
ffff80000080fb1b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080fb1b <hd_iterate+0x12>
ffff80000080fb22:	49 bb 65 2f 01 00 00 	movabs r11,0x12f65
ffff80000080fb29:	00 00 00 
ffff80000080fb2c:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:315
    char *name;
    
    int r[4];
    r[0]=request(DISK_MAJOR_MAJOR,DISKREQ_CHECK,0,1,0);
ffff80000080fb2f:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080fb35:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080fb3a:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080fb3f:	be 02 00 00 00       	mov    esi,0x2
ffff80000080fb44:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080fb49:	49 89 df             	mov    r15,rbx
ffff80000080fb4c:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000080fb53:	ff ff ff 
ffff80000080fb56:	48 01 d8             	add    rax,rbx
ffff80000080fb59:	ff d0                	call   rax
ffff80000080fb5b:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:316
    r[1]=request(DISK_MAJOR_SLAVE,DISKREQ_CHECK,0,1,0);
ffff80000080fb5e:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080fb64:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080fb69:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080fb6e:	be 02 00 00 00       	mov    esi,0x2
ffff80000080fb73:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080fb78:	49 89 df             	mov    r15,rbx
ffff80000080fb7b:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000080fb82:	ff ff ff 
ffff80000080fb85:	48 01 d8             	add    rax,rbx
ffff80000080fb88:	ff d0                	call   rax
ffff80000080fb8a:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:317
    r[2]=request(DISK_SLAVE_MAJOR,DISKREQ_CHECK,0,1,0);
ffff80000080fb8d:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080fb93:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080fb98:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080fb9d:	be 02 00 00 00       	mov    esi,0x2
ffff80000080fba2:	bf 02 00 00 00       	mov    edi,0x2
ffff80000080fba7:	49 89 df             	mov    r15,rbx
ffff80000080fbaa:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000080fbb1:	ff ff ff 
ffff80000080fbb4:	48 01 d8             	add    rax,rbx
ffff80000080fbb7:	ff d0                	call   rax
ffff80000080fbb9:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:318
    r[3]=request(DISK_SLAVE_SLAVE,DISKREQ_CHECK,0,1,0);
ffff80000080fbbc:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080fbc2:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080fbc7:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080fbcc:	be 02 00 00 00       	mov    esi,0x2
ffff80000080fbd1:	bf 03 00 00 00       	mov    edi,0x3
ffff80000080fbd6:	49 89 df             	mov    r15,rbx
ffff80000080fbd9:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000080fbe0:	ff ff ff 
ffff80000080fbe3:	48 01 d8             	add    rax,rbx
ffff80000080fbe6:	ff d0                	call   rax
ffff80000080fbe8:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:319
    for(int i=0;i<1;i++)
ffff80000080fbeb:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080fbf2:	e9 0f 02 00 00       	jmp    ffff80000080fe06 <hd_iterate+0x2fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:322
    {
        int disk;
        switch (i)
ffff80000080fbf7:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080fbfb:	74 3b                	je     ffff80000080fc38 <hd_iterate+0x12f>
ffff80000080fbfd:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080fc01:	7f 3e                	jg     ffff80000080fc41 <hd_iterate+0x138>
ffff80000080fc03:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080fc07:	74 26                	je     ffff80000080fc2f <hd_iterate+0x126>
ffff80000080fc09:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080fc0d:	7f 32                	jg     ffff80000080fc41 <hd_iterate+0x138>
ffff80000080fc0f:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff80000080fc13:	74 08                	je     ffff80000080fc1d <hd_iterate+0x114>
ffff80000080fc15:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
ffff80000080fc19:	74 0b                	je     ffff80000080fc26 <hd_iterate+0x11d>
ffff80000080fc1b:	eb 24                	jmp    ffff80000080fc41 <hd_iterate+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:324
        {
        case 0:disk=DISK_MAJOR_MAJOR;break;
ffff80000080fc1d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080fc24:	eb 25                	jmp    ffff80000080fc4b <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:325
        case 1:disk=DISK_MAJOR_SLAVE;break;
ffff80000080fc26:	c7 45 e0 01 00 00 00 	mov    DWORD PTR [rbp-0x20],0x1
ffff80000080fc2d:	eb 1c                	jmp    ffff80000080fc4b <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:326
        case 2:disk=DISK_SLAVE_MAJOR;break;
ffff80000080fc2f:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [rbp-0x20],0x2
ffff80000080fc36:	eb 13                	jmp    ffff80000080fc4b <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:327
        case 3:disk=DISK_SLAVE_SLAVE;break;
ffff80000080fc38:	c7 45 e0 03 00 00 00 	mov    DWORD PTR [rbp-0x20],0x3
ffff80000080fc3f:	eb 0a                	jmp    ffff80000080fc4b <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:329
        default:
            return -1;
ffff80000080fc41:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080fc46:	e9 c5 01 00 00       	jmp    ffff80000080fe10 <hd_iterate+0x307>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:332
            break;
        }
        if(chk_result(r[i]))//&&!disk_existent(disk)
ffff80000080fc4b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fc4e:	48 98                	cdqe   
ffff80000080fc50:	8b 44 85 c0          	mov    eax,DWORD PTR [rbp+rax*4-0x40]
ffff80000080fc54:	89 c7                	mov    edi,eax
ffff80000080fc56:	49 89 df             	mov    r15,rbx
ffff80000080fc59:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff80000080fc60:	ff ff ff 
ffff80000080fc63:	48 01 d8             	add    rax,rbx
ffff80000080fc66:	ff d0                	call   rax
ffff80000080fc68:	85 c0                	test   eax,eax
ffff80000080fc6a:	0f 84 b1 00 00 00    	je     ffff80000080fd21 <hd_iterate+0x218>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:334
        {
            printf("disk %d checked.\n",i);
ffff80000080fc70:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fc73:	89 c6                	mov    esi,eax
ffff80000080fc75:	48 b8 c2 d8 ff ff ff 	movabs rax,0xffffffffffffd8c2
ffff80000080fc7c:	ff ff ff 
ffff80000080fc7f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fc83:	48 89 c7             	mov    rdi,rax
ffff80000080fc86:	49 89 df             	mov    r15,rbx
ffff80000080fc89:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fc8e:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000080fc95:	ff ff ff 
ffff80000080fc98:	48 01 da             	add    rdx,rbx
ffff80000080fc9b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:336
            //新硬盘
            device hd={
ffff80000080fc9d:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
ffff80000080fca4:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fca9:	b9 15 00 00 00       	mov    ecx,0x15
ffff80000080fcae:	48 89 d7             	mov    rdi,rdx
ffff80000080fcb1:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
ffff80000080fcb4:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fcb7:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
ffff80000080fcbd:	c7 85 18 ff ff ff 01 	mov    DWORD PTR [rbp-0xe8],0x1
ffff80000080fcc4:	00 00 00 
ffff80000080fcc7:	c7 85 1c ff ff ff 01 	mov    DWORD PTR [rbp-0xe4],0x1
ffff80000080fcce:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:340
                .type=DEV_TYPE_BLKDEV,
                .stype=DEV_STYPE_HD,
                .slave_dev=disk,
                .start_port=i<2?PORT_DISK_MAJOR:PORT_DISK_SLAVE
ffff80000080fcd1:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
ffff80000080fcd5:	7f 07                	jg     ffff80000080fcde <hd_iterate+0x1d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:340 (discriminator 1)
ffff80000080fcd7:	b8 f0 01 00 00       	mov    eax,0x1f0
ffff80000080fcdc:	eb 05                	jmp    ffff80000080fce3 <hd_iterate+0x1da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:340 (discriminator 2)
ffff80000080fcde:	b8 70 01 00 00       	mov    eax,0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:336
            device hd={
ffff80000080fce3:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:342
            };
            disks[i]=reg_device(&hd);
ffff80000080fce9:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff80000080fcf0:	48 89 c7             	mov    rdi,rax
ffff80000080fcf3:	49 89 df             	mov    r15,rbx
ffff80000080fcf6:	48 b8 16 2a fe ff ff 	movabs rax,0xfffffffffffe2a16
ffff80000080fcfd:	ff ff ff 
ffff80000080fd00:	48 01 d8             	add    rax,rbx
ffff80000080fd03:	ff d0                	call   rax
ffff80000080fd05:	48 ba 08 fe ff ff ff 	movabs rdx,0xfffffffffffffe08
ffff80000080fd0c:	ff ff ff 
ffff80000080fd0f:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080fd13:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff80000080fd16:	48 63 c9             	movsxd rcx,ecx
ffff80000080fd19:	89 04 8a             	mov    DWORD PTR [rdx+rcx*4],eax
ffff80000080fd1c:	e9 e1 00 00 00       	jmp    ffff80000080fe02 <hd_iterate+0x2f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:343
        }else if(!chk_result(r[i]))//&&disk_existent(disk)
ffff80000080fd21:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fd24:	48 98                	cdqe   
ffff80000080fd26:	8b 44 85 c0          	mov    eax,DWORD PTR [rbp+rax*4-0x40]
ffff80000080fd2a:	89 c7                	mov    edi,eax
ffff80000080fd2c:	49 89 df             	mov    r15,rbx
ffff80000080fd2f:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff80000080fd36:	ff ff ff 
ffff80000080fd39:	48 01 d8             	add    rax,rbx
ffff80000080fd3c:	ff d0                	call   rax
ffff80000080fd3e:	85 c0                	test   eax,eax
ffff80000080fd40:	0f 85 bc 00 00 00    	jne    ffff80000080fe02 <hd_iterate+0x2f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:345
        {
            switch (i)
ffff80000080fd46:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080fd4a:	74 5c                	je     ffff80000080fda8 <hd_iterate+0x29f>
ffff80000080fd4c:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080fd50:	7f 69                	jg     ffff80000080fdbb <hd_iterate+0x2b2>
ffff80000080fd52:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080fd56:	74 3c                	je     ffff80000080fd94 <hd_iterate+0x28b>
ffff80000080fd58:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080fd5c:	7f 5d                	jg     ffff80000080fdbb <hd_iterate+0x2b2>
ffff80000080fd5e:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff80000080fd62:	74 08                	je     ffff80000080fd6c <hd_iterate+0x263>
ffff80000080fd64:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
ffff80000080fd68:	74 16                	je     ffff80000080fd80 <hd_iterate+0x277>
ffff80000080fd6a:	eb 4f                	jmp    ffff80000080fdbb <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:347
            {
            case 0:name="hd0";break;
ffff80000080fd6c:	48 b8 b2 d8 ff ff ff 	movabs rax,0xffffffffffffd8b2
ffff80000080fd73:	ff ff ff 
ffff80000080fd76:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fd7a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080fd7e:	eb 3b                	jmp    ffff80000080fdbb <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:348
            case 1:name="hd1";break;
ffff80000080fd80:	48 b8 b6 d8 ff ff ff 	movabs rax,0xffffffffffffd8b6
ffff80000080fd87:	ff ff ff 
ffff80000080fd8a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fd8e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080fd92:	eb 27                	jmp    ffff80000080fdbb <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:349
            case 2:name="hd2";break;
ffff80000080fd94:	48 b8 ba d8 ff ff ff 	movabs rax,0xffffffffffffd8ba
ffff80000080fd9b:	ff ff ff 
ffff80000080fd9e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fda2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080fda6:	eb 13                	jmp    ffff80000080fdbb <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:350
            case 3:name="hd3";break;
ffff80000080fda8:	48 b8 be d8 ff ff ff 	movabs rax,0xffffffffffffd8be
ffff80000080fdaf:	ff ff ff 
ffff80000080fdb2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fdb6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080fdba:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:353
            }
            //有硬盘被卸载了
            int devi=sys_find_dev(name);
ffff80000080fdbb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fdbf:	48 89 c7             	mov    rdi,rax
ffff80000080fdc2:	49 89 df             	mov    r15,rbx
ffff80000080fdc5:	48 b8 0e 2f fe ff ff 	movabs rax,0xfffffffffffe2f0e
ffff80000080fdcc:	ff ff ff 
ffff80000080fdcf:	48 01 d8             	add    rax,rbx
ffff80000080fdd2:	ff d0                	call   rax
ffff80000080fdd4:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:354
            dispose_device(get_dev(devi));
ffff80000080fdd7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080fdda:	89 c7                	mov    edi,eax
ffff80000080fddc:	49 89 df             	mov    r15,rbx
ffff80000080fddf:	48 b8 73 38 fe ff ff 	movabs rax,0xfffffffffffe3873
ffff80000080fde6:	ff ff ff 
ffff80000080fde9:	48 01 d8             	add    rax,rbx
ffff80000080fdec:	ff d0                	call   rax
ffff80000080fdee:	89 c7                	mov    edi,eax
ffff80000080fdf0:	49 89 df             	mov    r15,rbx
ffff80000080fdf3:	48 b8 84 37 fe ff ff 	movabs rax,0xfffffffffffe3784
ffff80000080fdfa:	ff ff ff 
ffff80000080fdfd:	48 01 d8             	add    rax,rbx
ffff80000080fe00:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:319 (discriminator 2)
    for(int i=0;i<1;i++)
ffff80000080fe02:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:319 (discriminator 1)
ffff80000080fe06:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff80000080fe0a:	0f 8e e7 fd ff ff    	jle    ffff80000080fbf7 <hd_iterate+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:358
        }

    }
}
ffff80000080fe10:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
ffff80000080fe17:	5b                   	pop    rbx
ffff80000080fe18:	41 5f                	pop    r15
ffff80000080fe1a:	5d                   	pop    rbp
ffff80000080fe1b:	c3                   	ret    

ffff80000080fe1c <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:361

int async_check_disk(int disk)
{
ffff80000080fe1c:	f3 0f 1e fa          	endbr64 
ffff80000080fe20:	55                   	push   rbp
ffff80000080fe21:	48 89 e5             	mov    rbp,rsp
ffff80000080fe24:	41 57                	push   r15
ffff80000080fe26:	53                   	push   rbx
ffff80000080fe27:	48 83 ec 20          	sub    rsp,0x20
ffff80000080fe2b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080fe2b <async_check_disk+0xf>
ffff80000080fe32:	49 bb 55 2c 01 00 00 	movabs r11,0x12c55
ffff80000080fe39:	00 00 00 
ffff80000080fe3c:	4c 01 db             	add    rbx,r11
ffff80000080fe3f:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:362
    unsigned short disknr=PORT_DISK_MAJOR;
ffff80000080fe42:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:363
    unsigned short chkcmd=0xe0;
ffff80000080fe48:	66 c7 45 ec e0 00    	mov    WORD PTR [rbp-0x14],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:364
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080fe4e:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080fe52:	74 06                	je     ffff80000080fe5a <async_check_disk+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:364 (discriminator 1)
ffff80000080fe54:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080fe58:	75 06                	jne    ffff80000080fe60 <async_check_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:365
        disknr=PORT_DISK_SLAVE;
ffff80000080fe5a:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:366
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
ffff80000080fe60:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080fe64:	74 06                	je     ffff80000080fe6c <async_check_disk+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:366 (discriminator 1)
ffff80000080fe66:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080fe6a:	75 06                	jne    ffff80000080fe72 <async_check_disk+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:367
        chkcmd=0xf0;
ffff80000080fe6c:	66 c7 45 ec f0 00    	mov    WORD PTR [rbp-0x14],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:368
    outb(disknr+2,1);
ffff80000080fe72:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080fe76:	83 c0 02             	add    eax,0x2
ffff80000080fe79:	0f b7 c0             	movzx  eax,ax
ffff80000080fe7c:	be 01 00 00 00       	mov    esi,0x1
ffff80000080fe81:	89 c7                	mov    edi,eax
ffff80000080fe83:	49 89 df             	mov    r15,rbx
ffff80000080fe86:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080fe8d:	ff ff ff 
ffff80000080fe90:	48 01 d8             	add    rax,rbx
ffff80000080fe93:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:369
    outb(disknr+3,0);
ffff80000080fe95:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080fe99:	83 c0 03             	add    eax,0x3
ffff80000080fe9c:	0f b7 c0             	movzx  eax,ax
ffff80000080fe9f:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fea4:	89 c7                	mov    edi,eax
ffff80000080fea6:	49 89 df             	mov    r15,rbx
ffff80000080fea9:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080feb0:	ff ff ff 
ffff80000080feb3:	48 01 d8             	add    rax,rbx
ffff80000080feb6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:370
    outb(disknr+4,0);
ffff80000080feb8:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080febc:	83 c0 04             	add    eax,0x4
ffff80000080febf:	0f b7 c0             	movzx  eax,ax
ffff80000080fec2:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fec7:	89 c7                	mov    edi,eax
ffff80000080fec9:	49 89 df             	mov    r15,rbx
ffff80000080fecc:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080fed3:	ff ff ff 
ffff80000080fed6:	48 01 d8             	add    rax,rbx
ffff80000080fed9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:371
    outb(disknr+5,0);
ffff80000080fedb:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080fedf:	83 c0 05             	add    eax,0x5
ffff80000080fee2:	0f b7 c0             	movzx  eax,ax
ffff80000080fee5:	be 00 00 00 00       	mov    esi,0x0
ffff80000080feea:	89 c7                	mov    edi,eax
ffff80000080feec:	49 89 df             	mov    r15,rbx
ffff80000080feef:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080fef6:	ff ff ff 
ffff80000080fef9:	48 01 d8             	add    rax,rbx
ffff80000080fefc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:372
    outb(disknr+6,chkcmd);//主硬盘
ffff80000080fefe:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffff80000080ff02:	0f b6 d0             	movzx  edx,al
ffff80000080ff05:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ff09:	83 c0 06             	add    eax,0x6
ffff80000080ff0c:	0f b7 c0             	movzx  eax,ax
ffff80000080ff0f:	89 d6                	mov    esi,edx
ffff80000080ff11:	89 c7                	mov    edi,eax
ffff80000080ff13:	49 89 df             	mov    r15,rbx
ffff80000080ff16:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080ff1d:	ff ff ff 
ffff80000080ff20:	48 01 d8             	add    rax,rbx
ffff80000080ff23:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:373
    outb(disknr+7,DISK_CMD_CHECK);
ffff80000080ff25:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ff29:	83 c0 07             	add    eax,0x7
ffff80000080ff2c:	0f b7 c0             	movzx  eax,ax
ffff80000080ff2f:	be 90 00 00 00       	mov    esi,0x90
ffff80000080ff34:	89 c7                	mov    edi,eax
ffff80000080ff36:	49 89 df             	mov    r15,rbx
ffff80000080ff39:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000080ff40:	ff ff ff 
ffff80000080ff43:	48 01 d8             	add    rax,rbx
ffff80000080ff46:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:384
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
ffff80000080ff48:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:385
}
ffff80000080ff4d:	48 83 c4 20          	add    rsp,0x20
ffff80000080ff51:	5b                   	pop    rbx
ffff80000080ff52:	41 5f                	pop    r15
ffff80000080ff54:	5d                   	pop    rbp
ffff80000080ff55:	c3                   	ret    

ffff80000080ff56 <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:389

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(driver_args *args)
{
ffff80000080ff56:	f3 0f 1e fa          	endbr64 
ffff80000080ff5a:	55                   	push   rbp
ffff80000080ff5b:	48 89 e5             	mov    rbp,rsp
ffff80000080ff5e:	41 57                	push   r15
ffff80000080ff60:	53                   	push   rbx
ffff80000080ff61:	48 83 ec 20          	sub    rsp,0x20
ffff80000080ff65:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ff65 <hd_do_req+0xf>
ffff80000080ff6c:	49 bb 1b 2b 01 00 00 	movabs r11,0x12b1b
ffff80000080ff73:	00 00 00 
ffff80000080ff76:	4c 01 db             	add    rbx,r11
ffff80000080ff79:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:390
    int diski=0;
ffff80000080ff7d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:391
    for(;disks[diski]!=args->dev;diski++);
ffff80000080ff84:	eb 04                	jmp    ffff80000080ff8a <hd_do_req+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:391 (discriminator 2)
ffff80000080ff86:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:391 (discriminator 1)
ffff80000080ff8a:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080ff91:	ff ff ff 
ffff80000080ff94:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ff98:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080ff9b:	48 63 d2             	movsxd rdx,edx
ffff80000080ff9e:	8b 14 90             	mov    edx,DWORD PTR [rax+rdx*4]
ffff80000080ffa1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ffa5:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
ffff80000080ffab:	39 c2                	cmp    edx,eax
ffff80000080ffad:	75 d7                	jne    ffff80000080ff86 <hd_do_req+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:392
    switch (args->cmd)
ffff80000080ffaf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ffb3:	8b 80 a8 00 00 00    	mov    eax,DWORD PTR [rax+0xa8]
ffff80000080ffb9:	83 f8 04             	cmp    eax,0x4
ffff80000080ffbc:	0f 84 8c 00 00 00    	je     ffff80000081004e <hd_do_req+0xf8>
ffff80000080ffc2:	83 f8 04             	cmp    eax,0x4
ffff80000080ffc5:	0f 8f bd 00 00 00    	jg     ffff800000810088 <hd_do_req+0x132>
ffff80000080ffcb:	83 f8 02             	cmp    eax,0x2
ffff80000080ffce:	74 0a                	je     ffff80000080ffda <hd_do_req+0x84>
ffff80000080ffd0:	83 f8 03             	cmp    eax,0x3
ffff80000080ffd3:	74 3f                	je     ffff800000810014 <hd_do_req+0xbe>
ffff80000080ffd5:	e9 ae 00 00 00       	jmp    ffff800000810088 <hd_do_req+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:395
    {
    case DRVF_READ:
        request(diski,DISKREQ_READ,args->lba,args->sec_c,args->dist_addr);
ffff80000080ffda:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ffde:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080ffe1:	48 98                	cdqe   
ffff80000080ffe3:	48 89 c6             	mov    rsi,rax
ffff80000080ffe6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ffea:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffff80000080ffed:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fff1:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080fff3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fff6:	49 89 f0             	mov    r8,rsi
ffff80000080fff9:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fffe:	89 c7                	mov    edi,eax
ffff800000810000:	49 89 df             	mov    r15,rbx
ffff800000810003:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000081000a:	ff ff ff 
ffff80000081000d:	48 01 d8             	add    rax,rbx
ffff800000810010:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:396
        break;
ffff800000810012:	eb 7b                	jmp    ffff80000081008f <hd_do_req+0x139>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:398
    case DRVF_WRITE:
        request(diski,DISKREQ_WRITE,args->lba,args->sec_c,args->src_addr);
ffff800000810014:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810018:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081001b:	48 98                	cdqe   
ffff80000081001d:	48 89 c6             	mov    rsi,rax
ffff800000810020:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810024:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffff800000810027:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081002b:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000081002d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810030:	49 89 f0             	mov    r8,rsi
ffff800000810033:	be 01 00 00 00       	mov    esi,0x1
ffff800000810038:	89 c7                	mov    edi,eax
ffff80000081003a:	49 89 df             	mov    r15,rbx
ffff80000081003d:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff800000810044:	ff ff ff 
ffff800000810047:	48 01 d8             	add    rax,rbx
ffff80000081004a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:399
        break;
ffff80000081004c:	eb 41                	jmp    ffff80000081008f <hd_do_req+0x139>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:401
    case DRVF_CHK:
        request(diski,DISKREQ_CHECK,args->lba,args->sec_c,args->dist_addr);
ffff80000081004e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810052:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000810055:	48 98                	cdqe   
ffff800000810057:	48 89 c6             	mov    rsi,rax
ffff80000081005a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081005e:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffff800000810061:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810065:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000810067:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081006a:	49 89 f0             	mov    r8,rsi
ffff80000081006d:	be 02 00 00 00       	mov    esi,0x2
ffff800000810072:	89 c7                	mov    edi,eax
ffff800000810074:	49 89 df             	mov    r15,rbx
ffff800000810077:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000081007e:	ff ff ff 
ffff800000810081:	48 01 d8             	add    rax,rbx
ffff800000810084:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:402
        break;
ffff800000810086:	eb 07                	jmp    ffff80000081008f <hd_do_req+0x139>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:403
    default:return -1;
ffff800000810088:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000081008d:	eb 28                	jmp    ffff8000008100b7 <hd_do_req+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:405
    }
    args->stat=REQ_STAT_WORKING;
ffff80000081008f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810093:	c7 80 ac 00 00 00 02 	mov    DWORD PTR [rax+0xac],0x2
ffff80000081009a:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:406
    running_devman_req=args;
ffff80000081009d:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff8000008100a4:	ff ff ff 
ffff8000008100a7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008100ab:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008100af:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:407
    return 0;
ffff8000008100b2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:408
ffff8000008100b7:	48 83 c4 20          	add    rsp,0x20
ffff8000008100bb:	5b                   	pop    rbx
ffff8000008100bc:	41 5f                	pop    r15
ffff8000008100be:	5d                   	pop    rbp
ffff8000008100bf:	c3                   	ret    

ffff8000008100c0 <disk_int_handler>:
disk_int_handler():
ffff8000008100c0:	e8 69 a0 ff ff       	call   ffff80000080a12e <eoi>
ffff8000008100c5:	e8 e3 e9 ff ff       	call   ffff80000080eaad <disk_int_handler_c>
ffff8000008100ca:	48 cf                	iretq  

ffff8000008100cc <read_disk_asm>:
read_disk_asm():
ffff8000008100cc:	55                   	push   rbp
ffff8000008100cd:	48 89 e5             	mov    rbp,rsp
ffff8000008100d0:	66 ba f7 01          	mov    dx,0x1f7
ffff8000008100d4:	31 c9                	xor    ecx,ecx
ffff8000008100d6:	48 89 f8             	mov    rax,rdi
ffff8000008100d9:	48 89 f1             	mov    rcx,rsi
ffff8000008100dc:	48 89 d3             	mov    rbx,rdx
ffff8000008100df:	48 89 c6             	mov    rsi,rax
ffff8000008100e2:	66 ba f2 01          	mov    dx,0x1f2
ffff8000008100e6:	88 c8                	mov    al,cl
ffff8000008100e8:	ee                   	out    dx,al
ffff8000008100e9:	66 ba f3 01          	mov    dx,0x1f3
ffff8000008100ed:	89 f0                	mov    eax,esi
ffff8000008100ef:	ee                   	out    dx,al
ffff8000008100f0:	66 ff c2             	inc    dx
ffff8000008100f3:	c1 e8 08             	shr    eax,0x8
ffff8000008100f6:	ee                   	out    dx,al
ffff8000008100f7:	66 ff c2             	inc    dx
ffff8000008100fa:	c1 e8 08             	shr    eax,0x8
ffff8000008100fd:	ee                   	out    dx,al
ffff8000008100fe:	66 ff c2             	inc    dx
ffff800000810101:	66 c1 e8 08          	shr    ax,0x8
ffff800000810105:	24 0f                	and    al,0xf
ffff800000810107:	0c e0                	or     al,0xe0
ffff800000810109:	ee                   	out    dx,al
ffff80000081010a:	66 ff c2             	inc    dx
ffff80000081010d:	b0 20                	mov    al,0x20
ffff80000081010f:	ee                   	out    dx,al

ffff800000810110 <read_disk_asm.wait>:
read_disk_asm.wait():
ffff800000810110:	90                   	nop
ffff800000810111:	ec                   	in     al,dx
ffff800000810112:	24 88                	and    al,0x88
ffff800000810114:	3c 08                	cmp    al,0x8
ffff800000810116:	75 f8                	jne    ffff800000810110 <read_disk_asm.wait>
ffff800000810118:	66 89 d7             	mov    di,dx
ffff80000081011b:	48 c1 e1 08          	shl    rcx,0x8
ffff80000081011f:	66 ba f0 01          	mov    dx,0x1f0

ffff800000810123 <read_disk_asm.read>:
read_disk_asm.read():
ffff800000810123:	66 ed                	in     ax,dx
ffff800000810125:	66 89 03             	mov    WORD PTR [rbx],ax
ffff800000810128:	48 83 c3 02          	add    rbx,0x2
ffff80000081012c:	e2 f5                	loop   ffff800000810123 <read_disk_asm.read>
ffff80000081012e:	c9                   	leave  
ffff80000081012f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810134:	c3                   	ret    

ffff800000810135 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
ffff800000810135:	66 ba f1 01          	mov    dx,0x1f1
ffff800000810139:	48 31 c0             	xor    rax,rax
ffff80000081013c:	66 ed                	in     ax,dx
ffff80000081013e:	c9                   	leave  
ffff80000081013f:	c3                   	ret    

ffff800000810140 <write_disk_asm>:
write_disk_asm():
ffff800000810140:	55                   	push   rbp
ffff800000810141:	48 89 e5             	mov    rbp,rsp
ffff800000810144:	48 89 f8             	mov    rax,rdi
ffff800000810147:	48 89 f1             	mov    rcx,rsi
ffff80000081014a:	48 89 d3             	mov    rbx,rdx
ffff80000081014d:	50                   	push   rax
ffff80000081014e:	66 ba f2 01          	mov    dx,0x1f2
ffff800000810152:	88 c8                	mov    al,cl
ffff800000810154:	ee                   	out    dx,al
ffff800000810155:	58                   	pop    rax
ffff800000810156:	66 ba f3 01          	mov    dx,0x1f3
ffff80000081015a:	ee                   	out    dx,al
ffff80000081015b:	c1 e8 08             	shr    eax,0x8
ffff80000081015e:	66 ba f4 01          	mov    dx,0x1f4
ffff800000810162:	ee                   	out    dx,al
ffff800000810163:	c1 e8 08             	shr    eax,0x8
ffff800000810166:	66 ba f5 01          	mov    dx,0x1f5
ffff80000081016a:	ee                   	out    dx,al
ffff80000081016b:	c1 e8 08             	shr    eax,0x8
ffff80000081016e:	24 0f                	and    al,0xf
ffff800000810170:	0c e0                	or     al,0xe0
ffff800000810172:	66 ba f6 01          	mov    dx,0x1f6
ffff800000810176:	ee                   	out    dx,al
ffff800000810177:	66 ba f7 01          	mov    dx,0x1f7
ffff80000081017b:	b0 30                	mov    al,0x30
ffff80000081017d:	ee                   	out    dx,al

ffff80000081017e <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
ffff80000081017e:	90                   	nop
ffff80000081017f:	ec                   	in     al,dx
ffff800000810180:	24 88                	and    al,0x88
ffff800000810182:	3c 08                	cmp    al,0x8
ffff800000810184:	75 f8                	jne    ffff80000081017e <write_disk_asm.not_ready2>
ffff800000810186:	48 c1 e1 08          	shl    rcx,0x8
ffff80000081018a:	66 ba f0 01          	mov    dx,0x1f0

ffff80000081018e <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
ffff80000081018e:	66 8b 03             	mov    ax,WORD PTR [rbx]
ffff800000810191:	66 ef                	out    dx,ax
ffff800000810193:	83 c3 02             	add    ebx,0x2
ffff800000810196:	e2 f6                	loop   ffff80000081018e <write_disk_asm.go_on_write>
ffff800000810198:	c9                   	leave  
ffff800000810199:	c3                   	ret    

ffff80000081019a <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:12
#include "memory.h"
#include "proc.h"
#include "devman.h"

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
ffff80000081019a:	f3 0f 1e fa          	endbr64 
ffff80000081019e:	55                   	push   rbp
ffff80000081019f:	48 89 e5             	mov    rbp,rsp
ffff8000008101a2:	41 57                	push   r15
ffff8000008101a4:	53                   	push   rbx
ffff8000008101a5:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff8000008101ac:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008101ac <DISK1_FAT32_read_FAT_Entry+0x12>
ffff8000008101b3:	49 bb d4 28 01 00 00 	movabs r11,0x128d4
ffff8000008101ba:	00 00 00 
ffff8000008101bd:	4c 01 db             	add    rbx,r11
ffff8000008101c0:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
ffff8000008101c7:	89 b5 d4 fd ff ff    	mov    DWORD PTR [rbp-0x22c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:14
	unsigned int buf[128];
	memset(buf,0,512);
ffff8000008101cd:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff8000008101d4:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008101d9:	be 00 00 00 00       	mov    esi,0x0
ffff8000008101de:	48 89 c7             	mov    rdi,rax
ffff8000008101e1:	49 89 df             	mov    r15,rbx
ffff8000008101e4:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff8000008101eb:	ff ff ff 
ffff8000008101ee:	48 01 d8             	add    rax,rbx
ffff8000008101f1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:15
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + (fat_entry >> 7),1,(unsigned char *)buf);
ffff8000008101f3:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff8000008101fa:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008101fe:	89 c2                	mov    edx,eax
ffff800000810200:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff800000810206:	c1 e8 07             	shr    eax,0x7
ffff800000810209:	01 d0                	add    eax,edx
ffff80000081020b:	89 c2                	mov    edx,eax
ffff80000081020d:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000810214:	49 89 c0             	mov    r8,rax
ffff800000810217:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000081021c:	be 00 00 00 00       	mov    esi,0x0
ffff800000810221:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810226:	49 89 df             	mov    r15,rbx
ffff800000810229:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff800000810230:	ff ff ff 
ffff800000810233:	48 01 d8             	add    rax,rbx
ffff800000810236:	ff d0                	call   rax
ffff800000810238:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:16
    chk_result(r);
ffff80000081023b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081023e:	89 c7                	mov    edi,eax
ffff800000810240:	49 89 df             	mov    r15,rbx
ffff800000810243:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff80000081024a:	ff ff ff 
ffff80000081024d:	48 01 d8             	add    rax,rbx
ffff800000810250:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%#010x\n",fat_entry,buf[fat_entry & 0x7f]);
ffff800000810252:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff800000810258:	83 e0 7f             	and    eax,0x7f
ffff80000081025b:	89 c0                	mov    eax,eax
ffff80000081025d:	8b 94 85 e0 fd ff ff 	mov    edx,DWORD PTR [rbp+rax*4-0x220]
ffff800000810264:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000081026a:	89 c6                	mov    esi,eax
ffff80000081026c:	48 b8 d8 d8 ff ff ff 	movabs rax,0xffffffffffffd8d8
ffff800000810273:	ff ff ff 
ffff800000810276:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081027a:	48 89 c7             	mov    rdi,rax
ffff80000081027d:	49 89 df             	mov    r15,rbx
ffff800000810280:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810285:	48 b9 5c ed fd ff ff 	movabs rcx,0xfffffffffffded5c
ffff80000081028c:	ff ff ff 
ffff80000081028f:	48 01 d9             	add    rcx,rbx
ffff800000810292:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:18
	return buf[fat_entry & 0x7f] & 0x0fffffff;
ffff800000810294:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000081029a:	83 e0 7f             	and    eax,0x7f
ffff80000081029d:	89 c0                	mov    eax,eax
ffff80000081029f:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff8000008102a6:	25 ff ff ff 0f       	and    eax,0xfffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
}
ffff8000008102ab:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff8000008102b2:	5b                   	pop    rbx
ffff8000008102b3:	41 5f                	pop    r15
ffff8000008102b5:	5d                   	pop    rbp
ffff8000008102b6:	c3                   	ret    

ffff8000008102b7 <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:23


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
ffff8000008102b7:	f3 0f 1e fa          	endbr64 
ffff8000008102bb:	55                   	push   rbp
ffff8000008102bc:	48 89 e5             	mov    rbp,rsp
ffff8000008102bf:	41 57                	push   r15
ffff8000008102c1:	53                   	push   rbx
ffff8000008102c2:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff8000008102c9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008102c9 <DISK1_FAT32_write_FAT_Entry+0x12>
ffff8000008102d0:	49 bb b7 27 01 00 00 	movabs r11,0x127b7
ffff8000008102d7:	00 00 00 
ffff8000008102da:	4c 01 db             	add    rbx,r11
ffff8000008102dd:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
ffff8000008102e4:	89 b5 d4 fd ff ff    	mov    DWORD PTR [rbp-0x22c],esi
ffff8000008102ea:	89 95 d0 fd ff ff    	mov    DWORD PTR [rbp-0x230],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:27
	unsigned int buf[128];
	int i;

	memset(buf,0,512);
ffff8000008102f0:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff8000008102f7:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008102fc:	be 00 00 00 00       	mov    esi,0x0
ffff800000810301:	48 89 c7             	mov    rdi,rax
ffff800000810304:	49 89 df             	mov    r15,rbx
ffff800000810307:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000081030e:	ff ff ff 
ffff800000810311:	48 01 d8             	add    rax,rbx
ffff800000810314:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:28
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + (fat_entry >> 7),1,(unsigned char *)buf);
ffff800000810316:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000081031d:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000810321:	89 c2                	mov    edx,eax
ffff800000810323:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff800000810329:	c1 e8 07             	shr    eax,0x7
ffff80000081032c:	01 d0                	add    eax,edx
ffff80000081032e:	89 c2                	mov    edx,eax
ffff800000810330:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000810337:	49 89 c0             	mov    r8,rax
ffff80000081033a:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000081033f:	be 00 00 00 00       	mov    esi,0x0
ffff800000810344:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810349:	49 89 df             	mov    r15,rbx
ffff80000081034c:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff800000810353:	ff ff ff 
ffff800000810356:	48 01 d8             	add    rax,rbx
ffff800000810359:	ff d0                	call   rax
ffff80000081035b:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:29
    chk_result(r);
ffff80000081035e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000810361:	89 c7                	mov    edi,eax
ffff800000810363:	49 89 df             	mov    r15,rbx
ffff800000810366:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff80000081036d:	ff ff ff 
ffff800000810370:	48 01 d8             	add    rax,rbx
ffff800000810373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
ffff800000810375:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000081037b:	83 e0 7f             	and    eax,0x7f
ffff80000081037e:	89 c0                	mov    eax,eax
ffff800000810380:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff800000810387:	25 00 00 00 f0       	and    eax,0xf0000000
ffff80000081038c:	89 c6                	mov    esi,eax
ffff80000081038e:	8b 85 d0 fd ff ff    	mov    eax,DWORD PTR [rbp-0x230]
ffff800000810394:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff800000810399:	89 c1                	mov    ecx,eax
ffff80000081039b:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff8000008103a1:	83 e0 7f             	and    eax,0x7f
ffff8000008103a4:	89 c2                	mov    edx,eax
ffff8000008103a6:	89 f0                	mov    eax,esi
ffff8000008103a8:	09 c8                	or     eax,ecx
ffff8000008103aa:	89 d2                	mov    edx,edx
ffff8000008103ac:	89 84 95 e0 fd ff ff 	mov    DWORD PTR [rbp+rdx*4-0x220],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32

	for(i = 0;i < fsbi->NumFATs;i++){
ffff8000008103b3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008103ba:	eb 7b                	jmp    ffff800000810437 <DISK1_FAT32_write_FAT_Entry+0x180>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33 (discriminator 3)
        int r1=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7),1,(unsigned char *)buf);
ffff8000008103bc:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff8000008103c3:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008103c7:	89 c1                	mov    ecx,eax
ffff8000008103c9:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff8000008103d0:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008103d4:	89 c2                	mov    edx,eax
ffff8000008103d6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008103d9:	48 98                	cdqe   
ffff8000008103db:	0f af c2             	imul   eax,edx
ffff8000008103de:	8d 14 01             	lea    edx,[rcx+rax*1]
ffff8000008103e1:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff8000008103e7:	c1 e8 07             	shr    eax,0x7
ffff8000008103ea:	01 d0                	add    eax,edx
ffff8000008103ec:	89 c2                	mov    edx,eax
ffff8000008103ee:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff8000008103f5:	49 89 c0             	mov    r8,rax
ffff8000008103f8:	b9 01 00 00 00       	mov    ecx,0x1
ffff8000008103fd:	be 01 00 00 00       	mov    esi,0x1
ffff800000810402:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810407:	49 89 df             	mov    r15,rbx
ffff80000081040a:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff800000810411:	ff ff ff 
ffff800000810414:	48 01 d8             	add    rax,rbx
ffff800000810417:	ff d0                	call   rax
ffff800000810419:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 3)
        chk_result(r1);
ffff80000081041c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081041f:	89 c7                	mov    edi,eax
ffff800000810421:	49 89 df             	mov    r15,rbx
ffff800000810424:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff80000081042b:	ff ff ff 
ffff80000081042e:	48 01 d8             	add    rax,rbx
ffff800000810431:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
ffff800000810433:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32 (discriminator 1)
ffff800000810437:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081043a:	48 63 d0             	movsxd rdx,eax
ffff80000081043d:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff800000810444:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810448:	48 39 c2             	cmp    rdx,rax
ffff80000081044b:	0f 82 6b ff ff ff    	jb     ffff8000008103bc <DISK1_FAT32_write_FAT_Entry+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:36
    }
	return 1;
ffff800000810451:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:37
}
ffff800000810456:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff80000081045d:	5b                   	pop    rbx
ffff80000081045e:	41 5f                	pop    r15
ffff800000810460:	5d                   	pop    rbp
ffff800000810461:	c3                   	ret    

ffff800000810462 <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:41


long FAT32_open(struct index_node * inode,struct file * filp)
{
ffff800000810462:	f3 0f 1e fa          	endbr64 
ffff800000810466:	55                   	push   rbp
ffff800000810467:	48 89 e5             	mov    rbp,rsp
ffff80000081046a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081046a <FAT32_open+0x8>
ffff800000810471:	49 bb 16 26 01 00 00 	movabs r11,0x12616
ffff800000810478:	00 00 00 
ffff80000081047b:	4c 01 d8             	add    rax,r11
ffff80000081047e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810482:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:42
	return 1;
ffff800000810486:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:43
}
ffff80000081048b:	5d                   	pop    rbp
ffff80000081048c:	c3                   	ret    

ffff80000081048d <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:47


long FAT32_close(struct index_node * inode,struct file * filp)
{
ffff80000081048d:	f3 0f 1e fa          	endbr64 
ffff800000810491:	55                   	push   rbp
ffff800000810492:	48 89 e5             	mov    rbp,rsp
ffff800000810495:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810495 <FAT32_close+0x8>
ffff80000081049c:	49 bb eb 25 01 00 00 	movabs r11,0x125eb
ffff8000008104a3:	00 00 00 
ffff8000008104a6:	4c 01 d8             	add    rax,r11
ffff8000008104a9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008104ad:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:48
	return 1;
ffff8000008104b1:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:49
}
ffff8000008104b6:	5d                   	pop    rbp
ffff8000008104b7:	c3                   	ret    

ffff8000008104b8 <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:53


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff8000008104b8:	f3 0f 1e fa          	endbr64 
ffff8000008104bc:	55                   	push   rbp
ffff8000008104bd:	48 89 e5             	mov    rbp,rsp
ffff8000008104c0:	41 57                	push   r15
ffff8000008104c2:	53                   	push   rbx
ffff8000008104c3:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff8000008104c7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008104c7 <FAT32_read+0xf>
ffff8000008104ce:	49 bb b9 25 01 00 00 	movabs r11,0x125b9
ffff8000008104d5:	00 00 00 
ffff8000008104d8:	4c 01 db             	add    rbx,r11
ffff8000008104db:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff8000008104df:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff8000008104e3:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffff8000008104ea:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:54
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff8000008104f1:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008104f5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008104f9:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008104fd:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000810501:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:55
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff800000810505:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810509:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081050d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810511:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810515:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810519:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:57

	unsigned long cluster = finode->first_cluster;
ffff80000081051d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810521:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810524:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:58
	unsigned long sector = 0;
ffff800000810528:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000081052f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:59
	int i,length = 0;
ffff800000810530:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60
	long retval = 0;
ffff800000810537:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000081053e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	int index = *position / fsbi->bytes_per_cluster;
ffff80000081053f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810546:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810549:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000081054d:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff800000810551:	48 99                	cqo    
ffff800000810553:	48 f7 fe             	idiv   rsi
ffff800000810556:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	long offset = *position % fsbi->bytes_per_cluster;
ffff800000810559:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810560:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810563:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000810567:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081056b:	48 99                	cqo    
ffff80000081056d:	48 f7 f9             	idiv   rcx
ffff800000810570:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:63
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000810574:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810578:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081057c:	be 00 00 00 00       	mov    esi,0x0
ffff800000810581:	48 89 c7             	mov    rdi,rax
ffff800000810584:	49 89 df             	mov    r15,rbx
ffff800000810587:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081058c:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000810593:	ff ff ff 
ffff800000810596:	48 01 da             	add    rdx,rbx
ffff800000810599:	ff d2                	call   rdx
ffff80000081059b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65

	if(!cluster)
ffff80000081059f:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff8000008105a4:	75 0c                	jne    ffff8000008105b2 <FAT32_read+0xfa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:66
		return -EFAULT;
ffff8000008105a6:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff8000008105ad:	e9 8c 02 00 00       	jmp    ffff80000081083e <FAT32_read+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67
	for(i = 0;i < index;i++)
ffff8000008105b2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008105b9:	eb 2b                	jmp    ffff8000008105e6 <FAT32_read+0x12e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff8000008105bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008105bf:	89 c2                	mov    edx,eax
ffff8000008105c1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008105c5:	89 d6                	mov    esi,edx
ffff8000008105c7:	48 89 c7             	mov    rdi,rax
ffff8000008105ca:	49 89 df             	mov    r15,rbx
ffff8000008105cd:	48 b8 1a d7 fe ff ff 	movabs rax,0xfffffffffffed71a
ffff8000008105d4:	ff ff ff 
ffff8000008105d7:	48 01 d8             	add    rax,rbx
ffff8000008105da:	ff d0                	call   rax
ffff8000008105dc:	89 c0                	mov    eax,eax
ffff8000008105de:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67 (discriminator 3)
	for(i = 0;i < index;i++)
ffff8000008105e2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67 (discriminator 1)
ffff8000008105e6:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008105e9:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008105ec:	7c cd                	jl     ffff8000008105bb <FAT32_read+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70

	if(*position + count > filp->dentry->dir_inode->file_size)
ffff8000008105ee:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008105f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008105f8:	48 89 c2             	mov    rdx,rax
ffff8000008105fb:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810602:	48 01 c2             	add    rdx,rax
ffff800000810605:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810609:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081060d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810611:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810614:	48 39 c2             	cmp    rdx,rax
ffff800000810617:	76 35                	jbe    ffff80000081064e <FAT32_read+0x196>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:71
		index = count = filp->dentry->dir_inode->file_size - *position;
ffff800000810619:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081061d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810621:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810625:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810628:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000081062f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810632:	48 89 c1             	mov    rcx,rax
ffff800000810635:	48 89 d0             	mov    rax,rdx
ffff800000810638:	48 29 c8             	sub    rax,rcx
ffff80000081063b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff800000810642:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810649:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000081064c:	eb 0a                	jmp    ffff800000810658 <FAT32_read+0x1a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73
	else
		index = count;
ffff80000081064e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810655:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:79

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
ffff800000810658:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081065c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810660:	89 c2                	mov    edx,eax
ffff800000810662:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810666:	be 00 00 00 00       	mov    esi,0x0
ffff80000081066b:	48 89 c7             	mov    rdi,rax
ffff80000081066e:	49 89 df             	mov    r15,rbx
ffff800000810671:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000810678:	ff ff ff 
ffff80000081067b:	48 01 d8             	add    rax,rbx
ffff80000081067e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:80
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000810680:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810684:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000810688:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081068c:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000810690:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810694:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810698:	48 0f af c2          	imul   rax,rdx
ffff80000081069c:	48 01 c8             	add    rax,rcx
ffff80000081069f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:81
        int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
ffff8000008106a3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008106a7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008106ab:	89 c1                	mov    ecx,eax
ffff8000008106ad:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008106b1:	89 c2                	mov    edx,eax
ffff8000008106b3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008106b7:	49 89 c0             	mov    r8,rax
ffff8000008106ba:	be 00 00 00 00       	mov    esi,0x0
ffff8000008106bf:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008106c4:	49 89 df             	mov    r15,rbx
ffff8000008106c7:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff8000008106ce:	ff ff ff 
ffff8000008106d1:	48 01 d8             	add    rax,rbx
ffff8000008106d4:	ff d0                	call   rax
ffff8000008106d6:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:82
		if(!chk_result(r))
ffff8000008106d9:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008106dc:	89 c7                	mov    edi,eax
ffff8000008106de:	49 89 df             	mov    r15,rbx
ffff8000008106e1:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff8000008106e8:	ff ff ff 
ffff8000008106eb:	48 01 d8             	add    rax,rbx
ffff8000008106ee:	ff d0                	call   rax
ffff8000008106f0:	85 c0                	test   eax,eax
ffff8000008106f2:	75 35                	jne    ffff800000810729 <FAT32_read+0x271>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:84
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
ffff8000008106f4:	48 b8 08 d9 ff ff ff 	movabs rax,0xffffffffffffd908
ffff8000008106fb:	ff ff ff 
ffff8000008106fe:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810702:	48 89 c7             	mov    rdi,rax
ffff800000810705:	49 89 df             	mov    r15,rbx
ffff800000810708:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081070d:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff800000810714:	ff ff ff 
ffff800000810717:	48 01 da             	add    rdx,rbx
ffff80000081071a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:85
			retval = -EIO;
ffff80000081071c:	48 c7 45 d8 e3 ff ff 	mov    QWORD PTR [rbp-0x28],0xffffffffffffffe3
ffff800000810723:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86
			break;
ffff800000810724:	e9 e7 00 00 00       	jmp    ffff800000810810 <FAT32_read+0x358>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:89
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff800000810729:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000081072c:	48 63 d0             	movsxd rdx,eax
ffff80000081072f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810733:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810737:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff80000081073b:	48 39 c2             	cmp    rdx,rax
ffff80000081073e:	48 0f 4e c2          	cmovle rax,rdx
ffff800000810742:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:91

		if((unsigned long)buf < MAX_TASKS)
ffff800000810745:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000810749:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000081074d:	77 2c                	ja     ffff80000081077b <FAT32_read+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:92
			memcpy(buffer + offset,buf,length);
ffff80000081074f:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000810752:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff800000810756:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000081075a:	48 01 c1             	add    rcx,rax
ffff80000081075d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000810761:	48 89 c6             	mov    rsi,rax
ffff800000810764:	48 89 cf             	mov    rdi,rcx
ffff800000810767:	49 89 df             	mov    r15,rbx
ffff80000081076a:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff800000810771:	ff ff ff 
ffff800000810774:	48 01 d8             	add    rax,rbx
ffff800000810777:	ff d0                	call   rax
ffff800000810779:	eb 2a                	jmp    ffff8000008107a5 <FAT32_read+0x2ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:94
		else
			memcpy(buffer + offset,buf,length);
ffff80000081077b:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000081077e:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff800000810782:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810786:	48 01 c1             	add    rcx,rax
ffff800000810789:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000081078d:	48 89 c6             	mov    rsi,rax
ffff800000810790:	48 89 cf             	mov    rdi,rcx
ffff800000810793:	49 89 df             	mov    r15,rbx
ffff800000810796:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff80000081079d:	ff ff ff 
ffff8000008107a0:	48 01 d8             	add    rax,rbx
ffff8000008107a3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:96

		index -= length;
ffff8000008107a5:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff8000008107a8:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:97
		buf += length;
ffff8000008107ab:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff8000008107ae:	48 98                	cdqe   
ffff8000008107b0:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98
		offset -= offset;
ffff8000008107b4:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008107bb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:99
		*position += length;
ffff8000008107bc:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008107c3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008107c6:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff8000008107c9:	48 98                	cdqe   
ffff8000008107cb:	48 01 c2             	add    rdx,rax
ffff8000008107ce:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008107d5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
ffff8000008107d8:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff8000008107dc:	74 32                	je     ffff800000810810 <FAT32_read+0x358>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100 (discriminator 1)
ffff8000008107de:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008107e2:	89 c2                	mov    edx,eax
ffff8000008107e4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008107e8:	89 d6                	mov    esi,edx
ffff8000008107ea:	48 89 c7             	mov    rdi,rax
ffff8000008107ed:	49 89 df             	mov    r15,rbx
ffff8000008107f0:	48 b8 1a d7 fe ff ff 	movabs rax,0xfffffffffffed71a
ffff8000008107f7:	ff ff ff 
ffff8000008107fa:	48 01 d8             	add    rax,rbx
ffff8000008107fd:	ff d0                	call   rax
ffff8000008107ff:	89 c0                	mov    eax,eax
ffff800000810801:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000810805:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000081080a:	0f 85 48 fe ff ff    	jne    ffff800000810658 <FAT32_read+0x1a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102

    kmfree(buffer);
ffff800000810810:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810814:	48 89 c7             	mov    rdi,rax
ffff800000810817:	49 89 df             	mov    r15,rbx
ffff80000081081a:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000810821:	ff ff ff 
ffff800000810824:	48 01 d8             	add    rax,rbx
ffff800000810827:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:103
	if(!index)
ffff800000810829:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000081082d:	75 0b                	jne    ffff80000081083a <FAT32_read+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104
		retval = count;
ffff80000081082f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810836:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
	return retval;
ffff80000081083a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
}
ffff80000081083e:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff800000810842:	5b                   	pop    rbx
ffff800000810843:	41 5f                	pop    r15
ffff800000810845:	5d                   	pop    rbp
ffff800000810846:	c3                   	ret    

ffff800000810847 <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:110


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
ffff800000810847:	f3 0f 1e fa          	endbr64 
ffff80000081084b:	55                   	push   rbp
ffff80000081084c:	48 89 e5             	mov    rbp,rsp
ffff80000081084f:	41 57                	push   r15
ffff800000810851:	53                   	push   rbx
ffff800000810852:	48 81 ec 30 02 00 00 	sub    rsp,0x230
ffff800000810859:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810859 <FAT32_find_available_cluster+0x12>
ffff800000810860:	49 bb 27 22 01 00 00 	movabs r11,0x12227
ffff800000810867:	00 00 00 
ffff80000081086a:	4c 01 db             	add    rbx,r11
ffff80000081086d:	48 89 bd c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:113
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
ffff800000810874:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffff80000081087b:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000081087f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
ffff800000810883:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000081088a:	e9 a5 00 00 00       	jmp    ffff800000810934 <FAT32_find_available_cluster+0xed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120
	{
		memset(buf,0,512);
ffff80000081088f:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
ffff800000810896:	ba 00 02 00 00       	mov    edx,0x200
ffff80000081089b:	be 00 00 00 00       	mov    esi,0x0
ffff8000008108a0:	48 89 c7             	mov    rdi,rax
ffff8000008108a3:	49 89 df             	mov    r15,rbx
ffff8000008108a6:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff8000008108ad:	ff ff ff 
ffff8000008108b0:	48 01 d8             	add    rax,rbx
ffff8000008108b3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:121
		int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + i,1,(unsigned char *)buf);
ffff8000008108b5:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffff8000008108bc:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008108c0:	89 c2                	mov    edx,eax
ffff8000008108c2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008108c5:	01 d0                	add    eax,edx
ffff8000008108c7:	89 c2                	mov    edx,eax
ffff8000008108c9:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
ffff8000008108d0:	49 89 c0             	mov    r8,rax
ffff8000008108d3:	b9 01 00 00 00       	mov    ecx,0x1
ffff8000008108d8:	be 00 00 00 00       	mov    esi,0x0
ffff8000008108dd:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008108e2:	49 89 df             	mov    r15,rbx
ffff8000008108e5:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff8000008108ec:	ff ff ff 
ffff8000008108ef:	48 01 d8             	add    rax,rbx
ffff8000008108f2:	ff d0                	call   rax
ffff8000008108f4:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123

		for(j = 0;j < 128;j++)
ffff8000008108f7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008108fe:	eb 2a                	jmp    ffff80000081092a <FAT32_find_available_cluster+0xe3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125
		{
			if((buf[j] & 0x0fffffff) == 0)
ffff800000810900:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000810903:	48 98                	cdqe   
ffff800000810905:	8b 84 85 d0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x230]
ffff80000081090c:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff800000810911:	85 c0                	test   eax,eax
ffff800000810913:	75 11                	jne    ffff800000810926 <FAT32_find_available_cluster+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:126
				return (i << 7) + j;
ffff800000810915:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810918:	c1 e0 07             	shl    eax,0x7
ffff80000081091b:	89 c2                	mov    edx,eax
ffff80000081091d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000810920:	01 d0                	add    eax,edx
ffff800000810922:	48 98                	cdqe   
ffff800000810924:	eb 22                	jmp    ffff800000810948 <FAT32_find_available_cluster+0x101>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123 (discriminator 2)
		for(j = 0;j < 128;j++)
ffff800000810926:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123 (discriminator 1)
ffff80000081092a:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
ffff80000081092e:	7e d0                	jle    ffff800000810900 <FAT32_find_available_cluster+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
ffff800000810930:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118 (discriminator 1)
ffff800000810934:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810937:	48 98                	cdqe   
ffff800000810939:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000081093d:	0f 87 4c ff ff ff    	ja     ffff80000081088f <FAT32_find_available_cluster+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:129
		}
	}
	return 0;
ffff800000810943:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:130 (discriminator 1)
}
ffff800000810948:	48 81 c4 30 02 00 00 	add    rsp,0x230
ffff80000081094f:	5b                   	pop    rbx
ffff800000810950:	41 5f                	pop    r15
ffff800000810952:	5d                   	pop    rbp
ffff800000810953:	c3                   	ret    

ffff800000810954 <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:134


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000810954:	f3 0f 1e fa          	endbr64 
ffff800000810958:	55                   	push   rbp
ffff800000810959:	48 89 e5             	mov    rbp,rsp
ffff80000081095c:	41 57                	push   r15
ffff80000081095e:	53                   	push   rbx
ffff80000081095f:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff800000810966:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810966 <FAT32_write+0x12>
ffff80000081096d:	49 bb 1a 21 01 00 00 	movabs r11,0x1211a
ffff800000810974:	00 00 00 
ffff800000810977:	4c 01 db             	add    rbx,r11
ffff80000081097a:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
ffff800000810981:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
ffff800000810988:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
ffff80000081098f:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:135
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff800000810996:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000081099d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008109a1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008109a5:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008109a9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff8000008109ad:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008109b4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008109b8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008109bc:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008109c0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008109c4:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:138

	unsigned long cluster = finode->first_cluster;
ffff8000008109c8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008109cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008109cf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:139
	unsigned long next_cluster = 0;
ffff8000008109d3:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff8000008109da:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140
	unsigned long sector = 0;
ffff8000008109db:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008109e2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	int i,length = 0;
ffff8000008109e3:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	long retval = 0;
ffff8000008109ea:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008109f1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:143
	long flags = 0;
ffff8000008109f2:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008109f9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144
	int index = *position / fsbi->bytes_per_cluster;
ffff8000008109fa:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810a01:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810a04:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810a08:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff800000810a0c:	48 99                	cqo    
ffff800000810a0e:	48 f7 fe             	idiv   rsi
ffff800000810a11:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	long offset = *position % fsbi->bytes_per_cluster;
ffff800000810a14:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810a1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810a1e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810a22:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff800000810a26:	48 99                	cqo    
ffff800000810a28:	48 f7 f9             	idiv   rcx
ffff800000810a2b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000810a2f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810a33:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810a37:	be 00 00 00 00       	mov    esi,0x0
ffff800000810a3c:	48 89 c7             	mov    rdi,rax
ffff800000810a3f:	49 89 df             	mov    r15,rbx
ffff800000810a42:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810a47:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000810a4e:	ff ff ff 
ffff800000810a51:	48 01 da             	add    rdx,rbx
ffff800000810a54:	ff d2                	call   rdx
ffff800000810a56:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:148

	if(!cluster)
ffff800000810a5a:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000810a5f:	75 27                	jne    ffff800000810a88 <FAT32_write+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:150
	{
		cluster = FAT32_find_available_cluster(fsbi);
ffff800000810a61:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810a65:	48 89 c7             	mov    rdi,rax
ffff800000810a68:	49 89 df             	mov    r15,rbx
ffff800000810a6b:	48 b8 c7 dd fe ff ff 	movabs rax,0xfffffffffffeddc7
ffff800000810a72:	ff ff ff 
ffff800000810a75:	48 01 d8             	add    rax,rbx
ffff800000810a78:	ff d0                	call   rax
ffff800000810a7a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:151
		flags = 1;
ffff800000810a7e:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff800000810a85:	00 
ffff800000810a86:	eb 3c                	jmp    ffff800000810ac4 <FAT32_write+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154
	}
	else
		for(i = 0;i < index;i++)
ffff800000810a88:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000810a8f:	eb 2b                	jmp    ffff800000810abc <FAT32_write+0x168>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810a91:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810a95:	89 c2                	mov    edx,eax
ffff800000810a97:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810a9b:	89 d6                	mov    esi,edx
ffff800000810a9d:	48 89 c7             	mov    rdi,rax
ffff800000810aa0:	49 89 df             	mov    r15,rbx
ffff800000810aa3:	48 b8 1a d7 fe ff ff 	movabs rax,0xfffffffffffed71a
ffff800000810aaa:	ff ff ff 
ffff800000810aad:	48 01 d8             	add    rax,rbx
ffff800000810ab0:	ff d0                	call   rax
ffff800000810ab2:	89 c0                	mov    eax,eax
ffff800000810ab4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154 (discriminator 3)
		for(i = 0;i < index;i++)
ffff800000810ab8:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154 (discriminator 1)
ffff800000810abc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810abf:	3b 45 c4             	cmp    eax,DWORD PTR [rbp-0x3c]
ffff800000810ac2:	7c cd                	jl     ffff800000810a91 <FAT32_write+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:157

	if(!cluster)
ffff800000810ac4:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000810ac9:	75 25                	jne    ffff800000810af0 <FAT32_write+0x19c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:159
	{
        kmfree(buffer);
ffff800000810acb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810acf:	48 89 c7             	mov    rdi,rax
ffff800000810ad2:	49 89 df             	mov    r15,rbx
ffff800000810ad5:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000810adc:	ff ff ff 
ffff800000810adf:	48 01 d8             	add    rax,rbx
ffff800000810ae2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160
		return -ENOSPC;
ffff800000810ae4:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff800000810aeb:	e9 1d 04 00 00       	jmp    ffff800000810f0d <FAT32_write+0x5b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:163
	}

	if(flags)
ffff800000810af0:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000810af5:	74 60                	je     ffff800000810b57 <FAT32_write+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:165
	{
		finode->first_cluster = cluster;
ffff800000810af7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810afb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000810aff:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:166
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff800000810b02:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810b09:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810b0d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810b11:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810b15:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000810b19:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000810b1d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810b24:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810b28:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810b2c:	48 89 c7             	mov    rdi,rax
ffff800000810b2f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:167
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
ffff800000810b31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810b35:	89 c1                	mov    ecx,eax
ffff800000810b37:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810b3b:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff800000810b40:	89 ce                	mov    esi,ecx
ffff800000810b42:	48 89 c7             	mov    rdi,rax
ffff800000810b45:	49 89 df             	mov    r15,rbx
ffff800000810b48:	48 b8 37 d8 fe ff ff 	movabs rax,0xfffffffffffed837
ffff800000810b4f:	ff ff ff 
ffff800000810b52:	48 01 d8             	add    rax,rbx
ffff800000810b55:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:170
	}

	index = count;
ffff800000810b57:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000810b5e:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:174

	do
	{
		if(!flags)
ffff800000810b61:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000810b66:	0f 85 d1 00 00 00    	jne    ffff800000810c3d <FAT32_write+0x2e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:176
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
ffff800000810b6c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810b70:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810b74:	89 c2                	mov    edx,eax
ffff800000810b76:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b7a:	be 00 00 00 00       	mov    esi,0x0
ffff800000810b7f:	48 89 c7             	mov    rdi,rax
ffff800000810b82:	49 89 df             	mov    r15,rbx
ffff800000810b85:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000810b8c:	ff ff ff 
ffff800000810b8f:	48 01 d8             	add    rax,rbx
ffff800000810b92:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:177
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000810b94:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810b98:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000810b9c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810ba0:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000810ba4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810ba8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810bac:	48 0f af c2          	imul   rax,rdx
ffff800000810bb0:	48 01 c8             	add    rax,rcx
ffff800000810bb3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:178
            int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
ffff800000810bb7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810bbb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810bbf:	89 c1                	mov    ecx,eax
ffff800000810bc1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810bc5:	89 c2                	mov    edx,eax
ffff800000810bc7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810bcb:	49 89 c0             	mov    r8,rax
ffff800000810bce:	be 00 00 00 00       	mov    esi,0x0
ffff800000810bd3:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810bd8:	49 89 df             	mov    r15,rbx
ffff800000810bdb:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff800000810be2:	ff ff ff 
ffff800000810be5:	48 01 d8             	add    rax,rbx
ffff800000810be8:	ff d0                	call   rax
ffff800000810bea:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:180

			if(!chk_result(r))
ffff800000810bed:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff800000810bf0:	89 c7                	mov    edi,eax
ffff800000810bf2:	49 89 df             	mov    r15,rbx
ffff800000810bf5:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff800000810bfc:	ff ff ff 
ffff800000810bff:	48 01 d8             	add    rax,rbx
ffff800000810c02:	ff d0                	call   rax
ffff800000810c04:	85 c0                	test   eax,eax
ffff800000810c06:	75 35                	jne    ffff800000810c3d <FAT32_write+0x2e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:182
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
ffff800000810c08:	48 b8 38 d9 ff ff ff 	movabs rax,0xffffffffffffd938
ffff800000810c0f:	ff ff ff 
ffff800000810c12:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810c16:	48 89 c7             	mov    rdi,rax
ffff800000810c19:	49 89 df             	mov    r15,rbx
ffff800000810c1c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810c21:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff800000810c28:	ff ff ff 
ffff800000810c2b:	48 01 da             	add    rdx,rbx
ffff800000810c2e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
				retval = -EIO;
ffff800000810c30:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff800000810c37:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:184
				break;
ffff800000810c38:	e9 33 02 00 00       	jmp    ffff800000810e70 <FAT32_write+0x51c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:188
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff800000810c3d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000810c40:	48 63 d0             	movsxd rdx,eax
ffff800000810c43:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810c47:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810c4b:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffff800000810c4f:	48 39 c2             	cmp    rdx,rax
ffff800000810c52:	48 0f 4e c2          	cmovle rax,rdx
ffff800000810c56:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:190

		if((unsigned long)buf < MAX_TASKS)
ffff800000810c59:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810c60:	48 83 f8 1f          	cmp    rax,0x1f
ffff800000810c64:	77 2f                	ja     ffff800000810c95 <FAT32_write+0x341>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:191
			memcpy(buf,buffer + offset,length);
ffff800000810c66:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000810c69:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff800000810c6d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c71:	48 01 c1             	add    rcx,rax
ffff800000810c74:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810c7b:	48 89 ce             	mov    rsi,rcx
ffff800000810c7e:	48 89 c7             	mov    rdi,rax
ffff800000810c81:	49 89 df             	mov    r15,rbx
ffff800000810c84:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff800000810c8b:	ff ff ff 
ffff800000810c8e:	48 01 d8             	add    rax,rbx
ffff800000810c91:	ff d0                	call   rax
ffff800000810c93:	eb 2d                	jmp    ffff800000810cc2 <FAT32_write+0x36e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:193
		else
			memcpy(buf,buffer + offset,length);
ffff800000810c95:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000810c98:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff800000810c9c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810ca0:	48 01 c1             	add    rcx,rax
ffff800000810ca3:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810caa:	48 89 ce             	mov    rsi,rcx
ffff800000810cad:	48 89 c7             	mov    rdi,rax
ffff800000810cb0:	49 89 df             	mov    r15,rbx
ffff800000810cb3:	48 b8 45 11 ff ff ff 	movabs rax,0xffffffffffff1145
ffff800000810cba:	ff ff ff 
ffff800000810cbd:	48 01 d8             	add    rax,rbx
ffff800000810cc0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:195

		int r=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
ffff800000810cc2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810cc6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810cca:	89 c1                	mov    ecx,eax
ffff800000810ccc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810cd0:	89 c2                	mov    edx,eax
ffff800000810cd2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810cd6:	49 89 c0             	mov    r8,rax
ffff800000810cd9:	be 01 00 00 00       	mov    esi,0x1
ffff800000810cde:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810ce3:	49 89 df             	mov    r15,rbx
ffff800000810ce6:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff800000810ced:	ff ff ff 
ffff800000810cf0:	48 01 d8             	add    rax,rbx
ffff800000810cf3:	ff d0                	call   rax
ffff800000810cf5:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:196
        if(!chk_result(r))
ffff800000810cf8:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
ffff800000810cfb:	89 c7                	mov    edi,eax
ffff800000810cfd:	49 89 df             	mov    r15,rbx
ffff800000810d00:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff800000810d07:	ff ff ff 
ffff800000810d0a:	48 01 d8             	add    rax,rbx
ffff800000810d0d:	ff d0                	call   rax
ffff800000810d0f:	85 c0                	test   eax,eax
ffff800000810d11:	75 35                	jne    ffff800000810d48 <FAT32_write+0x3f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
ffff800000810d13:	48 b8 68 d9 ff ff ff 	movabs rax,0xffffffffffffd968
ffff800000810d1a:	ff ff ff 
ffff800000810d1d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810d21:	48 89 c7             	mov    rdi,rax
ffff800000810d24:	49 89 df             	mov    r15,rbx
ffff800000810d27:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810d2c:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff800000810d33:	ff ff ff 
ffff800000810d36:	48 01 da             	add    rdx,rbx
ffff800000810d39:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:199
			retval = -EIO;
ffff800000810d3b:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff800000810d42:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:200
			break;
ffff800000810d43:	e9 28 01 00 00       	jmp    ffff800000810e70 <FAT32_write+0x51c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
		}

		index -= length;
ffff800000810d48:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000810d4b:	29 45 c4             	sub    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:204
		buf += length;
ffff800000810d4e:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000810d51:	48 98                	cdqe   
ffff800000810d53:	48 01 85 70 ff ff ff 	add    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:205
		offset -= offset;
ffff800000810d5a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000810d61:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:206
		*position += length;
ffff800000810d62:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810d69:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810d6c:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000810d6f:	48 98                	cdqe   
ffff800000810d71:	48 01 c2             	add    rdx,rax
ffff800000810d74:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810d7b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:208

		if(index)
ffff800000810d7e:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000810d82:	0f 84 e7 00 00 00    	je     ffff800000810e6f <FAT32_write+0x51b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:209
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810d88:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810d8c:	89 c2                	mov    edx,eax
ffff800000810d8e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810d92:	89 d6                	mov    esi,edx
ffff800000810d94:	48 89 c7             	mov    rdi,rax
ffff800000810d97:	49 89 df             	mov    r15,rbx
ffff800000810d9a:	48 b8 1a d7 fe ff ff 	movabs rax,0xfffffffffffed71a
ffff800000810da1:	ff ff ff 
ffff800000810da4:	48 01 d8             	add    rax,rbx
ffff800000810da7:	ff d0                	call   rax
ffff800000810da9:	89 c0                	mov    eax,eax
ffff800000810dab:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:213
		else
			break;

		if(next_cluster >= 0x0ffffff8)
ffff800000810daf:	48 81 7d a0 f7 ff ff 	cmp    QWORD PTR [rbp-0x60],0xffffff7
ffff800000810db6:	0f 
ffff800000810db7:	0f 86 a6 00 00 00    	jbe    ffff800000810e63 <FAT32_write+0x50f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:215
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
ffff800000810dbd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810dc1:	48 89 c7             	mov    rdi,rax
ffff800000810dc4:	49 89 df             	mov    r15,rbx
ffff800000810dc7:	48 b8 c7 dd fe ff ff 	movabs rax,0xfffffffffffeddc7
ffff800000810dce:	ff ff ff 
ffff800000810dd1:	48 01 d8             	add    rax,rbx
ffff800000810dd4:	ff d0                	call   rax
ffff800000810dd6:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:216
			if(!next_cluster)
ffff800000810dda:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff800000810ddf:	75 25                	jne    ffff800000810e06 <FAT32_write+0x4b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:218
			{
                kmfree(buffer);
ffff800000810de1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810de5:	48 89 c7             	mov    rdi,rax
ffff800000810de8:	49 89 df             	mov    r15,rbx
ffff800000810deb:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000810df2:	ff ff ff 
ffff800000810df5:	48 01 d8             	add    rax,rbx
ffff800000810df8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:219
				return -ENOSPC;
ffff800000810dfa:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff800000810e01:	e9 07 01 00 00       	jmp    ffff800000810f0d <FAT32_write+0x5b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
ffff800000810e06:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810e0a:	89 c2                	mov    edx,eax
ffff800000810e0c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810e10:	89 c1                	mov    ecx,eax
ffff800000810e12:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810e16:	89 ce                	mov    esi,ecx
ffff800000810e18:	48 89 c7             	mov    rdi,rax
ffff800000810e1b:	49 89 df             	mov    r15,rbx
ffff800000810e1e:	48 b8 37 d8 fe ff ff 	movabs rax,0xfffffffffffed837
ffff800000810e25:	ff ff ff 
ffff800000810e28:	48 01 d8             	add    rax,rbx
ffff800000810e2b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:223
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
ffff800000810e2d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810e31:	89 c1                	mov    ecx,eax
ffff800000810e33:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810e37:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff800000810e3c:	89 ce                	mov    esi,ecx
ffff800000810e3e:	48 89 c7             	mov    rdi,rax
ffff800000810e41:	49 89 df             	mov    r15,rbx
ffff800000810e44:	48 b8 37 d8 fe ff ff 	movabs rax,0xfffffffffffed837
ffff800000810e4b:	ff ff ff 
ffff800000810e4e:	48 01 d8             	add    rax,rbx
ffff800000810e51:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:224
			cluster = next_cluster;
ffff800000810e53:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810e57:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:225
			flags = 1;
ffff800000810e5b:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff800000810e62:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:228
		}

	}while(index);
ffff800000810e63:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000810e67:	0f 85 f4 fc ff ff    	jne    ffff800000810b61 <FAT32_write+0x20d>
ffff800000810e6d:	eb 01                	jmp    ffff800000810e70 <FAT32_write+0x51c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:211
			break;
ffff800000810e6f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:230

	if(*position > filp->dentry->dir_inode->file_size)
ffff800000810e70:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810e77:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810e7a:	48 89 c2             	mov    rdx,rax
ffff800000810e7d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810e84:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810e88:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810e8c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810e8f:	48 39 c2             	cmp    rdx,rax
ffff800000810e92:	76 4b                	jbe    ffff800000810edf <FAT32_write+0x58b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:232
	{
		filp->dentry->dir_inode->file_size = *position;
ffff800000810e94:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810e9b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810e9e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810ea5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810ea9:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810ead:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:233
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff800000810eb0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810eb7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810ebb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810ebf:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810ec3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000810ec7:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000810ecb:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810ed2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810ed6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810eda:	48 89 c7             	mov    rdi,rax
ffff800000810edd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
	}

    kmfree(buffer);
ffff800000810edf:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810ee3:	48 89 c7             	mov    rdi,rax
ffff800000810ee6:	49 89 df             	mov    r15,rbx
ffff800000810ee9:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000810ef0:	ff ff ff 
ffff800000810ef3:	48 01 d8             	add    rax,rbx
ffff800000810ef6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:237
	if(!index)
ffff800000810ef8:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000810efc:	75 0b                	jne    ffff800000810f09 <FAT32_write+0x5b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:238
		retval = count;
ffff800000810efe:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000810f05:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:239
	return retval;
ffff800000810f09:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:240
}
ffff800000810f0d:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff800000810f14:	5b                   	pop    rbx
ffff800000810f15:	41 5f                	pop    r15
ffff800000810f17:	5d                   	pop    rbp
ffff800000810f18:	c3                   	ret    

ffff800000810f19 <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:244


long FAT32_lseek(struct file * filp,long offset,long origin)
{
ffff800000810f19:	f3 0f 1e fa          	endbr64 
ffff800000810f1d:	55                   	push   rbp
ffff800000810f1e:	48 89 e5             	mov    rbp,rsp
ffff800000810f21:	41 57                	push   r15
ffff800000810f23:	48 83 ec 38          	sub    rsp,0x38
ffff800000810f27:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff800000810f27 <FAT32_lseek+0xe>
ffff800000810f2e:	49 bb 59 1b 01 00 00 	movabs r11,0x11b59
ffff800000810f35:	00 00 00 
ffff800000810f38:	4c 01 d9             	add    rcx,r11
ffff800000810f3b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000810f3f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000810f43:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:245
	struct index_node *inode = filp->dentry->dir_inode;
ffff800000810f47:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810f4b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810f4f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810f53:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:246
	long pos = 0;
ffff800000810f57:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000810f5e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:248

	switch(origin)
ffff800000810f5f:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff800000810f64:	74 21                	je     ffff800000810f87 <FAT32_lseek+0x6e>
ffff800000810f66:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff800000810f6b:	7f 4a                	jg     ffff800000810fb7 <FAT32_lseek+0x9e>
ffff800000810f6d:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000810f72:	74 09                	je     ffff800000810f7d <FAT32_lseek+0x64>
ffff800000810f74:	48 83 7d c8 01       	cmp    QWORD PTR [rbp-0x38],0x1
ffff800000810f79:	74 20                	je     ffff800000810f9b <FAT32_lseek+0x82>
ffff800000810f7b:	eb 3a                	jmp    ffff800000810fb7 <FAT32_lseek+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:251
	{
		case SEEK_SET:
				pos = offset;
ffff800000810f7d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810f81:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:252
			break;
ffff800000810f85:	eb 39                	jmp    ffff800000810fc0 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:255

		case SEEK_CUR:
				pos =  filp->position + offset;
ffff800000810f87:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810f8b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810f8e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810f92:	48 01 d0             	add    rax,rdx
ffff800000810f95:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:256
			break;
ffff800000810f99:	eb 25                	jmp    ffff800000810fc0 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:259

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
ffff800000810f9b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810f9f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810fa3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810fa7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810faa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810fae:	48 01 d0             	add    rax,rdx
ffff800000810fb1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:260
			break;
ffff800000810fb5:	eb 09                	jmp    ffff800000810fc0 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:263

		default:
			return -EINVAL;
ffff800000810fb7:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff800000810fbe:	eb 69                	jmp    ffff800000811029 <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:267
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
ffff800000810fc0:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000810fc5:	78 18                	js     ffff800000810fdf <FAT32_lseek+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:267 (discriminator 1)
ffff800000810fc7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810fcb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810fcf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810fd3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810fd6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810fda:	48 39 c2             	cmp    rdx,rax
ffff800000810fdd:	73 09                	jae    ffff800000810fe8 <FAT32_lseek+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:268
		return -EOVERFLOW;
ffff800000810fdf:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
ffff800000810fe6:	eb 41                	jmp    ffff800000811029 <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:270

	filp->position = pos;
ffff800000810fe8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810fec:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000810ff0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:271
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
ffff800000810ff3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810ff7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810ffa:	48 89 c6             	mov    rsi,rax
ffff800000810ffd:	48 b8 98 d9 ff ff ff 	movabs rax,0xffffffffffffd998
ffff800000811004:	ff ff ff 
ffff800000811007:	48 8d 04 01          	lea    rax,[rcx+rax*1]
ffff80000081100b:	48 89 c7             	mov    rdi,rax
ffff80000081100e:	49 89 cf             	mov    r15,rcx
ffff800000811011:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811016:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff80000081101d:	ff ff ff 
ffff800000811020:	48 01 ca             	add    rdx,rcx
ffff800000811023:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:273

	return pos;
ffff800000811025:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:274
}
ffff800000811029:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000081102d:	c9                   	leave  
ffff80000081102e:	c3                   	ret    

ffff80000081102f <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:278


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
ffff80000081102f:	f3 0f 1e fa          	endbr64 
ffff800000811033:	55                   	push   rbp
ffff800000811034:	48 89 e5             	mov    rbp,rsp
ffff800000811037:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811037 <FAT32_ioctl+0x8>
ffff80000081103e:	49 bb 49 1a 01 00 00 	movabs r11,0x11a49
ffff800000811045:	00 00 00 
ffff800000811048:	4c 01 d8             	add    rax,r11
ffff80000081104b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081104f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811053:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000811057:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000081105b:	90                   	nop
ffff80000081105c:	5d                   	pop    rbp
ffff80000081105d:	c3                   	ret    

ffff80000081105e <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
ffff80000081105e:	f3 0f 1e fa          	endbr64 
ffff800000811062:	55                   	push   rbp
ffff800000811063:	48 89 e5             	mov    rbp,rsp
ffff800000811066:	41 57                	push   r15
ffff800000811068:	53                   	push   rbx
ffff800000811069:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff80000081106d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081106d <FAT32_readdir+0xf>
ffff800000811074:	49 bb 13 1a 01 00 00 	movabs r11,0x11a13
ffff80000081107b:	00 00 00 
ffff80000081107e:	4c 01 db             	add    rbx,r11
ffff800000811081:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000811085:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff800000811089:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:282
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff800000811090:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811094:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811098:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081109c:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008110a0:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:283
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff8000008110a4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008110a8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008110ac:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008110b0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008110b4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008110b8:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285

	unsigned int cluster = 0;
ffff8000008110bc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	unsigned long sector = 0;
ffff8000008110c3:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff8000008110ca:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:287
	unsigned char * buf =NULL; 
ffff8000008110cb:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff8000008110d2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288
	char *name = NULL;
ffff8000008110d3:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008110da:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	int namelen = 0;
ffff8000008110db:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	int i = 0,j = 0,x = 0,y = 0;
ffff8000008110e2:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff8000008110e9:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008110f0:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008110f7:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:291
	struct FAT32_Directory * tmpdentry = NULL;
ffff8000008110fe:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff800000811105:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:292
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000811106:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000081110d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:294

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff80000081110e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811112:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811116:	be 00 00 00 00       	mov    esi,0x0
ffff80000081111b:	48 89 c7             	mov    rdi,rax
ffff80000081111e:	49 89 df             	mov    r15,rbx
ffff800000811121:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811126:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000081112d:	ff ff ff 
ffff800000811130:	48 01 da             	add    rdx,rbx
ffff800000811133:	ff d2                	call   rdx
ffff800000811135:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:296

	cluster = finode->first_cluster;
ffff800000811139:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081113d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811140:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298

	j = filp->position/fsbi->bytes_per_cluster;
ffff800000811143:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811147:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081114a:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000081114e:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff800000811152:	48 99                	cqo    
ffff800000811154:	48 f7 fe             	idiv   rsi
ffff800000811157:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300
	
	for(i = 0;i<j;i++)
ffff80000081115a:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000811161:	eb 60                	jmp    ffff8000008111c3 <FAT32_readdir+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:302
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000811163:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811166:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081116a:	89 d6                	mov    esi,edx
ffff80000081116c:	48 89 c7             	mov    rdi,rax
ffff80000081116f:	49 89 df             	mov    r15,rbx
ffff800000811172:	48 b8 1a d7 fe ff ff 	movabs rax,0xfffffffffffed71a
ffff800000811179:	ff ff ff 
ffff80000081117c:	48 01 d8             	add    rax,rbx
ffff80000081117f:	ff d0                	call   rax
ffff800000811181:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303
		if(cluster > 0x0ffffff7)
ffff800000811184:	81 7d ec f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff7
ffff80000081118b:	76 32                	jbe    ffff8000008111bf <FAT32_readdir+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:305
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
ffff80000081118d:	48 b8 c0 d9 ff ff ff 	movabs rax,0xffffffffffffd9c0
ffff800000811194:	ff ff ff 
ffff800000811197:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081119b:	48 89 c7             	mov    rdi,rax
ffff80000081119e:	49 89 df             	mov    r15,rbx
ffff8000008111a1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008111a6:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff8000008111ad:	ff ff ff 
ffff8000008111b0:	48 01 da             	add    rdx,rbx
ffff8000008111b3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:306
			return NULL;
ffff8000008111b5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008111ba:	e9 1a 06 00 00       	jmp    ffff8000008117d9 <FAT32_readdir+0x77b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300 (discriminator 2)
	for(i = 0;i<j;i++)
ffff8000008111bf:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300 (discriminator 1)
ffff8000008111c3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008111c6:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008111c9:	7c 98                	jl     ffff800000811163 <FAT32_readdir+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:310
		}
	}

next_cluster:
ffff8000008111cb:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:311
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff8000008111cc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008111d0:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008111d4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008111d7:	83 e8 02             	sub    eax,0x2
ffff8000008111da:	89 c1                	mov    ecx,eax
ffff8000008111dc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008111e0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008111e4:	48 0f af c1          	imul   rax,rcx
ffff8000008111e8:	48 01 d0             	add    rax,rdx
ffff8000008111eb:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:312
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff8000008111ef:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008111f3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008111f7:	89 c1                	mov    ecx,eax
ffff8000008111f9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008111fd:	89 c2                	mov    edx,eax
ffff8000008111ff:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811203:	49 89 c0             	mov    r8,rax
ffff800000811206:	be 00 00 00 00       	mov    esi,0x0
ffff80000081120b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811210:	49 89 df             	mov    r15,rbx
ffff800000811213:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000081121a:	ff ff ff 
ffff80000081121d:	48 01 d8             	add    rax,rbx
ffff800000811220:	ff d0                	call   rax
ffff800000811222:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
    if(!chk_result(r))
ffff800000811225:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000811228:	89 c7                	mov    edi,eax
ffff80000081122a:	49 89 df             	mov    r15,rbx
ffff80000081122d:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff800000811234:	ff ff ff 
ffff800000811237:	48 01 d8             	add    rax,rbx
ffff80000081123a:	ff d0                	call   rax
ffff80000081123c:	85 c0                	test   eax,eax
ffff80000081123e:	75 4b                	jne    ffff80000081128b <FAT32_readdir+0x22d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:315
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
ffff800000811240:	48 b8 e8 d9 ff ff ff 	movabs rax,0xffffffffffffd9e8
ffff800000811247:	ff ff ff 
ffff80000081124a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081124e:	48 89 c7             	mov    rdi,rax
ffff800000811251:	49 89 df             	mov    r15,rbx
ffff800000811254:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811259:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff800000811260:	ff ff ff 
ffff800000811263:	48 01 da             	add    rdx,rbx
ffff800000811266:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:316
        kmfree(buf);
ffff800000811268:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081126c:	48 89 c7             	mov    rdi,rax
ffff80000081126f:	49 89 df             	mov    r15,rbx
ffff800000811272:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000811279:	ff ff ff 
ffff80000081127c:	48 01 d8             	add    rax,rbx
ffff80000081127f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:317
		return NULL;
ffff800000811281:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811286:	e9 4e 05 00 00       	jmp    ffff8000008117d9 <FAT32_readdir+0x77b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
ffff80000081128b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081128f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811292:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000811296:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081129a:	48 99                	cqo    
ffff80000081129c:	48 f7 f9             	idiv   rcx
ffff80000081129f:	48 89 d0             	mov    rax,rdx
ffff8000008112a2:	48 89 c2             	mov    rdx,rax
ffff8000008112a5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008112a9:	48 01 d0             	add    rax,rdx
ffff8000008112ac:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff8000008112b0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008112b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008112b7:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008112bb:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff8000008112bf:	48 99                	cqo    
ffff8000008112c1:	48 f7 f9             	idiv   rcx
ffff8000008112c4:	48 89 d0             	mov    rax,rdx
ffff8000008112c7:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffff8000008112ca:	e9 66 04 00 00       	jmp    ffff800000811735 <FAT32_readdir+0x6d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff8000008112cf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008112d3:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008112d7:	3c 0f                	cmp    al,0xf
ffff8000008112d9:	0f 84 37 04 00 00    	je     ffff800000811716 <FAT32_readdir+0x6b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff8000008112df:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008112e3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008112e6:	3c e5                	cmp    al,0xe5
ffff8000008112e8:	0f 84 2b 04 00 00    	je     ffff800000811719 <FAT32_readdir+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326 (discriminator 2)
ffff8000008112ee:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008112f2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008112f5:	84 c0                	test   al,al
ffff8000008112f7:	0f 84 1c 04 00 00    	je     ffff800000811719 <FAT32_readdir+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326 (discriminator 4)
ffff8000008112fd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811301:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811304:	3c 05                	cmp    al,0x5
ffff800000811306:	0f 84 0d 04 00 00    	je     ffff800000811719 <FAT32_readdir+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329
			continue;

		namelen = 0;
ffff80000081130c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff800000811313:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811317:	48 83 e8 20          	sub    rax,0x20
ffff80000081131b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081131f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811323:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811327:	3c 0f                	cmp    al,0xf
ffff800000811329:	0f 85 44 02 00 00    	jne    ffff800000811573 <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 1)
ffff80000081132f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811333:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811336:	3c e5                	cmp    al,0xe5
ffff800000811338:	0f 84 35 02 00 00    	je     ffff800000811573 <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 2)
ffff80000081133e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811342:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811345:	84 c0                	test   al,al
ffff800000811347:	0f 84 26 02 00 00    	je     ffff800000811573 <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 3)
ffff80000081134d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811351:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811354:	3c 05                	cmp    al,0x5
ffff800000811356:	0f 84 17 02 00 00    	je     ffff800000811573 <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334
		{
			j = 0;
ffff80000081135c:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff800000811363:	eb 1a                	jmp    ffff80000081137f <FAT32_readdir+0x321>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
			{
				j++;
ffff800000811365:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:339
				if(tmpldentry->LDIR_Ord & 0x40)
ffff800000811369:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081136d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811370:	0f b6 c0             	movzx  eax,al
ffff800000811373:	83 e0 40             	and    eax,0x40
ffff800000811376:	85 c0                	test   eax,eax
ffff800000811378:	75 34                	jne    ffff8000008113ae <FAT32_readdir+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:341
					break;
				tmpldentry --;
ffff80000081137a:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081137f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811383:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811387:	3c 0f                	cmp    al,0xf
ffff800000811389:	75 24                	jne    ffff8000008113af <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 1)
ffff80000081138b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081138f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811392:	3c e5                	cmp    al,0xe5
ffff800000811394:	74 19                	je     ffff8000008113af <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 2)
ffff800000811396:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081139a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081139d:	84 c0                	test   al,al
ffff80000081139f:	74 0e                	je     ffff8000008113af <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 3)
ffff8000008113a1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008113a5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008113a8:	3c 05                	cmp    al,0x5
ffff8000008113aa:	75 b9                	jne    ffff800000811365 <FAT32_readdir+0x307>
ffff8000008113ac:	eb 01                	jmp    ffff8000008113af <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:340
					break;
ffff8000008113ae:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:344
			}

			name = kmalloc(j * 13 + 1, 0);
ffff8000008113af:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008113b2:	89 d0                	mov    eax,edx
ffff8000008113b4:	01 c0                	add    eax,eax
ffff8000008113b6:	01 d0                	add    eax,edx
ffff8000008113b8:	c1 e0 02             	shl    eax,0x2
ffff8000008113bb:	01 d0                	add    eax,edx
ffff8000008113bd:	83 c0 01             	add    eax,0x1
ffff8000008113c0:	be 00 00 00 00       	mov    esi,0x0
ffff8000008113c5:	89 c7                	mov    edi,eax
ffff8000008113c7:	49 89 df             	mov    r15,rbx
ffff8000008113ca:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008113cf:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff8000008113d6:	ff ff ff 
ffff8000008113d9:	48 01 da             	add    rdx,rbx
ffff8000008113dc:	ff d2                	call   rdx
ffff8000008113de:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345
			memset(name,0,j*13+1);
ffff8000008113e2:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008113e5:	89 d0                	mov    eax,edx
ffff8000008113e7:	01 c0                	add    eax,eax
ffff8000008113e9:	01 d0                	add    eax,edx
ffff8000008113eb:	c1 e0 02             	shl    eax,0x2
ffff8000008113ee:	01 d0                	add    eax,edx
ffff8000008113f0:	83 c0 01             	add    eax,0x1
ffff8000008113f3:	89 c2                	mov    edx,eax
ffff8000008113f5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008113f9:	be 00 00 00 00       	mov    esi,0x0
ffff8000008113fe:	48 89 c7             	mov    rdi,rax
ffff800000811401:	49 89 df             	mov    r15,rbx
ffff800000811404:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000081140b:	ff ff ff 
ffff80000081140e:	48 01 d8             	add    rax,rbx
ffff800000811411:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff800000811413:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811417:	48 83 e8 20          	sub    rax,0x20
ffff80000081141b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348

			for(x = 0;x<j;x++,tmpldentry --)
ffff80000081141f:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000811426:	e9 37 01 00 00       	jmp    ffff800000811562 <FAT32_readdir+0x504>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350
			{
				for(y = 0;y<5;y++)
ffff80000081142b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000811432:	eb 53                	jmp    ffff800000811487 <FAT32_readdir+0x429>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000811434:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811438:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081143b:	48 63 d2             	movsxd rdx,edx
ffff80000081143e:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000811443:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000811447:	74 3a                	je     ffff800000811483 <FAT32_readdir+0x425>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351 (discriminator 1)
ffff800000811449:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081144d:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000811450:	48 63 d2             	movsxd rdx,edx
ffff800000811453:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000811458:	66 85 c0             	test   ax,ax
ffff80000081145b:	74 26                	je     ffff800000811483 <FAT32_readdir+0x425>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
ffff80000081145d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811461:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000811464:	48 63 d2             	movsxd rdx,edx
ffff800000811467:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff80000081146c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081146f:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811472:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000811475:	48 63 d0             	movsxd rdx,eax
ffff800000811478:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081147c:	48 01 d0             	add    rax,rdx
ffff80000081147f:	89 ca                	mov    edx,ecx
ffff800000811481:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 2)
				for(y = 0;y<5;y++)
ffff800000811483:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 1)
ffff800000811487:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
ffff80000081148b:	7e a7                	jle    ffff800000811434 <FAT32_readdir+0x3d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354

				for(y = 0;y<6;y++)
ffff80000081148d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000811494:	eb 53                	jmp    ffff8000008114e9 <FAT32_readdir+0x48b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000811496:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081149a:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081149d:	48 63 d2             	movsxd rdx,edx
ffff8000008114a0:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff8000008114a5:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008114a9:	74 3a                	je     ffff8000008114e5 <FAT32_readdir+0x487>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355 (discriminator 1)
ffff8000008114ab:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008114af:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008114b2:	48 63 d2             	movsxd rdx,edx
ffff8000008114b5:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008114ba:	66 85 c0             	test   ax,ax
ffff8000008114bd:	74 26                	je     ffff8000008114e5 <FAT32_readdir+0x487>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
ffff8000008114bf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008114c3:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008114c6:	48 63 d2             	movsxd rdx,edx
ffff8000008114c9:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff8000008114ce:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008114d1:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008114d4:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008114d7:	48 63 d0             	movsxd rdx,eax
ffff8000008114da:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008114de:	48 01 d0             	add    rax,rdx
ffff8000008114e1:	89 ca                	mov    edx,ecx
ffff8000008114e3:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354 (discriminator 2)
				for(y = 0;y<6;y++)
ffff8000008114e5:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354 (discriminator 1)
ffff8000008114e9:	83 7d cc 05          	cmp    DWORD PTR [rbp-0x34],0x5
ffff8000008114ed:	7e a7                	jle    ffff800000811496 <FAT32_readdir+0x438>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358

				for(y = 0;y<2;y++)
ffff8000008114ef:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008114f6:	eb 5b                	jmp    ffff800000811553 <FAT32_readdir+0x4f5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:359
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff8000008114f8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008114fc:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008114ff:	48 63 d2             	movsxd rdx,edx
ffff800000811502:	48 83 c2 08          	add    rdx,0x8
ffff800000811506:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff80000081150b:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000081150f:	74 3e                	je     ffff80000081154f <FAT32_readdir+0x4f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:359 (discriminator 1)
ffff800000811511:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811515:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000811518:	48 63 d2             	movsxd rdx,edx
ffff80000081151b:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000811520:	66 85 c0             	test   ax,ax
ffff800000811523:	74 2a                	je     ffff80000081154f <FAT32_readdir+0x4f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
ffff800000811525:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811529:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081152c:	48 63 d2             	movsxd rdx,edx
ffff80000081152f:	48 83 c2 08          	add    rdx,0x8
ffff800000811533:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000811538:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081153b:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081153e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000811541:	48 63 d0             	movsxd rdx,eax
ffff800000811544:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811548:	48 01 d0             	add    rax,rdx
ffff80000081154b:	89 ca                	mov    edx,ecx
ffff80000081154d:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358 (discriminator 2)
				for(y = 0;y<2;y++)
ffff80000081154f:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358 (discriminator 1)
ffff800000811553:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
ffff800000811557:	7e 9f                	jle    ffff8000008114f8 <FAT32_readdir+0x49a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
ffff800000811559:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
ffff80000081155d:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 1)
ffff800000811562:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000811565:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000811568:	0f 8c bd fe ff ff    	jl     ffff80000081142b <FAT32_readdir+0x3cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:362
			}
			goto find_lookup_success;
ffff80000081156e:	e9 2c 02 00 00       	jmp    ffff80000081179f <FAT32_readdir+0x741>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365
		}

		name = kmalloc(15, 0);
ffff800000811573:	be 00 00 00 00       	mov    esi,0x0
ffff800000811578:	bf 0f 00 00 00       	mov    edi,0xf
ffff80000081157d:	49 89 df             	mov    r15,rbx
ffff800000811580:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811585:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000081158c:	ff ff ff 
ffff80000081158f:	48 01 da             	add    rdx,rbx
ffff800000811592:	ff d2                	call   rdx
ffff800000811594:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366
		memset(name,0,15);
ffff800000811598:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081159c:	ba 0f 00 00 00       	mov    edx,0xf
ffff8000008115a1:	be 00 00 00 00       	mov    esi,0x0
ffff8000008115a6:	48 89 c7             	mov    rdi,rax
ffff8000008115a9:	49 89 df             	mov    r15,rbx
ffff8000008115ac:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff8000008115b3:	ff ff ff 
ffff8000008115b6:	48 01 d8             	add    rax,rbx
ffff8000008115b9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
		//short file/dir base name compare
		for(x=0;x<8;x++)
ffff8000008115bb:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008115c2:	eb 74                	jmp    ffff800000811638 <FAT32_readdir+0x5da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff8000008115c4:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008115c8:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008115cb:	48 98                	cdqe   
ffff8000008115cd:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008115d1:	3c 20                	cmp    al,0x20
ffff8000008115d3:	74 6b                	je     ffff800000811640 <FAT32_readdir+0x5e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:372
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff8000008115d5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008115d9:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff8000008115dd:	0f b6 c0             	movzx  eax,al
ffff8000008115e0:	83 e0 08             	and    eax,0x8
ffff8000008115e3:	85 c0                	test   eax,eax
ffff8000008115e5:	74 29                	je     ffff800000811610 <FAT32_readdir+0x5b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:373
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff8000008115e7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008115eb:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008115ee:	48 98                	cdqe   
ffff8000008115f0:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008115f4:	8d 48 20             	lea    ecx,[rax+0x20]
ffff8000008115f7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008115fa:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008115fd:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000811600:	48 63 d0             	movsxd rdx,eax
ffff800000811603:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811607:	48 01 d0             	add    rax,rdx
ffff80000081160a:	89 ca                	mov    edx,ecx
ffff80000081160c:	88 10                	mov    BYTE PTR [rax],dl
ffff80000081160e:	eb 24                	jmp    ffff800000811634 <FAT32_readdir+0x5d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:375
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000811610:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000811614:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000811617:	48 98                	cdqe   
ffff800000811619:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff80000081161d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000811620:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811623:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000811626:	48 63 d0             	movsxd rdx,eax
ffff800000811629:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081162d:	48 01 d0             	add    rax,rdx
ffff800000811630:	89 ca                	mov    edx,ecx
ffff800000811632:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000811634:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368 (discriminator 1)
ffff800000811638:	83 7d d0 07          	cmp    DWORD PTR [rbp-0x30],0x7
ffff80000081163c:	7e 86                	jle    ffff8000008115c4 <FAT32_readdir+0x566>
ffff80000081163e:	eb 01                	jmp    ffff800000811641 <FAT32_readdir+0x5e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:371
				break;
ffff800000811640:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:378
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
ffff800000811641:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811645:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811649:	0f b6 c0             	movzx  eax,al
ffff80000081164c:	83 e0 10             	and    eax,0x10
ffff80000081164f:	85 c0                	test   eax,eax
ffff800000811651:	0f 85 44 01 00 00    	jne    ffff80000081179b <FAT32_readdir+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381
			goto find_lookup_success;

		name[namelen++] = '.';
ffff800000811657:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081165a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081165d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000811660:	48 63 d0             	movsxd rdx,eax
ffff800000811663:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811667:	48 01 d0             	add    rax,rdx
ffff80000081166a:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384

		//short file ext name compare
		for(x=8;x<11;x++)
ffff80000081166d:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
ffff800000811674:	eb 74                	jmp    ffff8000008116ea <FAT32_readdir+0x68c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000811676:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081167a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081167d:	48 98                	cdqe   
ffff80000081167f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811683:	3c 20                	cmp    al,0x20
ffff800000811685:	74 6b                	je     ffff8000008116f2 <FAT32_readdir+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:388
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000811687:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081168b:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000081168f:	0f b6 c0             	movzx  eax,al
ffff800000811692:	83 e0 10             	and    eax,0x10
ffff800000811695:	85 c0                	test   eax,eax
ffff800000811697:	74 29                	je     ffff8000008116c2 <FAT32_readdir+0x664>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:389
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000811699:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081169d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008116a0:	48 98                	cdqe   
ffff8000008116a2:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008116a6:	8d 48 20             	lea    ecx,[rax+0x20]
ffff8000008116a9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008116ac:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008116af:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008116b2:	48 63 d0             	movsxd rdx,eax
ffff8000008116b5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008116b9:	48 01 d0             	add    rax,rdx
ffff8000008116bc:	89 ca                	mov    edx,ecx
ffff8000008116be:	88 10                	mov    BYTE PTR [rax],dl
ffff8000008116c0:	eb 24                	jmp    ffff8000008116e6 <FAT32_readdir+0x688>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff8000008116c2:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008116c6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008116c9:	48 98                	cdqe   
ffff8000008116cb:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff8000008116cf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008116d2:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008116d5:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008116d8:	48 63 d0             	movsxd rdx,eax
ffff8000008116db:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008116df:	48 01 d0             	add    rax,rdx
ffff8000008116e2:	89 ca                	mov    edx,ecx
ffff8000008116e4:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384 (discriminator 2)
		for(x=8;x<11;x++)
ffff8000008116e6:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384 (discriminator 1)
ffff8000008116ea:	83 7d d0 0a          	cmp    DWORD PTR [rbp-0x30],0xa
ffff8000008116ee:	7e 86                	jle    ffff800000811676 <FAT32_readdir+0x618>
ffff8000008116f0:	eb 01                	jmp    ffff8000008116f3 <FAT32_readdir+0x695>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:387
				break;
ffff8000008116f2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
		}
		if(x == 8)
ffff8000008116f3:	83 7d d0 08          	cmp    DWORD PTR [rbp-0x30],0x8
ffff8000008116f7:	0f 85 a1 00 00 00    	jne    ffff80000081179e <FAT32_readdir+0x740>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:394
			name[--namelen] = 0;
ffff8000008116fd:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffff800000811701:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000811704:	48 63 d0             	movsxd rdx,eax
ffff800000811707:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081170b:	48 01 d0             	add    rax,rdx
ffff80000081170e:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
		goto find_lookup_success;
ffff800000811711:	e9 88 00 00 00       	jmp    ffff80000081179e <FAT32_readdir+0x740>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:325
			continue;
ffff800000811716:	90                   	nop
ffff800000811717:	eb 01                	jmp    ffff80000081171a <FAT32_readdir+0x6bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
			continue;
ffff800000811719:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff80000081171a:	83 45 d8 20          	add    DWORD PTR [rbp-0x28],0x20
ffff80000081171e:	48 83 45 c0 20       	add    QWORD PTR [rbp-0x40],0x20
ffff800000811723:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811727:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081172a:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff80000081172e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811732:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322 (discriminator 1)
ffff800000811735:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000811738:	48 63 d0             	movsxd rdx,eax
ffff80000081173b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081173f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811743:	48 39 c2             	cmp    rdx,rax
ffff800000811746:	0f 8c 83 fb ff ff    	jl     ffff8000008112cf <FAT32_readdir+0x271>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:398
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000081174c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081174f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811753:	89 d6                	mov    esi,edx
ffff800000811755:	48 89 c7             	mov    rdi,rax
ffff800000811758:	49 89 df             	mov    r15,rbx
ffff80000081175b:	48 b8 1a d7 fe ff ff 	movabs rax,0xfffffffffffed71a
ffff800000811762:	ff ff ff 
ffff800000811765:	48 01 d8             	add    rax,rbx
ffff800000811768:	ff d0                	call   rax
ffff80000081176a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:399
	if(cluster < 0x0ffffff7)
ffff80000081176d:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000811774:	77 05                	ja     ffff80000081177b <FAT32_readdir+0x71d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400
		goto next_cluster;
ffff800000811776:	e9 51 fa ff ff       	jmp    ffff8000008111cc <FAT32_readdir+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:402

    kmfree(buf);
ffff80000081177b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081177f:	48 89 c7             	mov    rdi,rax
ffff800000811782:	49 89 df             	mov    r15,rbx
ffff800000811785:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000081178c:	ff ff ff 
ffff80000081178f:	48 01 d8             	add    rax,rbx
ffff800000811792:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:403
	return NULL;
ffff800000811794:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811799:	eb 3e                	jmp    ffff8000008117d9 <FAT32_readdir+0x77b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:379
			goto find_lookup_success;
ffff80000081179b:	90                   	nop
ffff80000081179c:	eb 01                	jmp    ffff80000081179f <FAT32_readdir+0x741>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
		goto find_lookup_success;
ffff80000081179e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:407

find_lookup_success:

	filp->position += 32;
ffff80000081179f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008117a3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008117a6:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff8000008117aa:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008117ae:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:408
	return filler(dirent,name,namelen,0,0);
ffff8000008117b1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008117b4:	48 63 d0             	movsxd rdx,eax
ffff8000008117b7:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff8000008117bb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008117bf:	4c 8b 8d 78 ff ff ff 	mov    r9,QWORD PTR [rbp-0x88]
ffff8000008117c6:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff8000008117cc:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008117d1:	48 89 c7             	mov    rdi,rax
ffff8000008117d4:	41 ff d1             	call   r9
ffff8000008117d7:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:409
}
ffff8000008117d9:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff8000008117dd:	5b                   	pop    rbx
ffff8000008117de:	41 5f                	pop    r15
ffff8000008117e0:	5d                   	pop    rbp
ffff8000008117e1:	c3                   	ret    

ffff8000008117e2 <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:426
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff8000008117e2:	f3 0f 1e fa          	endbr64 
ffff8000008117e6:	55                   	push   rbp
ffff8000008117e7:	48 89 e5             	mov    rbp,rsp
ffff8000008117ea:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008117ea <FAT32_create+0x8>
ffff8000008117f1:	49 bb 96 12 01 00 00 	movabs r11,0x11296
ffff8000008117f8:	00 00 00 
ffff8000008117fb:	4c 01 d8             	add    rax,r11
ffff8000008117fe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811802:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811806:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000811809:	90                   	nop
ffff80000081180a:	5d                   	pop    rbp
ffff80000081180b:	c3                   	ret    

ffff80000081180c <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:430


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
ffff80000081180c:	f3 0f 1e fa          	endbr64 
ffff800000811810:	55                   	push   rbp
ffff800000811811:	48 89 e5             	mov    rbp,rsp
ffff800000811814:	41 57                	push   r15
ffff800000811816:	53                   	push   rbx
ffff800000811817:	48 83 ec 60          	sub    rsp,0x60
ffff80000081181b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081181b <FAT32_lookup+0xf>
ffff800000811822:	49 bb 65 12 01 00 00 	movabs r11,0x11265
ffff800000811829:	00 00 00 
ffff80000081182c:	4c 01 db             	add    rbx,r11
ffff80000081182f:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000811833:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:431
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
ffff800000811837:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081183b:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000081183f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
ffff800000811843:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811847:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081184b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081184f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434

	unsigned int cluster = 0;
ffff800000811853:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:435
	unsigned long sector = 0;
ffff80000081185a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000811861:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436
	unsigned char * buf =NULL; 
ffff800000811862:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff800000811869:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	int i = 0,j = 0,x = 0;
ffff80000081186a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000811871:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000811878:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:438
	struct FAT32_Directory * tmpdentry = NULL;
ffff80000081187f:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000811886:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:439
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000811887:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000081188e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:440
	struct index_node * p = NULL;
ffff80000081188f:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000811896:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:442

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000811897:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081189b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081189f:	be 00 00 00 00       	mov    esi,0x0
ffff8000008118a4:	48 89 c7             	mov    rdi,rax
ffff8000008118a7:	49 89 df             	mov    r15,rbx
ffff8000008118aa:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008118af:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff8000008118b6:	ff ff ff 
ffff8000008118b9:	48 01 da             	add    rdx,rbx
ffff8000008118bc:	ff d2                	call   rdx
ffff8000008118be:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:444

	cluster = finode->first_cluster;
ffff8000008118c2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008118c6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008118c9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:447

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff8000008118cc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008118d0:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008118d4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008118d7:	83 e8 02             	sub    eax,0x2
ffff8000008118da:	89 c1                	mov    ecx,eax
ffff8000008118dc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008118e0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008118e4:	48 0f af c1          	imul   rax,rcx
ffff8000008118e8:	48 01 d0             	add    rax,rdx
ffff8000008118eb:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:448
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
ffff8000008118ef:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008118f3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008118f6:	89 c6                	mov    esi,eax
ffff8000008118f8:	48 b8 18 da ff ff ff 	movabs rax,0xffffffffffffda18
ffff8000008118ff:	ff ff ff 
ffff800000811902:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811906:	48 89 c7             	mov    rdi,rax
ffff800000811909:	49 89 df             	mov    r15,rbx
ffff80000081190c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811911:	48 b9 5c ed fd ff ff 	movabs rcx,0xfffffffffffded5c
ffff800000811918:	ff ff ff 
ffff80000081191b:	48 01 d9             	add    rcx,rbx
ffff80000081191e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff800000811920:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811924:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811928:	89 c1                	mov    ecx,eax
ffff80000081192a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081192e:	89 c2                	mov    edx,eax
ffff800000811930:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811934:	49 89 c0             	mov    r8,rax
ffff800000811937:	be 00 00 00 00       	mov    esi,0x0
ffff80000081193c:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811941:	49 89 df             	mov    r15,rbx
ffff800000811944:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000081194b:	ff ff ff 
ffff80000081194e:	48 01 d8             	add    rax,rbx
ffff800000811951:	ff d0                	call   rax
ffff800000811953:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
    if(!chk_result(r))
ffff800000811956:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000811959:	89 c7                	mov    edi,eax
ffff80000081195b:	49 89 df             	mov    r15,rbx
ffff80000081195e:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff800000811965:	ff ff ff 
ffff800000811968:	48 01 d8             	add    rax,rbx
ffff80000081196b:	ff d0                	call   rax
ffff80000081196d:	85 c0                	test   eax,eax
ffff80000081196f:	75 4b                	jne    ffff8000008119bc <FAT32_lookup+0x1b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:452
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
ffff800000811971:	48 b8 40 da ff ff ff 	movabs rax,0xffffffffffffda40
ffff800000811978:	ff ff ff 
ffff80000081197b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081197f:	48 89 c7             	mov    rdi,rax
ffff800000811982:	49 89 df             	mov    r15,rbx
ffff800000811985:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081198a:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff800000811991:	ff ff ff 
ffff800000811994:	48 01 da             	add    rdx,rbx
ffff800000811997:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:453
        kmfree(buf);
ffff800000811999:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081199d:	48 89 c7             	mov    rdi,rax
ffff8000008119a0:	49 89 df             	mov    r15,rbx
ffff8000008119a3:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff8000008119aa:	ff ff ff 
ffff8000008119ad:	48 01 d8             	add    rax,rbx
ffff8000008119b0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:454
		return NULL;
ffff8000008119b2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008119b7:	e9 5f 08 00 00       	jmp    ffff80000081221b <FAT32_lookup+0xa0f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:457
	}

	tmpdentry = (struct FAT32_Directory *)buf;
ffff8000008119bc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008119c0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff8000008119c4:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008119cb:	e9 9d 05 00 00       	jmp    ffff800000811f6d <FAT32_lookup+0x761>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:461
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff8000008119d0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008119d4:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008119d8:	3c 0f                	cmp    al,0xf
ffff8000008119da:	0f 84 59 05 00 00    	je     ffff800000811f39 <FAT32_lookup+0x72d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff8000008119e0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008119e4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008119e7:	3c e5                	cmp    al,0xe5
ffff8000008119e9:	0f 84 4d 05 00 00    	je     ffff800000811f3c <FAT32_lookup+0x730>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463 (discriminator 2)
ffff8000008119ef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008119f3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008119f6:	84 c0                	test   al,al
ffff8000008119f8:	0f 84 3e 05 00 00    	je     ffff800000811f3c <FAT32_lookup+0x730>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463 (discriminator 4)
ffff8000008119fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811a02:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811a05:	3c 05                	cmp    al,0x5
ffff800000811a07:	0f 84 2f 05 00 00    	je     ffff800000811f3c <FAT32_lookup+0x730>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff800000811a0d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811a11:	48 83 e8 20          	sub    rax,0x20
ffff800000811a15:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467
		j = 0;
ffff800000811a19:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000811a20:	e9 88 01 00 00       	jmp    ffff800000811bad <FAT32_lookup+0x3a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472
		{
			for(x=0;x<5;x++)
ffff800000811a25:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000811a2c:	eb 6a                	jmp    ffff800000811a98 <FAT32_lookup+0x28c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:474
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
ffff800000811a2e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811a32:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811a35:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811a38:	7e 15                	jle    ffff800000811a4f <FAT32_lookup+0x243>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:474 (discriminator 1)
ffff800000811a3a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811a3e:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811a41:	48 63 d2             	movsxd rdx,edx
ffff800000811a44:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000811a49:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000811a4d:	74 44                	je     ffff800000811a93 <FAT32_lookup+0x287>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000811a4f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811a53:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811a56:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811a59:	0f 8f e0 04 00 00    	jg     ffff800000811f3f <FAT32_lookup+0x733>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476 (discriminator 1)
ffff800000811a5f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811a63:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811a66:	48 63 d2             	movsxd rdx,edx
ffff800000811a69:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff800000811a6e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811a72:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000811a75:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811a78:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811a7b:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000811a7e:	48 98                	cdqe   
ffff800000811a80:	48 01 f0             	add    rax,rsi
ffff800000811a83:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811a86:	66 98                	cbw    
ffff800000811a88:	66 39 c1             	cmp    cx,ax
ffff800000811a8b:	0f 85 ae 04 00 00    	jne    ffff800000811f3f <FAT32_lookup+0x733>
ffff800000811a91:	eb 01                	jmp    ffff800000811a94 <FAT32_lookup+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475
					continue;
ffff800000811a93:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472 (discriminator 2)
			for(x=0;x<5;x++)
ffff800000811a94:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472 (discriminator 1)
ffff800000811a98:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
ffff800000811a9c:	7e 90                	jle    ffff800000811a2e <FAT32_lookup+0x222>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
ffff800000811a9e:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000811aa5:	eb 6a                	jmp    ffff800000811b11 <FAT32_lookup+0x305>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:481
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
ffff800000811aa7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811aab:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811aae:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811ab1:	7e 15                	jle    ffff800000811ac8 <FAT32_lookup+0x2bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:481 (discriminator 1)
ffff800000811ab3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811ab7:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811aba:	48 63 d2             	movsxd rdx,edx
ffff800000811abd:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000811ac2:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000811ac6:	74 44                	je     ffff800000811b0c <FAT32_lookup+0x300>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000811ac8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811acc:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811acf:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811ad2:	0f 8f 6a 04 00 00    	jg     ffff800000811f42 <FAT32_lookup+0x736>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483 (discriminator 1)
ffff800000811ad8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811adc:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811adf:	48 63 d2             	movsxd rdx,edx
ffff800000811ae2:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff800000811ae7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811aeb:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000811aee:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811af1:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811af4:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000811af7:	48 98                	cdqe   
ffff800000811af9:	48 01 f0             	add    rax,rsi
ffff800000811afc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811aff:	66 98                	cbw    
ffff800000811b01:	66 39 c1             	cmp    cx,ax
ffff800000811b04:	0f 85 38 04 00 00    	jne    ffff800000811f42 <FAT32_lookup+0x736>
ffff800000811b0a:	eb 01                	jmp    ffff800000811b0d <FAT32_lookup+0x301>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482
					continue;
ffff800000811b0c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479 (discriminator 2)
			for(x=0;x<6;x++)
ffff800000811b0d:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479 (discriminator 1)
ffff800000811b11:	83 7d e0 05          	cmp    DWORD PTR [rbp-0x20],0x5
ffff800000811b15:	7e 90                	jle    ffff800000811aa7 <FAT32_lookup+0x29b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
ffff800000811b17:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000811b1e:	eb 72                	jmp    ffff800000811b92 <FAT32_lookup+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:488
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
ffff800000811b20:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811b24:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811b27:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811b2a:	7e 19                	jle    ffff800000811b45 <FAT32_lookup+0x339>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:488 (discriminator 1)
ffff800000811b2c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b30:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811b33:	48 63 d2             	movsxd rdx,edx
ffff800000811b36:	48 83 c2 08          	add    rdx,0x8
ffff800000811b3a:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff800000811b3f:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000811b43:	74 48                	je     ffff800000811b8d <FAT32_lookup+0x381>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000811b45:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811b49:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811b4c:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811b4f:	0f 8f f0 03 00 00    	jg     ffff800000811f45 <FAT32_lookup+0x739>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490 (discriminator 1)
ffff800000811b55:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b59:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811b5c:	48 63 d2             	movsxd rdx,edx
ffff800000811b5f:	48 83 c2 08          	add    rdx,0x8
ffff800000811b63:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000811b68:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811b6c:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000811b6f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811b72:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811b75:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000811b78:	48 98                	cdqe   
ffff800000811b7a:	48 01 f0             	add    rax,rsi
ffff800000811b7d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811b80:	66 98                	cbw    
ffff800000811b82:	66 39 c1             	cmp    cx,ax
ffff800000811b85:	0f 85 ba 03 00 00    	jne    ffff800000811f45 <FAT32_lookup+0x739>
ffff800000811b8b:	eb 01                	jmp    ffff800000811b8e <FAT32_lookup+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:489
					continue;
ffff800000811b8d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486 (discriminator 2)
			for(x=0;x<2;x++)
ffff800000811b8e:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486 (discriminator 1)
ffff800000811b92:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffff800000811b96:	7e 88                	jle    ffff800000811b20 <FAT32_lookup+0x314>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:494
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
ffff800000811b98:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811b9c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811b9f:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811ba2:	0f 8d 2e 04 00 00    	jge    ffff800000811fd6 <FAT32_lookup+0x7ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:499
			{
				goto find_lookup_success;
			}

			tmpldentry --;
ffff800000811ba8:	48 83 6d d0 20       	sub    QWORD PTR [rbp-0x30],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000811bad:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811bb1:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811bb5:	3c 0f                	cmp    al,0xf
ffff800000811bb7:	75 0f                	jne    ffff800000811bc8 <FAT32_lookup+0x3bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470 (discriminator 1)
ffff800000811bb9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811bbd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811bc0:	3c e5                	cmp    al,0xe5
ffff800000811bc2:	0f 85 5d fe ff ff    	jne    ffff800000811a25 <FAT32_lookup+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:503
		}

		//short file/dir base name compare
		j = 0;
ffff800000811bc8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504
		for(x=0;x<8;x++)
ffff800000811bcf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000811bd6:	e9 f4 01 00 00       	jmp    ffff800000811dcf <FAT32_lookup+0x5c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:506
		{
			switch(tmpdentry->DIR_Name[x])
ffff800000811bdb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811bdf:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811be2:	48 98                	cdqe   
ffff800000811be4:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811be8:	0f b6 c0             	movzx  eax,al
ffff800000811beb:	83 f8 7a             	cmp    eax,0x7a
ffff800000811bee:	0f 8f d0 01 00 00    	jg     ffff800000811dc4 <FAT32_lookup+0x5b8>
ffff800000811bf4:	83 f8 61             	cmp    eax,0x61
ffff800000811bf7:	0f 8d e6 00 00 00    	jge    ffff800000811ce3 <FAT32_lookup+0x4d7>
ffff800000811bfd:	83 f8 5a             	cmp    eax,0x5a
ffff800000811c00:	0f 8f be 01 00 00    	jg     ffff800000811dc4 <FAT32_lookup+0x5b8>
ffff800000811c06:	83 f8 41             	cmp    eax,0x41
ffff800000811c09:	0f 8d d4 00 00 00    	jge    ffff800000811ce3 <FAT32_lookup+0x4d7>
ffff800000811c0f:	83 f8 20             	cmp    eax,0x20
ffff800000811c12:	74 1a                	je     ffff800000811c2e <FAT32_lookup+0x422>
ffff800000811c14:	83 f8 20             	cmp    eax,0x20
ffff800000811c17:	0f 8c a7 01 00 00    	jl     ffff800000811dc4 <FAT32_lookup+0x5b8>
ffff800000811c1d:	83 e8 30             	sub    eax,0x30
ffff800000811c20:	83 f8 09             	cmp    eax,0x9
ffff800000811c23:	0f 87 9b 01 00 00    	ja     ffff800000811dc4 <FAT32_lookup+0x5b8>
ffff800000811c29:	e9 53 01 00 00       	jmp    ffff800000811d81 <FAT32_lookup+0x575>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:509
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000811c2e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811c32:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811c36:	0f b6 c0             	movzx  eax,al
ffff800000811c39:	83 e0 10             	and    eax,0x10
ffff800000811c3c:	85 c0                	test   eax,eax
ffff800000811c3e:	75 50                	jne    ffff800000811c90 <FAT32_lookup+0x484>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:511
					{
						if(dest_dentry->name[j]=='.')
ffff800000811c40:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811c44:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811c47:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811c4a:	48 98                	cdqe   
ffff800000811c4c:	48 01 d0             	add    rax,rdx
ffff800000811c4f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811c52:	3c 2e                	cmp    al,0x2e
ffff800000811c54:	0f 84 70 01 00 00    	je     ffff800000811dca <FAT32_lookup+0x5be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:513
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811c5a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811c5e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811c61:	48 98                	cdqe   
ffff800000811c63:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811c67:	0f b6 d0             	movzx  edx,al
ffff800000811c6a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811c6e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811c71:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811c74:	48 98                	cdqe   
ffff800000811c76:	48 01 c8             	add    rax,rcx
ffff800000811c79:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811c7c:	0f be c0             	movsx  eax,al
ffff800000811c7f:	39 c2                	cmp    edx,eax
ffff800000811c81:	0f 85 c1 02 00 00    	jne    ffff800000811f48 <FAT32_lookup+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:515
						{
							j++;
ffff800000811c87:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:516
							break;
ffff800000811c8b:	e9 3b 01 00 00       	jmp    ffff800000811dcb <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:523
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811c90:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811c94:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811c97:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811c9a:	7d 32                	jge    ffff800000811cce <FAT32_lookup+0x4c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:523 (discriminator 1)
ffff800000811c9c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811ca0:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811ca3:	48 98                	cdqe   
ffff800000811ca5:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811ca9:	0f b6 d0             	movzx  edx,al
ffff800000811cac:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811cb0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811cb3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811cb6:	48 98                	cdqe   
ffff800000811cb8:	48 01 c8             	add    rax,rcx
ffff800000811cbb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811cbe:	0f be c0             	movsx  eax,al
ffff800000811cc1:	39 c2                	cmp    edx,eax
ffff800000811cc3:	75 09                	jne    ffff800000811cce <FAT32_lookup+0x4c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:525
						{
							j++;
ffff800000811cc5:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:526
							break;
ffff800000811cc9:	e9 fd 00 00 00       	jmp    ffff800000811dcb <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:528
						}
						else if(j == dest_dentry->name_length)
ffff800000811cce:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811cd2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811cd5:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811cd8:	0f 85 6d 02 00 00    	jne    ffff800000811f4b <FAT32_lookup+0x73f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:529
							continue;
ffff800000811cde:	e9 e8 00 00 00       	jmp    ffff800000811dcb <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:536
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000811ce3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811ce7:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000811ceb:	0f b6 c0             	movzx  eax,al
ffff800000811cee:	83 e0 08             	and    eax,0x8
ffff800000811cf1:	85 c0                	test   eax,eax
ffff800000811cf3:	74 49                	je     ffff800000811d3e <FAT32_lookup+0x532>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000811cf5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811cf9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811cfc:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811cff:	0f 8d 49 02 00 00    	jge    ffff800000811f4e <FAT32_lookup+0x742>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537 (discriminator 1)
ffff800000811d05:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811d09:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811d0c:	48 98                	cdqe   
ffff800000811d0e:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811d12:	0f b6 c0             	movzx  eax,al
ffff800000811d15:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000811d18:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811d1c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811d1f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811d22:	48 98                	cdqe   
ffff800000811d24:	48 01 c8             	add    rax,rcx
ffff800000811d27:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811d2a:	0f be c0             	movsx  eax,al
ffff800000811d2d:	39 c2                	cmp    edx,eax
ffff800000811d2f:	0f 85 19 02 00 00    	jne    ffff800000811f4e <FAT32_lookup+0x742>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:539
						{
							j++;
ffff800000811d35:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:540
							break;
ffff800000811d39:	e9 8d 00 00 00       	jmp    ffff800000811dcb <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:546
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811d3e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811d42:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811d45:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811d48:	0f 8d 03 02 00 00    	jge    ffff800000811f51 <FAT32_lookup+0x745>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:546 (discriminator 1)
ffff800000811d4e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811d52:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811d55:	48 98                	cdqe   
ffff800000811d57:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811d5b:	0f b6 d0             	movzx  edx,al
ffff800000811d5e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811d62:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811d65:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811d68:	48 98                	cdqe   
ffff800000811d6a:	48 01 c8             	add    rax,rcx
ffff800000811d6d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811d70:	0f be c0             	movsx  eax,al
ffff800000811d73:	39 c2                	cmp    edx,eax
ffff800000811d75:	0f 85 d6 01 00 00    	jne    ffff800000811f51 <FAT32_lookup+0x745>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:548
						{
							j++;
ffff800000811d7b:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:549
							break;
ffff800000811d7f:	eb 4a                	jmp    ffff800000811dcb <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:556
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811d81:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811d85:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811d88:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811d8b:	0f 8d c3 01 00 00    	jge    ffff800000811f54 <FAT32_lookup+0x748>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:556 (discriminator 1)
ffff800000811d91:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811d95:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811d98:	48 98                	cdqe   
ffff800000811d9a:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811d9e:	0f b6 d0             	movzx  edx,al
ffff800000811da1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811da5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811da8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811dab:	48 98                	cdqe   
ffff800000811dad:	48 01 c8             	add    rax,rcx
ffff800000811db0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811db3:	0f be c0             	movsx  eax,al
ffff800000811db6:	39 c2                	cmp    edx,eax
ffff800000811db8:	0f 85 96 01 00 00    	jne    ffff800000811f54 <FAT32_lookup+0x748>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:558
					{
						j++;
ffff800000811dbe:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:559
						break;
ffff800000811dc2:	eb 07                	jmp    ffff800000811dcb <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:565
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
ffff800000811dc4:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:566
					break;
ffff800000811dc8:	eb 01                	jmp    ffff800000811dcb <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
							continue;
ffff800000811dca:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000811dcb:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504 (discriminator 1)
ffff800000811dcf:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
ffff800000811dd3:	0f 8e 02 fe ff ff    	jle    ffff800000811bdb <FAT32_lookup+0x3cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000811dd9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811ddd:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811de1:	0f b6 c0             	movzx  eax,al
ffff800000811de4:	83 e0 10             	and    eax,0x10
ffff800000811de7:	85 c0                	test   eax,eax
ffff800000811de9:	0f 85 ea 01 00 00    	jne    ffff800000811fd9 <FAT32_lookup+0x7cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:572
		{
			j++;
ffff800000811def:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573
			for(x=8;x<11;x++)
ffff800000811df3:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
ffff800000811dfa:	e9 2b 01 00 00       	jmp    ffff800000811f2a <FAT32_lookup+0x71e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:575
			{
				switch(tmpdentry->DIR_Name[x])
ffff800000811dff:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811e03:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811e06:	48 98                	cdqe   
ffff800000811e08:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811e0c:	0f b6 c0             	movzx  eax,al
ffff800000811e0f:	83 f8 7a             	cmp    eax,0x7a
ffff800000811e12:	0f 8f 3f 01 00 00    	jg     ffff800000811f57 <FAT32_lookup+0x74b>
ffff800000811e18:	83 f8 61             	cmp    eax,0x61
ffff800000811e1b:	7d 2e                	jge    ffff800000811e4b <FAT32_lookup+0x63f>
ffff800000811e1d:	83 f8 5a             	cmp    eax,0x5a
ffff800000811e20:	0f 8f 31 01 00 00    	jg     ffff800000811f57 <FAT32_lookup+0x74b>
ffff800000811e26:	83 f8 41             	cmp    eax,0x41
ffff800000811e29:	7d 20                	jge    ffff800000811e4b <FAT32_lookup+0x63f>
ffff800000811e2b:	83 f8 20             	cmp    eax,0x20
ffff800000811e2e:	0f 84 c4 00 00 00    	je     ffff800000811ef8 <FAT32_lookup+0x6ec>
ffff800000811e34:	83 f8 20             	cmp    eax,0x20
ffff800000811e37:	0f 8c 1a 01 00 00    	jl     ffff800000811f57 <FAT32_lookup+0x74b>
ffff800000811e3d:	83 e8 30             	sub    eax,0x30
ffff800000811e40:	83 f8 09             	cmp    eax,0x9
ffff800000811e43:	0f 87 0e 01 00 00    	ja     ffff800000811f57 <FAT32_lookup+0x74b>
ffff800000811e49:	eb 7e                	jmp    ffff800000811ec9 <FAT32_lookup+0x6bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:579
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000811e4b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e4f:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000811e53:	0f b6 c0             	movzx  eax,al
ffff800000811e56:	83 e0 10             	and    eax,0x10
ffff800000811e59:	85 c0                	test   eax,eax
ffff800000811e5b:	74 39                	je     ffff800000811e96 <FAT32_lookup+0x68a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:580
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000811e5d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811e61:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811e64:	48 98                	cdqe   
ffff800000811e66:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811e6a:	0f b6 c0             	movzx  eax,al
ffff800000811e6d:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000811e70:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811e74:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811e77:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811e7a:	48 98                	cdqe   
ffff800000811e7c:	48 01 c8             	add    rax,rcx
ffff800000811e7f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811e82:	0f be c0             	movsx  eax,al
ffff800000811e85:	39 c2                	cmp    edx,eax
ffff800000811e87:	0f 85 cd 00 00 00    	jne    ffff800000811f5a <FAT32_lookup+0x74e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:582
							{
								j++;
ffff800000811e8d:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:583
								break;
ffff800000811e91:	e9 90 00 00 00       	jmp    ffff800000811f26 <FAT32_lookup+0x71a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:589
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811e96:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811e9a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811e9d:	48 98                	cdqe   
ffff800000811e9f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811ea3:	0f b6 d0             	movzx  edx,al
ffff800000811ea6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811eaa:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811ead:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811eb0:	48 98                	cdqe   
ffff800000811eb2:	48 01 c8             	add    rax,rcx
ffff800000811eb5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811eb8:	0f be c0             	movsx  eax,al
ffff800000811ebb:	39 c2                	cmp    edx,eax
ffff800000811ebd:	0f 85 9a 00 00 00    	jne    ffff800000811f5d <FAT32_lookup+0x751>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:591
							{
								j++;
ffff800000811ec3:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:592
								break;
ffff800000811ec7:	eb 5d                	jmp    ffff800000811f26 <FAT32_lookup+0x71a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:599
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811ec9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811ecd:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811ed0:	48 98                	cdqe   
ffff800000811ed2:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811ed6:	0f b6 d0             	movzx  edx,al
ffff800000811ed9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811edd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811ee0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811ee3:	48 98                	cdqe   
ffff800000811ee5:	48 01 c8             	add    rax,rcx
ffff800000811ee8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811eeb:	0f be c0             	movsx  eax,al
ffff800000811eee:	39 c2                	cmp    edx,eax
ffff800000811ef0:	75 6e                	jne    ffff800000811f60 <FAT32_lookup+0x754>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:601
						{
							j++;
ffff800000811ef2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:602
							break;
ffff800000811ef6:	eb 2e                	jmp    ffff800000811f26 <FAT32_lookup+0x71a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:608
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811ef8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811efc:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811eff:	48 98                	cdqe   
ffff800000811f01:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811f05:	0f b6 d0             	movzx  edx,al
ffff800000811f08:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811f0c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811f0f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811f12:	48 98                	cdqe   
ffff800000811f14:	48 01 c8             	add    rax,rcx
ffff800000811f17:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811f1a:	0f be c0             	movsx  eax,al
ffff800000811f1d:	39 c2                	cmp    edx,eax
ffff800000811f1f:	75 42                	jne    ffff800000811f63 <FAT32_lookup+0x757>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:610
						{
							j++;
ffff800000811f21:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:611
							break;
ffff800000811f25:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573 (discriminator 2)
			for(x=8;x<11;x++)
ffff800000811f26:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573 (discriminator 1)
ffff800000811f2a:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
ffff800000811f2e:	0f 8e cb fe ff ff    	jle    ffff800000811dff <FAT32_lookup+0x5f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:621
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
ffff800000811f34:	e9 a0 00 00 00       	jmp    ffff800000811fd9 <FAT32_lookup+0x7cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:462
			continue;
ffff800000811f39:	90                   	nop
ffff800000811f3a:	eb 28                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464
			continue;
ffff800000811f3c:	90                   	nop
ffff800000811f3d:	eb 25                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477
					goto continue_cmp_fail;
ffff800000811f3f:	90                   	nop
ffff800000811f40:	eb 22                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484
					goto continue_cmp_fail;
ffff800000811f42:	90                   	nop
ffff800000811f43:	eb 1f                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:491
					goto continue_cmp_fail;
ffff800000811f45:	90                   	nop
ffff800000811f46:	eb 1c                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:519
							goto continue_cmp_fail;
ffff800000811f48:	90                   	nop
ffff800000811f49:	eb 19                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:531
							goto continue_cmp_fail;
ffff800000811f4b:	90                   	nop
ffff800000811f4c:	eb 16                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:543
							goto continue_cmp_fail;
ffff800000811f4e:	90                   	nop
ffff800000811f4f:	eb 13                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:552
							goto continue_cmp_fail;
ffff800000811f51:	90                   	nop
ffff800000811f52:	eb 10                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:562
						goto continue_cmp_fail;
ffff800000811f54:	90                   	nop
ffff800000811f55:	eb 0d                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:617
						goto continue_cmp_fail;
ffff800000811f57:	90                   	nop
ffff800000811f58:	eb 0a                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:586
								goto continue_cmp_fail;
ffff800000811f5a:	90                   	nop
ffff800000811f5b:	eb 07                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:595
								goto continue_cmp_fail;
ffff800000811f5d:	90                   	nop
ffff800000811f5e:	eb 04                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:605
							goto continue_cmp_fail;
ffff800000811f60:	90                   	nop
ffff800000811f61:	eb 01                	jmp    ffff800000811f64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:614
							goto continue_cmp_fail;
ffff800000811f63:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000811f64:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
ffff800000811f68:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 1)
ffff800000811f6d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000811f70:	48 63 d0             	movsxd rdx,eax
ffff800000811f73:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811f77:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811f7b:	48 39 c2             	cmp    rdx,rax
ffff800000811f7e:	0f 8c 4c fa ff ff    	jl     ffff8000008119d0 <FAT32_lookup+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:626

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000811f84:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811f87:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811f8b:	89 d6                	mov    esi,edx
ffff800000811f8d:	48 89 c7             	mov    rdi,rax
ffff800000811f90:	49 89 df             	mov    r15,rbx
ffff800000811f93:	48 b8 1a d7 fe ff ff 	movabs rax,0xfffffffffffed71a
ffff800000811f9a:	ff ff ff 
ffff800000811f9d:	48 01 d8             	add    rax,rbx
ffff800000811fa0:	ff d0                	call   rax
ffff800000811fa2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627
	if(cluster < 0x0ffffff7)
ffff800000811fa5:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000811fac:	77 05                	ja     ffff800000811fb3 <FAT32_lookup+0x7a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:628
		goto next_cluster;
ffff800000811fae:	e9 19 f9 ff ff       	jmp    ffff8000008118cc <FAT32_lookup+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:630

    kmfree(buf);
ffff800000811fb3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811fb7:	48 89 c7             	mov    rdi,rax
ffff800000811fba:	49 89 df             	mov    r15,rbx
ffff800000811fbd:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000811fc4:	ff ff ff 
ffff800000811fc7:	48 01 d8             	add    rax,rbx
ffff800000811fca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631
	return NULL;
ffff800000811fcc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811fd1:	e9 45 02 00 00       	jmp    ffff80000081221b <FAT32_lookup+0xa0f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:496
				goto find_lookup_success;
ffff800000811fd6:	90                   	nop
ffff800000811fd7:	eb 01                	jmp    ffff800000811fda <FAT32_lookup+0x7ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:621
		goto find_lookup_success;
ffff800000811fd9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634

find_lookup_success:
	p = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff800000811fda:	be 00 00 00 00       	mov    esi,0x0
ffff800000811fdf:	bf 38 00 00 00       	mov    edi,0x38
ffff800000811fe4:	49 89 df             	mov    r15,rbx
ffff800000811fe7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811fec:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000811ff3:	ff ff ff 
ffff800000811ff6:	48 01 da             	add    rdx,rbx
ffff800000811ff9:	ff d2                	call   rdx
ffff800000811ffb:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635
	memset(p,0,sizeof(struct index_node));
ffff800000811fff:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812003:	ba 38 00 00 00       	mov    edx,0x38
ffff800000812008:	be 00 00 00 00       	mov    esi,0x0
ffff80000081200d:	48 89 c7             	mov    rdi,rax
ffff800000812010:	49 89 df             	mov    r15,rbx
ffff800000812013:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000081201a:	ff ff ff 
ffff80000081201d:	48 01 d8             	add    rax,rbx
ffff800000812020:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636
	p->file_size = tmpdentry->DIR_FileSize;
ffff800000812022:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812026:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff800000812029:	89 c2                	mov    edx,eax
ffff80000081202b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081202f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000812032:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812036:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812039:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081203d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812041:	48 01 d0             	add    rax,rdx
ffff800000812044:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000812048:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081204c:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812050:	48 89 c1             	mov    rcx,rax
ffff800000812053:	48 89 d0             	mov    rax,rdx
ffff800000812056:	ba 00 00 00 00       	mov    edx,0x0
ffff80000081205b:	48 f7 f1             	div    rcx
ffff80000081205e:	48 89 c2             	mov    rdx,rax
ffff800000812061:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812065:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
ffff800000812069:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081206d:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000812071:	0f b6 c0             	movzx  eax,al
ffff800000812074:	83 e0 10             	and    eax,0x10
ffff800000812077:	85 c0                	test   eax,eax
ffff800000812079:	74 07                	je     ffff800000812082 <FAT32_lookup+0x876>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 1)
ffff80000081207b:	ba 02 00 00 00       	mov    edx,0x2
ffff800000812080:	eb 05                	jmp    ffff800000812087 <FAT32_lookup+0x87b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 2)
ffff800000812082:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 4)
ffff800000812087:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081208b:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 4)
	p->sb = parent_inode->sb;
ffff80000081208f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000812093:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff800000812097:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081209b:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
ffff80000081209f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008120a3:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff8000008120aa:	ff ff ff 
ffff8000008120ad:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008120b1:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
ffff8000008120b5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008120b9:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff8000008120c0:	ff ff ff 
ffff8000008120c3:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008120c7:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:643 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff8000008120cb:	be 00 00 00 00       	mov    esi,0x0
ffff8000008120d0:	bf 20 00 00 00       	mov    edi,0x20
ffff8000008120d5:	49 89 df             	mov    r15,rbx
ffff8000008120d8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008120dd:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff8000008120e4:	ff ff ff 
ffff8000008120e7:	48 01 da             	add    rdx,rbx
ffff8000008120ea:	ff d2                	call   rdx
ffff8000008120ec:	48 89 c2             	mov    rdx,rax
ffff8000008120ef:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008120f3:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff8000008120f7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008120fb:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008120ff:	ba 20 00 00 00       	mov    edx,0x20
ffff800000812104:	be 00 00 00 00       	mov    esi,0x0
ffff800000812109:	48 89 c7             	mov    rdi,rax
ffff80000081210c:	49 89 df             	mov    r15,rbx
ffff80000081210f:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000812116:	ff ff ff 
ffff800000812119:	48 01 d8             	add    rax,rbx
ffff80000081211c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	finode = p->private_index_info;
ffff80000081211e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812122:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000812126:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:647 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
ffff80000081212a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081212e:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000812132:	0f b7 c0             	movzx  eax,ax
ffff800000812135:	c1 e0 10             	shl    eax,0x10
ffff800000812138:	89 c2                	mov    edx,eax
ffff80000081213a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081213e:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
ffff800000812142:	0f b7 c0             	movzx  eax,ax
ffff800000812145:	09 d0                	or     eax,edx
ffff800000812147:	48 98                	cdqe   
ffff800000812149:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000081214e:	48 89 c2             	mov    rdx,rax
ffff800000812151:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812155:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)
	finode->dentry_location = cluster;
ffff800000812158:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081215b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081215f:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
ffff800000812163:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812167:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffff80000081216b:	48 c1 f8 05          	sar    rax,0x5
ffff80000081216f:	48 89 c2             	mov    rdx,rax
ffff800000812172:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812176:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:650 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
ffff80000081217a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081217e:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
ffff800000812182:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812186:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
ffff80000081218a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081218e:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
ffff800000812192:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812196:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
ffff80000081219a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081219e:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
ffff8000008121a2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008121a6:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:653 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
ffff8000008121aa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008121ae:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff8000008121b2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008121b6:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:655 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
ffff8000008121ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008121be:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008121c2:	66 c1 e8 0c          	shr    ax,0xc
ffff8000008121c6:	66 85 c0             	test   ax,ax
ffff8000008121c9:	74 27                	je     ffff8000008121f2 <FAT32_lookup+0x9e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:655 (discriminator 1)
ffff8000008121cb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008121cf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008121d3:	83 e0 01             	and    eax,0x1
ffff8000008121d6:	48 85 c0             	test   rax,rax
ffff8000008121d9:	74 17                	je     ffff8000008121f2 <FAT32_lookup+0x9e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:657
	{
		p->attribute |= FS_ATTR_DEVICE;
ffff8000008121db:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008121df:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008121e3:	48 83 c8 04          	or     rax,0x4
ffff8000008121e7:	48 89 c2             	mov    rdx,rax
ffff8000008121ea:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008121ee:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:660
	}

	dest_dentry->dir_inode = p;
ffff8000008121f2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008121f6:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008121fa:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:661
    kmfree(buf);
ffff8000008121fe:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000812202:	48 89 c7             	mov    rdi,rax
ffff800000812205:	49 89 df             	mov    r15,rbx
ffff800000812208:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000081220f:	ff ff ff 
ffff800000812212:	48 01 d8             	add    rax,rbx
ffff800000812215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:662
	return dest_dentry;	
ffff800000812217:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:663
}
ffff80000081221b:	48 83 c4 60          	add    rsp,0x60
ffff80000081221f:	5b                   	pop    rbx
ffff800000812220:	41 5f                	pop    r15
ffff800000812222:	5d                   	pop    rbp
ffff800000812223:	c3                   	ret    

ffff800000812224 <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:667


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff800000812224:	f3 0f 1e fa          	endbr64 
ffff800000812228:	55                   	push   rbp
ffff800000812229:	48 89 e5             	mov    rbp,rsp
ffff80000081222c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081222c <FAT32_mkdir+0x8>
ffff800000812233:	49 bb 54 08 01 00 00 	movabs r11,0x10854
ffff80000081223a:	00 00 00 
ffff80000081223d:	4c 01 d8             	add    rax,r11
ffff800000812240:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812244:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000812248:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000081224b:	90                   	nop
ffff80000081224c:	5d                   	pop    rbp
ffff80000081224d:	c3                   	ret    

ffff80000081224e <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:671


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
ffff80000081224e:	f3 0f 1e fa          	endbr64 
ffff800000812252:	55                   	push   rbp
ffff800000812253:	48 89 e5             	mov    rbp,rsp
ffff800000812256:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812256 <FAT32_rmdir+0x8>
ffff80000081225d:	49 bb 2a 08 01 00 00 	movabs r11,0x1082a
ffff800000812264:	00 00 00 
ffff800000812267:	4c 01 d8             	add    rax,r11
ffff80000081226a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081226e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000812272:	90                   	nop
ffff800000812273:	5d                   	pop    rbp
ffff800000812274:	c3                   	ret    

ffff800000812275 <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:674

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
ffff800000812275:	f3 0f 1e fa          	endbr64 
ffff800000812279:	55                   	push   rbp
ffff80000081227a:	48 89 e5             	mov    rbp,rsp
ffff80000081227d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081227d <FAT32_rename+0x8>
ffff800000812284:	49 bb 03 08 01 00 00 	movabs r11,0x10803
ffff80000081228b:	00 00 00 
ffff80000081228e:	4c 01 d8             	add    rax,r11
ffff800000812291:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812295:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000812299:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081229d:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff8000008122a1:	90                   	nop
ffff8000008122a2:	5d                   	pop    rbp
ffff8000008122a3:	c3                   	ret    

ffff8000008122a4 <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:677

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff8000008122a4:	f3 0f 1e fa          	endbr64 
ffff8000008122a8:	55                   	push   rbp
ffff8000008122a9:	48 89 e5             	mov    rbp,rsp
ffff8000008122ac:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008122ac <FAT32_getattr+0x8>
ffff8000008122b3:	49 bb d4 07 01 00 00 	movabs r11,0x107d4
ffff8000008122ba:	00 00 00 
ffff8000008122bd:	4c 01 d8             	add    rax,r11
ffff8000008122c0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008122c4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008122c8:	90                   	nop
ffff8000008122c9:	5d                   	pop    rbp
ffff8000008122ca:	c3                   	ret    

ffff8000008122cb <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:680

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff8000008122cb:	f3 0f 1e fa          	endbr64 
ffff8000008122cf:	55                   	push   rbp
ffff8000008122d0:	48 89 e5             	mov    rbp,rsp
ffff8000008122d3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008122d3 <FAT32_setattr+0x8>
ffff8000008122da:	49 bb ad 07 01 00 00 	movabs r11,0x107ad
ffff8000008122e1:	00 00 00 
ffff8000008122e4:	4c 01 d8             	add    rax,r11
ffff8000008122e7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008122eb:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008122ef:	90                   	nop
ffff8000008122f0:	5d                   	pop    rbp
ffff8000008122f1:	c3                   	ret    

ffff8000008122f2 <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:695
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
ffff8000008122f2:	f3 0f 1e fa          	endbr64 
ffff8000008122f6:	55                   	push   rbp
ffff8000008122f7:	48 89 e5             	mov    rbp,rsp
ffff8000008122fa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008122fa <FAT32_compare+0x8>
ffff800000812301:	49 bb 86 07 01 00 00 	movabs r11,0x10786
ffff800000812308:	00 00 00 
ffff80000081230b:	4c 01 d8             	add    rax,r11
ffff80000081230e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812312:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000812316:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081231a:	90                   	nop
ffff80000081231b:	5d                   	pop    rbp
ffff80000081231c:	c3                   	ret    

ffff80000081231d <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:696
long FAT32_hash(struct dir_entry * dentry,char * filename){}
ffff80000081231d:	f3 0f 1e fa          	endbr64 
ffff800000812321:	55                   	push   rbp
ffff800000812322:	48 89 e5             	mov    rbp,rsp
ffff800000812325:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812325 <FAT32_hash+0x8>
ffff80000081232c:	49 bb 5b 07 01 00 00 	movabs r11,0x1075b
ffff800000812333:	00 00 00 
ffff800000812336:	4c 01 d8             	add    rax,r11
ffff800000812339:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081233d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000812341:	90                   	nop
ffff800000812342:	5d                   	pop    rbp
ffff800000812343:	c3                   	ret    

ffff800000812344 <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:697
long FAT32_release(struct dir_entry * dentry){}
ffff800000812344:	f3 0f 1e fa          	endbr64 
ffff800000812348:	55                   	push   rbp
ffff800000812349:	48 89 e5             	mov    rbp,rsp
ffff80000081234c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081234c <FAT32_release+0x8>
ffff800000812353:	49 bb 34 07 01 00 00 	movabs r11,0x10734
ffff80000081235a:	00 00 00 
ffff80000081235d:	4c 01 d8             	add    rax,r11
ffff800000812360:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812364:	90                   	nop
ffff800000812365:	5d                   	pop    rbp
ffff800000812366:	c3                   	ret    

ffff800000812367 <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:698
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
ffff800000812367:	f3 0f 1e fa          	endbr64 
ffff80000081236b:	55                   	push   rbp
ffff80000081236c:	48 89 e5             	mov    rbp,rsp
ffff80000081236f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081236f <FAT32_iput+0x8>
ffff800000812376:	49 bb 11 07 01 00 00 	movabs r11,0x10711
ffff80000081237d:	00 00 00 
ffff800000812380:	4c 01 d8             	add    rax,r11
ffff800000812383:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812387:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081238b:	90                   	nop
ffff80000081238c:	5d                   	pop    rbp
ffff80000081238d:	c3                   	ret    

ffff80000081238e <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:710
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
ffff80000081238e:	f3 0f 1e fa          	endbr64 
ffff800000812392:	55                   	push   rbp
ffff800000812393:	48 89 e5             	mov    rbp,rsp
ffff800000812396:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812396 <fat32_write_superblock+0x8>
ffff80000081239d:	49 bb ea 06 01 00 00 	movabs r11,0x106ea
ffff8000008123a4:	00 00 00 
ffff8000008123a7:	4c 01 d8             	add    rax,r11
ffff8000008123aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008123ae:	90                   	nop
ffff8000008123af:	5d                   	pop    rbp
ffff8000008123b0:	c3                   	ret    

ffff8000008123b1 <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:713

void fat32_put_superblock(struct super_block * sb)
{
ffff8000008123b1:	f3 0f 1e fa          	endbr64 
ffff8000008123b5:	55                   	push   rbp
ffff8000008123b6:	48 89 e5             	mov    rbp,rsp
ffff8000008123b9:	41 57                	push   r15
ffff8000008123bb:	53                   	push   rbx
ffff8000008123bc:	48 83 ec 10          	sub    rsp,0x10
ffff8000008123c0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008123c0 <fat32_put_superblock+0xf>
ffff8000008123c7:	49 bb c0 06 01 00 00 	movabs r11,0x106c0
ffff8000008123ce:	00 00 00 
ffff8000008123d1:	4c 01 db             	add    rbx,r11
ffff8000008123d4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714
    kmfree(sb->private_sb_info);
ffff8000008123d8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008123dc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008123e0:	48 89 c7             	mov    rdi,rax
ffff8000008123e3:	49 89 df             	mov    r15,rbx
ffff8000008123e6:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff8000008123ed:	ff ff ff 
ffff8000008123f0:	48 01 d8             	add    rax,rbx
ffff8000008123f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
    kmfree(sb->root->dir_inode->private_index_info);
ffff8000008123f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008123f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008123fc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812400:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000812404:	48 89 c7             	mov    rdi,rax
ffff800000812407:	49 89 df             	mov    r15,rbx
ffff80000081240a:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000812411:	ff ff ff 
ffff800000812414:	48 01 d8             	add    rax,rbx
ffff800000812417:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:716
    kmfree(sb->root->dir_inode);
ffff800000812419:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081241d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812420:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812424:	48 89 c7             	mov    rdi,rax
ffff800000812427:	49 89 df             	mov    r15,rbx
ffff80000081242a:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000812431:	ff ff ff 
ffff800000812434:	48 01 d8             	add    rax,rbx
ffff800000812437:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:717
    kmfree(sb->root);
ffff800000812439:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081243d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812440:	48 89 c7             	mov    rdi,rax
ffff800000812443:	49 89 df             	mov    r15,rbx
ffff800000812446:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff80000081244d:	ff ff ff 
ffff800000812450:	48 01 d8             	add    rax,rbx
ffff800000812453:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:718
    kmfree(sb);
ffff800000812455:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812459:	48 89 c7             	mov    rdi,rax
ffff80000081245c:	49 89 df             	mov    r15,rbx
ffff80000081245f:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000812466:	ff ff ff 
ffff800000812469:	48 01 d8             	add    rax,rbx
ffff80000081246c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719
}
ffff80000081246e:	90                   	nop
ffff80000081246f:	48 83 c4 10          	add    rsp,0x10
ffff800000812473:	5b                   	pop    rbx
ffff800000812474:	41 5f                	pop    r15
ffff800000812476:	5d                   	pop    rbp
ffff800000812477:	c3                   	ret    

ffff800000812478 <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:722

void fat32_write_inode(struct index_node * inode)
{
ffff800000812478:	f3 0f 1e fa          	endbr64 
ffff80000081247c:	55                   	push   rbp
ffff80000081247d:	48 89 e5             	mov    rbp,rsp
ffff800000812480:	41 57                	push   r15
ffff800000812482:	53                   	push   rbx
ffff800000812483:	48 83 ec 40          	sub    rsp,0x40
ffff800000812487:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812487 <fat32_write_inode+0xf>
ffff80000081248e:	49 bb f9 05 01 00 00 	movabs r11,0x105f9
ffff800000812495:	00 00 00 
ffff800000812498:	4c 01 db             	add    rbx,r11
ffff80000081249b:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723
	struct FAT32_Directory * fdentry = NULL;
ffff80000081249f:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008124a6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:724
	struct FAT32_Directory * buf = NULL;
ffff8000008124a7:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008124ae:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:725
	struct FAT32_inode_info * finode = inode->private_index_info;
ffff8000008124af:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008124b3:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008124b7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:726
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
ffff8000008124bb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008124bf:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008124c3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008124c7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:727
	unsigned long sector = 0;
ffff8000008124cb:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008124d2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:729

	if(finode->dentry_location == 0)
ffff8000008124d3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008124d7:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008124db:	48 85 c0             	test   rax,rax
ffff8000008124de:	75 2d                	jne    ffff80000081250d <fat32_write_inode+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:731
	{
		printf("FS ERROR:write root inode!\n");	
ffff8000008124e0:	48 b8 6c da ff ff ff 	movabs rax,0xffffffffffffda6c
ffff8000008124e7:	ff ff ff 
ffff8000008124ea:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008124ee:	48 89 c7             	mov    rdi,rax
ffff8000008124f1:	49 89 df             	mov    r15,rbx
ffff8000008124f4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008124f9:	48 ba 5c ed fd ff ff 	movabs rdx,0xfffffffffffded5c
ffff800000812500:	ff ff ff 
ffff800000812503:	48 01 da             	add    rdx,rbx
ffff800000812506:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
		return ;
ffff800000812508:	e9 8b 01 00 00       	jmp    ffff800000812698 <fat32_write_inode+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:735
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
ffff80000081250d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812511:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000812515:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812519:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000081251d:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000812521:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812525:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812529:	48 0f af c2          	imul   rax,rdx
ffff80000081252d:	48 01 c8             	add    rax,rcx
ffff800000812530:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:736
	buf = (struct FAT32_Directory *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000812534:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812538:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081253c:	be 00 00 00 00       	mov    esi,0x0
ffff800000812541:	48 89 c7             	mov    rdi,rax
ffff800000812544:	49 89 df             	mov    r15,rbx
ffff800000812547:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081254c:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000812553:	ff ff ff 
ffff800000812556:	48 01 da             	add    rdx,rbx
ffff800000812559:	ff d2                	call   rdx
ffff80000081255b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:737
	memset(buf,0,fsbi->bytes_per_cluster);
ffff80000081255f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812563:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812567:	89 c2                	mov    edx,eax
ffff800000812569:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081256d:	be 00 00 00 00       	mov    esi,0x0
ffff800000812572:	48 89 c7             	mov    rdi,rax
ffff800000812575:	49 89 df             	mov    r15,rbx
ffff800000812578:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000081257f:	ff ff ff 
ffff800000812582:	48 01 d8             	add    rax,rbx
ffff800000812585:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:738
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff800000812587:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081258b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081258f:	89 c1                	mov    ecx,eax
ffff800000812591:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812595:	89 c2                	mov    edx,eax
ffff800000812597:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081259b:	49 89 c0             	mov    r8,rax
ffff80000081259e:	be 00 00 00 00       	mov    esi,0x0
ffff8000008125a3:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008125a8:	49 89 df             	mov    r15,rbx
ffff8000008125ab:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff8000008125b2:	ff ff ff 
ffff8000008125b5:	48 01 d8             	add    rax,rbx
ffff8000008125b8:	ff d0                	call   rax
ffff8000008125ba:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739
    chk_result(r);
ffff8000008125bd:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008125c0:	89 c7                	mov    edi,eax
ffff8000008125c2:	49 89 df             	mov    r15,rbx
ffff8000008125c5:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff8000008125cc:	ff ff ff 
ffff8000008125cf:	48 01 d8             	add    rax,rbx
ffff8000008125d2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
    fdentry = buf+finode->dentry_position;
ffff8000008125d4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008125d8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008125dc:	48 c1 e0 05          	shl    rax,0x5
ffff8000008125e0:	48 89 c2             	mov    rdx,rax
ffff8000008125e3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008125e7:	48 01 d0             	add    rax,rdx
ffff8000008125ea:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
ffff8000008125ee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008125f2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008125f5:	89 c2                	mov    edx,eax
ffff8000008125f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008125fb:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
ffff8000008125fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812602:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812605:	89 c2                	mov    edx,eax
ffff800000812607:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081260b:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:745
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
ffff80000081260f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812613:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000812617:	66 25 00 f0          	and    ax,0xf000
ffff80000081261b:	89 c2                	mov    edx,eax
ffff80000081261d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812621:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812624:	48 c1 e8 10          	shr    rax,0x10
ffff800000812628:	09 c2                	or     edx,eax
ffff80000081262a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081262e:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:747

	int r1=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff800000812632:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812636:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081263a:	89 c1                	mov    ecx,eax
ffff80000081263c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812640:	89 c2                	mov    edx,eax
ffff800000812642:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812646:	49 89 c0             	mov    r8,rax
ffff800000812649:	be 01 00 00 00       	mov    esi,0x1
ffff80000081264e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812653:	49 89 df             	mov    r15,rbx
ffff800000812656:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000081265d:	ff ff ff 
ffff800000812660:	48 01 d8             	add    rax,rbx
ffff800000812663:	ff d0                	call   rax
ffff800000812665:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:748
    chk_result(r1);
ffff800000812668:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff80000081266b:	89 c7                	mov    edi,eax
ffff80000081266d:	49 89 df             	mov    r15,rbx
ffff800000812670:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff800000812677:	ff ff ff 
ffff80000081267a:	48 01 d8             	add    rax,rbx
ffff80000081267d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:749
    kmfree(buf);
ffff80000081267f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812683:	48 89 c7             	mov    rdi,rax
ffff800000812686:	49 89 df             	mov    r15,rbx
ffff800000812689:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000812690:	ff ff ff 
ffff800000812693:	48 01 d8             	add    rax,rbx
ffff800000812696:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:750
}
ffff800000812698:	48 83 c4 40          	add    rsp,0x40
ffff80000081269c:	5b                   	pop    rbx
ffff80000081269d:	41 5f                	pop    r15
ffff80000081269f:	5d                   	pop    rbp
ffff8000008126a0:	c3                   	ret    

ffff8000008126a1 <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:761

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff8000008126a1:	f3 0f 1e fa          	endbr64 
ffff8000008126a5:	55                   	push   rbp
ffff8000008126a6:	48 89 e5             	mov    rbp,rsp
ffff8000008126a9:	41 57                	push   r15
ffff8000008126ab:	53                   	push   rbx
ffff8000008126ac:	48 83 ec 50          	sub    rsp,0x50
ffff8000008126b0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008126b0 <fat32_read_superblock+0xf>
ffff8000008126b7:	49 bb d0 03 01 00 00 	movabs r11,0x103d0
ffff8000008126be:	00 00 00 
ffff8000008126c1:	4c 01 db             	add    rbx,r11
ffff8000008126c4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff8000008126c8:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:762
	struct super_block * sbp = NULL;
ffff8000008126cc:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008126d3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763
	struct FAT32_inode_info * finode = NULL;
ffff8000008126d4:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008126db:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:764
	struct FAT32_BootSector * fbs = NULL;
ffff8000008126dc:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff8000008126e3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:765
	struct FAT32_sb_info * fsbi = NULL;
ffff8000008126e4:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008126eb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:768

	////super block
	sbp = (struct super_block *) kmalloc(sizeof(struct super_block), 0);
ffff8000008126ec:	be 00 00 00 00       	mov    esi,0x0
ffff8000008126f1:	bf 18 00 00 00       	mov    edi,0x18
ffff8000008126f6:	49 89 df             	mov    r15,rbx
ffff8000008126f9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008126fe:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000812705:	ff ff ff 
ffff800000812708:	48 01 da             	add    rdx,rbx
ffff80000081270b:	ff d2                	call   rdx
ffff80000081270d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:769
	memset(sbp,0,sizeof(struct super_block));
ffff800000812711:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812715:	ba 18 00 00 00       	mov    edx,0x18
ffff80000081271a:	be 00 00 00 00       	mov    esi,0x0
ffff80000081271f:	48 89 c7             	mov    rdi,rax
ffff800000812722:	49 89 df             	mov    r15,rbx
ffff800000812725:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000081272c:	ff ff ff 
ffff80000081272f:	48 01 d8             	add    rax,rbx
ffff800000812732:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771

	sbp->sb_ops = &FAT32_sb_ops;
ffff800000812734:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812738:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff80000081273f:	ff ff ff 
ffff800000812742:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812746:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
	sbp->private_sb_info = (struct FAT32_sb_info *) kmalloc(sizeof(struct FAT32_sb_info), 0);
ffff80000081274a:	be 00 00 00 00       	mov    esi,0x0
ffff80000081274f:	bf 60 00 00 00       	mov    edi,0x60
ffff800000812754:	49 89 df             	mov    r15,rbx
ffff800000812757:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081275c:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000812763:	ff ff ff 
ffff800000812766:	48 01 da             	add    rdx,rbx
ffff800000812769:	ff d2                	call   rdx
ffff80000081276b:	48 89 c2             	mov    rdx,rax
ffff80000081276e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812772:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:773
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
ffff800000812776:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081277a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081277e:	ba 60 00 00 00       	mov    edx,0x60
ffff800000812783:	be 00 00 00 00       	mov    esi,0x0
ffff800000812788:	48 89 c7             	mov    rdi,rax
ffff80000081278b:	49 89 df             	mov    r15,rbx
ffff80000081278e:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000812795:	ff ff ff 
ffff800000812798:	48 01 d8             	add    rax,rbx
ffff80000081279b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
ffff80000081279d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008127a1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
 	fsbi = sbp->private_sb_info;
ffff8000008127a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008127a9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008127ad:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->start_sector = DPTE->start_LBA;
ffff8000008127b1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008127b5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008127b8:	89 c2                	mov    edx,eax
ffff8000008127ba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008127be:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->sector_count = DPTE->sectors_limit;
ffff8000008127c1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008127c5:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff8000008127c8:	89 c2                	mov    edx,eax
ffff8000008127ca:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008127ce:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
ffff8000008127d2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008127d6:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff8000008127da:	0f b6 d0             	movzx  edx,al
ffff8000008127dd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008127e1:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
ffff8000008127e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008127e9:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff8000008127ed:	0f b6 d0             	movzx  edx,al
ffff8000008127f0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008127f4:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff8000008127f8:	0f b7 c0             	movzx  eax,ax
ffff8000008127fb:	0f af c2             	imul   eax,edx
ffff8000008127fe:	48 63 d0             	movsxd rdx,eax
ffff800000812801:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812805:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
ffff800000812809:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081280d:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff800000812811:	0f b7 d0             	movzx  edx,ax
ffff800000812814:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812818:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:783
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
ffff80000081281c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812820:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000812823:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812827:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff80000081282b:	0f b7 c0             	movzx  eax,ax
ffff80000081282e:	8d 0c 02             	lea    ecx,[rdx+rax*1]
ffff800000812831:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812835:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff800000812838:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081283c:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000812840:	0f b6 c0             	movzx  eax,al
ffff800000812843:	0f af c2             	imul   eax,edx
ffff800000812846:	01 c8                	add    eax,ecx
ffff800000812848:	89 c2                	mov    edx,eax
ffff80000081284a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081284e:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:784
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
ffff800000812852:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812856:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000812859:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081285d:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff800000812861:	0f b7 c0             	movzx  eax,ax
ffff800000812864:	01 d0                	add    eax,edx
ffff800000812866:	89 c2                	mov    edx,eax
ffff800000812868:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081286c:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:785
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
ffff800000812870:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812874:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000812877:	89 c2                	mov    edx,eax
ffff800000812879:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081287d:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:786
	fsbi->NumFATs = fbs->BPB_NumFATs;
ffff800000812881:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812885:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000812889:	0f b6 d0             	movzx  edx,al
ffff80000081288c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812890:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:787
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
ffff800000812894:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812898:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff80000081289c:	0f b7 d0             	movzx  edx,ax
ffff80000081289f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008128a3:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:788
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
ffff8000008128a7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008128ab:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff8000008128af:	0f b7 d0             	movzx  edx,ax
ffff8000008128b2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008128b6:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:790
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
ffff8000008128ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008128be:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
ffff8000008128c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008128c5:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff8000008128c9:	0f b7 d0             	movzx  edx,ax
ffff8000008128cc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008128d0:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff8000008128d4:	0f b7 c0             	movzx  eax,ax
ffff8000008128d7:	89 c6                	mov    esi,eax
ffff8000008128d9:	48 b8 88 da ff ff ff 	movabs rax,0xffffffffffffda88
ffff8000008128e0:	ff ff ff 
ffff8000008128e3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008128e7:	48 89 c7             	mov    rdi,rax
ffff8000008128ea:	49 89 df             	mov    r15,rbx
ffff8000008128ed:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008128f2:	49 b8 5c ed fd ff ff 	movabs r8,0xfffffffffffded5c
ffff8000008128f9:	ff ff ff 
ffff8000008128fc:	49 01 d8             	add    r8,rbx
ffff8000008128ff:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:793
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmalloc(sizeof(struct FAT32_FSInfo), 0);
ffff800000812902:	be 00 00 00 00       	mov    esi,0x0
ffff800000812907:	bf 00 02 00 00       	mov    edi,0x200
ffff80000081290c:	49 89 df             	mov    r15,rbx
ffff80000081290f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812914:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff80000081291b:	ff ff ff 
ffff80000081291e:	48 01 da             	add    rdx,rbx
ffff800000812921:	ff d2                	call   rdx
ffff800000812923:	48 89 c2             	mov    rdx,rax
ffff800000812926:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081292a:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	memset(fsbi->fat_fsinfo,0,512);
ffff80000081292e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812932:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000812936:	ba 00 02 00 00       	mov    edx,0x200
ffff80000081293b:	be 00 00 00 00       	mov    esi,0x0
ffff800000812940:	48 89 c7             	mov    rdi,rax
ffff800000812943:	49 89 df             	mov    r15,rbx
ffff800000812946:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff80000081294d:	ff ff ff 
ffff800000812950:	48 01 d8             	add    rax,rbx
ffff800000812953:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:795
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,DPTE->start_LBA + fbs->BPB_FSInfo,1,(unsigned char *)fsbi->fat_fsinfo);
ffff800000812955:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812959:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff80000081295d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812961:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff800000812964:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812968:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff80000081296c:	0f b7 c0             	movzx  eax,ax
ffff80000081296f:	01 c8                	add    eax,ecx
ffff800000812971:	49 89 d0             	mov    r8,rdx
ffff800000812974:	b9 01 00 00 00       	mov    ecx,0x1
ffff800000812979:	89 c2                	mov    edx,eax
ffff80000081297b:	be 00 00 00 00       	mov    esi,0x0
ffff800000812980:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812985:	49 89 df             	mov    r15,rbx
ffff800000812988:	48 b8 8a c3 fe ff ff 	movabs rax,0xfffffffffffec38a
ffff80000081298f:	ff ff ff 
ffff800000812992:	48 01 d8             	add    rax,rbx
ffff800000812995:	ff d0                	call   rax
ffff800000812997:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:796
    chk_result(r);
ffff80000081299a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000081299d:	89 c7                	mov    edi,eax
ffff80000081299f:	49 89 df             	mov    r15,rbx
ffff8000008129a2:	48 b8 4d ce fe ff ff 	movabs rax,0xfffffffffffece4d
ffff8000008129a9:	ff ff ff 
ffff8000008129ac:	48 01 d8             	add    rax,rbx
ffff8000008129af:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:797
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
ffff8000008129b1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008129b5:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff8000008129b9:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
ffff8000008129bf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008129c3:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff8000008129c7:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
ffff8000008129cd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008129d1:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff8000008129d5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008129d7:	89 c6                	mov    esi,eax
ffff8000008129d9:	48 b8 d0 da ff ff ff 	movabs rax,0xffffffffffffdad0
ffff8000008129e0:	ff ff ff 
ffff8000008129e3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008129e7:	48 89 c7             	mov    rdi,rax
ffff8000008129ea:	49 89 df             	mov    r15,rbx
ffff8000008129ed:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008129f2:	49 b8 5c ed fd ff ff 	movabs r8,0xfffffffffffded5c
ffff8000008129f9:	ff ff ff 
ffff8000008129fc:	49 01 d8             	add    r8,rbx
ffff8000008129ff:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:800
	
	////directory entry
	sbp->root = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff800000812a02:	be 00 00 00 00       	mov    esi,0x0
ffff800000812a07:	bf 58 00 00 00       	mov    edi,0x58
ffff800000812a0c:	49 89 df             	mov    r15,rbx
ffff800000812a0f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812a14:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000812a1b:	ff ff ff 
ffff800000812a1e:	48 01 da             	add    rdx,rbx
ffff800000812a21:	ff d2                	call   rdx
ffff800000812a23:	48 89 c2             	mov    rdx,rax
ffff800000812a26:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812a2a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801
	memset(sbp->root,0,sizeof(struct dir_entry));
ffff800000812a2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812a31:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812a34:	ba 58 00 00 00       	mov    edx,0x58
ffff800000812a39:	be 00 00 00 00       	mov    esi,0x0
ffff800000812a3e:	48 89 c7             	mov    rdi,rax
ffff800000812a41:	49 89 df             	mov    r15,rbx
ffff800000812a44:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000812a4b:	ff ff ff 
ffff800000812a4e:	48 01 d8             	add    rax,rbx
ffff800000812a51:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:803

	list_init(&sbp->root->child_node);
ffff800000812a53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812a57:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812a5a:	48 83 c0 10          	add    rax,0x10
ffff800000812a5e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000812a62:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812a66:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000812a6d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812a71:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000812a78:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000812a79:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:804
	list_init(&sbp->root->subdirs_list);
ffff800000812a7a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812a7e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812a81:	48 83 c0 28          	add    rax,0x28
ffff800000812a85:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000812a89:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812a8d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000812a94:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812a98:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000812a9f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000812aa0:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:805
	sbp->root->parent = sbp->root;
ffff800000812aa1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812aa5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812aa8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000812aac:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000812aaf:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806
	sbp->root->dir_ops = &FAT32_dentry_ops;
ffff800000812ab3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812ab7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812aba:	48 ba 20 ff ff ff ff 	movabs rdx,0xffffffffffffff20
ffff800000812ac1:	ff ff ff 
ffff800000812ac4:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812ac8:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	sbp->root->name = (char *) kmalloc(2, 0);
ffff800000812acc:	be 00 00 00 00       	mov    esi,0x0
ffff800000812ad1:	bf 02 00 00 00       	mov    edi,0x2
ffff800000812ad6:	49 89 df             	mov    r15,rbx
ffff800000812ad9:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812ade:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000812ae5:	ff ff ff 
ffff800000812ae8:	48 01 da             	add    rdx,rbx
ffff800000812aeb:	ff d2                	call   rdx
ffff800000812aed:	48 89 c2             	mov    rdx,rax
ffff800000812af0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812af4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812af7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:808
	sbp->root->name[0] = '/';
ffff800000812afa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812afe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812b01:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812b04:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:809
	sbp->root->name_length = 1;
ffff800000812b07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b0b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812b0e:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812

	////index node
	sbp->root->dir_inode = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff800000812b15:	be 00 00 00 00       	mov    esi,0x0
ffff800000812b1a:	bf 38 00 00 00       	mov    edi,0x38
ffff800000812b1f:	49 89 df             	mov    r15,rbx
ffff800000812b22:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812b27:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000812b2e:	ff ff ff 
ffff800000812b31:	48 01 da             	add    rdx,rbx
ffff800000812b34:	ff d2                	call   rdx
ffff800000812b36:	48 89 c2             	mov    rdx,rax
ffff800000812b39:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b3d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812b40:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:813
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
ffff800000812b44:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b48:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812b4b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812b4f:	ba 38 00 00 00       	mov    edx,0x38
ffff800000812b54:	be 00 00 00 00       	mov    esi,0x0
ffff800000812b59:	48 89 c7             	mov    rdi,rax
ffff800000812b5c:	49 89 df             	mov    r15,rbx
ffff800000812b5f:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000812b66:	ff ff ff 
ffff800000812b69:	48 01 d8             	add    rax,rbx
ffff800000812b6c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:814
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
ffff800000812b6e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b72:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812b75:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812b79:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff800000812b80:	ff ff ff 
ffff800000812b83:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812b87:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:815
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
ffff800000812b8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b8f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812b92:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812b96:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff800000812b9d:	ff ff ff 
ffff800000812ba0:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812ba4:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816
	sbp->root->dir_inode->file_size = 0;
ffff800000812ba8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812bac:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812baf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812bb3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000812bba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812bbe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812bc1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812bc5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812bc8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812bcc:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812bd0:	48 01 d0             	add    rax,rdx
ffff800000812bd3:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000812bd7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812bdb:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812bdf:	48 89 c6             	mov    rsi,rax
ffff800000812be2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812be6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812be9:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffff800000812bed:	48 89 d0             	mov    rax,rdx
ffff800000812bf0:	ba 00 00 00 00       	mov    edx,0x0
ffff800000812bf5:	48 f7 f6             	div    rsi
ffff800000812bf8:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:818
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
ffff800000812bfc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812c00:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812c03:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812c07:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff800000812c0e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:819
	sbp->root->dir_inode->sb = sbp;
ffff800000812c0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812c13:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812c16:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812c1a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000812c1e:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff800000812c22:	be 00 00 00 00       	mov    esi,0x0
ffff800000812c27:	bf 20 00 00 00       	mov    edi,0x20
ffff800000812c2c:	49 89 df             	mov    r15,rbx
ffff800000812c2f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812c34:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000812c3b:	ff ff ff 
ffff800000812c3e:	48 01 da             	add    rdx,rbx
ffff800000812c41:	ff d2                	call   rdx
ffff800000812c43:	48 89 c2             	mov    rdx,rax
ffff800000812c46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812c4a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812c4d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812c51:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000812c55:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812c59:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812c5c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812c60:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000812c64:	ba 20 00 00 00       	mov    edx,0x20
ffff800000812c69:	be 00 00 00 00       	mov    esi,0x0
ffff800000812c6e:	48 89 c7             	mov    rdi,rax
ffff800000812c71:	49 89 df             	mov    r15,rbx
ffff800000812c74:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000812c7b:	ff ff ff 
ffff800000812c7e:	48 01 d8             	add    rax,rbx
ffff800000812c81:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
ffff800000812c83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812c87:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812c8a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812c8e:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000812c92:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:825
	finode->first_cluster = fbs->BPB_RootClus;
ffff800000812c96:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812c9a:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff800000812c9d:	89 c2                	mov    edx,eax
ffff800000812c9f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812ca3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:826
	finode->dentry_location = 0;
ffff800000812ca6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812caa:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff800000812cb1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827
	finode->dentry_position = 0; 
ffff800000812cb2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812cb6:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000812cbd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:828
	finode->create_date = 0;
ffff800000812cbe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812cc2:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:829
	finode->create_time = 0;
ffff800000812cc8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812ccc:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:830
	finode->write_date = 0;
ffff800000812cd2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812cd6:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:831
	finode->write_time = 0;
ffff800000812cdc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812ce0:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:833

	return sbp;
ffff800000812ce6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:834
}
ffff800000812cea:	48 83 c4 50          	add    rsp,0x50
ffff800000812cee:	5b                   	pop    rbx
ffff800000812cef:	41 5f                	pop    r15
ffff800000812cf1:	5d                   	pop    rbp
ffff800000812cf2:	c3                   	ret    

ffff800000812cf3 <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:846
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};

void DISK1_FAT32_FS_init()
{
ffff800000812cf3:	f3 0f 1e fa          	endbr64 
ffff800000812cf7:	55                   	push   rbp
ffff800000812cf8:	48 89 e5             	mov    rbp,rsp
ffff800000812cfb:	41 57                	push   r15
ffff800000812cfd:	53                   	push   rbx
ffff800000812cfe:	48 81 ec 10 04 00 00 	sub    rsp,0x410
ffff800000812d05:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812d05 <DISK1_FAT32_FS_init+0x12>
ffff800000812d0c:	49 bb 7b fd 00 00 00 	movabs r11,0xfd7b
ffff800000812d13:	00 00 00 
ffff800000812d16:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:849
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
ffff800000812d19:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000812d20:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:850
	struct Disk_Partition_Table DPT = {0};
ffff800000812d21:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000812d28:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812d2d:	b9 40 00 00 00       	mov    ecx,0x40
ffff800000812d32:	48 89 d7             	mov    rdi,rdx
ffff800000812d35:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:852

	register_filesystem(&FAT32_fs_type);
ffff800000812d38:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000812d3f:	ff ff ff 
ffff800000812d42:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000812d46:	48 89 c7             	mov    rdi,rax
ffff800000812d49:	49 89 df             	mov    r15,rbx
ffff800000812d4c:	48 b8 bf 9e fe ff ff 	movabs rax,0xfffffffffffe9ebf
ffff800000812d53:	ff ff ff 
ffff800000812d56:	48 01 d8             	add    rax,rbx
ffff800000812d59:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:854
	
	memset(buf,0,512);
ffff800000812d5b:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000812d62:	ba 00 02 00 00       	mov    edx,0x200
ffff800000812d67:	be 00 00 00 00       	mov    esi,0x0
ffff800000812d6c:	48 89 c7             	mov    rdi,rax
ffff800000812d6f:	49 89 df             	mov    r15,rbx
ffff800000812d72:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000812d79:	ff ff ff 
ffff800000812d7c:	48 01 d8             	add    rax,rbx
ffff800000812d7f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:856

    read_disk(DISK_MAJOR_MAJOR, 0, 1, buf);/*rint r= equest(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
ffff800000812d81:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000812d88:	48 89 c1             	mov    rcx,rax
ffff800000812d8b:	ba 01 00 00 00       	mov    edx,0x1
ffff800000812d90:	be 00 00 00 00       	mov    esi,0x0
ffff800000812d95:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812d9a:	49 89 df             	mov    r15,rbx
ffff800000812d9d:	48 b8 79 cc fe ff ff 	movabs rax,0xfffffffffffecc79
ffff800000812da4:	ff ff ff 
ffff800000812da7:	48 01 d8             	add    rax,rbx
ffff800000812daa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:858
    chk_result(r);*/
    DPT = *(struct Disk_Partition_Table *)buf;
ffff800000812dac:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000812db3:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
ffff800000812dba:	48 89 d6             	mov    rsi,rdx
ffff800000812dbd:	ba 40 00 00 00       	mov    edx,0x40
ffff800000812dc2:	48 89 c7             	mov    rdi,rax
ffff800000812dc5:	48 89 d1             	mov    rcx,rdx
ffff800000812dc8:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:859
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
ffff800000812dcb:	0f b6 85 a2 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x25e]
ffff800000812dd2:	0f b6 d0             	movzx  edx,al
ffff800000812dd5:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000812ddb:	89 c6                	mov    esi,eax
ffff800000812ddd:	48 b8 18 db ff ff ff 	movabs rax,0xffffffffffffdb18
ffff800000812de4:	ff ff ff 
ffff800000812de7:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000812deb:	48 89 c7             	mov    rdi,rax
ffff800000812dee:	49 89 df             	mov    r15,rbx
ffff800000812df1:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812df6:	48 b9 5c ed fd ff ff 	movabs rcx,0xfffffffffffded5c
ffff800000812dfd:	ff ff ff 
ffff800000812e00:	48 01 d9             	add    rcx,rbx
ffff800000812e03:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:861

	memset(buf,0,512);
ffff800000812e05:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000812e0c:	ba 00 02 00 00       	mov    edx,0x200
ffff800000812e11:	be 00 00 00 00       	mov    esi,0x0
ffff800000812e16:	48 89 c7             	mov    rdi,rax
ffff800000812e19:	49 89 df             	mov    r15,rbx
ffff800000812e1c:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff800000812e23:	ff ff ff 
ffff800000812e26:	48 01 d8             	add    rax,rbx
ffff800000812e29:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:862
    read_disk(DISK_MAJOR_MAJOR, DPT.DPTE[0].start_LBA, 1, buf);
ffff800000812e2b:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000812e31:	89 c6                	mov    esi,eax
ffff800000812e33:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000812e3a:	48 89 c1             	mov    rcx,rax
ffff800000812e3d:	ba 01 00 00 00       	mov    edx,0x1
ffff800000812e42:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812e47:	49 89 df             	mov    r15,rbx
ffff800000812e4a:	48 b8 79 cc fe ff ff 	movabs rax,0xfffffffffffecc79
ffff800000812e51:	ff ff ff 
ffff800000812e54:	48 01 d8             	add    rax,rbx
ffff800000812e57:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:867
	/*int r1=request(DISK_MAJOR_MAJOR,DISKREQ_READ,DPT.DPTE[0].start_LBA,1,(unsigned char *)buf);
    chk_result(r1);*/

    //挂载新文件系统到/mnt
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
ffff800000812e59:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000812e60:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000812e67:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
ffff800000812e6e:	48 89 c2             	mov    rdx,rax
ffff800000812e71:	48 89 ce             	mov    rsi,rcx
ffff800000812e74:	48 b8 12 db ff ff ff 	movabs rax,0xffffffffffffdb12
ffff800000812e7b:	ff ff ff 
ffff800000812e7e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000812e82:	48 89 c7             	mov    rdi,rax
ffff800000812e85:	49 89 df             	mov    r15,rbx
ffff800000812e88:	48 b8 12 9e fe ff ff 	movabs rax,0xfffffffffffe9e12
ffff800000812e8f:	ff ff ff 
ffff800000812e92:	48 01 d8             	add    rax,rbx
ffff800000812e95:	ff d0                	call   rax
ffff800000812e97:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:868
    fat32_sb->root=dmnt;
ffff800000812e9b:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000812ea2:	ff ff ff 
ffff800000812ea5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000812ea9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812eac:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812eb0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:870
//    list_add_to_behind(&root_sb->root->subdirs_list,ddev);//把dev文件夹挂到新的rfs下
}
ffff800000812eb3:	90                   	nop
ffff800000812eb4:	48 81 c4 10 04 00 00 	add    rsp,0x410
ffff800000812ebb:	5b                   	pop    rbx
ffff800000812ebc:	41 5f                	pop    r15
ffff800000812ebe:	5d                   	pop    rbp
ffff800000812ebf:	c3                   	ret    

ffff800000812ec0 <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
ffff800000812ec0:	f3 0f 1e fa          	endbr64 
ffff800000812ec4:	55                   	push   rbp
ffff800000812ec5:	48 89 e5             	mov    rbp,rsp
ffff800000812ec8:	41 57                	push   r15
ffff800000812eca:	53                   	push   rbx
ffff800000812ecb:	48 83 ec 30          	sub    rsp,0x30
ffff800000812ecf:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812ecf <close_tty+0xf>
ffff800000812ed6:	49 bb b1 fb 00 00 00 	movabs r11,0xfbb1
ffff800000812edd:	00 00 00 
ffff800000812ee0:	4c 01 db             	add    rbx,r11
ffff800000812ee3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000812ee7:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000812eeb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812eef:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812ef3:	48 83 c0 18          	add    rax,0x18
ffff800000812ef7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000812efb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812eff:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812f03:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000812f07:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812f0b:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812f0f:	48 83 c0 30          	add    rax,0x30
ffff800000812f13:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
ffff800000812f17:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812f1b:	48 89 c7             	mov    rdi,rax
ffff800000812f1e:	49 89 df             	mov    r15,rbx
ffff800000812f21:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000812f28:	ff ff ff 
ffff800000812f2b:	48 01 d8             	add    rax,rbx
ffff800000812f2e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
ffff800000812f30:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812f34:	48 89 c7             	mov    rdi,rax
ffff800000812f37:	49 89 df             	mov    r15,rbx
ffff800000812f3a:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000812f41:	ff ff ff 
ffff800000812f44:	48 01 d8             	add    rax,rbx
ffff800000812f47:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
ffff800000812f49:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812f4d:	48 89 c7             	mov    rdi,rax
ffff800000812f50:	49 89 df             	mov    r15,rbx
ffff800000812f53:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000812f5a:	ff ff ff 
ffff800000812f5d:	48 01 d8             	add    rax,rbx
ffff800000812f60:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
ffff800000812f62:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812f66:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812f6a:	48 89 c7             	mov    rdi,rax
ffff800000812f6d:	49 89 df             	mov    r15,rbx
ffff800000812f70:	48 b8 9d f9 fd ff ff 	movabs rax,0xfffffffffffdf99d
ffff800000812f77:	ff ff ff 
ffff800000812f7a:	48 01 d8             	add    rax,rbx
ffff800000812f7d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
ffff800000812f7f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
ffff800000812f84:	48 83 c4 30          	add    rsp,0x30
ffff800000812f88:	5b                   	pop    rbx
ffff800000812f89:	41 5f                	pop    r15
ffff800000812f8b:	5d                   	pop    rbp
ffff800000812f8c:	c3                   	ret    

ffff800000812f8d <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
ffff800000812f8d:	f3 0f 1e fa          	endbr64 
ffff800000812f91:	55                   	push   rbp
ffff800000812f92:	48 89 e5             	mov    rbp,rsp
ffff800000812f95:	41 57                	push   r15
ffff800000812f97:	53                   	push   rbx
ffff800000812f98:	48 83 ec 20          	sub    rsp,0x20
ffff800000812f9c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812f9c <init_tty+0xf>
ffff800000812fa3:	49 bb e4 fa 00 00 00 	movabs r11,0xfae4
ffff800000812faa:	00 00 00 
ffff800000812fad:	4c 01 db             	add    rbx,r11
ffff800000812fb0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000812fb4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc();
ffff800000812fb8:	49 89 df             	mov    r15,rbx
ffff800000812fbb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812fc0:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000812fc7:	ff ff ff 
ffff800000812fca:	48 01 da             	add    rdx,rbx
ffff800000812fcd:	ff d2                	call   rdx
ffff800000812fcf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc();
ffff800000812fd3:	49 89 df             	mov    r15,rbx
ffff800000812fd6:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812fdb:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000812fe2:	ff ff ff 
ffff800000812fe5:	48 01 da             	add    rdx,rbx
ffff800000812fe8:	ff d2                	call   rdx
ffff800000812fea:	48 89 c2             	mov    rdx,rax
ffff800000812fed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812ff1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc();
ffff800000812ff5:	49 89 df             	mov    r15,rbx
ffff800000812ff8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812ffd:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000813004:	ff ff ff 
ffff800000813007:	48 01 da             	add    rdx,rbx
ffff80000081300a:	ff d2                	call   rdx
ffff80000081300c:	48 89 c2             	mov    rdx,rax
ffff80000081300f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813013:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc();
ffff800000813016:	49 89 df             	mov    r15,rbx
ffff800000813019:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081301e:	48 ba 2e f6 fd ff ff 	movabs rdx,0xfffffffffffdf62e
ffff800000813025:	ff ff ff 
ffff800000813028:	48 01 da             	add    rdx,rbx
ffff80000081302b:	ff d2                	call   rdx
ffff80000081302d:	48 89 c2             	mov    rdx,rax
ffff800000813030:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813034:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
ffff800000813038:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081303c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
ffff800000813043:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813047:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
ffff80000081304e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813052:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
ffff800000813059:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081305d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
ffff800000813064:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813068:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
ffff80000081306f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813073:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
ffff80000081307a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081307e:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
ffff800000813085:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813089:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
ffff800000813090:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813094:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
ffff80000081309b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081309f:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff8000008130a6:	ff ff ff 
ffff8000008130a9:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008130ad:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
ffff8000008130b1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008130b5:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff8000008130bc:	ff ff ff 
ffff8000008130bf:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008130c3:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
ffff8000008130c7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008130cb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008130cf:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
ffff8000008130d3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
ffff8000008130d8:	48 83 c4 20          	add    rsp,0x20
ffff8000008130dc:	5b                   	pop    rbx
ffff8000008130dd:	41 5f                	pop    r15
ffff8000008130df:	5d                   	pop    rbp
ffff8000008130e0:	c3                   	ret    

ffff8000008130e1 <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff8000008130e1:	f3 0f 1e fa          	endbr64 
ffff8000008130e5:	55                   	push   rbp
ffff8000008130e6:	48 89 e5             	mov    rbp,rsp
ffff8000008130e9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008130e9 <read_tty+0x8>
ffff8000008130f0:	49 bb 97 f9 00 00 00 	movabs r11,0xf997
ffff8000008130f7:	00 00 00 
ffff8000008130fa:	4c 01 d8             	add    rax,r11
ffff8000008130fd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000813101:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000813105:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000813109:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
ffff80000081310d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813111:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813115:	48 83 c0 18          	add    rax,0x18
ffff800000813119:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
ffff80000081311d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000813124:	eb 6e                	jmp    ffff800000813194 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
ffff800000813126:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081312a:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000081312d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813131:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000813134:	39 c2                	cmp    edx,eax
ffff800000813136:	75 0b                	jne    ffff800000813143 <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
ffff800000813138:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081313c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
ffff800000813143:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813147:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000081314a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081314e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000813151:	39 c2                	cmp    edx,eax
ffff800000813153:	75 02                	jne    ffff800000813157 <read_tty+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
ffff800000813155:	eb 3d                	jmp    ffff800000813194 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
ffff800000813157:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081315b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081315e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813162:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000813165:	48 98                	cdqe   
ffff800000813167:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000081316b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081316e:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813171:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000813174:	48 63 d0             	movsxd rdx,eax
ffff800000813177:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081317b:	48 01 c2             	add    rdx,rax
ffff80000081317e:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000813181:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
ffff800000813183:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813187:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000081318a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081318d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813191:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000813194:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813197:	48 98                	cdqe   
ffff800000813199:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000081319d:	77 87                	ja     ffff800000813126 <read_tty+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
ffff80000081319f:	90                   	nop
ffff8000008131a0:	5d                   	pop    rbp
ffff8000008131a1:	c3                   	ret    

ffff8000008131a2 <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff8000008131a2:	f3 0f 1e fa          	endbr64 
ffff8000008131a6:	55                   	push   rbp
ffff8000008131a7:	48 89 e5             	mov    rbp,rsp
ffff8000008131aa:	41 57                	push   r15
ffff8000008131ac:	48 83 ec 48          	sub    rsp,0x48
ffff8000008131b0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008131b0 <write_tty+0xe>
ffff8000008131b7:	49 bb d0 f8 00 00 00 	movabs r11,0xf8d0
ffff8000008131be:	00 00 00 
ffff8000008131c1:	4c 01 d8             	add    rax,r11
ffff8000008131c4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008131c8:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff8000008131cc:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff8000008131d0:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
ffff8000008131d4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008131d8:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008131dc:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
ffff8000008131e0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
ffff8000008131e7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008131eb:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008131ee:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff8000008131f1:	eb 5b                	jmp    ffff80000081324e <write_tty+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
ffff8000008131f3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008131f7:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008131fa:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008131fe:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000813201:	39 d1                	cmp    ecx,edx
ffff800000813203:	75 0b                	jne    ffff800000813210 <write_tty+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
ffff800000813205:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813209:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
ffff800000813210:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000813213:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000813216:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff800000813219:	48 63 ca             	movsxd rcx,edx
ffff80000081321c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000813220:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000813224:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813228:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000081322b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081322f:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000813232:	48 63 d2             	movsxd rdx,edx
ffff800000813235:	48 01 d1             	add    rcx,rdx
ffff800000813238:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000081323b:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
ffff80000081323d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813241:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000813244:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000813247:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081324b:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff80000081324e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000813251:	48 63 d2             	movsxd rdx,edx
ffff800000813254:	48 39 55 b8          	cmp    QWORD PTR [rbp-0x48],rdx
ffff800000813258:	77 99                	ja     ffff8000008131f3 <write_tty+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff80000081325a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081325e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000813261:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000813264:	48 63 d2             	movsxd rdx,edx
ffff800000813267:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000081326b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000081326f:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffff800000813273:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000813278:	49 89 c7             	mov    r15,rax
ffff80000081327b:	49 b8 88 98 fe ff ff 	movabs r8,0xfffffffffffe9888
ffff800000813282:	ff ff ff 
ffff800000813285:	49 01 c0             	add    r8,rax
ffff800000813288:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
ffff80000081328b:	90                   	nop
ffff80000081328c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000813290:	c9                   	leave  
ffff800000813291:	c3                   	ret    

ffff800000813292 <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
ffff800000813292:	f3 0f 1e fa          	endbr64 
ffff800000813296:	55                   	push   rbp
ffff800000813297:	48 89 e5             	mov    rbp,rsp
ffff80000081329a:	41 57                	push   r15
ffff80000081329c:	48 83 ec 58          	sub    rsp,0x58
ffff8000008132a0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008132a0 <ioctl_tty+0xe>
ffff8000008132a7:	49 bb e0 f7 00 00 00 	movabs r11,0xf7e0
ffff8000008132ae:	00 00 00 
ffff8000008132b1:	4c 01 d8             	add    rax,r11
ffff8000008132b4:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff8000008132b8:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff8000008132bc:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffff8000008132c0:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
ffff8000008132c4:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008132c8:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008132cc:	48 83 c2 30          	add    rdx,0x30
ffff8000008132d0:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008132d4:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008132d8:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008132dc:	48 83 c2 18          	add    rdx,0x18
ffff8000008132e0:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
ffff8000008132e4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
ffff8000008132eb:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008132ef:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008132f2:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
ffff8000008132f6:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008132fa:	48 83 c2 08          	add    rdx,0x8
ffff8000008132fe:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000813301:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
ffff800000813305:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813309:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081330c:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
ffff80000081330f:	c7 45 c0 ff ff ff ff 	mov    DWORD PTR [rbp-0x40],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
ffff800000813316:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff80000081331b:	0f 84 b8 01 00 00    	je     ffff8000008134d9 <ioctl_tty+0x247>
ffff800000813321:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff800000813326:	0f 87 b8 01 00 00    	ja     ffff8000008134e4 <ioctl_tty+0x252>
ffff80000081332c:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff800000813331:	0f 84 0f 01 00 00    	je     ffff800000813446 <ioctl_tty+0x1b4>
ffff800000813337:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff80000081333c:	0f 87 a2 01 00 00    	ja     ffff8000008134e4 <ioctl_tty+0x252>
ffff800000813342:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff800000813347:	74 6b                	je     ffff8000008133b4 <ioctl_tty+0x122>
ffff800000813349:	48 83 7d a8 01       	cmp    QWORD PTR [rbp-0x58],0x1
ffff80000081334e:	0f 84 a2 00 00 00    	je     ffff8000008133f6 <ioctl_tty+0x164>
ffff800000813354:	e9 8b 01 00 00       	jmp    ffff8000008134e4 <ioctl_tty+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
ffff800000813359:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081335d:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000813360:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813364:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000813367:	39 d1                	cmp    ecx,edx
ffff800000813369:	75 0b                	jne    ffff800000813376 <ioctl_tty+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
ffff80000081336b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081336f:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
ffff800000813376:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000813379:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081337c:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff80000081337f:	48 63 ca             	movsxd rcx,edx
ffff800000813382:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000813386:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000081338a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081338e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000813391:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813395:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000813398:	48 63 d2             	movsxd rdx,edx
ffff80000081339b:	48 01 d1             	add    rcx,rdx
ffff80000081339e:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff8000008133a1:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
ffff8000008133a3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008133a7:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008133aa:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008133ad:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008133b1:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
ffff8000008133b4:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008133b7:	48 63 d2             	movsxd rdx,edx
ffff8000008133ba:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff8000008133be:	77 99                	ja     ffff800000813359 <ioctl_tty+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff8000008133c0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008133c4:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008133c7:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff8000008133ca:	48 63 d2             	movsxd rdx,edx
ffff8000008133cd:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008133d1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008133d5:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffff8000008133d9:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008133de:	49 89 c7             	mov    r15,rax
ffff8000008133e1:	49 b8 88 98 fe ff ff 	movabs r8,0xfffffffffffe9888
ffff8000008133e8:	ff ff ff 
ffff8000008133eb:	49 01 c0             	add    r8,rax
ffff8000008133ee:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
ffff8000008133f1:	e9 f7 00 00 00       	jmp    ffff8000008134ed <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
ffff8000008133f6:	be c1 00 00 00       	mov    esi,0xc1
ffff8000008133fb:	48 ba 36 db ff ff ff 	movabs rdx,0xffffffffffffdb36
ffff800000813402:	ff ff ff 
ffff800000813405:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff800000813409:	48 89 d7             	mov    rdi,rdx
ffff80000081340c:	49 89 c7             	mov    r15,rax
ffff80000081340f:	48 ba 7b a3 fe ff ff 	movabs rdx,0xfffffffffffea37b
ffff800000813416:	ff ff ff 
ffff800000813419:	48 01 c2             	add    rdx,rax
ffff80000081341c:	ff d2                	call   rdx
ffff80000081341e:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
ffff800000813421:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000813425:	75 0c                	jne    ffff800000813433 <ioctl_tty+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
ffff800000813427:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000081342e:	e9 bf 00 00 00       	jmp    ffff8000008134f2 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
ffff800000813433:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000813437:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081343b:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff80000081343e:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
ffff800000813441:	e9 a7 00 00 00       	jmp    ffff8000008134ed <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
ffff800000813446:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000081344a:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081344e:	8b 52 48             	mov    edx,DWORD PTR [rdx+0x48]
ffff800000813451:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
ffff800000813454:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000813458:	75 0c                	jne    ffff800000813466 <ioctl_tty+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
ffff80000081345a:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000813461:	e9 8c 00 00 00       	jmp    ffff8000008134f2 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
ffff800000813466:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000813469:	89 d7                	mov    edi,edx
ffff80000081346b:	49 89 c7             	mov    r15,rax
ffff80000081346e:	48 ba 2f aa fe ff ff 	movabs rdx,0xfffffffffffeaa2f
ffff800000813475:	ff ff ff 
ffff800000813478:	48 01 c2             	add    rdx,rax
ffff80000081347b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
ffff80000081347d:	eb 5a                	jmp    ffff8000008134d9 <ioctl_tty+0x247>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
ffff80000081347f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813483:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000813486:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081348a:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000081348d:	39 c2                	cmp    edx,eax
ffff80000081348f:	75 0b                	jne    ffff80000081349c <ioctl_tty+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
ffff800000813491:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813495:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
ffff80000081349c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081349f:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008134a2:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff8000008134a5:	48 63 d0             	movsxd rdx,eax
ffff8000008134a8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008134ac:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff8000008134b0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008134b4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008134b7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008134bb:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008134be:	48 98                	cdqe   
ffff8000008134c0:	48 01 c2             	add    rdx,rax
ffff8000008134c3:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff8000008134c6:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
ffff8000008134c8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008134cc:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008134cf:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008134d2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008134d6:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
ffff8000008134d9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008134dc:	48 98                	cdqe   
ffff8000008134de:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff8000008134e2:	77 9b                	ja     ffff80000081347f <ioctl_tty+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
ffff8000008134e4:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008134eb:	eb 05                	jmp    ffff8000008134f2 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
ffff8000008134ed:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
ffff8000008134f2:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008134f6:	c9                   	leave  
ffff8000008134f7:	c3                   	ret    

ffff8000008134f8 <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
ffff8000008134f8:	f3 0f 1e fa          	endbr64 
ffff8000008134fc:	55                   	push   rbp
ffff8000008134fd:	48 89 e5             	mov    rbp,rsp
ffff800000813500:	41 57                	push   r15
ffff800000813502:	53                   	push   rbx
ffff800000813503:	48 83 ec 10          	sub    rsp,0x10
ffff800000813507:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000813507 <init_com+0xf>
ffff80000081350e:	49 bb 79 f5 00 00 00 	movabs r11,0xf579
ffff800000813515:	00 00 00 
ffff800000813518:	4c 01 db             	add    rbx,r11
ffff80000081351b:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
ffff80000081351e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000813521:	83 c0 01             	add    eax,0x1
ffff800000813524:	0f b7 c0             	movzx  eax,ax
ffff800000813527:	be 00 00 00 00       	mov    esi,0x0
ffff80000081352c:	89 c7                	mov    edi,eax
ffff80000081352e:	49 89 df             	mov    r15,rbx
ffff800000813531:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff800000813538:	ff ff ff 
ffff80000081353b:	48 01 d8             	add    rax,rbx
ffff80000081353e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
ffff800000813540:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000813543:	83 c0 03             	add    eax,0x3
ffff800000813546:	0f b7 c0             	movzx  eax,ax
ffff800000813549:	be 80 00 00 00       	mov    esi,0x80
ffff80000081354e:	89 c7                	mov    edi,eax
ffff800000813550:	49 89 df             	mov    r15,rbx
ffff800000813553:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000081355a:	ff ff ff 
ffff80000081355d:	48 01 d8             	add    rax,rbx
ffff800000813560:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
ffff800000813562:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000813565:	0f b7 c0             	movzx  eax,ax
ffff800000813568:	be 03 00 00 00       	mov    esi,0x3
ffff80000081356d:	89 c7                	mov    edi,eax
ffff80000081356f:	49 89 df             	mov    r15,rbx
ffff800000813572:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff800000813579:	ff ff ff 
ffff80000081357c:	48 01 d8             	add    rax,rbx
ffff80000081357f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
ffff800000813581:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000813584:	83 c0 01             	add    eax,0x1
ffff800000813587:	0f b7 c0             	movzx  eax,ax
ffff80000081358a:	be 00 00 00 00       	mov    esi,0x0
ffff80000081358f:	89 c7                	mov    edi,eax
ffff800000813591:	49 89 df             	mov    r15,rbx
ffff800000813594:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff80000081359b:	ff ff ff 
ffff80000081359e:	48 01 d8             	add    rax,rbx
ffff8000008135a1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
ffff8000008135a3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008135a6:	83 c0 03             	add    eax,0x3
ffff8000008135a9:	0f b7 c0             	movzx  eax,ax
ffff8000008135ac:	be 03 00 00 00       	mov    esi,0x3
ffff8000008135b1:	89 c7                	mov    edi,eax
ffff8000008135b3:	49 89 df             	mov    r15,rbx
ffff8000008135b6:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff8000008135bd:	ff ff ff 
ffff8000008135c0:	48 01 d8             	add    rax,rbx
ffff8000008135c3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
ffff8000008135c5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008135c8:	83 c0 02             	add    eax,0x2
ffff8000008135cb:	0f b7 c0             	movzx  eax,ax
ffff8000008135ce:	be 87 00 00 00       	mov    esi,0x87
ffff8000008135d3:	89 c7                	mov    edi,eax
ffff8000008135d5:	49 89 df             	mov    r15,rbx
ffff8000008135d8:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff8000008135df:	ff ff ff 
ffff8000008135e2:	48 01 d8             	add    rax,rbx
ffff8000008135e5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
ffff8000008135e7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008135ea:	83 c0 04             	add    eax,0x4
ffff8000008135ed:	0f b7 c0             	movzx  eax,ax
ffff8000008135f0:	be 0b 00 00 00       	mov    esi,0xb
ffff8000008135f5:	89 c7                	mov    edi,eax
ffff8000008135f7:	49 89 df             	mov    r15,rbx
ffff8000008135fa:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff800000813601:	ff ff ff 
ffff800000813604:	48 01 d8             	add    rax,rbx
ffff800000813607:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
ffff800000813609:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081360c:	83 c0 04             	add    eax,0x4
ffff80000081360f:	0f b7 c0             	movzx  eax,ax
ffff800000813612:	be 0f 00 00 00       	mov    esi,0xf
ffff800000813617:	89 c7                	mov    edi,eax
ffff800000813619:	49 89 df             	mov    r15,rbx
ffff80000081361c:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff800000813623:	ff ff ff 
ffff800000813626:	48 01 d8             	add    rax,rbx
ffff800000813629:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
ffff80000081362b:	90                   	nop
ffff80000081362c:	48 83 c4 10          	add    rsp,0x10
ffff800000813630:	5b                   	pop    rbx
ffff800000813631:	41 5f                	pop    r15
ffff800000813633:	5d                   	pop    rbp
ffff800000813634:	c3                   	ret    

ffff800000813635 <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
ffff800000813635:	f3 0f 1e fa          	endbr64 
ffff800000813639:	55                   	push   rbp
ffff80000081363a:	48 89 e5             	mov    rbp,rsp
ffff80000081363d:	41 57                	push   r15
ffff80000081363f:	53                   	push   rbx
ffff800000813640:	48 83 ec 20          	sub    rsp,0x20
ffff800000813644:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000813644 <com_putchar+0xf>
ffff80000081364b:	49 bb 3c f4 00 00 00 	movabs r11,0xf43c
ffff800000813652:	00 00 00 
ffff800000813655:	4c 01 db             	add    rbx,r11
ffff800000813658:	89 f8                	mov    eax,edi
ffff80000081365a:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000081365d:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
ffff800000813661:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000813664:	83 c0 05             	add    eax,0x5
ffff800000813667:	0f b6 c0             	movzx  eax,al
ffff80000081366a:	89 c7                	mov    edi,eax
ffff80000081366c:	49 89 df             	mov    r15,rbx
ffff80000081366f:	48 b8 99 76 fe ff ff 	movabs rax,0xfffffffffffe7699
ffff800000813676:	ff ff ff 
ffff800000813679:	48 01 d8             	add    rax,rbx
ffff80000081367c:	ff d0                	call   rax
ffff80000081367e:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
ffff800000813681:	80 65 ef 20          	and    BYTE PTR [rbp-0x11],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
ffff800000813685:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000813689:	74 d6                	je     ffff800000813661 <com_putchar+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
ffff80000081368b:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000081368f:	0f b6 d0             	movzx  edx,al
ffff800000813692:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000813695:	0f b7 c0             	movzx  eax,ax
ffff800000813698:	89 d6                	mov    esi,edx
ffff80000081369a:	89 c7                	mov    edi,eax
ffff80000081369c:	49 89 df             	mov    r15,rbx
ffff80000081369f:	48 b8 80 76 fe ff ff 	movabs rax,0xfffffffffffe7680
ffff8000008136a6:	ff ff ff 
ffff8000008136a9:	48 01 d8             	add    rax,rbx
ffff8000008136ac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
ffff8000008136ae:	90                   	nop
ffff8000008136af:	48 83 c4 20          	add    rsp,0x20
ffff8000008136b3:	5b                   	pop    rbx
ffff8000008136b4:	41 5f                	pop    r15
ffff8000008136b6:	5d                   	pop    rbp
ffff8000008136b7:	c3                   	ret    

ffff8000008136b8 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
ffff8000008136b8:	f3 0f 1e fa          	endbr64 
ffff8000008136bc:	55                   	push   rbp
ffff8000008136bd:	48 89 e5             	mov    rbp,rsp
ffff8000008136c0:	41 57                	push   r15
ffff8000008136c2:	53                   	push   rbx
ffff8000008136c3:	48 83 ec 10          	sub    rsp,0x10
ffff8000008136c7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008136c7 <com_puts+0xf>
ffff8000008136ce:	49 bb b9 f3 00 00 00 	movabs r11,0xf3b9
ffff8000008136d5:	00 00 00 
ffff8000008136d8:	4c 01 db             	add    rbx,r11
ffff8000008136db:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008136df:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
ffff8000008136e2:	eb 2a                	jmp    ffff80000081370e <com_puts+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
ffff8000008136e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008136e8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008136eb:	66 98                	cbw    
ffff8000008136ed:	0f b7 c0             	movzx  eax,ax
ffff8000008136f0:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff8000008136f3:	89 d6                	mov    esi,edx
ffff8000008136f5:	89 c7                	mov    edi,eax
ffff8000008136f7:	49 89 df             	mov    r15,rbx
ffff8000008136fa:	48 b8 b5 0b ff ff ff 	movabs rax,0xffffffffffff0bb5
ffff800000813701:	ff ff ff 
ffff800000813704:	48 01 d8             	add    rax,rbx
ffff800000813707:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
ffff800000813709:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
ffff80000081370e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813712:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813715:	84 c0                	test   al,al
ffff800000813717:	75 cb                	jne    ffff8000008136e4 <com_puts+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
ffff800000813719:	90                   	nop
ffff80000081371a:	90                   	nop
ffff80000081371b:	48 83 c4 10          	add    rsp,0x10
ffff80000081371f:	5b                   	pop    rbx
ffff800000813720:	41 5f                	pop    r15
ffff800000813722:	5d                   	pop    rbp
ffff800000813723:	c3                   	ret    

ffff800000813724 <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
ffff800000813724:	f3 0f 1e fa          	endbr64 
ffff800000813728:	55                   	push   rbp
ffff800000813729:	48 89 e5             	mov    rbp,rsp
ffff80000081372c:	41 57                	push   r15
ffff80000081372e:	53                   	push   rbx
ffff80000081372f:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000813736:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000813736 <comprintf+0x12>
ffff80000081373d:	49 bb 4a f3 00 00 00 	movabs r11,0xf34a
ffff800000813744:	00 00 00 
ffff800000813747:	4c 01 db             	add    rbx,r11
ffff80000081374a:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
ffff800000813751:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000813758:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff80000081375f:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000813766:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff80000081376d:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000813774:	84 c0                	test   al,al
ffff800000813776:	74 23                	je     ffff80000081379b <comprintf+0x77>
ffff800000813778:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff80000081377f:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000813783:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000813787:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff80000081378b:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff80000081378f:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000813793:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000813797:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
ffff80000081379b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008137a2:	48 89 c7             	mov    rdi,rax
ffff8000008137a5:	49 89 df             	mov    r15,rbx
ffff8000008137a8:	48 b8 16 15 ff ff ff 	movabs rax,0xffffffffffff1516
ffff8000008137af:	ff ff ff 
ffff8000008137b2:	48 01 d8             	add    rax,rbx
ffff8000008137b5:	ff d0                	call   rax
ffff8000008137b7:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff8000008137bc:	0f 8f f6 03 00 00    	jg     ffff800000813bb8 <comprintf+0x494>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
ffff8000008137c2:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff8000008137c9:	ff ff ff 
ffff8000008137cc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008137d0:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
ffff8000008137d7:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008137de:	ba 00 04 00 00       	mov    edx,0x400
ffff8000008137e3:	be 00 00 00 00       	mov    esi,0x0
ffff8000008137e8:	48 89 c7             	mov    rdi,rax
ffff8000008137eb:	49 89 df             	mov    r15,rbx
ffff8000008137ee:	48 b8 f4 11 ff ff ff 	movabs rax,0xffffffffffff11f4
ffff8000008137f5:	ff ff ff 
ffff8000008137f8:	48 01 d8             	add    rax,rbx
ffff8000008137fb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
ffff8000008137fd:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000813804:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
ffff80000081380b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000813812:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
ffff800000813819:	c7 85 f0 fe ff ff 08 	mov    DWORD PTR [rbp-0x110],0x8
ffff800000813820:	00 00 00 
ffff800000813823:	c7 85 f4 fe ff ff 30 	mov    DWORD PTR [rbp-0x10c],0x30
ffff80000081382a:	00 00 00 
ffff80000081382d:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000813831:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffff800000813838:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff80000081383f:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
ffff800000813846:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000081384d:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000813854:	e9 2a 03 00 00       	jmp    ffff800000813b83 <comprintf+0x45f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000813859:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813860:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813863:	3c 25                	cmp    al,0x25
ffff800000813865:	0f 85 e5 02 00 00    	jne    ffff800000813b50 <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
ffff80000081386b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813872:	48 83 c0 01          	add    rax,0x1
ffff800000813876:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813879:	84 c0                	test   al,al
ffff80000081387b:	0f 84 cf 02 00 00    	je     ffff800000813b50 <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
ffff800000813881:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000813888:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000813889:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813890:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813893:	3c 78                	cmp    al,0x78
ffff800000813895:	75 70                	jne    ffff800000813907 <comprintf+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
ffff800000813897:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081389d:	83 f8 2f             	cmp    eax,0x2f
ffff8000008138a0:	77 23                	ja     ffff8000008138c5 <comprintf+0x1a1>
ffff8000008138a2:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008138a9:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008138af:	89 d2                	mov    edx,edx
ffff8000008138b1:	48 01 d0             	add    rax,rdx
ffff8000008138b4:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008138ba:	83 c2 08             	add    edx,0x8
ffff8000008138bd:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008138c3:	eb 12                	jmp    ffff8000008138d7 <comprintf+0x1b3>
ffff8000008138c5:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008138cc:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008138d0:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008138d7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008138d9:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
ffff8000008138df:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff8000008138e5:	48 63 d0             	movsxd rdx,eax
ffff8000008138e8:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008138ef:	48 89 d6             	mov    rsi,rdx
ffff8000008138f2:	48 89 c7             	mov    rdi,rax
ffff8000008138f5:	49 89 df             	mov    r15,rbx
ffff8000008138f8:	48 b8 69 19 ff ff ff 	movabs rax,0xffffffffffff1969
ffff8000008138ff:	ff ff ff 
ffff800000813902:	48 01 d8             	add    rax,rbx
ffff800000813905:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000813907:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081390e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813911:	3c 6c                	cmp    al,0x6c
ffff800000813913:	75 76                	jne    ffff80000081398b <comprintf+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                int v=va_arg(vargs,unsigned long);
ffff800000813915:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081391b:	83 f8 2f             	cmp    eax,0x2f
ffff80000081391e:	77 23                	ja     ffff800000813943 <comprintf+0x21f>
ffff800000813920:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000813927:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081392d:	89 d2                	mov    edx,edx
ffff80000081392f:	48 01 d0             	add    rax,rdx
ffff800000813932:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000813938:	83 c2 08             	add    edx,0x8
ffff80000081393b:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000813941:	eb 12                	jmp    ffff800000813955 <comprintf+0x231>
ffff800000813943:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081394a:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081394e:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000813955:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813958:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprint_hex(tmp,v);
ffff80000081395e:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
ffff800000813964:	48 63 d0             	movsxd rdx,eax
ffff800000813967:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081396e:	48 89 d6             	mov    rsi,rdx
ffff800000813971:	48 89 c7             	mov    rdi,rax
ffff800000813974:	49 89 df             	mov    r15,rbx
ffff800000813977:	48 b8 69 19 ff ff ff 	movabs rax,0xffffffffffff1969
ffff80000081397e:	ff ff ff 
ffff800000813981:	48 01 d8             	add    rax,rbx
ffff800000813984:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000813986:	e9 f0 01 00 00       	jmp    ffff800000813b7b <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='s'){
ffff80000081398b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813992:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813995:	3c 73                	cmp    al,0x73
ffff800000813997:	75 75                	jne    ffff800000813a0e <comprintf+0x2ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
ffff800000813999:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081399f:	83 f8 2f             	cmp    eax,0x2f
ffff8000008139a2:	77 23                	ja     ffff8000008139c7 <comprintf+0x2a3>
ffff8000008139a4:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008139ab:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008139b1:	89 d2                	mov    edx,edx
ffff8000008139b3:	48 01 d0             	add    rax,rdx
ffff8000008139b6:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008139bc:	83 c2 08             	add    edx,0x8
ffff8000008139bf:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008139c5:	eb 12                	jmp    ffff8000008139d9 <comprintf+0x2b5>
ffff8000008139c7:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008139ce:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008139d2:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008139d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008139dc:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprintn(tmp,v);
ffff8000008139e3:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff8000008139ea:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008139f1:	48 89 d6             	mov    rsi,rdx
ffff8000008139f4:	48 89 c7             	mov    rdi,rax
ffff8000008139f7:	49 89 df             	mov    r15,rbx
ffff8000008139fa:	48 b8 f7 19 ff ff ff 	movabs rax,0xffffffffffff19f7
ffff800000813a01:	ff ff ff 
ffff800000813a04:	48 01 d8             	add    rax,rbx
ffff800000813a07:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000813a09:	e9 6d 01 00 00       	jmp    ffff800000813b7b <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='d'){
ffff800000813a0e:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813a15:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813a18:	3c 64                	cmp    al,0x64
ffff800000813a1a:	75 76                	jne    ffff800000813a92 <comprintf+0x36e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char* v=va_arg(vargs,char*);
ffff800000813a1c:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000813a22:	83 f8 2f             	cmp    eax,0x2f
ffff800000813a25:	77 23                	ja     ffff800000813a4a <comprintf+0x326>
ffff800000813a27:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000813a2e:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000813a34:	89 d2                	mov    edx,edx
ffff800000813a36:	48 01 d0             	add    rax,rdx
ffff800000813a39:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000813a3f:	83 c2 08             	add    edx,0x8
ffff800000813a42:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000813a48:	eb 12                	jmp    ffff800000813a5c <comprintf+0x338>
ffff800000813a4a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813a51:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813a55:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000813a5c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813a5f:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:90
                sprint_decimal(tmp,v);
ffff800000813a66:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000813a6d:	89 c2                	mov    edx,eax
ffff800000813a6f:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813a76:	89 d6                	mov    esi,edx
ffff800000813a78:	48 89 c7             	mov    rdi,rax
ffff800000813a7b:	49 89 df             	mov    r15,rbx
ffff800000813a7e:	48 b8 ae 18 ff ff ff 	movabs rax,0xffffffffffff18ae
ffff800000813a85:	ff ff ff 
ffff800000813a88:	48 01 d8             	add    rax,rbx
ffff800000813a8b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000813a8d:	e9 e9 00 00 00       	jmp    ffff800000813b7b <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
            }else if(*pstr=='c'){
ffff800000813a92:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813a99:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813a9c:	3c 63                	cmp    al,0x63
ffff800000813a9e:	75 02                	jne    ffff800000813aa2 <comprintf+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                char v=va_arg(vargs,char);
ffff800000813aa0:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:94
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
ffff800000813aa2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813aa9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813aac:	3c 70                	cmp    al,0x70
ffff800000813aae:	75 73                	jne    ffff800000813b23 <comprintf+0x3ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
                int v=va_arg(vargs,addr_t);
ffff800000813ab0:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000813ab6:	83 f8 2f             	cmp    eax,0x2f
ffff800000813ab9:	77 23                	ja     ffff800000813ade <comprintf+0x3ba>
ffff800000813abb:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000813ac2:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000813ac8:	89 d2                	mov    edx,edx
ffff800000813aca:	48 01 d0             	add    rax,rdx
ffff800000813acd:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000813ad3:	83 c2 08             	add    edx,0x8
ffff800000813ad6:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000813adc:	eb 12                	jmp    ffff800000813af0 <comprintf+0x3cc>
ffff800000813ade:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813ae5:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813ae9:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000813af0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813af3:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:96
                sprint_hex(tmp,v);
ffff800000813af9:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff800000813aff:	48 63 d0             	movsxd rdx,eax
ffff800000813b02:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813b09:	48 89 d6             	mov    rsi,rdx
ffff800000813b0c:	48 89 c7             	mov    rdi,rax
ffff800000813b0f:	49 89 df             	mov    r15,rbx
ffff800000813b12:	48 b8 69 19 ff ff ff 	movabs rax,0xffffffffffff1969
ffff800000813b19:	ff ff ff 
ffff800000813b1c:	48 01 d8             	add    rax,rbx
ffff800000813b1f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000813b21:	eb 58                	jmp    ffff800000813b7b <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
            }else{
                    sprintchar(tmp,*pstr);
ffff800000813b23:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813b2a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813b2d:	0f be d0             	movsx  edx,al
ffff800000813b30:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813b37:	89 d6                	mov    esi,edx
ffff800000813b39:	48 89 c7             	mov    rdi,rax
ffff800000813b3c:	49 89 df             	mov    r15,rbx
ffff800000813b3f:	48 b8 6f 18 ff ff ff 	movabs rax,0xffffffffffff186f
ffff800000813b46:	ff ff ff 
ffff800000813b49:	48 01 d8             	add    rax,rbx
ffff800000813b4c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000813b4e:	eb 2b                	jmp    ffff800000813b7b <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:101
                }
        }else{
            sprintchar(tmp,*pstr);
ffff800000813b50:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813b57:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813b5a:	0f be d0             	movsx  edx,al
ffff800000813b5d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813b64:	89 d6                	mov    esi,edx
ffff800000813b66:	48 89 c7             	mov    rdi,rax
ffff800000813b69:	49 89 df             	mov    r15,rbx
ffff800000813b6c:	48 b8 6f 18 ff ff ff 	movabs rax,0xffffffffffff186f
ffff800000813b73:	ff ff ff 
ffff800000813b76:	48 01 d8             	add    rax,rbx
ffff800000813b79:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000813b7b:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000813b82:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
ffff800000813b83:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813b8a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813b8d:	84 c0                	test   al,al
ffff800000813b8f:	0f 85 c4 fc ff ff    	jne    ffff800000813859 <comprintf+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:105
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
ffff800000813b95:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813b9c:	be f8 03 00 00       	mov    esi,0x3f8
ffff800000813ba1:	48 89 c7             	mov    rdi,rax
ffff800000813ba4:	49 89 df             	mov    r15,rbx
ffff800000813ba7:	48 b8 38 0c ff ff ff 	movabs rax,0xffffffffffff0c38
ffff800000813bae:	ff ff ff 
ffff800000813bb1:	48 01 d8             	add    rax,rbx
ffff800000813bb4:	ff d0                	call   rax
ffff800000813bb6:	eb 01                	jmp    ffff800000813bb9 <comprintf+0x495>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
ffff800000813bb8:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:106
ffff800000813bb9:	48 81 c4 10 01 00 00 	add    rsp,0x110
ffff800000813bc0:	5b                   	pop    rbx
ffff800000813bc1:	41 5f                	pop    r15
ffff800000813bc3:	5d                   	pop    rbp
ffff800000813bc4:	c3                   	ret    

ffff800000813bc5 <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
ffff800000813bc5:	f3 0f 1e fa          	endbr64 
ffff800000813bc9:	55                   	push   rbp
ffff800000813bca:	48 89 e5             	mov    rbp,rsp
ffff800000813bcd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000813bd1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000813bd5:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
ffff800000813bd8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813bdc:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
ffff800000813bdf:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000813be6:	eb 1b                	jmp    ffff800000813c03 <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
ffff800000813be8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813bec:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813bef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813bf3:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
ffff800000813bf5:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
ffff800000813bfa:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
ffff800000813bff:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
ffff800000813c03:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813c06:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000813c09:	77 dd                	ja     ffff800000813be8 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
ffff800000813c0b:	90                   	nop
ffff800000813c0c:	90                   	nop
ffff800000813c0d:	5d                   	pop    rbp
ffff800000813c0e:	c3                   	ret    

ffff800000813c0f <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
ffff800000813c0f:	f3 0f 1e fa          	endbr64 
ffff800000813c13:	55                   	push   rbp
ffff800000813c14:	48 89 e5             	mov    rbp,rsp
ffff800000813c17:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000813c1b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000813c1f:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
ffff800000813c22:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000813c29:	eb 3a                	jmp    ffff800000813c65 <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
ffff800000813c2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813c2f:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813c32:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813c36:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813c39:	38 c2                	cmp    dl,al
ffff800000813c3b:	74 1a                	je     ffff800000813c57 <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
ffff800000813c3d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813c41:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813c44:	0f b6 d0             	movzx  edx,al
ffff800000813c47:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813c4b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813c4e:	0f b6 c8             	movzx  ecx,al
ffff800000813c51:	89 d0                	mov    eax,edx
ffff800000813c53:	29 c8                	sub    eax,ecx
ffff800000813c55:	eb 1b                	jmp    ffff800000813c72 <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
ffff800000813c57:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
ffff800000813c5c:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
ffff800000813c61:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
ffff800000813c65:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813c68:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffff800000813c6b:	7c be                	jl     ffff800000813c2b <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
ffff800000813c6d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
ffff800000813c72:	5d                   	pop    rbp
ffff800000813c73:	c3                   	ret    

ffff800000813c74 <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
ffff800000813c74:	f3 0f 1e fa          	endbr64 
ffff800000813c78:	55                   	push   rbp
ffff800000813c79:	48 89 e5             	mov    rbp,rsp
ffff800000813c7c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000813c80:	89 f0                	mov    eax,esi
ffff800000813c82:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffff800000813c85:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
ffff800000813c88:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000813c8f:	eb 16                	jmp    ffff800000813ca7 <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
ffff800000813c91:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813c95:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000813c99:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000813c9d:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff800000813ca1:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
ffff800000813ca3:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
ffff800000813ca7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813caa:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff800000813cad:	72 e2                	jb     ffff800000813c91 <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
ffff800000813caf:	90                   	nop
ffff800000813cb0:	90                   	nop
ffff800000813cb1:	5d                   	pop    rbp
ffff800000813cb2:	c3                   	ret    

ffff800000813cb3 <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
ffff800000813cb3:	f3 0f 1e fa          	endbr64 
ffff800000813cb7:	55                   	push   rbp
ffff800000813cb8:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
ffff800000813cbb:	48 b8 40 ea 41 00 00 	movabs rax,0xffff80000041ea40
ffff800000813cc2:	80 ff ff 
ffff800000813cc5:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
ffff800000813cc7:	5d                   	pop    rbp
ffff800000813cc8:	c3                   	ret    

ffff800000813cc9 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
ffff800000813cc9:	f3 0f 1e fa          	endbr64 
ffff800000813ccd:	55                   	push   rbp
ffff800000813cce:	48 89 e5             	mov    rbp,rsp
ffff800000813cd1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813cd5:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000813cd9:	eb 1d                	jmp    ffff800000813cf8 <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
ffff800000813cdb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000813cdf:	48 8d 42 01          	lea    rax,[rdx+0x1]
ffff800000813ce3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff800000813ce7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813ceb:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffff800000813cef:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffff800000813cf3:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000813cf6:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000813cf8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813cfc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813cff:	84 c0                	test   al,al
ffff800000813d01:	75 d8                	jne    ffff800000813cdb <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
ffff800000813d03:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813d07:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
ffff800000813d0a:	90                   	nop
ffff800000813d0b:	5d                   	pop    rbp
ffff800000813d0c:	c3                   	ret    

ffff800000813d0d <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
ffff800000813d0d:	f3 0f 1e fa          	endbr64 
ffff800000813d11:	55                   	push   rbp
ffff800000813d12:	48 89 e5             	mov    rbp,rsp
ffff800000813d15:	48 83 ec 30          	sub    rsp,0x30
ffff800000813d19:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000813d1d:	89 f0                	mov    eax,esi
ffff800000813d1f:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
ffff800000813d22:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000813d27:	0f 84 fa 00 00 00    	je     ffff800000813e27 <strtok+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
ffff800000813d2d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813d31:	48 89 c6             	mov    rsi,rax
ffff800000813d34:	48 b8 60 ea 41 00 00 	movabs rax,0xffff80000041ea60
ffff800000813d3b:	80 ff ff 
ffff800000813d3e:	48 89 c7             	mov    rdi,rax
ffff800000813d41:	48 b8 c9 3c 81 00 00 	movabs rax,0xffff800000813cc9
ffff800000813d48:	80 ff ff 
ffff800000813d4b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
ffff800000813d4d:	48 b8 60 ea 41 00 00 	movabs rax,0xffff80000041ea60
ffff800000813d54:	80 ff ff 
ffff800000813d57:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
ffff800000813d5b:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813d62:	80 ff ff 
ffff800000813d65:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffff800000813d6b:	eb 2a                	jmp    ffff800000813d97 <strtok+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
ffff800000813d6d:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813d74:	80 ff ff 
ffff800000813d77:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813d79:	83 c0 01             	add    eax,0x1
ffff800000813d7c:	99                   	cdq    
ffff800000813d7d:	c1 ea 17             	shr    edx,0x17
ffff800000813d80:	01 d0                	add    eax,edx
ffff800000813d82:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813d87:	29 d0                	sub    eax,edx
ffff800000813d89:	89 c2                	mov    edx,eax
ffff800000813d8b:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813d92:	80 ff ff 
ffff800000813d95:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
ffff800000813d97:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813d9e:	80 ff ff 
ffff800000813da1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813da3:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813daa:	80 ff ff 
ffff800000813dad:	48 98                	cdqe   
ffff800000813daf:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813db3:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000813db6:	74 20                	je     ffff800000813dd8 <strtok+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
ffff800000813db8:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813dbf:	80 ff ff 
ffff800000813dc2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813dc4:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813dcb:	80 ff ff 
ffff800000813dce:	48 98                	cdqe   
ffff800000813dd0:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813dd4:	84 c0                	test   al,al
ffff800000813dd6:	75 95                	jne    ffff800000813d6d <strtok+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
ffff800000813dd8:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813ddf:	80 ff ff 
ffff800000813de2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813de4:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813deb:	80 ff ff 
ffff800000813dee:	48 98                	cdqe   
ffff800000813df0:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
ffff800000813df4:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813dfb:	80 ff ff 
ffff800000813dfe:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813e00:	83 c0 01             	add    eax,0x1
ffff800000813e03:	99                   	cdq    
ffff800000813e04:	c1 ea 17             	shr    edx,0x17
ffff800000813e07:	01 d0                	add    eax,edx
ffff800000813e09:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813e0e:	29 d0                	sub    eax,edx
ffff800000813e10:	89 c2                	mov    edx,eax
ffff800000813e12:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813e19:	80 ff ff 
ffff800000813e1c:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
ffff800000813e1e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813e22:	e9 ee 00 00 00       	jmp    ffff800000813f15 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
ffff800000813e27:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
ffff800000813e2e:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813e35:	80 ff ff 
ffff800000813e38:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813e3a:	48 98                	cdqe   
ffff800000813e3c:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813e43:	80 ff ff 
ffff800000813e46:	48 01 d0             	add    rax,rdx
ffff800000813e49:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
ffff800000813e4d:	eb 2e                	jmp    ffff800000813e7d <strtok+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
ffff800000813e4f:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813e56:	80 ff ff 
ffff800000813e59:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813e5b:	83 c0 01             	add    eax,0x1
ffff800000813e5e:	99                   	cdq    
ffff800000813e5f:	c1 ea 17             	shr    edx,0x17
ffff800000813e62:	01 d0                	add    eax,edx
ffff800000813e64:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813e69:	29 d0                	sub    eax,edx
ffff800000813e6b:	89 c2                	mov    edx,eax
ffff800000813e6d:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813e74:	80 ff ff 
ffff800000813e77:	89 10                	mov    DWORD PTR [rax],edx
ffff800000813e79:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
ffff800000813e7d:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813e84:	80 ff ff 
ffff800000813e87:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813e89:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813e90:	80 ff ff 
ffff800000813e93:	48 98                	cdqe   
ffff800000813e95:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813e99:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000813e9c:	74 20                	je     ffff800000813ebe <strtok+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
ffff800000813e9e:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813ea5:	80 ff ff 
ffff800000813ea8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813eaa:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813eb1:	80 ff ff 
ffff800000813eb4:	48 98                	cdqe   
ffff800000813eb6:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813eba:	84 c0                	test   al,al
ffff800000813ebc:	75 91                	jne    ffff800000813e4f <strtok+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
ffff800000813ebe:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813ec5:	80 ff ff 
ffff800000813ec8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813eca:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813ed1:	80 ff ff 
ffff800000813ed4:	48 98                	cdqe   
ffff800000813ed6:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
ffff800000813eda:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813ee1:	80 ff ff 
ffff800000813ee4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813ee6:	83 c0 01             	add    eax,0x1
ffff800000813ee9:	99                   	cdq    
ffff800000813eea:	c1 ea 17             	shr    edx,0x17
ffff800000813eed:	01 d0                	add    eax,edx
ffff800000813eef:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813ef4:	29 d0                	sub    eax,edx
ffff800000813ef6:	89 c2                	mov    edx,eax
ffff800000813ef8:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813eff:	80 ff ff 
ffff800000813f02:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
ffff800000813f04:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000813f08:	74 06                	je     ffff800000813f10 <strtok+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
ffff800000813f0a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f0e:	eb 05                	jmp    ffff800000813f15 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
ffff800000813f10:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
ffff800000813f15:	c9                   	leave  
ffff800000813f16:	c3                   	ret    

ffff800000813f17 <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
ffff800000813f17:	f3 0f 1e fa          	endbr64 
ffff800000813f1b:	55                   	push   rbp
ffff800000813f1c:	48 89 e5             	mov    rbp,rsp
ffff800000813f1f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813f23:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000813f27:	eb 3c                	jmp    ffff800000813f65 <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
ffff800000813f29:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813f2d:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813f30:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f34:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813f37:	38 c2                	cmp    dl,al
ffff800000813f39:	7e 07                	jle    ffff800000813f42 <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
ffff800000813f3b:	b8 01 00 00 00       	mov    eax,0x1
ffff800000813f40:	eb 52                	jmp    ffff800000813f94 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
ffff800000813f42:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813f46:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813f49:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f4d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813f50:	38 c2                	cmp    dl,al
ffff800000813f52:	7d 07                	jge    ffff800000813f5b <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
ffff800000813f54:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000813f59:	eb 39                	jmp    ffff800000813f94 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
ffff800000813f5b:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
ffff800000813f60:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000813f65:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813f69:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813f6c:	84 c0                	test   al,al
ffff800000813f6e:	74 0b                	je     ffff800000813f7b <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
ffff800000813f70:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f74:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813f77:	84 c0                	test   al,al
ffff800000813f79:	75 ae                	jne    ffff800000813f29 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
ffff800000813f7b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813f7f:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813f82:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f86:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813f89:	38 c2                	cmp    dl,al
ffff800000813f8b:	75 07                	jne    ffff800000813f94 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
ffff800000813f8d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000813f92:	eb 00                	jmp    ffff800000813f94 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
ffff800000813f94:	5d                   	pop    rbp
ffff800000813f95:	c3                   	ret    

ffff800000813f96 <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
ffff800000813f96:	f3 0f 1e fa          	endbr64 
ffff800000813f9a:	55                   	push   rbp
ffff800000813f9b:	48 89 e5             	mov    rbp,rsp
ffff800000813f9e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
ffff800000813fa2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
ffff800000813fa9:	eb 09                	jmp    ffff800000813fb4 <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
ffff800000813fab:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffff800000813fb0:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
ffff800000813fb4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813fb8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813fbb:	84 c0                	test   al,al
ffff800000813fbd:	75 ec                	jne    ffff800000813fab <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
ffff800000813fbf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
ffff800000813fc2:	5d                   	pop    rbp
ffff800000813fc3:	c3                   	ret    

ffff800000813fc4 <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
ffff800000813fc4:	f3 0f 1e fa          	endbr64 
ffff800000813fc8:	55                   	push   rbp
ffff800000813fc9:	48 89 e5             	mov    rbp,rsp
ffff800000813fcc:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000813fd3:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000813fda:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffff800000813fe1:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffff800000813fe8:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffff800000813fef:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffff800000813ff6:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffff800000813ffd:	84 c0                	test   al,al
ffff800000813fff:	74 20                	je     ffff800000814021 <sprintf+0x5d>
ffff800000814001:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffff800000814005:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffff800000814009:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffff80000081400d:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffff800000814011:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffff800000814015:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffff800000814019:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffff80000081401d:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
ffff800000814021:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000814028:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
ffff80000081402f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000814036:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
ffff80000081403d:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff800000814044:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000814047:	eb 39                	jmp    ffff800000814082 <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
ffff800000814049:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814050:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814053:	3c 25                	cmp    al,0x25
ffff800000814055:	75 15                	jne    ffff80000081406c <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
ffff800000814057:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff80000081405e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814061:	3c 25                	cmp    al,0x25
ffff800000814063:	74 07                	je     ffff80000081406c <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
ffff800000814065:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
ffff80000081406c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814073:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
ffff80000081407a:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000814081:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000814082:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814089:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081408c:	3c 0a                	cmp    al,0xa
ffff80000081408e:	75 b9                	jne    ffff800000814049 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
ffff800000814090:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
ffff800000814097:	00 00 00 
ffff80000081409a:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
ffff8000008140a1:	00 00 00 
ffff8000008140a4:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff8000008140a8:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff8000008140af:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffff8000008140b6:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
ffff8000008140bd:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff8000008140c4:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff8000008140cb:	e9 09 02 00 00       	jmp    ffff8000008142d9 <sprintf+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008140d0:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008140d7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008140da:	3c 25                	cmp    al,0x25
ffff8000008140dc:	0f 85 ca 01 00 00    	jne    ffff8000008142ac <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
ffff8000008140e2:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008140e9:	48 83 c0 01          	add    rax,0x1
ffff8000008140ed:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008140f0:	84 c0                	test   al,al
ffff8000008140f2:	0f 84 b4 01 00 00    	je     ffff8000008142ac <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
ffff8000008140f8:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008140ff:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000814100:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814107:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081410a:	3c 78                	cmp    al,0x78
ffff80000081410c:	75 6f                	jne    ffff80000081417d <sprintf+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
ffff80000081410e:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000814114:	83 f8 2f             	cmp    eax,0x2f
ffff800000814117:	77 23                	ja     ffff80000081413c <sprintf+0x178>
ffff800000814119:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000814120:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000814126:	89 d2                	mov    edx,edx
ffff800000814128:	48 01 d0             	add    rax,rdx
ffff80000081412b:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000814131:	83 c2 08             	add    edx,0x8
ffff800000814134:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff80000081413a:	eb 12                	jmp    ffff80000081414e <sprintf+0x18a>
ffff80000081413c:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000814143:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000814147:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff80000081414e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814150:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
ffff800000814156:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff80000081415c:	48 63 d0             	movsxd rdx,eax
ffff80000081415f:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814166:	48 89 d6             	mov    rsi,rdx
ffff800000814169:	48 89 c7             	mov    rdi,rax
ffff80000081416c:	48 b8 e9 43 81 00 00 	movabs rax,0xffff8000008143e9
ffff800000814173:	80 ff ff 
ffff800000814176:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000814178:	e9 54 01 00 00       	jmp    ffff8000008142d1 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
ffff80000081417d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814184:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814187:	3c 73                	cmp    al,0x73
ffff800000814189:	75 6f                	jne    ffff8000008141fa <sprintf+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
ffff80000081418b:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000814191:	83 f8 2f             	cmp    eax,0x2f
ffff800000814194:	77 23                	ja     ffff8000008141b9 <sprintf+0x1f5>
ffff800000814196:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081419d:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008141a3:	89 d2                	mov    edx,edx
ffff8000008141a5:	48 01 d0             	add    rax,rdx
ffff8000008141a8:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008141ae:	83 c2 08             	add    edx,0x8
ffff8000008141b1:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff8000008141b7:	eb 12                	jmp    ffff8000008141cb <sprintf+0x207>
ffff8000008141b9:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008141c0:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008141c4:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008141cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008141ce:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
ffff8000008141d5:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff8000008141dc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008141e3:	48 89 d6             	mov    rsi,rdx
ffff8000008141e6:	48 89 c7             	mov    rdi,rax
ffff8000008141e9:	48 b8 77 44 81 00 00 	movabs rax,0xffff800000814477
ffff8000008141f0:	80 ff ff 
ffff8000008141f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008141f5:	e9 d7 00 00 00       	jmp    ffff8000008142d1 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
ffff8000008141fa:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814201:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814204:	3c 64                	cmp    al,0x64
ffff800000814206:	75 6d                	jne    ffff800000814275 <sprintf+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
ffff800000814208:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff80000081420e:	83 f8 2f             	cmp    eax,0x2f
ffff800000814211:	77 23                	ja     ffff800000814236 <sprintf+0x272>
ffff800000814213:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081421a:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000814220:	89 d2                	mov    edx,edx
ffff800000814222:	48 01 d0             	add    rax,rdx
ffff800000814225:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081422b:	83 c2 08             	add    edx,0x8
ffff80000081422e:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000814234:	eb 12                	jmp    ffff800000814248 <sprintf+0x284>
ffff800000814236:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081423d:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000814241:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000814248:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081424b:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
ffff800000814252:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000814259:	89 c2                	mov    edx,eax
ffff80000081425b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814262:	89 d6                	mov    esi,edx
ffff800000814264:	48 89 c7             	mov    rdi,rax
ffff800000814267:	48 b8 2e 43 81 00 00 	movabs rax,0xffff80000081432e
ffff80000081426e:	80 ff ff 
ffff800000814271:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000814273:	eb 5c                	jmp    ffff8000008142d1 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
ffff800000814275:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081427c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081427f:	3c 63                	cmp    al,0x63
ffff800000814281:	75 02                	jne    ffff800000814285 <sprintf+0x2c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
ffff800000814283:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
ffff800000814285:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081428c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081428f:	0f be d0             	movsx  edx,al
ffff800000814292:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814299:	89 d6                	mov    esi,edx
ffff80000081429b:	48 89 c7             	mov    rdi,rax
ffff80000081429e:	48 b8 ef 42 81 00 00 	movabs rax,0xffff8000008142ef
ffff8000008142a5:	80 ff ff 
ffff8000008142a8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008142aa:	eb 25                	jmp    ffff8000008142d1 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
ffff8000008142ac:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008142b3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008142b6:	0f be d0             	movsx  edx,al
ffff8000008142b9:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008142c0:	89 d6                	mov    esi,edx
ffff8000008142c2:	48 89 c7             	mov    rdi,rax
ffff8000008142c5:	48 b8 ef 42 81 00 00 	movabs rax,0xffff8000008142ef
ffff8000008142cc:	80 ff ff 
ffff8000008142cf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff8000008142d1:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008142d8:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
ffff8000008142d9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008142e0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008142e3:	84 c0                	test   al,al
ffff8000008142e5:	0f 85 e5 fd ff ff    	jne    ffff8000008140d0 <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
ffff8000008142eb:	90                   	nop
ffff8000008142ec:	90                   	nop
ffff8000008142ed:	c9                   	leave  
ffff8000008142ee:	c3                   	ret    

ffff8000008142ef <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
ffff8000008142ef:	f3 0f 1e fa          	endbr64 
ffff8000008142f3:	55                   	push   rbp
ffff8000008142f4:	48 89 e5             	mov    rbp,rsp
ffff8000008142f7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008142fb:	89 f0                	mov    eax,esi
ffff8000008142fd:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff800000814300:	eb 05                	jmp    ffff800000814307 <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
ffff800000814302:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff800000814307:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000081430b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081430e:	84 c0                	test   al,al
ffff800000814310:	75 f0                	jne    ffff800000814302 <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
ffff800000814312:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000814316:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff80000081431a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000081431e:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
ffff800000814322:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
ffff800000814324:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000814328:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
ffff80000081432b:	90                   	nop
ffff80000081432c:	5d                   	pop    rbp
ffff80000081432d:	c3                   	ret    

ffff80000081432e <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
ffff80000081432e:	f3 0f 1e fa          	endbr64 
ffff800000814332:	55                   	push   rbp
ffff800000814333:	48 89 e5             	mov    rbp,rsp
ffff800000814336:	48 83 ec 30          	sub    rsp,0x30
ffff80000081433a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000081433e:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
ffff800000814341:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff800000814348:	eb 65                	jmp    ffff8000008143af <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
ffff80000081434a:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000081434d:	48 63 c2             	movsxd rax,edx
ffff800000814350:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
ffff800000814357:	48 c1 e8 20          	shr    rax,0x20
ffff80000081435b:	c1 f8 02             	sar    eax,0x2
ffff80000081435e:	89 d6                	mov    esi,edx
ffff800000814360:	c1 fe 1f             	sar    esi,0x1f
ffff800000814363:	29 f0                	sub    eax,esi
ffff800000814365:	89 c1                	mov    ecx,eax
ffff800000814367:	89 c8                	mov    eax,ecx
ffff800000814369:	c1 e0 02             	shl    eax,0x2
ffff80000081436c:	01 c8                	add    eax,ecx
ffff80000081436e:	01 c0                	add    eax,eax
ffff800000814370:	89 d1                	mov    ecx,edx
ffff800000814372:	29 c1                	sub    ecx,eax
ffff800000814374:	89 c8                	mov    eax,ecx
ffff800000814376:	83 c0 30             	add    eax,0x30
ffff800000814379:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
ffff80000081437c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081437f:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000814382:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000814385:	48 98                	cdqe   
ffff800000814387:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff80000081438b:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
ffff80000081438f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000814392:	48 63 d0             	movsxd rdx,eax
ffff800000814395:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
ffff80000081439c:	48 c1 ea 20          	shr    rdx,0x20
ffff8000008143a0:	c1 fa 02             	sar    edx,0x2
ffff8000008143a3:	c1 f8 1f             	sar    eax,0x1f
ffff8000008143a6:	89 c1                	mov    ecx,eax
ffff8000008143a8:	89 d0                	mov    eax,edx
ffff8000008143aa:	29 c8                	sub    eax,ecx
ffff8000008143ac:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff8000008143af:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008143b2:	83 f8 0f             	cmp    eax,0xf
ffff8000008143b5:	76 93                	jbe    ffff80000081434a <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
ffff8000008143b7:	eb 26                	jmp    ffff8000008143df <sprint_decimal+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
ffff8000008143b9:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff8000008143bd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008143c0:	48 98                	cdqe   
ffff8000008143c2:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff8000008143c7:	0f be d0             	movsx  edx,al
ffff8000008143ca:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008143ce:	89 d6                	mov    esi,edx
ffff8000008143d0:	48 89 c7             	mov    rdi,rax
ffff8000008143d3:	48 b8 ef 42 81 00 00 	movabs rax,0xffff8000008142ef
ffff8000008143da:	80 ff ff 
ffff8000008143dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
ffff8000008143df:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008143e3:	7f d4                	jg     ffff8000008143b9 <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
ffff8000008143e5:	90                   	nop
ffff8000008143e6:	90                   	nop
ffff8000008143e7:	c9                   	leave  
ffff8000008143e8:	c3                   	ret    

ffff8000008143e9 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long c)
{
ffff8000008143e9:	f3 0f 1e fa          	endbr64 
ffff8000008143ed:	55                   	push   rbp
ffff8000008143ee:	48 89 e5             	mov    rbp,rsp
ffff8000008143f1:	48 83 ec 30          	sub    rsp,0x30
ffff8000008143f5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008143f9:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[22];
    int p=0;
ffff8000008143fd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff800000814404:	eb 39                	jmp    ffff80000081443f <sprint_hex+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
ffff800000814406:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081440a:	83 e0 0f             	and    eax,0xf
ffff80000081440d:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
ffff800000814410:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
ffff800000814414:	76 06                	jbe    ffff80000081441c <sprint_hex+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
ffff800000814416:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
ffff80000081441a:	eb 04                	jmp    ffff800000814420 <sprint_hex+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
ffff80000081441c:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
ffff800000814420:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000814423:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000814426:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000814429:	48 98                	cdqe   
ffff80000081442b:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff80000081442f:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
ffff800000814433:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000814437:	48 c1 e8 04          	shr    rax,0x4
ffff80000081443b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff80000081443f:	83 7d fc 15          	cmp    DWORD PTR [rbp-0x4],0x15
ffff800000814443:	7e c1                	jle    ffff800000814406 <sprint_hex+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
ffff800000814445:	eb 26                	jmp    ffff80000081446d <sprint_hex+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
ffff800000814447:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff80000081444b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081444e:	48 98                	cdqe   
ffff800000814450:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000814455:	0f be d0             	movsx  edx,al
ffff800000814458:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081445c:	89 d6                	mov    esi,edx
ffff80000081445e:	48 89 c7             	mov    rdi,rax
ffff800000814461:	48 b8 ef 42 81 00 00 	movabs rax,0xffff8000008142ef
ffff800000814468:	80 ff ff 
ffff80000081446b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
ffff80000081446d:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000814471:	7f d4                	jg     ffff800000814447 <sprint_hex+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
ffff800000814473:	90                   	nop
ffff800000814474:	90                   	nop
ffff800000814475:	c9                   	leave  
ffff800000814476:	c3                   	ret    

ffff800000814477 <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
ffff800000814477:	f3 0f 1e fa          	endbr64 
ffff80000081447b:	55                   	push   rbp
ffff80000081447c:	48 89 e5             	mov    rbp,rsp
ffff80000081447f:	48 83 ec 10          	sub    rsp,0x10
ffff800000814483:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000814487:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff80000081448b:	eb 27                	jmp    ffff8000008144b4 <sprintn+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
ffff80000081448d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000814491:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000814495:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000814499:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081449c:	0f be d0             	movsx  edx,al
ffff80000081449f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008144a3:	89 d6                	mov    esi,edx
ffff8000008144a5:	48 89 c7             	mov    rdi,rax
ffff8000008144a8:	48 b8 ef 42 81 00 00 	movabs rax,0xffff8000008142ef
ffff8000008144af:	80 ff ff 
ffff8000008144b2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff8000008144b4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008144b8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008144bb:	84 c0                	test   al,al
ffff8000008144bd:	75 ce                	jne    ffff80000081448d <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
ffff8000008144bf:	90                   	nop
ffff8000008144c0:	90                   	nop
ffff8000008144c1:	c9                   	leave  
ffff8000008144c2:	c3                   	ret    
ffff8000008144c3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff8000008144ca:	00 00 00 
ffff8000008144cd:	0f 1f 00             	nop    DWORD PTR [rax]

ffff8000008144d0 <create_zero>:
create_zero():
ffff8000008144d0:	e8 c9 2a ff ff       	call   ffff800000806f9e <req_proc>
ffff8000008144d5:	83 f8 ff             	cmp    eax,0xffffffff
ffff8000008144d8:	74 0c                	je     ffff8000008144e6 <create_zero.retu>
ffff8000008144da:	e8 10 2c ff ff       	call   ffff8000008070ef <set_proc>
ffff8000008144df:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
ffff8000008144e3:	83 c4 40             	add    esp,0x40

ffff8000008144e6 <create_zero.retu>:
create_zero.retu():
ffff8000008144e6:	c3                   	ret    

ffff8000008144e7 <switch_proc_asm>:
save_context():
ffff8000008144e7:	67 8b 44 24 24       	mov    eax,DWORD PTR [esp+0x24]
ffff8000008144ec:	83 c0 44             	add    eax,0x44
ffff8000008144ef:	b9 08 00 00 00       	mov    ecx,0x8
ffff8000008144f4:	89 e7                	mov    edi,esp

ffff8000008144f6 <save_context.loops>:
save_context.loops():
ffff8000008144f6:	67 8b 17             	mov    edx,DWORD PTR [edi]
ffff8000008144f9:	67 89 10             	mov    DWORD PTR [eax],edx
ffff8000008144fc:	83 c7 04             	add    edi,0x4
ffff8000008144ff:	83 e8 04             	sub    eax,0x4
ffff800000814502:	e2 f2                	loop   ffff8000008144f6 <save_context.loops>
ffff800000814504:	5b                   	pop    rbx
ffff800000814505:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff80000081450a:	67 89 58 24          	mov    DWORD PTR [eax+0x24],ebx
ffff80000081450e:	67 48 8b 1c 24       	mov    rbx,QWORD PTR [esp]
ffff800000814513:	67 89 58 20          	mov    DWORD PTR [eax+0x20],ebx
ffff800000814517:	c3                   	ret    

ffff800000814518 <desc>:
	...

ffff800000814520 <ret_sys_call>:
ret_sys_call():
ffff800000814520:	58                   	pop    rax
ffff800000814521:	8e d8                	mov    ds,eax
ffff800000814523:	58                   	pop    rax
ffff800000814524:	8e c0                	mov    es,eax
ffff800000814526:	41 5f                	pop    r15
ffff800000814528:	41 5e                	pop    r14
ffff80000081452a:	41 5d                	pop    r13
ffff80000081452c:	41 5c                	pop    r12
ffff80000081452e:	41 5b                	pop    r11
ffff800000814530:	41 5a                	pop    r10
ffff800000814532:	41 59                	pop    r9
ffff800000814534:	41 58                	pop    r8
ffff800000814536:	5e                   	pop    rsi
ffff800000814537:	5f                   	pop    rdi
ffff800000814538:	5a                   	pop    rdx
ffff800000814539:	59                   	pop    rcx
ffff80000081453a:	5b                   	pop    rbx
ffff80000081453b:	58                   	pop    rax

ffff80000081453c <tmp>:
tmp():
ffff80000081453c:	48 0f 07             	sysretq 

ffff80000081453f <ret_normal_proc>:
ret_normal_proc():
ffff80000081453f:	58                   	pop    rax
ffff800000814540:	8e d8                	mov    ds,eax
ffff800000814542:	58                   	pop    rax
ffff800000814543:	8e c0                	mov    es,eax
ffff800000814545:	41 5f                	pop    r15
ffff800000814547:	41 5e                	pop    r14
ffff800000814549:	41 5d                	pop    r13
ffff80000081454b:	41 5c                	pop    r12
ffff80000081454d:	41 5b                	pop    r11
ffff80000081454f:	41 5a                	pop    r10
ffff800000814551:	41 59                	pop    r9
ffff800000814553:	41 58                	pop    r8
ffff800000814555:	5e                   	pop    rsi
ffff800000814556:	5f                   	pop    rdi
ffff800000814557:	5a                   	pop    rdx
ffff800000814558:	59                   	pop    rcx
ffff800000814559:	5b                   	pop    rbx
ffff80000081455a:	58                   	pop    rax
ffff80000081455b:	c3                   	ret    

ffff80000081455c <move_to_user_mode>:
move_to_user_mode():
ffff80000081455c:	48 b9 6c 45 81 00 00 	movabs rcx,0xffff80000081456c
ffff800000814563:	80 ff ff 
ffff800000814566:	9c                   	pushf  
ffff800000814567:	41 5b                	pop    r11
ffff800000814569:	48 0f 07             	sysretq 

ffff80000081456c <move_to_user_mode.result>:
move_to_user_mode.result():
ffff80000081456c:	b8 2b 00 00 00       	mov    eax,0x2b
ffff800000814571:	8e c0                	mov    es,eax
ffff800000814573:	8e d8                	mov    ds,eax
ffff800000814575:	8e e0                	mov    fs,eax
ffff800000814577:	8e e8                	mov    gs,eax
ffff800000814579:	c3                   	ret    
