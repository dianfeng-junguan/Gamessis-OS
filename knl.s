
bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

ffff800000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:12
#include "syscall.h"
#include "kb.h"
#pragma pack(1)
gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
ffff800000800000:	f3 0f 1e fa          	endbr64 
ffff800000800004:	55                   	push   rbp
ffff800000800005:	48 89 e5             	mov    rbp,rsp
ffff800000800008:	41 57                	push   r15
ffff80000080000a:	53                   	push   rbx
ffff80000080000b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080000f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080000f <init_int+0xf>
ffff800000800016:	49 bb 21 da 11 00 00 	movabs r11,0x11da21
ffff80000080001d:	00 00 00 
ffff800000800020:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:14
    //asm volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800023:	48 b8 30 ff ff ff ff 	movabs rax,0xffffffffffffff30
ffff80000080002a:	ff ff ff 
ffff80000080002d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800031:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800036:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080003b:	48 89 c6             	mov    rsi,rax
ffff80000080003e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000800043:	49 89 df             	mov    r15,rbx
ffff800000800046:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff80000080004d:	ff ff ff 
ffff800000800050:	48 01 d8             	add    rax,rbx
ffff800000800053:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:15
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800055:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080005c:	ff ff ff 
ffff80000080005f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800063:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800068:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080006d:	48 89 c6             	mov    rsi,rax
ffff800000800070:	bf 01 00 00 00       	mov    edi,0x1
ffff800000800075:	49 89 df             	mov    r15,rbx
ffff800000800078:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff80000080007f:	ff ff ff 
ffff800000800082:	48 01 d8             	add    rax,rbx
ffff800000800085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800087:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080008e:	ff ff ff 
ffff800000800091:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800095:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080009a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080009f:	48 89 c6             	mov    rsi,rax
ffff8000008000a2:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008000a7:	49 89 df             	mov    r15,rbx
ffff8000008000aa:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff8000008000b1:	ff ff ff 
ffff8000008000b4:	48 01 d8             	add    rax,rbx
ffff8000008000b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000b9:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff8000008000c0:	ff ff ff 
ffff8000008000c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000c7:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000cc:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008000d1:	48 89 c6             	mov    rsi,rax
ffff8000008000d4:	bf 03 00 00 00       	mov    edi,0x3
ffff8000008000d9:	49 89 df             	mov    r15,rbx
ffff8000008000dc:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff8000008000e3:	ff ff ff 
ffff8000008000e6:	48 01 d8             	add    rax,rbx
ffff8000008000e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000eb:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff8000008000f2:	ff ff ff 
ffff8000008000f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000f9:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000fe:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800103:	48 89 c6             	mov    rsi,rax
ffff800000800106:	bf 04 00 00 00       	mov    edi,0x4
ffff80000080010b:	49 89 df             	mov    r15,rbx
ffff80000080010e:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff800000800115:	ff ff ff 
ffff800000800118:	48 01 d8             	add    rax,rbx
ffff80000080011b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080011d:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000800124:	ff ff ff 
ffff800000800127:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080012b:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800130:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800135:	48 89 c6             	mov    rsi,rax
ffff800000800138:	bf 05 00 00 00       	mov    edi,0x5
ffff80000080013d:	49 89 df             	mov    r15,rbx
ffff800000800140:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff800000800147:	ff ff ff 
ffff80000080014a:	48 01 d8             	add    rax,rbx
ffff80000080014d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080014f:	48 b8 60 ff ff ff ff 	movabs rax,0xffffffffffffff60
ffff800000800156:	ff ff ff 
ffff800000800159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080015d:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800162:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800167:	48 89 c6             	mov    rsi,rax
ffff80000080016a:	bf 06 00 00 00       	mov    edi,0x6
ffff80000080016f:	49 89 df             	mov    r15,rbx
ffff800000800172:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff800000800179:	ff ff ff 
ffff80000080017c:	48 01 d8             	add    rax,rbx
ffff80000080017f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800181:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000800188:	ff ff ff 
ffff80000080018b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080018f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800194:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800199:	48 89 c6             	mov    rsi,rax
ffff80000080019c:	bf 07 00 00 00       	mov    edi,0x7
ffff8000008001a1:	49 89 df             	mov    r15,rbx
ffff8000008001a4:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff8000008001ab:	ff ff ff 
ffff8000008001ae:	48 01 d8             	add    rax,rbx
ffff8000008001b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
ffff8000008001b3:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008001ba:	ff ff ff 
ffff8000008001bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001c1:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001c6:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001cb:	48 89 c6             	mov    rsi,rax
ffff8000008001ce:	bf 08 00 00 00       	mov    edi,0x8
ffff8000008001d3:	49 89 df             	mov    r15,rbx
ffff8000008001d6:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff8000008001dd:	ff ff ff 
ffff8000008001e0:	48 01 d8             	add    rax,rbx
ffff8000008001e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008001e5:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008001ec:	ff ff ff 
ffff8000008001ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001f3:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001f8:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001fd:	48 89 c6             	mov    rsi,rax
ffff800000800200:	bf 09 00 00 00       	mov    edi,0x9
ffff800000800205:	49 89 df             	mov    r15,rbx
ffff800000800208:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff80000080020f:	ff ff ff 
ffff800000800212:	48 01 d8             	add    rax,rbx
ffff800000800215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800217:	48 b8 d0 ff ff ff ff 	movabs rax,0xffffffffffffffd0
ffff80000080021e:	ff ff ff 
ffff800000800221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800225:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080022a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080022f:	48 89 c6             	mov    rsi,rax
ffff800000800232:	bf 0a 00 00 00       	mov    edi,0xa
ffff800000800237:	49 89 df             	mov    r15,rbx
ffff80000080023a:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff800000800241:	ff ff ff 
ffff800000800244:	48 01 d8             	add    rax,rbx
ffff800000800247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800249:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff800000800250:	ff ff ff 
ffff800000800253:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800257:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080025c:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800261:	48 89 c6             	mov    rsi,rax
ffff800000800264:	bf 0b 00 00 00       	mov    edi,0xb
ffff800000800269:	49 89 df             	mov    r15,rbx
ffff80000080026c:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff800000800273:	ff ff ff 
ffff800000800276:	48 01 d8             	add    rax,rbx
ffff800000800279:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
ffff80000080027b:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff800000800282:	ff ff ff 
ffff800000800285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800289:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080028e:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800293:	48 89 c6             	mov    rsi,rax
ffff800000800296:	bf 0c 00 00 00       	mov    edi,0xc
ffff80000080029b:	49 89 df             	mov    r15,rbx
ffff80000080029e:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff8000008002a5:	ff ff ff 
ffff8000008002a8:	48 01 d8             	add    rax,rbx
ffff8000008002ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002ad:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008002b4:	ff ff ff 
ffff8000008002b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002bb:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002c0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002c5:	48 89 c6             	mov    rsi,rax
ffff8000008002c8:	bf 0d 00 00 00       	mov    edi,0xd
ffff8000008002cd:	49 89 df             	mov    r15,rbx
ffff8000008002d0:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff8000008002d7:	ff ff ff 
ffff8000008002da:	48 01 d8             	add    rax,rbx
ffff8000008002dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002df:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff8000008002e6:	ff ff ff 
ffff8000008002e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002ed:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002f2:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002f7:	48 89 c6             	mov    rsi,rax
ffff8000008002fa:	bf 0e 00 00 00       	mov    edi,0xe
ffff8000008002ff:	49 89 df             	mov    r15,rbx
ffff800000800302:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff800000800309:	ff ff ff 
ffff80000080030c:	48 01 d8             	add    rax,rbx
ffff80000080030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800311:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000800318:	ff ff ff 
ffff80000080031b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080031f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800324:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800329:	48 89 c6             	mov    rsi,rax
ffff80000080032c:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000800331:	49 89 df             	mov    r15,rbx
ffff800000800334:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff80000080033b:	ff ff ff 
ffff80000080033e:	48 01 d8             	add    rax,rbx
ffff800000800341:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800343:	48 b8 68 ff ff ff ff 	movabs rax,0xffffffffffffff68
ffff80000080034a:	ff ff ff 
ffff80000080034d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800351:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800356:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080035b:	48 89 c6             	mov    rsi,rax
ffff80000080035e:	bf 10 00 00 00       	mov    edi,0x10
ffff800000800363:	49 89 df             	mov    r15,rbx
ffff800000800366:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff80000080036d:	ff ff ff 
ffff800000800370:	48 01 d8             	add    rax,rbx
ffff800000800373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    for (int i=17;i<48;i++)
ffff800000800375:	c7 45 ec 11 00 00 00 	mov    DWORD PTR [rbp-0x14],0x11
ffff80000080037c:	eb 39                	jmp    ffff8000008003b7 <init_int+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff80000080037e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000800385:	ff ff ff 
ffff800000800388:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080038c:	48 89 c6             	mov    rsi,rax
ffff80000080038f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000800392:	0f b6 c0             	movzx  eax,al
ffff800000800395:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff80000080039a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080039f:	89 c7                	mov    edi,eax
ffff8000008003a1:	49 89 df             	mov    r15,rbx
ffff8000008003a4:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff8000008003ab:	ff ff ff 
ffff8000008003ae:	48 01 d8             	add    rax,rbx
ffff8000008003b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31 (discriminator 3)
    for (int i=17;i<48;i++)
ffff8000008003b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31 (discriminator 1)
ffff8000008003b7:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff8000008003bb:	7e c1                	jle    ffff80000080037e <init_int+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003bd:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff8000008003c4:	ff ff ff 
ffff8000008003c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003cb:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff8000008003d0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008003d5:	48 89 c6             	mov    rsi,rax
ffff8000008003d8:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008003dd:	49 89 df             	mov    r15,rbx
ffff8000008003e0:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff8000008003e7:	ff ff ff 
ffff8000008003ea:	48 01 d8             	add    rax,rbx
ffff8000008003ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003ef:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff8000008003f6:	ff ff ff 
ffff8000008003f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003fd:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800402:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800407:	48 89 c6             	mov    rsi,rax
ffff80000080040a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080040f:	49 89 df             	mov    r15,rbx
ffff800000800412:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff800000800419:	ff ff ff 
ffff80000080041c:	48 01 d8             	add    rax,rbx
ffff80000080041f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff800000800421:	48 b8 f8 ff ff ff ff 	movabs rax,0xfffffffffffffff8
ffff800000800428:	ff ff ff 
ffff80000080042b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080042f:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800434:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800439:	48 89 c6             	mov    rsi,rax
ffff80000080043c:	bf 2e 00 00 00       	mov    edi,0x2e
ffff800000800441:	49 89 df             	mov    r15,rbx
ffff800000800444:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff80000080044b:	ff ff ff 
ffff80000080044e:	48 01 d8             	add    rax,rbx
ffff800000800451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
ffff800000800453:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff80000080045a:	ff ff ff 
ffff80000080045d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800461:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800466:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080046b:	48 89 c6             	mov    rsi,rax
ffff80000080046e:	bf 80 00 00 00       	mov    edi,0x80
ffff800000800473:	49 89 df             	mov    r15,rbx
ffff800000800476:	48 b8 a2 2b ee ff ff 	movabs rax,0xffffffffffee2ba2
ffff80000080047d:	ff ff ff 
ffff800000800480:	48 01 d8             	add    rax,rbx
ffff800000800483:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:41
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
ffff800000800485:	be 11 00 00 00       	mov    esi,0x11
ffff80000080048a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080048f:	49 89 df             	mov    r15,rbx
ffff800000800492:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff800000800499:	ff ff ff 
ffff80000080049c:	48 01 d8             	add    rax,rbx
ffff80000080049f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:42
	outb(0xA0,0x11);
ffff8000008004a1:	be 11 00 00 00       	mov    esi,0x11
ffff8000008004a6:	bf a0 00 00 00       	mov    edi,0xa0
ffff8000008004ab:	49 89 df             	mov    r15,rbx
ffff8000008004ae:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff8000008004b5:	ff ff ff 
ffff8000008004b8:	48 01 d8             	add    rax,rbx
ffff8000008004bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:44
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
ffff8000008004bd:	be 20 00 00 00       	mov    esi,0x20
ffff8000008004c2:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004c7:	49 89 df             	mov    r15,rbx
ffff8000008004ca:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff8000008004d1:	ff ff ff 
ffff8000008004d4:	48 01 d8             	add    rax,rbx
ffff8000008004d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:45
	outb(0xA1,0x28);
ffff8000008004d9:	be 28 00 00 00       	mov    esi,0x28
ffff8000008004de:	bf a1 00 00 00       	mov    edi,0xa1
ffff8000008004e3:	49 89 df             	mov    r15,rbx
ffff8000008004e6:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff8000008004ed:	ff ff ff 
ffff8000008004f0:	48 01 d8             	add    rax,rbx
ffff8000008004f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:47
	//ICW3
	outb(0x21,0x04);
ffff8000008004f5:	be 04 00 00 00       	mov    esi,0x4
ffff8000008004fa:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004ff:	49 89 df             	mov    r15,rbx
ffff800000800502:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff800000800509:	ff ff ff 
ffff80000080050c:	48 01 d8             	add    rax,rbx
ffff80000080050f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:48
	outb(0xA1,0x02);
ffff800000800511:	be 02 00 00 00       	mov    esi,0x2
ffff800000800516:	bf a1 00 00 00       	mov    edi,0xa1
ffff80000080051b:	49 89 df             	mov    r15,rbx
ffff80000080051e:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff800000800525:	ff ff ff 
ffff800000800528:	48 01 d8             	add    rax,rbx
ffff80000080052b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:50
	//ICW4
	outb(0x21,0x01);
ffff80000080052d:	be 01 00 00 00       	mov    esi,0x1
ffff800000800532:	bf 21 00 00 00       	mov    edi,0x21
ffff800000800537:	49 89 df             	mov    r15,rbx
ffff80000080053a:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff800000800541:	ff ff ff 
ffff800000800544:	48 01 d8             	add    rax,rbx
ffff800000800547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:51
	outb(0xA1,0x01);
ffff800000800549:	be 01 00 00 00       	mov    esi,0x1
ffff80000080054e:	bf a1 00 00 00       	mov    edi,0xa1
ffff800000800553:	49 89 df             	mov    r15,rbx
ffff800000800556:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080055d:	ff ff ff 
ffff800000800560:	48 01 d8             	add    rax,rbx
ffff800000800563:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:53

    turn_on_int();
ffff800000800565:	49 89 df             	mov    r15,rbx
ffff800000800568:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080056d:	48 ba 6a a1 ee ff ff 	movabs rdx,0xffffffffffeea16a
ffff800000800574:	ff ff ff 
ffff800000800577:	48 01 da             	add    rdx,rbx
ffff80000080057a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:57


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
ffff80000080057c:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000800583:	ff ff ff 
ffff800000800586:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080058a:	48 89 c6             	mov    rsi,rax
ffff80000080058d:	b8 82 00 00 c0       	mov    eax,0xc0000082
ffff800000800592:	48 89 c7             	mov    rdi,rax
ffff800000800595:	49 89 df             	mov    r15,rbx
ffff800000800598:	48 b8 37 34 ee ff ff 	movabs rax,0xffffffffffee3437
ffff80000080059f:	ff ff ff 
ffff8000008005a2:	48 01 d8             	add    rax,rbx
ffff8000008005a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:59
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
ffff8000008005a7:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
ffff8000008005ae:	b8 84 00 00 c0       	mov    eax,0xc0000084
ffff8000008005b3:	48 89 c7             	mov    rdi,rax
ffff8000008005b6:	49 89 df             	mov    r15,rbx
ffff8000008005b9:	48 b8 37 34 ee ff ff 	movabs rax,0xffffffffffee3437
ffff8000008005c0:	ff ff ff 
ffff8000008005c3:	48 01 d8             	add    rax,rbx
ffff8000008005c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:60
}
ffff8000008005c8:	90                   	nop
ffff8000008005c9:	48 83 c4 10          	add    rsp,0x10
ffff8000008005cd:	5b                   	pop    rbx
ffff8000008005ce:	41 5f                	pop    r15
ffff8000008005d0:	5d                   	pop    rbp
ffff8000008005d1:	c3                   	ret    

ffff8000008005d2 <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:62
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
ffff8000008005d2:	f3 0f 1e fa          	endbr64 
ffff8000008005d6:	55                   	push   rbp
ffff8000008005d7:	48 89 e5             	mov    rbp,rsp
ffff8000008005da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008005da <set_gate+0x8>
ffff8000008005e1:	49 bb 56 d4 11 00 00 	movabs r11,0x11d456
ffff8000008005e8:	00 00 00 
ffff8000008005eb:	4c 01 d8             	add    rax,r11
ffff8000008005ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008005f2:	89 d6                	mov    esi,edx
ffff8000008005f4:	89 ca                	mov    edx,ecx
ffff8000008005f6:	89 f9                	mov    ecx,edi
ffff8000008005f8:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
ffff8000008005fb:	89 f1                	mov    ecx,esi
ffff8000008005fd:	66 89 4d f8          	mov    WORD PTR [rbp-0x8],cx
ffff800000800601:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:69
    /* idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector; */
#else
    offset|=KNL_BASE;//中断必须在内核空间
ffff800000800605:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080060c:	80 ff ff 
ffff80000080060f:	48 09 55 f0          	or     QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:70
    idt[index].offset_low=offset&0xffff;
ffff800000800613:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000080061a:	ff ff ff 
ffff80000080061d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000800624:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800628:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080062c:	48 01 ca             	add    rdx,rcx
ffff80000080062f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000800633:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_mid=(offset>>16)&0xffff;
ffff800000800636:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080063a:	48 89 d1             	mov    rcx,rdx
ffff80000080063d:	48 c1 e9 10          	shr    rcx,0x10
ffff800000800641:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800648:	ff ff ff 
ffff80000080064b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080064f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000800652:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800656:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080065a:	48 01 f2             	add    rdx,rsi
ffff80000080065d:	66 89 4a 06          	mov    WORD PTR [rdx+0x6],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_high=(offset>>32);//0x0000ffff;
ffff800000800661:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000800665:	48 89 d1             	mov    rcx,rdx
ffff800000800668:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080066c:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800673:	ff ff ff 
ffff800000800676:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080067a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080067d:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800681:	48 c1 e2 04          	shl    rdx,0x4
ffff800000800685:	48 01 f2             	add    rdx,rsi
ffff800000800688:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].attr=attr|1;//1是ist索引
ffff80000080068b:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800692:	ff ff ff 
ffff800000800695:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800699:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080069c:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006a0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006a4:	48 01 ca             	add    rdx,rcx
ffff8000008006a7:	0f b7 4d ec          	movzx  ecx,WORD PTR [rbp-0x14]
ffff8000008006ab:	83 c9 01             	or     ecx,0x1
ffff8000008006ae:	66 89 4a 04          	mov    WORD PTR [rdx+0x4],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].selector=selector;
ffff8000008006b2:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff8000008006b9:	ff ff ff 
ffff8000008006bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008006c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008006c3:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006c7:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006cb:	48 01 d1             	add    rcx,rdx
ffff8000008006ce:	0f b7 55 f8          	movzx  edx,WORD PTR [rbp-0x8]
ffff8000008006d2:	66 89 51 02          	mov    WORD PTR [rcx+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].rsvd=0;
ffff8000008006d6:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff8000008006dd:	ff ff ff 
ffff8000008006e0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008006e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008006e7:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffff8000008006eb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008006ef:	48 01 d0             	add    rax,rdx
ffff8000008006f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:77
#endif
}
ffff8000008006f9:	90                   	nop
ffff8000008006fa:	5d                   	pop    rbp
ffff8000008006fb:	c3                   	ret    

ffff8000008006fc <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:79

void divide_err(){
ffff8000008006fc:	f3 0f 1e fa          	endbr64 
ffff800000800700:	55                   	push   rbp
ffff800000800701:	48 89 e5             	mov    rbp,rsp
ffff800000800704:	41 57                	push   r15
ffff800000800706:	48 83 ec 08          	sub    rsp,0x8
ffff80000080070a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080070a <divide_err+0xe>
ffff800000800711:	49 bb 26 d3 11 00 00 	movabs r11,0x11d326
ffff800000800718:	00 00 00 
ffff80000080071b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:80
    asm("cli");
ffff80000080071e:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:82
    //puts("divide err");
    eoi();
ffff80000080071f:	49 89 d7             	mov    r15,rdx
ffff800000800722:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800727:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff80000080072e:	ff ff ff 
ffff800000800731:	48 01 d1             	add    rcx,rdx
ffff800000800734:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:83
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800736:	fb                   	sti    
ffff800000800737:	c9                   	leave  
ffff800000800738:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
}
ffff80000080073a:	90                   	nop
ffff80000080073b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080073f:	c9                   	leave  
ffff800000800740:	c3                   	ret    

ffff800000800741 <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:86

void debug(){
ffff800000800741:	f3 0f 1e fa          	endbr64 
ffff800000800745:	55                   	push   rbp
ffff800000800746:	48 89 e5             	mov    rbp,rsp
ffff800000800749:	41 57                	push   r15
ffff80000080074b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080074f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080074f <debug+0xe>
ffff800000800756:	49 bb e1 d2 11 00 00 	movabs r11,0x11d2e1
ffff80000080075d:	00 00 00 
ffff800000800760:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:87
    asm("cli");
ffff800000800763:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:89
    //puts("debug");
    eoi();
ffff800000800764:	49 89 d7             	mov    r15,rdx
ffff800000800767:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080076c:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff800000800773:	ff ff ff 
ffff800000800776:	48 01 d1             	add    rcx,rdx
ffff800000800779:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:90
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080077b:	fb                   	sti    
ffff80000080077c:	c9                   	leave  
ffff80000080077d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
}
ffff80000080077f:	90                   	nop
ffff800000800780:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800784:	c9                   	leave  
ffff800000800785:	c3                   	ret    

ffff800000800786 <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
void default_int_proc(){
ffff800000800786:	f3 0f 1e fa          	endbr64 
ffff80000080078a:	55                   	push   rbp
ffff80000080078b:	48 89 e5             	mov    rbp,rsp
ffff80000080078e:	41 57                	push   r15
ffff800000800790:	48 83 ec 08          	sub    rsp,0x8
ffff800000800794:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800794 <default_int_proc+0xe>
ffff80000080079b:	49 bb 9c d2 11 00 00 	movabs r11,0x11d29c
ffff8000008007a2:	00 00 00 
ffff8000008007a5:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
    asm("cli");
ffff8000008007a8:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:95
    //puts("default_int_proc");
    eoi();
ffff8000008007a9:	49 89 d7             	mov    r15,rdx
ffff8000008007ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007b1:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff8000008007b8:	ff ff ff 
ffff8000008007bb:	48 01 d1             	add    rcx,rdx
ffff8000008007be:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:96
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008007c0:	fb                   	sti    
ffff8000008007c1:	c9                   	leave  
ffff8000008007c2:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
}
ffff8000008007c4:	90                   	nop
ffff8000008007c5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008007c9:	c9                   	leave  
ffff8000008007ca:	c3                   	ret    

ffff8000008007cb <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
void breakpoint(){
ffff8000008007cb:	f3 0f 1e fa          	endbr64 
ffff8000008007cf:	55                   	push   rbp
ffff8000008007d0:	48 89 e5             	mov    rbp,rsp
ffff8000008007d3:	41 57                	push   r15
ffff8000008007d5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008007d9:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008007d9 <breakpoint+0xe>
ffff8000008007e0:	49 bb 57 d2 11 00 00 	movabs r11,0x11d257
ffff8000008007e7:	00 00 00 
ffff8000008007ea:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
    asm("cli");
ffff8000008007ed:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:101
    //puts("breakpoint");
    eoi();
ffff8000008007ee:	49 89 d7             	mov    r15,rdx
ffff8000008007f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007f6:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff8000008007fd:	ff ff ff 
ffff800000800800:	48 01 d1             	add    rcx,rdx
ffff800000800803:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:102
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800805:	fb                   	sti    
ffff800000800806:	c9                   	leave  
ffff800000800807:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
}
ffff800000800809:	90                   	nop
ffff80000080080a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080080e:	c9                   	leave  
ffff80000080080f:	c3                   	ret    

ffff800000800810 <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
void overflow(){
ffff800000800810:	f3 0f 1e fa          	endbr64 
ffff800000800814:	55                   	push   rbp
ffff800000800815:	48 89 e5             	mov    rbp,rsp
ffff800000800818:	41 57                	push   r15
ffff80000080081a:	48 83 ec 08          	sub    rsp,0x8
ffff80000080081e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080081e <overflow+0xe>
ffff800000800825:	49 bb 12 d2 11 00 00 	movabs r11,0x11d212
ffff80000080082c:	00 00 00 
ffff80000080082f:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
    asm("cli");
ffff800000800832:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:107
    //puts("overflow");
    eoi();
ffff800000800833:	49 89 d7             	mov    r15,rdx
ffff800000800836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080083b:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff800000800842:	ff ff ff 
ffff800000800845:	48 01 d1             	add    rcx,rdx
ffff800000800848:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:108
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080084a:	fb                   	sti    
ffff80000080084b:	c9                   	leave  
ffff80000080084c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
}
ffff80000080084e:	90                   	nop
ffff80000080084f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800853:	c9                   	leave  
ffff800000800854:	c3                   	ret    

ffff800000800855 <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
void bounds(){
ffff800000800855:	f3 0f 1e fa          	endbr64 
ffff800000800859:	55                   	push   rbp
ffff80000080085a:	48 89 e5             	mov    rbp,rsp
ffff80000080085d:	41 57                	push   r15
ffff80000080085f:	48 83 ec 08          	sub    rsp,0x8
ffff800000800863:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800863 <bounds+0xe>
ffff80000080086a:	49 bb cd d1 11 00 00 	movabs r11,0x11d1cd
ffff800000800871:	00 00 00 
ffff800000800874:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
    asm("cli");
ffff800000800877:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:113
    //puts("bounds");
    eoi();
ffff800000800878:	49 89 d7             	mov    r15,rdx
ffff80000080087b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800880:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff800000800887:	ff ff ff 
ffff80000080088a:	48 01 d1             	add    rcx,rdx
ffff80000080088d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:114
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080088f:	fb                   	sti    
ffff800000800890:	c9                   	leave  
ffff800000800891:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
}
ffff800000800893:	90                   	nop
ffff800000800894:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800898:	c9                   	leave  
ffff800000800899:	c3                   	ret    

ffff80000080089a <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
void undefined_operator(){
ffff80000080089a:	f3 0f 1e fa          	endbr64 
ffff80000080089e:	55                   	push   rbp
ffff80000080089f:	48 89 e5             	mov    rbp,rsp
ffff8000008008a2:	41 57                	push   r15
ffff8000008008a4:	53                   	push   rbx
ffff8000008008a5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008008a5 <undefined_operator+0xb>
ffff8000008008ac:	49 bb 8b d1 11 00 00 	movabs r11,0x11d18b
ffff8000008008b3:	00 00 00 
ffff8000008008b6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:118
    //puts("undef operator");
    eoi();
ffff8000008008b9:	49 89 df             	mov    r15,rbx
ffff8000008008bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008c1:	48 ba 5e a1 ee ff ff 	movabs rdx,0xffffffffffeea15e
ffff8000008008c8:	ff ff ff 
ffff8000008008cb:	48 01 da             	add    rdx,rbx
ffff8000008008ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:119
    report_back_trace_of_err();
ffff8000008008d0:	49 89 df             	mov    r15,rbx
ffff8000008008d3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008d8:	48 ba 8e a1 ee ff ff 	movabs rdx,0xffffffffffeea18e
ffff8000008008df:	ff ff ff 
ffff8000008008e2:	48 01 da             	add    rdx,rbx
ffff8000008008e5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
ffff8000008008e7:	eb fe                	jmp    ffff8000008008e7 <undefined_operator+0x4d>
ffff8000008008e9:	c9                   	leave  
ffff8000008008ea:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
}
ffff8000008008ec:	90                   	nop
ffff8000008008ed:	5b                   	pop    rbx
ffff8000008008ee:	41 5f                	pop    r15
ffff8000008008f0:	5d                   	pop    rbp
ffff8000008008f1:	c3                   	ret    

ffff8000008008f2 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
void coprocessor_notexist(){
ffff8000008008f2:	f3 0f 1e fa          	endbr64 
ffff8000008008f6:	55                   	push   rbp
ffff8000008008f7:	48 89 e5             	mov    rbp,rsp
ffff8000008008fa:	41 57                	push   r15
ffff8000008008fc:	48 83 ec 08          	sub    rsp,0x8
ffff800000800900:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800900 <coprocessor_notexist+0xe>
ffff800000800907:	49 bb 30 d1 11 00 00 	movabs r11,0x11d130
ffff80000080090e:	00 00 00 
ffff800000800911:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
    asm("cli");
ffff800000800914:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:125
    //puts("coprocessor doesnt exist");
    eoi();
ffff800000800915:	49 89 d7             	mov    r15,rdx
ffff800000800918:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080091d:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff800000800924:	ff ff ff 
ffff800000800927:	48 01 d1             	add    rcx,rdx
ffff80000080092a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:126
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080092c:	fb                   	sti    
ffff80000080092d:	c9                   	leave  
ffff80000080092e:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
}
ffff800000800930:	90                   	nop
ffff800000800931:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800935:	c9                   	leave  
ffff800000800936:	c3                   	ret    

ffff800000800937 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:128
void double_ints(){
ffff800000800937:	f3 0f 1e fa          	endbr64 
ffff80000080093b:	55                   	push   rbp
ffff80000080093c:	48 89 e5             	mov    rbp,rsp
ffff80000080093f:	41 57                	push   r15
ffff800000800941:	48 83 ec 08          	sub    rsp,0x8
ffff800000800945:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800945 <double_ints+0xe>
ffff80000080094c:	49 bb eb d0 11 00 00 	movabs r11,0x11d0eb
ffff800000800953:	00 00 00 
ffff800000800956:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
    asm("cli");
ffff800000800959:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:131
    //puts("double interrupts");
    eoi();
ffff80000080095a:	49 89 d7             	mov    r15,rdx
ffff80000080095d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800962:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff800000800969:	ff ff ff 
ffff80000080096c:	48 01 d1             	add    rcx,rdx
ffff80000080096f:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:132
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800971:	fb                   	sti    
ffff800000800972:	c9                   	leave  
ffff800000800973:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
}
ffff800000800975:	90                   	nop
ffff800000800976:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080097a:	c9                   	leave  
ffff80000080097b:	c3                   	ret    

ffff80000080097c <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:134
void coprocessor_seg_overbound(){
ffff80000080097c:	f3 0f 1e fa          	endbr64 
ffff800000800980:	55                   	push   rbp
ffff800000800981:	48 89 e5             	mov    rbp,rsp
ffff800000800984:	41 57                	push   r15
ffff800000800986:	48 83 ec 08          	sub    rsp,0x8
ffff80000080098a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080098a <coprocessor_seg_overbound+0xe>
ffff800000800991:	49 bb a6 d0 11 00 00 	movabs r11,0x11d0a6
ffff800000800998:	00 00 00 
ffff80000080099b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:136
    //puts("coprocessfor seg overdound");
    eoi();
ffff80000080099e:	49 89 d7             	mov    r15,rdx
ffff8000008009a1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009a6:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff8000008009ad:	ff ff ff 
ffff8000008009b0:	48 01 d1             	add    rcx,rdx
ffff8000008009b3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:137
    __asm__ volatile ("leave \r\n iretq");
ffff8000008009b5:	c9                   	leave  
ffff8000008009b6:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
}
ffff8000008009b8:	90                   	nop
ffff8000008009b9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008009bd:	c9                   	leave  
ffff8000008009be:	c3                   	ret    

ffff8000008009bf <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:139
void invalid_tss(){
ffff8000008009bf:	f3 0f 1e fa          	endbr64 
ffff8000008009c3:	55                   	push   rbp
ffff8000008009c4:	48 89 e5             	mov    rbp,rsp
ffff8000008009c7:	41 57                	push   r15
ffff8000008009c9:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009cd:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009cd <invalid_tss+0xe>
ffff8000008009d4:	49 bb 63 d0 11 00 00 	movabs r11,0x11d063
ffff8000008009db:	00 00 00 
ffff8000008009de:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
    asm("cli");
ffff8000008009e1:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:142
    //puts("invalid tss");
    eoi();
ffff8000008009e2:	49 89 d7             	mov    r15,rdx
ffff8000008009e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009ea:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff8000008009f1:	ff ff ff 
ffff8000008009f4:	48 01 d1             	add    rcx,rdx
ffff8000008009f7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:143
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008009f9:	fb                   	sti    
ffff8000008009fa:	c9                   	leave  
ffff8000008009fb:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
}
ffff8000008009fd:	90                   	nop
ffff8000008009fe:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a02:	c9                   	leave  
ffff800000800a03:	c3                   	ret    

ffff800000800a04 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:145
void segment_notexist(){
ffff800000800a04:	f3 0f 1e fa          	endbr64 
ffff800000800a08:	55                   	push   rbp
ffff800000800a09:	48 89 e5             	mov    rbp,rsp
ffff800000800a0c:	41 57                	push   r15
ffff800000800a0e:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a12:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a12 <segment_notexist+0xe>
ffff800000800a19:	49 bb 1e d0 11 00 00 	movabs r11,0x11d01e
ffff800000800a20:	00 00 00 
ffff800000800a23:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
    asm("cli");
ffff800000800a26:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:148
    //puts("seg nonexistent");
    eoi();
ffff800000800a27:	49 89 d7             	mov    r15,rdx
ffff800000800a2a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a2f:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff800000800a36:	ff ff ff 
ffff800000800a39:	48 01 d1             	add    rcx,rdx
ffff800000800a3c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:149
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a3e:	fb                   	sti    
ffff800000800a3f:	c9                   	leave  
ffff800000800a40:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
}
ffff800000800a42:	90                   	nop
ffff800000800a43:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a47:	c9                   	leave  
ffff800000800a48:	c3                   	ret    

ffff800000800a49 <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:151
void stackseg_overbound(){
ffff800000800a49:	f3 0f 1e fa          	endbr64 
ffff800000800a4d:	55                   	push   rbp
ffff800000800a4e:	48 89 e5             	mov    rbp,rsp
ffff800000800a51:	41 57                	push   r15
ffff800000800a53:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a57:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a57 <stackseg_overbound+0xe>
ffff800000800a5e:	49 bb d9 cf 11 00 00 	movabs r11,0x11cfd9
ffff800000800a65:	00 00 00 
ffff800000800a68:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
    asm("cli");
ffff800000800a6b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:154
    //puts("stack seg overbound");
    eoi();
ffff800000800a6c:	49 89 d7             	mov    r15,rdx
ffff800000800a6f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a74:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff800000800a7b:	ff ff ff 
ffff800000800a7e:	48 01 d1             	add    rcx,rdx
ffff800000800a81:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:155
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a83:	fb                   	sti    
ffff800000800a84:	c9                   	leave  
ffff800000800a85:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
}
ffff800000800a87:	90                   	nop
ffff800000800a88:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a8c:	c9                   	leave  
ffff800000800a8d:	c3                   	ret    

ffff800000800a8e <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:157
void general_protect(){
ffff800000800a8e:	f3 0f 1e fa          	endbr64 
ffff800000800a92:	55                   	push   rbp
ffff800000800a93:	48 89 e5             	mov    rbp,rsp
ffff800000800a96:	41 57                	push   r15
ffff800000800a98:	48 83 ec 18          	sub    rsp,0x18
ffff800000800a9c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a9c <general_protect+0xe>
ffff800000800aa3:	49 bb 94 cf 11 00 00 	movabs r11,0x11cf94
ffff800000800aaa:	00 00 00 
ffff800000800aad:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:159
    //print("general protect.");
    int err_code=0;
ffff800000800ab0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:177
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
ffff800000800ab7:	49 89 d7             	mov    r15,rdx
ffff800000800aba:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800abf:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff800000800ac6:	ff ff ff 
ffff800000800ac9:	48 01 d1             	add    rcx,rdx
ffff800000800acc:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:178
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
ffff800000800ace:	c9                   	leave  
ffff800000800acf:	48 83 c4 08          	add    rsp,0x8
ffff800000800ad3:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:179
}
ffff800000800ad5:	90                   	nop
ffff800000800ad6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800ada:	c9                   	leave  
ffff800000800adb:	c3                   	ret    

ffff800000800adc <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:181

void coprocessor_err(){
ffff800000800adc:	f3 0f 1e fa          	endbr64 
ffff800000800ae0:	55                   	push   rbp
ffff800000800ae1:	48 89 e5             	mov    rbp,rsp
ffff800000800ae4:	41 57                	push   r15
ffff800000800ae6:	48 83 ec 08          	sub    rsp,0x8
ffff800000800aea:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800aea <coprocessor_err+0xe>
ffff800000800af1:	49 bb 46 cf 11 00 00 	movabs r11,0x11cf46
ffff800000800af8:	00 00 00 
ffff800000800afb:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:182
    asm("cli");
ffff800000800afe:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:184
    //puts("coprocessor err");
    eoi();
ffff800000800aff:	49 89 d7             	mov    r15,rdx
ffff800000800b02:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800b07:	48 b9 5e a1 ee ff ff 	movabs rcx,0xffffffffffeea15e
ffff800000800b0e:	ff ff ff 
ffff800000800b11:	48 01 d1             	add    rcx,rdx
ffff800000800b14:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:185
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800b16:	fb                   	sti    
ffff800000800b17:	c9                   	leave  
ffff800000800b18:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
}
ffff800000800b1a:	90                   	nop
ffff800000800b1b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800b1f:	c9                   	leave  
ffff800000800b20:	c3                   	ret    

ffff800000800b21 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:205

xchg rcx to r10

*/
int syscall(long a, long b, long c, long d, long e, long f)
{
ffff800000800b21:	f3 0f 1e fa          	endbr64 
ffff800000800b25:	55                   	push   rbp
ffff800000800b26:	48 89 e5             	mov    rbp,rsp
ffff800000800b29:	41 57                	push   r15
ffff800000800b2b:	53                   	push   rbx
ffff800000800b2c:	48 83 ec 40          	sub    rsp,0x40
ffff800000800b30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800b30 <syscall+0xf>
ffff800000800b37:	49 bb 00 cf 11 00 00 	movabs r11,0x11cf00
ffff800000800b3e:	00 00 00 
ffff800000800b41:	4c 01 db             	add    rbx,r11
ffff800000800b44:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000800b48:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000800b4c:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000800b50:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff800000800b54:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
ffff800000800b58:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:207
    unsigned long num;
    asm volatile("":"=a"(num));//这样rax中存的参数就到这了
ffff800000800b5c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:208
    switch (num)
ffff800000800b60:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800b64:	48 83 e8 05          	sub    rax,0x5
ffff800000800b68:	48 83 f8 5f          	cmp    rax,0x5f
ffff800000800b6c:	0f 87 ec 02 00 00    	ja     ffff800000800e5e <syscall+0x33d>
ffff800000800b72:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800b79:	00 
ffff800000800b7a:	48 8d 05 5f a0 11 00 	lea    rax,[rip+0x11a05f]        # ffff80000091abe0 <filesystem+0x20>
ffff800000800b81:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800b85:	48 8d 15 54 a0 11 00 	lea    rdx,[rip+0x11a054]        # ffff80000091abe0 <filesystem+0x20>
ffff800000800b8c:	48 01 d0             	add    rax,rdx
ffff800000800b8f:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:215
        // case 0:return reg_device(a);
        // case 1:return dispose_device(a);
        // case 2:return reg_driver(a);
        // case 3:return dispose_driver(a);
        // case 4:return call_drv_func(a,b,c);
        case 5:return req_page_at(a,b);
ffff800000800b92:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800b96:	89 c2                	mov    edx,eax
ffff800000800b98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800b9c:	89 d6                	mov    esi,edx
ffff800000800b9e:	48 89 c7             	mov    rdi,rax
ffff800000800ba1:	49 89 df             	mov    r15,rbx
ffff800000800ba4:	48 b8 7b 54 ee ff ff 	movabs rax,0xffffffffffee547b
ffff800000800bab:	ff ff ff 
ffff800000800bae:	48 01 d8             	add    rax,rbx
ffff800000800bb1:	ff d0                	call   rax
ffff800000800bb3:	e9 a6 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:216
        case 6:return free_page(a);
ffff800000800bb8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bbc:	48 89 c7             	mov    rdi,rax
ffff800000800bbf:	49 89 df             	mov    r15,rbx
ffff800000800bc2:	48 b8 6f 51 ee ff ff 	movabs rax,0xffffffffffee516f
ffff800000800bc9:	ff ff ff 
ffff800000800bcc:	48 01 d8             	add    rax,rbx
ffff800000800bcf:	ff d0                	call   rax
ffff800000800bd1:	e9 88 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:217
        case 7:return reg_proc(a, b, c);
ffff800000800bd6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800bda:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000800bde:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800be2:	48 89 ce             	mov    rsi,rcx
ffff800000800be5:	48 89 c7             	mov    rdi,rax
ffff800000800be8:	49 89 df             	mov    r15,rbx
ffff800000800beb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800bf0:	48 b9 9e 7f ee ff ff 	movabs rcx,0xffffffffffee7f9e
ffff800000800bf7:	ff ff ff 
ffff800000800bfa:	48 01 d9             	add    rcx,rbx
ffff800000800bfd:	ff d1                	call   rcx
ffff800000800bff:	e9 5a 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:218
        case 8:del_proc(a);
ffff800000800c04:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c08:	89 c7                	mov    edi,eax
ffff800000800c0a:	49 89 df             	mov    r15,rbx
ffff800000800c0d:	48 b8 4f 7c ee ff ff 	movabs rax,0xffffffffffee7c4f
ffff800000800c14:	ff ff ff 
ffff800000800c17:	48 01 d8             	add    rax,rbx
ffff800000800c1a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        case 10:chk_vm(a,b);
ffff800000800c1c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c20:	89 c2                	mov    edx,eax
ffff800000800c22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c26:	89 d6                	mov    esi,edx
ffff800000800c28:	89 c7                	mov    edi,eax
ffff800000800c2a:	49 89 df             	mov    r15,rbx
ffff800000800c2d:	48 b8 ad 55 ee ff ff 	movabs rax,0xffffffffffee55ad
ffff800000800c34:	ff ff ff 
ffff800000800c37:	48 01 d8             	add    rax,rbx
ffff800000800c3a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 11:return sys_open(a,b);
ffff800000800c3c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c40:	89 c2                	mov    edx,eax
ffff800000800c42:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c46:	89 d6                	mov    esi,edx
ffff800000800c48:	48 89 c7             	mov    rdi,rax
ffff800000800c4b:	49 89 df             	mov    r15,rbx
ffff800000800c4e:	48 b8 20 dd ee ff ff 	movabs rax,0xffffffffffeedd20
ffff800000800c55:	ff ff ff 
ffff800000800c58:	48 01 d8             	add    rax,rbx
ffff800000800c5b:	ff d0                	call   rax
ffff800000800c5d:	e9 fc 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 12:return sys_close(a);
ffff800000800c62:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c66:	89 c7                	mov    edi,eax
ffff800000800c68:	49 89 df             	mov    r15,rbx
ffff800000800c6b:	48 b8 4a e3 ee ff ff 	movabs rax,0xffffffffffeee34a
ffff800000800c72:	ff ff ff 
ffff800000800c75:	48 01 d8             	add    rax,rbx
ffff800000800c78:	ff d0                	call   rax
ffff800000800c7a:	e9 df 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 13:return sys_read(a,b,c);
ffff800000800c7f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c83:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800c87:	89 d1                	mov    ecx,edx
ffff800000800c89:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800c8d:	48 89 c6             	mov    rsi,rax
ffff800000800c90:	89 cf                	mov    edi,ecx
ffff800000800c92:	49 89 df             	mov    r15,rbx
ffff800000800c95:	48 b8 41 e4 ee ff ff 	movabs rax,0xffffffffffeee441
ffff800000800c9c:	ff ff ff 
ffff800000800c9f:	48 01 d8             	add    rax,rbx
ffff800000800ca2:	ff d0                	call   rax
ffff800000800ca4:	e9 b5 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 14:return sys_write(a,b,c);
ffff800000800ca9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800cad:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800cb1:	89 d1                	mov    ecx,edx
ffff800000800cb3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800cb7:	48 89 c6             	mov    rsi,rax
ffff800000800cba:	89 cf                	mov    edi,ecx
ffff800000800cbc:	49 89 df             	mov    r15,rbx
ffff800000800cbf:	48 b8 0f e5 ee ff ff 	movabs rax,0xffffffffffeee50f
ffff800000800cc6:	ff ff ff 
ffff800000800cc9:	48 01 d8             	add    rax,rbx
ffff800000800ccc:	ff d0                	call   rax
ffff800000800cce:	e9 8b 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 15:return sys_lseek(a,b,c);
ffff800000800cd3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800cd7:	89 c2                	mov    edx,eax
ffff800000800cd9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800cdd:	89 c1                	mov    ecx,eax
ffff800000800cdf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800ce3:	48 89 c6             	mov    rsi,rax
ffff800000800ce6:	89 cf                	mov    edi,ecx
ffff800000800ce8:	49 89 df             	mov    r15,rbx
ffff800000800ceb:	48 b8 dd e5 ee ff ff 	movabs rax,0xffffffffffeee5dd
ffff800000800cf2:	ff ff ff 
ffff800000800cf5:	48 01 d8             	add    rax,rbx
ffff800000800cf8:	ff d0                	call   rax
ffff800000800cfa:	e9 5f 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:228
        // case 16:return sys_tell(a);
        // case 17:return reg_vol(a,b,c);
        // case 18:return free_vol(a);
        case 19:return execute(a, NULL);
ffff800000800cff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d03:	be 00 00 00 00       	mov    esi,0x0
ffff800000800d08:	48 89 c7             	mov    rdi,rax
ffff800000800d0b:	49 89 df             	mov    r15,rbx
ffff800000800d0e:	48 b8 d4 a4 ee ff ff 	movabs rax,0xffffffffffeea4d4
ffff800000800d15:	ff ff ff 
ffff800000800d18:	48 01 d8             	add    rax,rbx
ffff800000800d1b:	ff d0                	call   rax
ffff800000800d1d:	e9 3c 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:229
        case SYSCALL_EXIT:return sys_exit(a);
ffff800000800d22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d26:	89 c7                	mov    edi,eax
ffff800000800d28:	49 89 df             	mov    r15,rbx
ffff800000800d2b:	48 b8 24 7f ee ff ff 	movabs rax,0xffffffffffee7f24
ffff800000800d32:	ff ff ff 
ffff800000800d35:	48 01 d8             	add    rax,rbx
ffff800000800d38:	ff d0                	call   rax
ffff800000800d3a:	e9 1f 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:230
        case SYSCALL_CALL:return exec_call(a);
ffff800000800d3f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d43:	48 89 c7             	mov    rdi,rax
ffff800000800d46:	49 89 df             	mov    r15,rbx
ffff800000800d49:	48 b8 d7 a8 ee ff ff 	movabs rax,0xffffffffffeea8d7
ffff800000800d50:	ff ff ff 
ffff800000800d53:	48 01 d8             	add    rax,rbx
ffff800000800d56:	ff d0                	call   rax
ffff800000800d58:	e9 01 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:232
        // case SYSCALL_MKFIFO:return sys_mkfifo(a);
        case SYSCALL_MALLOC:return sys_malloc(a);
ffff800000800d5d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d61:	48 89 c7             	mov    rdi,rax
ffff800000800d64:	49 89 df             	mov    r15,rbx
ffff800000800d67:	48 b8 82 82 ee ff ff 	movabs rax,0xffffffffffee8282
ffff800000800d6e:	ff ff ff 
ffff800000800d71:	48 01 d8             	add    rax,rbx
ffff800000800d74:	ff d0                	call   rax
ffff800000800d76:	e9 e3 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        case SYSCALL_FREE:return sys_free(a);
ffff800000800d7b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d7f:	89 c7                	mov    edi,eax
ffff800000800d81:	49 89 df             	mov    r15,rbx
ffff800000800d84:	48 b8 6f 84 ee ff ff 	movabs rax,0xffffffffffee846f
ffff800000800d8b:	ff ff ff 
ffff800000800d8e:	48 01 d8             	add    rax,rbx
ffff800000800d91:	ff d0                	call   rax
ffff800000800d93:	e9 c6 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_KB_READC:return sys_analyse_key();
ffff800000800d98:	49 89 df             	mov    r15,rbx
ffff800000800d9b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800da0:	48 ba 9c 08 ef ff ff 	movabs rdx,0xffffffffffef089c
ffff800000800da7:	ff ff ff 
ffff800000800daa:	48 01 da             	add    rdx,rbx
ffff800000800dad:	ff d2                	call   rdx
ffff800000800daf:	0f be c0             	movsx  eax,al
ffff800000800db2:	e9 a7 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:236
        // case SYSCALL_FIND_DEV:return sys_find_dev(a);
        case SYSCALL_FORK:return sys_fork();
ffff800000800db7:	49 89 df             	mov    r15,rbx
ffff800000800dba:	48 b8 96 88 ee ff ff 	movabs rax,0xffffffffffee8896
ffff800000800dc1:	ff ff ff 
ffff800000800dc4:	48 01 d8             	add    rax,rbx
ffff800000800dc7:	ff d0                	call   rax
ffff800000800dc9:	e9 90 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        case SYSCALL_EXECVE:return sys_execve(a, b, c);
ffff800000800dce:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800dd2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800dd6:	89 c1                	mov    ecx,eax
ffff800000800dd8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800ddc:	89 ce                	mov    esi,ecx
ffff800000800dde:	48 89 c7             	mov    rdi,rax
ffff800000800de1:	49 89 df             	mov    r15,rbx
ffff800000800de4:	48 b8 c8 a5 ee ff ff 	movabs rax,0xffffffffffeea5c8
ffff800000800deb:	ff ff ff 
ffff800000800dee:	48 01 d8             	add    rax,rbx
ffff800000800df1:	ff d0                	call   rax
ffff800000800df3:	eb 69                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:239
        // case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
        case SYSCALL_WAIT:return sys_wait(a,b,c);
ffff800000800df5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800df9:	89 c6                	mov    esi,eax
ffff800000800dfb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800dff:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800e03:	89 d1                	mov    ecx,edx
ffff800000800e05:	89 f2                	mov    edx,esi
ffff800000800e07:	48 89 c6             	mov    rsi,rax
ffff800000800e0a:	89 cf                	mov    edi,ecx
ffff800000800e0c:	49 89 df             	mov    r15,rbx
ffff800000800e0f:	48 b8 26 e7 ee ff ff 	movabs rax,0xffffffffffeee726
ffff800000800e16:	ff ff ff 
ffff800000800e19:	48 01 d8             	add    rax,rbx
ffff800000800e1c:	ff d0                	call   rax
ffff800000800e1e:	eb 3e                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        case SYSCALL_MMAP:return sys_mmap(a,b,c,d,e,f);
ffff800000800e20:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000800e24:	41 89 c0             	mov    r8d,eax
ffff800000800e27:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000800e2b:	89 c7                	mov    edi,eax
ffff800000800e2d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000800e31:	89 c1                	mov    ecx,eax
ffff800000800e33:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800e37:	89 c2                	mov    edx,eax
ffff800000800e39:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000800e3d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e41:	45 89 c1             	mov    r9d,r8d
ffff800000800e44:	41 89 f8             	mov    r8d,edi
ffff800000800e47:	48 89 c7             	mov    rdi,rax
ffff800000800e4a:	49 89 df             	mov    r15,rbx
ffff800000800e4d:	48 b8 41 ed ee ff ff 	movabs rax,0xffffffffffeeed41
ffff800000800e54:	ff ff ff 
ffff800000800e57:	48 01 d8             	add    rax,rbx
ffff800000800e5a:	ff d0                	call   rax
ffff800000800e5c:	eb 00                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:246
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
ffff800000800e5e:	48 83 c4 40          	add    rsp,0x40
ffff800000800e62:	5b                   	pop    rbx
ffff800000800e63:	41 5f                	pop    r15
ffff800000800e65:	5d                   	pop    rbp
ffff800000800e66:	c3                   	ret    

ffff800000800e67 <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:248
void wrmsr(unsigned long address,unsigned long value)
{
ffff800000800e67:	f3 0f 1e fa          	endbr64 
ffff800000800e6b:	55                   	push   rbp
ffff800000800e6c:	48 89 e5             	mov    rbp,rsp
ffff800000800e6f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800e6f <wrmsr+0x8>
ffff800000800e76:	49 bb c1 cb 11 00 00 	movabs r11,0x11cbc1
ffff800000800e7d:	00 00 00 
ffff800000800e80:	4c 01 d8             	add    rax,r11
ffff800000800e83:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000800e87:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:249
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
ffff800000800e8b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800e8f:	48 c1 e8 20          	shr    rax,0x20
ffff800000800e93:	48 89 c2             	mov    rdx,rax
ffff800000800e96:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800e9a:	89 c0                	mov    eax,eax
ffff800000800e9c:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000800ea0:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
ffff800000800ea2:	90                   	nop
ffff800000800ea3:	5d                   	pop    rbp
ffff800000800ea4:	c3                   	ret    

ffff800000800ea5 <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:24
#include "ramdisk.h"
#include "ramfs.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
ffff800000800ea5:	f3 0f 1e fa          	endbr64 
ffff800000800ea9:	55                   	push   rbp
ffff800000800eaa:	48 89 e5             	mov    rbp,rsp
ffff800000800ead:	41 57                	push   r15
ffff800000800eaf:	53                   	push   rbx
ffff800000800eb0:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000800eb7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800eb7 <main+0x12>
ffff800000800ebe:	49 bb 79 cb 11 00 00 	movabs r11,0x11cb79
ffff800000800ec5:	00 00 00 
ffff800000800ec8:	4c 01 db             	add    rbx,r11
ffff800000800ecb:	89 bd fc fe ff ff    	mov    DWORD PTR [rbp-0x104],edi
ffff800000800ed1:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26

    struct multiboot_header* mbi=0ul;
ffff800000800ed8:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000800edf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    mbi=(struct multiboot_header*)addr;
ffff800000800ee0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800ee7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:28
    init_logging();
ffff800000800eeb:	49 89 df             	mov    r15,rbx
ffff800000800eee:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800ef3:	48 ba f6 3a ee ff ff 	movabs rdx,0xffffffffffee3af6
ffff800000800efa:	ff ff ff 
ffff800000800efd:	48 01 da             	add    rdx,rbx
ffff800000800f00:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
ffff800000800f02:	bf f8 03 00 00       	mov    edi,0x3f8
ffff800000800f07:	49 89 df             	mov    r15,rbx
ffff800000800f0a:	48 b8 b0 49 ef ff ff 	movabs rax,0xffffffffffef49b0
ffff800000800f11:	ff ff ff 
ffff800000800f14:	48 01 d8             	add    rax,rbx
ffff800000800f17:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:39
    comprintf("\rgamessis os loaded.\r\n");
ffff800000800f19:	48 b8 b0 d4 ff ff ff 	movabs rax,0xffffffffffffd4b0
ffff800000800f20:	ff ff ff 
ffff800000800f23:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000800f27:	48 89 c7             	mov    rdi,rax
ffff800000800f2a:	49 89 df             	mov    r15,rbx
ffff800000800f2d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800f32:	48 ba dc 4b ef ff ff 	movabs rdx,0xffffffffffef4bdc
ffff800000800f39:	ff ff ff 
ffff800000800f3c:	48 01 da             	add    rdx,rbx
ffff800000800f3f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:41
	unsigned size;
    size = *(unsigned long*)addr;
ffff800000800f41:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800f48:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000800f4b:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
ffff800000800f4e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800f55:	48 83 c0 08          	add    rax,0x8
ffff800000800f59:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000800f5d:	e9 93 02 00 00       	jmp    ffff8000008011f5 <main+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
		switch (tag->type)
ffff800000800f62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800f66:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000800f68:	83 f8 08             	cmp    eax,0x8
ffff800000800f6b:	0f 87 71 02 00 00    	ja     ffff8000008011e2 <main+0x33d>
ffff800000800f71:	89 c0                	mov    eax,eax
ffff800000800f73:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800f7a:	00 
ffff800000800f7b:	48 8d 05 be 9f 11 00 	lea    rax,[rip+0x119fbe]        # ffff80000091af40 <.LC4+0x11>
ffff800000800f82:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800f86:	48 8d 15 b3 9f 11 00 	lea    rdx,[rip+0x119fb3]        # ffff80000091af40 <.LC4+0x11>
ffff800000800f8d:	48 01 d0             	add    rax,rdx
ffff800000800f90:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:66
			break;
		case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
			//printf("mem_lower = %uKB, mem_upper = %uKB\n",
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_lower,
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_upper);
			set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
ffff800000800f93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800f97:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000800f9a:	89 c7                	mov    edi,eax
ffff800000800f9c:	49 89 df             	mov    r15,rbx
ffff800000800f9f:	48 b8 e0 43 ee ff ff 	movabs rax,0xffffffffffee43e0
ffff800000800fa6:	ff ff ff 
ffff800000800fa9:	48 01 d8             	add    rax,rbx
ffff800000800fac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:67
			break;
ffff800000800fae:	e9 2f 02 00 00       	jmp    ffff8000008011e2 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80

			break;
		case MULTIBOOT_TAG_TYPE_MMAP:
		{
			//printf("mmap\n");
            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
ffff800000800fb3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800fb7:	48 83 c0 10          	add    rax,0x10
ffff800000800fbb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000800fbf:	eb 44                	jmp    ffff800000801005 <main+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:84
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
ffff800000800fc1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fc5:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000800fc8:	89 c2                	mov    edx,eax
ffff800000800fca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fce:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff800000800fd2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fd6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000800fd9:	48 89 ce             	mov    rsi,rcx
ffff800000800fdc:	48 89 c7             	mov    rdi,rax
ffff800000800fdf:	49 89 df             	mov    r15,rbx
ffff800000800fe2:	48 b8 15 44 ee ff ff 	movabs rax,0xffffffffffee4415
ffff800000800fe9:	ff ff ff 
ffff800000800fec:	48 01 d8             	add    rax,rbx
ffff800000800fef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
ffff800000800ff1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800ff5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000800ff8:	89 c2                	mov    edx,eax
ffff800000800ffa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800ffe:	48 01 d0             	add    rax,rdx
ffff800000801001:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:81
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
ffff800000801005:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801009:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080100c:	89 c2                	mov    edx,eax
ffff80000080100e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801012:	48 01 d0             	add    rax,rdx
ffff800000801015:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000801019:	72 a6                	jb     ffff800000800fc1 <main+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:88
            }

		}
		break;
ffff80000080101b:	e9 c2 01 00 00       	jmp    ffff8000008011e2 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93
		case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
		{
			multiboot_uint32_t color;
			unsigned i;
			struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
ffff800000801020:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801024:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:94
			void *fb = (void *) FRAMEBUFFER_ADDR;
ffff800000801028:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080102f:	80 ff ff 
ffff800000801032:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:95
			set_framebuffer(*tagfb);
ffff800000801036:	48 83 ec 08          	sub    rsp,0x8
ffff80000080103a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080103e:	ff 70 20             	push   QWORD PTR [rax+0x20]
ffff800000801041:	ff 70 18             	push   QWORD PTR [rax+0x18]
ffff800000801044:	ff 70 10             	push   QWORD PTR [rax+0x10]
ffff800000801047:	ff 70 08             	push   QWORD PTR [rax+0x8]
ffff80000080104a:	ff 30                	push   QWORD PTR [rax]
ffff80000080104c:	49 89 df             	mov    r15,rbx
ffff80000080104f:	48 b8 da c8 ee ff ff 	movabs rax,0xffffffffffeec8da
ffff800000801056:	ff ff ff 
ffff800000801059:	48 01 d8             	add    rax,rbx
ffff80000080105c:	ff d0                	call   rax
ffff80000080105e:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97

			switch (tagfb->common.framebuffer_type)
ffff800000801062:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801066:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
ffff80000080106a:	0f b6 c0             	movzx  eax,al
ffff80000080106d:	83 f8 02             	cmp    eax,0x2
ffff800000801070:	0f 84 5a 01 00 00    	je     ffff8000008011d0 <main+0x32b>
ffff800000801076:	83 f8 02             	cmp    eax,0x2
ffff800000801079:	0f 8f 5a 01 00 00    	jg     ffff8000008011d9 <main+0x334>
ffff80000080107f:	85 c0                	test   eax,eax
ffff800000801081:	74 0e                	je     ffff800000801091 <main+0x1ec>
ffff800000801083:	83 f8 01             	cmp    eax,0x1
ffff800000801086:	0f 84 15 01 00 00    	je     ffff8000008011a1 <main+0x2fc>
ffff80000080108c:	e9 48 01 00 00       	jmp    ffff8000008011d9 <main+0x334>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:104
			case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
			{
				unsigned best_distance, distance;
				struct multiboot_color *palette;

				palette = tagfb->framebuffer_palette;
ffff800000801091:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801095:	48 83 c0 22          	add    rax,0x22
ffff800000801099:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:106

				color = 0;
ffff80000080109d:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:107
				best_distance = 4 * 256 * 256;
ffff8000008010a4:	c7 45 d8 00 00 04 00 	mov    DWORD PTR [rbp-0x28],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109

				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff8000008010ab:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff8000008010b2:	e9 d4 00 00 00       	jmp    ffff80000080118b <main+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:111
				{
					distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
ffff8000008010b7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008010ba:	48 89 d0             	mov    rax,rdx
ffff8000008010bd:	48 01 c0             	add    rax,rax
ffff8000008010c0:	48 01 c2             	add    rdx,rax
ffff8000008010c3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008010c7:	48 01 d0             	add    rax,rdx
ffff8000008010ca:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008010ce:	0f b6 c0             	movzx  eax,al
ffff8000008010d1:	ba ff 00 00 00       	mov    edx,0xff
ffff8000008010d6:	89 d1                	mov    ecx,edx
ffff8000008010d8:	29 c1                	sub    ecx,eax
ffff8000008010da:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008010dd:	48 89 d0             	mov    rax,rdx
ffff8000008010e0:	48 01 c0             	add    rax,rax
ffff8000008010e3:	48 01 c2             	add    rdx,rax
ffff8000008010e6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008010ea:	48 01 d0             	add    rax,rdx
ffff8000008010ed:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008010f1:	0f b6 d0             	movzx  edx,al
ffff8000008010f4:	b8 ff 00 00 00       	mov    eax,0xff
ffff8000008010f9:	29 d0                	sub    eax,edx
ffff8000008010fb:	89 ce                	mov    esi,ecx
ffff8000008010fd:	0f af f0             	imul   esi,eax
ffff800000801100:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801103:	48 89 d0             	mov    rax,rdx
ffff800000801106:	48 01 c0             	add    rax,rax
ffff800000801109:	48 01 c2             	add    rdx,rax
ffff80000080110c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801110:	48 01 d0             	add    rax,rdx
ffff800000801113:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801116:	0f b6 c8             	movzx  ecx,al
ffff800000801119:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080111c:	48 89 d0             	mov    rax,rdx
ffff80000080111f:	48 01 c0             	add    rax,rax
ffff800000801122:	48 01 c2             	add    rdx,rax
ffff800000801125:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801129:	48 01 d0             	add    rax,rdx
ffff80000080112c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080112f:	0f b6 c0             	movzx  eax,al
ffff800000801132:	0f af c1             	imul   eax,ecx
ffff800000801135:	01 c6                	add    esi,eax
ffff800000801137:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080113a:	48 89 d0             	mov    rax,rdx
ffff80000080113d:	48 01 c0             	add    rax,rax
ffff800000801140:	48 01 c2             	add    rdx,rax
ffff800000801143:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801147:	48 01 d0             	add    rax,rdx
ffff80000080114a:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff80000080114e:	0f b6 c8             	movzx  ecx,al
ffff800000801151:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801154:	48 89 d0             	mov    rax,rdx
ffff800000801157:	48 01 c0             	add    rax,rax
ffff80000080115a:	48 01 c2             	add    rdx,rax
ffff80000080115d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801161:	48 01 d0             	add    rax,rdx
ffff800000801164:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801168:	0f b6 c0             	movzx  eax,al
ffff80000080116b:	0f af c1             	imul   eax,ecx
ffff80000080116e:	01 f0                	add    eax,esi
ffff800000801170:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:112
					if (distance < best_distance)
ffff800000801173:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801176:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000801179:	73 0c                	jae    ffff800000801187 <main+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:114
					{
						color = i;
ffff80000080117b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080117e:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:115
						best_distance = distance;
ffff800000801181:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801184:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 2)
				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801187:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 1)
ffff80000080118b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080118f:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
ffff800000801193:	0f b7 c0             	movzx  eax,ax
ffff800000801196:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000801199:	0f 82 18 ff ff ff    	jb     ffff8000008010b7 <main+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:119
					}
				}
			}
			break;
ffff80000080119f:	eb 40                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:122

			case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
				color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
ffff8000008011a1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008011a5:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
ffff8000008011a9:	0f b6 c0             	movzx  eax,al
ffff8000008011ac:	ba 01 00 00 00       	mov    edx,0x1
ffff8000008011b1:	89 c1                	mov    ecx,eax
ffff8000008011b3:	d3 e2                	shl    edx,cl
ffff8000008011b5:	89 d0                	mov    eax,edx
ffff8000008011b7:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008011ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008011be:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffff8000008011c2:	0f b6 c0             	movzx  eax,al
ffff8000008011c5:	89 c1                	mov    ecx,eax
ffff8000008011c7:	d3 e2                	shl    edx,cl
ffff8000008011c9:	89 d0                	mov    eax,edx
ffff8000008011cb:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:123
				break;
ffff8000008011ce:	eb 11                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:126

			case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
				color = '\\' | 0x0100;
ffff8000008011d0:	c7 45 b4 5c 01 00 00 	mov    DWORD PTR [rbp-0x4c],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:127
				break;
ffff8000008011d7:	eb 08                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:130

			default:
				color = 0xffffffff;
ffff8000008011d9:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:131
				break;
ffff8000008011e0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:134 (discriminator 1)
			}

			break;
ffff8000008011e1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:45
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
ffff8000008011e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008011e6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008011e9:	83 c0 07             	add    eax,0x7
ffff8000008011ec:	89 c0                	mov    eax,eax
ffff8000008011ee:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008011f1:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag->type != MULTIBOOT_TAG_TYPE_END;
ffff8000008011f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008011f9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008011fb:	85 c0                	test   eax,eax
ffff8000008011fd:	0f 85 5f fd ff ff    	jne    ffff800000800f62 <main+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:138
		}
		}
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
ffff800000801203:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801207:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080120a:	83 c0 07             	add    eax,0x7
ffff80000080120d:	89 c0                	mov    eax,eax
ffff80000080120f:	83 e0 f8             	and    eax,0xfffffff8
ffff800000801212:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:139
    init_memory();
ffff800000801216:	49 89 df             	mov    r15,rbx
ffff800000801219:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080121e:	48 ba 65 4b ee ff ff 	movabs rdx,0xffffffffffee4b65
ffff800000801225:	ff ff ff 
ffff800000801228:	48 01 da             	add    rdx,rbx
ffff80000080122b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:140
    init_framebuffer();
ffff80000080122d:	49 89 df             	mov    r15,rbx
ffff800000801230:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801235:	48 ba f4 c5 ee ff ff 	movabs rdx,0xffffffffffeec5f4
ffff80000080123c:	ff ff ff 
ffff80000080123f:	48 01 da             	add    rdx,rbx
ffff800000801242:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:142
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
ffff800000801244:	b8 75 04 00 00       	mov    eax,0x475
ffff800000801249:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080124c:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:144
	//printf("disk count:%d\n",disk_count);
    init_font();
ffff80000080124f:	49 89 df             	mov    r15,rbx
ffff800000801252:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801257:	48 ba 25 c7 ee ff ff 	movabs rdx,0xffffffffffeec725
ffff80000080125e:	ff ff ff 
ffff800000801261:	48 01 da             	add    rdx,rbx
ffff800000801264:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:147
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
ffff800000801266:	48 b8 c7 d4 ff ff ff 	movabs rax,0xffffffffffffd4c7
ffff80000080126d:	ff ff ff 
ffff800000801270:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801274:	48 89 c7             	mov    rdi,rax
ffff800000801277:	49 89 df             	mov    r15,rbx
ffff80000080127a:	48 b8 41 ce ee ff ff 	movabs rax,0xffffffffffeece41
ffff800000801281:	ff ff ff 
ffff800000801284:	48 01 d8             	add    rax,rbx
ffff800000801287:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:148
    init_int();
ffff800000801289:	49 89 df             	mov    r15,rbx
ffff80000080128c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801291:	48 ba d0 25 ee ff ff 	movabs rdx,0xffffffffffee25d0
ffff800000801298:	ff ff ff 
ffff80000080129b:	48 01 da             	add    rdx,rbx
ffff80000080129e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:149
    print("int loaded.\n");
ffff8000008012a0:	48 b8 e4 d4 ff ff ff 	movabs rax,0xffffffffffffd4e4
ffff8000008012a7:	ff ff ff 
ffff8000008012aa:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008012ae:	48 89 c7             	mov    rdi,rax
ffff8000008012b1:	49 89 df             	mov    r15,rbx
ffff8000008012b4:	48 b8 41 ce ee ff ff 	movabs rax,0xffffffffffeece41
ffff8000008012bb:	ff ff ff 
ffff8000008012be:	48 01 d8             	add    rax,rbx
ffff8000008012c1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:151
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
ffff8000008012c3:	49 89 df             	mov    r15,rbx
ffff8000008012c6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008012cb:	48 ba a9 43 ee ff ff 	movabs rdx,0xffffffffffee43a9
ffff8000008012d2:	ff ff ff 
ffff8000008012d5:	48 01 da             	add    rdx,rbx
ffff8000008012d8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:152
 	init_gdt();
ffff8000008012da:	49 89 df             	mov    r15,rbx
ffff8000008012dd:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008012e2:	48 ba ad a1 ee ff ff 	movabs rdx,0xffffffffffeea1ad
ffff8000008012e9:	ff ff ff 
ffff8000008012ec:	48 01 da             	add    rdx,rbx
ffff8000008012ef:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:154

	init_blkdev();
ffff8000008012f1:	49 89 df             	mov    r15,rbx
ffff8000008012f4:	48 b8 a0 f9 ee ff ff 	movabs rax,0xffffffffffeef9a0
ffff8000008012fb:	ff ff ff 
ffff8000008012fe:	48 01 d8             	add    rax,rbx
ffff800000801301:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:155
	init_blkbuf();
ffff800000801303:	49 89 df             	mov    r15,rbx
ffff800000801306:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080130b:	48 ba f3 f9 ee ff ff 	movabs rdx,0xffffffffffeef9f3
ffff800000801312:	ff ff ff 
ffff800000801315:	48 01 da             	add    rdx,rbx
ffff800000801318:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:157
	// init_disk();
    init_ramdisk();
ffff80000080131a:	49 89 df             	mov    r15,rbx
ffff80000080131d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801322:	48 ba 6d f4 ee ff ff 	movabs rdx,0xffffffffffeef46d
ffff800000801329:	ff ff ff 
ffff80000080132c:	48 01 da             	add    rdx,rbx
ffff80000080132f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:158
    init_rootfs();
ffff800000801331:	49 89 df             	mov    r15,rbx
ffff800000801334:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801339:	48 ba 0d da ee ff ff 	movabs rdx,0xffffffffffeeda0d
ffff800000801340:	ff ff ff 
ffff800000801343:	48 01 da             	add    rdx,rbx
ffff800000801346:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:159
    init_devfs();
ffff800000801348:	49 89 df             	mov    r15,rbx
ffff80000080134b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801350:	48 ba dd 59 ee ff ff 	movabs rdx,0xffffffffffee59dd
ffff800000801357:	ff ff ff 
ffff80000080135a:	48 01 da             	add    rdx,rbx
ffff80000080135d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:161

    init_proc();
ffff80000080135f:	49 89 df             	mov    r15,rbx
ffff800000801362:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801367:	48 ba 4b 67 ee ff ff 	movabs rdx,0xffffffffffee674b
ffff80000080136e:	ff ff ff 
ffff800000801371:	48 01 da             	add    rdx,rbx
ffff800000801374:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:163
	// init_ramfs();
  	DISK1_FAT32_FS_init();
ffff800000801376:	49 89 df             	mov    r15,rbx
ffff800000801379:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080137e:	48 ba 69 41 ef ff ff 	movabs rdx,0xffffffffffef4169
ffff800000801385:	ff ff ff 
ffff800000801388:	48 01 da             	add    rdx,rbx
ffff80000080138b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:167

    //自带驱动
    //init_tty();
    init_kb();
ffff80000080138d:	49 89 df             	mov    r15,rbx
ffff800000801390:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801395:	48 ba 39 06 ef ff ff 	movabs rdx,0xffffffffffef0639
ffff80000080139c:	ff ff ff 
ffff80000080139f:	48 01 da             	add    rdx,rbx
ffff8000008013a2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:169
//    init_disk();
    sti();
ffff8000008013a4:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:170
    manage_proc_lock=0;
ffff8000008013a5:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff8000008013ac:	ff ff ff 
ffff8000008013af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008013b3:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:173


    move_to_user_mode();
ffff8000008013b9:	49 89 df             	mov    r15,rbx
ffff8000008013bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008013c1:	48 ba 0c 5a ef ff ff 	movabs rdx,0xffffffffffef5a0c
ffff8000008013c8:	ff ff ff 
ffff8000008013cb:	48 01 da             	add    rdx,rbx
ffff8000008013ce:	ff d2                	call   rdx
ffff8000008013d0:	48 c7 45 98 1b 00 00 	mov    QWORD PTR [rbp-0x68],0x1b
ffff8000008013d7:	00 
ffff8000008013d8:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff8000008013df:	00 
ffff8000008013e0:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffff8000008013e7:	00 
ffff8000008013e8:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
ffff8000008013ef:	00 
ffff8000008013f0:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
ffff8000008013f7:	00 00 00 00 
ffff8000008013fb:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
ffff800000801402:	00 00 00 00 
ffff800000801406:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
ffff80000080140d:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63

#define	SYSTEM_REBOOT	(1UL << 0)
#define	SYSTEM_POWEROFF	(1UL << 1)

__attribute__((__always_inline__))inline int do_syscall(long func,long a1,long a2,long a3,long a4,long a5,long a6){
        asm volatile(".byte 0x48\n"
ffff800000801411:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000801415:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
ffff800000801419:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff80000080141d:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000801421:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffff800000801428:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
ffff80000080142f:	4c 8b 8d 68 ff ff ff 	mov    r9,QWORD PTR [rbp-0x98]
ffff800000801436:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
        long ret=0;
ffff800000801439:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff800000801440:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff800000801444:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:67
        return ret;
ffff80000080144b:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:174
    if(do_syscall(SYSCALL_FORK,0,0,0,0,0,0)==0){
ffff800000801452:	85 c0                	test   eax,eax
ffff800000801454:	0f 85 ca 00 00 00    	jne    ffff800000801524 <main+0x67f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:175
        char *argv[]={"/mnt/test.elf","gamessis os"};
ffff80000080145a:	48 b8 f1 d4 ff ff ff 	movabs rax,0xffffffffffffd4f1
ffff800000801461:	ff ff ff 
ffff800000801464:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801468:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000080146f:	48 b8 ff d4 ff ff ff 	movabs rax,0xffffffffffffd4ff
ffff800000801476:	ff ff ff 
ffff800000801479:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080147d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:176
        do_syscall(SYSCALL_EXECVE, (long) "/mnt/test.elf", 2, (long) &argv[0], 0, 0, 0);
ffff800000801484:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff80000080148b:	48 ba f1 d4 ff ff ff 	movabs rdx,0xffffffffffffd4f1
ffff800000801492:	ff ff ff 
ffff800000801495:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000801499:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x1c
ffff8000008014a0:	1c 00 00 00 
ffff8000008014a4:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffff8000008014ab:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x2
ffff8000008014b2:	02 00 00 00 
ffff8000008014b6:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffff8000008014bd:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffff8000008014c4:	00 00 00 00 
ffff8000008014c8:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff8000008014cf:	00 00 00 00 
ffff8000008014d3:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
ffff8000008014da:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        asm volatile(".byte 0x48\n"
ffff8000008014de:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008014e5:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
ffff8000008014ec:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
ffff8000008014f3:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff8000008014fa:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffff800000801501:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffff800000801508:	4c 8b 8d 30 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd0]
ffff80000080150f:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff800000801512:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
ffff800000801519:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff80000080151d:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:187 (discriminator 3)
//    init_fat16();

//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
ffff800000801524:	eb fe                	jmp    ffff800000801524 <main+0x67f>

ffff800000801526 <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
ffff800000801526:	f3 0f 1e fa          	endbr64 
ffff80000080152a:	55                   	push   rbp
ffff80000080152b:	48 89 e5             	mov    rbp,rsp
ffff80000080152e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080152e <init_logging+0x8>
ffff800000801535:	49 bb 02 c5 11 00 00 	movabs r11,0x11c502
ffff80000080153c:	00 00 00 
ffff80000080153f:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
ffff800000801542:	48 ba d0 25 ae ff ff 	movabs rdx,0xffffffffffae25d0
ffff800000801549:	ff ff ff 
ffff80000080154c:	48 c7 04 10 00 80 0b 	mov    QWORD PTR [rax+rdx*1],0xb8000
ffff800000801553:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
ffff800000801554:	48 ba d8 25 ae ff ff 	movabs rdx,0xffffffffffae25d8
ffff80000080155b:	ff ff ff 
ffff80000080155e:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
ffff800000801565:	48 ba dc 25 ae ff ff 	movabs rdx,0xffffffffffae25dc
ffff80000080156c:	ff ff ff 
ffff80000080156f:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
ffff800000801576:	90                   	nop
ffff800000801577:	5d                   	pop    rbp
ffff800000801578:	c3                   	ret    

ffff800000801579 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
ffff800000801579:	f3 0f 1e fa          	endbr64 
ffff80000080157d:	55                   	push   rbp
ffff80000080157e:	48 89 e5             	mov    rbp,rsp
ffff800000801581:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801581 <itoa+0x8>
ffff800000801588:	49 bb af c4 11 00 00 	movabs r11,0x11c4af
ffff80000080158f:	00 00 00 
ffff800000801592:	4c 01 d8             	add    rax,r11
ffff800000801595:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801599:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080159c:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
ffff80000080159f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008015a3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
ffff8000008015a7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008015aa:	48 98                	cdqe   
ffff8000008015ac:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
ffff8000008015b0:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
ffff8000008015b7:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
ffff8000008015bb:	75 27                	jne    ffff8000008015e4 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
ffff8000008015bd:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
ffff8000008015c1:	79 21                	jns    ffff8000008015e4 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
ffff8000008015c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008015c7:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008015cb:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008015cf:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
ffff8000008015d2:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
ffff8000008015d7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008015da:	f7 d8                	neg    eax
ffff8000008015dc:	48 98                	cdqe   
ffff8000008015de:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008015e2:	eb 0d                	jmp    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
ffff8000008015e4:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
ffff8000008015e8:	75 07                	jne    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
ffff8000008015ea:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
ffff8000008015f1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008015f4:	48 63 c8             	movsxd rcx,eax
ffff8000008015f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008015fb:	ba 00 00 00 00       	mov    edx,0x0
ffff800000801600:	48 f7 f1             	div    rcx
ffff800000801603:	48 89 d0             	mov    rax,rdx
ffff800000801606:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffff800000801609:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
ffff80000080160d:	7f 0a                	jg     ffff800000801619 <itoa+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
ffff80000080160f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000801612:	83 c0 30             	add    eax,0x30
ffff800000801615:	89 c1                	mov    ecx,eax
ffff800000801617:	eb 08                	jmp    ffff800000801621 <itoa+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
ffff800000801619:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080161c:	83 c0 57             	add    eax,0x57
ffff80000080161f:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
ffff800000801621:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801625:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000801629:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000080162d:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
ffff80000080162f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000801632:	48 63 f0             	movsxd rsi,eax
ffff800000801635:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801639:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080163e:	48 f7 f6             	div    rsi
ffff800000801641:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000801645:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080164a:	75 a5                	jne    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
ffff80000080164c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801650:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
ffff800000801653:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801657:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
ffff80000080165b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080165f:	48 83 e8 01          	sub    rax,0x1
ffff800000801663:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801667:	eb 2b                	jmp    ffff800000801694 <itoa+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
ffff800000801669:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080166d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801670:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
ffff800000801673:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801677:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff80000080167a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080167e:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
ffff800000801680:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801684:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
ffff800000801688:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
ffff80000080168a:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
ffff80000080168f:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801694:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801698:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080169c:	72 cb                	jb     ffff800000801669 <itoa+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
ffff80000080169e:	90                   	nop
ffff80000080169f:	90                   	nop
ffff8000008016a0:	5d                   	pop    rbp
ffff8000008016a1:	c3                   	ret    

ffff8000008016a2 <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
ffff8000008016a2:	f3 0f 1e fa          	endbr64 
ffff8000008016a6:	55                   	push   rbp
ffff8000008016a7:	48 89 e5             	mov    rbp,rsp
ffff8000008016aa:	41 57                	push   r15
ffff8000008016ac:	48 83 ec 28          	sub    rsp,0x28
ffff8000008016b0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008016b0 <putchar+0xe>
ffff8000008016b7:	49 bb 80 c3 11 00 00 	movabs r11,0x11c380
ffff8000008016be:	00 00 00 
ffff8000008016c1:	4c 01 d8             	add    rax,r11
ffff8000008016c4:	89 fa                	mov    edx,edi
ffff8000008016c6:	88 55 dc             	mov    BYTE PTR [rbp-0x24],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
ffff8000008016c9:	0f b6 55 dc          	movzx  edx,BYTE PTR [rbp-0x24]
ffff8000008016cd:	88 55 ee             	mov    BYTE PTR [rbp-0x12],dl
ffff8000008016d0:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
ffff8000008016d4:	48 8d 55 ee          	lea    rdx,[rbp-0x12]
ffff8000008016d8:	48 89 d7             	mov    rdi,rdx
ffff8000008016db:	49 89 c7             	mov    r15,rax
ffff8000008016de:	48 ba 41 ce ee ff ff 	movabs rdx,0xffffffffffeece41
ffff8000008016e5:	ff ff ff 
ffff8000008016e8:	48 01 c2             	add    rdx,rax
ffff8000008016eb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
ffff8000008016ed:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008016f1:	c9                   	leave  
ffff8000008016f2:	c3                   	ret    

ffff8000008016f3 <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
ffff8000008016f3:	f3 0f 1e fa          	endbr64 
ffff8000008016f7:	55                   	push   rbp
ffff8000008016f8:	48 89 e5             	mov    rbp,rsp
ffff8000008016fb:	41 57                	push   r15
ffff8000008016fd:	53                   	push   rbx
ffff8000008016fe:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000801705:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801705 <printf+0x12>
ffff80000080170c:	49 bb 2b c3 11 00 00 	movabs r11,0x11c32b
ffff800000801713:	00 00 00 
ffff800000801716:	4c 01 db             	add    rbx,r11
ffff800000801719:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000801720:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000801727:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff80000080172e:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000801735:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff80000080173c:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000801743:	84 c0                	test   al,al
ffff800000801745:	74 23                	je     ffff80000080176a <printf+0x77>
ffff800000801747:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff80000080174e:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000801752:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000801756:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff80000080175a:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff80000080175e:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000801762:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000801766:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
ffff80000080176a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000801771:	48 89 c7             	mov    rdi,rax
ffff800000801774:	49 89 df             	mov    r15,rbx
ffff800000801777:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff80000080177e:	ff ff ff 
ffff800000801781:	48 01 d8             	add    rax,rbx
ffff800000801784:	ff d0                	call   rax
ffff800000801786:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff80000080178b:	0f 8f f2 02 00 00    	jg     ffff800000801a83 <printf+0x390>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc();
ffff800000801791:	49 89 df             	mov    r15,rbx
ffff800000801794:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801799:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff8000008017a0:	ff ff ff 
ffff8000008017a3:	48 01 da             	add    rdx,rbx
ffff8000008017a6:	ff d2                	call   rdx
ffff8000008017a8:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
ffff8000008017af:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
ffff8000008017b6:	00 00 00 
ffff8000008017b9:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
ffff8000008017c0:	00 00 00 
ffff8000008017c3:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff8000008017c7:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffff8000008017ce:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff8000008017d5:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
ffff8000008017dc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008017e3:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff8000008017ea:	e9 27 02 00 00       	jmp    ffff800000801a16 <printf+0x323>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008017ef:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008017f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008017f9:	3c 25                	cmp    al,0x25
ffff8000008017fb:	0f 85 e2 01 00 00    	jne    ffff8000008019e3 <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
ffff800000801801:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801808:	48 83 c0 01          	add    rax,0x1
ffff80000080180c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080180f:	84 c0                	test   al,al
ffff800000801811:	0f 84 cc 01 00 00    	je     ffff8000008019e3 <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
ffff800000801817:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff80000080181e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff80000080181f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801826:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801829:	3c 78                	cmp    al,0x78
ffff80000080182b:	75 75                	jne    ffff8000008018a2 <printf+0x1af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
ffff80000080182d:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801833:	83 f8 2f             	cmp    eax,0x2f
ffff800000801836:	77 23                	ja     ffff80000080185b <printf+0x168>
ffff800000801838:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080183f:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801845:	89 d2                	mov    edx,edx
ffff800000801847:	48 01 d0             	add    rax,rdx
ffff80000080184a:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801850:	83 c2 08             	add    edx,0x8
ffff800000801853:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801859:	eb 12                	jmp    ffff80000080186d <printf+0x17a>
ffff80000080185b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801862:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801866:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff80000080186d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080186f:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
ffff800000801875:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff80000080187b:	48 63 d0             	movsxd rdx,eax
ffff80000080187e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801885:	48 89 d6             	mov    rsi,rdx
ffff800000801888:	48 89 c7             	mov    rdi,rax
ffff80000080188b:	49 89 df             	mov    r15,rbx
ffff80000080188e:	48 b8 a1 58 ef ff ff 	movabs rax,0xffffffffffef58a1
ffff800000801895:	ff ff ff 
ffff800000801898:	48 01 d8             	add    rax,rbx
ffff80000080189b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff80000080189d:	e9 6c 01 00 00       	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
ffff8000008018a2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008018a9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008018ac:	3c 73                	cmp    al,0x73
ffff8000008018ae:	75 75                	jne    ffff800000801925 <printf+0x232>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
ffff8000008018b0:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff8000008018b6:	83 f8 2f             	cmp    eax,0x2f
ffff8000008018b9:	77 23                	ja     ffff8000008018de <printf+0x1eb>
ffff8000008018bb:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008018c2:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff8000008018c8:	89 d2                	mov    edx,edx
ffff8000008018ca:	48 01 d0             	add    rax,rdx
ffff8000008018cd:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff8000008018d3:	83 c2 08             	add    edx,0x8
ffff8000008018d6:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff8000008018dc:	eb 12                	jmp    ffff8000008018f0 <printf+0x1fd>
ffff8000008018de:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008018e5:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008018e9:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff8000008018f0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008018f3:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
ffff8000008018fa:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff800000801901:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801908:	48 89 d6             	mov    rsi,rdx
ffff80000080190b:	48 89 c7             	mov    rdi,rax
ffff80000080190e:	49 89 df             	mov    r15,rbx
ffff800000801911:	48 b8 2f 59 ef ff ff 	movabs rax,0xffffffffffef592f
ffff800000801918:	ff ff ff 
ffff80000080191b:	48 01 d8             	add    rax,rbx
ffff80000080191e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801920:	e9 e9 00 00 00       	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
ffff800000801925:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080192c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080192f:	3c 64                	cmp    al,0x64
ffff800000801931:	75 73                	jne    ffff8000008019a6 <printf+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
ffff800000801933:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801939:	83 f8 2f             	cmp    eax,0x2f
ffff80000080193c:	77 23                	ja     ffff800000801961 <printf+0x26e>
ffff80000080193e:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801945:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080194b:	89 d2                	mov    edx,edx
ffff80000080194d:	48 01 d0             	add    rax,rdx
ffff800000801950:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801956:	83 c2 08             	add    edx,0x8
ffff800000801959:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff80000080195f:	eb 12                	jmp    ffff800000801973 <printf+0x280>
ffff800000801961:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801968:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000080196c:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801973:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801976:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
ffff80000080197d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000801984:	89 c2                	mov    edx,eax
ffff800000801986:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080198d:	89 d6                	mov    esi,edx
ffff80000080198f:	48 89 c7             	mov    rdi,rax
ffff800000801992:	49 89 df             	mov    r15,rbx
ffff800000801995:	48 b8 e6 57 ef ff ff 	movabs rax,0xffffffffffef57e6
ffff80000080199c:	ff ff ff 
ffff80000080199f:	48 01 d8             	add    rax,rbx
ffff8000008019a2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008019a4:	eb 68                	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
ffff8000008019a6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019ad:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019b0:	3c 63                	cmp    al,0x63
ffff8000008019b2:	75 02                	jne    ffff8000008019b6 <printf+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
ffff8000008019b4:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
ffff8000008019b6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019bd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019c0:	0f be d0             	movsx  edx,al
ffff8000008019c3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019ca:	89 d6                	mov    esi,edx
ffff8000008019cc:	48 89 c7             	mov    rdi,rax
ffff8000008019cf:	49 89 df             	mov    r15,rbx
ffff8000008019d2:	48 b8 a7 57 ef ff ff 	movabs rax,0xffffffffffef57a7
ffff8000008019d9:	ff ff ff 
ffff8000008019dc:	48 01 d8             	add    rax,rbx
ffff8000008019df:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008019e1:	eb 2b                	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
ffff8000008019e3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019ea:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019ed:	0f be d0             	movsx  edx,al
ffff8000008019f0:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019f7:	89 d6                	mov    esi,edx
ffff8000008019f9:	48 89 c7             	mov    rdi,rax
ffff8000008019fc:	49 89 df             	mov    r15,rbx
ffff8000008019ff:	48 b8 a7 57 ef ff ff 	movabs rax,0xffffffffffef57a7
ffff800000801a06:	ff ff ff 
ffff800000801a09:	48 01 d8             	add    rax,rbx
ffff800000801a0c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801a0e:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801a15:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
ffff800000801a16:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801a1d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801a20:	84 c0                	test   al,al
ffff800000801a22:	0f 85 c7 fd ff ff    	jne    ffff8000008017ef <printf+0xfc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
ffff800000801a28:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a2f:	48 89 c7             	mov    rdi,rax
ffff800000801a32:	49 89 df             	mov    r15,rbx
ffff800000801a35:	48 b8 41 ce ee ff ff 	movabs rax,0xffffffffffeece41
ffff800000801a3c:	ff ff ff 
ffff800000801a3f:	48 01 d8             	add    rax,rbx
ffff800000801a42:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
ffff800000801a44:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a4b:	48 89 c7             	mov    rdi,rax
ffff800000801a4e:	49 89 df             	mov    r15,rbx
ffff800000801a51:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801a56:	48 ba dc 4b ef ff ff 	movabs rdx,0xffffffffffef4bdc
ffff800000801a5d:	ff ff ff 
ffff800000801a60:	48 01 da             	add    rdx,rbx
ffff800000801a63:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
ffff800000801a65:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a6c:	48 89 c7             	mov    rdi,rax
ffff800000801a6f:	49 89 df             	mov    r15,rbx
ffff800000801a72:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000801a79:	ff ff ff 
ffff800000801a7c:	48 01 d8             	add    rax,rbx
ffff800000801a7f:	ff d0                	call   rax
ffff800000801a81:	eb 01                	jmp    ffff800000801a84 <printf+0x391>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
ffff800000801a83:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
ffff800000801a84:	48 81 c4 00 01 00 00 	add    rsp,0x100
ffff800000801a8b:	5b                   	pop    rbx
ffff800000801a8c:	41 5f                	pop    r15
ffff800000801a8e:	5d                   	pop    rbp
ffff800000801a8f:	c3                   	ret    

ffff800000801a90 <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:27
//以kb为单位
int high_mem_base=1024;
int mmap_t_i=0;

stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
ffff800000801a90:	f3 0f 1e fa          	endbr64 
ffff800000801a94:	55                   	push   rbp
ffff800000801a95:	48 89 e5             	mov    rbp,rsp
ffff800000801a98:	41 57                	push   r15
ffff800000801a9a:	48 83 ec 28          	sub    rsp,0x28
ffff800000801a9e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801a9e <mmap+0xe>
ffff800000801aa5:	49 bb 92 bf 11 00 00 	movabs r11,0x11bf92
ffff800000801aac:	00 00 00 
ffff800000801aaf:	4c 01 d8             	add    rax,r11
ffff800000801ab2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801ab6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801aba:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:28
    return smmap(pa,la,attr,current->pml4);
ffff800000801abd:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000801ac4:	ff ff ff 
ffff800000801ac7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801acb:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000801ace:	48 8b 8a e0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xe0]
ffff800000801ad5:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801ad8:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000801adc:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff800000801ae0:	49 89 c7             	mov    r15,rax
ffff800000801ae3:	49 b8 c9 40 ee ff ff 	movabs r8,0xffffffffffee40c9
ffff800000801aea:	ff ff ff 
ffff800000801aed:	49 01 c0             	add    r8,rax
ffff800000801af0:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:58
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
ffff800000801af3:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801af7:	c9                   	leave  
ffff800000801af8:	c3                   	ret    

ffff800000801af9 <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:60
stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
ffff800000801af9:	f3 0f 1e fa          	endbr64 
ffff800000801afd:	55                   	push   rbp
ffff800000801afe:	48 89 e5             	mov    rbp,rsp
ffff800000801b01:	41 57                	push   r15
ffff800000801b03:	53                   	push   rbx
ffff800000801b04:	48 83 ec 40          	sub    rsp,0x40
ffff800000801b08:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801b08 <smmap+0xf>
ffff800000801b0f:	49 bb 28 bf 11 00 00 	movabs r11,0x11bf28
ffff800000801b16:	00 00 00 
ffff800000801b19:	4c 01 db             	add    rbx,r11
ffff800000801b1c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801b20:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000801b24:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffff800000801b27:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:63
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
ffff800000801b2b:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000801b32:	7f 00 00 
ffff800000801b35:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff800000801b39:	76 0e                	jbe    ffff800000801b49 <smmap+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
        la&=~0xffff000000000000ul;
ffff800000801b3b:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
ffff800000801b42:	ff 00 00 
ffff800000801b45:	48 21 45 c0          	and    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:66
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
ffff800000801b49:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b4d:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b51:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801b58:	00 
ffff800000801b59:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801b5d:	48 01 d0             	add    rax,rdx
ffff800000801b60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801b63:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:67
    int pml4i=la / PML4E_SIZE;
ffff800000801b67:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b6b:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b6f:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:68
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
ffff800000801b72:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b76:	83 e0 01             	and    eax,0x1
ffff800000801b79:	48 85 c0             	test   rax,rax
ffff800000801b7c:	75 6f                	jne    ffff800000801bed <smmap+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:70
    {
        pdptp=(page_item*) kmalloc();
ffff800000801b7e:	49 89 df             	mov    r15,rbx
ffff800000801b81:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801b86:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000801b8d:	ff ff ff 
ffff800000801b90:	48 01 da             	add    rdx,rbx
ffff800000801b93:	ff d2                	call   rdx
ffff800000801b95:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:71
        memset(pdptp,0,4096);
ffff800000801b99:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b9d:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801ba2:	be 00 00 00 00       	mov    esi,0x0
ffff800000801ba7:	48 89 c7             	mov    rdi,rax
ffff800000801baa:	49 89 df             	mov    r15,rbx
ffff800000801bad:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff800000801bb4:	ff ff ff 
ffff800000801bb7:	48 01 d8             	add    rax,rbx
ffff800000801bba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:73
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4p[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
ffff800000801bbc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801bc0:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801bc7:	7f 00 00 
ffff800000801bca:	48 21 d0             	and    rax,rdx
ffff800000801bcd:	48 89 c1             	mov    rcx,rax
ffff800000801bd0:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801bd3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000801bd6:	48 98                	cdqe   
ffff800000801bd8:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801bdf:	00 
ffff800000801be0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801be4:	48 01 f0             	add    rax,rsi
ffff800000801be7:	48 09 ca             	or     rdx,rcx
ffff800000801bea:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:75
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
ffff800000801bed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801bf1:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801bf8:	7f 00 00 
ffff800000801bfb:	48 21 c2             	and    rdx,rax
ffff800000801bfe:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801c05:	80 ff ff 
ffff800000801c08:	48 09 d0             	or     rax,rdx
ffff800000801c0b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:78

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
ffff800000801c0f:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
ffff800000801c16:	00 00 00 
ffff800000801c19:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000801c1d:	48 c1 e8 1e          	shr    rax,0x1e
ffff800000801c21:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
ffff800000801c24:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801c27:	48 98                	cdqe   
ffff800000801c29:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801c30:	00 
ffff800000801c31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c35:	48 01 d0             	add    rax,rdx
ffff800000801c38:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801c3b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:81
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
ffff800000801c3f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c43:	83 e0 01             	and    eax,0x1
ffff800000801c46:	48 85 c0             	test   rax,rax
ffff800000801c49:	75 6f                	jne    ffff800000801cba <smmap+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:83
    {
        pdp=(page_item*) kmalloc();
ffff800000801c4b:	49 89 df             	mov    r15,rbx
ffff800000801c4e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801c53:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000801c5a:	ff ff ff 
ffff800000801c5d:	48 01 da             	add    rdx,rbx
ffff800000801c60:	ff d2                	call   rdx
ffff800000801c62:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:84
        memset(pdp,0,4096);
ffff800000801c66:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c6a:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801c6f:	be 00 00 00 00       	mov    esi,0x0
ffff800000801c74:	48 89 c7             	mov    rdi,rax
ffff800000801c77:	49 89 df             	mov    r15,rbx
ffff800000801c7a:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff800000801c81:	ff ff ff 
ffff800000801c84:	48 01 d8             	add    rax,rbx
ffff800000801c87:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
ffff800000801c89:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c8d:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801c94:	7f 00 00 
ffff800000801c97:	48 21 d0             	and    rax,rdx
ffff800000801c9a:	48 89 c1             	mov    rcx,rax
ffff800000801c9d:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801ca0:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801ca3:	48 98                	cdqe   
ffff800000801ca5:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801cac:	00 
ffff800000801cad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801cb1:	48 01 f0             	add    rax,rsi
ffff800000801cb4:	48 09 ca             	or     rdx,rcx
ffff800000801cb7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:87
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
ffff800000801cba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801cbe:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801cc5:	7f 00 00 
ffff800000801cc8:	48 21 c2             	and    rdx,rax
ffff800000801ccb:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801cd2:	80 ff ff 
ffff800000801cd5:	48 09 d0             	or     rax,rdx
ffff800000801cd8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:90

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
ffff800000801cdc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801ce0:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801ce5:	48 c1 e8 15          	shr    rax,0x15
ffff800000801ce9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801cf0:	00 
ffff800000801cf1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801cf5:	48 01 d0             	add    rax,rdx
ffff800000801cf8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801cfb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91
    if(!((unsigned long long)pt & PAGE_PRESENT))
ffff800000801cff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d03:	83 e0 01             	and    eax,0x1
ffff800000801d06:	48 85 c0             	test   rax,rax
ffff800000801d09:	75 77                	jne    ffff800000801d82 <smmap+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:93
    {
        pt=(page_item*) kmalloc();
ffff800000801d0b:	49 89 df             	mov    r15,rbx
ffff800000801d0e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801d13:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000801d1a:	ff ff ff 
ffff800000801d1d:	48 01 da             	add    rdx,rbx
ffff800000801d20:	ff d2                	call   rdx
ffff800000801d22:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:94
        memset(pt,0,4096);
ffff800000801d26:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d2a:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801d2f:	be 00 00 00 00       	mov    esi,0x0
ffff800000801d34:	48 89 c7             	mov    rdi,rax
ffff800000801d37:	49 89 df             	mov    r15,rbx
ffff800000801d3a:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff800000801d41:	ff ff ff 
ffff800000801d44:	48 01 d8             	add    rax,rbx
ffff800000801d47:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:95
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
ffff800000801d49:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d4d:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801d54:	7f 00 00 
ffff800000801d57:	48 21 d0             	and    rax,rdx
ffff800000801d5a:	48 89 c1             	mov    rcx,rax
ffff800000801d5d:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801d60:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801d64:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801d69:	48 c1 e8 15          	shr    rax,0x15
ffff800000801d6d:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801d74:	00 
ffff800000801d75:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d79:	48 01 f0             	add    rax,rsi
ffff800000801d7c:	48 09 ca             	or     rdx,rcx
ffff800000801d7f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:97
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
ffff800000801d82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d86:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801d8d:	7f 00 00 
ffff800000801d90:	48 21 c2             	and    rdx,rax
ffff800000801d93:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801d9a:	80 ff ff 
ffff800000801d9d:	48 09 d0             	or     rax,rdx
ffff800000801da0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:100

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
ffff800000801da4:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000801da7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000801dab:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
ffff800000801db1:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000801db5:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000801dbc:	00 
ffff800000801dbd:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000801dc1:	48 01 ca             	add    rdx,rcx
ffff800000801dc4:	48 0b 45 c8          	or     rax,QWORD PTR [rbp-0x38]
ffff800000801dc8:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101
    return NORMAL;
ffff800000801dcb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:102
}
ffff800000801dd0:	48 83 c4 40          	add    rsp,0x40
ffff800000801dd4:	5b                   	pop    rbx
ffff800000801dd5:	41 5f                	pop    r15
ffff800000801dd7:	5d                   	pop    rbp
ffff800000801dd8:	c3                   	ret    

ffff800000801dd9 <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106


int init_paging()
{
ffff800000801dd9:	f3 0f 1e fa          	endbr64 
ffff800000801ddd:	55                   	push   rbp
ffff800000801dde:	48 89 e5             	mov    rbp,rsp
ffff800000801de1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801de1 <init_paging+0x8>
ffff800000801de8:	49 bb 4f bc 11 00 00 	movabs r11,0x11bc4f
ffff800000801def:	00 00 00 
ffff800000801df2:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:139
//    set_page_item(pml4,PDPT_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //把低512GB的空间取消映射，留给用户
    pml4[0]=0;
ffff800000801df5:	48 ba b0 ff ff ff ff 	movabs rdx,0xffffffffffffffb0
ffff800000801dfc:	ff ff ff 
ffff800000801dff:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801e03:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801e06:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:141
    #endif
}
ffff800000801e0d:	90                   	nop
ffff800000801e0e:	5d                   	pop    rbp
ffff800000801e0f:	c3                   	ret    

ffff800000801e10 <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:143
void set_high_mem_base(int base)
{
ffff800000801e10:	f3 0f 1e fa          	endbr64 
ffff800000801e14:	55                   	push   rbp
ffff800000801e15:	48 89 e5             	mov    rbp,rsp
ffff800000801e18:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801e18 <set_high_mem_base+0x8>
ffff800000801e1f:	49 bb 18 bc 11 00 00 	movabs r11,0x11bc18
ffff800000801e26:	00 00 00 
ffff800000801e29:	4c 01 d8             	add    rax,r11
ffff800000801e2c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:144
    high_mem_base=base;
ffff800000801e2f:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff800000801e36:	ff ff ff 
ffff800000801e39:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801e3d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801e40:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:145
}
ffff800000801e42:	90                   	nop
ffff800000801e43:	5d                   	pop    rbp
ffff800000801e44:	c3                   	ret    

ffff800000801e45 <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
ffff800000801e45:	f3 0f 1e fa          	endbr64 
ffff800000801e49:	55                   	push   rbp
ffff800000801e4a:	48 89 e5             	mov    rbp,rsp
ffff800000801e4d:	41 57                	push   r15
ffff800000801e4f:	48 83 ec 28          	sub    rsp,0x28
ffff800000801e53:	4c 8d 05 f9 ff ff ff 	lea    r8,[rip+0xfffffffffffffff9]        # ffff800000801e53 <set_mem_area+0xe>
ffff800000801e5a:	49 bb dd bb 11 00 00 	movabs r11,0x11bbdd
ffff800000801e61:	00 00 00 
ffff800000801e64:	4d 01 d8             	add    r8,r11
ffff800000801e67:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801e6b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801e6f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:148
    mmap_struct[mmap_t_i].base=base;
ffff800000801e73:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000801e7a:	ff ff ff 
ffff800000801e7d:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801e81:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801e83:	48 ba 98 fd ff ff ff 	movabs rdx,0xfffffffffffffd98
ffff800000801e8a:	ff ff ff 
ffff800000801e8d:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801e91:	48 63 d0             	movsxd rdx,eax
ffff800000801e94:	48 89 d0             	mov    rax,rdx
ffff800000801e97:	48 01 c0             	add    rax,rax
ffff800000801e9a:	48 01 d0             	add    rax,rdx
ffff800000801e9d:	48 c1 e0 03          	shl    rax,0x3
ffff800000801ea1:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000801ea5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801ea9:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:149
    mmap_struct[mmap_t_i].len=len;
ffff800000801eac:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000801eb3:	ff ff ff 
ffff800000801eb6:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801eba:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801ebc:	48 ba 98 fd ff ff ff 	movabs rdx,0xfffffffffffffd98
ffff800000801ec3:	ff ff ff 
ffff800000801ec6:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801eca:	48 63 d0             	movsxd rdx,eax
ffff800000801ecd:	48 89 d0             	mov    rax,rdx
ffff800000801ed0:	48 01 c0             	add    rax,rax
ffff800000801ed3:	48 01 d0             	add    rax,rdx
ffff800000801ed6:	48 c1 e0 03          	shl    rax,0x3
ffff800000801eda:	48 01 c8             	add    rax,rcx
ffff800000801edd:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801ee1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801ee5:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:150
    mmap_struct[mmap_t_i++].type=type;
ffff800000801ee8:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000801eef:	ff ff ff 
ffff800000801ef2:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801ef6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801ef8:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000801efb:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000801f02:	ff ff ff 
ffff800000801f05:	49 8b 14 10          	mov    rdx,QWORD PTR [r8+rdx*1]
ffff800000801f09:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000801f0b:	48 ba 98 fd ff ff ff 	movabs rdx,0xfffffffffffffd98
ffff800000801f12:	ff ff ff 
ffff800000801f15:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801f19:	48 63 d0             	movsxd rdx,eax
ffff800000801f1c:	48 89 d0             	mov    rax,rdx
ffff800000801f1f:	48 01 c0             	add    rax,rax
ffff800000801f22:	48 01 d0             	add    rax,rdx
ffff800000801f25:	48 c1 e0 03          	shl    rax,0x3
ffff800000801f29:	48 01 c8             	add    rax,rcx
ffff800000801f2c:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000801f30:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801f34:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
    comprintf("mem info:base=0x%l,len=0x%l,type=%d\n",base,len,type);
ffff800000801f37:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000801f3b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000801f3f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f43:	48 89 c6             	mov    rsi,rax
ffff800000801f46:	48 b8 58 d5 ff ff ff 	movabs rax,0xffffffffffffd558
ffff800000801f4d:	ff ff ff 
ffff800000801f50:	49 8d 04 00          	lea    rax,[r8+rax*1]
ffff800000801f54:	48 89 c7             	mov    rdi,rax
ffff800000801f57:	4d 89 c7             	mov    r15,r8
ffff800000801f5a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801f5f:	49 b9 dc 4b ef ff ff 	movabs r9,0xffffffffffef4bdc
ffff800000801f66:	ff ff ff 
ffff800000801f69:	4d 01 c1             	add    r9,r8
ffff800000801f6c:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:152
}
ffff800000801f6f:	90                   	nop
ffff800000801f70:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801f74:	c9                   	leave  
ffff800000801f75:	c3                   	ret    

ffff800000801f76 <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
addr_t kmalloc()
{
ffff800000801f76:	f3 0f 1e fa          	endbr64 
ffff800000801f7a:	55                   	push   rbp
ffff800000801f7b:	48 89 e5             	mov    rbp,rsp
ffff800000801f7e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801f7e <kmalloc+0x8>
ffff800000801f85:	49 bb b2 ba 11 00 00 	movabs r11,0x11bab2
ffff800000801f8c:	00 00 00 
ffff800000801f8f:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000801f92:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000801f99:	e9 c6 00 00 00       	jmp    ffff800000802064 <kmalloc+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157
    {
        for(int j=0;j<32;j++)
ffff800000801f9e:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000801fa5:	e9 ac 00 00 00       	jmp    ffff800000802056 <kmalloc+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159
        {
            if(!(vmalloc_map[i]&(1<<j)))
ffff800000801faa:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff800000801fb1:	ff ff ff 
ffff800000801fb4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801fb8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801fbb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801fbe:	48 63 d2             	movsxd rdx,edx
ffff800000801fc1:	48 c1 e2 02          	shl    rdx,0x2
ffff800000801fc5:	48 01 ca             	add    rdx,rcx
ffff800000801fc8:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000801fca:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000801fcd:	bf 01 00 00 00       	mov    edi,0x1
ffff800000801fd2:	89 d1                	mov    ecx,edx
ffff800000801fd4:	d3 e7                	shl    edi,cl
ffff800000801fd6:	89 fa                	mov    edx,edi
ffff800000801fd8:	21 f2                	and    edx,esi
ffff800000801fda:	85 d2                	test   edx,edx
ffff800000801fdc:	75 74                	jne    ffff800000802052 <kmalloc+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161
            {
                vmalloc_map[i]|=(1<<j);
ffff800000801fde:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff800000801fe5:	ff ff ff 
ffff800000801fe8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801fec:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801fef:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801ff2:	48 63 d2             	movsxd rdx,edx
ffff800000801ff5:	48 c1 e2 02          	shl    rdx,0x2
ffff800000801ff9:	48 01 ca             	add    rdx,rcx
ffff800000801ffc:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000801ffe:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802001:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802006:	89 d1                	mov    ecx,edx
ffff800000802008:	d3 e7                	shl    edi,cl
ffff80000080200a:	89 fa                	mov    edx,edi
ffff80000080200c:	89 d1                	mov    ecx,edx
ffff80000080200e:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff800000802015:	ff ff ff 
ffff800000802018:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080201c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080201f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802022:	48 98                	cdqe   
ffff800000802024:	48 c1 e0 02          	shl    rax,0x2
ffff800000802028:	48 01 d0             	add    rax,rdx
ffff80000080202b:	09 ce                	or     esi,ecx
ffff80000080202d:	89 f2                	mov    edx,esi
ffff80000080202f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:162
                return VMALLOC_BASE+(i*32+j)*0x1000;
ffff800000802031:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802034:	c1 e0 05             	shl    eax,0x5
ffff800000802037:	89 c2                	mov    edx,eax
ffff800000802039:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080203c:	01 d0                	add    eax,edx
ffff80000080203e:	c1 e0 0c             	shl    eax,0xc
ffff800000802041:	48 98                	cdqe   
ffff800000802043:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff80000080204a:	80 ff ff 
ffff80000080204d:	48 01 d0             	add    rax,rdx
ffff800000802050:	eb 1c                	jmp    ffff80000080206e <kmalloc+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 2)
        for(int j=0;j<32;j++)
ffff800000802052:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 1)
ffff800000802056:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff80000080205a:	0f 8e 4a ff ff ff    	jle    ffff800000801faa <kmalloc+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802060:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155 (discriminator 1)
ffff800000802064:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff800000802068:	0f 8e 30 ff ff ff    	jle    ffff800000801f9e <kmalloc+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:166
            }
        }
    }
}
ffff80000080206e:	5d                   	pop    rbp
ffff80000080206f:	c3                   	ret    

ffff800000802070 <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:168
addr_t kmallocat(addr_t addr,int pgc)
{
ffff800000802070:	f3 0f 1e fa          	endbr64 
ffff800000802074:	55                   	push   rbp
ffff800000802075:	48 89 e5             	mov    rbp,rsp
ffff800000802078:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802078 <kmallocat+0x8>
ffff80000080207f:	49 bb b8 b9 11 00 00 	movabs r11,0x11b9b8
ffff800000802086:	00 00 00 
ffff800000802089:	4c 01 d8             	add    rax,r11
ffff80000080208c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802090:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:169
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
ffff800000802093:	48 b9 00 00 00 fe ff 	movabs rcx,0x7ffffe000000
ffff80000080209a:	7f 00 00 
ffff80000080209d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008020a1:	48 01 ca             	add    rdx,rcx
ffff8000008020a4:	48 c1 ea 0c          	shr    rdx,0xc
ffff8000008020a8:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:170
    if(addr==0){
ffff8000008020ab:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff8000008020b0:	0f 85 3f 01 00 00    	jne    ffff8000008021f5 <kmallocat+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:171
        int l=0,p=0;
ffff8000008020b6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008020bd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
        for(int i=0;i<kmalloc_pgc;i++){
ffff8000008020c4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008020cb:	eb 63                	jmp    ffff800000802130 <kmallocat+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:173
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
ffff8000008020cd:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff8000008020d4:	ff ff ff 
ffff8000008020d7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008020db:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008020de:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020e1:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008020e4:	85 d2                	test   edx,edx
ffff8000008020e6:	0f 48 d1             	cmovs  edx,ecx
ffff8000008020e9:	c1 fa 05             	sar    edx,0x5
ffff8000008020ec:	48 63 d2             	movsxd rdx,edx
ffff8000008020ef:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008020f3:	48 01 f2             	add    rdx,rsi
ffff8000008020f6:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008020f8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020fb:	83 e2 1f             	and    edx,0x1f
ffff8000008020fe:	89 d1                	mov    ecx,edx
ffff800000802100:	d3 ee                	shr    esi,cl
ffff800000802102:	89 f2                	mov    edx,esi
ffff800000802104:	83 e2 01             	and    edx,0x1
ffff800000802107:	85 d2                	test   edx,edx
ffff800000802109:	75 12                	jne    ffff80000080211d <kmallocat+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
                if(l==0)
ffff80000080210b:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000080210f:	75 06                	jne    ffff800000802117 <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
                    p=i;//开头空页
ffff800000802111:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000802114:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
                l++;
ffff800000802117:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffff80000080211b:	eb 07                	jmp    ffff800000802124 <kmallocat+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
            } else
                l=0;
ffff80000080211d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
            if(l==pgc)break;
ffff800000802124:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802127:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080212a:	74 1b                	je     ffff800000802147 <kmallocat+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
ffff80000080212c:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172 (discriminator 1)
ffff800000802130:	48 ba 58 ff ff ff ff 	movabs rdx,0xffffffffffffff58
ffff800000802137:	ff ff ff 
ffff80000080213a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080213e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802140:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff800000802143:	7c 88                	jl     ffff8000008020cd <kmallocat+0x5d>
ffff800000802145:	eb 01                	jmp    ffff800000802148 <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
            if(l==pgc)break;
ffff800000802147:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
        }
        if(l<pgc)return -1;
ffff800000802148:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080214b:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080214e:	7d 0c                	jge    ffff80000080215c <kmallocat+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181 (discriminator 1)
ffff800000802150:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802157:	e9 87 01 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183
        //开始占用
        for(int i=0;i<pgc;i++){
ffff80000080215c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffff800000802163:	eb 6e                	jmp    ffff8000008021d3 <kmallocat+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
ffff800000802165:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff80000080216c:	ff ff ff 
ffff80000080216f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802173:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000802176:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff800000802179:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080217c:	01 ca                	add    edx,ecx
ffff80000080217e:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff800000802181:	85 d2                	test   edx,edx
ffff800000802183:	0f 48 d1             	cmovs  edx,ecx
ffff800000802186:	c1 fa 05             	sar    edx,0x5
ffff800000802189:	89 d6                	mov    esi,edx
ffff80000080218b:	48 63 d6             	movsxd rdx,esi
ffff80000080218e:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802192:	48 01 fa             	add    rdx,rdi
ffff800000802195:	8b 3a                	mov    edi,DWORD PTR [rdx]
ffff800000802197:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080219a:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080219d:	01 ca                	add    edx,ecx
ffff80000080219f:	83 e2 1f             	and    edx,0x1f
ffff8000008021a2:	41 b8 01 00 00 00    	mov    r8d,0x1
ffff8000008021a8:	89 d1                	mov    ecx,edx
ffff8000008021aa:	41 d3 e0             	shl    r8d,cl
ffff8000008021ad:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff8000008021b4:	ff ff ff 
ffff8000008021b7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008021bb:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008021be:	48 63 d6             	movsxd rdx,esi
ffff8000008021c1:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008021c5:	48 01 ca             	add    rdx,rcx
ffff8000008021c8:	44 09 c7             	or     edi,r8d
ffff8000008021cb:	89 f9                	mov    ecx,edi
ffff8000008021cd:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 3)
        for(int i=0;i<pgc;i++){
ffff8000008021cf:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 1)
ffff8000008021d3:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008021d6:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008021d9:	7c 8a                	jl     ffff800000802165 <kmallocat+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
ffff8000008021db:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008021de:	c1 e0 0c             	shl    eax,0xc
ffff8000008021e1:	48 98                	cdqe   
ffff8000008021e3:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff8000008021ea:	80 ff ff 
ffff8000008021ed:	48 01 d0             	add    rax,rdx
ffff8000008021f0:	e9 ee 00 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188
    }
    for(int i=0;i<pgc;i++){
ffff8000008021f5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008021fc:	eb 5c                	jmp    ffff80000080225a <kmallocat+0x1ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:189
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
ffff8000008021fe:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff800000802205:	ff ff ff 
ffff800000802208:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080220c:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080220f:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802212:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802215:	01 ca                	add    edx,ecx
ffff800000802217:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff80000080221a:	85 d2                	test   edx,edx
ffff80000080221c:	0f 48 d1             	cmovs  edx,ecx
ffff80000080221f:	c1 fa 05             	sar    edx,0x5
ffff800000802222:	48 63 d2             	movsxd rdx,edx
ffff800000802225:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802229:	48 01 f2             	add    rdx,rsi
ffff80000080222c:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff80000080222e:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802231:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802234:	01 ca                	add    edx,ecx
ffff800000802236:	83 e2 1f             	and    edx,0x1f
ffff800000802239:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080223e:	89 d1                	mov    ecx,edx
ffff800000802240:	d3 e7                	shl    edi,cl
ffff800000802242:	89 fa                	mov    edx,edi
ffff800000802244:	21 f2                	and    edx,esi
ffff800000802246:	85 d2                	test   edx,edx
ffff800000802248:	74 0c                	je     ffff800000802256 <kmallocat+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190
            return -1;
ffff80000080224a:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802251:	e9 8d 00 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188 (discriminator 2)
    for(int i=0;i<pgc;i++){
ffff800000802256:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188 (discriminator 1)
ffff80000080225a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080225d:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802260:	7c 9c                	jl     ffff8000008021fe <kmallocat+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193
    }
    //
    for(int i=0;i<pgc;i++){
ffff800000802262:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000802269:	eb 6c                	jmp    ffff8000008022d7 <kmallocat+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:194 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
ffff80000080226b:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff800000802272:	ff ff ff 
ffff800000802275:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802279:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080227c:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
ffff80000080227f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802282:	01 f2                	add    edx,esi
ffff800000802284:	48 63 d2             	movsxd rdx,edx
ffff800000802287:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080228b:	48 01 ca             	add    rdx,rcx
ffff80000080228e:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802290:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802293:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802296:	01 ca                	add    edx,ecx
ffff800000802298:	83 e2 1f             	and    edx,0x1f
ffff80000080229b:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008022a0:	89 d1                	mov    ecx,edx
ffff8000008022a2:	d3 e7                	shl    edi,cl
ffff8000008022a4:	89 fa                	mov    edx,edi
ffff8000008022a6:	41 89 d0             	mov    r8d,edx
ffff8000008022a9:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff8000008022b0:	ff ff ff 
ffff8000008022b3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008022b7:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008022ba:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
ffff8000008022bd:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022c0:	01 fa                	add    edx,edi
ffff8000008022c2:	48 63 d2             	movsxd rdx,edx
ffff8000008022c5:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022c9:	48 01 ca             	add    rdx,rcx
ffff8000008022cc:	44 09 c6             	or     esi,r8d
ffff8000008022cf:	89 f1                	mov    ecx,esi
ffff8000008022d1:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff8000008022d3:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193 (discriminator 1)
ffff8000008022d7:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022da:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008022dd:	7c 8c                	jl     ffff80000080226b <kmallocat+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196
    }
    return addr;
ffff8000008022df:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:198

}
ffff8000008022e3:	5d                   	pop    rbp
ffff8000008022e4:	c3                   	ret    

ffff8000008022e5 <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:201

int kmfree(addr_t ptr)
{
ffff8000008022e5:	f3 0f 1e fa          	endbr64 
ffff8000008022e9:	55                   	push   rbp
ffff8000008022ea:	48 89 e5             	mov    rbp,rsp
ffff8000008022ed:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008022ed <kmfree+0x8>
ffff8000008022f4:	49 bb 43 b7 11 00 00 	movabs r11,0x11b743
ffff8000008022fb:	00 00 00 
ffff8000008022fe:	4c 01 da             	add    rdx,r11
ffff800000802301:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:202
    int num=ptr/PAGE_SIZE;
ffff800000802305:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802309:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080230d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:203
    int n=num/32;
ffff800000802310:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802313:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802316:	85 c0                	test   eax,eax
ffff800000802318:	0f 48 c1             	cmovs  eax,ecx
ffff80000080231b:	c1 f8 05             	sar    eax,0x5
ffff80000080231e:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:204
    int r=num%32;
ffff800000802321:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802324:	89 c1                	mov    ecx,eax
ffff800000802326:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802329:	c1 e9 1b             	shr    ecx,0x1b
ffff80000080232c:	01 c8                	add    eax,ecx
ffff80000080232e:	83 e0 1f             	and    eax,0x1f
ffff800000802331:	29 c8                	sub    eax,ecx
ffff800000802333:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:205
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
ffff800000802336:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080233d:	ff ff ff 
ffff800000802340:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802344:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802347:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080234a:	48 98                	cdqe   
ffff80000080234c:	48 c1 e0 02          	shl    rax,0x2
ffff800000802350:	48 01 c8             	add    rax,rcx
ffff800000802353:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802355:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802358:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080235d:	89 c1                	mov    ecx,eax
ffff80000080235f:	d3 e7                	shl    edi,cl
ffff800000802361:	89 f8                	mov    eax,edi
ffff800000802363:	f7 d0                	not    eax
ffff800000802365:	89 c1                	mov    ecx,eax
ffff800000802367:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080236e:	ff ff ff 
ffff800000802371:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802375:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802378:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080237b:	48 98                	cdqe   
ffff80000080237d:	48 c1 e0 02          	shl    rax,0x2
ffff800000802381:	48 01 d0             	add    rax,rdx
ffff800000802384:	21 ce                	and    esi,ecx
ffff800000802386:	89 f2                	mov    edx,esi
ffff800000802388:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:206
}
ffff80000080238a:	90                   	nop
ffff80000080238b:	5d                   	pop    rbp
ffff80000080238c:	c3                   	ret    

ffff80000080238d <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207
void page_err(){
ffff80000080238d:	f3 0f 1e fa          	endbr64 
ffff800000802391:	55                   	push   rbp
ffff800000802392:	48 89 e5             	mov    rbp,rsp
ffff800000802395:	41 57                	push   r15
ffff800000802397:	41 55                	push   r13
ffff800000802399:	41 54                	push   r12
ffff80000080239b:	53                   	push   rbx
ffff80000080239c:	48 83 ec 20          	sub    rsp,0x20
ffff8000008023a0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008023a0 <page_err+0x13>
ffff8000008023a7:	49 bb 90 b6 11 00 00 	movabs r11,0x11b690
ffff8000008023ae:	00 00 00 
ffff8000008023b1:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
    asm("cli");
ffff8000008023b4:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
    printf("page err\n");
ffff8000008023b5:	48 b8 7d d5 ff ff ff 	movabs rax,0xffffffffffffd57d
ffff8000008023bc:	ff ff ff 
ffff8000008023bf:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008023c3:	48 89 c7             	mov    rdi,rax
ffff8000008023c6:	49 89 df             	mov    r15,rbx
ffff8000008023c9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008023ce:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff8000008023d5:	ff ff ff 
ffff8000008023d8:	48 01 da             	add    rdx,rbx
ffff8000008023db:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
    unsigned long err_code=0,l_addr=0;
ffff8000008023dd:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008023e4:	00 
ffff8000008023e5:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008023ec:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:211
    asm volatile("mov 0(%%rbp),%0":"=r"(err_code));
ffff8000008023ed:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
ffff8000008023f1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:212
    asm volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
ffff8000008023f5:	0f 20 d0             	mov    rax,cr2
ffff8000008023f8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:213
    int p=err_code&1;
ffff8000008023fc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802400:	83 e0 01             	and    eax,0x1
ffff800000802403:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215

    if(!p)
ffff800000802406:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080240a:	75 72                	jne    ffff80000080247e <page_err+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:222
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        //在进程的页表中申请新页
        smmap(get_phyaddr(req_a_page()),l_addr&~0xfff,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff80000080240c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000802413:	ff ff ff 
ffff800000802416:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080241a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080241d:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000802424:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000802428:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080242e:	49 89 c5             	mov    r13,rax
ffff800000802431:	49 89 df             	mov    r15,rbx
ffff800000802434:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802439:	48 ba f1 4f ee ff ff 	movabs rdx,0xffffffffffee4ff1
ffff800000802440:	ff ff ff 
ffff800000802443:	48 01 da             	add    rdx,rbx
ffff800000802446:	ff d2                	call   rdx
ffff800000802448:	89 c7                	mov    edi,eax
ffff80000080244a:	49 89 df             	mov    r15,rbx
ffff80000080244d:	48 b8 09 53 ee ff ff 	movabs rax,0xffffffffffee5309
ffff800000802454:	ff ff ff 
ffff800000802457:	48 01 d8             	add    rax,rbx
ffff80000080245a:	ff d0                	call   rax
ffff80000080245c:	48 98                	cdqe   
ffff80000080245e:	4c 89 e1             	mov    rcx,r12
ffff800000802461:	ba 07 00 00 00       	mov    edx,0x7
ffff800000802466:	4c 89 ee             	mov    rsi,r13
ffff800000802469:	48 89 c7             	mov    rdi,rax
ffff80000080246c:	49 89 df             	mov    r15,rbx
ffff80000080246f:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff800000802476:	ff ff ff 
ffff800000802479:	48 01 d8             	add    rax,rbx
ffff80000080247c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:240
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
ffff80000080247e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802482:	83 e0 02             	and    eax,0x2
ffff800000802485:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:241
    if(p)printf("when writing\n");else //puts("when reading");
ffff800000802488:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080248c:	74 2a                	je     ffff8000008024b8 <page_err+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:241 (discriminator 1)
ffff80000080248e:	48 b8 87 d5 ff ff ff 	movabs rax,0xffffffffffffd587
ffff800000802495:	ff ff ff 
ffff800000802498:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080249c:	48 89 c7             	mov    rdi,rax
ffff80000080249f:	49 89 df             	mov    r15,rbx
ffff8000008024a2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024a7:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff8000008024ae:	ff ff ff 
ffff8000008024b1:	48 01 da             	add    rdx,rbx
ffff8000008024b4:	ff d2                	call   rdx
ffff8000008024b6:	eb 0a                	jmp    ffff8000008024c2 <page_err+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:242
    p=err_code&4;
ffff8000008024b8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008024bc:	83 e0 04             	and    eax,0x4
ffff8000008024bf:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243
    if(!p)printf("supervisor mode\n");else //puts("user mode");
ffff8000008024c2:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008024c6:	75 2a                	jne    ffff8000008024f2 <page_err+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243 (discriminator 1)
ffff8000008024c8:	48 b8 95 d5 ff ff ff 	movabs rax,0xffffffffffffd595
ffff8000008024cf:	ff ff ff 
ffff8000008024d2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008024d6:	48 89 c7             	mov    rdi,rax
ffff8000008024d9:	49 89 df             	mov    r15,rbx
ffff8000008024dc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024e1:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff8000008024e8:	ff ff ff 
ffff8000008024eb:	48 01 da             	add    rdx,rbx
ffff8000008024ee:	ff d2                	call   rdx
ffff8000008024f0:	eb 0a                	jmp    ffff8000008024fc <page_err+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244
    p=err_code&16;
ffff8000008024f2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008024f6:	83 e0 10             	and    eax,0x10
ffff8000008024f9:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245
    if(p)printf("an instruction tries to fetch\n");
ffff8000008024fc:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000802500:	74 28                	je     ffff80000080252a <page_err+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245 (discriminator 1)
ffff800000802502:	48 b8 a8 d5 ff ff ff 	movabs rax,0xffffffffffffd5a8
ffff800000802509:	ff ff ff 
ffff80000080250c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802510:	48 89 c7             	mov    rdi,rax
ffff800000802513:	49 89 df             	mov    r15,rbx
ffff800000802516:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080251b:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff800000802522:	ff ff ff 
ffff800000802525:	48 01 da             	add    rdx,rbx
ffff800000802528:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246
    unsigned int addr=0;
ffff80000080252a:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
    asm volatile("mov 8(%%rbp),%0":"=r"(addr));
ffff800000802531:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
ffff800000802534:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
ffff800000802537:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080253b:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080253e:	89 c6                	mov    esi,eax
ffff800000802540:	48 b8 c8 d5 ff ff ff 	movabs rax,0xffffffffffffd5c8
ffff800000802547:	ff ff ff 
ffff80000080254a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080254e:	48 89 c7             	mov    rdi,rax
ffff800000802551:	49 89 df             	mov    r15,rbx
ffff800000802554:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802559:	48 b9 c3 3c ee ff ff 	movabs rcx,0xffffffffffee3cc3
ffff800000802560:	ff ff ff 
ffff800000802563:	48 01 d9             	add    rcx,rbx
ffff800000802566:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:260
    }*/
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
ffff800000802568:	49 89 df             	mov    r15,rbx
ffff80000080256b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802570:	48 ba 5e a1 ee ff ff 	movabs rdx,0xffffffffffeea15e
ffff800000802577:	ff ff ff 
ffff80000080257a:	48 01 da             	add    rdx,rbx
ffff80000080257d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:262
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
ffff80000080257f:	fb                   	sti    
ffff800000802580:	c9                   	leave  
ffff800000802581:	48 83 c4 08          	add    rsp,0x8
ffff800000802585:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:263
}
ffff800000802587:	90                   	nop
ffff800000802588:	48 83 c4 20          	add    rsp,0x20
ffff80000080258c:	5b                   	pop    rbx
ffff80000080258d:	41 5c                	pop    r12
ffff80000080258f:	41 5d                	pop    r13
ffff800000802591:	41 5f                	pop    r15
ffff800000802593:	5d                   	pop    rbp
ffff800000802594:	c3                   	ret    

ffff800000802595 <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:265
void init_memory()
{
ffff800000802595:	f3 0f 1e fa          	endbr64 
ffff800000802599:	55                   	push   rbp
ffff80000080259a:	48 89 e5             	mov    rbp,rsp
ffff80000080259d:	41 57                	push   r15
ffff80000080259f:	53                   	push   rbx
ffff8000008025a0:	48 83 ec 60          	sub    rsp,0x60
ffff8000008025a4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008025a4 <init_memory+0xf>
ffff8000008025ab:	49 bb 8c b4 11 00 00 	movabs r11,0x11b48c
ffff8000008025b2:	00 00 00 
ffff8000008025b5:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:268
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取可用内存大小mem_size
    size_t tot_mem_size=mmap_struct[mmap_t_i-1].base+mmap_struct[mmap_t_i-1].len,mem_size=0;
ffff8000008025b8:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008025bf:	ff ff ff 
ffff8000008025c2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008025c6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008025c8:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008025cb:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff8000008025d2:	ff ff ff 
ffff8000008025d5:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008025d9:	48 63 d2             	movsxd rdx,edx
ffff8000008025dc:	48 89 d0             	mov    rax,rdx
ffff8000008025df:	48 01 c0             	add    rax,rax
ffff8000008025e2:	48 01 d0             	add    rax,rdx
ffff8000008025e5:	48 c1 e0 03          	shl    rax,0x3
ffff8000008025e9:	48 01 c8             	add    rax,rcx
ffff8000008025ec:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008025ef:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008025f6:	ff ff ff 
ffff8000008025f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008025fd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008025ff:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802602:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff800000802609:	ff ff ff 
ffff80000080260c:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802610:	48 63 d2             	movsxd rdx,edx
ffff800000802613:	48 89 d0             	mov    rax,rdx
ffff800000802616:	48 01 c0             	add    rax,rax
ffff800000802619:	48 01 d0             	add    rax,rdx
ffff80000080261c:	48 c1 e0 03          	shl    rax,0x3
ffff800000802620:	48 01 f0             	add    rax,rsi
ffff800000802623:	48 83 c0 08          	add    rax,0x8
ffff800000802627:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080262a:	48 01 c8             	add    rax,rcx
ffff80000080262d:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff800000802631:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000802638:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269
    for(int i=0;i<mmap_t_i;i++)
ffff800000802639:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000802640:	eb 64                	jmp    ffff8000008026a6 <init_memory+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:271
    {
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff800000802642:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff800000802649:	ff ff ff 
ffff80000080264c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802650:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802653:	48 63 d0             	movsxd rdx,eax
ffff800000802656:	48 89 d0             	mov    rax,rdx
ffff800000802659:	48 01 c0             	add    rax,rax
ffff80000080265c:	48 01 d0             	add    rax,rdx
ffff80000080265f:	48 c1 e0 03          	shl    rax,0x3
ffff800000802663:	48 01 c8             	add    rax,rcx
ffff800000802666:	48 83 c0 10          	add    rax,0x10
ffff80000080266a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080266d:	48 83 f8 01          	cmp    rax,0x1
ffff800000802671:	75 2f                	jne    ffff8000008026a2 <init_memory+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272
            mem_size+=mmap_struct[i].len;
ffff800000802673:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff80000080267a:	ff ff ff 
ffff80000080267d:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802681:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802684:	48 63 d0             	movsxd rdx,eax
ffff800000802687:	48 89 d0             	mov    rax,rdx
ffff80000080268a:	48 01 c0             	add    rax,rax
ffff80000080268d:	48 01 d0             	add    rax,rdx
ffff800000802690:	48 c1 e0 03          	shl    rax,0x3
ffff800000802694:	48 01 c8             	add    rax,rcx
ffff800000802697:	48 83 c0 08          	add    rax,0x8
ffff80000080269b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080269e:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff8000008026a2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269 (discriminator 1)
ffff8000008026a6:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008026ad:	ff ff ff 
ffff8000008026b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026b4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008026b6:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008026b9:	7c 87                	jl     ffff800000802642 <init_memory+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274
    }
    usr_mem_pa=PAGE_4K_ALIGN(mem_size/2);
ffff8000008026bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008026bf:	48 d1 e8             	shr    rax,1
ffff8000008026c2:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008026c8:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008026ce:	48 89 c2             	mov    rdx,rax
ffff8000008026d1:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff8000008026d8:	ff ff ff 
ffff8000008026db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026df:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:281
    /*
     * 注：物理内存的一半会分给内核。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    pmalloc_entc= tot_mem_size / PAGE_4K_SIZE/32;
ffff8000008026e2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008026e6:	48 c1 e8 11          	shr    rax,0x11
ffff8000008026ea:	89 c2                	mov    edx,eax
ffff8000008026ec:	48 b8 28 ff ff ff ff 	movabs rax,0xffffffffffffff28
ffff8000008026f3:	ff ff ff 
ffff8000008026f6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026fa:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:282
    int pgc=(tot_mem_size/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
ffff8000008026fc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802700:	48 c1 e8 1b          	shr    rax,0x1b
ffff800000802704:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:284
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
ffff800000802707:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080270a:	c1 f8 05             	sar    eax,0x5
ffff80000080270d:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
ffff800000802710:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802714:	48 d1 e8             	shr    rax,1
ffff800000802717:	48 2d 00 00 00 01    	sub    rax,0x1000000
ffff80000080271d:	48 c1 e8 11          	shr    rax,0x11
ffff800000802721:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:288
    size_t vmms=vmec*4/PAGE_4K_SIZE;//位图自己需要多少页
ffff800000802725:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802729:	48 c1 e0 02          	shl    rax,0x2
ffff80000080272d:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802731:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:289
    comprintf("tot memsize:0x%l,available size 0x%l,kmalloc pages count:%d,kmalloc bitmap taking 0x%d pages\n", tot_mem_size,mem_size,vmec,vmms);
ffff800000802735:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000802739:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffff80000080273d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000802741:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802745:	49 89 f0             	mov    r8,rsi
ffff800000802748:	48 89 c6             	mov    rsi,rax
ffff80000080274b:	48 b8 f0 d5 ff ff ff 	movabs rax,0xffffffffffffd5f0
ffff800000802752:	ff ff ff 
ffff800000802755:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802759:	48 89 c7             	mov    rdi,rax
ffff80000080275c:	49 89 df             	mov    r15,rbx
ffff80000080275f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802764:	49 b9 dc 4b ef ff ff 	movabs r9,0xffffffffffef4bdc
ffff80000080276b:	ff ff ff 
ffff80000080276e:	49 01 d9             	add    r9,rbx
ffff800000802771:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:290
    if(vmec*4%PAGE_4K_SIZE)
ffff800000802774:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802778:	48 c1 e0 02          	shl    rax,0x2
ffff80000080277c:	25 fc 0f 00 00       	and    eax,0xffc
ffff800000802781:	48 85 c0             	test   rax,rax
ffff800000802784:	74 05                	je     ffff80000080278b <init_memory+0x1f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291
        vmms++;
ffff800000802786:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292
    for(int i=0;i<vmec;i++){
ffff80000080278b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000802792:	eb 27                	jmp    ffff8000008027bb <init_memory+0x226>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:293 (discriminator 3)
        vmalloc_map[i]=0;
ffff800000802794:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080279b:	ff ff ff 
ffff80000080279e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027a2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008027a5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008027a8:	48 98                	cdqe   
ffff8000008027aa:	48 c1 e0 02          	shl    rax,0x2
ffff8000008027ae:	48 01 d0             	add    rax,rdx
ffff8000008027b1:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292 (discriminator 3)
    for(int i=0;i<vmec;i++){
ffff8000008027b7:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292 (discriminator 1)
ffff8000008027bb:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008027be:	48 98                	cdqe   
ffff8000008027c0:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff8000008027c4:	77 ce                	ja     ffff800000802794 <init_memory+0x1ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296
    }
    //位图占用前几页
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff8000008027c6:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008027cd:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008027d4:	eb 61                	jmp    ffff800000802837 <init_memory+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:298
    {
        if(i==32)
ffff8000008027d6:	83 7d d0 20          	cmp    DWORD PTR [rbp-0x30],0x20
ffff8000008027da:	75 0b                	jne    ffff8000008027e7 <init_memory+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:300
        {
            i=0;
ffff8000008027dc:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301
            j++;
ffff8000008027e3:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303 (discriminator 2)
        }
        vmalloc_map[j]|=1u<<i;
ffff8000008027e7:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff8000008027ee:	ff ff ff 
ffff8000008027f1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027f5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008027f8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008027fb:	48 98                	cdqe   
ffff8000008027fd:	48 c1 e0 02          	shl    rax,0x2
ffff800000802801:	48 01 d0             	add    rax,rdx
ffff800000802804:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802806:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802809:	be 01 00 00 00       	mov    esi,0x1
ffff80000080280e:	89 c1                	mov    ecx,eax
ffff800000802810:	d3 e6                	shl    esi,cl
ffff800000802812:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff800000802819:	ff ff ff 
ffff80000080281c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802820:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802823:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802826:	48 98                	cdqe   
ffff800000802828:	48 c1 e0 02          	shl    rax,0x2
ffff80000080282c:	48 01 c8             	add    rax,rcx
ffff80000080282f:	09 f2                	or     edx,esi
ffff800000802831:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296 (discriminator 2)
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff800000802833:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296 (discriminator 1)
ffff800000802837:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080283a:	c1 e0 05             	shl    eax,0x5
ffff80000080283d:	89 c2                	mov    edx,eax
ffff80000080283f:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802842:	01 d0                	add    eax,edx
ffff800000802844:	48 98                	cdqe   
ffff800000802846:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080284a:	77 8a                	ja     ffff8000008027d6 <init_memory+0x241>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:306
    }
    //kmalloc连续的内存
    page_map=kmallocat(0,pgc);//(unsigned int*)PAGE_4K_ALIGN(0xc00000);
ffff80000080284c:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080284f:	89 c6                	mov    esi,eax
ffff800000802851:	bf 00 00 00 00       	mov    edi,0x0
ffff800000802856:	49 89 df             	mov    r15,rbx
ffff800000802859:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff800000802860:	ff ff ff 
ffff800000802863:	48 01 d8             	add    rax,rbx
ffff800000802866:	ff d0                	call   rax
ffff800000802868:	48 89 c2             	mov    rdx,rax
ffff80000080286b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802872:	ff ff ff 
ffff800000802875:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802879:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:307
    int* p=page_map;
ffff80000080287c:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802883:	ff ff ff 
ffff800000802886:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080288a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080288d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:308
    addr_t curp=0;
ffff800000802891:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000802898:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310
    //不能使用的内存提前占用掉
    for(int i=0;i<mmap_t_i;i++){
ffff800000802899:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff8000008028a0:	e9 1f 01 00 00       	jmp    ffff8000008029c4 <init_memory+0x42f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:311
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff8000008028a5:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff8000008028ac:	ff ff ff 
ffff8000008028af:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008028b3:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008028b6:	48 63 d0             	movsxd rdx,eax
ffff8000008028b9:	48 89 d0             	mov    rax,rdx
ffff8000008028bc:	48 01 c0             	add    rax,rax
ffff8000008028bf:	48 01 d0             	add    rax,rdx
ffff8000008028c2:	48 c1 e0 03          	shl    rax,0x3
ffff8000008028c6:	48 01 c8             	add    rax,rcx
ffff8000008028c9:	48 83 c0 10          	add    rax,0x10
ffff8000008028cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008028d0:	48 83 f8 01          	cmp    rax,0x1
ffff8000008028d4:	0f 84 e5 00 00 00    	je     ffff8000008029bf <init_memory+0x42a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313
            continue;
        int b=(mmap_struct[i].base-usr_mem_pa)/PAGE_4K_SIZE;
ffff8000008028da:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff8000008028e1:	ff ff ff 
ffff8000008028e4:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008028e8:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008028eb:	48 63 d0             	movsxd rdx,eax
ffff8000008028ee:	48 89 d0             	mov    rax,rdx
ffff8000008028f1:	48 01 c0             	add    rax,rax
ffff8000008028f4:	48 01 d0             	add    rax,rdx
ffff8000008028f7:	48 c1 e0 03          	shl    rax,0x3
ffff8000008028fb:	48 01 c8             	add    rax,rcx
ffff8000008028fe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802901:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff800000802908:	ff ff ff 
ffff80000080290b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080290f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802912:	48 89 d0             	mov    rax,rdx
ffff800000802915:	48 29 c8             	sub    rax,rcx
ffff800000802918:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080291c:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:314
        int l=mmap_struct[i].len/PAGE_4K_SIZE;
ffff80000080291f:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff800000802926:	ff ff ff 
ffff800000802929:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080292d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802930:	48 63 d0             	movsxd rdx,eax
ffff800000802933:	48 89 d0             	mov    rax,rdx
ffff800000802936:	48 01 c0             	add    rax,rax
ffff800000802939:	48 01 d0             	add    rax,rdx
ffff80000080293c:	48 c1 e0 03          	shl    rax,0x3
ffff800000802940:	48 01 c8             	add    rax,rcx
ffff800000802943:	48 83 c0 08          	add    rax,0x8
ffff800000802947:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080294a:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080294e:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315
        for(int j=0;j<l;j++){
ffff800000802951:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff800000802958:	eb 5b                	jmp    ffff8000008029b5 <init_memory+0x420>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:316 (discriminator 3)
            p[b+j/32]|=1u<<(j%32);
ffff80000080295a:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080295d:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000802960:	85 c0                	test   eax,eax
ffff800000802962:	0f 48 c2             	cmovs  eax,edx
ffff800000802965:	c1 f8 05             	sar    eax,0x5
ffff800000802968:	89 c6                	mov    esi,eax
ffff80000080296a:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080296d:	01 f0                	add    eax,esi
ffff80000080296f:	48 98                	cdqe   
ffff800000802971:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000802978:	00 
ffff800000802979:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080297d:	48 01 d0             	add    rax,rdx
ffff800000802980:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802982:	89 c7                	mov    edi,eax
ffff800000802984:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802987:	83 e0 1f             	and    eax,0x1f
ffff80000080298a:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080298f:	89 c1                	mov    ecx,eax
ffff800000802991:	d3 e2                	shl    edx,cl
ffff800000802993:	89 d0                	mov    eax,edx
ffff800000802995:	09 c7                	or     edi,eax
ffff800000802997:	89 fa                	mov    edx,edi
ffff800000802999:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080299c:	01 f0                	add    eax,esi
ffff80000080299e:	48 98                	cdqe   
ffff8000008029a0:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
ffff8000008029a7:	00 
ffff8000008029a8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008029ac:	48 01 c8             	add    rax,rcx
ffff8000008029af:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315 (discriminator 3)
        for(int j=0;j<l;j++){
ffff8000008029b1:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315 (discriminator 1)
ffff8000008029b5:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008029b8:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
ffff8000008029bb:	7c 9d                	jl     ffff80000080295a <init_memory+0x3c5>
ffff8000008029bd:	eb 01                	jmp    ffff8000008029c0 <init_memory+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:312
            continue;
ffff8000008029bf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++){
ffff8000008029c0:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310 (discriminator 1)
ffff8000008029c4:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008029cb:	ff ff ff 
ffff8000008029ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029d2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008029d4:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
ffff8000008029d7:	0f 8c c8 fe ff ff    	jl     ffff8000008028a5 <init_memory+0x310>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320
        }
    }
    //低1gb提前占用掉 knl
    for(int j=0;j<0x2000;j++){
ffff8000008029dd:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
ffff8000008029e4:	eb 27                	jmp    ffff800000802a0d <init_memory+0x478>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:321 (discriminator 3)
        page_map[j]=-1;
ffff8000008029e6:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008029ed:	ff ff ff 
ffff8000008029f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029f4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008029f7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008029fa:	48 98                	cdqe   
ffff8000008029fc:	48 c1 e0 02          	shl    rax,0x2
ffff800000802a00:	48 01 d0             	add    rax,rdx
ffff800000802a03:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320 (discriminator 3)
    for(int j=0;j<0x2000;j++){
ffff800000802a09:	83 45 c0 01          	add    DWORD PTR [rbp-0x40],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320 (discriminator 1)
ffff800000802a0d:	81 7d c0 ff 1f 00 00 	cmp    DWORD PTR [rbp-0x40],0x1fff
ffff800000802a14:	7e d0                	jle    ffff8000008029e6 <init_memory+0x451>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:351
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
ffff800000802a16:	90                   	nop
ffff800000802a17:	90                   	nop
ffff800000802a18:	48 83 c4 60          	add    rsp,0x60
ffff800000802a1c:	5b                   	pop    rbx
ffff800000802a1d:	41 5f                	pop    r15
ffff800000802a1f:	5d                   	pop    rbp
ffff800000802a20:	c3                   	ret    

ffff800000802a21 <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:357
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
ffff800000802a21:	f3 0f 1e fa          	endbr64 
ffff800000802a25:	55                   	push   rbp
ffff800000802a26:	48 89 e5             	mov    rbp,rsp
ffff800000802a29:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802a29 <req_a_page+0x8>
ffff800000802a30:	49 bb 07 b0 11 00 00 	movabs r11,0x11b007
ffff800000802a37:	00 00 00 
ffff800000802a3a:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802a3d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000802a44:	e9 d3 00 00 00       	jmp    ffff800000802b1c <req_a_page+0xfb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359
        for(int j=0;j<32;j++){
ffff800000802a49:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000802a50:	e9 b9 00 00 00       	jmp    ffff800000802b0e <req_a_page+0xed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:360
            unsigned int bit=page_map[i]&(1<<j);
ffff800000802a55:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000802a5c:	ff ff ff 
ffff800000802a5f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802a63:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802a66:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802a69:	48 63 d2             	movsxd rdx,edx
ffff800000802a6c:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802a70:	48 01 ca             	add    rdx,rcx
ffff800000802a73:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802a75:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802a78:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802a7d:	89 d1                	mov    ecx,edx
ffff800000802a7f:	d3 e7                	shl    edi,cl
ffff800000802a81:	89 fa                	mov    edx,edi
ffff800000802a83:	21 f2                	and    edx,esi
ffff800000802a85:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361
            if((i*32+j)*4096>=0x100000&&(bit==0u))
ffff800000802a88:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802a8b:	89 d1                	mov    ecx,edx
ffff800000802a8d:	c1 e1 05             	shl    ecx,0x5
ffff800000802a90:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802a93:	01 ca                	add    edx,ecx
ffff800000802a95:	c1 e2 0c             	shl    edx,0xc
ffff800000802a98:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
ffff800000802a9e:	7e 6a                	jle    ffff800000802b0a <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361 (discriminator 1)
ffff800000802aa0:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
ffff800000802aa4:	75 64                	jne    ffff800000802b0a <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364
            {
                // comprintf("req_a_page:before:page_map[%d]=0x%x,",i,page_map[i]);
                page_map[i]=page_map[i]|(1<<j);
ffff800000802aa6:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000802aad:	ff ff ff 
ffff800000802ab0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802ab4:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802ab7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802aba:	48 63 d2             	movsxd rdx,edx
ffff800000802abd:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802ac1:	48 01 ca             	add    rdx,rcx
ffff800000802ac4:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802ac6:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802ac9:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802ace:	89 d1                	mov    ecx,edx
ffff800000802ad0:	d3 e7                	shl    edi,cl
ffff800000802ad2:	89 fa                	mov    edx,edi
ffff800000802ad4:	89 d1                	mov    ecx,edx
ffff800000802ad6:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000802add:	ff ff ff 
ffff800000802ae0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000802ae4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802ae7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802aea:	48 98                	cdqe   
ffff800000802aec:	48 c1 e0 02          	shl    rax,0x2
ffff800000802af0:	48 01 d0             	add    rax,rdx
ffff800000802af3:	09 ce                	or     esi,ecx
ffff800000802af5:	89 f2                	mov    edx,esi
ffff800000802af7:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
                // comprintf("now = 0x%x",page_map[i]);
                return i*32+j;//num of page
ffff800000802af9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802afc:	c1 e0 05             	shl    eax,0x5
ffff800000802aff:	89 c2                	mov    edx,eax
ffff800000802b01:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802b04:	01 d0                	add    eax,edx
ffff800000802b06:	48 98                	cdqe   
ffff800000802b08:	eb 32                	jmp    ffff800000802b3c <req_a_page+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359 (discriminator 2)
        for(int j=0;j<32;j++){
ffff800000802b0a:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359 (discriminator 1)
ffff800000802b0e:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff800000802b12:	0f 8e 3d ff ff ff    	jle    ffff800000802a55 <req_a_page+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358 (discriminator 2)
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802b18:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358 (discriminator 1)
ffff800000802b1c:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff800000802b23:	ff ff ff 
ffff800000802b26:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802b2a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802b2c:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000802b2f:	0f 8c 14 ff ff ff    	jl     ffff800000802a49 <req_a_page+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:371

            }
        }
    }
    return -1;
ffff800000802b35:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:372
}
ffff800000802b3c:	5d                   	pop    rbp
ffff800000802b3d:	c3                   	ret    

ffff800000802b3e <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:374

void * pmalloc(){
ffff800000802b3e:	f3 0f 1e fa          	endbr64 
ffff800000802b42:	55                   	push   rbp
ffff800000802b43:	48 89 e5             	mov    rbp,rsp
ffff800000802b46:	41 57                	push   r15
ffff800000802b48:	53                   	push   rbx
ffff800000802b49:	48 83 ec 10          	sub    rsp,0x10
ffff800000802b4d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802b4d <pmalloc+0xf>
ffff800000802b54:	49 bb e3 ae 11 00 00 	movabs r11,0x11aee3
ffff800000802b5b:	00 00 00 
ffff800000802b5e:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:375
    void *ret=(void*)(get_phyaddr(req_a_page()));
ffff800000802b61:	49 89 df             	mov    r15,rbx
ffff800000802b64:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802b69:	48 ba f1 4f ee ff ff 	movabs rdx,0xffffffffffee4ff1
ffff800000802b70:	ff ff ff 
ffff800000802b73:	48 01 da             	add    rdx,rbx
ffff800000802b76:	ff d2                	call   rdx
ffff800000802b78:	89 c7                	mov    edi,eax
ffff800000802b7a:	49 89 df             	mov    r15,rbx
ffff800000802b7d:	48 b8 09 53 ee ff ff 	movabs rax,0xffffffffffee5309
ffff800000802b84:	ff ff ff 
ffff800000802b87:	48 01 d8             	add    rax,rbx
ffff800000802b8a:	ff d0                	call   rax
ffff800000802b8c:	48 98                	cdqe   
ffff800000802b8e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:377
    // comprintf("pmalloc():%l\n",ret);
    return ret;
ffff800000802b92:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:378
}
ffff800000802b96:	48 83 c4 10          	add    rsp,0x10
ffff800000802b9a:	5b                   	pop    rbx
ffff800000802b9b:	41 5f                	pop    r15
ffff800000802b9d:	5d                   	pop    rbp
ffff800000802b9e:	c3                   	ret    

ffff800000802b9f <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:379
int free_page(char *paddr){
ffff800000802b9f:	f3 0f 1e fa          	endbr64 
ffff800000802ba3:	55                   	push   rbp
ffff800000802ba4:	48 89 e5             	mov    rbp,rsp
ffff800000802ba7:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802ba7 <free_page+0x8>
ffff800000802bae:	49 bb 89 ae 11 00 00 	movabs r11,0x11ae89
ffff800000802bb5:	00 00 00 
ffff800000802bb8:	4c 01 da             	add    rdx,r11
ffff800000802bbb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:380
    int num=(int)paddr/4096;
ffff800000802bbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802bc3:	8d 88 ff 0f 00 00    	lea    ecx,[rax+0xfff]
ffff800000802bc9:	85 c0                	test   eax,eax
ffff800000802bcb:	0f 48 c1             	cmovs  eax,ecx
ffff800000802bce:	c1 f8 0c             	sar    eax,0xc
ffff800000802bd1:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:381
    int n=num/32;
ffff800000802bd4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802bd7:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802bda:	85 c0                	test   eax,eax
ffff800000802bdc:	0f 48 c1             	cmovs  eax,ecx
ffff800000802bdf:	c1 f8 05             	sar    eax,0x5
ffff800000802be2:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:382
    int r=num%32;
ffff800000802be5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802be8:	89 c1                	mov    ecx,eax
ffff800000802bea:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802bed:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802bf0:	01 c8                	add    eax,ecx
ffff800000802bf2:	83 e0 1f             	and    eax,0x1f
ffff800000802bf5:	29 c8                	sub    eax,ecx
ffff800000802bf7:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:383
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
ffff800000802bfa:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802c01:	ff ff ff 
ffff800000802c04:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802c08:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802c0b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802c0e:	48 98                	cdqe   
ffff800000802c10:	48 c1 e0 02          	shl    rax,0x2
ffff800000802c14:	48 01 c8             	add    rax,rcx
ffff800000802c17:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802c19:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802c1c:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802c21:	89 c1                	mov    ecx,eax
ffff800000802c23:	d3 e7                	shl    edi,cl
ffff800000802c25:	89 f8                	mov    eax,edi
ffff800000802c27:	f7 d0                	not    eax
ffff800000802c29:	89 c1                	mov    ecx,eax
ffff800000802c2b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802c32:	ff ff ff 
ffff800000802c35:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802c39:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802c3c:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802c3f:	48 98                	cdqe   
ffff800000802c41:	48 c1 e0 02          	shl    rax,0x2
ffff800000802c45:	48 01 d0             	add    rax,rdx
ffff800000802c48:	21 ce                	and    esi,ecx
ffff800000802c4a:	89 f2                	mov    edx,esi
ffff800000802c4c:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:384
}
ffff800000802c4e:	90                   	nop
ffff800000802c4f:	5d                   	pop    rbp
ffff800000802c50:	c3                   	ret    

ffff800000802c51 <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:386

int free_pages_at(int base,int pgn){
ffff800000802c51:	f3 0f 1e fa          	endbr64 
ffff800000802c55:	55                   	push   rbp
ffff800000802c56:	48 89 e5             	mov    rbp,rsp
ffff800000802c59:	41 57                	push   r15
ffff800000802c5b:	53                   	push   rbx
ffff800000802c5c:	48 83 ec 20          	sub    rsp,0x20
ffff800000802c60:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802c60 <free_pages_at+0xf>
ffff800000802c67:	49 bb d0 ad 11 00 00 	movabs r11,0x11add0
ffff800000802c6e:	00 00 00 
ffff800000802c71:	4c 01 db             	add    rbx,r11
ffff800000802c74:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000802c77:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387
    for(int i=0;i<pgn;i++){
ffff800000802c7a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802c81:	eb 28                	jmp    ffff800000802cab <free_pages_at+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:388 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
ffff800000802c83:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802c86:	c1 e0 0c             	shl    eax,0xc
ffff800000802c89:	89 c2                	mov    edx,eax
ffff800000802c8b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802c8e:	01 d0                	add    eax,edx
ffff800000802c90:	48 98                	cdqe   
ffff800000802c92:	48 89 c7             	mov    rdi,rax
ffff800000802c95:	49 89 df             	mov    r15,rbx
ffff800000802c98:	48 b8 6f 51 ee ff ff 	movabs rax,0xffffffffffee516f
ffff800000802c9f:	ff ff ff 
ffff800000802ca2:	48 01 d8             	add    rax,rbx
ffff800000802ca5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387 (discriminator 3)
    for(int i=0;i<pgn;i++){
ffff800000802ca7:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387 (discriminator 1)
ffff800000802cab:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802cae:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000802cb1:	7c d0                	jl     ffff800000802c83 <free_pages_at+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390
    }
}
ffff800000802cb3:	90                   	nop
ffff800000802cb4:	48 83 c4 20          	add    rsp,0x20
ffff800000802cb8:	5b                   	pop    rbx
ffff800000802cb9:	41 5f                	pop    r15
ffff800000802cbb:	5d                   	pop    rbp
ffff800000802cbc:	c3                   	ret    

ffff800000802cbd <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:391
int check_page(int num){
ffff800000802cbd:	f3 0f 1e fa          	endbr64 
ffff800000802cc1:	55                   	push   rbp
ffff800000802cc2:	48 89 e5             	mov    rbp,rsp
ffff800000802cc5:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802cc5 <check_page+0x8>
ffff800000802ccc:	49 bb 6b ad 11 00 00 	movabs r11,0x11ad6b
ffff800000802cd3:	00 00 00 
ffff800000802cd6:	4c 01 da             	add    rdx,r11
ffff800000802cd9:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:392
    int n=num/32;
ffff800000802cdc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802cdf:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802ce2:	85 c0                	test   eax,eax
ffff800000802ce4:	0f 48 c1             	cmovs  eax,ecx
ffff800000802ce7:	c1 f8 05             	sar    eax,0x5
ffff800000802cea:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:393
    int r=num%32;
ffff800000802ced:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802cf0:	89 c1                	mov    ecx,eax
ffff800000802cf2:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802cf5:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802cf8:	01 c8                	add    eax,ecx
ffff800000802cfa:	83 e0 1f             	and    eax,0x1f
ffff800000802cfd:	29 c8                	sub    eax,ecx
ffff800000802cff:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:394
    int bit=page_map[n]&(1<<r);
ffff800000802d02:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802d09:	ff ff ff 
ffff800000802d0c:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802d10:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802d13:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802d16:	48 98                	cdqe   
ffff800000802d18:	48 c1 e0 02          	shl    rax,0x2
ffff800000802d1c:	48 01 d0             	add    rax,rdx
ffff800000802d1f:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802d21:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802d24:	be 01 00 00 00       	mov    esi,0x1
ffff800000802d29:	89 c1                	mov    ecx,eax
ffff800000802d2b:	d3 e6                	shl    esi,cl
ffff800000802d2d:	89 f0                	mov    eax,esi
ffff800000802d2f:	21 d0                	and    eax,edx
ffff800000802d31:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:395
    return bit;
ffff800000802d34:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:396
}
ffff800000802d37:	5d                   	pop    rbp
ffff800000802d38:	c3                   	ret    

ffff800000802d39 <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:400
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
ffff800000802d39:	f3 0f 1e fa          	endbr64 
ffff800000802d3d:	55                   	push   rbp
ffff800000802d3e:	48 89 e5             	mov    rbp,rsp
ffff800000802d41:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802d41 <get_phyaddr+0x8>
ffff800000802d48:	49 bb ef ac 11 00 00 	movabs r11,0x11acef
ffff800000802d4f:	00 00 00 
ffff800000802d52:	4c 01 d8             	add    rax,r11
ffff800000802d55:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:401
    if(num==-1)return -1;
ffff800000802d58:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
ffff800000802d5c:	75 07                	jne    ffff800000802d65 <get_phyaddr+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:401 (discriminator 1)
ffff800000802d5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000802d63:	eb 06                	jmp    ffff800000802d6b <get_phyaddr+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:402
    return num*0x1000;
ffff800000802d65:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802d68:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:403
}
ffff800000802d6b:	5d                   	pop    rbp
ffff800000802d6c:	c3                   	ret    

ffff800000802d6d <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:406

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
ffff800000802d6d:	f3 0f 1e fa          	endbr64 
ffff800000802d71:	55                   	push   rbp
ffff800000802d72:	48 89 e5             	mov    rbp,rsp
ffff800000802d75:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802d75 <set_page_item+0x8>
ffff800000802d7c:	49 bb bb ac 11 00 00 	movabs r11,0x11acbb
ffff800000802d83:	00 00 00 
ffff800000802d86:	4c 01 d8             	add    rax,r11
ffff800000802d89:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000802d8d:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000802d90:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:407
    *item_addr=0;
ffff800000802d93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802d97:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:408
    *item_addr|=phy_addr&0xfffff000;
ffff800000802d9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802da2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802da5:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802da8:	89 c0                	mov    eax,eax
ffff800000802daa:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000802daf:	48 09 c2             	or     rdx,rax
ffff800000802db2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802db6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:409
    *item_addr|=attr;
ffff800000802db9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802dbd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802dc0:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffff800000802dc3:	48 98                	cdqe   
ffff800000802dc5:	48 09 c2             	or     rdx,rax
ffff800000802dc8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802dcc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:410
}
ffff800000802dcf:	90                   	nop
ffff800000802dd0:	5d                   	pop    rbp
ffff800000802dd1:	c3                   	ret    

ffff800000802dd2 <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:412
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
ffff800000802dd2:	f3 0f 1e fa          	endbr64 
ffff800000802dd6:	55                   	push   rbp
ffff800000802dd7:	48 89 e5             	mov    rbp,rsp
ffff800000802dda:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802dda <set_1gb_pdpt+0x8>
ffff800000802de1:	49 bb 56 ac 11 00 00 	movabs r11,0x11ac56
ffff800000802de8:	00 00 00 
ffff800000802deb:	4c 01 d8             	add    rax,r11
ffff800000802dee:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802df2:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802df5:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:413
    *ppdpt=0;
ffff800000802df8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802dfc:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:414
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
ffff800000802e03:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e07:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e0a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802e0d:	0c 81                	or     al,0x81
ffff800000802e0f:	89 c0                	mov    eax,eax
ffff800000802e11:	48 09 c2             	or     rdx,rax
ffff800000802e14:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e18:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:415
    unsigned int hipa=pa&0xffffc0000000ul;
ffff800000802e1b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802e1e:	25 00 00 00 c0       	and    eax,0xc0000000
ffff800000802e23:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:416
    *ppdpt|=hipa;
ffff800000802e26:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e2a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e2d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802e30:	48 09 c2             	or     rdx,rax
ffff800000802e33:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e37:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:417
}
ffff800000802e3a:	90                   	nop
ffff800000802e3b:	5d                   	pop    rbp
ffff800000802e3c:	c3                   	ret    

ffff800000802e3d <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:419
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
ffff800000802e3d:	f3 0f 1e fa          	endbr64 
ffff800000802e41:	55                   	push   rbp
ffff800000802e42:	48 89 e5             	mov    rbp,rsp
ffff800000802e45:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802e45 <set_2mb_pde+0x8>
ffff800000802e4c:	49 bb eb ab 11 00 00 	movabs r11,0x11abeb
ffff800000802e53:	00 00 00 
ffff800000802e56:	4c 01 d8             	add    rax,r11
ffff800000802e59:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802e5d:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802e60:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:420
    *pde=0;
ffff800000802e63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e67:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:421
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
ffff800000802e6e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e72:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e75:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802e78:	0d 81 10 00 00       	or     eax,0x1081
ffff800000802e7d:	48 98                	cdqe   
ffff800000802e7f:	48 09 c2             	or     rdx,rax
ffff800000802e82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e86:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:422
    unsigned int hipa=pa&0xffc00000;
ffff800000802e89:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802e8c:	25 00 00 c0 ff       	and    eax,0xffc00000
ffff800000802e91:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:423
    *pde|=hipa;
ffff800000802e94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e98:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e9b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802e9e:	48 09 c2             	or     rdx,rax
ffff800000802ea1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802ea5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:424
}
ffff800000802ea8:	90                   	nop
ffff800000802ea9:	5d                   	pop    rbp
ffff800000802eaa:	c3                   	ret    

ffff800000802eab <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:445
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
ffff800000802eab:	f3 0f 1e fa          	endbr64 
ffff800000802eaf:	55                   	push   rbp
ffff800000802eb0:	48 89 e5             	mov    rbp,rsp
ffff800000802eb3:	41 57                	push   r15
ffff800000802eb5:	53                   	push   rbx
ffff800000802eb6:	48 83 ec 20          	sub    rsp,0x20
ffff800000802eba:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802eba <req_page_at+0xf>
ffff800000802ec1:	49 bb 76 ab 11 00 00 	movabs r11,0x11ab76
ffff800000802ec8:	00 00 00 
ffff800000802ecb:	4c 01 db             	add    rbx,r11
ffff800000802ece:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802ed2:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:446
    if(base==0)//不指定地址
ffff800000802ed5:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000802eda:	75 32                	jne    ffff800000802f0e <req_page_at+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:448
    {
        return get_phyaddr(req_a_page());
ffff800000802edc:	49 89 df             	mov    r15,rbx
ffff800000802edf:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802ee4:	48 ba f1 4f ee ff ff 	movabs rdx,0xffffffffffee4ff1
ffff800000802eeb:	ff ff ff 
ffff800000802eee:	48 01 da             	add    rdx,rbx
ffff800000802ef1:	ff d2                	call   rdx
ffff800000802ef3:	89 c7                	mov    edi,eax
ffff800000802ef5:	49 89 df             	mov    r15,rbx
ffff800000802ef8:	48 b8 09 53 ee ff ff 	movabs rax,0xffffffffffee5309
ffff800000802eff:	ff ff ff 
ffff800000802f02:	48 01 d8             	add    rax,rbx
ffff800000802f05:	ff d0                	call   rax
ffff800000802f07:	48 98                	cdqe   
ffff800000802f09:	e9 c6 00 00 00       	jmp    ffff800000802fd4 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
ffff800000802f0e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802f12:	89 c2                	mov    edx,eax
ffff800000802f14:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000802f17:	89 c6                	mov    esi,eax
ffff800000802f19:	89 d7                	mov    edi,edx
ffff800000802f1b:	49 89 df             	mov    r15,rbx
ffff800000802f1e:	48 b8 7e 56 ee ff ff 	movabs rax,0xffffffffffee567e
ffff800000802f25:	ff ff ff 
ffff800000802f28:	48 01 d8             	add    rax,rbx
ffff800000802f2b:	ff d0                	call   rax
ffff800000802f2d:	85 c0                	test   eax,eax
ffff800000802f2f:	75 0c                	jne    ffff800000802f3d <req_page_at+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450 (discriminator 1)
ffff800000802f31:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802f38:	e9 97 00 00 00       	jmp    ffff800000802fd4 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:451
    int pgni=base/4096;
ffff800000802f3d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802f41:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802f45:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:452
    int pgi=pgni/32;
ffff800000802f48:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802f4b:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000802f4e:	85 c0                	test   eax,eax
ffff800000802f50:	0f 48 c2             	cmovs  eax,edx
ffff800000802f53:	c1 f8 05             	sar    eax,0x5
ffff800000802f56:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453
    int pgj=pgni%32;
ffff800000802f59:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802f5c:	99                   	cdq    
ffff800000802f5d:	c1 ea 1b             	shr    edx,0x1b
ffff800000802f60:	01 d0                	add    eax,edx
ffff800000802f62:	83 e0 1f             	and    eax,0x1f
ffff800000802f65:	29 d0                	sub    eax,edx
ffff800000802f67:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454
    for(int i=0;i<pgn;i++)
ffff800000802f6a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802f71:	eb 54                	jmp    ffff800000802fc7 <req_page_at+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
ffff800000802f73:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802f7a:	ff ff ff 
ffff800000802f7d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802f81:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f84:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802f87:	48 98                	cdqe   
ffff800000802f89:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f8d:	48 01 d0             	add    rax,rdx
ffff800000802f90:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802f92:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802f95:	be 01 00 00 00       	mov    esi,0x1
ffff800000802f9a:	89 c1                	mov    ecx,eax
ffff800000802f9c:	d3 e6                	shl    esi,cl
ffff800000802f9e:	89 f0                	mov    eax,esi
ffff800000802fa0:	89 c6                	mov    esi,eax
ffff800000802fa2:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802fa9:	ff ff ff 
ffff800000802fac:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802fb0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802fb3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802fb6:	48 98                	cdqe   
ffff800000802fb8:	48 c1 e0 02          	shl    rax,0x2
ffff800000802fbc:	48 01 c8             	add    rax,rcx
ffff800000802fbf:	09 f2                	or     edx,esi
ffff800000802fc1:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454 (discriminator 3)
    for(int i=0;i<pgn;i++)
ffff800000802fc3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454 (discriminator 1)
ffff800000802fc7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802fca:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000802fcd:	7c a4                	jl     ffff800000802f73 <req_page_at+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:458
    }
    return 0;
ffff800000802fcf:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:460

}
ffff800000802fd4:	48 83 c4 20          	add    rsp,0x20
ffff800000802fd8:	5b                   	pop    rbx
ffff800000802fd9:	41 5f                	pop    r15
ffff800000802fdb:	5d                   	pop    rbp
ffff800000802fdc:	c3                   	ret    

ffff800000802fdd <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:462
int chk_vm(int base, int pgn)
{
ffff800000802fdd:	f3 0f 1e fa          	endbr64 
ffff800000802fe1:	55                   	push   rbp
ffff800000802fe2:	48 89 e5             	mov    rbp,rsp
ffff800000802fe5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802fe5 <chk_vm+0x8>
ffff800000802fec:	49 bb 4b aa 11 00 00 	movabs r11,0x11aa4b
ffff800000802ff3:	00 00 00 
ffff800000802ff6:	4c 01 d8             	add    rax,r11
ffff800000802ff9:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000802ffc:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463
    int *pdet=0;
ffff800000802fff:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000803006:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:464
    asm volatile("mov %%cr3,%0":"=r"(pdet));
ffff800000803007:	0f 20 d8             	mov    rax,cr3
ffff80000080300a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
ffff80000080300e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803011:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803017:	85 c0                	test   eax,eax
ffff800000803019:	0f 48 c2             	cmovs  eax,edx
ffff80000080301c:	c1 f8 15             	sar    eax,0x15
ffff80000080301f:	48 98                	cdqe   
ffff800000803021:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803028:	00 
ffff800000803029:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080302d:	48 01 d0             	add    rax,rdx
ffff800000803030:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803032:	89 c0                	mov    eax,eax
ffff800000803034:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000803039:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff80000080303d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803040:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803046:	85 c0                	test   eax,eax
ffff800000803048:	0f 48 c2             	cmovs  eax,edx
ffff80000080304b:	c1 f8 15             	sar    eax,0x15
ffff80000080304e:	48 98                	cdqe   
ffff800000803050:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803057:	00 
ffff800000803058:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080305c:	48 01 d0             	add    rax,rdx
ffff80000080305f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803061:	83 e0 01             	and    eax,0x1
ffff800000803064:	85 c0                	test   eax,eax
ffff800000803066:	74 38                	je     ffff8000008030a0 <chk_vm+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
ffff800000803068:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080306b:	99                   	cdq    
ffff80000080306c:	c1 ea 0b             	shr    edx,0xb
ffff80000080306f:	01 d0                	add    eax,edx
ffff800000803071:	25 ff ff 1f 00       	and    eax,0x1fffff
ffff800000803076:	29 d0                	sub    eax,edx
ffff800000803078:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000080307e:	85 c0                	test   eax,eax
ffff800000803080:	0f 48 c2             	cmovs  eax,edx
ffff800000803083:	c1 f8 0c             	sar    eax,0xc
ffff800000803086:	48 98                	cdqe   
ffff800000803088:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080308f:	00 
ffff800000803090:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803094:	48 01 d0             	add    rax,rdx
ffff800000803097:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803099:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff80000080309c:	85 c0                	test   eax,eax
ffff80000080309e:	75 07                	jne    ffff8000008030a7 <chk_vm+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:469
    {
        return -1;
ffff8000008030a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008030a5:	eb 05                	jmp    ffff8000008030ac <chk_vm+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:471
    }
    return 0;
ffff8000008030a7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:472
}
ffff8000008030ac:	5d                   	pop    rbp
ffff8000008030ad:	c3                   	ret    

ffff8000008030ae <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:475
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
ffff8000008030ae:	f3 0f 1e fa          	endbr64 
ffff8000008030b2:	55                   	push   rbp
ffff8000008030b3:	48 89 e5             	mov    rbp,rsp
ffff8000008030b6:	41 57                	push   r15
ffff8000008030b8:	53                   	push   rbx
ffff8000008030b9:	48 83 ec 20          	sub    rsp,0x20
ffff8000008030bd:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008030bd <is_pgs_ava+0xf>
ffff8000008030c4:	49 bb 73 a9 11 00 00 	movabs r11,0x11a973
ffff8000008030cb:	00 00 00 
ffff8000008030ce:	4c 01 db             	add    rbx,r11
ffff8000008030d1:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008030d4:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:476
    int pgi=base/4096;
ffff8000008030d7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008030da:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008030e0:	85 c0                	test   eax,eax
ffff8000008030e2:	0f 48 c2             	cmovs  eax,edx
ffff8000008030e5:	c1 f8 0c             	sar    eax,0xc
ffff8000008030e8:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477
    for(int i=0;i<pgn;i++)
ffff8000008030eb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008030f2:	eb 2b                	jmp    ffff80000080311f <is_pgs_ava+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479
    {
        if(check_page(pgi+i)!=0)return 0;
ffff8000008030f4:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008030f7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008030fa:	01 d0                	add    eax,edx
ffff8000008030fc:	89 c7                	mov    edi,eax
ffff8000008030fe:	49 89 df             	mov    r15,rbx
ffff800000803101:	48 b8 8d 52 ee ff ff 	movabs rax,0xffffffffffee528d
ffff800000803108:	ff ff ff 
ffff80000080310b:	48 01 d8             	add    rax,rbx
ffff80000080310e:	ff d0                	call   rax
ffff800000803110:	85 c0                	test   eax,eax
ffff800000803112:	74 07                	je     ffff80000080311b <is_pgs_ava+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479 (discriminator 1)
ffff800000803114:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803119:	eb 11                	jmp    ffff80000080312c <is_pgs_ava+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477 (discriminator 2)
    for(int i=0;i<pgn;i++)
ffff80000080311b:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477 (discriminator 1)
ffff80000080311f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803122:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000803125:	7c cd                	jl     ffff8000008030f4 <is_pgs_ava+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481
    }
    return 1;
ffff800000803127:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:483

}
ffff80000080312c:	48 83 c4 20          	add    rsp,0x20
ffff800000803130:	5b                   	pop    rbx
ffff800000803131:	41 5f                	pop    r15
ffff800000803133:	5d                   	pop    rbp
ffff800000803134:	c3                   	ret    

ffff800000803135 <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:24
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
ffff800000803135:	f3 0f 1e fa          	endbr64 
ffff800000803139:	55                   	push   rbp
ffff80000080313a:	48 89 e5             	mov    rbp,rsp
ffff80000080313d:	41 57                	push   r15
ffff80000080313f:	48 83 ec 78          	sub    rsp,0x78
ffff800000803143:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803143 <make_dentry+0xe>
ffff80000080314a:	49 bb ed a8 11 00 00 	movabs r11,0x11a8ed
ffff800000803151:	00 00 00 
ffff800000803154:	4c 01 d8             	add    rax,r11
ffff800000803157:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff80000080315b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080315f:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
ffff800000803162:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffff800000803166:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:25
    strcpy(d->name,name);
ffff80000080316a:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080316e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000803171:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffff800000803175:	48 89 ce             	mov    rsi,rcx
ffff800000803178:	48 89 d7             	mov    rdi,rdx
ffff80000080317b:	49 89 c7             	mov    r15,rax
ffff80000080317e:	48 ba 81 51 ef ff ff 	movabs rdx,0xffffffffffef5181
ffff800000803185:	ff ff ff 
ffff800000803188:	48 01 c2             	add    rdx,rax
ffff80000080318b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:26
    d->name_length=namelen;
ffff80000080318d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803191:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000803194:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:28
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
ffff800000803197:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080319b:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080319f:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:29
    list_init(&d->subdirs_list);
ffff8000008031a3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008031a7:	48 83 c0 28          	add    rax,0x28
ffff8000008031ab:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    struct List * next;
};

__attribute__((always_inline)) inline void list_init(struct List * list)
{
    list->prev = NULL;
ffff8000008031af:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008031b3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff8000008031ba:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008031be:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008031c5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff8000008031c6:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:30
    list_init(&d->child_node);
ffff8000008031c7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008031cb:	48 83 c0 10          	add    rax,0x10
ffff8000008031cf:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff8000008031d3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008031d7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff8000008031de:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008031e2:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008031e9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff8000008031ea:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:31
    d->child_node.data=d;
ffff8000008031eb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008031ef:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008031f3:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:32
    d->parent=parent;
ffff8000008031f7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008031fb:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff8000008031ff:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:33
    list_add(&parent->subdirs_list,&d->child_node);
ffff800000803203:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803207:	48 83 c0 10          	add    rax,0x10
ffff80000080320b:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080320f:	48 83 c2 28          	add    rdx,0x28
ffff800000803213:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000803217:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
        new->next->prev = new;
    entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    struct List* p=entry;
ffff80000080321b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080321f:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff800000803223:	eb 21                	jmp    ffff800000803246 <make_dentry+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        if(p->data==new->data)
ffff800000803225:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803229:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080322d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803231:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803235:	48 39 c2             	cmp    rdx,rax
ffff800000803238:	74 7c                	je     ffff8000008032b6 <make_dentry+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080323a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080323e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803242:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff800000803246:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080324a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080324e:	48 85 c0             	test   rax,rax
ffff800000803251:	74 0e                	je     ffff800000803261 <make_dentry+0x12c>
ffff800000803253:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803257:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080325b:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080325f:	75 c4                	jne    ffff800000803225 <make_dentry+0xf0>
ffff800000803261:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803265:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff800000803269:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080326d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->next = entry->next;
ffff800000803271:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803275:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000803279:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080327d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    new->prev = entry;
ffff800000803281:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803285:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803289:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
    if(new->next)
ffff80000080328c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803290:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803294:	48 85 c0             	test   rax,rax
ffff800000803297:	74 0f                	je     ffff8000008032a8 <make_dentry+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
        new->next->prev = new;
ffff800000803299:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080329d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008032a1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008032a5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
    entry->next = new;
ffff8000008032a8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008032ac:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008032b0:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:31
}
ffff8000008032b4:	eb 01                	jmp    ffff8000008032b7 <make_dentry+0x182>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
            return;
ffff8000008032b6:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
}
ffff8000008032b7:	90                   	nop
ffff8000008032b8:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008032bc:	c9                   	leave  
ffff8000008032bd:	c3                   	ret    

ffff8000008032be <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,struct super_block* sb){
ffff8000008032be:	f3 0f 1e fa          	endbr64 
ffff8000008032c2:	55                   	push   rbp
ffff8000008032c3:	48 89 e5             	mov    rbp,rsp
ffff8000008032c6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008032c6 <make_inode+0x8>
ffff8000008032cd:	49 bb 6a a7 11 00 00 	movabs r11,0x11a76a
ffff8000008032d4:	00 00 00 
ffff8000008032d7:	4c 01 d8             	add    rax,r11
ffff8000008032da:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008032de:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008032e2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008032e6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff8000008032ea:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
    i->f_ops=fops;
ffff8000008032ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008032f2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008032f6:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:37
    i->attribute=attr;
ffff8000008032fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008032fe:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803302:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    i->sb=sb;
ffff800000803306:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080330a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080330e:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    i->file_size=0;
ffff800000803312:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803316:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    i->inode_ops=iops;
ffff80000080331d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803321:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000803325:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
}
ffff800000803329:	90                   	nop
ffff80000080332a:	5d                   	pop    rbp
ffff80000080332b:	c3                   	ret    

ffff80000080332c <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* dir_dev,struct file_operations* fops){
ffff80000080332c:	f3 0f 1e fa          	endbr64 
ffff800000803330:	55                   	push   rbp
ffff800000803331:	48 89 e5             	mov    rbp,rsp
ffff800000803334:	41 57                	push   r15
ffff800000803336:	53                   	push   rbx
ffff800000803337:	48 83 ec 30          	sub    rsp,0x30
ffff80000080333b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080333b <make_devf+0xf>
ffff800000803342:	49 bb f5 a6 11 00 00 	movabs r11,0x11a6f5
ffff800000803349:	00 00 00 
ffff80000080334c:	4c 01 db             	add    rbx,r11
ffff80000080334f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000803353:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000803357:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080335b:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff80000080335f:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:43
    make_dentry(d,name, strlen(name),dir_dev,&dev_dir_dops);
ffff800000803363:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803367:	48 89 c7             	mov    rdi,rax
ffff80000080336a:	49 89 df             	mov    r15,rbx
ffff80000080336d:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff800000803374:	ff ff ff 
ffff800000803377:	48 01 d8             	add    rax,rbx
ffff80000080337a:	ff d0                	call   rax
ffff80000080337c:	89 c7                	mov    edi,eax
ffff80000080337e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803382:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000803386:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080338a:	48 b9 c0 ff ff ff ff 	movabs rcx,0xffffffffffffffc0
ffff800000803391:	ff ff ff 
ffff800000803394:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803398:	49 89 c8             	mov    r8,rcx
ffff80000080339b:	48 89 d1             	mov    rcx,rdx
ffff80000080339e:	89 fa                	mov    edx,edi
ffff8000008033a0:	48 89 c7             	mov    rdi,rax
ffff8000008033a3:	49 89 df             	mov    r15,rbx
ffff8000008033a6:	48 b8 05 57 ee ff ff 	movabs rax,0xffffffffffee5705
ffff8000008033ad:	ff ff ff 
ffff8000008033b0:	48 01 d8             	add    rax,rbx
ffff8000008033b3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:44
    d->dir_inode=i;
ffff8000008033b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008033b9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008033bd:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:45
    make_inode(i,dir_dev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
ffff8000008033c1:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff8000008033c8:	ff ff ff 
ffff8000008033cb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008033cf:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008033d2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008033d6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008033da:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008033de:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008033e2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008033e6:	49 89 c8             	mov    r8,rcx
ffff8000008033e9:	b9 04 00 00 00       	mov    ecx,0x4
ffff8000008033ee:	48 89 c7             	mov    rdi,rax
ffff8000008033f1:	49 89 df             	mov    r15,rbx
ffff8000008033f4:	48 b8 8e 58 ee ff ff 	movabs rax,0xffffffffffee588e
ffff8000008033fb:	ff ff ff 
ffff8000008033fe:	48 01 d8             	add    rax,rbx
ffff800000803401:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
    // list_add(&dir_dev->subdirs_list,&d->child_node);//添加到/dev下
}
ffff800000803403:	90                   	nop
ffff800000803404:	48 83 c4 30          	add    rsp,0x30
ffff800000803408:	5b                   	pop    rbx
ffff800000803409:	41 5f                	pop    r15
ffff80000080340b:	5d                   	pop    rbp
ffff80000080340c:	c3                   	ret    

ffff80000080340d <init_devfs>:
init_devfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
struct dir_entry* ddev=NULL,*dmnt,*dconsole,*dhd0,*dtty,*dramdisk;
struct file ftty;
int init_devfs()
{
ffff80000080340d:	f3 0f 1e fa          	endbr64 
ffff800000803411:	55                   	push   rbp
ffff800000803412:	48 89 e5             	mov    rbp,rsp
ffff800000803415:	41 57                	push   r15
ffff800000803417:	53                   	push   rbx
ffff800000803418:	48 83 ec 30          	sub    rsp,0x30
ffff80000080341c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080341c <init_devfs+0xf>
ffff800000803423:	49 bb 14 a6 11 00 00 	movabs r11,0x11a614
ffff80000080342a:	00 00 00 
ffff80000080342d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:57
    //创建dev文件夹
    ddev=(struct dir_entry*) kmalloc();
ffff800000803430:	49 89 df             	mov    r15,rbx
ffff800000803433:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803438:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080343f:	ff ff ff 
ffff800000803442:	48 01 da             	add    rdx,rbx
ffff800000803445:	ff d2                	call   rdx
ffff800000803447:	48 89 c2             	mov    rdx,rax
ffff80000080344a:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803451:	ff ff ff 
ffff800000803454:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803458:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:58
    struct index_node* idev=ddev+1;
ffff80000080345b:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803462:	ff ff ff 
ffff800000803465:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803469:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080346c:	48 83 c0 60          	add    rax,0x60
ffff800000803470:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:59
    ddev->name=idev+1;
ffff800000803474:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080347b:	ff ff ff 
ffff80000080347e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803482:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803485:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803489:	48 83 c2 40          	add    rdx,0x40
ffff80000080348d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:60
    make_dentry(ddev,"dev",3,root_sb->root,root_sb->root->dir_ops);
ffff800000803490:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000803497:	ff ff ff 
ffff80000080349a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080349e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008034a1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008034a4:	48 8b 48 58          	mov    rcx,QWORD PTR [rax+0x58]
ffff8000008034a8:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff8000008034af:	ff ff ff 
ffff8000008034b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008034b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008034b9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008034bc:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008034c3:	ff ff ff 
ffff8000008034c6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008034ca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008034cd:	49 89 c8             	mov    r8,rcx
ffff8000008034d0:	48 89 d1             	mov    rcx,rdx
ffff8000008034d3:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008034d8:	48 be 4e d6 ff ff ff 	movabs rsi,0xffffffffffffd64e
ffff8000008034df:	ff ff ff 
ffff8000008034e2:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff8000008034e6:	48 89 c7             	mov    rdi,rax
ffff8000008034e9:	49 89 df             	mov    r15,rbx
ffff8000008034ec:	48 b8 05 57 ee ff ff 	movabs rax,0xffffffffffee5705
ffff8000008034f3:	ff ff ff 
ffff8000008034f6:	48 01 d8             	add    rax,rbx
ffff8000008034f9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:61
    ddev->dir_inode=idev;
ffff8000008034fb:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803502:	ff ff ff 
ffff800000803505:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803509:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080350c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803510:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:62
    make_inode(idev,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff800000803514:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080351b:	ff ff ff 
ffff80000080351e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803522:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803525:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080352c:	ff ff ff 
ffff80000080352f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803533:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803536:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803539:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080353d:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000803541:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000803548:	ff ff ff 
ffff80000080354b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080354f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803552:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803555:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803559:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff80000080355d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803561:	49 89 c8             	mov    r8,rcx
ffff800000803564:	b9 02 00 00 00       	mov    ecx,0x2
ffff800000803569:	48 89 c7             	mov    rdi,rax
ffff80000080356c:	49 89 df             	mov    r15,rbx
ffff80000080356f:	48 b8 8e 58 ee ff ff 	movabs rax,0xffffffffffee588e
ffff800000803576:	ff ff ff 
ffff800000803579:	48 01 d8             	add    rax,rbx
ffff80000080357c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:63
    idev->private_index_info=ddev;
ffff80000080357e:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803585:	ff ff ff 
ffff800000803588:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080358c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080358f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803593:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:66

    //创建mnt文件夹
    dmnt=(struct dir_entry*) kmalloc();
ffff800000803597:	49 89 df             	mov    r15,rbx
ffff80000080359a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080359f:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff8000008035a6:	ff ff ff 
ffff8000008035a9:	48 01 da             	add    rdx,rbx
ffff8000008035ac:	ff d2                	call   rdx
ffff8000008035ae:	48 89 c2             	mov    rdx,rax
ffff8000008035b1:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff8000008035b8:	ff ff ff 
ffff8000008035bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008035bf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:67
    struct index_node* imnt=dmnt+1;
ffff8000008035c2:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff8000008035c9:	ff ff ff 
ffff8000008035cc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008035d0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008035d3:	48 83 c0 60          	add    rax,0x60
ffff8000008035d7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
    dmnt->name=imnt+1;
ffff8000008035db:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff8000008035e2:	ff ff ff 
ffff8000008035e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008035e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008035ec:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008035f0:	48 83 c2 40          	add    rdx,0x40
ffff8000008035f4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
ffff8000008035f7:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff8000008035fe:	ff ff ff 
ffff800000803601:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803605:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803608:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080360b:	48 8b 48 58          	mov    rcx,QWORD PTR [rax+0x58]
ffff80000080360f:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000803616:	ff ff ff 
ffff800000803619:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080361d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803620:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803623:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff80000080362a:	ff ff ff 
ffff80000080362d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803631:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803634:	49 89 c8             	mov    r8,rcx
ffff800000803637:	48 89 d1             	mov    rcx,rdx
ffff80000080363a:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080363f:	48 be 52 d6 ff ff ff 	movabs rsi,0xffffffffffffd652
ffff800000803646:	ff ff ff 
ffff800000803649:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff80000080364d:	48 89 c7             	mov    rdi,rax
ffff800000803650:	49 89 df             	mov    r15,rbx
ffff800000803653:	48 b8 05 57 ee ff ff 	movabs rax,0xffffffffffee5705
ffff80000080365a:	ff ff ff 
ffff80000080365d:	48 01 d8             	add    rax,rbx
ffff800000803660:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    dmnt->dir_inode=imnt;
ffff800000803662:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803669:	ff ff ff 
ffff80000080366c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803670:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803673:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803677:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff80000080367b:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000803682:	ff ff ff 
ffff800000803685:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803689:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080368c:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000803693:	ff ff ff 
ffff800000803696:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080369a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080369d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036a0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008036a4:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008036a8:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff8000008036af:	ff ff ff 
ffff8000008036b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036bc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008036c0:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008036c4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008036c8:	49 89 c8             	mov    r8,rcx
ffff8000008036cb:	b9 02 00 00 00       	mov    ecx,0x2
ffff8000008036d0:	48 89 c7             	mov    rdi,rax
ffff8000008036d3:	49 89 df             	mov    r15,rbx
ffff8000008036d6:	48 b8 8e 58 ee ff ff 	movabs rax,0xffffffffffee588e
ffff8000008036dd:	ff ff ff 
ffff8000008036e0:	48 01 d8             	add    rax,rbx
ffff8000008036e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    imnt->private_index_info=dmnt;
ffff8000008036e5:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff8000008036ec:	ff ff ff 
ffff8000008036ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036f3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008036f6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008036fa:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77


    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc();
ffff8000008036fe:	49 89 df             	mov    r15,rbx
ffff800000803701:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803706:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080370d:	ff ff ff 
ffff800000803710:	48 01 da             	add    rdx,rbx
ffff800000803713:	ff d2                	call   rdx
ffff800000803715:	48 89 c2             	mov    rdx,rax
ffff800000803718:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff80000080371f:	ff ff ff 
ffff800000803722:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803726:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    struct index_node* iconsole=dconsole+1;
ffff800000803729:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000803730:	ff ff ff 
ffff800000803733:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803737:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080373a:	48 83 c0 60          	add    rax,0x60
ffff80000080373e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    dconsole->name=iconsole+1;
ffff800000803742:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000803749:	ff ff ff 
ffff80000080374c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803750:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803753:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000803757:	48 83 c2 40          	add    rdx,0x40
ffff80000080375b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    iconsole->dev=0x10000;
ffff80000080375e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803762:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:81
    make_devf(dconsole,iconsole,"console",ddev,&devfs_fops);
ffff800000803768:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080376f:	ff ff ff 
ffff800000803772:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803776:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803779:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000803780:	ff ff ff 
ffff800000803783:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803787:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080378a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff80000080378e:	48 b9 e8 fd ff ff ff 	movabs rcx,0xfffffffffffffde8
ffff800000803795:	ff ff ff 
ffff800000803798:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080379c:	49 89 c8             	mov    r8,rcx
ffff80000080379f:	48 89 d1             	mov    rcx,rdx
ffff8000008037a2:	48 ba 56 d6 ff ff ff 	movabs rdx,0xffffffffffffd656
ffff8000008037a9:	ff ff ff 
ffff8000008037ac:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff8000008037b0:	48 89 c7             	mov    rdi,rax
ffff8000008037b3:	49 89 df             	mov    r15,rbx
ffff8000008037b6:	48 b8 fc 58 ee ff ff 	movabs rax,0xffffffffffee58fc
ffff8000008037bd:	ff ff ff 
ffff8000008037c0:	48 01 d8             	add    rax,rbx
ffff8000008037c3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:83
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc();
ffff8000008037c5:	49 89 df             	mov    r15,rbx
ffff8000008037c8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008037cd:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff8000008037d4:	ff ff ff 
ffff8000008037d7:	48 01 da             	add    rdx,rbx
ffff8000008037da:	ff d2                	call   rdx
ffff8000008037dc:	48 89 c2             	mov    rdx,rax
ffff8000008037df:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff8000008037e6:	ff ff ff 
ffff8000008037e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008037ed:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:84
    struct index_node* ihd0=dhd0+1;
ffff8000008037f0:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff8000008037f7:	ff ff ff 
ffff8000008037fa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008037fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803801:	48 83 c0 60          	add    rax,0x60
ffff800000803805:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:85
    dhd0->name=ihd0+1;
ffff800000803809:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803810:	ff ff ff 
ffff800000803813:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803817:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080381a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080381e:	48 83 c2 40          	add    rdx,0x40
ffff800000803822:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87
    extern int dev_hd;
    ihd0->dev=dev_hd<<8;
ffff800000803825:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080382c:	ff ff ff 
ffff80000080382f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803833:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803835:	c1 e0 08             	shl    eax,0x8
ffff800000803838:	89 c2                	mov    edx,eax
ffff80000080383a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080383e:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    make_devf(dhd0,ihd0,"hd0",ddev,&devfs_fops);
ffff800000803842:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803849:	ff ff ff 
ffff80000080384c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803850:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803853:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080385a:	ff ff ff 
ffff80000080385d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803861:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803864:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000803868:	48 b9 e8 fd ff ff ff 	movabs rcx,0xfffffffffffffde8
ffff80000080386f:	ff ff ff 
ffff800000803872:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803876:	49 89 c8             	mov    r8,rcx
ffff800000803879:	48 89 d1             	mov    rcx,rdx
ffff80000080387c:	48 ba 5e d6 ff ff ff 	movabs rdx,0xffffffffffffd65e
ffff800000803883:	ff ff ff 
ffff800000803886:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080388a:	48 89 c7             	mov    rdi,rax
ffff80000080388d:	49 89 df             	mov    r15,rbx
ffff800000803890:	48 b8 fc 58 ee ff ff 	movabs rax,0xffffffffffee58fc
ffff800000803897:	ff ff ff 
ffff80000080389a:	48 01 d8             	add    rax,rbx
ffff80000080389d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:90
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc();
ffff80000080389f:	49 89 df             	mov    r15,rbx
ffff8000008038a2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008038a7:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff8000008038ae:	ff ff ff 
ffff8000008038b1:	48 01 da             	add    rdx,rbx
ffff8000008038b4:	ff d2                	call   rdx
ffff8000008038b6:	48 89 c2             	mov    rdx,rax
ffff8000008038b9:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff8000008038c0:	ff ff ff 
ffff8000008038c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038c7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:91
    struct index_node* itty=dtty+1;
ffff8000008038ca:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff8000008038d1:	ff ff ff 
ffff8000008038d4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038db:	48 83 c0 60          	add    rax,0x60
ffff8000008038df:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
    dtty->name=itty+1;
ffff8000008038e3:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff8000008038ea:	ff ff ff 
ffff8000008038ed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038f1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038f4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008038f8:	48 83 c2 40          	add    rdx,0x40
ffff8000008038fc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:93
    itty->dev|=0x10000;
ffff8000008038ff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803903:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff800000803907:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080390b:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:94
    make_devf(dtty,itty,"tty",ddev,&devfs_fops);
ffff80000080390f:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803916:	ff ff ff 
ffff800000803919:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080391d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803920:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff800000803927:	ff ff ff 
ffff80000080392a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080392e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803931:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff800000803935:	48 b9 e8 fd ff ff ff 	movabs rcx,0xfffffffffffffde8
ffff80000080393c:	ff ff ff 
ffff80000080393f:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803943:	49 89 c8             	mov    r8,rcx
ffff800000803946:	48 89 d1             	mov    rcx,rdx
ffff800000803949:	48 ba 62 d6 ff ff ff 	movabs rdx,0xffffffffffffd662
ffff800000803950:	ff ff ff 
ffff800000803953:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803957:	48 89 c7             	mov    rdi,rax
ffff80000080395a:	49 89 df             	mov    r15,rbx
ffff80000080395d:	48 b8 fc 58 ee ff ff 	movabs rax,0xffffffffffee58fc
ffff800000803964:	ff ff ff 
ffff800000803967:	48 01 d8             	add    rax,rbx
ffff80000080396a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:96
    //初始化一下
    tty_fops.open(itty,&ftty);
ffff80000080396c:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000803973:	ff ff ff 
ffff800000803976:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080397a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080397d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803981:	48 b9 38 fe ff ff ff 	movabs rcx,0xfffffffffffffe38
ffff800000803988:	ff ff ff 
ffff80000080398b:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080398f:	48 89 ce             	mov    rsi,rcx
ffff800000803992:	48 89 c7             	mov    rdi,rax
ffff800000803995:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:99

    //ramdisk- ramdisk.c
    dramdisk= (struct dir_entry *) kmalloc();
ffff800000803997:	49 89 df             	mov    r15,rbx
ffff80000080399a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080399f:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff8000008039a6:	ff ff ff 
ffff8000008039a9:	48 01 da             	add    rdx,rbx
ffff8000008039ac:	ff d2                	call   rdx
ffff8000008039ae:	48 89 c2             	mov    rdx,rax
ffff8000008039b1:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff8000008039b8:	ff ff ff 
ffff8000008039bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039bf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:100
    struct index_node* iramdisk=dramdisk+1;
ffff8000008039c2:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff8000008039c9:	ff ff ff 
ffff8000008039cc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039d0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039d3:	48 83 c0 60          	add    rax,0x60
ffff8000008039d7:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:101
    dramdisk->name=iramdisk+1;
ffff8000008039db:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff8000008039e2:	ff ff ff 
ffff8000008039e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039ec:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008039f0:	48 83 c2 40          	add    rdx,0x40
ffff8000008039f4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:102
    iramdisk->dev=dev_ramdisk<<8;
ffff8000008039f7:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff8000008039fe:	ff ff ff 
ffff800000803a01:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a05:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803a07:	c1 e0 08             	shl    eax,0x8
ffff800000803a0a:	89 c2                	mov    edx,eax
ffff800000803a0c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803a10:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:103
    make_devf(dramdisk,iramdisk,"ram",ddev,&devfs_fops);
ffff800000803a14:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803a1b:	ff ff ff 
ffff800000803a1e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a22:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803a25:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803a2c:	ff ff ff 
ffff800000803a2f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a33:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a36:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803a3a:	48 b9 e8 fd ff ff ff 	movabs rcx,0xfffffffffffffde8
ffff800000803a41:	ff ff ff 
ffff800000803a44:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803a48:	49 89 c8             	mov    r8,rcx
ffff800000803a4b:	48 89 d1             	mov    rcx,rdx
ffff800000803a4e:	48 ba 66 d6 ff ff ff 	movabs rdx,0xffffffffffffd666
ffff800000803a55:	ff ff ff 
ffff800000803a58:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803a5c:	48 89 c7             	mov    rdi,rax
ffff800000803a5f:	49 89 df             	mov    r15,rbx
ffff800000803a62:	48 b8 fc 58 ee ff ff 	movabs rax,0xffffffffffee58fc
ffff800000803a69:	ff ff ff 
ffff800000803a6c:	48 01 d8             	add    rax,rbx
ffff800000803a6f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:105

}
ffff800000803a71:	90                   	nop
ffff800000803a72:	48 83 c4 30          	add    rsp,0x30
ffff800000803a76:	5b                   	pop    rbx
ffff800000803a77:	41 5f                	pop    r15
ffff800000803a79:	5d                   	pop    rbp
ffff800000803a7a:	c3                   	ret    

ffff800000803a7b <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:107
//
long open_dev(struct index_node * inode,struct file * filp){
ffff800000803a7b:	f3 0f 1e fa          	endbr64 
ffff800000803a7f:	55                   	push   rbp
ffff800000803a80:	48 89 e5             	mov    rbp,rsp
ffff800000803a83:	41 57                	push   r15
ffff800000803a85:	53                   	push   rbx
ffff800000803a86:	48 83 ec 20          	sub    rsp,0x20
ffff800000803a8a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803a8a <open_dev+0xf>
ffff800000803a91:	49 bb a6 9f 11 00 00 	movabs r11,0x119fa6
ffff800000803a98:	00 00 00 
ffff800000803a9b:	4c 01 db             	add    rbx,r11
ffff800000803a9e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803aa2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:109
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803aa6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803aaa:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803aae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803ab1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110
    char* p=name+ strlen(name)-1;
ffff800000803ab5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ab9:	48 89 c7             	mov    rdi,rax
ffff800000803abc:	49 89 df             	mov    r15,rbx
ffff800000803abf:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff800000803ac6:	ff ff ff 
ffff800000803ac9:	48 01 d8             	add    rax,rbx
ffff800000803acc:	ff d0                	call   rax
ffff800000803ace:	48 98                	cdqe   
ffff800000803ad0:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803ad4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ad8:	48 01 d0             	add    rax,rdx
ffff800000803adb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111
    for(;*p!='/'&&p>=name;p--);
ffff800000803adf:	eb 05                	jmp    ffff800000803ae6 <open_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111 (discriminator 3)
ffff800000803ae1:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111 (discriminator 1)
ffff800000803ae6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803aea:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803aed:	3c 2f                	cmp    al,0x2f
ffff800000803aef:	74 0a                	je     ffff800000803afb <open_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111 (discriminator 2)
ffff800000803af1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803af5:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803af9:	73 e6                	jae    ffff800000803ae1 <open_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:112
    if(p>=name)
ffff800000803afb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803aff:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803b03:	72 0c                	jb     ffff800000803b11 <open_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:113
        name=p+1;
ffff800000803b05:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803b09:	48 83 c0 01          	add    rax,0x1
ffff800000803b0d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:114
    if(memcmp(name,"tty",3)==0){
ffff800000803b11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b15:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803b1a:	48 b9 62 d6 ff ff ff 	movabs rcx,0xffffffffffffd662
ffff800000803b21:	ff ff ff 
ffff800000803b24:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803b28:	48 89 ce             	mov    rsi,rcx
ffff800000803b2b:	48 89 c7             	mov    rdi,rax
ffff800000803b2e:	49 89 df             	mov    r15,rbx
ffff800000803b31:	48 b8 c7 50 ef ff ff 	movabs rax,0xffffffffffef50c7
ffff800000803b38:	ff ff ff 
ffff800000803b3b:	48 01 d8             	add    rax,rbx
ffff800000803b3e:	ff d0                	call   rax
ffff800000803b40:	85 c0                	test   eax,eax
ffff800000803b42:	75 22                	jne    ffff800000803b66 <open_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:115
        return init_tty(inode,filp);
ffff800000803b44:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803b48:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803b4c:	48 89 d6             	mov    rsi,rdx
ffff800000803b4f:	48 89 c7             	mov    rdi,rax
ffff800000803b52:	49 89 df             	mov    r15,rbx
ffff800000803b55:	48 b8 45 44 ef ff ff 	movabs rax,0xffffffffffef4445
ffff800000803b5c:	ff ff ff 
ffff800000803b5f:	48 01 d8             	add    rax,rbx
ffff800000803b62:	ff d0                	call   rax
ffff800000803b64:	eb 57                	jmp    ffff800000803bbd <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:116
    }else if(strcmp(name,"console")==0){
ffff800000803b66:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b6a:	48 ba 56 d6 ff ff ff 	movabs rdx,0xffffffffffffd656
ffff800000803b71:	ff ff ff 
ffff800000803b74:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803b78:	48 89 d6             	mov    rsi,rdx
ffff800000803b7b:	48 89 c7             	mov    rdi,rax
ffff800000803b7e:	49 89 df             	mov    r15,rbx
ffff800000803b81:	48 b8 cf 53 ef ff ff 	movabs rax,0xffffffffffef53cf
ffff800000803b88:	ff ff ff 
ffff800000803b8b:	48 01 d8             	add    rax,rbx
ffff800000803b8e:	ff d0                	call   rax
ffff800000803b90:	85 c0                	test   eax,eax
ffff800000803b92:	75 22                	jne    ffff800000803bb6 <open_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:117
        return open_framebuffer(inode,filp);
ffff800000803b94:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803b98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803b9c:	48 89 d6             	mov    rsi,rdx
ffff800000803b9f:	48 89 c7             	mov    rdi,rax
ffff800000803ba2:	49 89 df             	mov    r15,rbx
ffff800000803ba5:	48 b8 dc cf ee ff ff 	movabs rax,0xffffffffffeecfdc
ffff800000803bac:	ff ff ff 
ffff800000803baf:	48 01 d8             	add    rax,rbx
ffff800000803bb2:	ff d0                	call   rax
ffff800000803bb4:	eb 07                	jmp    ffff800000803bbd <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:119
    }
    return -1;
ffff800000803bb6:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120
}
ffff800000803bbd:	48 83 c4 20          	add    rsp,0x20
ffff800000803bc1:	5b                   	pop    rbx
ffff800000803bc2:	41 5f                	pop    r15
ffff800000803bc4:	5d                   	pop    rbp
ffff800000803bc5:	c3                   	ret    

ffff800000803bc6 <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:121
long close_dev(struct index_node * inode,struct file * filp){
ffff800000803bc6:	f3 0f 1e fa          	endbr64 
ffff800000803bca:	55                   	push   rbp
ffff800000803bcb:	48 89 e5             	mov    rbp,rsp
ffff800000803bce:	41 57                	push   r15
ffff800000803bd0:	53                   	push   rbx
ffff800000803bd1:	48 83 ec 20          	sub    rsp,0x20
ffff800000803bd5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803bd5 <close_dev+0xf>
ffff800000803bdc:	49 bb 5b 9e 11 00 00 	movabs r11,0x119e5b
ffff800000803be3:	00 00 00 
ffff800000803be6:	4c 01 db             	add    rbx,r11
ffff800000803be9:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803bed:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:123
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803bf1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803bf5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803bf9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803bfc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124
    char* p=name+ strlen(name)-1;
ffff800000803c00:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803c04:	48 89 c7             	mov    rdi,rax
ffff800000803c07:	49 89 df             	mov    r15,rbx
ffff800000803c0a:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff800000803c11:	ff ff ff 
ffff800000803c14:	48 01 d8             	add    rax,rbx
ffff800000803c17:	ff d0                	call   rax
ffff800000803c19:	48 98                	cdqe   
ffff800000803c1b:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803c1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803c23:	48 01 d0             	add    rax,rdx
ffff800000803c26:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125
    for(;*p!='/'&&p>=name;p--);
ffff800000803c2a:	eb 05                	jmp    ffff800000803c31 <close_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125 (discriminator 3)
ffff800000803c2c:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125 (discriminator 1)
ffff800000803c31:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c35:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803c38:	3c 2f                	cmp    al,0x2f
ffff800000803c3a:	74 0a                	je     ffff800000803c46 <close_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125 (discriminator 2)
ffff800000803c3c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c40:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803c44:	73 e6                	jae    ffff800000803c2c <close_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:126
    if(p>=name)
ffff800000803c46:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c4a:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803c4e:	72 0c                	jb     ffff800000803c5c <close_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:127
        name=p+1;
ffff800000803c50:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c54:	48 83 c0 01          	add    rax,0x1
ffff800000803c58:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:128
    if(memcmp(name,"tty",3)==0){
ffff800000803c5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803c60:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803c65:	48 b9 62 d6 ff ff ff 	movabs rcx,0xffffffffffffd662
ffff800000803c6c:	ff ff ff 
ffff800000803c6f:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803c73:	48 89 ce             	mov    rsi,rcx
ffff800000803c76:	48 89 c7             	mov    rdi,rax
ffff800000803c79:	49 89 df             	mov    r15,rbx
ffff800000803c7c:	48 b8 c7 50 ef ff ff 	movabs rax,0xffffffffffef50c7
ffff800000803c83:	ff ff ff 
ffff800000803c86:	48 01 d8             	add    rax,rbx
ffff800000803c89:	ff d0                	call   rax
ffff800000803c8b:	85 c0                	test   eax,eax
ffff800000803c8d:	75 22                	jne    ffff800000803cb1 <close_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:129
        return close_tty(inode,filp);
ffff800000803c8f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803c93:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803c97:	48 89 d6             	mov    rsi,rdx
ffff800000803c9a:	48 89 c7             	mov    rdi,rax
ffff800000803c9d:	49 89 df             	mov    r15,rbx
ffff800000803ca0:	48 b8 78 43 ef ff ff 	movabs rax,0xffffffffffef4378
ffff800000803ca7:	ff ff ff 
ffff800000803caa:	48 01 d8             	add    rax,rbx
ffff800000803cad:	ff d0                	call   rax
ffff800000803caf:	eb 57                	jmp    ffff800000803d08 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130
    }else if(strcmp(name,"console")==0){
ffff800000803cb1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803cb5:	48 ba 56 d6 ff ff ff 	movabs rdx,0xffffffffffffd656
ffff800000803cbc:	ff ff ff 
ffff800000803cbf:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803cc3:	48 89 d6             	mov    rsi,rdx
ffff800000803cc6:	48 89 c7             	mov    rdi,rax
ffff800000803cc9:	49 89 df             	mov    r15,rbx
ffff800000803ccc:	48 b8 cf 53 ef ff ff 	movabs rax,0xffffffffffef53cf
ffff800000803cd3:	ff ff ff 
ffff800000803cd6:	48 01 d8             	add    rax,rbx
ffff800000803cd9:	ff d0                	call   rax
ffff800000803cdb:	85 c0                	test   eax,eax
ffff800000803cdd:	75 22                	jne    ffff800000803d01 <close_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:131
        return close_framebuffer(inode,filp);
ffff800000803cdf:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803ce3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803ce7:	48 89 d6             	mov    rsi,rdx
ffff800000803cea:	48 89 c7             	mov    rdi,rax
ffff800000803ced:	49 89 df             	mov    r15,rbx
ffff800000803cf0:	48 b8 33 d0 ee ff ff 	movabs rax,0xffffffffffeed033
ffff800000803cf7:	ff ff ff 
ffff800000803cfa:	48 01 d8             	add    rax,rbx
ffff800000803cfd:	ff d0                	call   rax
ffff800000803cff:	eb 07                	jmp    ffff800000803d08 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:133
    }
    return -1;
ffff800000803d01:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:135

}
ffff800000803d08:	48 83 c4 20          	add    rsp,0x20
ffff800000803d0c:	5b                   	pop    rbx
ffff800000803d0d:	41 5f                	pop    r15
ffff800000803d0f:	5d                   	pop    rbp
ffff800000803d10:	c3                   	ret    

ffff800000803d11 <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:136
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000803d11:	f3 0f 1e fa          	endbr64 
ffff800000803d15:	55                   	push   rbp
ffff800000803d16:	48 89 e5             	mov    rbp,rsp
ffff800000803d19:	41 57                	push   r15
ffff800000803d1b:	53                   	push   rbx
ffff800000803d1c:	48 83 ec 40          	sub    rsp,0x40
ffff800000803d20:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803d20 <read_dev+0xf>
ffff800000803d27:	49 bb 10 9d 11 00 00 	movabs r11,0x119d10
ffff800000803d2e:	00 00 00 
ffff800000803d31:	4c 01 db             	add    rbx,r11
ffff800000803d34:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803d38:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000803d3c:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000803d40:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:138
    //判断是不是块设备文件
    struct index_node* i_dev=filp->dentry->dir_inode;
ffff800000803d44:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803d48:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803d4c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803d50:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
        //这里需要调用缓冲区层的函数读取块设备
        return blkdev_read(i_dev->dev,*position,count,buf);
    }
    
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803d54:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803d58:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803d5c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803d5f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:146
    char* p=name+ strlen(name)-1;
ffff800000803d63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803d67:	48 89 c7             	mov    rdi,rax
ffff800000803d6a:	49 89 df             	mov    r15,rbx
ffff800000803d6d:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff800000803d74:	ff ff ff 
ffff800000803d77:	48 01 d8             	add    rax,rbx
ffff800000803d7a:	ff d0                	call   rax
ffff800000803d7c:	48 98                	cdqe   
ffff800000803d7e:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803d82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803d86:	48 01 d0             	add    rax,rdx
ffff800000803d89:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147
    for(;*p!='/'&&p>=name;p--);
ffff800000803d8d:	eb 05                	jmp    ffff800000803d94 <read_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147 (discriminator 3)
ffff800000803d8f:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147 (discriminator 1)
ffff800000803d94:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803d98:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803d9b:	3c 2f                	cmp    al,0x2f
ffff800000803d9d:	74 0a                	je     ffff800000803da9 <read_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147 (discriminator 2)
ffff800000803d9f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803da3:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803da7:	73 e6                	jae    ffff800000803d8f <read_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:148
    if(p>=name)
ffff800000803da9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803dad:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803db1:	72 0c                	jb     ffff800000803dbf <read_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:149
        name=p+1;
ffff800000803db3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803db7:	48 83 c0 01          	add    rax,0x1
ffff800000803dbb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:150
    if(memcmp(name,"tty",3)==0){
ffff800000803dbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803dc3:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803dc8:	48 b9 62 d6 ff ff ff 	movabs rcx,0xffffffffffffd662
ffff800000803dcf:	ff ff ff 
ffff800000803dd2:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803dd6:	48 89 ce             	mov    rsi,rcx
ffff800000803dd9:	48 89 c7             	mov    rdi,rax
ffff800000803ddc:	49 89 df             	mov    r15,rbx
ffff800000803ddf:	48 b8 c7 50 ef ff ff 	movabs rax,0xffffffffffef50c7
ffff800000803de6:	ff ff ff 
ffff800000803de9:	48 01 d8             	add    rax,rbx
ffff800000803dec:	ff d0                	call   rax
ffff800000803dee:	85 c0                	test   eax,eax
ffff800000803df0:	75 27                	jne    ffff800000803e19 <read_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:151
        return read_tty(filp,buf,count,position);
ffff800000803df2:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000803df6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000803dfa:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803dfe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803e02:	48 89 c7             	mov    rdi,rax
ffff800000803e05:	49 89 df             	mov    r15,rbx
ffff800000803e08:	48 b8 99 45 ef ff ff 	movabs rax,0xffffffffffef4599
ffff800000803e0f:	ff ff ff 
ffff800000803e12:	48 01 d8             	add    rax,rbx
ffff800000803e15:	ff d0                	call   rax
ffff800000803e17:	eb 5c                	jmp    ffff800000803e75 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152
    }else if(strcmp(name,"console")==0){
ffff800000803e19:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803e1d:	48 ba 56 d6 ff ff ff 	movabs rdx,0xffffffffffffd656
ffff800000803e24:	ff ff ff 
ffff800000803e27:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803e2b:	48 89 d6             	mov    rsi,rdx
ffff800000803e2e:	48 89 c7             	mov    rdi,rax
ffff800000803e31:	49 89 df             	mov    r15,rbx
ffff800000803e34:	48 b8 cf 53 ef ff ff 	movabs rax,0xffffffffffef53cf
ffff800000803e3b:	ff ff ff 
ffff800000803e3e:	48 01 d8             	add    rax,rbx
ffff800000803e41:	ff d0                	call   rax
ffff800000803e43:	85 c0                	test   eax,eax
ffff800000803e45:	75 27                	jne    ffff800000803e6e <read_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
        return read_framebuffer(filp,buf,count,position);
ffff800000803e47:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000803e4b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000803e4f:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803e53:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803e57:	48 89 c7             	mov    rdi,rax
ffff800000803e5a:	49 89 df             	mov    r15,rbx
ffff800000803e5d:	48 b8 5a d0 ee ff ff 	movabs rax,0xffffffffffeed05a
ffff800000803e64:	ff ff ff 
ffff800000803e67:	48 01 d8             	add    rax,rbx
ffff800000803e6a:	ff d0                	call   rax
ffff800000803e6c:	eb 07                	jmp    ffff800000803e75 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    }
    return -1;
ffff800000803e6e:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:157

}
ffff800000803e75:	48 83 c4 40          	add    rsp,0x40
ffff800000803e79:	5b                   	pop    rbx
ffff800000803e7a:	41 5f                	pop    r15
ffff800000803e7c:	5d                   	pop    rbp
ffff800000803e7d:	c3                   	ret    

ffff800000803e7e <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:158
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000803e7e:	f3 0f 1e fa          	endbr64 
ffff800000803e82:	55                   	push   rbp
ffff800000803e83:	48 89 e5             	mov    rbp,rsp
ffff800000803e86:	41 57                	push   r15
ffff800000803e88:	53                   	push   rbx
ffff800000803e89:	48 83 ec 40          	sub    rsp,0x40
ffff800000803e8d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803e8d <write_dev+0xf>
ffff800000803e94:	49 bb a3 9b 11 00 00 	movabs r11,0x119ba3
ffff800000803e9b:	00 00 00 
ffff800000803e9e:	4c 01 db             	add    rbx,r11
ffff800000803ea1:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803ea5:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000803ea9:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000803ead:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:160
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff800000803eb1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803eb5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803eb9:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803ebd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
        //这里需要调用缓冲区层的函数写块设备
        return blkdev_write(idev->dev,*position,count,buf);
    }

    //查看文件名
    char* name=filp->dentry->name;
ffff800000803ec1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803ec5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803ec9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803ecc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
    char* p=name+ strlen(name)-1;
ffff800000803ed0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ed4:	48 89 c7             	mov    rdi,rax
ffff800000803ed7:	49 89 df             	mov    r15,rbx
ffff800000803eda:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff800000803ee1:	ff ff ff 
ffff800000803ee4:	48 01 d8             	add    rax,rbx
ffff800000803ee7:	ff d0                	call   rax
ffff800000803ee9:	48 98                	cdqe   
ffff800000803eeb:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803eef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ef3:	48 01 d0             	add    rax,rdx
ffff800000803ef6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
    for(;*p!='/'&&p>=name;p--);
ffff800000803efa:	eb 05                	jmp    ffff800000803f01 <write_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 3)
ffff800000803efc:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 1)
ffff800000803f01:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803f05:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803f08:	3c 2f                	cmp    al,0x2f
ffff800000803f0a:	74 0a                	je     ffff800000803f16 <write_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 2)
ffff800000803f0c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803f10:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803f14:	73 e6                	jae    ffff800000803efc <write_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:170
    if(p>=name)
ffff800000803f16:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803f1a:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803f1e:	72 0c                	jb     ffff800000803f2c <write_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:171
        name=p+1;
ffff800000803f20:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803f24:	48 83 c0 01          	add    rax,0x1
ffff800000803f28:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
    if(memcmp(name,"tty",3)==0){
ffff800000803f2c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803f30:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803f35:	48 b9 62 d6 ff ff ff 	movabs rcx,0xffffffffffffd662
ffff800000803f3c:	ff ff ff 
ffff800000803f3f:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803f43:	48 89 ce             	mov    rsi,rcx
ffff800000803f46:	48 89 c7             	mov    rdi,rax
ffff800000803f49:	49 89 df             	mov    r15,rbx
ffff800000803f4c:	48 b8 c7 50 ef ff ff 	movabs rax,0xffffffffffef50c7
ffff800000803f53:	ff ff ff 
ffff800000803f56:	48 01 d8             	add    rax,rbx
ffff800000803f59:	ff d0                	call   rax
ffff800000803f5b:	85 c0                	test   eax,eax
ffff800000803f5d:	75 27                	jne    ffff800000803f86 <write_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:173
        return write_tty(filp,buf,count,position);
ffff800000803f5f:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000803f63:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000803f67:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803f6b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f6f:	48 89 c7             	mov    rdi,rax
ffff800000803f72:	49 89 df             	mov    r15,rbx
ffff800000803f75:	48 b8 5a 46 ef ff ff 	movabs rax,0xffffffffffef465a
ffff800000803f7c:	ff ff ff 
ffff800000803f7f:	48 01 d8             	add    rax,rbx
ffff800000803f82:	ff d0                	call   rax
ffff800000803f84:	eb 5c                	jmp    ffff800000803fe2 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:174
    }else if(strcmp(name,"console")==0){
ffff800000803f86:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803f8a:	48 ba 56 d6 ff ff ff 	movabs rdx,0xffffffffffffd656
ffff800000803f91:	ff ff ff 
ffff800000803f94:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803f98:	48 89 d6             	mov    rsi,rdx
ffff800000803f9b:	48 89 c7             	mov    rdi,rax
ffff800000803f9e:	49 89 df             	mov    r15,rbx
ffff800000803fa1:	48 b8 cf 53 ef ff ff 	movabs rax,0xffffffffffef53cf
ffff800000803fa8:	ff ff ff 
ffff800000803fab:	48 01 d8             	add    rax,rbx
ffff800000803fae:	ff d0                	call   rax
ffff800000803fb0:	85 c0                	test   eax,eax
ffff800000803fb2:	75 27                	jne    ffff800000803fdb <write_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:175
        return write_framebuffer(filp,buf,count,position);
ffff800000803fb4:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000803fb8:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000803fbc:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803fc0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803fc4:	48 89 c7             	mov    rdi,rax
ffff800000803fc7:	49 89 df             	mov    r15,rbx
ffff800000803fca:	48 b8 89 d0 ee ff ff 	movabs rax,0xffffffffffeed089
ffff800000803fd1:	ff ff ff 
ffff800000803fd4:	48 01 d8             	add    rax,rbx
ffff800000803fd7:	ff d0                	call   rax
ffff800000803fd9:	eb 07                	jmp    ffff800000803fe2 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    }
    return -1;
ffff800000803fdb:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:179

}
ffff800000803fe2:	48 83 c4 40          	add    rsp,0x40
ffff800000803fe6:	5b                   	pop    rbx
ffff800000803fe7:	41 5f                	pop    r15
ffff800000803fe9:	5d                   	pop    rbp
ffff800000803fea:	c3                   	ret    

ffff800000803feb <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:180
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff800000803feb:	f3 0f 1e fa          	endbr64 
ffff800000803fef:	55                   	push   rbp
ffff800000803ff0:	48 89 e5             	mov    rbp,rsp
ffff800000803ff3:	41 57                	push   r15
ffff800000803ff5:	53                   	push   rbx
ffff800000803ff6:	48 83 ec 40          	sub    rsp,0x40
ffff800000803ffa:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803ffa <ioctl_dev+0xf>
ffff800000804001:	49 bb 36 9a 11 00 00 	movabs r11,0x119a36
ffff800000804008:	00 00 00 
ffff80000080400b:	4c 01 db             	add    rbx,r11
ffff80000080400e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000804012:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000804016:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080401a:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:182
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff80000080401e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804022:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804026:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080402a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:188
    if(IS_BLKDEV(idev->dev)){
        //这里需要调用缓冲区层的函数ioctl块设备
        return 1;
    }
    //查看文件名
    char* name=filp->dentry->name;
ffff80000080402e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804032:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804036:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804039:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:189
    char* p=name+ strlen(name)-1;
ffff80000080403d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804041:	48 89 c7             	mov    rdi,rax
ffff800000804044:	49 89 df             	mov    r15,rbx
ffff800000804047:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff80000080404e:	ff ff ff 
ffff800000804051:	48 01 d8             	add    rax,rbx
ffff800000804054:	ff d0                	call   rax
ffff800000804056:	48 98                	cdqe   
ffff800000804058:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080405c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804060:	48 01 d0             	add    rax,rdx
ffff800000804063:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190
    for(;*p!='/'&&p>=name;p--);
ffff800000804067:	eb 05                	jmp    ffff80000080406e <ioctl_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190 (discriminator 3)
ffff800000804069:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190 (discriminator 1)
ffff80000080406e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804072:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804075:	3c 2f                	cmp    al,0x2f
ffff800000804077:	74 0a                	je     ffff800000804083 <ioctl_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190 (discriminator 2)
ffff800000804079:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080407d:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804081:	73 e6                	jae    ffff800000804069 <ioctl_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    if(p>=name)
ffff800000804083:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804087:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080408b:	72 0c                	jb     ffff800000804099 <ioctl_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:192
        name=p+1;
ffff80000080408d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804091:	48 83 c0 01          	add    rax,0x1
ffff800000804095:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:193
    if(memcmp(name,"tty",3)==0){
ffff800000804099:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080409d:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008040a2:	48 b9 62 d6 ff ff ff 	movabs rcx,0xffffffffffffd662
ffff8000008040a9:	ff ff ff 
ffff8000008040ac:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff8000008040b0:	48 89 ce             	mov    rsi,rcx
ffff8000008040b3:	48 89 c7             	mov    rdi,rax
ffff8000008040b6:	49 89 df             	mov    r15,rbx
ffff8000008040b9:	48 b8 c7 50 ef ff ff 	movabs rax,0xffffffffffef50c7
ffff8000008040c0:	ff ff ff 
ffff8000008040c3:	48 01 d8             	add    rax,rbx
ffff8000008040c6:	ff d0                	call   rax
ffff8000008040c8:	85 c0                	test   eax,eax
ffff8000008040ca:	75 27                	jne    ffff8000008040f3 <ioctl_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:194
        return ioctl_tty(inode, filp, cmd, arg);
ffff8000008040cc:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008040d0:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008040d4:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008040d8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008040dc:	48 89 c7             	mov    rdi,rax
ffff8000008040df:	49 89 df             	mov    r15,rbx
ffff8000008040e2:	48 b8 4a 47 ef ff ff 	movabs rax,0xffffffffffef474a
ffff8000008040e9:	ff ff ff 
ffff8000008040ec:	48 01 d8             	add    rax,rbx
ffff8000008040ef:	ff d0                	call   rax
ffff8000008040f1:	eb 5c                	jmp    ffff80000080414f <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:195
    }else if(strcmp(name,"console")==0){
ffff8000008040f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008040f7:	48 ba 56 d6 ff ff ff 	movabs rdx,0xffffffffffffd656
ffff8000008040fe:	ff ff ff 
ffff800000804101:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804105:	48 89 d6             	mov    rsi,rdx
ffff800000804108:	48 89 c7             	mov    rdi,rax
ffff80000080410b:	49 89 df             	mov    r15,rbx
ffff80000080410e:	48 b8 cf 53 ef ff ff 	movabs rax,0xffffffffffef53cf
ffff800000804115:	ff ff ff 
ffff800000804118:	48 01 d8             	add    rax,rbx
ffff80000080411b:	ff d0                	call   rax
ffff80000080411d:	85 c0                	test   eax,eax
ffff80000080411f:	75 27                	jne    ffff800000804148 <ioctl_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:196
        return ioctl_framebuffer(inode,filp,cmd,arg);
ffff800000804121:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804125:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804129:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff80000080412d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804131:	48 89 c7             	mov    rdi,rax
ffff800000804134:	49 89 df             	mov    r15,rbx
ffff800000804137:	48 b8 aa d1 ee ff ff 	movabs rax,0xffffffffffeed1aa
ffff80000080413e:	ff ff ff 
ffff800000804141:	48 01 d8             	add    rax,rbx
ffff800000804144:	ff d0                	call   rax
ffff800000804146:	eb 07                	jmp    ffff80000080414f <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:198
    }
    return -1;
ffff800000804148:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200

}
ffff80000080414f:	48 83 c4 40          	add    rsp,0x40
ffff800000804153:	5b                   	pop    rbx
ffff800000804154:	41 5f                	pop    r15
ffff800000804156:	5d                   	pop    rbp
ffff800000804157:	c3                   	ret    

ffff800000804158 <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:202
int load_driver(char *path)
{
ffff800000804158:	f3 0f 1e fa          	endbr64 
ffff80000080415c:	55                   	push   rbp
ffff80000080415d:	48 89 e5             	mov    rbp,rsp
ffff800000804160:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804160 <load_driver+0x8>
ffff800000804167:	49 bb d0 98 11 00 00 	movabs r11,0x1198d0
ffff80000080416e:	00 00 00 
ffff800000804171:	4c 01 d8             	add    rax,r11
ffff800000804174:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:204
    
}
ffff800000804178:	90                   	nop
ffff800000804179:	5d                   	pop    rbp
ffff80000080417a:	c3                   	ret    

ffff80000080417b <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:26
TSS *tss=0xffff800000108000ul;
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
void init_proc(){
ffff80000080417b:	f3 0f 1e fa          	endbr64 
ffff80000080417f:	55                   	push   rbp
ffff800000804180:	48 89 e5             	mov    rbp,rsp
ffff800000804183:	41 57                	push   r15
ffff800000804185:	53                   	push   rbx
ffff800000804186:	48 83 ec 10          	sub    rsp,0x10
ffff80000080418a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080418a <init_proc+0xf>
ffff800000804191:	49 bb a6 98 11 00 00 	movabs r11,0x1198a6
ffff800000804198:	00 00 00 
ffff80000080419b:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:28
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
ffff80000080419e:	be 0d 00 00 00       	mov    esi,0xd
ffff8000008041a3:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008041a8:	49 89 df             	mov    r15,rbx
ffff8000008041ab:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff8000008041b2:	ff ff ff 
ffff8000008041b5:	48 01 d8             	add    rax,rbx
ffff8000008041b8:	ff d0                	call   rax
ffff8000008041ba:	48 89 c2             	mov    rdx,rax
ffff8000008041bd:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008041c4:	ff ff ff 
ffff8000008041c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008041cb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff8000008041ce:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008041d5:	eb 7b                	jmp    ffff800000804252 <init_proc+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 3)
        task[i].pid=-1;
ffff8000008041d7:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008041de:	ff ff ff 
ffff8000008041e1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008041e5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008041e8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008041eb:	48 98                	cdqe   
ffff8000008041ed:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008041f4:	48 01 d0             	add    rax,rdx
ffff8000008041f7:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31 (discriminator 3)
        task[i].stat=TASK_EMPTY;
ffff8000008041fd:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804204:	ff ff ff 
ffff800000804207:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080420b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080420e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804211:	48 98                	cdqe   
ffff800000804213:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080421a:	48 01 d0             	add    rax,rdx
ffff80000080421d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
        task[i].parent_pid=-1;
ffff800000804224:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080422b:	ff ff ff 
ffff80000080422e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804232:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804235:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804238:	48 98                	cdqe   
ffff80000080423a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804241:	48 01 d0             	add    rax,rdx
ffff800000804244:	c7 80 bc 00 00 00 ff 	mov    DWORD PTR [rax+0xbc],0xffffffff
ffff80000080424b:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff80000080424e:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 1)
ffff800000804252:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff800000804256:	0f 8e 7b ff ff ff    	jle    ffff8000008041d7 <init_proc+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:34
    }
    cur_proc=0;//proc zero
ffff80000080425c:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000804263:	ff ff ff 
ffff800000804266:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080426a:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35
    current=task;
ffff800000804270:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804277:	ff ff ff 
ffff80000080427a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080427e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804281:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000804288:	ff ff ff 
ffff80000080428b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080428f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:36
    pidd=1;
ffff800000804292:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff800000804299:	ff ff ff 
ffff80000080429c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008042a0:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:41


    //asm volatile("lldt %0"::"m"(xi));
    //asm volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
ffff8000008042a6:	68 00 00 80 00       	push   0x800000
ffff8000008042ab:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008042b2:	ff 
ffff8000008042b3:	68 00 00 80 00       	push   0x800000
ffff8000008042b8:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008042bf:	ff 
ffff8000008042c0:	68 00 00 80 00       	push   0x800000
ffff8000008042c5:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008042cc:	ff 
ffff8000008042cd:	68 00 00 80 00       	push   0x800000
ffff8000008042d2:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008042d9:	ff 
ffff8000008042da:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
ffff8000008042e1:	80 ff ff 
ffff8000008042e4:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
ffff8000008042eb:	80 ff ff 
ffff8000008042ee:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
ffff8000008042f5:	80 ff ff 
ffff8000008042f8:	48 89 c1             	mov    rcx,rax
ffff8000008042fb:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804302:	80 ff ff 
ffff800000804305:	48 89 c2             	mov    rdx,rax
ffff800000804308:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080430f:	80 ff ff 
ffff800000804312:	48 89 c6             	mov    rsi,rax
ffff800000804315:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080431c:	80 ff ff 
ffff80000080431f:	48 89 c7             	mov    rdi,rax
ffff800000804322:	49 89 df             	mov    r15,rbx
ffff800000804325:	48 b8 42 87 ee ff ff 	movabs rax,0xffffffffffee8742
ffff80000080432c:	ff ff ff 
ffff80000080432f:	48 01 d8             	add    rax,rbx
ffff800000804332:	ff d0                	call   rax
ffff800000804334:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:46
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);

    //===============创建0号进程======================
    int zi= init_proc0();
ffff800000804338:	49 89 df             	mov    r15,rbx
ffff80000080433b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804340:	48 ba da 6c ee ff ff 	movabs rdx,0xffffffffffee6cda
ffff800000804347:	ff ff ff 
ffff80000080434a:	48 01 da             	add    rdx,rbx
ffff80000080434d:	ff d2                	call   rdx
ffff80000080434f:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:47
    task[zi].stat=TASK_READY;
ffff800000804352:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804359:	ff ff ff 
ffff80000080435c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804360:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804363:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000804366:	48 98                	cdqe   
ffff800000804368:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080436f:	48 01 d0             	add    rax,rdx
ffff800000804372:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:49
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
ffff800000804379:	48 b8 20 fe ff ff ff 	movabs rax,0xfffffffffffffe20
ffff800000804380:	ff ff ff 
ffff800000804383:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804387:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080438a:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
ffff80000080438e:	48 89 c6             	mov    rsi,rax
ffff800000804391:	bf a8 06 00 00       	mov    edi,0x6a8
ffff800000804396:	49 89 df             	mov    r15,rbx
ffff800000804399:	48 b8 37 34 ee ff ff 	movabs rax,0xffffffffffee3437
ffff8000008043a0:	ff ff ff 
ffff8000008043a3:	48 01 d8             	add    rax,rbx
ffff8000008043a6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:51
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
ffff8000008043a8:	be 08 00 00 00       	mov    esi,0x8
ffff8000008043ad:	bf 74 01 00 00       	mov    edi,0x174
ffff8000008043b2:	49 89 df             	mov    r15,rbx
ffff8000008043b5:	48 b8 37 34 ee ff ff 	movabs rax,0xffffffffffee3437
ffff8000008043bc:	ff ff ff 
ffff8000008043bf:	48 01 d8             	add    rax,rbx
ffff8000008043c2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:53
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
ffff8000008043c4:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
ffff8000008043cb:	00 20 00 
ffff8000008043ce:	48 89 c6             	mov    rsi,rax
ffff8000008043d1:	b8 81 00 00 c0       	mov    eax,0xc0000081
ffff8000008043d6:	48 89 c7             	mov    rdi,rax
ffff8000008043d9:	49 89 df             	mov    r15,rbx
ffff8000008043dc:	48 b8 37 34 ee ff ff 	movabs rax,0xffffffffffee3437
ffff8000008043e3:	ff ff ff 
ffff8000008043e6:	48 01 d8             	add    rax,rbx
ffff8000008043e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:55

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
ffff8000008043eb:	48 b8 20 fe ff ff ff 	movabs rax,0xfffffffffffffe20
ffff8000008043f2:	ff ff ff 
ffff8000008043f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008043f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008043fc:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff800000804400:	48 89 c6             	mov    rsi,rax
ffff800000804403:	48 b8 70 d6 ff ff ff 	movabs rax,0xffffffffffffd670
ffff80000080440a:	ff ff ff 
ffff80000080440d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000804411:	48 89 c7             	mov    rdi,rax
ffff800000804414:	49 89 df             	mov    r15,rbx
ffff800000804417:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080441c:	48 ba dc 4b ef ff ff 	movabs rdx,0xffffffffffef4bdc
ffff800000804423:	ff ff ff 
ffff800000804426:	48 01 da             	add    rdx,rbx
ffff800000804429:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:58
    //创建一个测试进程
//    create_test_proc();
}
ffff80000080442b:	90                   	nop
ffff80000080442c:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000804430:	5b                   	pop    rbx
ffff800000804431:	41 5f                	pop    r15
ffff800000804433:	5d                   	pop    rbp
ffff800000804434:	c3                   	ret    

ffff800000804435 <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:59
void create_test_proc(){
ffff800000804435:	f3 0f 1e fa          	endbr64 
ffff800000804439:	55                   	push   rbp
ffff80000080443a:	48 89 e5             	mov    rbp,rsp
ffff80000080443d:	41 57                	push   r15
ffff80000080443f:	53                   	push   rbx
ffff800000804440:	48 83 ec 20          	sub    rsp,0x20
ffff800000804444:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804444 <create_test_proc+0xf>
ffff80000080444b:	49 bb ec 95 11 00 00 	movabs r11,0x1195ec
ffff800000804452:	00 00 00 
ffff800000804455:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:61

    int index=req_proc();
ffff800000804458:	49 89 df             	mov    r15,rbx
ffff80000080445b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804460:	48 ba 1c 6f ee ff ff 	movabs rdx,0xffffffffffee6f1c
ffff800000804467:	ff ff ff 
ffff80000080446a:	48 01 da             	add    rdx,rbx
ffff80000080446d:	ff d2                	call   rdx
ffff80000080446f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62
    task[index].stat=TASK_READY;
ffff800000804472:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804479:	ff ff ff 
ffff80000080447c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804480:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804483:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804486:	48 98                	cdqe   
ffff800000804488:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080448f:	48 01 d0             	add    rax,rdx
ffff800000804492:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:63
    int currsp=0x9fc00-1;
ffff800000804499:	c7 45 dc ff fb 09 00 	mov    DWORD PTR [rbp-0x24],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64
    asm volatile("mov %%rsp,%0":"=m"(currsp));
ffff8000008044a0:	48 89 65 dc          	mov    QWORD PTR [rbp-0x24],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:65
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff8000008044a4:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008044ab:	ff ff ff 
ffff8000008044ae:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008044b2:	48 89 c2             	mov    rdx,rax
ffff8000008044b5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008044b9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008044bc:	50                   	push   rax
ffff8000008044bd:	6a 00                	push   0x0
ffff8000008044bf:	52                   	push   rdx
ffff8000008044c0:	6a 00                	push   0x0
ffff8000008044c2:	6a 00                	push   0x0
ffff8000008044c4:	6a 00                	push   0x0
ffff8000008044c6:	68 58 7d 00 00       	push   0x7d58
ffff8000008044cb:	6a 10                	push   0x10
ffff8000008044cd:	6a 10                	push   0x10
ffff8000008044cf:	6a 10                	push   0x10
ffff8000008044d1:	6a 10                	push   0x10
ffff8000008044d3:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff8000008044d9:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff8000008044df:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008044e4:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008044e9:	be 00 00 00 00       	mov    esi,0x0
ffff8000008044ee:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008044f3:	49 89 df             	mov    r15,rbx
ffff8000008044f6:	48 b8 6d 70 ee ff ff 	movabs rax,0xffffffffffee706d
ffff8000008044fd:	ff ff ff 
ffff800000804500:	48 01 d8             	add    rax,rbx
ffff800000804503:	ff d0                	call   rax
ffff800000804505:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:67
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)_syscall_sysret, 0, index);
    task[index].tss.rsp0=0x400000;
ffff800000804509:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804510:	ff ff ff 
ffff800000804513:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804517:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080451a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080451d:	48 98                	cdqe   
ffff80000080451f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804526:	48 01 d0             	add    rax,rdx
ffff800000804529:	48 c7 80 fc 01 00 00 	mov    QWORD PTR [rax+0x1fc],0x400000
ffff800000804530:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
    task[index].mem_struct.stack_top=0x7e00;
ffff800000804534:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080453b:	ff ff ff 
ffff80000080453e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804542:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804545:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804548:	48 98                	cdqe   
ffff80000080454a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804551:	48 01 d0             	add    rax,rdx
ffff800000804554:	48 c7 40 40 00 7e 00 	mov    QWORD PTR [rax+0x40],0x7e00
ffff80000080455b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:69
    task[index].mem_struct.stack_bottom=0x6e00;
ffff80000080455c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804563:	ff ff ff 
ffff800000804566:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080456a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080456d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804570:	48 98                	cdqe   
ffff800000804572:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804579:	48 01 d0             	add    rax,rdx
ffff80000080457c:	48 c7 40 38 00 6e 00 	mov    QWORD PTR [rax+0x38],0x6e00
ffff800000804583:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
    task[index].mem_struct.heap_top=0x1101000;
ffff800000804584:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080458b:	ff ff ff 
ffff80000080458e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804592:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804595:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804598:	48 98                	cdqe   
ffff80000080459a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008045a1:	48 01 d0             	add    rax,rdx
ffff8000008045a4:	48 c7 40 30 00 10 10 	mov    QWORD PTR [rax+0x30],0x1101000
ffff8000008045ab:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:71
    task[index].mem_struct.heap_base=0x1100000;
ffff8000008045ac:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008045b3:	ff ff ff 
ffff8000008045b6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008045ba:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008045bd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008045c0:	48 98                	cdqe   
ffff8000008045c2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008045c9:	48 01 d0             	add    rax,rdx
ffff8000008045cc:	48 c7 40 28 00 00 10 	mov    QWORD PTR [rax+0x28],0x1100000
ffff8000008045d3:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:74

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
ffff8000008045d4:	48 c7 45 e0 58 7d 00 	mov    QWORD PTR [rbp-0x20],0x7d58
ffff8000008045db:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:75
    str->rax=0;
ffff8000008045dc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008045e0:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff8000008045e7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:76
    str->rbx=0;
ffff8000008045e8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008045ec:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
ffff8000008045f3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77
    str->rcx=proc_zero;//sysret采用的返回地址
ffff8000008045f4:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff8000008045fb:	ff ff ff 
ffff8000008045fe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804602:	48 89 c2             	mov    rdx,rax
ffff800000804605:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804609:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rdx=0;
ffff80000080460d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804611:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffff800000804618:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rsi=0;
ffff800000804619:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080461d:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff800000804624:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->rdi=0;
ffff800000804625:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804629:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffff800000804630:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->r15=0;
ffff800000804631:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804635:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080463c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->r14=0;
ffff80000080463d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804641:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff800000804648:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->r13=0;
ffff800000804649:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080464d:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff800000804654:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r12=0;
ffff800000804655:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804659:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff800000804660:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r11=0x200;
ffff800000804661:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804665:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
ffff80000080466c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r10=0;
ffff80000080466d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804671:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff800000804678:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r9=0;
ffff800000804679:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080467d:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
ffff800000804684:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->r8=0;
ffff800000804685:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804689:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
ffff800000804690:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->rip=proc_zero;
ffff800000804691:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff800000804698:	ff ff ff 
ffff80000080469b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080469f:	48 89 c2             	mov    rdx,rax
ffff8000008046a2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008046a6:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->cs=0x8;
ffff8000008046ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008046b1:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
ffff8000008046b8:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->rflags=0x00200206;
ffff8000008046bc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008046c0:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
ffff8000008046c7:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->rsp=0x7e00;
ffff8000008046cb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008046cf:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
ffff8000008046d6:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->ss=0x2b;
ffff8000008046da:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008046de:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
ffff8000008046e5:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->ds=0x2b;
ffff8000008046e9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008046ed:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:95
    str->es=0x2b;
ffff8000008046f4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008046f8:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
ffff8000008046ff:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:97

}
ffff800000804700:	90                   	nop
ffff800000804701:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000804705:	5b                   	pop    rbx
ffff800000804706:	41 5f                	pop    r15
ffff800000804708:	5d                   	pop    rbp
ffff800000804709:	c3                   	ret    

ffff80000080470a <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:99
int init_proc0()
{
ffff80000080470a:	f3 0f 1e fa          	endbr64 
ffff80000080470e:	55                   	push   rbp
ffff80000080470f:	48 89 e5             	mov    rbp,rsp
ffff800000804712:	41 57                	push   r15
ffff800000804714:	53                   	push   rbx
ffff800000804715:	48 83 ec 10          	sub    rsp,0x10
ffff800000804719:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804719 <init_proc0+0xf>
ffff800000804720:	49 bb 17 93 11 00 00 	movabs r11,0x119317
ffff800000804727:	00 00 00 
ffff80000080472a:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:101

    task[0].pid=pidd++;
ffff80000080472d:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff800000804734:	ff ff ff 
ffff800000804737:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080473b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080473d:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000804740:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff800000804747:	ff ff ff 
ffff80000080474a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080474e:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000804750:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804757:	ff ff ff 
ffff80000080475a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080475e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000804761:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102
    task[0].stat=TASK_RUNNING;
ffff800000804763:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080476a:	ff ff ff 
ffff80000080476d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804771:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804774:	c7 40 18 01 00 00 00 	mov    DWORD PTR [rax+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:103
    task[0].utime=0;
ffff80000080477b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804782:	ff ff ff 
ffff800000804785:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804789:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080478c:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:104
    task[0].priority=0;
ffff800000804793:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080479a:	ff ff ff 
ffff80000080479d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008047a1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008047a4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:106

    struct process *pz=task;
ffff8000008047ab:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008047b2:	ff ff ff 
ffff8000008047b5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008047b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008047bc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:115
//    task[index].tss.eip=(long)proc_zero;
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    pz->openf[0]=(struct file*)&ftty;
ffff8000008047c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008047c4:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff8000008047cb:	ff ff ff 
ffff8000008047ce:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008047d2:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:116
    pz->openf[1]=(struct file*)&ftty;
ffff8000008047d9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008047dd:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff8000008047e4:	ff ff ff 
ffff8000008047e7:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008047eb:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:117
    pz->openf[2]=(struct file*)&ftty;
ffff8000008047f2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008047f6:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff8000008047fd:	ff ff ff 
ffff800000804800:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804804:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:119

    pz->mem_struct.stack_top=STACK_TOP;
ffff80000080480b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080480f:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000804816:	7f 00 00 
ffff800000804819:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120
    pz->mem_struct.stack_bottom=STACK_TOP;
ffff80000080481d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804821:	48 89 70 38          	mov    QWORD PTR [rax+0x38],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:121
    pz->mem_struct.heap_top=HEAP_BASE;
ffff800000804825:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804829:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x1000000
ffff800000804830:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122
    pz->mem_struct.heap_base=HEAP_BASE;
ffff800000804831:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804835:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff80000080483c:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    memcpy(&pz->tss,tss, sizeof(TSS));
ffff80000080483d:	48 b8 20 fe ff ff ff 	movabs rax,0xfffffffffffffe20
ffff800000804844:	ff ff ff 
ffff800000804847:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080484b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080484e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804852:	48 8d 8a f8 01 00 00 	lea    rcx,[rdx+0x1f8]
ffff800000804859:	ba 6c 00 00 00       	mov    edx,0x6c
ffff80000080485e:	48 89 c6             	mov    rsi,rax
ffff800000804861:	48 89 cf             	mov    rdi,rcx
ffff800000804864:	49 89 df             	mov    r15,rbx
ffff800000804867:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff80000080486e:	ff ff ff 
ffff800000804871:	48 01 d8             	add    rax,rbx
ffff800000804874:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:125

    pz->child_procs=NULL;
ffff800000804876:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080487a:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000804881:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:128

    //这个是进程切换的时候要读取的值
    pz->regs.cr3=PML4_ADDR&~KNL_BASE;
ffff800000804885:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804889:	48 c7 80 64 02 00 00 	mov    QWORD PTR [rax+0x264],0x101000
ffff800000804890:	00 10 10 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:129
    pz->pml4=PML4_ADDR;
ffff800000804894:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804898:	48 bf 00 10 10 00 00 	movabs rdi,0xffff800000101000
ffff80000080489f:	80 ff ff 
ffff8000008048a2:	48 89 b8 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:130
    pz->cwd=root_sb->root;
ffff8000008048a9:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff8000008048b0:	ff ff ff 
ffff8000008048b3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048ba:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008048bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008048c1:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131
    pz->exef=NULL;
ffff8000008048c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008048cc:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffff8000008048d3:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    list_init(&pz->node);
ffff8000008048d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008048db:	48 05 34 03 00 00    	add    rax,0x334
ffff8000008048e1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff8000008048e5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048e9:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff8000008048f0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048f4:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008048fb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff8000008048fc:	90                   	nop
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:133
    pz->node.data=pz;
ffff8000008048fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804901:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804905:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:135
    
    pz->gpid=pz->pid;
ffff80000080490c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804910:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804912:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804916:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    pz->sid=pz->pid;
ffff800000804919:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080491d:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080491f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804923:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:137
    pz->fg_pgid=pz->pid;
ffff800000804926:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080492a:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080492c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804930:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    pz->in_bgpg=0;
ffff800000804933:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804937:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    return 0;
ffff80000080493e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
}
ffff800000804943:	48 83 c4 10          	add    rsp,0x10
ffff800000804947:	5b                   	pop    rbx
ffff800000804948:	41 5f                	pop    r15
ffff80000080494a:	5d                   	pop    rbp
ffff80000080494b:	c3                   	ret    

ffff80000080494c <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
int req_proc(){
ffff80000080494c:	f3 0f 1e fa          	endbr64 
ffff800000804950:	55                   	push   rbp
ffff800000804951:	48 89 e5             	mov    rbp,rsp
ffff800000804954:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804954 <req_proc+0x8>
ffff80000080495b:	49 bb dc 90 11 00 00 	movabs r11,0x1190dc
ffff800000804962:	00 00 00 
ffff800000804965:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
    int num=0;
ffff800000804968:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff80000080496f:	eb 04                	jmp    ffff800000804975 <req_proc+0x29>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:145
    num<=MAX_PROC_COUNT){
        num++;
ffff800000804971:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000804975:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080497c:	ff ff ff 
ffff80000080497f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804983:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804986:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804989:	48 63 d2             	movsxd rdx,edx
ffff80000080498c:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804993:	48 01 ca             	add    rdx,rcx
ffff800000804996:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804998:	83 fa ff             	cmp    edx,0xffffffff
ffff80000080499b:	74 2e                	je     ffff8000008049cb <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 1)
ffff80000080499d:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008049a4:	ff ff ff 
ffff8000008049a7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008049ab:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008049ae:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008049b1:	48 63 d2             	movsxd rdx,edx
ffff8000008049b4:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008049bb:	48 01 ca             	add    rdx,rcx
ffff8000008049be:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff8000008049c1:	85 d2                	test   edx,edx
ffff8000008049c3:	74 06                	je     ffff8000008049cb <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 2)
ffff8000008049c5:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff8000008049c9:	7e a6                	jle    ffff800000804971 <req_proc+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:147
    }
    if(num>=MAX_PROC_COUNT)
ffff8000008049cb:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff8000008049cf:	7e 0a                	jle    ffff8000008049db <req_proc+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
        return -1;
ffff8000008049d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008049d6:	e9 c0 00 00 00       	jmp    ffff800000804a9b <req_proc+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:149
    task[num].pid=pidd++;
ffff8000008049db:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff8000008049e2:	ff ff ff 
ffff8000008049e5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008049e9:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008049eb:	8d 72 01             	lea    esi,[rdx+0x1]
ffff8000008049ee:	48 b9 68 fe ff ff ff 	movabs rcx,0xfffffffffffffe68
ffff8000008049f5:	ff ff ff 
ffff8000008049f8:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff8000008049fc:	89 31                	mov    DWORD PTR [rcx],esi
ffff8000008049fe:	48 b9 b8 fe ff ff ff 	movabs rcx,0xfffffffffffffeb8
ffff800000804a05:	ff ff ff 
ffff800000804a08:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000804a0c:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff800000804a0f:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000804a12:	48 63 c9             	movsxd rcx,ecx
ffff800000804a15:	48 69 c9 58 03 00 00 	imul   rcx,rcx,0x358
ffff800000804a1c:	48 01 f1             	add    rcx,rsi
ffff800000804a1f:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    task[num].stat=TASK_ZOMBIE;
ffff800000804a21:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804a28:	ff ff ff 
ffff800000804a2b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804a2f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804a32:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804a35:	48 63 d2             	movsxd rdx,edx
ffff800000804a38:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804a3f:	48 01 ca             	add    rdx,rcx
ffff800000804a42:	c7 42 18 04 00 00 00 	mov    DWORD PTR [rdx+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
    task[num].utime=0;
ffff800000804a49:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804a50:	ff ff ff 
ffff800000804a53:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804a57:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804a5a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804a5d:	48 63 d2             	movsxd rdx,edx
ffff800000804a60:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804a67:	48 01 ca             	add    rdx,rcx
ffff800000804a6a:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    task[num].priority=0;
ffff800000804a71:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804a78:	ff ff ff 
ffff800000804a7b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000804a7f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804a82:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000804a85:	48 98                	cdqe   
ffff800000804a87:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804a8e:	48 01 d0             	add    rax,rdx
ffff800000804a91:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    return num;
ffff800000804a98:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
}
ffff800000804a9b:	5d                   	pop    rbp
ffff800000804a9c:	c3                   	ret    

ffff800000804a9d <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:156
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
ffff800000804a9d:	f3 0f 1e fa          	endbr64 
ffff800000804aa1:	55                   	push   rbp
ffff800000804aa2:	48 89 e5             	mov    rbp,rsp
ffff800000804aa5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804aa5 <set_proc+0x8>
ffff800000804aac:	49 bb 8b 8f 11 00 00 	movabs r11,0x118f8b
ffff800000804ab3:	00 00 00 
ffff800000804ab6:	4c 01 d8             	add    rax,r11
ffff800000804ab9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000804abd:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000804ac1:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000804ac5:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff800000804ac9:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffff800000804acd:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
    struct process* proc=&task[proc_nr];
ffff800000804ad1:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804ad8:	ff ff ff 
ffff800000804adb:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000804adf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804ae2:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
ffff800000804ae5:	48 98                	cdqe   
ffff800000804ae7:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804aee:	48 01 d0             	add    rax,rdx
ffff800000804af1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:158
    proc->regs.rax=rax;
ffff800000804af5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804af9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804afd:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
    proc->regs.rbx=rbx;
ffff800000804b04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804b08:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804b0c:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    proc->regs.rcx=rcx;
ffff800000804b13:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804b17:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804b1b:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rdx=rdx;
ffff800000804b22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804b26:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804b2a:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:162
    proc->regs.es=es;
ffff800000804b31:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804b35:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804b39:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    proc->regs.cs=cs;
ffff800000804b40:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804b44:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804b48:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:164
    proc->regs.ss=ss;
ffff800000804b4f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804b53:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
ffff800000804b57:	48 89 90 cc 02 00 00 	mov    QWORD PTR [rax+0x2cc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165
    proc->regs.ds=ds;
ffff800000804b5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804b62:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000804b66:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.fs=fs;
ffff800000804b6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804b71:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
ffff800000804b75:	48 89 90 dc 02 00 00 	mov    QWORD PTR [rax+0x2dc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.gs=gs;
ffff800000804b7c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804b80:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff800000804b84:	48 89 90 e4 02 00 00 	mov    QWORD PTR [rax+0x2e4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.rsp=rsp;
ffff800000804b8b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804b8f:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff800000804b93:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->regs.rbp=rbp;
ffff800000804b9a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804b9e:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
ffff800000804ba2:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:170
    proc->regs.rsi=rsi;
ffff800000804ba9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804bad:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
ffff800000804bb1:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:171
    proc->regs.rdi=rdi;
ffff800000804bb8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804bbc:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
ffff800000804bc0:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
ffff800000804bc7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804bcb:	48 c7 80 74 02 00 00 	mov    QWORD PTR [rax+0x274],0x202
ffff800000804bd2:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:174
    //能接受中断
    proc->regs.rip=rip;
ffff800000804bd6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804bda:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
ffff800000804bde:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:176

    proc->regs.cs=cs;
ffff800000804be5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804be9:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804bed:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:177
    proc->regs.ds=ds;
ffff800000804bf4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804bf8:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000804bfc:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:178
    proc->regs.es=es;
ffff800000804c03:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804c07:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804c0b:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:179
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
ffff800000804c12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804c16:	48 b9 00 10 10 00 00 	movabs rcx,0xffff800000101000
ffff800000804c1d:	80 ff ff 
ffff800000804c20:	48 89 88 64 02 00 00 	mov    QWORD PTR [rax+0x264],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:180
    proc->pml4=PML4_ADDR;
ffff800000804c27:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804c2b:	48 89 88 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:183


}
ffff800000804c32:	90                   	nop
ffff800000804c33:	5d                   	pop    rbp
ffff800000804c34:	c3                   	ret    

ffff800000804c35 <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:185
void proc_zero()
{
ffff800000804c35:	f3 0f 1e fa          	endbr64 
ffff800000804c39:	55                   	push   rbp
ffff800000804c3a:	48 89 e5             	mov    rbp,rsp
ffff800000804c3d:	41 57                	push   r15
ffff800000804c3f:	53                   	push   rbx
ffff800000804c40:	48 83 ec 10          	sub    rsp,0x10
ffff800000804c44:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804c44 <proc_zero+0xf>
ffff800000804c4b:	49 bb ec 8d 11 00 00 	movabs r11,0x118dec
ffff800000804c52:	00 00 00 
ffff800000804c55:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:198 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
ffff800000804c58:	49 89 df             	mov    r15,rbx
ffff800000804c5b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804c60:	48 ba 9c 08 ef ff ff 	movabs rdx,0xffffffffffef089c
ffff800000804c67:	ff ff ff 
ffff800000804c6a:	48 01 da             	add    rdx,rbx
ffff800000804c6d:	ff d2                	call   rdx
ffff800000804c6f:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 1)
        putchar(c);
ffff800000804c72:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff800000804c76:	89 c7                	mov    edi,eax
ffff800000804c78:	49 89 df             	mov    r15,rbx
ffff800000804c7b:	48 b8 72 3c ee ff ff 	movabs rax,0xffffffffffee3c72
ffff800000804c82:	ff ff ff 
ffff800000804c85:	48 01 d8             	add    rax,rbx
ffff800000804c88:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:197 (discriminator 1)
    {
ffff800000804c8a:	eb cc                	jmp    ffff800000804c58 <proc_zero+0x23>

ffff800000804c8c <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:202
    }
}
void save_rsp(){
ffff800000804c8c:	f3 0f 1e fa          	endbr64 
ffff800000804c90:	55                   	push   rbp
ffff800000804c91:	48 89 e5             	mov    rbp,rsp
ffff800000804c94:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804c94 <save_rsp+0x8>
ffff800000804c9b:	49 bb 9c 8d 11 00 00 	movabs r11,0x118d9c
ffff800000804ca2:	00 00 00 
ffff800000804ca5:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:204
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
ffff800000804ca8:	48 be f0 ff 7f 00 00 	movabs rsi,0xffff8000007ffff0
ffff800000804caf:	80 ff ff 
ffff800000804cb2:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
    current->regs.rsp=*p;
ffff800000804cb6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000804cba:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000804cbd:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000804cc4:	ff ff ff 
ffff800000804cc7:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000804ccb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804cce:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:206
}
ffff800000804cd5:	90                   	nop
ffff800000804cd6:	5d                   	pop    rbp
ffff800000804cd7:	c3                   	ret    

ffff800000804cd8 <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
void manage_proc(){
ffff800000804cd8:	f3 0f 1e fa          	endbr64 
ffff800000804cdc:	55                   	push   rbp
ffff800000804cdd:	48 89 e5             	mov    rbp,rsp
ffff800000804ce0:	41 57                	push   r15
ffff800000804ce2:	48 83 ec 18          	sub    rsp,0x18
ffff800000804ce6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804ce6 <manage_proc+0xe>
ffff800000804ced:	49 bb 4a 8d 11 00 00 	movabs r11,0x118d4a
ffff800000804cf4:	00 00 00 
ffff800000804cf7:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
    if(cur_proc!=-1)
ffff800000804cfa:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804d01:	ff ff ff 
ffff800000804d04:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804d08:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804d0a:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804d0d:	74 37                	je     ffff800000804d46 <manage_proc+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
        task[cur_proc].utime++;
ffff800000804d0f:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804d16:	ff ff ff 
ffff800000804d19:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804d1d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804d20:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804d27:	ff ff ff 
ffff800000804d2a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804d2e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804d30:	48 63 d2             	movsxd rdx,edx
ffff800000804d33:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804d3a:	48 01 ca             	add    rdx,rcx
ffff800000804d3d:	8b 4a 1c             	mov    ecx,DWORD PTR [rdx+0x1c]
ffff800000804d40:	83 c1 01             	add    ecx,0x1
ffff800000804d43:	89 4a 1c             	mov    DWORD PTR [rdx+0x1c],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000804d46:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804d4d:	ff ff ff 
ffff800000804d50:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804d54:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804d56:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804d59:	74 70                	je     ffff800000804dcb <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 1)
ffff800000804d5b:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804d62:	ff ff ff 
ffff800000804d65:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804d69:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804d6c:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804d73:	ff ff ff 
ffff800000804d76:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804d7a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804d7c:	48 63 d2             	movsxd rdx,edx
ffff800000804d7f:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804d86:	48 01 ca             	add    rdx,rcx
ffff800000804d89:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff800000804d8c:	83 fa 0a             	cmp    edx,0xa
ffff800000804d8f:	77 3a                	ja     ffff800000804dcb <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
ffff800000804d91:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804d98:	ff ff ff 
ffff800000804d9b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804d9f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804da2:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804da9:	ff ff ff 
ffff800000804dac:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804db0:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804db2:	48 63 d2             	movsxd rdx,edx
ffff800000804db5:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804dbc:	48 01 ca             	add    rdx,rcx
ffff800000804dbf:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000804dc2:	83 fa 02             	cmp    edx,0x2
ffff800000804dc5:	0f 84 bf 01 00 00    	je     ffff800000804f8a <manage_proc+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212
        if(cur_proc!=-1)
ffff800000804dcb:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804dd2:	ff ff ff 
ffff800000804dd5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804dd9:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804ddb:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804dde:	74 35                	je     ffff800000804e15 <manage_proc+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
            task[cur_proc].utime=0;
ffff800000804de0:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804de7:	ff ff ff 
ffff800000804dea:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804dee:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804df1:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804df8:	ff ff ff 
ffff800000804dfb:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804dff:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804e01:	48 63 d2             	movsxd rdx,edx
ffff800000804e04:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804e0b:	48 01 ca             	add    rdx,rcx
ffff800000804e0e:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:215
        //find
        int i=cur_proc+1;
ffff800000804e15:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804e1c:	ff ff ff 
ffff800000804e1f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804e23:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804e25:	83 c2 01             	add    edx,0x1
ffff800000804e28:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:216
        int times=0;
ffff800000804e2b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        //轮询，直到有一个符合条件
        while(times<10){
ffff800000804e32:	eb 7b                	jmp    ffff800000804eaf <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
ffff800000804e34:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804e3b:	ff ff ff 
ffff800000804e3e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804e42:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804e45:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000804e48:	48 63 d2             	movsxd rdx,edx
ffff800000804e4b:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804e52:	48 01 ca             	add    rdx,rcx
ffff800000804e55:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804e57:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804e5a:	74 3e                	je     ffff800000804e9a <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 1)
ffff800000804e5c:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804e63:	ff ff ff 
ffff800000804e66:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804e6a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804e6d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000804e70:	48 63 d2             	movsxd rdx,edx
ffff800000804e73:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804e7a:	48 01 ca             	add    rdx,rcx
ffff800000804e7d:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000804e80:	83 fa 02             	cmp    edx,0x2
ffff800000804e83:	75 15                	jne    ffff800000804e9a <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 2)
ffff800000804e85:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804e8c:	ff ff ff 
ffff800000804e8f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804e93:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804e95:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff800000804e98:	75 21                	jne    ffff800000804ebb <manage_proc+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:222
                break;
            }
            i++;
ffff800000804e9a:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
            if(i>=MAX_TASKS){
ffff800000804e9e:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000804ea2:	7e 0b                	jle    ffff800000804eaf <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:224
                times++;
ffff800000804ea4:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:225
                i=0;
ffff800000804ea8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        while(times<10){
ffff800000804eaf:	83 7d e8 09          	cmp    DWORD PTR [rbp-0x18],0x9
ffff800000804eb3:	0f 8e 7b ff ff ff    	jle    ffff800000804e34 <manage_proc+0x15c>
ffff800000804eb9:	eb 01                	jmp    ffff800000804ebc <manage_proc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220
                break;
ffff800000804ebb:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff800000804ebc:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
ffff800000804ec0:	0f 84 c7 00 00 00    	je     ffff800000804f8d <manage_proc+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:230
        //switch
        task[cur_proc].stat=TASK_READY;
ffff800000804ec6:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804ecd:	ff ff ff 
ffff800000804ed0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804ed4:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804ed7:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804ede:	ff ff ff 
ffff800000804ee1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804ee5:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804ee7:	48 63 d2             	movsxd rdx,edx
ffff800000804eea:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804ef1:	48 01 ca             	add    rdx,rcx
ffff800000804ef4:	c7 42 18 02 00 00 00 	mov    DWORD PTR [rdx+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
        task[i].stat=TASK_RUNNING;
ffff800000804efb:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804f02:	ff ff ff 
ffff800000804f05:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f09:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804f0c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000804f0f:	48 63 d2             	movsxd rdx,edx
ffff800000804f12:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804f19:	48 01 ca             	add    rdx,rcx
ffff800000804f1c:	c7 42 18 01 00 00 00 	mov    DWORD PTR [rdx+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:232
        switch_to(&task[cur_proc], &task[i]);
ffff800000804f23:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804f2a:	ff ff ff 
ffff800000804f2d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f31:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804f34:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000804f37:	48 63 d2             	movsxd rdx,edx
ffff800000804f3a:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804f41:	48 01 d1             	add    rcx,rdx
ffff800000804f44:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804f4b:	ff ff ff 
ffff800000804f4e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f52:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000804f55:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804f5c:	ff ff ff 
ffff800000804f5f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f63:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f65:	48 63 d2             	movsxd rdx,edx
ffff800000804f68:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804f6f:	48 01 f2             	add    rdx,rsi
ffff800000804f72:	48 89 ce             	mov    rsi,rcx
ffff800000804f75:	48 89 d7             	mov    rdi,rdx
ffff800000804f78:	49 89 c7             	mov    r15,rax
ffff800000804f7b:	48 ba 3a 85 ee ff ff 	movabs rdx,0xffffffffffee853a
ffff800000804f82:	ff ff ff 
ffff800000804f85:	48 01 c2             	add    rdx,rax
ffff800000804f88:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:234
    }
    return;
ffff800000804f8a:	90                   	nop
ffff800000804f8b:	eb 01                	jmp    ffff800000804f8e <manage_proc+0x2b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff800000804f8d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
}
ffff800000804f8e:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000804f92:	c9                   	leave  
ffff800000804f93:	c3                   	ret    

ffff800000804f94 <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:238

void switch_proc_tss(int pnr)
{
ffff800000804f94:	f3 0f 1e fa          	endbr64 
ffff800000804f98:	55                   	push   rbp
ffff800000804f99:	48 89 e5             	mov    rbp,rsp
ffff800000804f9c:	41 57                	push   r15
ffff800000804f9e:	48 83 ec 28          	sub    rsp,0x28
ffff800000804fa2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804fa2 <switch_proc_tss+0xe>
ffff800000804fa9:	49 bb 8e 8a 11 00 00 	movabs r11,0x118a8e
ffff800000804fb0:	00 00 00 
ffff800000804fb3:	4c 01 d8             	add    rax,r11
ffff800000804fb6:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:239
    int sel=_TSS_IND(pnr)*8;
ffff800000804fb9:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000804fbc:	01 d2                	add    edx,edx
ffff800000804fbe:	83 c2 05             	add    edx,0x5
ffff800000804fc1:	c1 e2 03             	shl    edx,0x3
ffff800000804fc4:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:240
    cur_proc=pnr;
ffff800000804fc7:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804fce:	ff ff ff 
ffff800000804fd1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fd5:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff800000804fd8:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241
    switch_proc_asm(sel);
ffff800000804fda:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000804fdd:	89 d7                	mov    edi,edx
ffff800000804fdf:	49 89 c7             	mov    r15,rax
ffff800000804fe2:	48 ba 97 59 ef ff ff 	movabs rdx,0xffffffffffef5997
ffff800000804fe9:	ff ff ff 
ffff800000804fec:	48 01 c2             	add    rdx,rax
ffff800000804fef:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
}
ffff800000804ff1:	90                   	nop
ffff800000804ff2:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000804ff6:	c9                   	leave  
ffff800000804ff7:	c3                   	ret    

ffff800000804ff8 <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
void switch_proc(int pnr){
ffff800000804ff8:	f3 0f 1e fa          	endbr64 
ffff800000804ffc:	55                   	push   rbp
ffff800000804ffd:	48 89 e5             	mov    rbp,rsp
ffff800000805000:	41 57                	push   r15
ffff800000805002:	53                   	push   rbx
ffff800000805003:	48 81 ec 70 03 00 00 	sub    rsp,0x370
ffff80000080500a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080500a <switch_proc+0x12>
ffff800000805011:	49 bb 26 8a 11 00 00 	movabs r11,0x118a26
ffff800000805018:	00 00 00 
ffff80000080501b:	4c 01 db             	add    rbx,r11
ffff80000080501e:	89 bd 8c fc ff ff    	mov    DWORD PTR [rbp-0x374],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:246
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
ffff800000805024:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080502b:	ff ff ff 
ffff80000080502e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805032:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805035:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff80000080503b:	48 98                	cdqe   
ffff80000080503d:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805044:	48 01 c2             	add    rdx,rax
ffff800000805047:	48 8d 85 90 fc ff ff 	lea    rax,[rbp-0x370]
ffff80000080504e:	48 89 d6             	mov    rsi,rdx
ffff800000805051:	ba 6b 00 00 00       	mov    edx,0x6b
ffff800000805056:	48 89 c7             	mov    rdi,rax
ffff800000805059:	48 89 d1             	mov    rcx,rdx
ffff80000080505c:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:247
    save_context(&task[cur_proc].tss);
ffff80000080505f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805066:	ff ff ff 
ffff800000805069:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080506d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805070:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000805077:	ff ff ff 
ffff80000080507a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080507e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805080:	48 98                	cdqe   
ffff800000805082:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805089:	48 01 d0             	add    rax,rdx
ffff80000080508c:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff800000805092:	48 89 c7             	mov    rdi,rax
ffff800000805095:	49 89 df             	mov    r15,rbx
ffff800000805098:	48 b8 ee 76 ee ff ff 	movabs rax,0xffffffffffee76ee
ffff80000080509f:	ff ff ff 
ffff8000008050a2:	48 01 d8             	add    rax,rbx
ffff8000008050a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:252
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
ffff8000008050a7:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff8000008050ae:	ff ff ff 
ffff8000008050b1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008050b5:	8b 95 8c fc ff ff    	mov    edx,DWORD PTR [rbp-0x374]
ffff8000008050bb:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:253
    int sel=_TSS_IND(pnr)*8;
ffff8000008050bd:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff8000008050c3:	01 c0                	add    eax,eax
ffff8000008050c5:	83 c0 05             	add    eax,0x5
ffff8000008050c8:	c1 e0 03             	shl    eax,0x3
ffff8000008050cb:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:254
    switch_to(NULL, &task[pnr].tss);
ffff8000008050ce:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008050d5:	ff ff ff 
ffff8000008050d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008050dc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008050df:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff8000008050e5:	48 98                	cdqe   
ffff8000008050e7:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008050ee:	48 01 d0             	add    rax,rdx
ffff8000008050f1:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff8000008050f7:	48 89 c6             	mov    rsi,rax
ffff8000008050fa:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008050ff:	49 89 df             	mov    r15,rbx
ffff800000805102:	48 b8 3a 85 ee ff ff 	movabs rax,0xffffffffffee853a
ffff800000805109:	ff ff ff 
ffff80000080510c:	48 01 d8             	add    rax,rbx
ffff80000080510f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:257
    //asm volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
ffff800000805111:	90                   	nop
ffff800000805112:	48 81 c4 70 03 00 00 	add    rsp,0x370
ffff800000805119:	5b                   	pop    rbx
ffff80000080511a:	41 5f                	pop    r15
ffff80000080511c:	5d                   	pop    rbp
ffff80000080511d:	c3                   	ret    

ffff80000080511e <save_context>:
save_context():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:259
void save_context(TSS *tss)
{
ffff80000080511e:	f3 0f 1e fa          	endbr64 
ffff800000805122:	55                   	push   rbp
ffff800000805123:	48 89 e5             	mov    rbp,rsp
ffff800000805126:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805126 <save_context+0x8>
ffff80000080512d:	49 bb 0a 89 11 00 00 	movabs r11,0x11890a
ffff800000805134:	00 00 00 
ffff800000805137:	4c 01 d8             	add    rax,r11
ffff80000080513a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:270
//    tss->esi=scene_saver.esi;
//    tss->edi=scene_saver.edi;
//    tss->eflags=scene_saver.eflags;
//    tss->esp=scene_saver.esp;
//    tss->ebp=scene_saver.ebp;
}
ffff80000080513e:	90                   	nop
ffff80000080513f:	5d                   	pop    rbp
ffff800000805140:	c3                   	ret    

ffff800000805141 <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:431
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
ffff800000805141:	f3 0f 1e fa          	endbr64 
ffff800000805145:	55                   	push   rbp
ffff800000805146:	48 89 e5             	mov    rbp,rsp
ffff800000805149:	41 57                	push   r15
ffff80000080514b:	53                   	push   rbx
ffff80000080514c:	48 83 ec 60          	sub    rsp,0x60
ffff800000805150:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805150 <palloc+0xf>
ffff800000805157:	49 bb e0 88 11 00 00 	movabs r11,0x1188e0
ffff80000080515e:	00 00 00 
ffff800000805161:	4c 01 db             	add    rbx,r11
ffff800000805164:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff800000805167:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:432
    int page_c=size/4096+size%4096?1:0;
ffff80000080516a:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff80000080516d:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000805173:	85 c0                	test   eax,eax
ffff800000805175:	0f 48 c2             	cmovs  eax,edx
ffff800000805178:	c1 f8 0c             	sar    eax,0xc
ffff80000080517b:	89 c1                	mov    ecx,eax
ffff80000080517d:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff800000805180:	99                   	cdq    
ffff800000805181:	c1 ea 14             	shr    edx,0x14
ffff800000805184:	01 d0                	add    eax,edx
ffff800000805186:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080518b:	29 d0                	sub    eax,edx
ffff80000080518d:	01 c8                	add    eax,ecx
ffff80000080518f:	85 c0                	test   eax,eax
ffff800000805191:	0f 95 c0             	setne  al
ffff800000805194:	0f b6 c0             	movzx  eax,al
ffff800000805197:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433
    int c=0;
ffff80000080519a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434
    void *ptr=NULL;
ffff8000008051a1:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008051a8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:435
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
ffff8000008051a9:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008051b0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436
    pgind++;
ffff8000008051b1:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437
    for(int i=1;i<1024;i++)
ffff8000008051b6:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
ffff8000008051bd:	e9 07 03 00 00       	jmp    ffff8000008054c9 <palloc+0x388>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:439
    {
        page_item* tblp=*pgind&0xfffff000;
ffff8000008051c2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008051c6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008051c9:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff8000008051ce:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440
        for(int j=0;j<1024;j++)
ffff8000008051d2:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008051d9:	e9 d5 02 00 00       	jmp    ffff8000008054b3 <palloc+0x372>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:442
        {
            int v=*tblp&PAGE_PRESENT;
ffff8000008051de:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008051e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008051e5:	83 e0 01             	and    eax,0x1
ffff8000008051e8:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:443
            if(!v)
ffff8000008051eb:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff8000008051ef:	0f 85 b5 02 00 00    	jne    ffff8000008054aa <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:445
            {
                int new_pg=req_a_page();
ffff8000008051f5:	49 89 df             	mov    r15,rbx
ffff8000008051f8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008051fd:	48 ba f1 4f ee ff ff 	movabs rdx,0xffffffffffee4ff1
ffff800000805204:	ff ff ff 
ffff800000805207:	48 01 da             	add    rdx,rbx
ffff80000080520a:	ff d2                	call   rdx
ffff80000080520c:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
                if(new_pg==-1)
ffff80000080520f:	83 7d b8 ff          	cmp    DWORD PTR [rbp-0x48],0xffffffff
ffff800000805213:	0f 85 0c 01 00 00    	jne    ffff800000805325 <palloc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:449
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff800000805219:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805220:	ff ff ff 
ffff800000805223:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805227:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080522a:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080522d:	48 98                	cdqe   
ffff80000080522f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805236:	48 01 d0             	add    rax,rdx
ffff800000805239:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000805240:	0f b7 c0             	movzx  eax,ax
ffff800000805243:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:450
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff800000805246:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080524d:	ff ff ff 
ffff800000805250:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805254:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805257:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080525a:	48 98                	cdqe   
ffff80000080525c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805263:	48 01 d0             	add    rax,rdx
ffff800000805266:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff80000080526d:	0f b7 c0             	movzx  eax,ax
ffff800000805270:	c1 e0 10             	shl    eax,0x10
ffff800000805273:	25 00 00 0f 00       	and    eax,0xf0000
ffff800000805278:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:451
                    size+=c;
ffff80000080527b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080527e:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:452
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff800000805281:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805288:	ff ff ff 
ffff80000080528b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080528f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805292:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805295:	48 98                	cdqe   
ffff800000805297:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080529e:	48 01 d0             	add    rax,rdx
ffff8000008052a1:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
ffff8000008052a4:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:453
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff8000008052ab:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008052b2:	ff ff ff 
ffff8000008052b5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008052b9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008052bc:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008052bf:	48 98                	cdqe   
ffff8000008052c1:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008052c8:	48 01 d0             	add    rax,rdx
ffff8000008052cb:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008052d2:	0f b7 c0             	movzx  eax,ax
ffff8000008052d5:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:454
                    tmp_attr&=0xfff0;
ffff8000008052d8:	81 65 a0 f0 ff 00 00 	and    DWORD PTR [rbp-0x60],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:455
                    tmp_attr+=(size>>16)&0xf;
ffff8000008052df:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008052e2:	c1 e8 10             	shr    eax,0x10
ffff8000008052e5:	83 e0 0f             	and    eax,0xf
ffff8000008052e8:	89 c2                	mov    edx,eax
ffff8000008052ea:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffff8000008052ed:	01 d0                	add    eax,edx
ffff8000008052ef:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:456
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff8000008052f2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008052f9:	ff ff ff 
ffff8000008052fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805300:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805303:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805306:	48 98                	cdqe   
ffff800000805308:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080530f:	48 01 d0             	add    rax,rdx
ffff800000805312:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
ffff800000805315:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:457
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
ffff80000080531c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000805320:	e9 b6 01 00 00       	jmp    ffff8000008054db <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:459
                }
                int addr=get_phyaddr(new_pg);
ffff800000805325:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff800000805328:	89 c7                	mov    edi,eax
ffff80000080532a:	49 89 df             	mov    r15,rbx
ffff80000080532d:	48 b8 09 53 ee ff ff 	movabs rax,0xffffffffffee5309
ffff800000805334:	ff ff ff 
ffff800000805337:	48 01 d8             	add    rax,rbx
ffff80000080533a:	ff d0                	call   rax
ffff80000080533c:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:460
                set_page_item(tblp,addr,PAGE_PRESENT|\
ffff80000080533f:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
ffff800000805342:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805346:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080534b:	89 ce                	mov    esi,ecx
ffff80000080534d:	48 89 c7             	mov    rdi,rax
ffff800000805350:	49 89 df             	mov    r15,rbx
ffff800000805353:	48 b8 3d 53 ee ff ff 	movabs rax,0xffffffffffee533d
ffff80000080535a:	ff ff ff 
ffff80000080535d:	48 01 d8             	add    rax,rbx
ffff800000805360:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:462
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
ffff800000805362:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805365:	c1 e0 0a             	shl    eax,0xa
ffff800000805368:	89 c2                	mov    edx,eax
ffff80000080536a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080536d:	01 d0                	add    eax,edx
ffff80000080536f:	c1 e0 0c             	shl    eax,0xc
ffff800000805372:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:463
                if(ptr==NULL)
ffff800000805375:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080537a:	75 13                	jne    ffff80000080538f <palloc+0x24e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:466
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
ffff80000080537c:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000805383:	ff ff ff 
ffff800000805386:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080538a:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
ffff80000080538d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:468
                }
                page_c--;
ffff80000080538f:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                c++;
ffff800000805393:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                if(page_c==0)
ffff800000805397:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080539b:	0f 85 09 01 00 00    	jne    ffff8000008054aa <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:473
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff8000008053a1:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008053a8:	ff ff ff 
ffff8000008053ab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008053af:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008053b2:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008053b5:	48 98                	cdqe   
ffff8000008053b7:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008053be:	48 01 d0             	add    rax,rdx
ffff8000008053c1:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff8000008053c8:	0f b7 c0             	movzx  eax,ax
ffff8000008053cb:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:474
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff8000008053ce:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008053d5:	ff ff ff 
ffff8000008053d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008053dc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008053df:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008053e2:	48 98                	cdqe   
ffff8000008053e4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008053eb:	48 01 d0             	add    rax,rdx
ffff8000008053ee:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008053f5:	0f b7 c0             	movzx  eax,ax
ffff8000008053f8:	c1 e0 10             	shl    eax,0x10
ffff8000008053fb:	25 00 00 0f 00       	and    eax,0xf0000
ffff800000805400:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:475
                    size+=c;
ffff800000805403:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000805406:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:476
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff800000805409:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805410:	ff ff ff 
ffff800000805413:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805417:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080541a:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080541d:	48 98                	cdqe   
ffff80000080541f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805426:	48 01 d0             	add    rax,rdx
ffff800000805429:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080542c:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:477
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff800000805433:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080543a:	ff ff ff 
ffff80000080543d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805441:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805444:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805447:	48 98                	cdqe   
ffff800000805449:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805450:	48 01 d0             	add    rax,rdx
ffff800000805453:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff80000080545a:	0f b7 c0             	movzx  eax,ax
ffff80000080545d:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:478
                    tmp_attr&=0xfff0;
ffff800000805460:	81 65 a8 f0 ff 00 00 	and    DWORD PTR [rbp-0x58],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:479
                    tmp_attr+=(size>>16)&0xf;
ffff800000805467:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080546a:	c1 e8 10             	shr    eax,0x10
ffff80000080546d:	83 e0 0f             	and    eax,0xf
ffff800000805470:	89 c2                	mov    edx,eax
ffff800000805472:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
ffff800000805475:	01 d0                	add    eax,edx
ffff800000805477:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:480
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff80000080547a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805481:	ff ff ff 
ffff800000805484:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805488:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080548b:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080548e:	48 98                	cdqe   
ffff800000805490:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805497:	48 01 d0             	add    rax,rdx
ffff80000080549a:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffff80000080549d:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:481
                    return ptr;
ffff8000008054a4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008054a8:	eb 31                	jmp    ffff8000008054db <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:484 (discriminator 2)
                }
            }
            tblp++;
ffff8000008054aa:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440 (discriminator 2)
        for(int j=0;j<1024;j++)
ffff8000008054af:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440 (discriminator 1)
ffff8000008054b3:	81 7d cc ff 03 00 00 	cmp    DWORD PTR [rbp-0x34],0x3ff
ffff8000008054ba:	0f 8e 1e fd ff ff    	jle    ffff8000008051de <palloc+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:486 (discriminator 2)
        }
        pgind++;
ffff8000008054c0:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437 (discriminator 2)
    for(int i=1;i<1024;i++)
ffff8000008054c5:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437 (discriminator 1)
ffff8000008054c9:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
ffff8000008054d0:	0f 8e ec fc ff ff    	jle    ffff8000008051c2 <palloc+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:488
    }
    return NULL;
ffff8000008054d6:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:489
}
ffff8000008054db:	48 83 c4 60          	add    rsp,0x60
ffff8000008054df:	5b                   	pop    rbx
ffff8000008054e0:	41 5f                	pop    r15
ffff8000008054e2:	5d                   	pop    rbp
ffff8000008054e3:	c3                   	ret    

ffff8000008054e4 <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:492
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
ffff8000008054e4:	f3 0f 1e fa          	endbr64 
ffff8000008054e8:	55                   	push   rbp
ffff8000008054e9:	48 89 e5             	mov    rbp,rsp
ffff8000008054ec:	41 57                	push   r15
ffff8000008054ee:	48 83 ec 18          	sub    rsp,0x18
ffff8000008054f2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008054f2 <malloc+0xe>
ffff8000008054f9:	49 bb 3e 85 11 00 00 	movabs r11,0x11853e
ffff800000805500:	00 00 00 
ffff800000805503:	4c 01 d8             	add    rax,r11
ffff800000805506:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:493
    return palloc(cur_proc,size);
ffff800000805509:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000805510:	ff ff ff 
ffff800000805513:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805517:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805519:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080551c:	89 ce                	mov    esi,ecx
ffff80000080551e:	89 d7                	mov    edi,edx
ffff800000805520:	49 89 c7             	mov    r15,rax
ffff800000805523:	48 ba 11 77 ee ff ff 	movabs rdx,0xffffffffffee7711
ffff80000080552a:	ff ff ff 
ffff80000080552d:	48 01 c2             	add    rdx,rax
ffff800000805530:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:494
}
ffff800000805532:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000805536:	c9                   	leave  
ffff800000805537:	c3                   	ret    

ffff800000805538 <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:496
void proc_end()
{
ffff800000805538:	f3 0f 1e fa          	endbr64 
ffff80000080553c:	55                   	push   rbp
ffff80000080553d:	48 89 e5             	mov    rbp,rsp
ffff800000805540:	41 57                	push   r15
ffff800000805542:	53                   	push   rbx
ffff800000805543:	48 83 ec 10          	sub    rsp,0x10
ffff800000805547:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805547 <proc_end+0xf>
ffff80000080554e:	49 bb e9 84 11 00 00 	movabs r11,0x1184e9
ffff800000805555:	00 00 00 
ffff800000805558:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:498
    int ret;
    asm volatile("mov %%eax,%0":"=m"(ret));
ffff80000080555b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:502
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //asm volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
ffff80000080555e:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000805565:	ff ff ff 
ffff800000805568:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080556c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080556e:	89 c7                	mov    edi,eax
ffff800000805570:	49 89 df             	mov    r15,rbx
ffff800000805573:	48 b8 4f 7c ee ff ff 	movabs rax,0xffffffffffee7c4f
ffff80000080557a:	ff ff ff 
ffff80000080557d:	48 01 d8             	add    rax,rbx
ffff800000805580:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:503
    if(task[cur_proc].parent_pid!=-1){
ffff800000805582:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805589:	ff ff ff 
ffff80000080558c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805590:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805593:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080559a:	ff ff ff 
ffff80000080559d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055a1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008055a3:	48 98                	cdqe   
ffff8000008055a5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008055ac:	48 01 d0             	add    rax,rdx
ffff8000008055af:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff8000008055b5:	83 f8 ff             	cmp    eax,0xffffffff
ffff8000008055b8:	0f 84 a0 00 00 00    	je     ffff80000080565e <proc_end+0x126>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:504
        task[task[cur_proc].parent_pid].stat=TASK_READY;
ffff8000008055be:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008055c5:	ff ff ff 
ffff8000008055c8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055cc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008055cf:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008055d6:	ff ff ff 
ffff8000008055d9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055dd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008055e0:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff8000008055e7:	ff ff ff 
ffff8000008055ea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055ee:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008055f0:	48 98                	cdqe   
ffff8000008055f2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008055f9:	48 01 c8             	add    rax,rcx
ffff8000008055fc:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000805602:	89 c0                	mov    eax,eax
ffff800000805604:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080560b:	48 01 d0             	add    rax,rdx
ffff80000080560e:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:505
        switch_proc_tss(task[cur_proc].parent_pid);
ffff800000805615:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080561c:	ff ff ff 
ffff80000080561f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805623:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805626:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080562d:	ff ff ff 
ffff800000805630:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805634:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805636:	48 98                	cdqe   
ffff800000805638:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080563f:	48 01 d0             	add    rax,rdx
ffff800000805642:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000805648:	89 c7                	mov    edi,eax
ffff80000080564a:	49 89 df             	mov    r15,rbx
ffff80000080564d:	48 b8 64 75 ee ff ff 	movabs rax,0xffffffffffee7564
ffff800000805654:	ff ff ff 
ffff800000805657:	48 01 d8             	add    rax,rbx
ffff80000080565a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
ffff80000080565c:	eb 17                	jmp    ffff800000805675 <proc_end+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:508
        switch_proc_tss(0);
ffff80000080565e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805663:	49 89 df             	mov    r15,rbx
ffff800000805666:	48 b8 64 75 ee ff ff 	movabs rax,0xffffffffffee7564
ffff80000080566d:	ff ff ff 
ffff800000805670:	48 01 d8             	add    rax,rbx
ffff800000805673:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
}
ffff800000805675:	90                   	nop
ffff800000805676:	48 83 c4 10          	add    rsp,0x10
ffff80000080567a:	5b                   	pop    rbx
ffff80000080567b:	41 5f                	pop    r15
ffff80000080567d:	5d                   	pop    rbp
ffff80000080567e:	c3                   	ret    

ffff80000080567f <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:512
void del_proc(int pnr)
{
ffff80000080567f:	f3 0f 1e fa          	endbr64 
ffff800000805683:	55                   	push   rbp
ffff800000805684:	48 89 e5             	mov    rbp,rsp
ffff800000805687:	41 57                	push   r15
ffff800000805689:	53                   	push   rbx
ffff80000080568a:	48 83 ec 20          	sub    rsp,0x20
ffff80000080568e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080568e <del_proc+0xf>
ffff800000805695:	49 bb a2 83 11 00 00 	movabs r11,0x1183a2
ffff80000080569c:	00 00 00 
ffff80000080569f:	4c 01 db             	add    rbx,r11
ffff8000008056a2:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:513
    task[pnr].stat=TASK_ZOMBIE;
ffff8000008056a5:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008056ac:	ff ff ff 
ffff8000008056af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008056b3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008056b6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008056b9:	48 98                	cdqe   
ffff8000008056bb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008056c2:	48 01 d0             	add    rax,rdx
ffff8000008056c5:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:516
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
ffff8000008056cc:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008056d3:	ff ff ff 
ffff8000008056d6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008056da:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008056dd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008056e0:	48 98                	cdqe   
ffff8000008056e2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008056e9:	48 01 d0             	add    rax,rdx
ffff8000008056ec:	48 89 c7             	mov    rdi,rax
ffff8000008056ef:	49 89 df             	mov    r15,rbx
ffff8000008056f2:	48 b8 b6 92 ee ff ff 	movabs rax,0xffffffffffee92b6
ffff8000008056f9:	ff ff ff 
ffff8000008056fc:	48 01 d8             	add    rax,rbx
ffff8000008056ff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:518
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
ffff800000805701:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805708:	ff ff ff 
ffff80000080570b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080570f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805712:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805715:	48 98                	cdqe   
ffff800000805717:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080571e:	48 01 d0             	add    rax,rdx
ffff800000805721:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000805728:	48 89 c7             	mov    rdi,rax
ffff80000080572b:	49 89 df             	mov    r15,rbx
ffff80000080572e:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000805735:	ff ff ff 
ffff800000805738:	48 01 d8             	add    rax,rbx
ffff80000080573b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff80000080573d:	c7 45 ec 03 00 00 00 	mov    DWORD PTR [rbp-0x14],0x3
ffff800000805744:	eb 4f                	jmp    ffff800000805795 <del_proc+0x116>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521
        if(task[pnr].openf[i]){
ffff800000805746:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080574d:	ff ff ff 
ffff800000805750:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805754:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805757:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080575a:	48 98                	cdqe   
ffff80000080575c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805763:	48 01 d0             	add    rax,rdx
ffff800000805766:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805769:	48 63 d2             	movsxd rdx,edx
ffff80000080576c:	48 83 c2 1e          	add    rdx,0x1e
ffff800000805770:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000805775:	48 85 c0             	test   rax,rax
ffff800000805778:	74 17                	je     ffff800000805791 <del_proc+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
            sys_close(i);
ffff80000080577a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080577d:	89 c7                	mov    edi,eax
ffff80000080577f:	49 89 df             	mov    r15,rbx
ffff800000805782:	48 b8 4a e3 ee ff ff 	movabs rax,0xffffffffffeee34a
ffff800000805789:	ff ff ff 
ffff80000080578c:	48 01 d8             	add    rax,rbx
ffff80000080578f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000805791:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520 (discriminator 1)
ffff800000805795:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000805799:	7e ab                	jle    ffff800000805746 <del_proc+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:526
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
ffff80000080579b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008057a2:	ff ff ff 
ffff8000008057a5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057a9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008057ac:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008057af:	48 98                	cdqe   
ffff8000008057b1:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008057b8:	48 01 d0             	add    rax,rdx
ffff8000008057bb:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff8000008057be:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008057c5:	ff ff ff 
ffff8000008057c8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057cc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008057cf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008057d2:	48 98                	cdqe   
ffff8000008057d4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008057db:	48 01 c8             	add    rax,rcx
ffff8000008057de:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008057e0:	39 c2                	cmp    edx,eax
ffff8000008057e2:	75 79                	jne    ffff80000080585d <del_proc+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:528
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
ffff8000008057e4:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008057e9:	be 02 00 00 00       	mov    esi,0x2
ffff8000008057ee:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008057f3:	49 89 df             	mov    r15,rbx
ffff8000008057f6:	48 b8 43 a0 ee ff ff 	movabs rax,0xffffffffffeea043
ffff8000008057fd:	ff ff ff 
ffff800000805800:	48 01 d8             	add    rax,rbx
ffff800000805803:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:529
        sys_close(0);
ffff800000805805:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080580a:	49 89 df             	mov    r15,rbx
ffff80000080580d:	48 b8 4a e3 ee ff ff 	movabs rax,0xffffffffffeee34a
ffff800000805814:	ff ff ff 
ffff800000805817:	48 01 d8             	add    rax,rbx
ffff80000080581a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:530
        sys_close(1);
ffff80000080581c:	bf 01 00 00 00       	mov    edi,0x1
ffff800000805821:	49 89 df             	mov    r15,rbx
ffff800000805824:	48 b8 4a e3 ee ff ff 	movabs rax,0xffffffffffeee34a
ffff80000080582b:	ff ff ff 
ffff80000080582e:	48 01 d8             	add    rax,rbx
ffff800000805831:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:531
        sys_close(2);
ffff800000805833:	bf 02 00 00 00       	mov    edi,0x2
ffff800000805838:	49 89 df             	mov    r15,rbx
ffff80000080583b:	48 b8 4a e3 ee ff ff 	movabs rax,0xffffffffffeee34a
ffff800000805842:	ff ff ff 
ffff800000805845:	48 01 d8             	add    rax,rbx
ffff800000805848:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080584a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000805851:	eb 04                	jmp    ffff800000805857 <del_proc+0x1d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533 (discriminator 3)
ffff800000805853:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533 (discriminator 1)
ffff800000805857:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff80000080585b:	7e f6                	jle    ffff800000805853 <del_proc+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
ffff80000080585d:	90                   	nop
ffff80000080585e:	48 83 c4 20          	add    rsp,0x20
ffff800000805862:	5b                   	pop    rbx
ffff800000805863:	41 5f                	pop    r15
ffff800000805865:	5d                   	pop    rbp
ffff800000805866:	c3                   	ret    

ffff800000805867 <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:546

int set_proc_stat(int pid,int stat)
{
ffff800000805867:	f3 0f 1e fa          	endbr64 
ffff80000080586b:	55                   	push   rbp
ffff80000080586c:	48 89 e5             	mov    rbp,rsp
ffff80000080586f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080586f <set_proc_stat+0x8>
ffff800000805876:	49 bb c1 81 11 00 00 	movabs r11,0x1181c1
ffff80000080587d:	00 00 00 
ffff800000805880:	4c 01 d8             	add    rax,r11
ffff800000805883:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000805886:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547
    if(pid==-1)return -1;
ffff800000805889:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff80000080588d:	75 0a                	jne    ffff800000805899 <set_proc_stat+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547 (discriminator 1)
ffff80000080588f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805894:	e9 b9 00 00 00       	jmp    ffff800000805952 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:548
    int i=0;
ffff800000805899:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549
    for(;task[i].pid!=pid;i++);
ffff8000008058a0:	eb 04                	jmp    ffff8000008058a6 <set_proc_stat+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549 (discriminator 2)
ffff8000008058a2:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549 (discriminator 1)
ffff8000008058a6:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008058ad:	ff ff ff 
ffff8000008058b0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008058b4:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008058b7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008058ba:	48 63 d2             	movsxd rdx,edx
ffff8000008058bd:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008058c4:	48 01 ca             	add    rdx,rcx
ffff8000008058c7:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff8000008058c9:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008058cc:	39 d1                	cmp    ecx,edx
ffff8000008058ce:	75 d2                	jne    ffff8000008058a2 <set_proc_stat+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550
    if(i==MAX_PROC_COUNT)return -1;
ffff8000008058d0:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff8000008058d4:	75 07                	jne    ffff8000008058dd <set_proc_stat+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550 (discriminator 1)
ffff8000008058d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008058db:	eb 75                	jmp    ffff800000805952 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:551
    task[i].stat=stat;
ffff8000008058dd:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008058e4:	ff ff ff 
ffff8000008058e7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008058eb:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008058ee:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008058f1:	48 63 d2             	movsxd rdx,edx
ffff8000008058f4:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008058fb:	48 01 d1             	add    rcx,rdx
ffff8000008058fe:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805901:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:553
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
ffff800000805904:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff80000080590b:	ff ff ff 
ffff80000080590e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805912:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805914:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000805917:	75 34                	jne    ffff80000080594d <set_proc_stat+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:554
        task[cur_proc].utime=MAX_UTIME;
ffff800000805919:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805920:	ff ff ff 
ffff800000805923:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805927:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080592a:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000805931:	ff ff ff 
ffff800000805934:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805938:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080593a:	48 98                	cdqe   
ffff80000080593c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805943:	48 01 c8             	add    rax,rcx
ffff800000805946:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:555
    return 0;
ffff80000080594d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:556
}
ffff800000805952:	5d                   	pop    rbp
ffff800000805953:	c3                   	ret    

ffff800000805954 <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:588
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
ffff800000805954:	f3 0f 1e fa          	endbr64 
ffff800000805958:	55                   	push   rbp
ffff800000805959:	48 89 e5             	mov    rbp,rsp
ffff80000080595c:	41 57                	push   r15
ffff80000080595e:	53                   	push   rbx
ffff80000080595f:	48 83 ec 10          	sub    rsp,0x10
ffff800000805963:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805963 <sys_exit+0xf>
ffff80000080596a:	49 bb cd 80 11 00 00 	movabs r11,0x1180cd
ffff800000805971:	00 00 00 
ffff800000805974:	4c 01 db             	add    rbx,r11
ffff800000805977:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:589
    current->exit_code=code;
ffff80000080597a:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000805981:	ff ff ff 
ffff800000805984:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805988:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080598b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080598e:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:590
    del_proc(cur_proc);
ffff800000805991:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000805998:	ff ff ff 
ffff80000080599b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080599f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008059a1:	89 c7                	mov    edi,eax
ffff8000008059a3:	49 89 df             	mov    r15,rbx
ffff8000008059a6:	48 b8 4f 7c ee ff ff 	movabs rax,0xffffffffffee7c4f
ffff8000008059ad:	ff ff ff 
ffff8000008059b0:	48 01 d8             	add    rax,rbx
ffff8000008059b3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:592 (discriminator 1)
    while(1)
        manage_proc();
ffff8000008059b5:	49 89 df             	mov    r15,rbx
ffff8000008059b8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008059bd:	48 ba a8 72 ee ff ff 	movabs rdx,0xffffffffffee72a8
ffff8000008059c4:	ff ff ff 
ffff8000008059c7:	48 01 da             	add    rdx,rbx
ffff8000008059ca:	ff d2                	call   rdx
ffff8000008059cc:	eb e7                	jmp    ffff8000008059b5 <sys_exit+0x61>

ffff8000008059ce <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:648
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
ffff8000008059ce:	f3 0f 1e fa          	endbr64 
ffff8000008059d2:	55                   	push   rbp
ffff8000008059d3:	48 89 e5             	mov    rbp,rsp
ffff8000008059d6:	41 57                	push   r15
ffff8000008059d8:	41 54                	push   r12
ffff8000008059da:	53                   	push   rbx
ffff8000008059db:	48 83 ec 48          	sub    rsp,0x48
ffff8000008059df:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008059df <reg_proc+0x11>
ffff8000008059e6:	49 bb 51 80 11 00 00 	movabs r11,0x118051
ffff8000008059ed:	00 00 00 
ffff8000008059f0:	4c 01 db             	add    rbx,r11
ffff8000008059f3:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff8000008059f7:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff8000008059fb:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:650
    
    int i=req_proc();
ffff8000008059ff:	49 89 df             	mov    r15,rbx
ffff800000805a02:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805a07:	48 ba 1c 6f ee ff ff 	movabs rdx,0xffffffffffee6f1c
ffff800000805a0e:	ff ff ff 
ffff800000805a11:	48 01 da             	add    rdx,rbx
ffff800000805a14:	ff d2                	call   rdx
ffff800000805a16:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651
    if(i==-1)return -1;
ffff800000805a19:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000805a1d:	75 0a                	jne    ffff800000805a29 <reg_proc+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651 (discriminator 1)
ffff800000805a1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805a24:	e9 7e 02 00 00       	jmp    ffff800000805ca7 <reg_proc+0x2d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:654

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
ffff800000805a29:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000805a2d:	48 83 ec 08          	sub    rsp,0x8
ffff800000805a31:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805a34:	52                   	push   rdx
ffff800000805a35:	6a 00                	push   0x0
ffff800000805a37:	50                   	push   rax
ffff800000805a38:	6a 00                	push   0x0
ffff800000805a3a:	6a 00                	push   0x0
ffff800000805a3c:	6a 00                	push   0x0
ffff800000805a3e:	68 00 f0 ff ff       	push   0xfffffffffffff000
ffff800000805a43:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
ffff800000805a4a:	00 
ffff800000805a4b:	6a 28                	push   0x28
ffff800000805a4d:	6a 28                	push   0x28
ffff800000805a4f:	6a 28                	push   0x28
ffff800000805a51:	6a 28                	push   0x28
ffff800000805a53:	41 b9 30 00 00 00    	mov    r9d,0x30
ffff800000805a59:	41 b8 28 00 00 00    	mov    r8d,0x28
ffff800000805a5f:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000805a64:	ba 00 00 00 00       	mov    edx,0x0
ffff800000805a69:	be 00 00 00 00       	mov    esi,0x0
ffff800000805a6e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805a73:	49 89 df             	mov    r15,rbx
ffff800000805a76:	48 b8 6d 70 ee ff ff 	movabs rax,0xffffffffffee706d
ffff800000805a7d:	ff ff ff 
ffff800000805a80:	48 01 d8             	add    rax,rbx
ffff800000805a83:	ff d0                	call   rax
ffff800000805a85:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:656
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc();
ffff800000805a89:	49 89 df             	mov    r15,rbx
ffff800000805a8c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805a91:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000805a98:	ff ff ff 
ffff800000805a9b:	48 01 da             	add    rdx,rbx
ffff800000805a9e:	ff d2                	call   rdx
ffff800000805aa0:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805aa7:	ff ff ff 
ffff800000805aaa:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000805aae:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805ab1:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805ab4:	48 63 d2             	movsxd rdx,edx
ffff800000805ab7:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805abe:	48 01 ca             	add    rdx,rcx
ffff800000805ac1:	48 89 82 e0 00 00 00 	mov    QWORD PTR [rdx+0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:657
    task[i].pml4[0]= kmalloc();
ffff800000805ac8:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805acf:	ff ff ff 
ffff800000805ad2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805ad6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805ad9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805adc:	48 98                	cdqe   
ffff800000805ade:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805ae5:	48 01 d0             	add    rax,rdx
ffff800000805ae8:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000805aef:	49 89 df             	mov    r15,rbx
ffff800000805af2:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805af7:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000805afe:	ff ff ff 
ffff800000805b01:	48 01 da             	add    rdx,rbx
ffff800000805b04:	ff d2                	call   rdx
ffff800000805b06:	49 89 04 24          	mov    QWORD PTR [r12],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:658
    unsigned long *pdpt=task[i].pml4;
ffff800000805b0a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805b11:	ff ff ff 
ffff800000805b14:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b18:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805b1b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805b1e:	48 98                	cdqe   
ffff800000805b20:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805b27:	48 01 d0             	add    rax,rdx
ffff800000805b2a:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000805b31:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:660
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
ffff800000805b35:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805b39:	ba 03 00 00 00       	mov    edx,0x3
ffff800000805b3e:	be 00 00 00 00       	mov    esi,0x0
ffff800000805b43:	48 89 c7             	mov    rdi,rax
ffff800000805b46:	49 89 df             	mov    r15,rbx
ffff800000805b49:	48 b8 a2 53 ee ff ff 	movabs rax,0xffffffffffee53a2
ffff800000805b50:	ff ff ff 
ffff800000805b53:	48 01 d8             	add    rax,rbx
ffff800000805b56:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:663

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc();
ffff800000805b58:	49 89 df             	mov    r15,rbx
ffff800000805b5b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805b60:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000805b67:	ff ff ff 
ffff800000805b6a:	48 01 da             	add    rdx,rbx
ffff800000805b6d:	ff d2                	call   rdx
ffff800000805b6f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:664
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
ffff800000805b73:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805b77:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805b7b:	48 83 c0 18          	add    rax,0x18
ffff800000805b7f:	48 83 ca 07          	or     rdx,0x7
ffff800000805b83:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:665
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
ffff800000805b86:	49 89 df             	mov    r15,rbx
ffff800000805b89:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805b8e:	48 ba f1 4f ee ff ff 	movabs rdx,0xffffffffffee4ff1
ffff800000805b95:	ff ff ff 
ffff800000805b98:	48 01 da             	add    rdx,rbx
ffff800000805b9b:	ff d2                	call   rdx
ffff800000805b9d:	89 c7                	mov    edi,eax
ffff800000805b9f:	49 89 df             	mov    r15,rbx
ffff800000805ba2:	48 b8 09 53 ee ff ff 	movabs rax,0xffffffffffee5309
ffff800000805ba9:	ff ff ff 
ffff800000805bac:	48 01 d8             	add    rax,rbx
ffff800000805baf:	ff d0                	call   rax
ffff800000805bb1:	89 c1                	mov    ecx,eax
ffff800000805bb3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805bb7:	48 05 f8 0f 00 00    	add    rax,0xff8
ffff800000805bbd:	ba 06 00 00 00       	mov    edx,0x6
ffff800000805bc2:	89 ce                	mov    esi,ecx
ffff800000805bc4:	48 89 c7             	mov    rdi,rax
ffff800000805bc7:	49 89 df             	mov    r15,rbx
ffff800000805bca:	48 b8 0d 54 ee ff ff 	movabs rax,0xffffffffffee540d
ffff800000805bd1:	ff ff ff 
ffff800000805bd4:	48 01 d8             	add    rax,rbx
ffff800000805bd7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:666
    task[i].regs.cr3=task[i].pml4;
ffff800000805bd9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805be0:	ff ff ff 
ffff800000805be3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805be7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805bea:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805bed:	48 98                	cdqe   
ffff800000805bef:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805bf6:	48 01 d0             	add    rax,rdx
ffff800000805bf9:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000805c00:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805c07:	ff ff ff 
ffff800000805c0a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805c0e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805c11:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805c14:	48 98                	cdqe   
ffff800000805c16:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805c1d:	48 01 c8             	add    rax,rcx
ffff800000805c20:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:668

    task[i].stat=TASK_READY;
ffff800000805c27:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805c2e:	ff ff ff 
ffff800000805c31:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805c35:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805c38:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805c3b:	48 98                	cdqe   
ffff800000805c3d:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805c44:	48 01 d0             	add    rax,rdx
ffff800000805c47:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:669
    task[i].cwd=cwd;
ffff800000805c4e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805c55:	ff ff ff 
ffff800000805c58:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805c5c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805c5f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805c62:	48 98                	cdqe   
ffff800000805c64:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805c6b:	48 01 c2             	add    rdx,rax
ffff800000805c6e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000805c72:	48 89 82 e8 00 00 00 	mov    QWORD PTR [rdx+0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:670
    task[i].exef=exef;
ffff800000805c79:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805c80:	ff ff ff 
ffff800000805c83:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805c87:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805c8a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805c8d:	48 98                	cdqe   
ffff800000805c8f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805c96:	48 01 c2             	add    rdx,rax
ffff800000805c99:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000805c9d:	48 89 82 f0 00 00 00 	mov    QWORD PTR [rdx+0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:672

    return i;
ffff800000805ca4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:727
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
ffff800000805ca7:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff800000805cab:	5b                   	pop    rbx
ffff800000805cac:	41 5c                	pop    r12
ffff800000805cae:	41 5f                	pop    r15
ffff800000805cb0:	5d                   	pop    rbp
ffff800000805cb1:	c3                   	ret    

ffff800000805cb2 <sys_malloc>:
sys_malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:730

void * sys_malloc(size_t size)
{
ffff800000805cb2:	f3 0f 1e fa          	endbr64 
ffff800000805cb6:	55                   	push   rbp
ffff800000805cb7:	48 89 e5             	mov    rbp,rsp
ffff800000805cba:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805cba <sys_malloc+0x8>
ffff800000805cc1:	49 bb 76 7d 11 00 00 	movabs r11,0x117d76
ffff800000805cc8:	00 00 00 
ffff800000805ccb:	4c 01 d8             	add    rax,r11
ffff800000805cce:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747
    void *data=current->mem_struct.heap_top;
    current->mem_struct.heap_top=new_heaptop;
    return data; */
    

    int n=size/CHUNK_SIZE+size%CHUNK_SIZE?1:0;
ffff800000805cd2:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805cd6:	48 89 d1             	mov    rcx,rdx
ffff800000805cd9:	48 c1 e9 0c          	shr    rcx,0xc
ffff800000805cdd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805ce1:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff800000805ce7:	48 01 ca             	add    rdx,rcx
ffff800000805cea:	48 85 d2             	test   rdx,rdx
ffff800000805ced:	0f 95 c2             	setne  dl
ffff800000805cf0:	0f b6 d2             	movzx  edx,dl
ffff800000805cf3:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:748
    chunk_header *hp=(chunk_header*)task[cur_proc].mem_struct.heap_base;
ffff800000805cf6:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805cfd:	ff ff ff 
ffff800000805d00:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805d04:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805d07:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000805d0e:	ff ff ff 
ffff800000805d11:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805d15:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805d17:	48 63 d2             	movsxd rdx,edx
ffff800000805d1a:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805d21:	48 01 ca             	add    rdx,rcx
ffff800000805d24:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000805d28:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000805d2c:	eb 0c                	jmp    ffff800000805d3a <sys_malloc+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:750
        hp=hp->next;
ffff800000805d2e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805d32:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000805d36:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000805d3a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805d3e:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000805d42:	48 85 d2             	test   rdx,rdx
ffff800000805d45:	74 16                	je     ffff800000805d5d <sys_malloc+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749 (discriminator 1)
ffff800000805d47:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805d4b:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff800000805d4e:	85 d2                	test   edx,edx
ffff800000805d50:	75 0b                	jne    ffff800000805d5d <sys_malloc+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749 (discriminator 2)
ffff800000805d52:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805d56:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805d58:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000805d5b:	7e d1                	jle    ffff800000805d2e <sys_malloc+0x7c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:751
    if(hp->pgn<n)
ffff800000805d5d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805d61:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805d63:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000805d66:	0f 8e b8 00 00 00    	jle    ffff800000805e24 <sys_malloc+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:754
    {
        //上抬heap top
        if(task[cur_proc].mem_struct.heap_top+CHUNK_SIZE*n>=HEAP_MAXTOP)
ffff800000805d6c:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805d73:	ff ff ff 
ffff800000805d76:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805d7a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805d7d:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000805d84:	ff ff ff 
ffff800000805d87:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805d8b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805d8d:	48 63 d2             	movsxd rdx,edx
ffff800000805d90:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805d97:	48 01 ca             	add    rdx,rcx
ffff800000805d9a:	48 8b 4a 30          	mov    rcx,QWORD PTR [rdx+0x30]
ffff800000805d9e:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805da1:	c1 e2 0c             	shl    edx,0xc
ffff800000805da4:	48 63 d2             	movsxd rdx,edx
ffff800000805da7:	48 01 ca             	add    rdx,rcx
ffff800000805daa:	48 81 fa ff ff ef 01 	cmp    rdx,0x1efffff
ffff800000805db1:	76 0a                	jbe    ffff800000805dbd <sys_malloc+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:757
        {
            //超过顶部
            return NULL;
ffff800000805db3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805db8:	e9 e0 00 00 00       	jmp    ffff800000805e9d <sys_malloc+0x1eb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:759
        }
        int needed=n-hp->pgn;
ffff800000805dbd:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805dc1:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805dc3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805dc6:	29 ca                	sub    edx,ecx
ffff800000805dc8:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:760
        char* p=task[cur_proc].mem_struct.heap_top;
ffff800000805dcb:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805dd2:	ff ff ff 
ffff800000805dd5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805dd9:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805ddc:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000805de3:	ff ff ff 
ffff800000805de6:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805dea:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805dec:	48 98                	cdqe   
ffff800000805dee:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805df5:	48 01 c8             	add    rax,rcx
ffff800000805df8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000805dfc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000805e00:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000805e07:	eb 13                	jmp    ffff800000805e1c <sys_malloc+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:763 (discriminator 3)
        {
            *p=0;//触发缺页中断
ffff800000805e09:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805e0d:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:764 (discriminator 3)
            p+=PAGE_SIZE;
ffff800000805e10:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
ffff800000805e17:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761 (discriminator 3)
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000805e18:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761 (discriminator 1)
ffff800000805e1c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805e1f:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
ffff800000805e22:	7c e5                	jl     ffff800000805e09 <sys_malloc+0x157>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:767
        }
    }
    if(hp->pgn>n)
ffff800000805e24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e28:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805e2a:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
ffff800000805e2d:	7d 59                	jge    ffff800000805e88 <sys_malloc+0x1d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:770
    {
        //在后面新建一个头
        char *p=hp;
ffff800000805e2f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e33:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:771
        p+=(n+1)*CHUNK_SIZE;//算上存储头一个
ffff800000805e37:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000805e3a:	83 c0 01             	add    eax,0x1
ffff800000805e3d:	c1 e0 0c             	shl    eax,0xc
ffff800000805e40:	48 98                	cdqe   
ffff800000805e42:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
        chunk_header *np=p;
ffff800000805e46:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805e4a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:773
        np->pgn=hp->pgn-n-1;
ffff800000805e4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e52:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805e54:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff800000805e57:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000805e5a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805e5e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:774
        np->next=hp->next;
ffff800000805e60:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e64:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000805e68:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805e6c:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:775
        np->prev=hp;
ffff800000805e70:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805e74:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805e78:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:776
        hp->next=np;
ffff800000805e7c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e80:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000805e84:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:778
    }
    hp->alloc=1;//分配完毕
ffff800000805e88:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e8c:	c7 40 04 01 00 00 00 	mov    DWORD PTR [rax+0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:779
    return (char*)hp+CHUNK_SIZE;//返回后边的第一个数据块地址
ffff800000805e93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e97:	48 05 00 10 00 00    	add    rax,0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:780
}
ffff800000805e9d:	5d                   	pop    rbp
ffff800000805e9e:	c3                   	ret    

ffff800000805e9f <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:782
int sys_free(int ptr)
{
ffff800000805e9f:	f3 0f 1e fa          	endbr64 
ffff800000805ea3:	55                   	push   rbp
ffff800000805ea4:	48 89 e5             	mov    rbp,rsp
ffff800000805ea7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805ea7 <sys_free+0x8>
ffff800000805eae:	49 bb 89 7b 11 00 00 	movabs r11,0x117b89
ffff800000805eb5:	00 00 00 
ffff800000805eb8:	4c 01 d8             	add    rax,r11
ffff800000805ebb:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:783
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
ffff800000805ebe:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805ec1:	2d 00 10 00 00       	sub    eax,0x1000
ffff800000805ec6:	48 98                	cdqe   
ffff800000805ec8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:784
    hp->alloc=0;    //合并
ffff800000805ecc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805ed0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:786
    //向后合并
    chunk_header *p=hp->next;
ffff800000805ed7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805edb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000805edf:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
    while(p!=NULL)
ffff800000805ee3:	eb 2e                	jmp    ffff800000805f13 <sys_free+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:789
    {
        if(p->alloc==0)
ffff800000805ee5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805ee9:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000805eec:	85 c0                	test   eax,eax
ffff800000805eee:	75 2c                	jne    ffff800000805f1c <sys_free+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:791
        {
            hp->pgn+=p->pgn+1;//把区域合并
ffff800000805ef0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805ef4:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000805ef6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805efa:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805efc:	83 c0 01             	add    eax,0x1
ffff800000805eff:	01 c2                	add    edx,eax
ffff800000805f01:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805f05:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:794
        }else
            break;
        p=p->next;
ffff800000805f07:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f0b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000805f0f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
    while(p!=NULL)
ffff800000805f13:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000805f18:	75 cb                	jne    ffff800000805ee5 <sys_free+0x46>
ffff800000805f1a:	eb 01                	jmp    ffff800000805f1d <sys_free+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:793
            break;
ffff800000805f1c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:797
    }
    //向前合并
    p=hp->prev;
ffff800000805f1d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805f21:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000805f25:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    while(p!=NULL)
ffff800000805f29:	eb 2e                	jmp    ffff800000805f59 <sys_free+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:800
    {
        if(p->alloc==0)
ffff800000805f2b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f2f:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000805f32:	85 c0                	test   eax,eax
ffff800000805f34:	75 2c                	jne    ffff800000805f62 <sys_free+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:802
        {
            p->pgn+=hp->pgn+1;//把区域合并
ffff800000805f36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f3a:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000805f3c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805f40:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805f42:	83 c0 01             	add    eax,0x1
ffff800000805f45:	01 c2                	add    edx,eax
ffff800000805f47:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f4b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:805
        }else
            break;
        p=p->prev;
ffff800000805f4d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f51:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000805f55:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    while(p!=NULL)
ffff800000805f59:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000805f5e:	75 cb                	jne    ffff800000805f2b <sys_free+0x8c>
ffff800000805f60:	eb 01                	jmp    ffff800000805f63 <sys_free+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:804
            break;
ffff800000805f62:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
    }
    //合并完成
    return 0;
ffff800000805f63:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:809
}
ffff800000805f68:	5d                   	pop    rbp
ffff800000805f69:	c3                   	ret    

ffff800000805f6a <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:811

void switch_to(struct process *from, struct process *to) {
ffff800000805f6a:	f3 0f 1e fa          	endbr64 
ffff800000805f6e:	55                   	push   rbp
ffff800000805f6f:	48 89 e5             	mov    rbp,rsp
ffff800000805f72:	53                   	push   rbx
ffff800000805f73:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805f73 <switch_to+0x9>
ffff800000805f7a:	49 bb bd 7a 11 00 00 	movabs r11,0x117abd
ffff800000805f81:	00 00 00 
ffff800000805f84:	4c 01 d8             	add    rax,r11
ffff800000805f87:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffff800000805f8b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:812
    cur_proc=to-task;
ffff800000805f8f:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805f96:	ff ff ff 
ffff800000805f99:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f9d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805fa0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000805fa4:	48 29 ca             	sub    rdx,rcx
ffff800000805fa7:	48 89 d1             	mov    rcx,rdx
ffff800000805faa:	48 c1 f9 03          	sar    rcx,0x3
ffff800000805fae:	48 ba 43 ac 28 8d 8f 	movabs rdx,0x77a04c8f8d28ac43
ffff800000805fb5:	4c a0 77 
ffff800000805fb8:	48 0f af d1          	imul   rdx,rcx
ffff800000805fbc:	89 d1                	mov    ecx,edx
ffff800000805fbe:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000805fc5:	ff ff ff 
ffff800000805fc8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805fcc:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:813
    current=&task[cur_proc];
ffff800000805fce:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805fd5:	ff ff ff 
ffff800000805fd8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805fdc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805fdf:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000805fe6:	ff ff ff 
ffff800000805fe9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805fed:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805fef:	48 63 d2             	movsxd rdx,edx
ffff800000805ff2:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805ff9:	48 01 ca             	add    rdx,rcx
ffff800000805ffc:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000806003:	ff ff ff 
ffff800000806006:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080600a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:815
    //cr3需要物理地址,regs.cr3里面填的就是物理地址
    asm volatile("mov %0,%%rax\n"
ffff80000080600d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806011:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
ffff800000806018:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:817
                 "mov %%rax,%%cr3\n":"=m"(to->regs.cr3));
    asm volatile("mov %%rsp,%0\r\n"
ffff80000080601b:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
ffff80000080601f:	4c 8b 55 f0          	mov    r10,QWORD PTR [rbp-0x10]
ffff800000806023:	4c 8b 5d f0          	mov    r11,QWORD PTR [rbp-0x10]
ffff800000806027:	48 8b 5d f0          	mov    rbx,QWORD PTR [rbp-0x10]
ffff80000080602b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080602f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806033:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000806037:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
ffff80000080603b:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffff80000080603f:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806043:	49 89 a1 9c 02 00 00 	mov    QWORD PTR [r9+0x29c],rsp
ffff80000080604a:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # ffff800000806075 <done>
ffff800000806051:	49 89 82 6c 02 00 00 	mov    QWORD PTR [r10+0x26c],rax
ffff800000806058:	41 8c a3 dc 02 00 00 	mov    WORD PTR [r11+0x2dc],fs
ffff80000080605f:	8c ab e4 02 00 00    	mov    WORD PTR [rbx+0x2e4],gs
ffff800000806065:	48 8b a1 9c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x29c]
ffff80000080606c:	41 ff b0 6c 02 00 00 	push   QWORD PTR [r8+0x26c]
ffff800000806073:	eb 08                	jmp    ffff80000080607d <__switch_to>

ffff800000806075 <done>:
ffff800000806075:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:831
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
ffff800000806076:	90                   	nop
ffff800000806077:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080607b:	c9                   	leave  
ffff80000080607c:	c3                   	ret    

ffff80000080607d <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:832
void __switch_to(struct process *from, struct process *to) {
ffff80000080607d:	f3 0f 1e fa          	endbr64 
ffff800000806081:	55                   	push   rbp
ffff800000806082:	48 89 e5             	mov    rbp,rsp
ffff800000806085:	41 57                	push   r15
ffff800000806087:	41 54                	push   r12
ffff800000806089:	53                   	push   rbx
ffff80000080608a:	48 83 ec 18          	sub    rsp,0x18
ffff80000080608e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080608e <__switch_to+0x11>
ffff800000806095:	49 bb a2 79 11 00 00 	movabs r11,0x1179a2
ffff80000080609c:	00 00 00 
ffff80000080609f:	4c 01 d8             	add    rax,r11
ffff8000008060a2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008060a6:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:833
    set_tss(to->tss.rsp0,to->tss.rsp1,to->tss.rsp2,to->tss.ists[0],to->tss.ists[1],
ffff8000008060aa:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008060ae:	4c 8b 9a 4c 02 00 00 	mov    r11,QWORD PTR [rdx+0x24c]
ffff8000008060b5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008060b9:	4c 8b 92 44 02 00 00 	mov    r10,QWORD PTR [rdx+0x244]
ffff8000008060c0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008060c4:	4c 8b 8a 3c 02 00 00 	mov    r9,QWORD PTR [rdx+0x23c]
ffff8000008060cb:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008060cf:	4c 8b 82 34 02 00 00 	mov    r8,QWORD PTR [rdx+0x234]
ffff8000008060d6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008060da:	4c 8b a2 2c 02 00 00 	mov    r12,QWORD PTR [rdx+0x22c]
ffff8000008060e1:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008060e5:	48 8b 9a 24 02 00 00 	mov    rbx,QWORD PTR [rdx+0x224]
ffff8000008060ec:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008060f0:	48 8b 8a 1c 02 00 00 	mov    rcx,QWORD PTR [rdx+0x21c]
ffff8000008060f7:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008060fb:	48 8b 92 0c 02 00 00 	mov    rdx,QWORD PTR [rdx+0x20c]
ffff800000806102:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806106:	48 8b b6 04 02 00 00 	mov    rsi,QWORD PTR [rsi+0x204]
ffff80000080610d:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffff800000806111:	48 8b bf fc 01 00 00 	mov    rdi,QWORD PTR [rdi+0x1fc]
ffff800000806118:	41 53                	push   r11
ffff80000080611a:	41 52                	push   r10
ffff80000080611c:	41 51                	push   r9
ffff80000080611e:	41 50                	push   r8
ffff800000806120:	4d 89 e1             	mov    r9,r12
ffff800000806123:	49 89 d8             	mov    r8,rbx
ffff800000806126:	49 89 c7             	mov    r15,rax
ffff800000806129:	49 ba 42 87 ee ff ff 	movabs r10,0xffffffffffee8742
ffff800000806130:	ff ff ff 
ffff800000806133:	49 01 c2             	add    r10,rax
ffff800000806136:	41 ff d2             	call   r10
ffff800000806139:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:835
            to->tss.ists[2],to->tss.ists[3],to->tss.ists[4],to->tss.ists[5],to->tss.ists[6]);
    asm volatile("mov %%fs,%0\r\n"
ffff80000080613d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806141:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806145:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000806149:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080614d:	8c a0 dc 02 00 00    	mov    WORD PTR [rax+0x2dc],fs
ffff800000806153:	8c ae e4 02 00 00    	mov    WORD PTR [rsi+0x2e4],gs
ffff800000806159:	8e a2 dc 02 00 00    	mov    fs,WORD PTR [rdx+0x2dc]
ffff80000080615f:	8e a9 e4 02 00 00    	mov    gs,WORD PTR [rcx+0x2e4]
ffff800000806165:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:841
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
ffff800000806166:	90                   	nop
ffff800000806167:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff80000080616b:	5b                   	pop    rbx
ffff80000080616c:	41 5c                	pop    r12
ffff80000080616e:	41 5f                	pop    r15
ffff800000806170:	5d                   	pop    rbp
ffff800000806171:	c3                   	ret    

ffff800000806172 <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:843

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
ffff800000806172:	f3 0f 1e fa          	endbr64 
ffff800000806176:	55                   	push   rbp
ffff800000806177:	48 89 e5             	mov    rbp,rsp
ffff80000080617a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080617a <set_tss+0x8>
ffff800000806181:	49 bb b6 78 11 00 00 	movabs r11,0x1178b6
ffff800000806188:	00 00 00 
ffff80000080618b:	4c 01 d8             	add    rax,r11
ffff80000080618e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000806192:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000806196:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080619a:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080619e:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffff8000008061a2:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:844
    tss->rsp0=rsp0;
ffff8000008061a6:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff8000008061ad:	ff ff ff 
ffff8000008061b0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061b4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008061b7:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff8000008061bb:	48 89 4a 04          	mov    QWORD PTR [rdx+0x4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:845
    tss->rsp1=rsp1;
ffff8000008061bf:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff8000008061c6:	ff ff ff 
ffff8000008061c9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061cd:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008061d0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff8000008061d4:	48 89 4a 0c          	mov    QWORD PTR [rdx+0xc],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:846
    tss->rsp2=rsp2;
ffff8000008061d8:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff8000008061df:	ff ff ff 
ffff8000008061e2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061e6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008061e9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008061ed:	48 89 4a 14          	mov    QWORD PTR [rdx+0x14],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847
    tss->ists[0]=ist0;
ffff8000008061f1:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff8000008061f8:	ff ff ff 
ffff8000008061fb:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061ff:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806202:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff800000806206:	48 89 4a 24          	mov    QWORD PTR [rdx+0x24],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:848
    tss->ists[1]=ist1;
ffff80000080620a:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff800000806211:	ff ff ff 
ffff800000806214:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806218:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080621b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080621f:	48 89 4a 2c          	mov    QWORD PTR [rdx+0x2c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849
    tss->ists[2]=ist2;
ffff800000806223:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff80000080622a:	ff ff ff 
ffff80000080622d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806231:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806234:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000806238:	48 89 4a 34          	mov    QWORD PTR [rdx+0x34],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850
    tss->ists[3]=ist3;
ffff80000080623c:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff800000806243:	ff ff ff 
ffff800000806246:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080624a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080624d:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff800000806251:	48 89 4a 3c          	mov    QWORD PTR [rdx+0x3c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:851
    tss->ists[4]=ist4;
ffff800000806255:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff80000080625c:	ff ff ff 
ffff80000080625f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806263:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806266:	48 8b 4d 18          	mov    rcx,QWORD PTR [rbp+0x18]
ffff80000080626a:	48 89 4a 44          	mov    QWORD PTR [rdx+0x44],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852
    tss->ists[5]=ist5;
ffff80000080626e:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff800000806275:	ff ff ff 
ffff800000806278:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080627c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080627f:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff800000806283:	48 89 4a 4c          	mov    QWORD PTR [rdx+0x4c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:853
    tss->ists[6]=ist6;
ffff800000806287:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff80000080628e:	ff ff ff 
ffff800000806291:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000806295:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806298:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff80000080629c:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:854
}
ffff8000008062a0:	90                   	nop
ffff8000008062a1:	5d                   	pop    rbp
ffff8000008062a2:	c3                   	ret    

ffff8000008062a3 <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:856

int fork_child_ret(){
ffff8000008062a3:	f3 0f 1e fa          	endbr64 
ffff8000008062a7:	55                   	push   rbp
ffff8000008062a8:	48 89 e5             	mov    rbp,rsp
ffff8000008062ab:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008062ab <fork_child_ret+0x8>
ffff8000008062b2:	49 bb 85 77 11 00 00 	movabs r11,0x117785
ffff8000008062b9:	00 00 00 
ffff8000008062bc:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:857
    return 0;
ffff8000008062bf:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:859

}
ffff8000008062c4:	5d                   	pop    rbp
ffff8000008062c5:	c3                   	ret    

ffff8000008062c6 <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:861

int sys_fork(void){
ffff8000008062c6:	f3 0f 1e fa          	endbr64 
ffff8000008062ca:	55                   	push   rbp
ffff8000008062cb:	48 89 e5             	mov    rbp,rsp
ffff8000008062ce:	41 57                	push   r15
ffff8000008062d0:	53                   	push   rbx
ffff8000008062d1:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff8000008062d5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008062d5 <sys_fork+0xf>
ffff8000008062dc:	49 bb 5b 77 11 00 00 	movabs r11,0x11775b
ffff8000008062e3:	00 00 00 
ffff8000008062e6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:862
    cli();
ffff8000008062e9:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863
    int pid=req_proc();
ffff8000008062ea:	49 89 df             	mov    r15,rbx
ffff8000008062ed:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008062f2:	48 ba 1c 6f ee ff ff 	movabs rdx,0xffffffffffee6f1c
ffff8000008062f9:	ff ff ff 
ffff8000008062fc:	48 01 da             	add    rdx,rbx
ffff8000008062ff:	ff d2                	call   rdx
ffff800000806301:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:864
    int pids=task[pid].pid;
ffff800000806304:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080630b:	ff ff ff 
ffff80000080630e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806312:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806315:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806318:	48 98                	cdqe   
ffff80000080631a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806321:	48 01 d0             	add    rax,rdx
ffff800000806324:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806326:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865
    if(pid==-1)return -1;
ffff800000806329:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff80000080632d:	75 0a                	jne    ffff800000806339 <sys_fork+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865 (discriminator 1)
ffff80000080632f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000806334:	e9 a4 09 00 00       	jmp    ffff800000806cdd <sys_fork+0xa17>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:867
    //首先完全复制
    task[pid]=*current;
ffff800000806339:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806340:	ff ff ff 
ffff800000806343:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806347:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080634a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806351:	ff ff ff 
ffff800000806354:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806358:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080635b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080635e:	48 98                	cdqe   
ffff800000806360:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806367:	48 01 d0             	add    rax,rdx
ffff80000080636a:	48 89 c2             	mov    rdx,rax
ffff80000080636d:	48 89 c8             	mov    rax,rcx
ffff800000806370:	b9 58 03 00 00       	mov    ecx,0x358
ffff800000806375:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000806378:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff80000080637b:	89 ce                	mov    esi,ecx
ffff80000080637d:	48 01 d6             	add    rsi,rdx
ffff800000806380:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
ffff800000806384:	89 ce                	mov    esi,ecx
ffff800000806386:	48 01 c6             	add    rsi,rax
ffff800000806389:	48 83 c6 08          	add    rsi,0x8
ffff80000080638d:	48 8b 76 f0          	mov    rsi,QWORD PTR [rsi-0x10]
ffff800000806391:	48 89 77 f0          	mov    QWORD PTR [rdi-0x10],rsi
ffff800000806395:	48 8d 7a 08          	lea    rdi,[rdx+0x8]
ffff800000806399:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
ffff80000080639d:	48 29 fa             	sub    rdx,rdi
ffff8000008063a0:	48 29 d0             	sub    rax,rdx
ffff8000008063a3:	01 d1                	add    ecx,edx
ffff8000008063a5:	83 e1 f8             	and    ecx,0xfffffff8
ffff8000008063a8:	c1 e9 03             	shr    ecx,0x3
ffff8000008063ab:	89 ca                	mov    edx,ecx
ffff8000008063ad:	89 d2                	mov    edx,edx
ffff8000008063af:	48 89 c6             	mov    rsi,rax
ffff8000008063b2:	48 89 d1             	mov    rcx,rdx
ffff8000008063b5:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:868
    task[pid].pid=pids;
ffff8000008063b8:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008063bf:	ff ff ff 
ffff8000008063c2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008063c6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008063c9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008063cc:	48 98                	cdqe   
ffff8000008063ce:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008063d5:	48 01 c2             	add    rdx,rax
ffff8000008063d8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008063db:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:869
    task[pid].stat=TASK_ZOMBIE;
ffff8000008063dd:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008063e4:	ff ff ff 
ffff8000008063e7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008063eb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008063ee:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008063f1:	48 98                	cdqe   
ffff8000008063f3:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008063fa:	48 01 d0             	add    rax,rdx
ffff8000008063fd:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:876

//    asm volatile("mov %%r10,%0"::"m"(r->rip));
    // r->rip=current->regs.rip;

    // memcpy(&task[pid].tss,tss, sizeof(TSS));
    task[pid].parent_pid=current->pid;
ffff800000806404:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080640b:	ff ff ff 
ffff80000080640e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806412:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806415:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080641c:	ff ff ff 
ffff80000080641f:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806423:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806426:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000806429:	48 63 d2             	movsxd rdx,edx
ffff80000080642c:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000806433:	48 01 ca             	add    rdx,rcx
ffff800000806436:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806438:	89 82 bc 00 00 00    	mov    DWORD PTR [rdx+0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:878
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
ffff80000080643e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806445:	ff ff ff 
ffff800000806448:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080644c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080644f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806452:	48 98                	cdqe   
ffff800000806454:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080645b:	48 01 d0             	add    rax,rdx
ffff80000080645e:	48 05 34 03 00 00    	add    rax,0x334
ffff800000806464:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff800000806468:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080646c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff800000806473:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000806477:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080647e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080647f:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:879
    task[pid].child_procs=NULL;
ffff800000806480:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806487:	ff ff ff 
ffff80000080648a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080648e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806491:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806494:	48 98                	cdqe   
ffff800000806496:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080649d:	48 01 d0             	add    rax,rdx
ffff8000008064a0:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff8000008064a7:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:880
    task[pid].node.data=&task[pid];
ffff8000008064ab:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008064b2:	ff ff ff 
ffff8000008064b5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008064b9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008064bc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008064bf:	48 98                	cdqe   
ffff8000008064c1:	48 69 d0 58 03 00 00 	imul   rdx,rax,0x358
ffff8000008064c8:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008064cf:	ff ff ff 
ffff8000008064d2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008064d6:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008064d9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008064dc:	48 98                	cdqe   
ffff8000008064de:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008064e5:	48 01 f0             	add    rax,rsi
ffff8000008064e8:	48 01 ca             	add    rdx,rcx
ffff8000008064eb:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881
    if(!current->child_procs)
ffff8000008064f2:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008064f9:	ff ff ff 
ffff8000008064fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806500:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806503:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff80000080650a:	48 85 c0             	test   rax,rax
ffff80000080650d:	75 44                	jne    ffff800000806553 <sys_fork+0x28d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:882
        current->child_procs=&task[pid].node;
ffff80000080650f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806516:	ff ff ff 
ffff800000806519:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080651d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806520:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806523:	48 98                	cdqe   
ffff800000806525:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080652c:	48 01 c2             	add    rdx,rax
ffff80000080652f:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806536:	ff ff ff 
ffff800000806539:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080653d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806540:	48 81 c2 34 03 00 00 	add    rdx,0x334
ffff800000806547:	48 89 90 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],rdx
ffff80000080654e:	e9 fc 00 00 00       	jmp    ffff80000080664f <sys_fork+0x389>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:884
    else
        list_add(current->child_procs,&task[pid].node);
ffff800000806553:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080655a:	ff ff ff 
ffff80000080655d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806561:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806564:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806567:	48 98                	cdqe   
ffff800000806569:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806570:	48 01 d0             	add    rax,rdx
ffff800000806573:	48 8d 90 34 03 00 00 	lea    rdx,[rax+0x334]
ffff80000080657a:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806581:	ff ff ff 
ffff800000806584:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806588:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080658b:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000806592:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff800000806596:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    struct List* p=entry;
ffff80000080659a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080659e:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff8000008065a2:	eb 25                	jmp    ffff8000008065c9 <sys_fork+0x303>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        if(p->data==new->data)
ffff8000008065a4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008065a8:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008065ac:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008065b0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008065b4:	48 39 c2             	cmp    rdx,rax
ffff8000008065b7:	0f 84 91 00 00 00    	je     ffff80000080664e <sys_fork+0x388>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff8000008065bd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008065c1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008065c5:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff8000008065c9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008065cd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008065d1:	48 85 c0             	test   rax,rax
ffff8000008065d4:	74 0e                	je     ffff8000008065e4 <sys_fork+0x31e>
ffff8000008065d6:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008065da:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008065de:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff8000008065e2:	75 c0                	jne    ffff8000008065a4 <sys_fork+0x2de>
ffff8000008065e4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008065e8:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff8000008065ec:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008065f0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->next = entry->next;
ffff8000008065f7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008065fb:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008065ff:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806606:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    new->prev = entry;
ffff80000080660a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806611:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000806615:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
    if(new->next)
ffff800000806618:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080661f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806623:	48 85 c0             	test   rax,rax
ffff800000806626:	74 15                	je     ffff80000080663d <sys_fork+0x377>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
        new->next->prev = new;
ffff800000806628:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080662f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806633:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080663a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
    entry->next = new;
ffff80000080663d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000806641:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff800000806648:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:31
}
ffff80000080664c:	eb 01                	jmp    ffff80000080664f <sys_fork+0x389>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
            return;
ffff80000080664e:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:886

    task[pid].utime=0;
ffff80000080664f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806656:	ff ff ff 
ffff800000806659:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080665d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806660:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806663:	48 98                	cdqe   
ffff800000806665:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080666c:	48 01 d0             	add    rax,rdx
ffff80000080666f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889

    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
ffff800000806676:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080667d:	ff ff ff 
ffff800000806680:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806684:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806687:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080668a:	48 98                	cdqe   
ffff80000080668c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806693:	48 01 c2             	add    rdx,rax
ffff800000806696:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080669d:	ff ff ff 
ffff8000008066a0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008066a7:	48 89 d6             	mov    rsi,rdx
ffff8000008066aa:	48 89 c7             	mov    rdi,rax
ffff8000008066ad:	49 89 df             	mov    r15,rbx
ffff8000008066b0:	48 b8 58 96 ee ff ff 	movabs rax,0xffffffffffee9658
ffff8000008066b7:	ff ff ff 
ffff8000008066ba:	48 01 d8             	add    rax,rbx
ffff8000008066bd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:894
    
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff8000008066bf:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008066c6:	ff ff ff 
ffff8000008066c9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066cd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008066d0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008066d3:	48 98                	cdqe   
ffff8000008066d5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008066dc:	48 01 d0             	add    rax,rdx
ffff8000008066df:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008066e3:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff8000008066e9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:895
    addr_t tmpla=KNL_BASE+0x80000000;
ffff8000008066ed:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff8000008066f4:	80 ff ff 
ffff8000008066f7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff8000008066fb:	e9 d1 00 00 00       	jmp    ffff8000008067d1 <sys_fork+0x50b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897 (discriminator 2)
        addr_t new_stkpg= pmalloc();
ffff800000806700:	49 89 df             	mov    r15,rbx
ffff800000806703:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806708:	48 ba 0e 51 ee ff ff 	movabs rdx,0xffffffffffee510e
ffff80000080670f:	ff ff ff 
ffff800000806712:	48 01 da             	add    rdx,rbx
ffff800000806715:	ff d2                	call   rdx
ffff800000806717:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:898 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff80000080671b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806722:	ff ff ff 
ffff800000806725:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806729:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080672c:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806733:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806737:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080673b:	48 89 d1             	mov    rcx,rdx
ffff80000080673e:	ba 03 00 00 00       	mov    edx,0x3
ffff800000806743:	48 89 c7             	mov    rdi,rax
ffff800000806746:	49 89 df             	mov    r15,rbx
ffff800000806749:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff800000806750:	ff ff ff 
ffff800000806753:	48 01 d8             	add    rax,rbx
ffff800000806756:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:899 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806758:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080675c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806760:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806765:	48 89 ce             	mov    rsi,rcx
ffff800000806768:	48 89 c7             	mov    rdi,rax
ffff80000080676b:	49 89 df             	mov    r15,rbx
ffff80000080676e:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff800000806775:	ff ff ff 
ffff800000806778:	48 01 d8             	add    rax,rbx
ffff80000080677b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:902 (discriminator 2)
        
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff80000080677d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806784:	ff ff ff 
ffff800000806787:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080678b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080678e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806791:	48 98                	cdqe   
ffff800000806793:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080679a:	48 01 d0             	add    rax,rdx
ffff80000080679d:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff8000008067a4:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff8000008067a8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008067ac:	48 89 d1             	mov    rcx,rdx
ffff8000008067af:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008067b4:	48 89 c7             	mov    rdi,rax
ffff8000008067b7:	49 89 df             	mov    r15,rbx
ffff8000008067ba:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff8000008067c1:	ff ff ff 
ffff8000008067c4:	48 01 d8             	add    rax,rbx
ffff8000008067c7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff8000008067c9:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
ffff8000008067d0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896 (discriminator 1)
ffff8000008067d1:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008067d8:	ff ff ff 
ffff8000008067db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008067df:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008067e2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008067e5:	48 98                	cdqe   
ffff8000008067e7:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008067ee:	48 01 d0             	add    rax,rdx
ffff8000008067f1:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008067f5:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff8000008067f9:	0f 83 01 ff ff ff    	jae    ffff800000806700 <sys_fork+0x43a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:904
    }
    if(task[pid].mem_struct.stack_top<=task[pid].mem_struct.stack_bottom){
ffff8000008067ff:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806806:	ff ff ff 
ffff800000806809:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080680d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806810:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806813:	48 98                	cdqe   
ffff800000806815:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080681c:	48 01 d0             	add    rax,rdx
ffff80000080681f:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff800000806823:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080682a:	ff ff ff 
ffff80000080682d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806831:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806834:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806837:	48 98                	cdqe   
ffff800000806839:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806840:	48 01 c8             	add    rax,rcx
ffff800000806843:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000806847:	48 39 c2             	cmp    rdx,rax
ffff80000080684a:	0f 87 bd 00 00 00    	ja     ffff80000080690d <sys_fork+0x647>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:907
        //父进程没有栈空间（一般是不可能的，这个几乎就是为了内核进程fork而写）
        //开辟一页空栈。
        addr_t new_stkpg= (addr_t) pmalloc();
ffff800000806850:	49 89 df             	mov    r15,rbx
ffff800000806853:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806858:	48 ba 0e 51 ee ff ff 	movabs rdx,0xffffffffffee510e
ffff80000080685f:	ff ff ff 
ffff800000806862:	48 01 da             	add    rdx,rbx
ffff800000806865:	ff d2                	call   rdx
ffff800000806867:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:908
        stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff80000080686b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806872:	ff ff ff 
ffff800000806875:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806879:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080687c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080687f:	48 98                	cdqe   
ffff800000806881:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806888:	48 01 d0             	add    rax,rdx
ffff80000080688b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080688f:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806895:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:910
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806899:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008068a0:	ff ff ff 
ffff8000008068a3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068a7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008068aa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008068ad:	48 98                	cdqe   
ffff8000008068af:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008068b6:	48 01 d0             	add    rax,rdx
ffff8000008068b9:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff8000008068c0:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff8000008068c4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008068c8:	48 89 d1             	mov    rcx,rdx
ffff8000008068cb:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008068d0:	48 89 c7             	mov    rdi,rax
ffff8000008068d3:	49 89 df             	mov    r15,rbx
ffff8000008068d6:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff8000008068dd:	ff ff ff 
ffff8000008068e0:	48 01 d8             	add    rax,rbx
ffff8000008068e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:912
        //给新进程分配一页栈
        task[pid].mem_struct.stack_bottom=stk;
ffff8000008068e5:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008068ec:	ff ff ff 
ffff8000008068ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068f3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008068f6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008068f9:	48 98                	cdqe   
ffff8000008068fb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806902:	48 01 c2             	add    rdx,rax
ffff800000806905:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806909:	48 89 42 38          	mov    QWORD PTR [rdx+0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918
        //给这页新的栈填上恢复上下文需要的内容
        
    }
    //中断使用的栈空间
    //ist一页就够
    addr_t new_stkpg= kmalloc();
ffff80000080690d:	49 89 df             	mov    r15,rbx
ffff800000806910:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806915:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080691c:	ff ff ff 
ffff80000080691f:	48 01 da             	add    rdx,rbx
ffff800000806922:	ff d2                	call   rdx
ffff800000806924:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919
    memcpy(new_stkpg,current->tss.ists[0]-PAGE_4K_SIZE,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806928:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080692f:	ff ff ff 
ffff800000806932:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806936:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806939:	48 8b 80 1c 02 00 00 	mov    rax,QWORD PTR [rax+0x21c]
ffff800000806940:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806946:	48 89 c1             	mov    rcx,rax
ffff800000806949:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080694d:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806952:	48 89 ce             	mov    rsi,rcx
ffff800000806955:	48 89 c7             	mov    rdi,rax
ffff800000806958:	49 89 df             	mov    r15,rbx
ffff80000080695b:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff800000806962:	ff ff ff 
ffff800000806965:	48 01 d8             	add    rax,rbx
ffff800000806968:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920
    stack_store_regs* ctx_dup=new_stkpg+PAGE_4K_SIZE-sizeof(stack_store_regs);//拷贝的上下文
ffff80000080696a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080696e:	48 05 58 0f 00 00    	add    rax,0xf58
ffff800000806974:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:921
    ctx_dup->rax=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
ffff800000806978:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080697c:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000806983:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922
    task[pid].regs.rip=clock_ret;
ffff800000806984:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080698b:	ff ff ff 
ffff80000080698e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806992:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806995:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806998:	48 98                	cdqe   
ffff80000080699a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008069a1:	48 01 d0             	add    rax,rdx
ffff8000008069a4:	48 ba c8 ff ff ff ff 	movabs rdx,0xffffffffffffffc8
ffff8000008069ab:	ff ff ff 
ffff8000008069ae:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008069b2:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:923
    task[pid].regs.rsp=ctx_dup;
ffff8000008069b9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008069c0:	ff ff ff 
ffff8000008069c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008069c7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008069ca:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008069cd:	48 98                	cdqe   
ffff8000008069cf:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008069d6:	48 01 c2             	add    rdx,rax
ffff8000008069d9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008069dd:	48 89 82 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:924
    task[pid].tss.ists[0]=new_stkpg+PAGE_4K_SIZE;
ffff8000008069e4:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008069eb:	ff ff ff 
ffff8000008069ee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008069f2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008069f5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008069f8:	48 98                	cdqe   
ffff8000008069fa:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a01:	48 01 d0             	add    rax,rdx
ffff800000806a04:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806a08:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806a0f:	48 89 90 1c 02 00 00 	mov    QWORD PTR [rax+0x21c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:925
    task[pid].tss.ists[1]=new_stkpg+PAGE_4K_SIZE;
ffff800000806a16:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806a1d:	ff ff ff 
ffff800000806a20:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a24:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a27:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a2a:	48 98                	cdqe   
ffff800000806a2c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a33:	48 01 d0             	add    rax,rdx
ffff800000806a36:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806a3a:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806a41:	48 89 90 24 02 00 00 	mov    QWORD PTR [rax+0x224],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:926
    task[pid].tss.ists[2]=new_stkpg+PAGE_4K_SIZE;
ffff800000806a48:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806a4f:	ff ff ff 
ffff800000806a52:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a56:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a59:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a5c:	48 98                	cdqe   
ffff800000806a5e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a65:	48 01 d0             	add    rax,rdx
ffff800000806a68:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806a6c:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806a73:	48 89 90 2c 02 00 00 	mov    QWORD PTR [rax+0x22c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:927
    task[pid].tss.ists[3]=new_stkpg+PAGE_4K_SIZE;
ffff800000806a7a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806a81:	ff ff ff 
ffff800000806a84:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a88:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a8b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a8e:	48 98                	cdqe   
ffff800000806a90:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a97:	48 01 d0             	add    rax,rdx
ffff800000806a9a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806a9e:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806aa5:	48 89 90 34 02 00 00 	mov    QWORD PTR [rax+0x234],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:928
    task[pid].tss.ists[4]=new_stkpg+PAGE_4K_SIZE;
ffff800000806aac:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806ab3:	ff ff ff 
ffff800000806ab6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806aba:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806abd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ac0:	48 98                	cdqe   
ffff800000806ac2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806ac9:	48 01 d0             	add    rax,rdx
ffff800000806acc:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806ad0:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806ad7:	48 89 90 3c 02 00 00 	mov    QWORD PTR [rax+0x23c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929
    task[pid].tss.ists[5]=new_stkpg+PAGE_4K_SIZE;
ffff800000806ade:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806ae5:	ff ff ff 
ffff800000806ae8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806aec:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806aef:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806af2:	48 98                	cdqe   
ffff800000806af4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806afb:	48 01 d0             	add    rax,rdx
ffff800000806afe:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806b02:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806b09:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:930
    task[pid].tss.ists[6]=new_stkpg+PAGE_4K_SIZE;
ffff800000806b10:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806b17:	ff ff ff 
ffff800000806b1a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b1e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b21:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b24:	48 98                	cdqe   
ffff800000806b26:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806b2d:	48 01 d0             	add    rax,rdx
ffff800000806b30:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806b34:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806b3b:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:933

    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
ffff800000806b42:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806b49:	ff ff ff 
ffff800000806b4c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b50:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b53:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b56:	48 98                	cdqe   
ffff800000806b58:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806b5f:	48 01 d0             	add    rax,rdx
ffff800000806b62:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000806b66:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806b6c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000806b70:	e9 d1 00 00 00       	jmp    ffff800000806c46 <sys_fork+0x980>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:935 (discriminator 2)
        addr_t new_hppg= pmalloc();
ffff800000806b75:	49 89 df             	mov    r15,rbx
ffff800000806b78:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806b7d:	48 ba 0e 51 ee ff ff 	movabs rdx,0xffffffffffee510e
ffff800000806b84:	ff ff ff 
ffff800000806b87:	48 01 da             	add    rdx,rbx
ffff800000806b8a:	ff d2                	call   rdx
ffff800000806b8c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000806b90:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806b97:	ff ff ff 
ffff800000806b9a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b9e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806ba1:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806ba8:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806bac:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806bb0:	48 89 d1             	mov    rcx,rdx
ffff800000806bb3:	ba 03 00 00 00       	mov    edx,0x3
ffff800000806bb8:	48 89 c7             	mov    rdi,rax
ffff800000806bbb:	49 89 df             	mov    r15,rbx
ffff800000806bbe:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff800000806bc5:	ff ff ff 
ffff800000806bc8:	48 01 d8             	add    rax,rbx
ffff800000806bcb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:937 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806bcd:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff800000806bd1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806bd5:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806bda:	48 89 ce             	mov    rsi,rcx
ffff800000806bdd:	48 89 c7             	mov    rdi,rax
ffff800000806be0:	49 89 df             	mov    r15,rbx
ffff800000806be3:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff800000806bea:	ff ff ff 
ffff800000806bed:	48 01 d8             	add    rax,rbx
ffff800000806bf0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806bf2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806bf9:	ff ff ff 
ffff800000806bfc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c00:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c03:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c06:	48 98                	cdqe   
ffff800000806c08:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c0f:	48 01 d0             	add    rax,rdx
ffff800000806c12:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806c19:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000806c1d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806c21:	48 89 d1             	mov    rcx,rdx
ffff800000806c24:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806c29:	48 89 c7             	mov    rdi,rax
ffff800000806c2c:	49 89 df             	mov    r15,rbx
ffff800000806c2f:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff800000806c36:	ff ff ff 
ffff800000806c39:	48 01 d8             	add    rax,rbx
ffff800000806c3c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000806c3e:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
ffff800000806c45:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 1)
ffff800000806c46:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806c4d:	ff ff ff 
ffff800000806c50:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c54:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c57:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c5a:	48 98                	cdqe   
ffff800000806c5c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c63:	48 01 d0             	add    rax,rdx
ffff800000806c66:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000806c6a:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000806c6e:	0f 83 01 ff ff ff    	jae    ffff800000806b75 <sys_fork+0x8af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:941
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
ffff800000806c74:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806c7b:	ff ff ff 
ffff800000806c7e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c82:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806c85:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806c8c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806c90:	48 89 d1             	mov    rcx,rdx
ffff800000806c93:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806c98:	48 89 c6             	mov    rsi,rax
ffff800000806c9b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806ca0:	49 89 df             	mov    r15,rbx
ffff800000806ca3:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff800000806caa:	ff ff ff 
ffff800000806cad:	48 01 d8             	add    rax,rbx
ffff800000806cb0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
    task[pid].stat=TASK_READY;
ffff800000806cb2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806cb9:	ff ff ff 
ffff800000806cbc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806cc0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806cc3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806cc6:	48 98                	cdqe   
ffff800000806cc8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806ccf:	48 01 d0             	add    rax,rdx
ffff800000806cd2:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:945
    

    sti();
ffff800000806cd9:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:948
    //如果父进程没有堆，不开辟。留给load_xx函数。
    //父进程运行到这里
    return pid;
ffff800000806cda:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:949
}
ffff800000806cdd:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff800000806ce1:	5b                   	pop    rbx
ffff800000806ce2:	41 5f                	pop    r15
ffff800000806ce4:	5d                   	pop    rbp
ffff800000806ce5:	c3                   	ret    

ffff800000806ce6 <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
ffff800000806ce6:	f3 0f 1e fa          	endbr64 
ffff800000806cea:	55                   	push   rbp
ffff800000806ceb:	48 89 e5             	mov    rbp,rsp
ffff800000806cee:	41 57                	push   r15
ffff800000806cf0:	53                   	push   rbx
ffff800000806cf1:	48 83 ec 50          	sub    rsp,0x50
ffff800000806cf5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806cf5 <release_mmap+0xf>
ffff800000806cfc:	49 bb 3b 6d 11 00 00 	movabs r11,0x116d3b
ffff800000806d03:	00 00 00 
ffff800000806d06:	4c 01 db             	add    rbx,r11
ffff800000806d09:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952
    page_item * pml4p=p->pml4;
ffff800000806d0d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806d11:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000806d18:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:954
    //复制pdpt
    page_item *pml4e= pml4p;
ffff800000806d1c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000806d20:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff800000806d24:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000806d2b:	e9 40 03 00 00       	jmp    ffff800000807070 <release_mmap+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:957
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff800000806d30:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806d33:	48 98                	cdqe   
ffff800000806d35:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806d3c:	00 
ffff800000806d3d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806d41:	48 01 d0             	add    rax,rdx
ffff800000806d44:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806d47:	83 e0 01             	and    eax,0x1
ffff800000806d4a:	48 85 c0             	test   rax,rax
ffff800000806d4d:	0f 84 19 03 00 00    	je     ffff80000080706c <release_mmap+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:958
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK|KNL_BASE;
ffff800000806d53:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806d56:	48 98                	cdqe   
ffff800000806d58:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806d5f:	00 
ffff800000806d60:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806d64:	48 01 d0             	add    rax,rdx
ffff800000806d67:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806d6a:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000806d71:	7f 00 00 
ffff800000806d74:	48 21 c2             	and    rdx,rax
ffff800000806d77:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000806d7e:	80 ff ff 
ffff800000806d81:	48 09 d0             	or     rax,rdx
ffff800000806d84:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959
            for(int j=0;j<512;j++)
ffff800000806d88:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000806d8f:	e9 85 02 00 00       	jmp    ffff800000807019 <release_mmap+0x333>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff800000806d94:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000806d97:	48 98                	cdqe   
ffff800000806d99:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806da0:	00 
ffff800000806da1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806da5:	48 01 d0             	add    rax,rdx
ffff800000806da8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806dab:	83 e0 01             	and    eax,0x1
ffff800000806dae:	48 85 c0             	test   rax,rax
ffff800000806db1:	0f 84 5e 02 00 00    	je     ffff800000807015 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961 (discriminator 1)
ffff800000806db7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000806dba:	48 98                	cdqe   
ffff800000806dbc:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806dc3:	00 
ffff800000806dc4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806dc8:	48 01 d0             	add    rax,rdx
ffff800000806dcb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806dce:	25 80 00 00 00       	and    eax,0x80
ffff800000806dd3:	48 85 c0             	test   rax,rax
ffff800000806dd6:	0f 85 39 02 00 00    	jne    ffff800000807015 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:962
                    page_item *pde=pdpte[j]&PAGE_4K_MASK|KNL_BASE;
ffff800000806ddc:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000806ddf:	48 98                	cdqe   
ffff800000806de1:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806de8:	00 
ffff800000806de9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806ded:	48 01 d0             	add    rax,rdx
ffff800000806df0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806df3:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000806dfa:	7f 00 00 
ffff800000806dfd:	48 21 c2             	and    rdx,rax
ffff800000806e00:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000806e07:	80 ff ff 
ffff800000806e0a:	48 09 d0             	or     rax,rdx
ffff800000806e0d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963
                    for(int k=0;k<512;k++)
ffff800000806e11:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000806e18:	e9 a5 01 00 00       	jmp    ffff800000806fc2 <release_mmap+0x2dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff800000806e1d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000806e20:	48 98                	cdqe   
ffff800000806e22:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806e29:	00 
ffff800000806e2a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806e2e:	48 01 d0             	add    rax,rdx
ffff800000806e31:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806e34:	83 e0 01             	and    eax,0x1
ffff800000806e37:	48 85 c0             	test   rax,rax
ffff800000806e3a:	0f 84 09 01 00 00    	je     ffff800000806f49 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965 (discriminator 1)
ffff800000806e40:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000806e43:	48 98                	cdqe   
ffff800000806e45:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806e4c:	00 
ffff800000806e4d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806e51:	48 01 d0             	add    rax,rdx
ffff800000806e54:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806e57:	25 80 00 00 00       	and    eax,0x80
ffff800000806e5c:	48 85 c0             	test   rax,rax
ffff800000806e5f:	0f 85 e4 00 00 00    	jne    ffff800000806f49 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:966
                            page_item *pte=pde[k]&PAGE_4K_MASK|KNL_BASE;
ffff800000806e65:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000806e68:	48 98                	cdqe   
ffff800000806e6a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806e71:	00 
ffff800000806e72:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806e76:	48 01 d0             	add    rax,rdx
ffff800000806e79:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806e7c:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000806e83:	7f 00 00 
ffff800000806e86:	48 21 c2             	and    rdx,rax
ffff800000806e89:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000806e90:	80 ff ff 
ffff800000806e93:	48 09 d0             	or     rax,rdx
ffff800000806e96:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967
                            for(int l=0;l<512;l++){
ffff800000806e9a:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000806ea1:	eb 55                	jmp    ffff800000806ef8 <release_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:968
                                if(pte[l]&PAGE_PRESENT){
ffff800000806ea3:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000806ea6:	48 98                	cdqe   
ffff800000806ea8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806eaf:	00 
ffff800000806eb0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806eb4:	48 01 d0             	add    rax,rdx
ffff800000806eb7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806eba:	83 e0 01             	and    eax,0x1
ffff800000806ebd:	48 85 c0             	test   rax,rax
ffff800000806ec0:	74 32                	je     ffff800000806ef4 <release_mmap+0x20e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:970
                                    //释放申请的物理内存
                                    free_page(pte[l]&PAGE_4K_MASK);
ffff800000806ec2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000806ec5:	48 98                	cdqe   
ffff800000806ec7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806ece:	00 
ffff800000806ecf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806ed3:	48 01 d0             	add    rax,rdx
ffff800000806ed6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806ed9:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000806edf:	48 89 c7             	mov    rdi,rax
ffff800000806ee2:	49 89 df             	mov    r15,rbx
ffff800000806ee5:	48 b8 6f 51 ee ff ff 	movabs rax,0xffffffffffee516f
ffff800000806eec:	ff ff ff 
ffff800000806eef:	48 01 d8             	add    rax,rbx
ffff800000806ef2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967 (discriminator 2)
                            for(int l=0;l<512;l++){
ffff800000806ef4:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967 (discriminator 1)
ffff800000806ef8:	81 7d e0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x20],0x1ff
ffff800000806eff:	7e a2                	jle    ffff800000806ea3 <release_mmap+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:974
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK|KNL_BASE);
ffff800000806f01:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000806f04:	48 98                	cdqe   
ffff800000806f06:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806f0d:	00 
ffff800000806f0e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806f12:	48 01 d0             	add    rax,rdx
ffff800000806f15:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806f18:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000806f1f:	7f 00 00 
ffff800000806f22:	48 21 c2             	and    rdx,rax
ffff800000806f25:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000806f2c:	80 ff ff 
ffff800000806f2f:	48 09 d0             	or     rax,rdx
ffff800000806f32:	48 89 c7             	mov    rdi,rax
ffff800000806f35:	49 89 df             	mov    r15,rbx
ffff800000806f38:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000806f3f:	ff ff ff 
ffff800000806f42:	48 01 d8             	add    rax,rbx
ffff800000806f45:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff800000806f47:	eb 75                	jmp    ffff800000806fbe <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:975
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k] & PDE_2MB)){
ffff800000806f49:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000806f4c:	48 98                	cdqe   
ffff800000806f4e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806f55:	00 
ffff800000806f56:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806f5a:	48 01 d0             	add    rax,rdx
ffff800000806f5d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806f60:	83 e0 01             	and    eax,0x1
ffff800000806f63:	48 85 c0             	test   rax,rax
ffff800000806f66:	74 56                	je     ffff800000806fbe <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:975 (discriminator 1)
ffff800000806f68:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000806f6b:	48 98                	cdqe   
ffff800000806f6d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806f74:	00 
ffff800000806f75:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806f79:	48 01 d0             	add    rax,rdx
ffff800000806f7c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806f7f:	25 80 00 00 00       	and    eax,0x80
ffff800000806f84:	48 85 c0             	test   rax,rax
ffff800000806f87:	74 35                	je     ffff800000806fbe <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:977
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
ffff800000806f89:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000806f8c:	48 98                	cdqe   
ffff800000806f8e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806f95:	00 
ffff800000806f96:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806f9a:	48 01 d0             	add    rax,rdx
ffff800000806f9d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806fa0:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000806fa5:	be 00 02 00 00       	mov    esi,0x200
ffff800000806faa:	89 c7                	mov    edi,eax
ffff800000806fac:	49 89 df             	mov    r15,rbx
ffff800000806faf:	48 b8 21 52 ee ff ff 	movabs rax,0xffffffffffee5221
ffff800000806fb6:	ff ff ff 
ffff800000806fb9:	48 01 d8             	add    rax,rbx
ffff800000806fbc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff800000806fbe:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963 (discriminator 1)
ffff800000806fc2:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000806fc9:	0f 8e 4e fe ff ff    	jle    ffff800000806e1d <release_mmap+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:981
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK|KNL_BASE);
ffff800000806fcf:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000806fd2:	48 98                	cdqe   
ffff800000806fd4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806fdb:	00 
ffff800000806fdc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806fe0:	48 01 d0             	add    rax,rdx
ffff800000806fe3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806fe6:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000806fed:	7f 00 00 
ffff800000806ff0:	48 21 c2             	and    rdx,rax
ffff800000806ff3:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000806ffa:	80 ff ff 
ffff800000806ffd:	48 09 d0             	or     rax,rdx
ffff800000807000:	48 89 c7             	mov    rdi,rax
ffff800000807003:	49 89 df             	mov    r15,rbx
ffff800000807006:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080700d:	ff ff ff 
ffff800000807010:	48 01 d8             	add    rax,rbx
ffff800000807013:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959 (discriminator 2)
            for(int j=0;j<512;j++)
ffff800000807015:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959 (discriminator 1)
ffff800000807019:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff800000807020:	0f 8e 6e fd ff ff    	jle    ffff800000806d94 <release_mmap+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:986
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK|KNL_BASE);
ffff800000807026:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807029:	48 98                	cdqe   
ffff80000080702b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807032:	00 
ffff800000807033:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807037:	48 01 d0             	add    rax,rdx
ffff80000080703a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080703d:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807044:	7f 00 00 
ffff800000807047:	48 21 c2             	and    rdx,rax
ffff80000080704a:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000807051:	80 ff ff 
ffff800000807054:	48 09 d0             	or     rax,rdx
ffff800000807057:	48 89 c7             	mov    rdi,rax
ffff80000080705a:	49 89 df             	mov    r15,rbx
ffff80000080705d:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000807064:	ff ff ff 
ffff800000807067:	48 01 d8             	add    rax,rbx
ffff80000080706a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955 (discriminator 2)
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff80000080706c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955 (discriminator 1)
ffff800000807070:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffff800000807077:	0f 8e b3 fc ff ff    	jle    ffff800000806d30 <release_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:989
        }
    }
}
ffff80000080707d:	90                   	nop
ffff80000080707e:	90                   	nop
ffff80000080707f:	48 83 c4 50          	add    rsp,0x50
ffff800000807083:	5b                   	pop    rbx
ffff800000807084:	41 5f                	pop    r15
ffff800000807086:	5d                   	pop    rbp
ffff800000807087:	c3                   	ret    

ffff800000807088 <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990
void copy_mmap(struct process* from, struct process *to){
ffff800000807088:	f3 0f 1e fa          	endbr64 
ffff80000080708c:	55                   	push   rbp
ffff80000080708d:	48 89 e5             	mov    rbp,rsp
ffff800000807090:	41 57                	push   r15
ffff800000807092:	53                   	push   rbx
ffff800000807093:	48 83 ec 70          	sub    rsp,0x70
ffff800000807097:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807097 <copy_mmap+0xf>
ffff80000080709e:	49 bb 99 69 11 00 00 	movabs r11,0x116999
ffff8000008070a5:	00 00 00 
ffff8000008070a8:	4c 01 db             	add    rbx,r11
ffff8000008070ab:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff8000008070af:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
    page_item * pml4p= kmalloc();
ffff8000008070b3:	49 89 df             	mov    r15,rbx
ffff8000008070b6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008070bb:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff8000008070c2:	ff ff ff 
ffff8000008070c5:	48 01 da             	add    rdx,rbx
ffff8000008070c8:	ff d2                	call   rdx
ffff8000008070ca:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992
    memcpy(pml4p, (unsigned char *) from->pml4, PAGE_4K_SIZE);//复制pml4
ffff8000008070ce:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008070d2:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff8000008070d9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008070dd:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008070e2:	48 89 ce             	mov    rsi,rcx
ffff8000008070e5:	48 89 c7             	mov    rdi,rax
ffff8000008070e8:	49 89 df             	mov    r15,rbx
ffff8000008070eb:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff8000008070f2:	ff ff ff 
ffff8000008070f5:	48 01 d8             	add    rax,rbx
ffff8000008070f8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:993
    to->regs.cr3=(unsigned long)pml4p&~KNL_BASE;
ffff8000008070fa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008070fe:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000807105:	7f 00 00 
ffff800000807108:	48 21 c2             	and    rdx,rax
ffff80000080710b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080710f:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:994
    to->pml4=pml4p;
ffff800000807116:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080711a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080711e:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:997
    //复制pdpt

    page_item *pml4e= pml4p;
ffff800000807125:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000807129:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:998
    for(int i=0;i<512;i++)
ffff80000080712d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000807134:	e9 0e 03 00 00       	jmp    ffff800000807447 <copy_mmap+0x3bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1000
    {
        if((pml4e[i]&PAGE_PRESENT)==0)
ffff800000807139:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080713c:	48 98                	cdqe   
ffff80000080713e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807145:	00 
ffff800000807146:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080714a:	48 01 d0             	add    rax,rdx
ffff80000080714d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807150:	83 e0 01             	and    eax,0x1
ffff800000807153:	48 85 c0             	test   rax,rax
ffff800000807156:	0f 84 e6 02 00 00    	je     ffff800000807442 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002
            continue;
        addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080715c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080715f:	48 98                	cdqe   
ffff800000807161:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807168:	00 
ffff800000807169:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080716d:	48 01 d0             	add    rax,rdx
ffff800000807170:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807173:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003
        addr_t m4=kmalloc();
ffff800000807177:	49 89 df             	mov    r15,rbx
ffff80000080717a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080717f:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000807186:	ff ff ff 
ffff800000807189:	48 01 da             	add    rdx,rbx
ffff80000080718c:	ff d2                	call   rdx
ffff80000080718e:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
        pml4e[i]= (m4&~KNL_BASE) | (old_data & ~PAGE_4K_MASK);
ffff800000807192:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807199:	7f 00 00 
ffff80000080719c:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff8000008071a0:	48 89 c2             	mov    rdx,rax
ffff8000008071a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008071a7:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008071ac:	48 89 c1             	mov    rcx,rax
ffff8000008071af:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008071b2:	48 98                	cdqe   
ffff8000008071b4:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff8000008071bb:	00 
ffff8000008071bc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008071c0:	48 01 f0             	add    rax,rsi
ffff8000008071c3:	48 09 ca             	or     rdx,rcx
ffff8000008071c6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005
        memcpy((unsigned char *) m4, old_data & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008071c9:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008071d0:	7f 00 00 
ffff8000008071d3:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
ffff8000008071d7:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008071de:	80 ff ff 
ffff8000008071e1:	48 09 d0             	or     rax,rdx
ffff8000008071e4:	48 89 c1             	mov    rcx,rax
ffff8000008071e7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008071eb:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008071f0:	48 89 ce             	mov    rsi,rcx
ffff8000008071f3:	48 89 c7             	mov    rdi,rax
ffff8000008071f6:	49 89 df             	mov    r15,rbx
ffff8000008071f9:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff800000807200:	ff ff ff 
ffff800000807203:	48 01 d8             	add    rax,rbx
ffff800000807206:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1006
        page_item *pdpte= (page_item *) m4;
ffff800000807208:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080720c:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
        for(int j=0;j<512;j++)
ffff800000807210:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000807217:	e9 17 02 00 00       	jmp    ffff800000807433 <copy_mmap+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009
        {
            if((pdpte[j]&PAGE_PRESENT)==0||(pdpte[j]&PDPTE_1GB)!=0)
ffff80000080721c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080721f:	48 98                	cdqe   
ffff800000807221:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807228:	00 
ffff800000807229:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080722d:	48 01 d0             	add    rax,rdx
ffff800000807230:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807233:	83 e0 01             	and    eax,0x1
ffff800000807236:	48 85 c0             	test   rax,rax
ffff800000807239:	0f 84 ef 01 00 00    	je     ffff80000080742e <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009 (discriminator 2)
ffff80000080723f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807242:	48 98                	cdqe   
ffff800000807244:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080724b:	00 
ffff80000080724c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807250:	48 01 d0             	add    rax,rdx
ffff800000807253:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807256:	25 80 00 00 00       	and    eax,0x80
ffff80000080725b:	48 85 c0             	test   rax,rax
ffff80000080725e:	0f 85 ca 01 00 00    	jne    ffff80000080742e <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1011
                continue;
            addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000807264:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807267:	48 98                	cdqe   
ffff800000807269:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807270:	00 
ffff800000807271:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807275:	48 01 d0             	add    rax,rdx
ffff800000807278:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080727b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1012
            addr_t m3=kmalloc();
ffff80000080727f:	49 89 df             	mov    r15,rbx
ffff800000807282:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807287:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080728e:	ff ff ff 
ffff800000807291:	48 01 da             	add    rdx,rbx
ffff800000807294:	ff d2                	call   rdx
ffff800000807296:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1013
            pdpte[j]= (m3&~KNL_BASE) | (old_data2 & ~PAGE_4K_MASK);
ffff80000080729a:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff8000008072a1:	7f 00 00 
ffff8000008072a4:	48 23 45 a8          	and    rax,QWORD PTR [rbp-0x58]
ffff8000008072a8:	48 89 c2             	mov    rdx,rax
ffff8000008072ab:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008072af:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008072b4:	48 89 c1             	mov    rcx,rax
ffff8000008072b7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008072ba:	48 98                	cdqe   
ffff8000008072bc:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff8000008072c3:	00 
ffff8000008072c4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008072c8:	48 01 f0             	add    rax,rsi
ffff8000008072cb:	48 09 ca             	or     rdx,rcx
ffff8000008072ce:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1014
            memcpy((unsigned char *) m3, old_data2 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008072d1:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008072d8:	7f 00 00 
ffff8000008072db:	48 23 45 b0          	and    rax,QWORD PTR [rbp-0x50]
ffff8000008072df:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008072e6:	80 ff ff 
ffff8000008072e9:	48 09 d0             	or     rax,rdx
ffff8000008072ec:	48 89 c1             	mov    rcx,rax
ffff8000008072ef:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008072f3:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008072f8:	48 89 ce             	mov    rsi,rcx
ffff8000008072fb:	48 89 c7             	mov    rdi,rax
ffff8000008072fe:	49 89 df             	mov    r15,rbx
ffff800000807301:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff800000807308:	ff ff ff 
ffff80000080730b:	48 01 d8             	add    rax,rbx
ffff80000080730e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1015
            page_item *pde= (page_item *) m3;
ffff800000807310:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000807314:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016
            for(int k=0;k<512;k++)
ffff800000807318:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080731f:	e9 fb 00 00 00       	jmp    ffff80000080741f <copy_mmap+0x397>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1018
            {
                if((pde[k]&PAGE_PRESENT)==0||(pde[k]&PDE_2MB)!=0)
ffff800000807324:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807327:	48 98                	cdqe   
ffff800000807329:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807330:	00 
ffff800000807331:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000807335:	48 01 d0             	add    rax,rdx
ffff800000807338:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080733b:	83 e0 01             	and    eax,0x1
ffff80000080733e:	48 85 c0             	test   rax,rax
ffff800000807341:	0f 84 d3 00 00 00    	je     ffff80000080741a <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1018 (discriminator 2)
ffff800000807347:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080734a:	48 98                	cdqe   
ffff80000080734c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807353:	00 
ffff800000807354:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000807358:	48 01 d0             	add    rax,rdx
ffff80000080735b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080735e:	25 80 00 00 00       	and    eax,0x80
ffff800000807363:	48 85 c0             	test   rax,rax
ffff800000807366:	0f 85 ae 00 00 00    	jne    ffff80000080741a <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1020
                    continue;
                addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080736c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080736f:	48 98                	cdqe   
ffff800000807371:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807378:	00 
ffff800000807379:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080737d:	48 01 d0             	add    rax,rdx
ffff800000807380:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807383:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021
                addr_t m2=kmalloc();
ffff800000807387:	49 89 df             	mov    r15,rbx
ffff80000080738a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080738f:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000807396:	ff ff ff 
ffff800000807399:	48 01 da             	add    rdx,rbx
ffff80000080739c:	ff d2                	call   rdx
ffff80000080739e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1022
                pde[k]= (m2&~KNL_BASE) | (old_data3 & ~PAGE_4K_MASK);
ffff8000008073a2:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff8000008073a9:	7f 00 00 
ffff8000008073ac:	48 23 45 90          	and    rax,QWORD PTR [rbp-0x70]
ffff8000008073b0:	48 89 c2             	mov    rdx,rax
ffff8000008073b3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008073b7:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008073bc:	48 89 c1             	mov    rcx,rax
ffff8000008073bf:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008073c2:	48 98                	cdqe   
ffff8000008073c4:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff8000008073cb:	00 
ffff8000008073cc:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008073d0:	48 01 f0             	add    rax,rsi
ffff8000008073d3:	48 09 ca             	or     rdx,rcx
ffff8000008073d6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023
                memcpy((unsigned char *) m2, old_data3 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008073d9:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008073e0:	7f 00 00 
ffff8000008073e3:	48 23 45 98          	and    rax,QWORD PTR [rbp-0x68]
ffff8000008073e7:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008073ee:	80 ff ff 
ffff8000008073f1:	48 09 d0             	or     rax,rdx
ffff8000008073f4:	48 89 c1             	mov    rcx,rax
ffff8000008073f7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008073fb:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000807400:	48 89 ce             	mov    rsi,rcx
ffff800000807403:	48 89 c7             	mov    rdi,rax
ffff800000807406:	49 89 df             	mov    r15,rbx
ffff800000807409:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff800000807410:	ff ff ff 
ffff800000807413:	48 01 d8             	add    rax,rbx
ffff800000807416:	ff d0                	call   rax
ffff800000807418:	eb 01                	jmp    ffff80000080741b <copy_mmap+0x393>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019
                    continue;
ffff80000080741a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016 (discriminator 2)
            for(int k=0;k<512;k++)
ffff80000080741b:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016 (discriminator 1)
ffff80000080741f:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000807426:	0f 8e f8 fe ff ff    	jle    ffff800000807324 <copy_mmap+0x29c>
ffff80000080742c:	eb 01                	jmp    ffff80000080742f <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1010
                continue;
ffff80000080742e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007 (discriminator 2)
        for(int j=0;j<512;j++)
ffff80000080742f:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007 (discriminator 1)
ffff800000807433:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff80000080743a:	0f 8e dc fd ff ff    	jle    ffff80000080721c <copy_mmap+0x194>
ffff800000807440:	eb 01                	jmp    ffff800000807443 <copy_mmap+0x3bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001
            continue;
ffff800000807442:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:998 (discriminator 2)
    for(int i=0;i<512;i++)
ffff800000807443:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:998 (discriminator 1)
ffff800000807447:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff80000080744e:	0f 8e e5 fc ff ff    	jle    ffff800000807139 <copy_mmap+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1030
            }

        }

    }
}
ffff800000807454:	90                   	nop
ffff800000807455:	90                   	nop
ffff800000807456:	48 83 c4 70          	add    rsp,0x70
ffff80000080745a:	5b                   	pop    rbx
ffff80000080745b:	41 5f                	pop    r15
ffff80000080745d:	5d                   	pop    rbp
ffff80000080745e:	c3                   	ret    

ffff80000080745f <chk_mmap>:
chk_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1032

int chk_mmap(off_t base, size_t mem_size){
ffff80000080745f:	f3 0f 1e fa          	endbr64 
ffff800000807463:	55                   	push   rbp
ffff800000807464:	48 89 e5             	mov    rbp,rsp
ffff800000807467:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807467 <chk_mmap+0x8>
ffff80000080746e:	49 bb c9 65 11 00 00 	movabs r11,0x1165c9
ffff800000807475:	00 00 00 
ffff800000807478:	4c 01 d8             	add    rax,r11
ffff80000080747b:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080747e:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1034
    size_t nr_pte;
    size_t ndx_pml4=0,ndx_pdpt=0,ndx_pd=0,ndx_pt=0;
ffff800000807482:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff800000807489:	00 
ffff80000080748a:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000807491:	00 
ffff800000807492:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000807499:	00 
ffff80000080749a:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff8000008074a1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1035
    page_item *pml4e= current->pml4;
ffff8000008074a2:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008074a9:	ff ff ff 
ffff8000008074ac:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008074b0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008074b3:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff8000008074ba:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
    nr_pte=  (mem_size-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff8000008074be:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008074c2:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008074c8:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008074cc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1037
    ndx_pt=  base/PAGE_4K_SIZE;
ffff8000008074d0:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008074d3:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008074d9:	85 c0                	test   eax,eax
ffff8000008074db:	0f 48 c2             	cmovs  eax,edx
ffff8000008074de:	c1 f8 0c             	sar    eax,0xc
ffff8000008074e1:	48 98                	cdqe   
ffff8000008074e3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038
    ndx_pd=  ndx_pt/512%512;
ffff8000008074e7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008074eb:	48 c1 e8 09          	shr    rax,0x9
ffff8000008074ef:	25 ff 01 00 00       	and    eax,0x1ff
ffff8000008074f4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1039
    ndx_pdpt=ndx_pd/512%512;
ffff8000008074f8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008074fc:	48 c1 e8 09          	shr    rax,0x9
ffff800000807500:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000807505:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1040
    ndx_pml4=ndx_pdpt/512%512;
ffff800000807509:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080750d:	48 c1 e8 09          	shr    rax,0x9
ffff800000807511:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000807516:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041
    while (nr_pte)
ffff80000080751a:	eb 25                	jmp    ffff800000807541 <chk_mmap+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1043
    {
        if(ndx_pdpt==512){
ffff80000080751c:	48 81 7d f8 00 02 00 	cmp    QWORD PTR [rbp-0x8],0x200
ffff800000807523:	00 
ffff800000807524:	75 0d                	jne    ffff800000807533 <chk_mmap+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1044
            ndx_pml4++;
ffff800000807526:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1045
            ndx_pdpt=0;
ffff80000080752b:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000807532:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1048 (discriminator 1)
        }
        if(pml4e[ndx_pml4]%PAGE_PRESENT==0){
            ndx_pml4++;
ffff800000807533:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1049 (discriminator 1)
            ndx_pdpt=0;
ffff800000807538:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080753f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050 (discriminator 1)
            continue;
ffff800000807540:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041
    while (nr_pte)
ffff800000807541:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000807546:	75 d4                	jne    ffff80000080751c <chk_mmap+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1080
        if(pt[ndx_pt]&PAGE_PRESENT)return 0;
        ndx_pt++;
        nr_pte--;
    }
    
    return 1;
ffff800000807548:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1081
}
ffff80000080754d:	5d                   	pop    rbp
ffff80000080754e:	c3                   	ret    

ffff80000080754f <sys_getpgrp>:
sys_getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1082
pid_t sys_getpgrp(void){
ffff80000080754f:	f3 0f 1e fa          	endbr64 
ffff800000807553:	55                   	push   rbp
ffff800000807554:	48 89 e5             	mov    rbp,rsp
ffff800000807557:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807557 <sys_getpgrp+0x8>
ffff80000080755e:	49 bb d9 64 11 00 00 	movabs r11,0x1164d9
ffff800000807565:	00 00 00 
ffff800000807568:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1083
    return current->gpid;
ffff80000080756b:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807572:	ff ff ff 
ffff800000807575:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807579:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080757c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1084
}
ffff80000080757f:	5d                   	pop    rbp
ffff800000807580:	c3                   	ret    

ffff800000807581 <sys_getpgid>:
sys_getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1086

int sys_getpgid(pid_t pid,gid_t gid){
ffff800000807581:	f3 0f 1e fa          	endbr64 
ffff800000807585:	55                   	push   rbp
ffff800000807586:	48 89 e5             	mov    rbp,rsp
ffff800000807589:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807589 <sys_getpgid+0x8>
ffff800000807590:	49 bb a7 64 11 00 00 	movabs r11,0x1164a7
ffff800000807597:	00 00 00 
ffff80000080759a:	4c 01 d8             	add    rax,r11
ffff80000080759d:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff8000008075a0:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1087
    if(pid==0)
ffff8000008075a3:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008075a7:	75 16                	jne    ffff8000008075bf <sys_getpgid+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1088
        return current->gpid;
ffff8000008075a9:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008075b0:	ff ff ff 
ffff8000008075b3:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008075b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008075ba:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008075bd:	eb 67                	jmp    ffff800000807626 <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1089
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008075bf:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008075c6:	eb 53                	jmp    ffff80000080761b <sys_getpgid+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1090
        if(task[i].pid==pid)
ffff8000008075c8:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008075cf:	ff ff ff 
ffff8000008075d2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008075d6:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008075d9:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008075dc:	48 63 d2             	movsxd rdx,edx
ffff8000008075df:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008075e6:	48 01 ca             	add    rdx,rcx
ffff8000008075e9:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff8000008075eb:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008075ee:	39 d1                	cmp    ecx,edx
ffff8000008075f0:	75 25                	jne    ffff800000807617 <sys_getpgid+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1091
            return task[i].gpid;
ffff8000008075f2:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008075f9:	ff ff ff 
ffff8000008075fc:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807600:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807603:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807606:	48 98                	cdqe   
ffff800000807608:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080760f:	48 01 d0             	add    rax,rdx
ffff800000807612:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000807615:	eb 0f                	jmp    ffff800000807626 <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1089 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807617:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1089 (discriminator 1)
ffff80000080761b:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff80000080761f:	7e a7                	jle    ffff8000008075c8 <sys_getpgid+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1093
    }
    return -1;
ffff800000807621:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1094
}
ffff800000807626:	5d                   	pop    rbp
ffff800000807627:	c3                   	ret    

ffff800000807628 <sys_setpgid>:
sys_setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1095
int sys_setpgid(pid_t pid,gid_t gid){
ffff800000807628:	f3 0f 1e fa          	endbr64 
ffff80000080762c:	55                   	push   rbp
ffff80000080762d:	48 89 e5             	mov    rbp,rsp
ffff800000807630:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807630 <sys_setpgid+0x8>
ffff800000807637:	49 bb 00 64 11 00 00 	movabs r11,0x116400
ffff80000080763e:	00 00 00 
ffff800000807641:	4c 01 d8             	add    rax,r11
ffff800000807644:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807647:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1096
    if(pid==0)
ffff80000080764a:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080764e:	75 56                	jne    ffff8000008076a6 <sys_setpgid+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1098
    {
        if(current->sid==current->pid)
ffff800000807650:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807657:	ff ff ff 
ffff80000080765a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080765e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807661:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000807664:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080766b:	ff ff ff 
ffff80000080766e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807672:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807675:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807677:	39 d1                	cmp    ecx,edx
ffff800000807679:	75 0a                	jne    ffff800000807685 <sys_setpgid+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1099
            return -1;
ffff80000080767b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807680:	e9 e9 00 00 00       	jmp    ffff80000080776e <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1100
        current->gpid=gid;
ffff800000807685:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080768c:	ff ff ff 
ffff80000080768f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807693:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807696:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807699:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1101
        return 0;
ffff80000080769c:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008076a1:	e9 c8 00 00 00       	jmp    ffff80000080776e <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1103
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008076a6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008076ad:	e9 ad 00 00 00       	jmp    ffff80000080775f <sys_setpgid+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1104
        if(task[i].pid==pid)
ffff8000008076b2:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008076b9:	ff ff ff 
ffff8000008076bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008076c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008076c3:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008076c6:	48 63 d2             	movsxd rdx,edx
ffff8000008076c9:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008076d0:	48 01 ca             	add    rdx,rcx
ffff8000008076d3:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff8000008076d5:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008076d8:	39 d1                	cmp    ecx,edx
ffff8000008076da:	75 7f                	jne    ffff80000080775b <sys_setpgid+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1106
        {
            if(task[i].sid==task[i].pid)
ffff8000008076dc:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008076e3:	ff ff ff 
ffff8000008076e6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008076ea:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008076ed:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008076f0:	48 63 d2             	movsxd rdx,edx
ffff8000008076f3:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008076fa:	48 01 ca             	add    rdx,rcx
ffff8000008076fd:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000807700:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807707:	ff ff ff 
ffff80000080770a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080770e:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000807711:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807714:	48 63 d2             	movsxd rdx,edx
ffff800000807717:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080771e:	48 01 f2             	add    rdx,rsi
ffff800000807721:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807723:	39 d1                	cmp    ecx,edx
ffff800000807725:	75 07                	jne    ffff80000080772e <sys_setpgid+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1107
                return -1;
ffff800000807727:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080772c:	eb 40                	jmp    ffff80000080776e <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1108
            task[i].gpid=gid;
ffff80000080772e:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807735:	ff ff ff 
ffff800000807738:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080773c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080773f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807742:	48 98                	cdqe   
ffff800000807744:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080774b:	48 01 c2             	add    rdx,rax
ffff80000080774e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807751:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1109
            return 0;
ffff800000807754:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807759:	eb 13                	jmp    ffff80000080776e <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1103 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff80000080775b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1103 (discriminator 1)
ffff80000080775f:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807763:	0f 8e 49 ff ff ff    	jle    ffff8000008076b2 <sys_setpgid+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1112
        }
    }
    return -1;
ffff800000807769:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1113
}
ffff80000080776e:	5d                   	pop    rbp
ffff80000080776f:	c3                   	ret    

ffff800000807770 <sys_setsid>:
sys_setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1115

pid_t sys_setsid(void){
ffff800000807770:	f3 0f 1e fa          	endbr64 
ffff800000807774:	55                   	push   rbp
ffff800000807775:	48 89 e5             	mov    rbp,rsp
ffff800000807778:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807778 <sys_setsid+0x8>
ffff80000080777f:	49 bb b8 62 11 00 00 	movabs r11,0x1162b8
ffff800000807786:	00 00 00 
ffff800000807789:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1116
    current->sid=current->pid;
ffff80000080778c:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807793:	ff ff ff 
ffff800000807796:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080779a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080779d:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff8000008077a4:	ff ff ff 
ffff8000008077a7:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff8000008077ab:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008077ae:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008077b0:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1117
}
ffff8000008077b3:	90                   	nop
ffff8000008077b4:	5d                   	pop    rbp
ffff8000008077b5:	c3                   	ret    

ffff8000008077b6 <sys_getsid>:
sys_getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1118
pid_t sys_getsid(pid_t pid){
ffff8000008077b6:	f3 0f 1e fa          	endbr64 
ffff8000008077ba:	55                   	push   rbp
ffff8000008077bb:	48 89 e5             	mov    rbp,rsp
ffff8000008077be:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008077be <sys_getsid+0x8>
ffff8000008077c5:	49 bb 72 62 11 00 00 	movabs r11,0x116272
ffff8000008077cc:	00 00 00 
ffff8000008077cf:	4c 01 d8             	add    rax,r11
ffff8000008077d2:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1119
    if(pid==0)
ffff8000008077d5:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008077d9:	75 16                	jne    ffff8000008077f1 <sys_getsid+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1120
        return current->sid;
ffff8000008077db:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008077e2:	ff ff ff 
ffff8000008077e5:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008077e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008077ec:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008077ef:	eb 67                	jmp    ffff800000807858 <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1121
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008077f1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008077f8:	eb 53                	jmp    ffff80000080784d <sys_getsid+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122
        if(task[i].pid==pid)
ffff8000008077fa:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807801:	ff ff ff 
ffff800000807804:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807808:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080780b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080780e:	48 63 d2             	movsxd rdx,edx
ffff800000807811:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000807818:	48 01 ca             	add    rdx,rcx
ffff80000080781b:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080781d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807820:	39 d1                	cmp    ecx,edx
ffff800000807822:	75 25                	jne    ffff800000807849 <sys_getsid+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1123
            return task[i].sid;
ffff800000807824:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080782b:	ff ff ff 
ffff80000080782e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807832:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807835:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807838:	48 98                	cdqe   
ffff80000080783a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807841:	48 01 d0             	add    rax,rdx
ffff800000807844:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000807847:	eb 0f                	jmp    ffff800000807858 <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1121 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807849:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1121 (discriminator 1)
ffff80000080784d:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807851:	7e a7                	jle    ffff8000008077fa <sys_getsid+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1125
    }
    return -1;
ffff800000807853:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1126
}
ffff800000807858:	5d                   	pop    rbp
ffff800000807859:	c3                   	ret    

ffff80000080785a <sys_tcsetpgrp>:
sys_tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1127
int sys_tcsetpgrp(int fildes,pid_t pgid_id){
ffff80000080785a:	f3 0f 1e fa          	endbr64 
ffff80000080785e:	55                   	push   rbp
ffff80000080785f:	48 89 e5             	mov    rbp,rsp
ffff800000807862:	41 57                	push   r15
ffff800000807864:	53                   	push   rbx
ffff800000807865:	48 83 ec 20          	sub    rsp,0x20
ffff800000807869:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807869 <sys_tcsetpgrp+0xf>
ffff800000807870:	49 bb c7 61 11 00 00 	movabs r11,0x1161c7
ffff800000807877:	00 00 00 
ffff80000080787a:	4c 01 db             	add    rbx,r11
ffff80000080787d:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000807880:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1129
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
ffff800000807883:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807886:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080788b:	be 02 00 00 00       	mov    esi,0x2
ffff800000807890:	89 c7                	mov    edi,eax
ffff800000807892:	49 89 df             	mov    r15,rbx
ffff800000807895:	48 b8 43 a0 ee ff ff 	movabs rax,0xffffffffffeea043
ffff80000080789c:	ff ff ff 
ffff80000080789f:	48 01 d8             	add    rax,rbx
ffff8000008078a2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1130
    int sid= sys_getsid(0);//获取session id
ffff8000008078a4:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008078a9:	49 89 df             	mov    r15,rbx
ffff8000008078ac:	48 b8 86 9d ee ff ff 	movabs rax,0xffffffffffee9d86
ffff8000008078b3:	ff ff ff 
ffff8000008078b6:	48 01 d8             	add    rax,rbx
ffff8000008078b9:	ff d0                	call   rax
ffff8000008078bb:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1131
    struct process* new_fgl=NULL;
ffff8000008078be:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008078c5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1132
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008078c6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008078cd:	e9 fb 00 00 00       	jmp    ffff8000008079cd <sys_tcsetpgrp+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff8000008078d2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008078d9:	ff ff ff 
ffff8000008078dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008078e0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008078e3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008078e6:	48 98                	cdqe   
ffff8000008078e8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008078ef:	48 01 d0             	add    rax,rdx
ffff8000008078f2:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff8000008078f5:	83 f8 04             	cmp    eax,0x4
ffff8000008078f8:	0f 84 ca 00 00 00    	je     ffff8000008079c8 <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133 (discriminator 2)
ffff8000008078fe:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807905:	ff ff ff 
ffff800000807908:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080790c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080790f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807912:	48 98                	cdqe   
ffff800000807914:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080791b:	48 01 d0             	add    rax,rdx
ffff80000080791e:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000807921:	85 c0                	test   eax,eax
ffff800000807923:	0f 84 9f 00 00 00    	je     ffff8000008079c8 <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134
        if(task[i].sid==sid){
ffff800000807929:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807930:	ff ff ff 
ffff800000807933:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807937:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080793a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080793d:	48 98                	cdqe   
ffff80000080793f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807946:	48 01 d0             	add    rax,rdx
ffff800000807949:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff80000080794c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080794f:	39 c2                	cmp    edx,eax
ffff800000807951:	75 76                	jne    ffff8000008079c9 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1135
            task[i].fg_pgid=pgid_id;
ffff800000807953:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080795a:	ff ff ff 
ffff80000080795d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807961:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807964:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807967:	48 98                	cdqe   
ffff800000807969:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807970:	48 01 c2             	add    rdx,rax
ffff800000807973:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000807976:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1136
            if(task[i].pid==pgid_id){
ffff800000807979:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807980:	ff ff ff 
ffff800000807983:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807987:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080798a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080798d:	48 98                	cdqe   
ffff80000080798f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807996:	48 01 d0             	add    rax,rdx
ffff800000807999:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080799b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080799e:	39 c2                	cmp    edx,eax
ffff8000008079a0:	75 27                	jne    ffff8000008079c9 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1138
                //这是新前台进程组的leader
                new_fgl=&task[i];
ffff8000008079a2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008079a9:	ff ff ff 
ffff8000008079ac:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008079b0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008079b3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008079b6:	48 98                	cdqe   
ffff8000008079b8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008079bf:	48 01 d0             	add    rax,rdx
ffff8000008079c2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff8000008079c6:	eb 01                	jmp    ffff8000008079c9 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff8000008079c8:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1132 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008079c9:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1132 (discriminator 1)
ffff8000008079cd:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff8000008079d1:	0f 8e fb fe ff ff    	jle    ffff8000008078d2 <sys_tcsetpgrp+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1143
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
ffff8000008079d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008079db:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffff8000008079de:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008079e2:	48 63 d2             	movsxd rdx,edx
ffff8000008079e5:	48 83 c2 1e          	add    rdx,0x1e
ffff8000008079e9:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff8000008079ee:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008079f2:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
ffff8000008079f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008079fa:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008079fd:	48 63 d2             	movsxd rdx,edx
ffff800000807a00:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807a04:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
ffff800000807a09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807a0d:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807a10:	48 63 d2             	movsxd rdx,edx
ffff800000807a13:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807a17:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807a1c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807a20:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807a24:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000807a29:	ba 01 00 00 00       	mov    edx,0x1
ffff800000807a2e:	48 89 c7             	mov    rdi,rax
ffff800000807a31:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1145
    ,TTY_CONNECT,0);
}
ffff800000807a34:	90                   	nop
ffff800000807a35:	48 83 c4 20          	add    rsp,0x20
ffff800000807a39:	5b                   	pop    rbx
ffff800000807a3a:	41 5f                	pop    r15
ffff800000807a3c:	5d                   	pop    rbp
ffff800000807a3d:	c3                   	ret    

ffff800000807a3e <sys_tcgetpgrp>:
sys_tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1146
pid_t sys_tcgetpgrp(int fildes){
ffff800000807a3e:	f3 0f 1e fa          	endbr64 
ffff800000807a42:	55                   	push   rbp
ffff800000807a43:	48 89 e5             	mov    rbp,rsp
ffff800000807a46:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807a46 <sys_tcgetpgrp+0x8>
ffff800000807a4d:	49 bb ea 5f 11 00 00 	movabs r11,0x115fea
ffff800000807a54:	00 00 00 
ffff800000807a57:	4c 01 d8             	add    rax,r11
ffff800000807a5a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1147
    return current->fg_pgid;
ffff800000807a5d:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807a64:	ff ff ff 
ffff800000807a67:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807a6b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807a6e:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1148
}
ffff800000807a71:	5d                   	pop    rbp
ffff800000807a72:	c3                   	ret    

ffff800000807a73 <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1151
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
ffff800000807a73:	f3 0f 1e fa          	endbr64 
ffff800000807a77:	55                   	push   rbp
ffff800000807a78:	48 89 e5             	mov    rbp,rsp
ffff800000807a7b:	48 83 ec 10          	sub    rsp,0x10
ffff800000807a7f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807a7f <sys_ioctl+0xc>
ffff800000807a86:	49 bb b1 5f 11 00 00 	movabs r11,0x115fb1
ffff800000807a8d:	00 00 00 
ffff800000807a90:	4c 01 d8             	add    rax,r11
ffff800000807a93:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000807a96:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000807a99:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1152
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
ffff800000807a9d:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807aa4:	ff ff ff 
ffff800000807aa7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807aab:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807aae:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807ab1:	48 63 c9             	movsxd rcx,ecx
ffff800000807ab4:	48 83 c1 1e          	add    rcx,0x1e
ffff800000807ab8:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff800000807abd:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff800000807ac1:	4c 8b 42 28          	mov    r8,QWORD PTR [rdx+0x28]
ffff800000807ac5:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000807ac8:	48 63 d2             	movsxd rdx,edx
ffff800000807acb:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000807ad2:	ff ff ff 
ffff800000807ad5:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000807ad9:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffff800000807adc:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff800000807adf:	48 63 f6             	movsxd rsi,esi
ffff800000807ae2:	48 83 c6 1e          	add    rsi,0x1e
ffff800000807ae6:	48 8b 74 f1 08       	mov    rsi,QWORD PTR [rcx+rsi*8+0x8]
ffff800000807aeb:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000807af2:	ff ff ff 
ffff800000807af5:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000807af9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807afc:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807aff:	48 63 c9             	movsxd rcx,ecx
ffff800000807b02:	48 83 c1 1e          	add    rcx,0x1e
ffff800000807b06:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
ffff800000807b0b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807b0f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807b13:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807b17:	48 89 c7             	mov    rdi,rax
ffff800000807b1a:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1154
    ,request,args);
}
ffff800000807b1d:	90                   	nop
ffff800000807b1e:	c9                   	leave  
ffff800000807b1f:	c3                   	ret    

ffff800000807b20 <set_errno>:
set_errno():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1155
void set_errno(int errno){
ffff800000807b20:	f3 0f 1e fa          	endbr64 
ffff800000807b24:	55                   	push   rbp
ffff800000807b25:	48 89 e5             	mov    rbp,rsp
ffff800000807b28:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807b28 <set_errno+0x8>
ffff800000807b2f:	49 bb 08 5f 11 00 00 	movabs r11,0x115f08
ffff800000807b36:	00 00 00 
ffff800000807b39:	4c 01 d8             	add    rax,r11
ffff800000807b3c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1156
    current->regs.errcode=errno;
ffff800000807b3f:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807b46:	ff ff ff 
ffff800000807b49:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807b4d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807b50:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807b53:	48 63 d2             	movsxd rdx,edx
ffff800000807b56:	48 89 90 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1157
ffff800000807b5d:	90                   	nop
ffff800000807b5e:	5d                   	pop    rbp
ffff800000807b5f:	c3                   	ret    

ffff800000807b60 <outb>:
outb():
ffff800000807b60:	66 89 fa             	mov    dx,di
ffff800000807b63:	66 89 f0             	mov    ax,si
ffff800000807b66:	ee                   	out    dx,al
ffff800000807b67:	e8 29 00 00 00       	call   ffff800000807b95 <io_delay>
ffff800000807b6c:	c3                   	ret    

ffff800000807b6d <outw>:
outw():
ffff800000807b6d:	66 89 fa             	mov    dx,di
ffff800000807b70:	66 89 f0             	mov    ax,si
ffff800000807b73:	66 ef                	out    dx,ax
ffff800000807b75:	90                   	nop
ffff800000807b76:	90                   	nop
ffff800000807b77:	90                   	nop
ffff800000807b78:	c3                   	ret    

ffff800000807b79 <inb>:
inb():
ffff800000807b79:	31 c0                	xor    eax,eax
ffff800000807b7b:	66 89 fa             	mov    dx,di
ffff800000807b7e:	ec                   	in     al,dx
ffff800000807b7f:	90                   	nop
ffff800000807b80:	90                   	nop
ffff800000807b81:	90                   	nop
ffff800000807b82:	c3                   	ret    

ffff800000807b83 <inw>:
inw():
ffff800000807b83:	31 c0                	xor    eax,eax
ffff800000807b85:	66 89 fa             	mov    dx,di
ffff800000807b88:	66 ed                	in     ax,dx
ffff800000807b8a:	90                   	nop
ffff800000807b8b:	90                   	nop
ffff800000807b8c:	90                   	nop
ffff800000807b8d:	c3                   	ret    

ffff800000807b8e <eoi>:
eoi():
ffff800000807b8e:	b0 20                	mov    al,0x20
ffff800000807b90:	e6 a0                	out    0xa0,al
ffff800000807b92:	e6 20                	out    0x20,al
ffff800000807b94:	c3                   	ret    

ffff800000807b95 <io_delay>:
io_delay():
ffff800000807b95:	90                   	nop
ffff800000807b96:	90                   	nop
ffff800000807b97:	90                   	nop
ffff800000807b98:	90                   	nop
ffff800000807b99:	c3                   	ret    

ffff800000807b9a <turn_on_int>:
turn_on_int():
ffff800000807b9a:	b0 f8                	mov    al,0xf8
ffff800000807b9c:	e6 21                	out    0x21,al
ffff800000807b9e:	e8 f2 ff ff ff       	call   ffff800000807b95 <io_delay>
ffff800000807ba3:	b0 af                	mov    al,0xaf
ffff800000807ba5:	e6 a1                	out    0xa1,al
ffff800000807ba7:	e8 e9 ff ff ff       	call   ffff800000807b95 <io_delay>
ffff800000807bac:	48 b8 00 70 10 00 00 	movabs rax,0xffff800000107000
ffff800000807bb3:	80 ff ff 
ffff800000807bb6:	0f 01 18             	lidt   [rax]
ffff800000807bb9:	90                   	nop
ffff800000807bba:	90                   	nop
ffff800000807bbb:	90                   	nop
ffff800000807bbc:	90                   	nop
ffff800000807bbd:	c3                   	ret    

ffff800000807bbe <report_back_trace_of_err>:
report_back_trace_of_err():
ffff800000807bbe:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000807bc3:	50                   	push   rax
ffff800000807bc4:	83 c4 08             	add    esp,0x8
ffff800000807bc7:	c3                   	ret    

ffff800000807bc8 <bt_msg>:
bt_msg():
ffff800000807bc8:	65 72 72             	gs jb  ffff800000807c3d <fill_desc+0x3a>
ffff800000807bcb:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff800000807bcc:	72 20                	jb     ffff800000807bee <init_gdt+0x11>
ffff800000807bce:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff800000807bcf:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
ffff800000807bd2:	72 73                	jb     ffff800000807c47 <fill_desc+0x44>
ffff800000807bd4:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
ffff800000807bd7:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # ffff800000eed855 <_knl_end+0x2ed855>

ffff800000807bdd <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:9
#include "proc.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
ffff800000807bdd:	f3 0f 1e fa          	endbr64 
ffff800000807be1:	55                   	push   rbp
ffff800000807be2:	48 89 e5             	mov    rbp,rsp
ffff800000807be5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807be5 <init_gdt+0x8>
ffff800000807bec:	49 bb 4b 5e 11 00 00 	movabs r11,0x115e4b
ffff800000807bf3:	00 00 00 
ffff800000807bf6:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:11
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    asm volatile("mov $0x48,%ax\r\n"
ffff800000807bf9:	66 b8 48 00          	mov    ax,0x48
ffff800000807bfd:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:13
                 "ltr %ax");  
}
ffff800000807c00:	90                   	nop
ffff800000807c01:	5d                   	pop    rbp
ffff800000807c02:	c3                   	ret    

ffff800000807c03 <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
ffff800000807c03:	f3 0f 1e fa          	endbr64 
ffff800000807c07:	55                   	push   rbp
ffff800000807c08:	48 89 e5             	mov    rbp,rsp
ffff800000807c0b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807c0b <fill_desc+0x8>
ffff800000807c12:	49 bb 25 5e 11 00 00 	movabs r11,0x115e25
ffff800000807c19:	00 00 00 
ffff800000807c1c:	4c 01 d8             	add    rax,r11
ffff800000807c1f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000807c23:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000807c27:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffff800000807c2a:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_12=base&0xffff;
ffff800000807c2e:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807c35:	ff ff ff 
ffff800000807c38:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807c3c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807c3f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807c42:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807c46:	48 01 ca             	add    rdx,rcx
ffff800000807c49:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000807c4d:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_3=(base>>16)&0xff;
ffff800000807c51:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807c55:	48 89 d6             	mov    rsi,rdx
ffff800000807c58:	48 c1 ee 10          	shr    rsi,0x10
ffff800000807c5c:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807c63:	ff ff ff 
ffff800000807c66:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807c6a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807c6d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807c70:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807c74:	48 01 ca             	add    rdx,rcx
ffff800000807c77:	89 f1                	mov    ecx,esi
ffff800000807c79:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_4=(base>>24)&0xff;
ffff800000807c7c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807c80:	48 89 d6             	mov    rsi,rdx
ffff800000807c83:	48 c1 ee 18          	shr    rsi,0x18
ffff800000807c87:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807c8e:	ff ff ff 
ffff800000807c91:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807c95:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807c98:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807c9b:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807c9f:	48 01 ca             	add    rdx,rcx
ffff800000807ca2:	89 f1                	mov    ecx,esi
ffff800000807ca4:	88 4a 07             	mov    BYTE PTR [rdx+0x7],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].base_5678=(base>>32)&0xffffffff;
ffff800000807ca7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807cab:	48 89 d1             	mov    rcx,rdx
ffff800000807cae:	48 c1 e9 20          	shr    rcx,0x20
ffff800000807cb2:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807cb9:	ff ff ff 
ffff800000807cbc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807cc0:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000807cc3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807cc6:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807cca:	48 01 f2             	add    rdx,rsi
ffff800000807ccd:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].limit_lo16=limit&0xffff;
ffff800000807cd0:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807cd7:	ff ff ff 
ffff800000807cda:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807cde:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807ce1:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807ce4:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807ce8:	48 01 ca             	add    rdx,rcx
ffff800000807ceb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807cef:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:21
    gdt[index].attr=attr|((limit>>8)&0xf0);
ffff800000807cf2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000807cf6:	48 c1 ea 08          	shr    rdx,0x8
ffff800000807cfa:	89 d1                	mov    ecx,edx
ffff800000807cfc:	66 81 e1 f0 00       	and    cx,0xf0
ffff800000807d01:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807d08:	ff ff ff 
ffff800000807d0b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807d0f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807d12:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807d15:	48 c1 e0 04          	shl    rax,0x4
ffff800000807d19:	48 01 c2             	add    rdx,rax
ffff800000807d1c:	89 c8                	mov    eax,ecx
ffff800000807d1e:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
ffff800000807d22:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:23

}
ffff800000807d26:	90                   	nop
ffff800000807d27:	5d                   	pop    rbp
ffff800000807d28:	c3                   	ret    

ffff800000807d29 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
ffff800000807d29:	f3 0f 1e fa          	endbr64 
ffff800000807d2d:	55                   	push   rbp
ffff800000807d2e:	48 89 e5             	mov    rbp,rsp
ffff800000807d31:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807d31 <fill_gate+0x8>
ffff800000807d38:	49 bb ff 5c 11 00 00 	movabs r11,0x115cff
ffff800000807d3f:	00 00 00 
ffff800000807d42:	4c 01 d8             	add    rax,r11
ffff800000807d45:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807d48:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff800000807d4b:	89 d6                	mov    esi,edx
ffff800000807d4d:	89 ca                	mov    edx,ecx
ffff800000807d4f:	89 f1                	mov    ecx,esi
ffff800000807d51:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffff800000807d55:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    gate* ptr=gdt;
ffff800000807d59:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807d60:	ff ff ff 
ffff800000807d63:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807d67:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807d6a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_low=offset&0xffff;
ffff800000807d6e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807d71:	48 c1 e0 04          	shl    rax,0x4
ffff800000807d75:	48 89 c2             	mov    rdx,rax
ffff800000807d78:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807d7c:	48 01 d0             	add    rax,rdx
ffff800000807d7f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807d82:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].offset_high=(offset>>16)&0xffff;
ffff800000807d85:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807d88:	48 c1 e0 04          	shl    rax,0x4
ffff800000807d8c:	48 89 c2             	mov    rdx,rax
ffff800000807d8f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807d93:	48 01 d0             	add    rax,rdx
ffff800000807d96:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807d99:	c1 ea 10             	shr    edx,0x10
ffff800000807d9c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].selector=selector;
ffff800000807d9f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807da2:	48 c1 e0 04          	shl    rax,0x4
ffff800000807da6:	48 89 c2             	mov    rdx,rax
ffff800000807da9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807dad:	48 01 c2             	add    rdx,rax
ffff800000807db0:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffff800000807db4:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
    ptr[index].attr=attr;
ffff800000807db8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807dbb:	48 c1 e0 04          	shl    rax,0x4
ffff800000807dbf:	48 89 c2             	mov    rdx,rax
ffff800000807dc2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807dc6:	48 01 c2             	add    rdx,rax
ffff800000807dc9:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
ffff800000807dcd:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:32
}
ffff800000807dd1:	90                   	nop
ffff800000807dd2:	5d                   	pop    rbp
ffff800000807dd3:	c3                   	ret    

ffff800000807dd4 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:35

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
ffff800000807dd4:	f3 0f 1e fa          	endbr64 
ffff800000807dd8:	55                   	push   rbp
ffff800000807dd9:	48 89 e5             	mov    rbp,rsp
ffff800000807ddc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807ddc <fill_ldt_desc+0x8>
ffff800000807de3:	49 bb 54 5c 11 00 00 	movabs r11,0x115c54
ffff800000807dea:	00 00 00 
ffff800000807ded:	4c 01 d8             	add    rax,r11
ffff800000807df0:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000807df3:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000807df6:	89 d0                	mov    eax,edx
ffff800000807df8:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff800000807dfc:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:41
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
ffff800000807e00:	90                   	nop
ffff800000807e01:	5d                   	pop    rbp
ffff800000807e02:	c3                   	ret    
ffff800000807e03:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000807e0a:	00 00 00 
ffff800000807e0d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff800000807e10 <fill_desc>:
fill_desc():
ffff800000807e10:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000807e15:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
ffff800000807e1a:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff800000807e1f:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
ffff800000807e24:	be 00 60 00 00       	mov    esi,0x6000
ffff800000807e29:	c1 e2 03             	shl    edx,0x3
ffff800000807e2c:	01 d6                	add    esi,edx
ffff800000807e2e:	66 67 89 1e          	mov    WORD PTR [esi],bx
ffff800000807e32:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
ffff800000807e37:	c1 e8 10             	shr    eax,0x10
ffff800000807e3a:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
ffff800000807e3e:	c1 eb 10             	shr    ebx,0x10
ffff800000807e41:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
ffff800000807e45:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
ffff800000807e49:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
ffff800000807e4d:	c3                   	ret    

ffff800000807e4e <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
ffff800000807e4e:	f3 0f 1e fa          	endbr64 
ffff800000807e52:	55                   	push   rbp
ffff800000807e53:	48 89 e5             	mov    rbp,rsp
ffff800000807e56:	41 57                	push   r15
ffff800000807e58:	48 83 ec 08          	sub    rsp,0x8
ffff800000807e5c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000807e5c <clock_c+0xe>
ffff800000807e63:	49 bb d4 5b 11 00 00 	movabs r11,0x115bd4
ffff800000807e6a:	00 00 00 
ffff800000807e6d:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    if(!manage_proc_lock)
ffff800000807e70:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff800000807e77:	ff ff ff 
ffff800000807e7a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000807e7e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807e80:	85 c0                	test   eax,eax
ffff800000807e82:	75 17                	jne    ffff800000807e9b <clock_c+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    {
        manage_proc();
ffff800000807e84:	49 89 d7             	mov    r15,rdx
ffff800000807e87:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807e8c:	48 b9 a8 72 ee ff ff 	movabs rcx,0xffffffffffee72a8
ffff800000807e93:	ff ff ff 
ffff800000807e96:	48 01 d1             	add    rcx,rdx
ffff800000807e99:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:16
    }
    //puts("1 disk req executed.");
ffff800000807e9b:	90                   	nop
ffff800000807e9c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000807ea0:	c9                   	leave  
ffff800000807ea1:	c3                   	ret    
ffff800000807ea2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000807ea9:	00 00 00 
ffff800000807eac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff800000807eb0 <clock>:
clock():
ffff800000807eb0:	50                   	push   rax
ffff800000807eb1:	53                   	push   rbx
ffff800000807eb2:	51                   	push   rcx
ffff800000807eb3:	52                   	push   rdx
ffff800000807eb4:	57                   	push   rdi
ffff800000807eb5:	56                   	push   rsi
ffff800000807eb6:	41 50                	push   r8
ffff800000807eb8:	41 51                	push   r9
ffff800000807eba:	41 52                	push   r10
ffff800000807ebc:	41 53                	push   r11
ffff800000807ebe:	41 54                	push   r12
ffff800000807ec0:	41 55                	push   r13
ffff800000807ec2:	41 56                	push   r14
ffff800000807ec4:	41 57                	push   r15
ffff800000807ec6:	e8 c1 cd ff ff       	call   ffff800000804c8c <save_rsp>
ffff800000807ecb:	66 8c c0             	mov    ax,es
ffff800000807ece:	50                   	push   rax
ffff800000807ecf:	66 8c d8             	mov    ax,ds
ffff800000807ed2:	50                   	push   rax
ffff800000807ed3:	66 b8 10 00          	mov    ax,0x10
ffff800000807ed7:	8e c0                	mov    es,eax
ffff800000807ed9:	8e d8                	mov    ds,eax

ffff800000807edb <clock.normal_part>:
clock.normal_part():
ffff800000807edb:	b0 20                	mov    al,0x20
ffff800000807edd:	e6 a0                	out    0xa0,al
ffff800000807edf:	e6 20                	out    0x20,al
ffff800000807ee1:	e8 68 ff ff ff       	call   ffff800000807e4e <clock_c>

ffff800000807ee6 <clock_ret>:
clock_ret():
ffff800000807ee6:	58                   	pop    rax
ffff800000807ee7:	8e d8                	mov    ds,eax
ffff800000807ee9:	58                   	pop    rax
ffff800000807eea:	8e c0                	mov    es,eax
ffff800000807eec:	41 5f                	pop    r15
ffff800000807eee:	41 5e                	pop    r14
ffff800000807ef0:	41 5d                	pop    r13
ffff800000807ef2:	41 5c                	pop    r12
ffff800000807ef4:	41 5b                	pop    r11
ffff800000807ef6:	41 5a                	pop    r10
ffff800000807ef8:	41 59                	pop    r9
ffff800000807efa:	41 58                	pop    r8
ffff800000807efc:	5e                   	pop    rsi
ffff800000807efd:	5f                   	pop    rdi
ffff800000807efe:	5a                   	pop    rdx
ffff800000807eff:	59                   	pop    rcx
ffff800000807f00:	5b                   	pop    rbx
ffff800000807f01:	58                   	pop    rax
ffff800000807f02:	48 cf                	iretq  

ffff800000807f04 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:118
    return ind;
}
*/

int execute(char *path, char **argv)
{
ffff800000807f04:	f3 0f 1e fa          	endbr64 
ffff800000807f08:	55                   	push   rbp
ffff800000807f09:	48 89 e5             	mov    rbp,rsp
ffff800000807f0c:	41 57                	push   r15
ffff800000807f0e:	53                   	push   rbx
ffff800000807f0f:	48 83 ec 20          	sub    rsp,0x20
ffff800000807f13:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807f13 <execute+0xf>
ffff800000807f1a:	49 bb 1d 5b 11 00 00 	movabs r11,0x115b1d
ffff800000807f21:	00 00 00 
ffff800000807f24:	4c 01 db             	add    rbx,r11
ffff800000807f27:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000807f2b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:121
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
ffff800000807f2f:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
ffff800000807f36:	c7 45 e0 ff ff ff ff 	mov    DWORD PTR [rbp-0x20],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
ffff800000807f3d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000807f41:	be 00 10 00 00       	mov    esi,0x1000
ffff800000807f46:	48 89 c7             	mov    rdi,rax
ffff800000807f49:	49 89 df             	mov    r15,rbx
ffff800000807f4c:	48 b8 20 dd ee ff ff 	movabs rax,0xffffffffffeedd20
ffff800000807f53:	ff ff ff 
ffff800000807f56:	48 01 d8             	add    rax,rbx
ffff800000807f59:	ff d0                	call   rax
ffff800000807f5b:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff800000807f5e:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000807f62:	79 0a                	jns    ffff800000807f6e <execute+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122 (discriminator 1)
ffff800000807f64:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807f69:	e9 81 00 00 00       	jmp    ffff800000807fef <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124
    //
    char *p=path;
ffff800000807f6e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000807f72:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125
    for(;*p!='\0';p++);
ffff800000807f76:	eb 05                	jmp    ffff800000807f7d <execute+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 2)
ffff800000807f78:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 1)
ffff800000807f7d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807f81:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000807f84:	84 c0                	test   al,al
ffff800000807f86:	75 f0                	jne    ffff800000807f78 <execute+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126
    for(;*p!='/'&&p>path;p--);
ffff800000807f88:	eb 05                	jmp    ffff800000807f8f <execute+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 3)
ffff800000807f8a:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 1)
ffff800000807f8f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807f93:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000807f96:	3c 2f                	cmp    al,0x2f
ffff800000807f98:	74 0a                	je     ffff800000807fa4 <execute+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 2)
ffff800000807f9a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807f9e:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff800000807fa2:	77 e6                	ja     ffff800000807f8a <execute+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    if(p>path)
ffff800000807fa4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807fa8:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff800000807fac:	76 3c                	jbe    ffff800000807fea <execute+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
    {
        *p='\0';
ffff800000807fae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807fb2:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
ffff800000807fb5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000807fb9:	be 00 40 00 00       	mov    esi,0x4000
ffff800000807fbe:	48 89 c7             	mov    rdi,rax
ffff800000807fc1:	49 89 df             	mov    r15,rbx
ffff800000807fc4:	48 b8 20 dd ee ff ff 	movabs rax,0xffffffffffeedd20
ffff800000807fcb:	ff ff ff 
ffff800000807fce:	48 01 d8             	add    rax,rbx
ffff800000807fd1:	ff d0                	call   rax
ffff800000807fd3:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffff800000807fd6:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff800000807fda:	79 07                	jns    ffff800000807fe3 <execute+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130 (discriminator 1)
ffff800000807fdc:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807fe1:	eb 0c                	jmp    ffff800000807fef <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131
        *p='/';
ffff800000807fe3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807fe7:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:136
    }
    // extern struct file opened[];
    extern struct process task[];
    // int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
    return 0;
ffff800000807fea:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:137
}
ffff800000807fef:	48 83 c4 20          	add    rsp,0x20
ffff800000807ff3:	5b                   	pop    rbx
ffff800000807ff4:	41 5f                	pop    r15
ffff800000807ff6:	5d                   	pop    rbp
ffff800000807ff7:	c3                   	ret    

ffff800000807ff8 <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139

int sys_execve(char *path, int argc, char **argv) {
ffff800000807ff8:	f3 0f 1e fa          	endbr64 
ffff800000807ffc:	55                   	push   rbp
ffff800000807ffd:	48 89 e5             	mov    rbp,rsp
ffff800000808000:	41 57                	push   r15
ffff800000808002:	53                   	push   rbx
ffff800000808003:	48 83 ec 60          	sub    rsp,0x60
ffff800000808007:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808007 <sys_execve+0xf>
ffff80000080800e:	49 bb 29 5a 11 00 00 	movabs r11,0x115a29
ffff800000808015:	00 00 00 
ffff800000808018:	4c 01 db             	add    rbx,r11
ffff80000080801b:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff80000080801f:	89 75 a4             	mov    DWORD PTR [rbp-0x5c],esi
ffff800000808022:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:140
    int fno=-1,cwd_fno=-1;
ffff800000808026:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [rbp-0x30],0xffffffff
ffff80000080802d:	c7 45 cc ff ff ff ff 	mov    DWORD PTR [rbp-0x34],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
ffff800000808034:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808038:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080803d:	48 89 c7             	mov    rdi,rax
ffff800000808040:	49 89 df             	mov    r15,rbx
ffff800000808043:	48 b8 20 dd ee ff ff 	movabs rax,0xffffffffffeedd20
ffff80000080804a:	ff ff ff 
ffff80000080804d:	48 01 d8             	add    rax,rbx
ffff800000808050:	ff d0                	call   rax
ffff800000808052:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
ffff800000808055:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
ffff800000808059:	79 0a                	jns    ffff800000808065 <sys_execve+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141 (discriminator 1)
ffff80000080805b:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
ffff800000808060:	e9 99 02 00 00       	jmp    ffff8000008082fe <sys_execve+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:145

    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
ffff800000808065:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080806c:	ff ff ff 
ffff80000080806f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808073:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808076:	48 89 c7             	mov    rdi,rax
ffff800000808079:	49 89 df             	mov    r15,rbx
ffff80000080807c:	48 b8 b6 92 ee ff ff 	movabs rax,0xffffffffffee92b6
ffff800000808083:	ff ff ff 
ffff800000808086:	48 01 d8             	add    rax,rbx
ffff800000808089:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:149
    // current->regs.rsp=STACK_TOP;//清空栈
    extern TSS* tss;

    current->exef=current->openf[fno];//改变执行文件
ffff80000080808b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808092:	ff ff ff 
ffff800000808095:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808099:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080809c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008080a3:	ff ff ff 
ffff8000008080a6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008080aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008080ad:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
ffff8000008080b0:	48 63 c9             	movsxd rcx,ecx
ffff8000008080b3:	48 83 c1 1e          	add    rcx,0x1e
ffff8000008080b7:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff8000008080bc:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:150
    off_t entry= load_elf(current->exef);
ffff8000008080c3:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008080ca:	ff ff ff 
ffff8000008080cd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008080d1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008080d4:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff8000008080db:	48 89 c7             	mov    rdi,rax
ffff8000008080de:	49 89 df             	mov    r15,rbx
ffff8000008080e1:	48 b8 31 b4 ee ff ff 	movabs rax,0xffffffffffeeb431
ffff8000008080e8:	ff ff ff 
ffff8000008080eb:	48 01 d8             	add    rax,rbx
ffff8000008080ee:	ff d0                	call   rax
ffff8000008080f0:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:151
    if(entry==-1)
ffff8000008080f3:	83 7d c8 ff          	cmp    DWORD PTR [rbp-0x38],0xffffffff
ffff8000008080f7:	75 4d                	jne    ffff800000808146 <sys_execve+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:153
    {
        comprintf("failed execve, errcode:%d\n",current->regs.errcode);
ffff8000008080f9:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808100:	ff ff ff 
ffff800000808103:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808107:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080810a:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
ffff800000808111:	48 89 c6             	mov    rsi,rax
ffff800000808114:	48 b8 90 d6 ff ff ff 	movabs rax,0xffffffffffffd690
ffff80000080811b:	ff ff ff 
ffff80000080811e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000808122:	48 89 c7             	mov    rdi,rax
ffff800000808125:	49 89 df             	mov    r15,rbx
ffff800000808128:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080812d:	48 ba dc 4b ef ff ff 	movabs rdx,0xffffffffffef4bdc
ffff800000808134:	ff ff ff 
ffff800000808137:	48 01 da             	add    rdx,rbx
ffff80000080813a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:154
        return -1;
ffff80000080813c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808141:	e9 b8 01 00 00       	jmp    ffff8000008082fe <sys_execve+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:156
    }
    if(sys_close(fno)<0)return -1;
ffff800000808146:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000808149:	89 c7                	mov    edi,eax
ffff80000080814b:	49 89 df             	mov    r15,rbx
ffff80000080814e:	48 b8 4a e3 ee ff ff 	movabs rax,0xffffffffffeee34a
ffff800000808155:	ff ff ff 
ffff800000808158:	48 01 d8             	add    rax,rbx
ffff80000080815b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:159

    //sysret直接返回到新程序的main
    void *retp= (void *) entry;
ffff80000080815d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000808160:	48 98                	cdqe   
ffff800000808162:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:160
    stack_store_regs *rs= (stack_store_regs *) (tss->ists[0] - sizeof(stack_store_regs));
ffff800000808166:	48 b8 20 fe ff ff ff 	movabs rax,0xfffffffffffffe20
ffff80000080816d:	ff ff ff 
ffff800000808170:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808174:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808177:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff80000080817b:	48 2d a8 00 00 00    	sub    rax,0xa8
ffff800000808181:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:161
    rs->r10= (unsigned long) retp;//返回地址已经xchg到r10
ffff800000808185:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000808189:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080818d:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163
    //第二个参数argv需要把内容从内核空间拷贝到用户堆里面
    size_t arglen=0;
ffff800000808191:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000808198:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164
    for(int i=0;i<argc;i++){
ffff800000808199:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008081a0:	eb 39                	jmp    ffff8000008081db <sys_execve+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165 (discriminator 3)
        arglen+= strlen(argv[i])+1;
ffff8000008081a2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008081a5:	48 98                	cdqe   
ffff8000008081a7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008081ae:	00 
ffff8000008081af:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008081b3:	48 01 d0             	add    rax,rdx
ffff8000008081b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008081b9:	48 89 c7             	mov    rdi,rax
ffff8000008081bc:	49 89 df             	mov    r15,rbx
ffff8000008081bf:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff8000008081c6:	ff ff ff 
ffff8000008081c9:	48 01 d8             	add    rax,rbx
ffff8000008081cc:	ff d0                	call   rax
ffff8000008081ce:	83 c0 01             	add    eax,0x1
ffff8000008081d1:	48 98                	cdqe   
ffff8000008081d3:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff8000008081d7:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 1)
ffff8000008081db:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008081de:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
ffff8000008081e1:	7c bf                	jl     ffff8000008081a2 <sys_execve+0x1aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:167
    }
    char* p= sys_malloc(arglen),pp=p;
ffff8000008081e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008081e7:	48 89 c7             	mov    rdi,rax
ffff8000008081ea:	49 89 df             	mov    r15,rbx
ffff8000008081ed:	48 b8 82 82 ee ff ff 	movabs rax,0xffffffffffee8282
ffff8000008081f4:	ff ff ff 
ffff8000008081f7:	48 01 d8             	add    rax,rbx
ffff8000008081fa:	ff d0                	call   rax
ffff8000008081fc:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff800000808200:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808204:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168
    for(int i=0;i<argc;i++){
ffff800000808207:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff80000080820e:	eb 6c                	jmp    ffff80000080827c <sys_execve+0x284>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169 (discriminator 3)
        strcpy(p,argv[i]);
ffff800000808210:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808213:	48 98                	cdqe   
ffff800000808215:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080821c:	00 
ffff80000080821d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808221:	48 01 d0             	add    rax,rdx
ffff800000808224:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808227:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080822b:	48 89 d6             	mov    rsi,rdx
ffff80000080822e:	48 89 c7             	mov    rdi,rax
ffff800000808231:	49 89 df             	mov    r15,rbx
ffff800000808234:	48 b8 81 51 ef ff ff 	movabs rax,0xffffffffffef5181
ffff80000080823b:	ff ff ff 
ffff80000080823e:	48 01 d8             	add    rax,rbx
ffff800000808241:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:170 (discriminator 3)
        p+=strlen(argv[i])+1;
ffff800000808243:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808246:	48 98                	cdqe   
ffff800000808248:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080824f:	00 
ffff800000808250:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808254:	48 01 d0             	add    rax,rdx
ffff800000808257:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080825a:	48 89 c7             	mov    rdi,rax
ffff80000080825d:	49 89 df             	mov    r15,rbx
ffff800000808260:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff800000808267:	ff ff ff 
ffff80000080826a:	48 01 d8             	add    rax,rbx
ffff80000080826d:	ff d0                	call   rax
ffff80000080826f:	83 c0 01             	add    eax,0x1
ffff800000808272:	48 98                	cdqe   
ffff800000808274:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff800000808278:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 1)
ffff80000080827c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080827f:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
ffff800000808282:	7c 8c                	jl     ffff800000808210 <sys_execve+0x218>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174
    }
    
    //第一个参数argc
    if(current->dl){
ffff800000808284:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080828b:	ff ff ff 
ffff80000080828e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808292:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808295:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff80000080829b:	85 c0                	test   eax,eax
ffff80000080829d:	74 3f                	je     ffff8000008082de <sys_execve+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175
        rs->rsi=current->dl;
ffff80000080829f:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008082a6:	ff ff ff 
ffff8000008082a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008082ad:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008082b0:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff8000008082b6:	48 63 d0             	movsxd rdx,eax
ffff8000008082b9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008082bd:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:176
        rs->rdi=argc;
ffff8000008082c1:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008082c4:	48 63 d0             	movsxd rdx,eax
ffff8000008082c7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008082cb:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177
        rs->rdx=pp;
ffff8000008082cf:	48 0f be 55 b7       	movsx  rdx,BYTE PTR [rbp-0x49]
ffff8000008082d4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008082d8:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
ffff8000008082dc:	eb 1b                	jmp    ffff8000008082f9 <sys_execve+0x301>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:179
    }else{
        rs->rsi=argc;
ffff8000008082de:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008082e1:	48 63 d0             	movsxd rdx,eax
ffff8000008082e4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008082e8:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:180
        rs->rdi=pp;
ffff8000008082ec:	48 0f be 55 b7       	movsx  rdx,BYTE PTR [rbp-0x49]
ffff8000008082f1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008082f5:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:186
    }
    
    //以下部分是临时测试代码
//    int (*pmain)(int argc,char **argv)=(int (*)(int, char **)) entry;
//    pmain(argc, (char **) rs->rdi);
    return 0;
ffff8000008082f9:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:187
}
ffff8000008082fe:	48 83 c4 60          	add    rsp,0x60
ffff800000808302:	5b                   	pop    rbx
ffff800000808303:	41 5f                	pop    r15
ffff800000808305:	5d                   	pop    rbp
ffff800000808306:	c3                   	ret    

ffff800000808307 <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:189
int exec_call(char *path)
{
ffff800000808307:	f3 0f 1e fa          	endbr64 
ffff80000080830b:	55                   	push   rbp
ffff80000080830c:	48 89 e5             	mov    rbp,rsp
ffff80000080830f:	41 57                	push   r15
ffff800000808311:	53                   	push   rbx
ffff800000808312:	48 83 ec 20          	sub    rsp,0x20
ffff800000808316:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808316 <exec_call+0xf>
ffff80000080831d:	49 bb 1a 57 11 00 00 	movabs r11,0x11571a
ffff800000808324:	00 00 00 
ffff800000808327:	4c 01 db             	add    rbx,r11
ffff80000080832a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190
    int pi= execute(path, NULL);
ffff80000080832e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808332:	be 00 00 00 00       	mov    esi,0x0
ffff800000808337:	48 89 c7             	mov    rdi,rax
ffff80000080833a:	49 89 df             	mov    r15,rbx
ffff80000080833d:	48 b8 d4 a4 ee ff ff 	movabs rax,0xffffffffffeea4d4
ffff800000808344:	ff ff ff 
ffff800000808347:	48 01 d8             	add    rax,rbx
ffff80000080834a:	ff d0                	call   rax
ffff80000080834c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:191
    int tss= _TSS_IND(pi)*8;
ffff80000080834f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808352:	01 c0                	add    eax,eax
ffff800000808354:	83 c0 05             	add    eax,0x5
ffff800000808357:	c1 e0 03             	shl    eax,0x3
ffff80000080835a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:194
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
ffff80000080835d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808360:	89 c7                	mov    edi,eax
ffff800000808362:	49 89 df             	mov    r15,rbx
ffff800000808365:	48 b8 64 75 ee ff ff 	movabs rax,0xffffffffffee7564
ffff80000080836c:	ff ff ff 
ffff80000080836f:	48 01 d8             	add    rax,rbx
ffff800000808372:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195
    while(task[pi].stat != TASK_ZOMBIE);
ffff800000808374:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195 (discriminator 1)
ffff800000808375:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080837c:	ff ff ff 
ffff80000080837f:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000808383:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808386:	48 98                	cdqe   
ffff800000808388:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080838f:	48 01 d0             	add    rax,rdx
ffff800000808392:	48 83 c0 10          	add    rax,0x10
ffff800000808396:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000808399:	83 f8 04             	cmp    eax,0x4
ffff80000080839c:	75 d7                	jne    ffff800000808375 <exec_call+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196
    return task[pi].exit_code;
ffff80000080839e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008083a5:	ff ff ff 
ffff8000008083a8:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff8000008083ac:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008083af:	48 98                	cdqe   
ffff8000008083b1:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008083b8:	48 01 d0             	add    rax,rdx
ffff8000008083bb:	48 83 c0 20          	add    rax,0x20
ffff8000008083bf:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:197
}
ffff8000008083c2:	48 83 c4 20          	add    rsp,0x20
ffff8000008083c6:	5b                   	pop    rbx
ffff8000008083c7:	41 5f                	pop    r15
ffff8000008083c9:	5d                   	pop    rbp
ffff8000008083ca:	c3                   	ret    

ffff8000008083cb <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:199
int proc_start()
{
ffff8000008083cb:	f3 0f 1e fa          	endbr64 
ffff8000008083cf:	55                   	push   rbp
ffff8000008083d0:	48 89 e5             	mov    rbp,rsp
ffff8000008083d3:	41 57                	push   r15
ffff8000008083d5:	53                   	push   rbx
ffff8000008083d6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008083d6 <proc_start+0xb>
ffff8000008083dd:	49 bb 5a 56 11 00 00 	movabs r11,0x11565a
ffff8000008083e4:	00 00 00 
ffff8000008083e7:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:202
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
ffff8000008083ea:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff8000008083f1:	ff ff ff 
ffff8000008083f4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008083f8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008083fa:	48 98                	cdqe   
ffff8000008083fc:	48 69 d0 58 03 00 00 	imul   rdx,rax,0x358
ffff800000808403:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080840a:	ff ff ff 
ffff80000080840d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808411:	48 01 d0             	add    rax,rdx
ffff800000808414:	48 89 c7             	mov    rdi,rax
ffff800000808417:	49 89 df             	mov    r15,rbx
ffff80000080841a:	48 b8 16 aa ee ff ff 	movabs rax,0xffffffffffeeaa16
ffff800000808421:	ff ff ff 
ffff800000808424:	48 01 d8             	add    rax,rbx
ffff800000808427:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:204
    //释放进程资源
    sys_exit(0);
ffff800000808429:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080842e:	49 89 df             	mov    r15,rbx
ffff800000808431:	48 b8 24 7f ee ff ff 	movabs rax,0xffffffffffee7f24
ffff800000808438:	ff ff ff 
ffff80000080843b:	48 01 d8             	add    rax,rbx
ffff80000080843e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:205
}
ffff800000808440:	90                   	nop
ffff800000808441:	5b                   	pop    rbx
ffff800000808442:	41 5f                	pop    r15
ffff800000808444:	5d                   	pop    rbp
ffff800000808445:	c3                   	ret    

ffff800000808446 <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:208
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
ffff800000808446:	f3 0f 1e fa          	endbr64 
ffff80000080844a:	55                   	push   rbp
ffff80000080844b:	48 89 e5             	mov    rbp,rsp
ffff80000080844e:	41 57                	push   r15
ffff800000808450:	53                   	push   rbx
ffff800000808451:	48 81 ec 10 03 00 00 	sub    rsp,0x310
ffff800000808458:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808458 <load_pe+0x12>
ffff80000080845f:	49 bb d8 55 11 00 00 	movabs r11,0x1155d8
ffff800000808466:	00 00 00 
ffff800000808469:	4c 01 db             	add    rbx,r11
ffff80000080846c:	48 89 bd e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:210
    // 读取文件头
    struct file *f=proc->exef;
ffff800000808473:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff80000080847a:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff800000808481:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:211
    int exefno=-1;
ffff800000808485:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080848c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000808493:	eb 32                	jmp    ffff8000008084c7 <load_pe+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:213
        if(current->openf[i]==f)
ffff800000808495:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080849c:	ff ff ff 
ffff80000080849f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008084a3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008084a6:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008084a9:	48 63 d2             	movsxd rdx,edx
ffff8000008084ac:	48 83 c2 1e          	add    rdx,0x1e
ffff8000008084b0:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff8000008084b5:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff8000008084b9:	75 08                	jne    ffff8000008084c3 <load_pe+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:215
        {
            exefno=i;
ffff8000008084bb:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008084be:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:216
            break;
ffff8000008084c1:	eb 0a                	jmp    ffff8000008084cd <load_pe+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff8000008084c3:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212 (discriminator 1)
ffff8000008084c7:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff8000008084cb:	7e c8                	jle    ffff800000808495 <load_pe+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218
        }
    if(exefno==-1)return ERR;
ffff8000008084cd:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff8000008084d1:	75 0a                	jne    ffff8000008084dd <load_pe+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218 (discriminator 1)
ffff8000008084d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008084d8:	e9 64 08 00 00       	jmp    ffff800000808d41 <load_pe+0x8fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:222

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
ffff8000008084dd:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
ffff8000008084e4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008084e7:	ba 44 00 00 00       	mov    edx,0x44
ffff8000008084ec:	48 89 ce             	mov    rsi,rcx
ffff8000008084ef:	89 c7                	mov    edi,eax
ffff8000008084f1:	49 89 df             	mov    r15,rbx
ffff8000008084f4:	48 b8 41 e4 ee ff ff 	movabs rax,0xffffffffffeee441
ffff8000008084fb:	ff ff ff 
ffff8000008084fe:	48 01 d8             	add    rax,rbx
ffff800000808501:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:223
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
ffff800000808503:	48 8b 85 6c fe ff ff 	mov    rax,QWORD PTR [rbp-0x194]
ffff80000080850a:	48 89 c1             	mov    rcx,rax
ffff80000080850d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808510:	ba 00 00 00 00       	mov    edx,0x0
ffff800000808515:	48 89 ce             	mov    rsi,rcx
ffff800000808518:	89 c7                	mov    edi,eax
ffff80000080851a:	49 89 df             	mov    r15,rbx
ffff80000080851d:	48 b8 dd e5 ee ff ff 	movabs rax,0xffffffffffeee5dd
ffff800000808524:	ff ff ff 
ffff800000808527:	48 01 d8             	add    rax,rbx
ffff80000080852a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:224
    sys_read(exefno, &tnth, sizeof(tnth));
ffff80000080852c:	48 8d 8d 20 fd ff ff 	lea    rcx,[rbp-0x2e0]
ffff800000808533:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808536:	ba 0c 01 00 00       	mov    edx,0x10c
ffff80000080853b:	48 89 ce             	mov    rsi,rcx
ffff80000080853e:	89 c7                	mov    edi,eax
ffff800000808540:	49 89 df             	mov    r15,rbx
ffff800000808543:	48 b8 41 e4 ee ff ff 	movabs rax,0xffffffffffeee441
ffff80000080854a:	ff ff ff 
ffff80000080854d:	48 01 d8             	add    rax,rbx
ffff800000808550:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:227

    //是否需要移动base(先不检查)
    off_t nbase=tnth.OptionalHeader.ImageBase;
ffff800000808552:	48 8b 85 54 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2ac]
ffff800000808559:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:228
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
ffff80000080855c:	8b 85 74 fd ff ff    	mov    eax,DWORD PTR [rbp-0x28c]
ffff800000808562:	c1 e8 0c             	shr    eax,0xc
ffff800000808565:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:253
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
ffff800000808568:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080856b:	ba 00 00 00 00       	mov    edx,0x0
ffff800000808570:	be 00 00 00 00       	mov    esi,0x0
ffff800000808575:	89 c7                	mov    edi,eax
ffff800000808577:	49 89 df             	mov    r15,rbx
ffff80000080857a:	48 b8 dd e5 ee ff ff 	movabs rax,0xffffffffffeee5dd
ffff800000808581:	ff ff ff 
ffff800000808584:	48 01 d8             	add    rax,rbx
ffff800000808587:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:254
    sys_read(exefno, nbase, PAGE_SIZE);
ffff800000808589:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff80000080858c:	48 98                	cdqe   
ffff80000080858e:	48 89 c1             	mov    rcx,rax
ffff800000808591:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808594:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808599:	48 89 ce             	mov    rsi,rcx
ffff80000080859c:	89 c7                	mov    edi,eax
ffff80000080859e:	49 89 df             	mov    r15,rbx
ffff8000008085a1:	48 b8 41 e4 ee ff ff 	movabs rax,0xffffffffffeee441
ffff8000008085a8:	ff ff ff 
ffff8000008085ab:	48 01 d8             	add    rax,rbx
ffff8000008085ae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:256
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
ffff8000008085b0:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff8000008085b3:	48 98                	cdqe   
ffff8000008085b5:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:257
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
ffff8000008085bc:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff8000008085bf:	48 63 d0             	movsxd rdx,eax
ffff8000008085c2:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008085c9:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff8000008085cd:	48 01 d0             	add    rax,rdx
ffff8000008085d0:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
ffff8000008085d7:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008085de:	48 83 c0 04          	add    rax,0x4
ffff8000008085e2:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
ffff8000008085e9:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008085f0:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
ffff8000008085f3:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262
    int page_count=prog_size/4096;
ffff8000008085f9:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff8000008085ff:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000808605:	85 c0                	test   eax,eax
ffff800000808607:	0f 48 c2             	cmovs  eax,edx
ffff80000080860a:	c1 f8 0c             	sar    eax,0xc
ffff80000080860d:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:264

    off_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
ffff800000808613:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080861a:	8b 50 28             	mov    edx,DWORD PTR [rax+0x28]
ffff80000080861d:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808620:	01 d0                	add    eax,edx
ffff800000808622:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:265
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
ffff800000808628:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
ffff80000080862e:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
ffff800000808634:	85 c0                	test   eax,eax
ffff800000808636:	0f 48 c2             	cmovs  eax,edx
ffff800000808639:	c1 f8 0a             	sar    eax,0xa
ffff80000080863c:	89 c1                	mov    ecx,eax
ffff80000080863e:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
ffff800000808644:	99                   	cdq    
ffff800000808645:	c1 ea 16             	shr    edx,0x16
ffff800000808648:	01 d0                	add    eax,edx
ffff80000080864a:	25 ff 03 00 00       	and    eax,0x3ff
ffff80000080864f:	29 d0                	sub    eax,edx
ffff800000808651:	01 c8                	add    eax,ecx
ffff800000808653:	85 c0                	test   eax,eax
ffff800000808655:	0f 95 c0             	setne  al
ffff800000808658:	0f b6 c0             	movzx  eax,al
ffff80000080865b:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:266
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
ffff800000808661:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff800000808667:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff80000080866d:	85 c0                	test   eax,eax
ffff80000080866f:	0f 48 c2             	cmovs  eax,edx
ffff800000808672:	c1 f8 15             	sar    eax,0x15
ffff800000808675:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:269

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
ffff80000080867b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808682:	89 c0                	mov    eax,eax
ffff800000808684:	48 05 0c 01 00 00    	add    rax,0x10c
ffff80000080868a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:271
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
ffff80000080868e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808695:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff800000808699:	0f b7 d0             	movzx  edx,ax
ffff80000080869c:	89 d0                	mov    eax,edx
ffff80000080869e:	c1 e0 02             	shl    eax,0x2
ffff8000008086a1:	01 d0                	add    eax,edx
ffff8000008086a3:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:270
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
ffff8000008086a6:	05 50 01 00 00       	add    eax,0x150
ffff8000008086ab:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:272
    int align=nth->OptionalHeader.FileAlignment;
ffff8000008086b1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008086b8:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
ffff8000008086bb:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273
    data_start=data_start%align?data_start-data_start%align+align:data_start;
ffff8000008086c1:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008086c7:	99                   	cdq    
ffff8000008086c8:	f7 bd 4c ff ff ff    	idiv   DWORD PTR [rbp-0xb4]
ffff8000008086ce:	89 d0                	mov    eax,edx
ffff8000008086d0:	85 c0                	test   eax,eax
ffff8000008086d2:	74 23                	je     ffff8000008086f7 <load_pe+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 1)
ffff8000008086d4:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008086da:	99                   	cdq    
ffff8000008086db:	f7 bd 4c ff ff ff    	idiv   DWORD PTR [rbp-0xb4]
ffff8000008086e1:	89 d1                	mov    ecx,edx
ffff8000008086e3:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008086e9:	29 c8                	sub    eax,ecx
ffff8000008086eb:	89 c2                	mov    edx,eax
ffff8000008086ed:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
ffff8000008086f3:	01 d0                	add    eax,edx
ffff8000008086f5:	eb 06                	jmp    ffff8000008086fd <load_pe+0x2b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 2)
ffff8000008086f7:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 4)
ffff8000008086fd:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff800000808703:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080870a:	e9 83 00 00 00       	jmp    ffff800000808792 <load_pe+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:276
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
ffff80000080870f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808713:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000808716:	25 00 00 00 02       	and    eax,0x2000000
ffff80000080871b:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:277
        if(disca)
ffff800000808721:	83 bd b8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x148],0x0
ffff800000808728:	75 5e                	jne    ffff800000808788 <load_pe+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
ffff80000080872a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080872e:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff800000808731:	89 c1                	mov    ecx,eax
ffff800000808733:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808736:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080873b:	48 89 ce             	mov    rsi,rcx
ffff80000080873e:	89 c7                	mov    edi,eax
ffff800000808740:	49 89 df             	mov    r15,rbx
ffff800000808743:	48 b8 dd e5 ee ff ff 	movabs rax,0xffffffffffeee5dd
ffff80000080874a:	ff ff ff 
ffff80000080874d:	48 01 d8             	add    rax,rbx
ffff800000808750:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:281
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
ffff800000808752:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808756:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808759:	89 c2                	mov    edx,eax
ffff80000080875b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080875f:	8b 48 0c             	mov    ecx,DWORD PTR [rax+0xc]
ffff800000808762:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808765:	01 c8                	add    eax,ecx
ffff800000808767:	89 c0                	mov    eax,eax
ffff800000808769:	48 89 c1             	mov    rcx,rax
ffff80000080876c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080876f:	48 89 ce             	mov    rsi,rcx
ffff800000808772:	89 c7                	mov    edi,eax
ffff800000808774:	49 89 df             	mov    r15,rbx
ffff800000808777:	48 b8 41 e4 ee ff ff 	movabs rax,0xffffffffffeee441
ffff80000080877e:	ff ff ff 
ffff800000808781:	48 01 d8             	add    rax,rbx
ffff800000808784:	ff d0                	call   rax
ffff800000808786:	eb 01                	jmp    ffff800000808789 <load_pe+0x343>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:278
            continue;
ffff800000808788:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff800000808789:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
ffff80000080878d:	48 83 45 e0 28       	add    QWORD PTR [rbp-0x20],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 1)
ffff800000808792:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808799:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff80000080879d:	0f b7 c0             	movzx  eax,ax
ffff8000008087a0:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff8000008087a3:	0f 8c 66 ff ff ff    	jl     ffff80000080870f <load_pe+0x2c9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:286

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
ffff8000008087a9:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008087b0:	48 05 90 00 00 00    	add    rax,0x90
ffff8000008087b6:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:287
    if(impd->Size>0)
ffff8000008087bd:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff8000008087c4:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008087c7:	85 c0                	test   eax,eax
ffff8000008087c9:	0f 84 b5 02 00 00    	je     ffff800000808a84 <load_pe+0x63e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:289
    {
        int tmpi=impd->VirtualAddress+nbase;
ffff8000008087cf:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff8000008087d6:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008087d8:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff8000008087db:	01 d0                	add    eax,edx
ffff8000008087dd:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:290
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
ffff8000008087e3:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
ffff8000008087e9:	48 98                	cdqe   
ffff8000008087eb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
        int dllp;
        while (impdes->Characteristics)
ffff8000008087ef:	e9 82 02 00 00       	jmp    ffff800000808a76 <load_pe+0x630>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:295
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
ffff8000008087f4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008087f8:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff8000008087fb:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff8000008087fe:	01 d0                	add    eax,edx
ffff800000808800:	89 c0                	mov    eax,eax
ffff800000808802:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:298
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
ffff800000808809:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000808810:	48 ba ab d6 ff ff ff 	movabs rdx,0xffffffffffffd6ab
ffff800000808817:	ff ff ff 
ffff80000080881a:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080881e:	48 89 d6             	mov    rsi,rdx
ffff800000808821:	48 89 c7             	mov    rdi,rax
ffff800000808824:	49 89 df             	mov    r15,rbx
ffff800000808827:	48 b8 cf 53 ef ff ff 	movabs rax,0xffffffffffef53cf
ffff80000080882e:	ff ff ff 
ffff800000808831:	48 01 d8             	add    rax,rbx
ffff800000808834:	ff d0                	call   rax
ffff800000808836:	85 c0                	test   eax,eax
ffff800000808838:	75 09                	jne    ffff800000808843 <load_pe+0x3fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:300
            {
                dllp=0x1c00000;
ffff80000080883a:	c7 45 cc 00 00 c0 01 	mov    DWORD PTR [rbp-0x34],0x1c00000
ffff800000808841:	eb 3d                	jmp    ffff800000808880 <load_pe+0x43a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:303
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
ffff800000808843:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff80000080884a:	48 89 c7             	mov    rdi,rax
ffff80000080884d:	48 b8 16 aa ee ff ff 	movabs rax,0xffffffffffeeaa16
ffff800000808854:	ff ff ff 
ffff800000808857:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080885b:	ff d0                	call   rax
ffff80000080885d:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:306
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
ffff800000808863:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
ffff800000808869:	89 c7                	mov    edi,eax
ffff80000080886b:	49 89 df             	mov    r15,rbx
ffff80000080886e:	48 b8 1d b3 ee ff ff 	movabs rax,0xffffffffffeeb31d
ffff800000808875:	ff ff ff 
ffff800000808878:	48 01 d8             	add    rax,rbx
ffff80000080887b:	ff d0                	call   rax
ffff80000080887d:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:309
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
ffff800000808880:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808883:	48 98                	cdqe   
ffff800000808885:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:310
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
ffff80000080888c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080888f:	48 63 d0             	movsxd rdx,eax
ffff800000808892:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffff800000808899:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080889d:	48 01 d0             	add    rax,rdx
ffff8000008088a0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:311
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
ffff8000008088a7:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008088ae:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
ffff8000008088b4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008088b7:	01 d0                	add    eax,edx
ffff8000008088b9:	89 c0                	mov    eax,eax
ffff8000008088bb:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:312
            int funcn=dllexp->NumberOfNames;
ffff8000008088c2:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008088c9:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff8000008088cc:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
            char **fnames=dllexp->AddressOfNames+dllp;
ffff8000008088d2:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008088d9:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
ffff8000008088dc:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008088df:	01 d0                	add    eax,edx
ffff8000008088e1:	89 c0                	mov    eax,eax
ffff8000008088e3:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:314
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
ffff8000008088ea:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008088f1:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff8000008088f4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008088f7:	01 d0                	add    eax,edx
ffff8000008088f9:	89 c0                	mov    eax,eax
ffff8000008088fb:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:315
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
ffff800000808902:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808909:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff80000080890c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080890f:	01 d0                	add    eax,edx
ffff800000808911:	89 c0                	mov    eax,eax
ffff800000808913:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:317
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
ffff80000080891a:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808921:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808924:	89 85 ec fe ff ff    	mov    DWORD PTR [rbp-0x114],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:319
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
ffff80000080892a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080892e:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff800000808931:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808934:	01 d0                	add    eax,edx
ffff800000808936:	89 c0                	mov    eax,eax
ffff800000808938:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:320
            char **siataddrs=impdes->FirstThunk+nbase;
ffff80000080893c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808940:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff800000808943:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808946:	01 d0                	add    eax,edx
ffff800000808948:	89 c0                	mov    eax,eax
ffff80000080894a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            while (*iataddrs)
ffff80000080894e:	e9 10 01 00 00       	jmp    ffff800000808a63 <load_pe+0x61d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:324
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
ffff800000808953:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808957:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808959:	85 c0                	test   eax,eax
ffff80000080895b:	79 43                	jns    ffff8000008089a0 <load_pe+0x55a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:327
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
ffff80000080895d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808961:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808963:	25 ff ff ff 7f       	and    eax,0x7fffffff
ffff800000808968:	2b 85 ec fe ff ff    	sub    eax,DWORD PTR [rbp-0x114]
ffff80000080896e:	89 85 d8 fe ff ff    	mov    DWORD PTR [rbp-0x128],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:328
                    *iataddrs=funcaddrs[ord]+dllp;
ffff800000808974:	8b 85 d8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x128]
ffff80000080897a:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808981:	00 
ffff800000808982:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000808989:	48 01 d0             	add    rax,rdx
ffff80000080898c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080898e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808991:	01 d0                	add    eax,edx
ffff800000808993:	89 c2                	mov    edx,eax
ffff800000808995:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808999:	89 10                	mov    DWORD PTR [rax],edx
ffff80000080899b:	e9 b9 00 00 00       	jmp    ffff800000808a59 <load_pe+0x613>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
ffff8000008089a0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008089a4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008089a6:	89 c0                	mov    eax,eax
ffff8000008089a8:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:333
                    import_by_name_p+=2;//跳过开头两字节序号
ffff8000008089af:	48 83 85 e0 fe ff ff 	add    QWORD PTR [rbp-0x120],0x2
ffff8000008089b6:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:334
                    int i=0;
ffff8000008089b7:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
                    for(;i<funcn;i++)
ffff8000008089be:	e9 87 00 00 00       	jmp    ffff800000808a4a <load_pe+0x604>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:337
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
ffff8000008089c3:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff8000008089c6:	48 98                	cdqe   
ffff8000008089c8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008089cf:	00 
ffff8000008089d0:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008089d7:	48 01 d0             	add    rax,rdx
ffff8000008089da:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008089dd:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffff8000008089e4:	48 89 d6             	mov    rsi,rdx
ffff8000008089e7:	48 89 c7             	mov    rdi,rax
ffff8000008089ea:	49 89 df             	mov    r15,rbx
ffff8000008089ed:	48 b8 cf 53 ef ff ff 	movabs rax,0xffffffffffef53cf
ffff8000008089f4:	ff ff ff 
ffff8000008089f7:	48 01 d8             	add    rax,rbx
ffff8000008089fa:	ff d0                	call   rax
ffff8000008089fc:	85 c0                	test   eax,eax
ffff8000008089fe:	75 46                	jne    ffff800000808a46 <load_pe+0x600>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:339
                        {
                            int ordi=funcords[i];
ffff800000808a00:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808a03:	48 98                	cdqe   
ffff800000808a05:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffff800000808a09:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000808a10:	48 01 d0             	add    rax,rdx
ffff800000808a13:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808a16:	98                   	cwde   
ffff800000808a17:	89 85 dc fe ff ff    	mov    DWORD PTR [rbp-0x124],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:340
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
ffff800000808a1d:	8b 85 dc fe ff ff    	mov    eax,DWORD PTR [rbp-0x124]
ffff800000808a23:	48 98                	cdqe   
ffff800000808a25:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808a2c:	00 
ffff800000808a2d:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000808a34:	48 01 d0             	add    rax,rdx
ffff800000808a37:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808a39:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808a3c:	01 d0                	add    eax,edx
ffff800000808a3e:	89 c2                	mov    edx,eax
ffff800000808a40:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a44:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
                    for(;i<funcn;i++)
ffff800000808a46:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335 (discriminator 1)
ffff800000808a4a:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808a4d:	3b 85 0c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xf4]
ffff800000808a53:	0f 8c 6a ff ff ff    	jl     ffff8000008089c3 <load_pe+0x57d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
                        }
                    }
                }
                iataddrs++;
ffff800000808a59:	48 83 45 c0 04       	add    QWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
                siataddrs++;
ffff800000808a5e:	48 83 45 b8 08       	add    QWORD PTR [rbp-0x48],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            while (*iataddrs)
ffff800000808a63:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a67:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808a69:	85 c0                	test   eax,eax
ffff800000808a6b:	0f 85 e2 fe ff ff    	jne    ffff800000808953 <load_pe+0x50d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:347
            }
            impdes++;
ffff800000808a71:	48 83 45 d0 14       	add    QWORD PTR [rbp-0x30],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
        while (impdes->Characteristics)
ffff800000808a76:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808a7a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808a7c:	85 c0                	test   eax,eax
ffff800000808a7e:	0f 85 70 fd ff ff    	jne    ffff8000008087f4 <load_pe+0x3ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:354
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
ffff800000808a84:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000808a8b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:355
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
ffff800000808a8c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808a93:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
ffff800000808a99:	85 c0                	test   eax,eax
ffff800000808a9b:	0f 84 e7 00 00 00    	je     ffff800000808b88 <load_pe+0x742>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000808aa1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808aa8:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358
                                +(u32)nbase);
ffff800000808aae:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000808ab1:	01 d0                	add    eax,edx
ffff800000808ab3:	89 c0                	mov    eax,eax
ffff800000808ab5:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:359
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
ffff800000808ab9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808abd:	48 83 c0 40          	add    rax,0x40
ffff800000808ac1:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:360
        u16 *rtype=reloc+1;
ffff800000808ac5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808ac9:	48 83 c0 02          	add    rax,0x2
ffff800000808acd:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:361
        int old_base=nth->OptionalHeader.ImageBase;
ffff800000808ad1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808ad8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000808adc:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
        while(relp->VirtualAddress){
ffff800000808ae2:	e9 93 00 00 00       	jmp    ffff800000808b7a <load_pe+0x734>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:363
            int pgva=relp->VirtualAddress+nbase;
ffff800000808ae7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808aeb:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808aed:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808af0:	01 d0                	add    eax,edx
ffff800000808af2:	89 85 d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff800000808af8:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
ffff800000808aff:	eb 57                	jmp    ffff800000808b58 <load_pe+0x712>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff800000808b01:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808b05:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808b08:	66 85 c0             	test   ax,ax
ffff800000808b0b:	74 46                	je     ffff800000808b53 <load_pe+0x70d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:367
                int *at=*reloc+pgva;//要重定位的数据的地址
ffff800000808b0d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808b11:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808b14:	0f b7 d0             	movzx  edx,ax
ffff800000808b17:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
ffff800000808b1d:	01 d0                	add    eax,edx
ffff800000808b1f:	48 98                	cdqe   
ffff800000808b21:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:368
                *at=*at-old_base+nbase;
ffff800000808b28:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808b2f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808b31:	2b 85 d4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x12c]
ffff800000808b37:	89 c2                	mov    edx,eax
ffff800000808b39:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808b3c:	01 c2                	add    edx,eax
ffff800000808b3e:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808b45:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:370
                //下一个
                reloc+=2;
ffff800000808b47:	48 83 45 a0 04       	add    QWORD PTR [rbp-0x60],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:371
                rtype+=2;
ffff800000808b4c:	48 83 45 98 04       	add    QWORD PTR [rbp-0x68],0x4
ffff800000808b51:	eb 01                	jmp    ffff800000808b54 <load_pe+0x70e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff800000808b53:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff800000808b54:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364 (discriminator 1)
ffff800000808b58:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808b5c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808b5f:	c1 e8 02             	shr    eax,0x2
ffff800000808b62:	89 c2                	mov    edx,eax
ffff800000808b64:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000808b67:	39 c2                	cmp    edx,eax
ffff800000808b69:	77 96                	ja     ffff800000808b01 <load_pe+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:373
            }
            relp=(int)relp+0x1000;
ffff800000808b6b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808b6f:	05 00 10 00 00       	add    eax,0x1000
ffff800000808b74:	48 98                	cdqe   
ffff800000808b76:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
        while(relp->VirtualAddress){
ffff800000808b7a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808b7e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808b80:	85 c0                	test   eax,eax
ffff800000808b82:	0f 85 5f ff ff ff    	jne    ffff800000808ae7 <load_pe+0x6a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:379
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
ffff800000808b88:	c7 85 00 fd ff ff 00 	mov    DWORD PTR [rbp-0x300],0x0
ffff800000808b8f:	00 00 00 
ffff800000808b92:	c7 85 04 fd ff ff 00 	mov    DWORD PTR [rbp-0x2fc],0x0
ffff800000808b99:	00 00 00 
ffff800000808b9c:	48 c7 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],0x0
ffff800000808ba3:	00 00 00 00 
ffff800000808ba7:	48 c7 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],0x0
ffff800000808bae:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:386
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff800000808bb2:	48 8d 85 00 fd ff ff 	lea    rax,[rbp-0x300]
ffff800000808bb9:	ba 18 00 00 00       	mov    edx,0x18
ffff800000808bbe:	48 89 c6             	mov    rsi,rax
ffff800000808bc1:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000808bc6:	49 89 df             	mov    r15,rbx
ffff800000808bc9:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff800000808bd0:	ff ff ff 
ffff800000808bd3:	48 01 d8             	add    rax,rbx
ffff800000808bd6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
ffff800000808bd8:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000808bdf:	ff ff ff 
ffff800000808be2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808be6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808be8:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808bef:	ff ff ff 
ffff800000808bf2:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808bf6:	48 98                	cdqe   
ffff800000808bf8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808bff:	48 01 d0             	add    rax,rdx
ffff800000808c02:	48 83 c0 20          	add    rax,0x20
ffff800000808c06:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x1000000
ffff800000808c0d:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:388
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff800000808c0e:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000808c15:	ff ff ff 
ffff800000808c18:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808c1c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808c1e:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808c25:	ff ff ff 
ffff800000808c28:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808c2c:	48 98                	cdqe   
ffff800000808c2e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808c35:	48 01 d0             	add    rax,rdx
ffff800000808c38:	48 83 c0 20          	add    rax,0x20
ffff800000808c3c:	48 c7 40 10 00 10 00 	mov    QWORD PTR [rax+0x10],0x1001000
ffff800000808c43:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
ffff800000808c44:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000808c4b:	ff ff ff 
ffff800000808c4e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808c52:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808c54:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808c5b:	ff ff ff 
ffff800000808c5e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808c62:	48 98                	cdqe   
ffff800000808c64:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808c6b:	48 01 d0             	add    rax,rdx
ffff800000808c6e:	48 83 c0 30          	add    rax,0x30
ffff800000808c72:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000808c79:	7f 00 00 
ffff800000808c7c:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
ffff800000808c80:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff800000808c86:	48 98                	cdqe   
ffff800000808c88:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:398
    int ecode=main(0,NULL);
ffff800000808c8f:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff800000808c96:	be 00 00 00 00       	mov    esi,0x0
ffff800000808c9b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808ca0:	ff d0                	call   rax
ffff800000808ca2:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:399
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
ffff800000808ca8:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
ffff800000808cae:	48 98                	cdqe   
ffff800000808cb0:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0x14
ffff800000808cb7:	14 00 00 00 
ffff800000808cbb:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffff800000808cc2:	48 c7 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],0x0
ffff800000808cc9:	00 00 00 00 
ffff800000808ccd:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
ffff800000808cd4:	00 00 00 00 
ffff800000808cd8:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0x0
ffff800000808cdf:	00 00 00 00 
ffff800000808ce3:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffff800000808cea:	00 00 00 00 
ffff800000808cee:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0x0
ffff800000808cf5:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        asm volatile(".byte 0x48\n"
ffff800000808cf9:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffff800000808d00:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffff800000808d07:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
ffff800000808d0e:	48 8b 95 98 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x168]
ffff800000808d15:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
ffff800000808d1c:	4c 8b 85 88 fe ff ff 	mov    r8,QWORD PTR [rbp-0x178]
ffff800000808d23:	4c 8b 8d 80 fe ff ff 	mov    r9,QWORD PTR [rbp-0x180]
ffff800000808d2a:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff800000808d2d:	48 c7 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],0x0
ffff800000808d34:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff800000808d38:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:402 (discriminator 1)
    //
    //不应该执行到这
    while(1);
ffff800000808d3f:	eb fe                	jmp    ffff800000808d3f <load_pe+0x8f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:404 (discriminator 2)
    return task[cur_proc].exit_code;
}
ffff800000808d41:	48 81 c4 10 03 00 00 	add    rsp,0x310
ffff800000808d48:	5b                   	pop    rbx
ffff800000808d49:	41 5f                	pop    r15
ffff800000808d4b:	5d                   	pop    rbp
ffff800000808d4c:	c3                   	ret    

ffff800000808d4d <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:407

int get_module_addr(int mi)
{
ffff800000808d4d:	f3 0f 1e fa          	endbr64 
ffff800000808d51:	55                   	push   rbp
ffff800000808d52:	48 89 e5             	mov    rbp,rsp
ffff800000808d55:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808d55 <get_module_addr+0x8>
ffff800000808d5c:	49 bb db 4c 11 00 00 	movabs r11,0x114cdb
ffff800000808d63:	00 00 00 
ffff800000808d66:	4c 01 d8             	add    rax,r11
ffff800000808d69:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:408
    return modules[mi].base;
ffff800000808d6c:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000808d73:	ff ff ff 
ffff800000808d76:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000808d7a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000808d7d:	48 63 d0             	movsxd rdx,eax
ffff800000808d80:	48 89 d0             	mov    rax,rdx
ffff800000808d83:	48 c1 e0 02          	shl    rax,0x2
ffff800000808d87:	48 01 d0             	add    rax,rdx
ffff800000808d8a:	48 c1 e0 03          	shl    rax,0x3
ffff800000808d8e:	48 01 c8             	add    rax,rcx
ffff800000808d91:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:409
}
ffff800000808d93:	5d                   	pop    rbp
ffff800000808d94:	c3                   	ret    

ffff800000808d95 <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:411
int dispose_library(int dlln)
{
ffff800000808d95:	f3 0f 1e fa          	endbr64 
ffff800000808d99:	55                   	push   rbp
ffff800000808d9a:	48 89 e5             	mov    rbp,rsp
ffff800000808d9d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808d9d <dispose_library+0x8>
ffff800000808da4:	49 bb 93 4c 11 00 00 	movabs r11,0x114c93
ffff800000808dab:	00 00 00 
ffff800000808dae:	4c 01 d8             	add    rax,r11
ffff800000808db1:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412
    if(dlln<0||dlln>=MAX_DLLS)return -1;
ffff800000808db4:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000808db8:	78 09                	js     ffff800000808dc3 <dispose_library+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412 (discriminator 2)
ffff800000808dba:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffff800000808dc1:	7e 07                	jle    ffff800000808dca <dispose_library+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412 (discriminator 3)
ffff800000808dc3:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808dc8:	eb 2c                	jmp    ffff800000808df6 <dispose_library+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:417
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
ffff800000808dca:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff800000808dd1:	ff ff ff 
ffff800000808dd4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808dd8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000808ddb:	48 98                	cdqe   
ffff800000808ddd:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
ffff800000808de4:	48 01 d0             	add    rax,rdx
ffff800000808de7:	48 83 c0 08          	add    rax,0x8
ffff800000808deb:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:418
    return 0;
ffff800000808df1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:419
}
ffff800000808df6:	5d                   	pop    rbp
ffff800000808df7:	c3                   	ret    

ffff800000808df8 <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:467

    return 0;
} */

int sys_insmod(char *path)
{
ffff800000808df8:	f3 0f 1e fa          	endbr64 
ffff800000808dfc:	55                   	push   rbp
ffff800000808dfd:	48 89 e5             	mov    rbp,rsp
ffff800000808e00:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808e00 <sys_insmod+0x8>
ffff800000808e07:	49 bb 30 4c 11 00 00 	movabs r11,0x114c30
ffff800000808e0e:	00 00 00 
ffff800000808e11:	4c 01 d8             	add    rax,r11
ffff800000808e14:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:469

}
ffff800000808e18:	90                   	nop
ffff800000808e19:	5d                   	pop    rbp
ffff800000808e1a:	c3                   	ret    

ffff800000808e1b <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:471
int sys_rmmod(char *name)
{
ffff800000808e1b:	f3 0f 1e fa          	endbr64 
ffff800000808e1f:	55                   	push   rbp
ffff800000808e20:	48 89 e5             	mov    rbp,rsp
ffff800000808e23:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808e23 <sys_rmmod+0x8>
ffff800000808e2a:	49 bb 0d 4c 11 00 00 	movabs r11,0x114c0d
ffff800000808e31:	00 00 00 
ffff800000808e34:	4c 01 d8             	add    rax,r11
ffff800000808e37:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:473

}
ffff800000808e3b:	90                   	nop
ffff800000808e3c:	5d                   	pop    rbp
ffff800000808e3d:	c3                   	ret    

ffff800000808e3e <new_load_elf>:
new_load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:474
off_t new_load_elf(struct file* elf){
ffff800000808e3e:	f3 0f 1e fa          	endbr64 
ffff800000808e42:	55                   	push   rbp
ffff800000808e43:	48 89 e5             	mov    rbp,rsp
ffff800000808e46:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808e46 <new_load_elf+0x8>
ffff800000808e4d:	49 bb ea 4b 11 00 00 	movabs r11,0x114bea
ffff800000808e54:	00 00 00 
ffff800000808e57:	4c 01 d8             	add    rax,r11
ffff800000808e5a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:480
    //读取文件头
    //if ET_DYN
    //load dl
    //else
    // load elf
}
ffff800000808e5e:	90                   	nop
ffff800000808e5f:	5d                   	pop    rbp
ffff800000808e60:	c3                   	ret    

ffff800000808e61 <load_elf>:
load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:482
//切换进程前,在execve系统调用中
off_t load_elf(struct file *elf) {
ffff800000808e61:	f3 0f 1e fa          	endbr64 
ffff800000808e65:	55                   	push   rbp
ffff800000808e66:	48 89 e5             	mov    rbp,rsp
ffff800000808e69:	41 57                	push   r15
ffff800000808e6b:	53                   	push   rbx
ffff800000808e6c:	48 81 ec 30 01 00 00 	sub    rsp,0x130
ffff800000808e73:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808e73 <load_elf+0x12>
ffff800000808e7a:	49 bb bd 4b 11 00 00 	movabs r11,0x114bbd
ffff800000808e81:	00 00 00 
ffff800000808e84:	4c 01 db             	add    rbx,r11
ffff800000808e87:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:484
    // 读取文件头
    struct file* elf_storage=elf;
ffff800000808e8e:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808e95:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485
    off_t tmpla=kmalloc();
ffff800000808e99:	49 89 df             	mov    r15,rbx
ffff800000808e9c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808ea1:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000808ea8:	ff ff ff 
ffff800000808eab:	48 01 da             	add    rdx,rbx
ffff800000808eae:	ff d2                	call   rdx
ffff800000808eb0:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:486
    off_t shla=kmalloc();
ffff800000808eb6:	49 89 df             	mov    r15,rbx
ffff800000808eb9:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808ebe:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000808ec5:	ff ff ff 
ffff800000808ec8:	48 01 da             	add    rdx,rbx
ffff800000808ecb:	ff d2                	call   rdx
ffff800000808ecd:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:487
    if(tmpla==-1)
ffff800000808ed3:	83 bd 7c ff ff ff ff 	cmp    DWORD PTR [rbp-0x84],0xffffffff
ffff800000808eda:	75 26                	jne    ffff800000808f02 <load_elf+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:489
    {
        current->regs.errcode=-ENOMEM;
ffff800000808edc:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808ee3:	ff ff ff 
ffff800000808ee6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808eea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808eed:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000808ef4:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:490
        return -1;
ffff800000808ef8:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808efd:	e9 be 0a 00 00       	jmp    ffff8000008099c0 <load_elf+0xb5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:492
    }
ready:
ffff800000808f02:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:493
    elf->position=0;
ffff800000808f03:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808f0a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:495
    //读取文件头
    elf->f_ops->read(elf, (char *) tmpla, PAGE_4K_SIZE, &elf->position);
ffff800000808f11:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808f18:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000808f1c:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff800000808f20:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
ffff800000808f27:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff800000808f2d:	48 98                	cdqe   
ffff800000808f2f:	48 89 c6             	mov    rsi,rax
ffff800000808f32:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808f39:	48 89 d1             	mov    rcx,rdx
ffff800000808f3c:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808f41:	48 89 c7             	mov    rdi,rax
ffff800000808f44:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:497

    Elf64_Ehdr *ehdr=(Elf64_Phdr*)tmpla;
ffff800000808f47:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff800000808f4d:	48 98                	cdqe   
ffff800000808f4f:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:498
    u16 entn=ehdr->e_phnum;
ffff800000808f56:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808f5d:	0f b7 40 38          	movzx  eax,WORD PTR [rax+0x38]
ffff800000808f61:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:499
    u16 ents=ehdr->e_phentsize;
ffff800000808f68:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808f6f:	0f b7 40 36          	movzx  eax,WORD PTR [rax+0x36]
ffff800000808f73:	66 89 85 6c ff ff ff 	mov    WORD PTR [rbp-0x94],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:500
    elf->position=ehdr->e_shoff;
ffff800000808f7a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808f81:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000808f85:	48 89 c2             	mov    rdx,rax
ffff800000808f88:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808f8f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:501
    elf->f_ops->read(elf,(char*)shla,ehdr->e_shnum*ehdr->e_shentsize,&elf->position);
ffff800000808f92:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808f99:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000808f9d:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff800000808fa1:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffff800000808fa8:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808faf:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff800000808fb3:	0f b7 d0             	movzx  edx,ax
ffff800000808fb6:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808fbd:	0f b7 40 3a          	movzx  eax,WORD PTR [rax+0x3a]
ffff800000808fc1:	0f b7 c0             	movzx  eax,ax
ffff800000808fc4:	0f af c2             	imul   eax,edx
ffff800000808fc7:	48 63 d0             	movsxd rdx,eax
ffff800000808fca:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff800000808fd0:	48 98                	cdqe   
ffff800000808fd2:	48 89 c6             	mov    rsi,rax
ffff800000808fd5:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808fdc:	48 89 c7             	mov    rdi,rax
ffff800000808fdf:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:502
    struct Elf64_Shdr* sh= (struct Elf64_Shdr *) (shla);
ffff800000808fe2:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff800000808fe8:	48 98                	cdqe   
ffff800000808fea:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:503
    Elf64_Phdr *ph= (Elf64_Phdr *) (tmpla + ehdr->e_phoff);
ffff800000808ff1:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff800000808ff7:	48 63 d0             	movsxd rdx,eax
ffff800000808ffa:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809001:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000809005:	48 01 d0             	add    rax,rdx
ffff800000809008:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:504
    size_t tot_sz=0;
ffff80000080900c:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
ffff800000809013:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:505
    off_t base=ph->p_vaddr,offset=0;
ffff800000809017:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080901b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080901f:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
ffff800000809025:	c7 85 50 ff ff ff 00 	mov    DWORD PTR [rbp-0xb0],0x0
ffff80000080902c:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:506
    int reloc_flag=0;
ffff80000080902f:	c7 85 4c ff ff ff 00 	mov    DWORD PTR [rbp-0xb4],0x0
ffff800000809036:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:530
            offset=new_base-base;
        }
    } */
    

    module* mod=0;
ffff800000809039:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000809040:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:532
    //module项设置
    for(int i=0;i<MAX_MODULES;i++){
ffff800000809041:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000809048:	e9 00 01 00 00       	jmp    ffff80000080914d <load_elf+0x2ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533
        if(modules[i].type==ET_NONE){
ffff80000080904d:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000809054:	ff ff ff 
ffff800000809057:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080905b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080905e:	48 63 d0             	movsxd rdx,eax
ffff800000809061:	48 89 d0             	mov    rax,rdx
ffff800000809064:	48 c1 e0 02          	shl    rax,0x2
ffff800000809068:	48 01 d0             	add    rax,rdx
ffff80000080906b:	48 c1 e0 03          	shl    rax,0x3
ffff80000080906f:	48 01 c8             	add    rax,rcx
ffff800000809072:	48 83 c0 10          	add    rax,0x10
ffff800000809076:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809079:	48 85 c0             	test   rax,rax
ffff80000080907c:	0f 85 c7 00 00 00    	jne    ffff800000809149 <load_elf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:534
            modules[i].type=ehdr->e_type;
ffff800000809082:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809089:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080908d:	0f b7 d0             	movzx  edx,ax
ffff800000809090:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000809097:	ff ff ff 
ffff80000080909a:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff80000080909e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008090a1:	48 63 c8             	movsxd rcx,eax
ffff8000008090a4:	48 89 c8             	mov    rax,rcx
ffff8000008090a7:	48 c1 e0 02          	shl    rax,0x2
ffff8000008090ab:	48 01 c8             	add    rax,rcx
ffff8000008090ae:	48 c1 e0 03          	shl    rax,0x3
ffff8000008090b2:	48 01 f0             	add    rax,rsi
ffff8000008090b5:	48 83 c0 10          	add    rax,0x10
ffff8000008090b9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:535
            modules[i].load_offset=offset;
ffff8000008090bc:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008090c3:	ff ff ff 
ffff8000008090c6:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008090ca:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008090cd:	48 63 d0             	movsxd rdx,eax
ffff8000008090d0:	48 89 d0             	mov    rax,rdx
ffff8000008090d3:	48 c1 e0 02          	shl    rax,0x2
ffff8000008090d7:	48 01 d0             	add    rax,rdx
ffff8000008090da:	48 c1 e0 03          	shl    rax,0x3
ffff8000008090de:	48 01 c8             	add    rax,rcx
ffff8000008090e1:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffff8000008090e5:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008090eb:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:536
            modules[i].base=base;
ffff8000008090ed:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008090f4:	ff ff ff 
ffff8000008090f7:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008090fb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008090fe:	48 63 d0             	movsxd rdx,eax
ffff800000809101:	48 89 d0             	mov    rax,rdx
ffff800000809104:	48 c1 e0 02          	shl    rax,0x2
ffff800000809108:	48 01 d0             	add    rax,rdx
ffff80000080910b:	48 c1 e0 03          	shl    rax,0x3
ffff80000080910f:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000809113:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff800000809119:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:537
            mod=modules+i;
ffff80000080911b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080911e:	48 63 d0             	movsxd rdx,eax
ffff800000809121:	48 89 d0             	mov    rax,rdx
ffff800000809124:	48 c1 e0 02          	shl    rax,0x2
ffff800000809128:	48 01 d0             	add    rax,rdx
ffff80000080912b:	48 c1 e0 03          	shl    rax,0x3
ffff80000080912f:	48 89 c2             	mov    rdx,rax
ffff800000809132:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000809139:	ff ff ff 
ffff80000080913c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809140:	48 01 d0             	add    rax,rdx
ffff800000809143:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:538
            break;
ffff800000809147:	eb 0e                	jmp    ffff800000809157 <load_elf+0x2f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:532 (discriminator 2)
    for(int i=0;i<MAX_MODULES;i++){
ffff800000809149:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:532 (discriminator 1)
ffff80000080914d:	83 7d dc 7f          	cmp    DWORD PTR [rbp-0x24],0x7f
ffff800000809151:	0f 8e f6 fe ff ff    	jle    ffff80000080904d <load_elf+0x1ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:541
        }
    }
    for(int i=0;i<entn;i++){
ffff800000809157:	c7 85 48 ff ff ff 00 	mov    DWORD PTR [rbp-0xb8],0x0
ffff80000080915e:	00 00 00 
ffff800000809161:	90                   	nop
ffff800000809162:	0f b7 85 6e ff ff ff 	movzx  eax,WORD PTR [rbp-0x92]
ffff800000809169:	39 85 48 ff ff ff    	cmp    DWORD PTR [rbp-0xb8],eax
ffff80000080916f:	0f 8d d4 00 00 00    	jge    ffff800000809249 <load_elf+0x3e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:546
        
        if((ph[i].p_type|PT_INTERP)!=0){
            //load dl
            //
            if(current->dl)break;
ffff800000809175:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080917c:	ff ff ff 
ffff80000080917f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809183:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809186:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff80000080918c:	85 c0                	test   eax,eax
ffff80000080918e:	0f 85 b4 00 00 00    	jne    ffff800000809248 <load_elf+0x3e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:547
            int fd=sys_open("/mnt/dl.so",O_EXEC);
ffff800000809194:	be 00 10 00 00       	mov    esi,0x1000
ffff800000809199:	48 b8 b3 d6 ff ff ff 	movabs rax,0xffffffffffffd6b3
ffff8000008091a0:	ff ff ff 
ffff8000008091a3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008091a7:	48 89 c7             	mov    rdi,rax
ffff8000008091aa:	49 89 df             	mov    r15,rbx
ffff8000008091ad:	48 b8 20 dd ee ff ff 	movabs rax,0xffffffffffeedd20
ffff8000008091b4:	ff ff ff 
ffff8000008091b7:	48 01 d8             	add    rax,rbx
ffff8000008091ba:	ff d0                	call   rax
ffff8000008091bc:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:548
            kmfree(tmpla);
ffff8000008091c2:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff8000008091c8:	48 98                	cdqe   
ffff8000008091ca:	48 89 c7             	mov    rdi,rax
ffff8000008091cd:	49 89 df             	mov    r15,rbx
ffff8000008091d0:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff8000008091d7:	ff ff ff 
ffff8000008091da:	48 01 d8             	add    rax,rbx
ffff8000008091dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:549
            kmfree(shla);
ffff8000008091df:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff8000008091e5:	48 98                	cdqe   
ffff8000008091e7:	48 89 c7             	mov    rdi,rax
ffff8000008091ea:	49 89 df             	mov    r15,rbx
ffff8000008091ed:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff8000008091f4:	ff ff ff 
ffff8000008091f7:	48 01 d8             	add    rax,rbx
ffff8000008091fa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:550
            current->dl=fd;
ffff8000008091fc:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809203:	ff ff ff 
ffff800000809206:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080920a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080920d:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
ffff800000809213:	89 90 54 03 00 00    	mov    DWORD PTR [rax+0x354],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:551
            elf=current->openf[fd];
ffff800000809219:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809220:	ff ff ff 
ffff800000809223:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809227:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080922a:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
ffff800000809230:	48 63 d2             	movsxd rdx,edx
ffff800000809233:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809237:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080923c:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:552
            goto ready;
ffff800000809243:	e9 bb fc ff ff       	jmp    ffff800000808f03 <load_elf+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:546
            if(current->dl)break;
ffff800000809248:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:555
        }
    }
    for(int i=0;i<entn;i++){
ffff800000809249:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000809250:	e9 9d 01 00 00       	jmp    ffff8000008093f2 <load_elf+0x591>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:558
        //加载段
        if((ph->p_type|PT_LOAD)!=0){
            unsigned long off=ph->p_offset;
ffff800000809255:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809259:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080925d:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:559
            unsigned long fs=ph->p_filesz;
ffff800000809264:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809268:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080926c:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:560
            size_t ms=ph->p_memsz;
ffff800000809273:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809277:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080927b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:561
            char* vptr= (char *) ph->p_vaddr+offset;
ffff800000809282:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff800000809288:	48 63 d0             	movsxd rdx,eax
ffff80000080928b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080928f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000809293:	48 01 d0             	add    rax,rdx
ffff800000809296:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:562
            elf->position=off;
ffff80000080929d:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff8000008092a4:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008092ab:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:563
            if(off==0){
ffff8000008092ae:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
ffff8000008092b5:	00 
ffff8000008092b6:	75 10                	jne    ffff8000008092c8 <load_elf+0x467>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:564
                mod->header=vptr;
ffff8000008092b8:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008092bf:	89 c2                	mov    edx,eax
ffff8000008092c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008092c5:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:567
            }
            //先映射好内存
            int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff8000008092c8:	c7 85 f4 fe ff ff 05 	mov    DWORD PTR [rbp-0x10c],0x5
ffff8000008092cf:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:569
            if((ph->p_flags|PF_X)!=0||(ph->p_flags|PF_W)!=0)
                attr|=PAGE_RWX;
ffff8000008092d2:	83 8d f4 fe ff ff 02 	or     DWORD PTR [rbp-0x10c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:570
            int pgc=(ms-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff8000008092d9:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008092e0:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008092e6:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008092ea:	89 85 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:571
            for(int j=0;j<pgc;j++){
ffff8000008092f0:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008092f7:	e9 ad 00 00 00       	jmp    ffff8000008093a9 <load_elf+0x548>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572
                off_t dest=(off_t) (vptr + j * PAGE_4K_SIZE);
ffff8000008092fc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008092ff:	c1 e0 0c             	shl    eax,0xc
ffff800000809302:	48 63 d0             	movsxd rdx,eax
ffff800000809305:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000080930c:	48 01 d0             	add    rax,rdx
ffff80000080930f:	89 85 ec fe ff ff    	mov    DWORD PTR [rbp-0x114],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:573
                off_t lma=pmalloc();
ffff800000809315:	49 89 df             	mov    r15,rbx
ffff800000809318:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080931d:	48 ba 0e 51 ee ff ff 	movabs rdx,0xffffffffffee510e
ffff800000809324:	ff ff ff 
ffff800000809327:	48 01 da             	add    rdx,rbx
ffff80000080932a:	ff d2                	call   rdx
ffff80000080932c:	89 85 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:574
                if(lma==-1)
ffff800000809332:	83 bd e8 fe ff ff ff 	cmp    DWORD PTR [rbp-0x118],0xffffffff
ffff800000809339:	75 26                	jne    ffff800000809361 <load_elf+0x500>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:576
                {
                    current->regs.errcode=-ENOMEM;
ffff80000080933b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809342:	ff ff ff 
ffff800000809345:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809349:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080934c:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000809353:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:577
                    return -1;
ffff800000809357:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080935c:	e9 5f 06 00 00       	jmp    ffff8000008099c0 <load_elf+0xb5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:579 (discriminator 2)
                }
                smmap(lma , dest, attr, current->pml4);
ffff800000809361:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809368:	ff ff ff 
ffff80000080936b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080936f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809372:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff800000809379:	8b 95 f4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x10c]
ffff80000080937f:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
ffff800000809385:	48 63 f0             	movsxd rsi,eax
ffff800000809388:	8b 85 e8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x118]
ffff80000080938e:	48 98                	cdqe   
ffff800000809390:	48 89 c7             	mov    rdi,rax
ffff800000809393:	49 89 df             	mov    r15,rbx
ffff800000809396:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff80000080939d:	ff ff ff 
ffff8000008093a0:	48 01 d8             	add    rax,rbx
ffff8000008093a3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:571 (discriminator 2)
            for(int j=0;j<pgc;j++){
ffff8000008093a5:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:571 (discriminator 1)
ffff8000008093a9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008093ac:	3b 85 f0 fe ff ff    	cmp    eax,DWORD PTR [rbp-0x110]
ffff8000008093b2:	0f 8c 44 ff ff ff    	jl     ffff8000008092fc <load_elf+0x49b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:582
            }
            //读取
            elf->f_ops->read(elf,vptr,fs,&elf->position);
ffff8000008093b8:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008093bf:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008093c3:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff8000008093c7:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffff8000008093ce:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
ffff8000008093d5:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
ffff8000008093dc:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008093e3:	48 89 c7             	mov    rdi,rax
ffff8000008093e6:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:585

        }
        ph++;
ffff8000008093e9:	48 83 45 e8 38       	add    QWORD PTR [rbp-0x18],0x38
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:555
    for(int i=0;i<entn;i++){
ffff8000008093ee:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:555 (discriminator 1)
ffff8000008093f2:	0f b7 85 6e ff ff ff 	movzx  eax,WORD PTR [rbp-0x92]
ffff8000008093f9:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff8000008093fc:	0f 8c 53 fe ff ff    	jl     ffff800000809255 <load_elf+0x3f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:588
    }
    //找dynamic段
    struct Elf64_Shdr *dynamic=NULL;
ffff800000809402:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000809409:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:589
    off_t* got=NULL;
ffff80000080940a:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff800000809411:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:590
    for(int i=0;i<ehdr->e_shnum;i++){
ffff800000809415:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff80000080941c:	eb 50                	jmp    ffff80000080946e <load_elf+0x60d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591
        if(sh[i].sh_type==SHT_DYNAMIC)
ffff80000080941e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809421:	48 63 d0             	movsxd rdx,eax
ffff800000809424:	48 89 d0             	mov    rax,rdx
ffff800000809427:	48 01 c0             	add    rax,rax
ffff80000080942a:	48 01 d0             	add    rax,rdx
ffff80000080942d:	48 c1 e0 04          	shl    rax,0x4
ffff800000809431:	48 89 c2             	mov    rdx,rax
ffff800000809434:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080943b:	48 01 d0             	add    rax,rdx
ffff80000080943e:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809441:	83 f8 06             	cmp    eax,0x6
ffff800000809444:	75 24                	jne    ffff80000080946a <load_elf+0x609>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:592
            dynamic=sh+i;
ffff800000809446:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809449:	48 63 d0             	movsxd rdx,eax
ffff80000080944c:	48 89 d0             	mov    rax,rdx
ffff80000080944f:	48 01 c0             	add    rax,rax
ffff800000809452:	48 01 d0             	add    rax,rdx
ffff800000809455:	48 c1 e0 04          	shl    rax,0x4
ffff800000809459:	48 89 c2             	mov    rdx,rax
ffff80000080945c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000809463:	48 01 d0             	add    rax,rdx
ffff800000809466:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:590 (discriminator 2)
    for(int i=0;i<ehdr->e_shnum;i++){
ffff80000080946a:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:590 (discriminator 1)
ffff80000080946e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809475:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff800000809479:	0f b7 c0             	movzx  eax,ax
ffff80000080947c:	39 45 c4             	cmp    DWORD PTR [rbp-0x3c],eax
ffff80000080947f:	7c 9d                	jl     ffff80000080941e <load_elf+0x5bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:594
    }
    if(dynamic){
ffff800000809481:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000809486:	0f 84 89 03 00 00    	je     ffff800000809815 <load_elf+0x9b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:595
        char* dynstr=0;
ffff80000080948c:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000809493:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:596
        Elf64_Dyn *dyn=dynamic->sh_addr+offset;
ffff800000809494:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809498:	48 8b 50 0c          	mov    rdx,QWORD PTR [rax+0xc]
ffff80000080949c:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008094a2:	48 98                	cdqe   
ffff8000008094a4:	48 01 d0             	add    rax,rdx
ffff8000008094a7:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:598

        mod->p_dynamic=dynamic;
ffff8000008094ae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008094b2:	89 c2                	mov    edx,eax
ffff8000008094b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008094b8:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:602
        //这里一堆获取函数之后实现细节
        // dynstr=so_get_dynstr(dyn);
        //so_get_dynstr从so中获取.dynstr节
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff8000008094bb:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008094c2:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff8000008094c6:	eb 2b                	jmp    ffff8000008094f3 <load_elf+0x692>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603
            if(p->d_tag==DT_STRTAB){
ffff8000008094c8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008094cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008094cf:	48 83 f8 05          	cmp    rax,0x5
ffff8000008094d3:	75 19                	jne    ffff8000008094ee <load_elf+0x68d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:604
                dynstr=p->d_un.d_ptr+offset;
ffff8000008094d5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008094d9:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008094dd:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008094e3:	48 98                	cdqe   
ffff8000008094e5:	48 01 d0             	add    rax,rdx
ffff8000008094e8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:605
                break;
ffff8000008094ec:	eb 11                	jmp    ffff8000008094ff <load_elf+0x69e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:602 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff8000008094ee:	48 83 45 b0 10       	add    QWORD PTR [rbp-0x50],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:602 (discriminator 1)
ffff8000008094f3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008094f7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008094fa:	48 85 c0             	test   rax,rax
ffff8000008094fd:	75 c9                	jne    ffff8000008094c8 <load_elf+0x667>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:608
            }
        }
        if(!dynstr){
ffff8000008094ff:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff800000809504:	75 28                	jne    ffff80000080952e <load_elf+0x6cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:609
            comprintf("cannot find dynstr in .dynamic!\n");
ffff800000809506:	48 b8 c0 d6 ff ff ff 	movabs rax,0xffffffffffffd6c0
ffff80000080950d:	ff ff ff 
ffff800000809510:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000809514:	48 89 c7             	mov    rdi,rax
ffff800000809517:	49 89 df             	mov    r15,rbx
ffff80000080951a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080951f:	48 ba dc 4b ef ff ff 	movabs rdx,0xffffffffffef4bdc
ffff800000809526:	ff ff ff 
ffff800000809529:	48 01 da             	add    rdx,rbx
ffff80000080952c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:618
        // so_load_sos(so_paths);
        //so_get_needed&so_load_sos
        //so_get_got
        // got=so_get_got(dyn);
        //intel架构上DT_PLTGOT存放的是got地址
        size_t relsz=0,relentsz=0;
ffff80000080952e:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000809535:	00 
ffff800000809536:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080953d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:619
        off_t relptr=0;
ffff80000080953e:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809545:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080954c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff800000809550:	e9 b0 02 00 00       	jmp    ffff800000809805 <load_elf+0x9a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621
            switch (p->d_tag)
ffff800000809555:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809559:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080955c:	48 83 f8 13          	cmp    rax,0x13
ffff800000809560:	0f 87 d5 01 00 00    	ja     ffff80000080973b <load_elf+0x8da>
ffff800000809566:	48 83 f8 07          	cmp    rax,0x7
ffff80000080956a:	73 29                	jae    ffff800000809595 <load_elf+0x734>
ffff80000080956c:	48 83 f8 06          	cmp    rax,0x6
ffff800000809570:	0f 84 89 01 00 00    	je     ffff8000008096ff <load_elf+0x89e>
ffff800000809576:	48 83 f8 06          	cmp    rax,0x6
ffff80000080957a:	0f 87 bb 01 00 00    	ja     ffff80000080973b <load_elf+0x8da>
ffff800000809580:	48 83 f8 01          	cmp    rax,0x1
ffff800000809584:	74 62                	je     ffff8000008095e8 <load_elf+0x787>
ffff800000809586:	48 83 f8 03          	cmp    rax,0x3
ffff80000080958a:	0f 84 ea 00 00 00    	je     ffff80000080967a <load_elf+0x819>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:656
                relentsz=p->d_un.d_val;
                goto is_rel_prepared;

            
            default:
                break;
ffff800000809590:	e9 a6 01 00 00       	jmp    ffff80000080973b <load_elf+0x8da>
ffff800000809595:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080959a:	89 c1                	mov    ecx,eax
ffff80000080959c:	48 d3 e2             	shl    rdx,cl
ffff80000080959f:	48 89 d0             	mov    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621
            switch (p->d_tag)
ffff8000008095a2:	48 89 c2             	mov    rdx,rax
ffff8000008095a5:	81 e2 00 02 08 00    	and    edx,0x80200
ffff8000008095ab:	48 85 d2             	test   rdx,rdx
ffff8000008095ae:	0f 95 c2             	setne  dl
ffff8000008095b1:	84 d2                	test   dl,dl
ffff8000008095b3:	0f 85 74 01 00 00    	jne    ffff80000080972d <load_elf+0x8cc>
ffff8000008095b9:	48 89 c2             	mov    rdx,rax
ffff8000008095bc:	81 e2 80 00 02 00    	and    edx,0x20080
ffff8000008095c2:	48 85 d2             	test   rdx,rdx
ffff8000008095c5:	0f 95 c2             	setne  dl
ffff8000008095c8:	84 d2                	test   dl,dl
ffff8000008095ca:	0f 85 50 01 00 00    	jne    ffff800000809720 <load_elf+0x8bf>
ffff8000008095d0:	25 00 01 04 00       	and    eax,0x40100
ffff8000008095d5:	48 85 c0             	test   rax,rax
ffff8000008095d8:	0f 95 c0             	setne  al
ffff8000008095db:	84 c0                	test   al,al
ffff8000008095dd:	0f 85 2f 01 00 00    	jne    ffff800000809712 <load_elf+0x8b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:656
                break;
ffff8000008095e3:	e9 53 01 00 00       	jmp    ffff80000080973b <load_elf+0x8da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:624
                char* pathname=p->d_un.d_val+dynstr;
ffff8000008095e8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008095ec:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008095f0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008095f4:	48 01 d0             	add    rax,rdx
ffff8000008095f7:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:625
                int so_fno=sys_open(pathname,O_EXEC);
ffff8000008095fe:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000809605:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080960a:	48 89 c7             	mov    rdi,rax
ffff80000080960d:	49 89 df             	mov    r15,rbx
ffff800000809610:	48 b8 20 dd ee ff ff 	movabs rax,0xffffffffffeedd20
ffff800000809617:	ff ff ff 
ffff80000080961a:	48 01 d8             	add    rax,rbx
ffff80000080961d:	ff d0                	call   rax
ffff80000080961f:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:627
                load_elf(current->openf[so_fno]);
ffff800000809625:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080962c:	ff ff ff 
ffff80000080962f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809633:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809636:	8b 95 24 ff ff ff    	mov    edx,DWORD PTR [rbp-0xdc]
ffff80000080963c:	48 63 d2             	movsxd rdx,edx
ffff80000080963f:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809643:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809648:	48 89 c7             	mov    rdi,rax
ffff80000080964b:	48 b8 31 b4 ee ff ff 	movabs rax,0xffffffffffeeb431
ffff800000809652:	ff ff ff 
ffff800000809655:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000809659:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:628
                sys_close(so_fno);
ffff80000080965b:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000809661:	89 c7                	mov    edi,eax
ffff800000809663:	49 89 df             	mov    r15,rbx
ffff800000809666:	48 b8 4a e3 ee ff ff 	movabs rax,0xffffffffffeee34a
ffff80000080966d:	ff ff ff 
ffff800000809670:	48 01 d8             	add    rax,rbx
ffff800000809673:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:629
                break;
ffff800000809675:	e9 c2 00 00 00       	jmp    ffff80000080973c <load_elf+0x8db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:631
                got=p->d_un.d_ptr+offset;
ffff80000080967a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080967e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000809682:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff800000809688:	48 98                	cdqe   
ffff80000080968a:	48 01 d0             	add    rax,rdx
ffff80000080968d:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:634
                got[2]=dl_runtime_resolve;
ffff800000809694:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff80000080969b:	ff ff ff 
ffff80000080969e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008096a2:	48 89 c2             	mov    rdx,rax
ffff8000008096a5:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008096ac:	48 83 c0 08          	add    rax,0x8
ffff8000008096b0:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:636
                got[1]=mod-modules;
ffff8000008096b2:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008096b9:	ff ff ff 
ffff8000008096bc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008096c0:	48 89 c2             	mov    rdx,rax
ffff8000008096c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008096c7:	48 29 d0             	sub    rax,rdx
ffff8000008096ca:	48 c1 f8 03          	sar    rax,0x3
ffff8000008096ce:	48 89 c2             	mov    rdx,rax
ffff8000008096d1:	48 b8 cd cc cc cc cc 	movabs rax,0xcccccccccccccccd
ffff8000008096d8:	cc cc cc 
ffff8000008096db:	48 0f af c2          	imul   rax,rdx
ffff8000008096df:	48 89 c2             	mov    rdx,rax
ffff8000008096e2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008096e9:	48 83 c0 04          	add    rax,0x4
ffff8000008096ed:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:637
                mod->p_got=got;
ffff8000008096ef:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008096f6:	89 c2                	mov    edx,eax
ffff8000008096f8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008096fc:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:639
                mod->p_symbol=p->d_un.d_ptr;
ffff8000008096ff:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809703:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809707:	89 c2                	mov    edx,eax
ffff800000809709:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080970d:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:640
                break;
ffff800000809710:	eb 2a                	jmp    ffff80000080973c <load_elf+0x8db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:643
                relsz=p->d_un.d_val;
ffff800000809712:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809716:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080971a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:644
                goto is_rel_prepared;
ffff80000080971e:	eb 21                	jmp    ffff800000809741 <load_elf+0x8e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:647
                relptr=p->d_un.d_ptr;
ffff800000809720:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809724:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809728:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:648
                goto is_rel_prepared;
ffff80000080972b:	eb 14                	jmp    ffff800000809741 <load_elf+0x8e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:651
                relentsz=p->d_un.d_val;
ffff80000080972d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809731:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809735:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:652
                goto is_rel_prepared;
ffff800000809739:	eb 06                	jmp    ffff800000809741 <load_elf+0x8e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:656
                break;
ffff80000080973b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:658
            }
            continue;
ffff80000080973c:	e9 bf 00 00 00       	jmp    ffff800000809800 <load_elf+0x99f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:660
is_rel_prepared:
            if(!(relsz&&relentsz&&relptr))continue;
ffff800000809741:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff800000809746:	0f 84 b3 00 00 00    	je     ffff8000008097ff <load_elf+0x99e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:660 (discriminator 2)
ffff80000080974c:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff800000809751:	0f 84 a8 00 00 00    	je     ffff8000008097ff <load_elf+0x99e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:660 (discriminator 4)
ffff800000809757:	83 7d 9c 00          	cmp    DWORD PTR [rbp-0x64],0x0
ffff80000080975b:	0f 84 9e 00 00 00    	je     ffff8000008097ff <load_elf+0x99e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661
            for(int j=0;j<relsz/relentsz;j++){
ffff800000809761:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
ffff800000809768:	eb 64                	jmp    ffff8000008097ce <load_elf+0x96d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662 (discriminator 3)
                fill_reloc(relptr+j*relentsz,mod-modules);
ffff80000080976a:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000809771:	ff ff ff 
ffff800000809774:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809778:	48 89 c2             	mov    rdx,rax
ffff80000080977b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080977f:	48 29 d0             	sub    rax,rdx
ffff800000809782:	48 c1 f8 03          	sar    rax,0x3
ffff800000809786:	48 89 c2             	mov    rdx,rax
ffff800000809789:	48 b8 cd cc cc cc cc 	movabs rax,0xcccccccccccccccd
ffff800000809790:	cc cc cc 
ffff800000809793:	48 0f af c2          	imul   rax,rdx
ffff800000809797:	48 89 c2             	mov    rdx,rax
ffff80000080979a:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080979d:	48 63 c8             	movsxd rcx,eax
ffff8000008097a0:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff8000008097a3:	48 98                	cdqe   
ffff8000008097a5:	48 0f af 45 a0       	imul   rax,QWORD PTR [rbp-0x60]
ffff8000008097aa:	48 01 c8             	add    rax,rcx
ffff8000008097ad:	48 89 d6             	mov    rsi,rdx
ffff8000008097b0:	48 89 c7             	mov    rdi,rax
ffff8000008097b3:	49 89 df             	mov    r15,rbx
ffff8000008097b6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008097bb:	48 ba 8f c3 ee ff ff 	movabs rdx,0xffffffffffeec38f
ffff8000008097c2:	ff ff ff 
ffff8000008097c5:	48 01 da             	add    rdx,rbx
ffff8000008097c8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661 (discriminator 3)
            for(int j=0;j<relsz/relentsz;j++){
ffff8000008097ca:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661 (discriminator 1)
ffff8000008097ce:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff8000008097d1:	48 63 c8             	movsxd rcx,eax
ffff8000008097d4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008097d8:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008097dd:	48 f7 75 a0          	div    QWORD PTR [rbp-0x60]
ffff8000008097e1:	48 39 c1             	cmp    rcx,rax
ffff8000008097e4:	72 84                	jb     ffff80000080976a <load_elf+0x909>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:664
            }
            relsz=relentsz=relptr=0;
ffff8000008097e6:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
ffff8000008097ed:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff8000008097f4:	00 
ffff8000008097f5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008097f9:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff8000008097fd:	eb 01                	jmp    ffff800000809800 <load_elf+0x99f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:660
            if(!(relsz&&relentsz&&relptr))continue;
ffff8000008097ff:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809800:	48 83 45 90 10       	add    QWORD PTR [rbp-0x70],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620 (discriminator 3)
ffff800000809805:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809809:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080980c:	48 85 c0             	test   rax,rax
ffff80000080980f:	0f 85 40 fd ff ff    	jne    ffff800000809555 <load_elf+0x6f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:671
        }
        
    }
    
    //初始化堆
    chunk_header hdrtmp={
ffff800000809815:	c7 85 d0 fe ff ff 00 	mov    DWORD PTR [rbp-0x130],0x0
ffff80000080981c:	00 00 00 
ffff80000080981f:	c7 85 d4 fe ff ff 00 	mov    DWORD PTR [rbp-0x12c],0x0
ffff800000809826:	00 00 00 
ffff800000809829:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
ffff800000809830:	00 00 00 00 
ffff800000809834:	48 c7 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],0x0
ffff80000080983b:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:679
            .pgn=0,
            .prev=NULL
    };
    //空堆
    //分配堆
    off_t lma=pmalloc();
ffff80000080983f:	49 89 df             	mov    r15,rbx
ffff800000809842:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809847:	48 ba 0e 51 ee ff ff 	movabs rdx,0xffffffffffee510e
ffff80000080984e:	ff ff ff 
ffff800000809851:	48 01 da             	add    rdx,rbx
ffff800000809854:	ff d2                	call   rdx
ffff800000809856:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:680
    if(lma==-1)
ffff80000080985c:	83 bd 20 ff ff ff ff 	cmp    DWORD PTR [rbp-0xe0],0xffffffff
ffff800000809863:	75 26                	jne    ffff80000080988b <load_elf+0xa2a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:682
    {
        current->regs.errcode=-ENOMEM;
ffff800000809865:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080986c:	ff ff ff 
ffff80000080986f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809873:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809876:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff80000080987d:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:683
        return -1;
ffff800000809881:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809886:	e9 35 01 00 00       	jmp    ffff8000008099c0 <load_elf+0xb5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:685
    }
    smmap(lma, HEAP_BASE, PAGE_PRESENT | PAGE_FOR_ALL | PAGE_RWX, current->pml4);
ffff80000080988b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809892:	ff ff ff 
ffff800000809895:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809899:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080989c:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff8000008098a3:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff8000008098a9:	48 98                	cdqe   
ffff8000008098ab:	48 89 d1             	mov    rcx,rdx
ffff8000008098ae:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008098b3:	be 00 00 00 01       	mov    esi,0x1000000
ffff8000008098b8:	48 89 c7             	mov    rdi,rax
ffff8000008098bb:	49 89 df             	mov    r15,rbx
ffff8000008098be:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff8000008098c5:	ff ff ff 
ffff8000008098c8:	48 01 d8             	add    rax,rbx
ffff8000008098cb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:686
    memset((unsigned char *) HEAP_BASE, 0, CHUNK_SIZE);
ffff8000008098cd:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008098d2:	be 00 00 00 00       	mov    esi,0x0
ffff8000008098d7:	bf 00 00 00 01       	mov    edi,0x1000000
ffff8000008098dc:	49 89 df             	mov    r15,rbx
ffff8000008098df:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff8000008098e6:	ff ff ff 
ffff8000008098e9:	48 01 d8             	add    rax,rbx
ffff8000008098ec:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:687
    current->mem_struct.heap_base=HEAP_BASE;
ffff8000008098ee:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008098f5:	ff ff ff 
ffff8000008098f8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008098fc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008098ff:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000809906:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:688
    current->mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff800000809907:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080990e:	ff ff ff 
ffff800000809911:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809915:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809918:	48 c7 40 30 00 10 00 	mov    QWORD PTR [rax+0x30],0x1001000
ffff80000080991f:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:689
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff800000809920:	48 8d 85 d0 fe ff ff 	lea    rax,[rbp-0x130]
ffff800000809927:	ba 18 00 00 00       	mov    edx,0x18
ffff80000080992c:	48 89 c6             	mov    rsi,rax
ffff80000080992f:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000809934:	49 89 df             	mov    r15,rbx
ffff800000809937:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff80000080993e:	ff ff ff 
ffff800000809941:	48 01 d8             	add    rax,rbx
ffff800000809944:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:691
    //设置栈
    current->mem_struct.stack_top=STACK_TOP;
ffff800000809946:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080994d:	ff ff ff 
ffff800000809950:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809954:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809957:	48 bf 00 f0 ff ff ff 	movabs rdi,0x7ffffffff000
ffff80000080995e:	7f 00 00 
ffff800000809961:	48 89 78 40          	mov    QWORD PTR [rax+0x40],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:692
    off_t entry=0;
ffff800000809965:	c7 85 1c ff ff ff 00 	mov    DWORD PTR [rbp-0xe4],0x0
ffff80000080996c:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:693
    entry=ehdr->e_entry;
ffff80000080996f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809976:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080997a:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:694
    kmfree(tmpla);
ffff800000809980:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff800000809986:	48 98                	cdqe   
ffff800000809988:	48 89 c7             	mov    rdi,rax
ffff80000080998b:	49 89 df             	mov    r15,rbx
ffff80000080998e:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000809995:	ff ff ff 
ffff800000809998:	48 01 d8             	add    rax,rbx
ffff80000080999b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:695
    kmfree(shla);
ffff80000080999d:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff8000008099a3:	48 98                	cdqe   
ffff8000008099a5:	48 89 c7             	mov    rdi,rax
ffff8000008099a8:	49 89 df             	mov    r15,rbx
ffff8000008099ab:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff8000008099b2:	ff ff ff 
ffff8000008099b5:	48 01 d8             	add    rax,rbx
ffff8000008099b8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:697
    //从系统调用返回
    return entry;
ffff8000008099ba:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:698 (discriminator 1)
}
ffff8000008099c0:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffff8000008099c7:	5b                   	pop    rbx
ffff8000008099c8:	41 5f                	pop    r15
ffff8000008099ca:	5d                   	pop    rbp
ffff8000008099cb:	c3                   	ret    

ffff8000008099cc <get_modid>:
get_modid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:699
id_t get_modid(void){
ffff8000008099cc:	f3 0f 1e fa          	endbr64 
ffff8000008099d0:	55                   	push   rbp
ffff8000008099d1:	48 89 e5             	mov    rbp,rsp
ffff8000008099d4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008099d4 <get_modid+0x8>
ffff8000008099db:	49 bb 5c 40 11 00 00 	movabs r11,0x11405c
ffff8000008099e2:	00 00 00 
ffff8000008099e5:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:701
    static id_t modid_d=0;
    return modid_d++;
ffff8000008099e8:	48 ba 50 69 af ff ff 	movabs rdx,0xffffffffffaf6950
ffff8000008099ef:	ff ff ff 
ffff8000008099f2:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff8000008099f5:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008099f8:	48 be 50 69 af ff ff 	movabs rsi,0xffffffffffaf6950
ffff8000008099ff:	ff ff ff 
ffff800000809a02:	89 0c 30             	mov    DWORD PTR [rax+rsi*1],ecx
ffff800000809a05:	89 d0                	mov    eax,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:702
}
ffff800000809a07:	5d                   	pop    rbp
ffff800000809a08:	c3                   	ret    

ffff800000809a09 <dl_runtime_resolve>:
dl_runtime_resolve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:703
void dl_runtime_resolve(){
ffff800000809a09:	f3 0f 1e fa          	endbr64 
ffff800000809a0d:	55                   	push   rbp
ffff800000809a0e:	48 89 e5             	mov    rbp,rsp
ffff800000809a11:	41 57                	push   r15
ffff800000809a13:	53                   	push   rbx
ffff800000809a14:	48 83 ec 30          	sub    rsp,0x30
ffff800000809a18:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809a18 <dl_runtime_resolve+0xf>
ffff800000809a1f:	49 bb 18 40 11 00 00 	movabs r11,0x114018
ffff800000809a26:	00 00 00 
ffff800000809a29:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:706
    //获取modid
    unsigned long modid,rel_offset;
    asm volatile("push %%rax\n mov 8(%%rsp),%%rax\n mov %%rax,%0":"=m"(modid));
ffff800000809a2c:	50                   	push   rax
ffff800000809a2d:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
ffff800000809a32:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:707
    asm volatile("push %%rax\n mov 16(%%rsp),%%rax\n mov %%rax,%0":"=m"(rel_offset));
ffff800000809a36:	50                   	push   rax
ffff800000809a37:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
ffff800000809a3c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:708
    Elf64_Rel* rel=rel_offset;
ffff800000809a40:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809a44:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:709
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff800000809a48:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809a4c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809a4f:	ba 20 00 00 00       	mov    edx,0x20
ffff800000809a54:	89 d1                	mov    ecx,edx
ffff800000809a56:	d3 e8                	shr    eax,cl
ffff800000809a58:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff800000809a5b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809a5f:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809a62:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:710
    off_t sym_off=get_sym_addr(modid,symi);
ffff800000809a65:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809a68:	48 63 d0             	movsxd rdx,eax
ffff800000809a6b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809a6f:	48 89 d6             	mov    rsi,rdx
ffff800000809a72:	48 89 c7             	mov    rdi,rax
ffff800000809a75:	49 89 df             	mov    r15,rbx
ffff800000809a78:	48 b8 94 c1 ee ff ff 	movabs rax,0xffffffffffeec194
ffff800000809a7f:	ff ff ff 
ffff800000809a82:	48 01 d8             	add    rax,rbx
ffff800000809a85:	ff d0                	call   rax
ffff800000809a87:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:713
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff800000809a8a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809a8e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a91:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:714
    switch (type)
ffff800000809a95:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809a98:	83 e8 03             	sub    eax,0x3
ffff800000809a9b:	83 f8 07             	cmp    eax,0x7
ffff800000809a9e:	0f 87 0a 01 00 00    	ja     ffff800000809bae <dl_runtime_resolve+0x1a5>
ffff800000809aa4:	89 c0                	mov    eax,eax
ffff800000809aa6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809aad:	00 
ffff800000809aae:	48 8d 05 63 16 11 00 	lea    rax,[rip+0x111663]        # ffff80000091b118 <.LC3+0x28>
ffff800000809ab5:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000809ab9:	48 8d 15 58 16 11 00 	lea    rdx,[rip+0x111658]        # ffff80000091b118 <.LC3+0x28>
ffff800000809ac0:	48 01 d0             	add    rax,rdx
ffff800000809ac3:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:718
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff800000809ac6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809aca:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809acd:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:719
        break;
ffff800000809acf:	e9 db 00 00 00       	jmp    ffff800000809baf <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:721
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff800000809ad4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809ad7:	48 63 d0             	movsxd rdx,eax
ffff800000809ada:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809ade:	48 89 d6             	mov    rsi,rdx
ffff800000809ae1:	48 89 c7             	mov    rdi,rax
ffff800000809ae4:	49 89 df             	mov    r15,rbx
ffff800000809ae7:	48 b8 d6 c2 ee ff ff 	movabs rax,0xffffffffffeec2d6
ffff800000809aee:	ff ff ff 
ffff800000809af1:	48 01 d8             	add    rax,rbx
ffff800000809af4:	ff d0                	call   rax
ffff800000809af6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000809afa:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:722
        break;
ffff800000809afc:	e9 ae 00 00 00       	jmp    ffff800000809baf <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:724
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff800000809b01:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809b05:	48 89 c7             	mov    rdi,rax
ffff800000809b08:	49 89 df             	mov    r15,rbx
ffff800000809b0b:	48 b8 fd c2 ee ff ff 	movabs rax,0xffffffffffeec2fd
ffff800000809b12:	ff ff ff 
ffff800000809b15:	48 01 d8             	add    rax,rbx
ffff800000809b18:	ff d0                	call   rax
ffff800000809b1a:	89 c2                	mov    edx,eax
ffff800000809b1c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809b20:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809b22:	01 c2                	add    edx,eax
ffff800000809b24:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809b28:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:725
        break;
ffff800000809b2a:	e9 80 00 00 00       	jmp    ffff800000809baf <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:727
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff800000809b2f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809b33:	48 89 c7             	mov    rdi,rax
ffff800000809b36:	49 89 df             	mov    r15,rbx
ffff800000809b39:	48 b8 44 c3 ee ff ff 	movabs rax,0xffffffffffeec344
ffff800000809b40:	ff ff ff 
ffff800000809b43:	48 01 d8             	add    rax,rbx
ffff800000809b46:	ff d0                	call   rax
ffff800000809b48:	89 c2                	mov    edx,eax
ffff800000809b4a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809b4d:	29 d0                	sub    eax,edx
ffff800000809b4f:	89 c1                	mov    ecx,eax
ffff800000809b51:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809b55:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809b57:	8d 14 01             	lea    edx,[rcx+rax*1]
ffff800000809b5a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809b5e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:728
        break;
ffff800000809b60:	eb 4d                	jmp    ffff800000809baf <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:730
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-rel_offset;
ffff800000809b62:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809b66:	48 89 c7             	mov    rdi,rax
ffff800000809b69:	49 89 df             	mov    r15,rbx
ffff800000809b6c:	48 b8 44 c3 ee ff ff 	movabs rax,0xffffffffffeec344
ffff800000809b73:	ff ff ff 
ffff800000809b76:	48 01 d8             	add    rax,rbx
ffff800000809b79:	ff d0                	call   rax
ffff800000809b7b:	48 98                	cdqe   
ffff800000809b7d:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000809b81:	48 29 c8             	sub    rax,rcx
ffff800000809b84:	48 89 c2             	mov    rdx,rax
ffff800000809b87:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809b8b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809b8d:	89 c1                	mov    ecx,eax
ffff800000809b8f:	89 d0                	mov    eax,edx
ffff800000809b91:	01 c8                	add    eax,ecx
ffff800000809b93:	89 c2                	mov    edx,eax
ffff800000809b95:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809b99:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:731
        break;
ffff800000809b9b:	eb 12                	jmp    ffff800000809baf <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:734
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff800000809b9d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809ba1:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809ba3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809ba6:	01 c2                	add    edx,eax
ffff800000809ba8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809bac:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:736
    default:
        break;
ffff800000809bae:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:740
    }
    //重定位完毕，直接返回到目标地址

    asm volatile("mov %0,%%rax\n mov %%rax,0(%%rsp)"::"m"(*v_rel));
ffff800000809baf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809bb3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809bb6:	48 89 04 24          	mov    QWORD PTR [rsp],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:741
}
ffff800000809bba:	90                   	nop
ffff800000809bbb:	48 83 c4 30          	add    rsp,0x30
ffff800000809bbf:	5b                   	pop    rbx
ffff800000809bc0:	41 5f                	pop    r15
ffff800000809bc2:	5d                   	pop    rbp
ffff800000809bc3:	c3                   	ret    

ffff800000809bc4 <get_sym_addr>:
get_sym_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:742
off_t get_sym_addr(unsigned long modid,unsigned long symi){
ffff800000809bc4:	f3 0f 1e fa          	endbr64 
ffff800000809bc8:	55                   	push   rbp
ffff800000809bc9:	48 89 e5             	mov    rbp,rsp
ffff800000809bcc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809bcc <get_sym_addr+0x8>
ffff800000809bd3:	49 bb 64 3e 11 00 00 	movabs r11,0x113e64
ffff800000809bda:	00 00 00 
ffff800000809bdd:	4c 01 d8             	add    rax,r11
ffff800000809be0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000809be4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:743
    struct Elf64_Sym *sym=modules[modid].p_symbol;
ffff800000809be8:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000809bef:	ff ff ff 
ffff800000809bf2:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000809bf6:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000809bfa:	48 89 ca             	mov    rdx,rcx
ffff800000809bfd:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809c01:	48 01 ca             	add    rdx,rcx
ffff800000809c04:	48 c1 e2 03          	shl    rdx,0x3
ffff800000809c08:	48 01 f2             	add    rdx,rsi
ffff800000809c0b:	48 83 c2 1c          	add    rdx,0x1c
ffff800000809c0f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809c11:	48 63 d2             	movsxd rdx,edx
ffff800000809c14:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:744
    sym+=symi;
ffff800000809c18:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000809c1c:	48 89 ca             	mov    rdx,rcx
ffff800000809c1f:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809c23:	48 01 ca             	add    rdx,rcx
ffff800000809c26:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809c2a:	48 01 55 f0          	add    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:750
    if(sym->st_shndx==SHN_COMMON){
        //还没分配空间的符号，需要分配空间，st_value表示地址对齐约束

    }

    off_t symaddr=sym->st_value+modules[modid].load_offset;
ffff800000809c2e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000809c32:	48 8b 52 04          	mov    rdx,QWORD PTR [rdx+0x4]
ffff800000809c36:	89 d7                	mov    edi,edx
ffff800000809c38:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000809c3f:	ff ff ff 
ffff800000809c42:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000809c46:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000809c4a:	48 89 ca             	mov    rdx,rcx
ffff800000809c4d:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809c51:	48 01 ca             	add    rdx,rcx
ffff800000809c54:	48 c1 e2 03          	shl    rdx,0x3
ffff800000809c58:	48 01 f2             	add    rdx,rsi
ffff800000809c5b:	48 83 c2 04          	add    rdx,0x4
ffff800000809c5f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809c61:	01 fa                	add    edx,edi
ffff800000809c63:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:751
    if(modules[modid].type==ET_DYN){
ffff800000809c66:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000809c6d:	ff ff ff 
ffff800000809c70:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000809c74:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000809c78:	48 89 ca             	mov    rdx,rcx
ffff800000809c7b:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809c7f:	48 01 ca             	add    rdx,rcx
ffff800000809c82:	48 c1 e2 03          	shl    rdx,0x3
ffff800000809c86:	48 01 f2             	add    rdx,rsi
ffff800000809c89:	48 83 c2 10          	add    rdx,0x10
ffff800000809c8d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809c90:	48 83 fa 03          	cmp    rdx,0x3
ffff800000809c94:	75 6b                	jne    ffff800000809d01 <get_sym_addr+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:753
        //还要加上节地址
        Elf64_Ehdr* ehdr=modules[modid].header;
ffff800000809c96:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000809c9d:	ff ff ff 
ffff800000809ca0:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809ca4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000809ca8:	48 89 d0             	mov    rax,rdx
ffff800000809cab:	48 c1 e0 02          	shl    rax,0x2
ffff800000809caf:	48 01 d0             	add    rax,rdx
ffff800000809cb2:	48 c1 e0 03          	shl    rax,0x3
ffff800000809cb6:	48 01 c8             	add    rax,rcx
ffff800000809cb9:	48 83 c0 08          	add    rax,0x8
ffff800000809cbd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809cbf:	48 98                	cdqe   
ffff800000809cc1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:754
        struct Elf64_Shdr* shdr=ehdr->e_shoff;
ffff800000809cc5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809cc9:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000809ccd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:755
        symaddr+=shdr[sym->st_shndx].sh_addr;
ffff800000809cd1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000809cd5:	0f b7 40 12          	movzx  eax,WORD PTR [rax+0x12]
ffff800000809cd9:	0f b7 d0             	movzx  edx,ax
ffff800000809cdc:	48 89 d0             	mov    rax,rdx
ffff800000809cdf:	48 01 c0             	add    rax,rax
ffff800000809ce2:	48 01 d0             	add    rax,rdx
ffff800000809ce5:	48 c1 e0 04          	shl    rax,0x4
ffff800000809ce9:	48 89 c2             	mov    rdx,rax
ffff800000809cec:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809cf0:	48 01 d0             	add    rax,rdx
ffff800000809cf3:	48 8b 40 0c          	mov    rax,QWORD PTR [rax+0xc]
ffff800000809cf7:	89 c2                	mov    edx,eax
ffff800000809cf9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809cfc:	01 d0                	add    eax,edx
ffff800000809cfe:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:757
    }
    return symaddr;
ffff800000809d01:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:758
}
ffff800000809d04:	5d                   	pop    rbp
ffff800000809d05:	c3                   	ret    

ffff800000809d06 <get_sym_plt>:
get_sym_plt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:759
off_t get_sym_plt(unsigned long modid,unsigned long symi){
ffff800000809d06:	f3 0f 1e fa          	endbr64 
ffff800000809d0a:	55                   	push   rbp
ffff800000809d0b:	48 89 e5             	mov    rbp,rsp
ffff800000809d0e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809d0e <get_sym_plt+0x8>
ffff800000809d15:	49 bb 22 3d 11 00 00 	movabs r11,0x113d22
ffff800000809d1c:	00 00 00 
ffff800000809d1f:	4c 01 d8             	add    rax,r11
ffff800000809d22:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000809d26:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:761

}
ffff800000809d2a:	90                   	nop
ffff800000809d2b:	5d                   	pop    rbp
ffff800000809d2c:	c3                   	ret    

ffff800000809d2d <get_load_base>:
get_load_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:762
off_t get_load_base(unsigned long modid){
ffff800000809d2d:	f3 0f 1e fa          	endbr64 
ffff800000809d31:	55                   	push   rbp
ffff800000809d32:	48 89 e5             	mov    rbp,rsp
ffff800000809d35:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809d35 <get_load_base+0x8>
ffff800000809d3c:	49 bb fb 3c 11 00 00 	movabs r11,0x113cfb
ffff800000809d43:	00 00 00 
ffff800000809d46:	4c 01 d8             	add    rax,r11
ffff800000809d49:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:763
    return modules[modid].base;
ffff800000809d4d:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000809d54:	ff ff ff 
ffff800000809d57:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809d5b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000809d5f:	48 89 d0             	mov    rax,rdx
ffff800000809d62:	48 c1 e0 02          	shl    rax,0x2
ffff800000809d66:	48 01 d0             	add    rax,rdx
ffff800000809d69:	48 c1 e0 03          	shl    rax,0x3
ffff800000809d6d:	48 01 c8             	add    rax,rcx
ffff800000809d70:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:764
}
ffff800000809d72:	5d                   	pop    rbp
ffff800000809d73:	c3                   	ret    

ffff800000809d74 <get_got>:
get_got():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:765
off_t get_got(unsigned long modid){
ffff800000809d74:	f3 0f 1e fa          	endbr64 
ffff800000809d78:	55                   	push   rbp
ffff800000809d79:	48 89 e5             	mov    rbp,rsp
ffff800000809d7c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809d7c <get_got+0x8>
ffff800000809d83:	49 bb b4 3c 11 00 00 	movabs r11,0x113cb4
ffff800000809d8a:	00 00 00 
ffff800000809d8d:	4c 01 d8             	add    rax,r11
ffff800000809d90:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:766
    return modules[modid].p_got;
ffff800000809d94:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000809d9b:	ff ff ff 
ffff800000809d9e:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809da2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000809da6:	48 89 d0             	mov    rax,rdx
ffff800000809da9:	48 c1 e0 02          	shl    rax,0x2
ffff800000809dad:	48 01 d0             	add    rax,rdx
ffff800000809db0:	48 c1 e0 03          	shl    rax,0x3
ffff800000809db4:	48 01 c8             	add    rax,rcx
ffff800000809db7:	48 83 c0 20          	add    rax,0x20
ffff800000809dbb:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:767
}
ffff800000809dbd:	5d                   	pop    rbp
ffff800000809dbe:	c3                   	ret    

ffff800000809dbf <fill_reloc>:
fill_reloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:769

void fill_reloc(Elf64_Rel* rel,int modid){
ffff800000809dbf:	f3 0f 1e fa          	endbr64 
ffff800000809dc3:	55                   	push   rbp
ffff800000809dc4:	48 89 e5             	mov    rbp,rsp
ffff800000809dc7:	41 57                	push   r15
ffff800000809dc9:	53                   	push   rbx
ffff800000809dca:	48 83 ec 30          	sub    rsp,0x30
ffff800000809dce:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809dce <fill_reloc+0xf>
ffff800000809dd5:	49 bb 62 3c 11 00 00 	movabs r11,0x113c62
ffff800000809ddc:	00 00 00 
ffff800000809ddf:	4c 01 db             	add    rbx,r11
ffff800000809de2:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000809de6:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:770
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff800000809de9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809ded:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809df0:	ba 20 00 00 00       	mov    edx,0x20
ffff800000809df5:	89 d1                	mov    ecx,edx
ffff800000809df7:	d3 e8                	shr    eax,cl
ffff800000809df9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff800000809dfc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809e00:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809e03:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:771
    off_t sym_off=get_sym_addr(modid,symi);
ffff800000809e06:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809e09:	48 63 d0             	movsxd rdx,eax
ffff800000809e0c:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809e0f:	48 98                	cdqe   
ffff800000809e11:	48 89 d6             	mov    rsi,rdx
ffff800000809e14:	48 89 c7             	mov    rdi,rax
ffff800000809e17:	49 89 df             	mov    r15,rbx
ffff800000809e1a:	48 b8 94 c1 ee ff ff 	movabs rax,0xffffffffffeec194
ffff800000809e21:	ff ff ff 
ffff800000809e24:	48 01 d8             	add    rax,rbx
ffff800000809e27:	ff d0                	call   rax
ffff800000809e29:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:774
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff800000809e2c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809e30:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809e33:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:775
    switch (type)
ffff800000809e37:	83 7d e8 0b          	cmp    DWORD PTR [rbp-0x18],0xb
ffff800000809e3b:	0f 87 37 01 00 00    	ja     ffff800000809f78 <fill_reloc+0x1b9>
ffff800000809e41:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809e44:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809e4b:	00 
ffff800000809e4c:	48 8d 05 05 13 11 00 	lea    rax,[rip+0x111305]        # ffff80000091b158 <.LC3+0x68>
ffff800000809e53:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000809e57:	48 8d 15 fa 12 11 00 	lea    rdx,[rip+0x1112fa]        # ffff80000091b158 <.LC3+0x68>
ffff800000809e5e:	48 01 d0             	add    rax,rdx
ffff800000809e61:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:779
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff800000809e64:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809e68:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000809e6b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:780
        break;
ffff800000809e6d:	e9 07 01 00 00       	jmp    ffff800000809f79 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:782
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff800000809e72:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809e75:	48 63 d0             	movsxd rdx,eax
ffff800000809e78:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809e7b:	48 98                	cdqe   
ffff800000809e7d:	48 89 d6             	mov    rsi,rdx
ffff800000809e80:	48 89 c7             	mov    rdi,rax
ffff800000809e83:	49 89 df             	mov    r15,rbx
ffff800000809e86:	48 b8 d6 c2 ee ff ff 	movabs rax,0xffffffffffeec2d6
ffff800000809e8d:	ff ff ff 
ffff800000809e90:	48 01 d8             	add    rax,rbx
ffff800000809e93:	ff d0                	call   rax
ffff800000809e95:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000809e99:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:783
        break;
ffff800000809e9b:	e9 d9 00 00 00       	jmp    ffff800000809f79 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:785
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff800000809ea0:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809ea3:	48 98                	cdqe   
ffff800000809ea5:	48 89 c7             	mov    rdi,rax
ffff800000809ea8:	49 89 df             	mov    r15,rbx
ffff800000809eab:	48 b8 fd c2 ee ff ff 	movabs rax,0xffffffffffeec2fd
ffff800000809eb2:	ff ff ff 
ffff800000809eb5:	48 01 d8             	add    rax,rbx
ffff800000809eb8:	ff d0                	call   rax
ffff800000809eba:	89 c2                	mov    edx,eax
ffff800000809ebc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809ec0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809ec2:	01 c2                	add    edx,eax
ffff800000809ec4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809ec8:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:786
        break;
ffff800000809eca:	e9 aa 00 00 00       	jmp    ffff800000809f79 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:788
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff800000809ecf:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809ed2:	48 98                	cdqe   
ffff800000809ed4:	48 89 c7             	mov    rdi,rax
ffff800000809ed7:	49 89 df             	mov    r15,rbx
ffff800000809eda:	48 b8 44 c3 ee ff ff 	movabs rax,0xffffffffffeec344
ffff800000809ee1:	ff ff ff 
ffff800000809ee4:	48 01 d8             	add    rax,rbx
ffff800000809ee7:	ff d0                	call   rax
ffff800000809ee9:	89 c2                	mov    edx,eax
ffff800000809eeb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809eee:	29 d0                	sub    eax,edx
ffff800000809ef0:	89 c1                	mov    ecx,eax
ffff800000809ef2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809ef6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809ef8:	8d 14 01             	lea    edx,[rcx+rax*1]
ffff800000809efb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809eff:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:789
        break;
ffff800000809f01:	eb 76                	jmp    ffff800000809f79 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:791
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-(off_t)rel;
ffff800000809f03:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809f06:	48 98                	cdqe   
ffff800000809f08:	48 89 c7             	mov    rdi,rax
ffff800000809f0b:	49 89 df             	mov    r15,rbx
ffff800000809f0e:	48 b8 44 c3 ee ff ff 	movabs rax,0xffffffffffeec344
ffff800000809f15:	ff ff ff 
ffff800000809f18:	48 01 d8             	add    rax,rbx
ffff800000809f1b:	ff d0                	call   rax
ffff800000809f1d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000809f21:	89 d1                	mov    ecx,edx
ffff800000809f23:	29 c8                	sub    eax,ecx
ffff800000809f25:	89 c2                	mov    edx,eax
ffff800000809f27:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809f2b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809f2d:	01 c2                	add    edx,eax
ffff800000809f2f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809f33:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:792
        break;
ffff800000809f35:	eb 42                	jmp    ffff800000809f79 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:795
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff800000809f37:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809f3b:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809f3d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809f40:	01 c2                	add    edx,eax
ffff800000809f42:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809f46:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:796
        break;
ffff800000809f48:	eb 2f                	jmp    ffff800000809f79 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:799
    case R_X86_64_32S:
    case R_X86_64_64:
        *v_rel+=sym_off;
ffff800000809f4a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809f4e:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809f50:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809f53:	01 c2                	add    edx,eax
ffff800000809f55:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809f59:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:800
        break;
ffff800000809f5b:	eb 1c                	jmp    ffff800000809f79 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:802
    case R_X86_64_PC32:
        *v_rel+=sym_off-(off_t)rel;
ffff800000809f5d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809f61:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809f63:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809f67:	89 c1                	mov    ecx,eax
ffff800000809f69:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809f6c:	29 c8                	sub    eax,ecx
ffff800000809f6e:	01 c2                	add    edx,eax
ffff800000809f70:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809f74:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:803
        break;
ffff800000809f76:	eb 01                	jmp    ffff800000809f79 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:805
    default:
        break;
ffff800000809f78:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:807
    }
ffff800000809f79:	90                   	nop
ffff800000809f7a:	48 83 c4 30          	add    rsp,0x30
ffff800000809f7e:	5b                   	pop    rbx
ffff800000809f7f:	41 5f                	pop    r15
ffff800000809f81:	5d                   	pop    rbp
ffff800000809f82:	c3                   	ret    
ffff800000809f83:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000809f8a:	00 00 00 
ffff800000809f8d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff800000809f90 <_syscall>:
_syscall():
ffff800000809f90:	55                   	push   rbp
ffff800000809f91:	48 bd 00 80 10 00 00 	movabs rbp,0xffff800000108000
ffff800000809f98:	80 ff ff 
ffff800000809f9b:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
ffff800000809f9f:	48 8b 65 24          	mov    rsp,QWORD PTR [rbp+0x24]
ffff800000809fa3:	6a 2b                	push   0x2b
ffff800000809fa5:	54                   	push   rsp
ffff800000809fa6:	9c                   	pushf  
ffff800000809fa7:	6a 33                	push   0x33
ffff800000809fa9:	51                   	push   rcx
ffff800000809faa:	50                   	push   rax
ffff800000809fab:	53                   	push   rbx
ffff800000809fac:	51                   	push   rcx
ffff800000809fad:	52                   	push   rdx
ffff800000809fae:	57                   	push   rdi
ffff800000809faf:	56                   	push   rsi
ffff800000809fb0:	41 50                	push   r8
ffff800000809fb2:	41 51                	push   r9
ffff800000809fb4:	41 52                	push   r10
ffff800000809fb6:	41 53                	push   r11
ffff800000809fb8:	41 54                	push   r12
ffff800000809fba:	41 55                	push   r13
ffff800000809fbc:	41 56                	push   r14
ffff800000809fbe:	41 57                	push   r15
ffff800000809fc0:	66 8c c0             	mov    ax,es
ffff800000809fc3:	50                   	push   rax
ffff800000809fc4:	66 8c d8             	mov    ax,ds
ffff800000809fc7:	50                   	push   rax
ffff800000809fc8:	66 b8 10 00          	mov    ax,0x10
ffff800000809fcc:	8e c0                	mov    es,eax
ffff800000809fce:	8e d8                	mov    ds,eax
ffff800000809fd0:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
ffff800000809fd5:	41 53                	push   r11
ffff800000809fd7:	51                   	push   rcx
ffff800000809fd8:	49 87 ca             	xchg   r10,rcx
ffff800000809fdb:	57                   	push   rdi
ffff800000809fdc:	48 bf e8 02 40 00 00 	movabs rdi,0xffff8000004002e8
ffff800000809fe3:	80 ff ff 
ffff800000809fe6:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
ffff800000809fe9:	4c 89 97 6c 02 00 00 	mov    QWORD PTR [rdi+0x26c],r10
ffff800000809ff0:	5f                   	pop    rdi
ffff800000809ff1:	e8 2b 6b ff ff       	call   ffff800000800b21 <syscall>

ffff800000809ff6 <_syscall_sysret>:
_syscall_sysret():
ffff800000809ff6:	4c 87 d1             	xchg   rcx,r10
ffff800000809ff9:	59                   	pop    rcx
ffff800000809ffa:	41 5b                	pop    r11
ffff800000809ffc:	58                   	pop    rax
ffff800000809ffd:	8e d8                	mov    ds,eax
ffff800000809fff:	58                   	pop    rax
ffff80000080a000:	8e c0                	mov    es,eax
ffff80000080a002:	41 5f                	pop    r15
ffff80000080a004:	41 5e                	pop    r14
ffff80000080a006:	41 5d                	pop    r13
ffff80000080a008:	41 5c                	pop    r12
ffff80000080a00a:	41 5b                	pop    r11
ffff80000080a00c:	41 5a                	pop    r10
ffff80000080a00e:	41 59                	pop    r9
ffff80000080a010:	41 58                	pop    r8
ffff80000080a012:	5e                   	pop    rsi
ffff80000080a013:	5f                   	pop    rdi
ffff80000080a014:	5a                   	pop    rdx
ffff80000080a015:	59                   	pop    rcx
ffff80000080a016:	5b                   	pop    rbx
ffff80000080a017:	48 83 c4 08          	add    rsp,0x8
ffff80000080a01b:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
ffff80000080a01f:	5d                   	pop    rbp
ffff80000080a020:	fb                   	sti    
ffff80000080a021:	48 0f 07             	sysretq 

ffff80000080a024 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:27
static u32 font_width_bytes;
static u8 *glyph_table;
static u32 bytes_per_glyph, glyph_nr;
int font_size=1;
void init_framebuffer()
{
ffff80000080a024:	f3 0f 1e fa          	endbr64 
ffff80000080a028:	55                   	push   rbp
ffff80000080a029:	48 89 e5             	mov    rbp,rsp
ffff80000080a02c:	41 57                	push   r15
ffff80000080a02e:	53                   	push   rbx
ffff80000080a02f:	48 83 ec 50          	sub    rsp,0x50
ffff80000080a033:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a033 <init_framebuffer+0xf>
ffff80000080a03a:	49 bb fd 39 11 00 00 	movabs r11,0x1139fd
ffff80000080a041:	00 00 00 
ffff80000080a044:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
ffff80000080a047:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a04e:	ff ff ff 
ffff80000080a051:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a055:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a058:	89 c0                	mov    eax,eax
ffff80000080a05a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:30
    size_t h=framebuffer.common.framebuffer_height;
ffff80000080a05e:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a065:	ff ff ff 
ffff80000080a068:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a06c:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a06f:	89 c0                	mov    eax,eax
ffff80000080a071:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
ffff80000080a075:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a07c:	ff ff ff 
ffff80000080a07f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a083:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080a087:	c0 e8 03             	shr    al,0x3
ffff80000080a08a:	0f b6 c0             	movzx  eax,al
ffff80000080a08d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t inter=framebuffer.common.framebuffer_pitch;
ffff80000080a091:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a098:	ff ff ff 
ffff80000080a09b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a09f:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a0a2:	89 c0                	mov    eax,eax
ffff80000080a0a4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t pc=w*h;
ffff80000080a0a8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a0ac:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
ffff80000080a0b1:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t size=h*inter;
ffff80000080a0b5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a0b9:	48 0f af 45 b8       	imul   rax,QWORD PTR [rbp-0x48]
ffff80000080a0be:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    int pgc=size/PAGE_SIZE;
ffff80000080a0c2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a0c6:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080a0ca:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    addr_t p=FRAMEBUFFER_ADDR;
ffff80000080a0cd:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a0d4:	80 ff ff 
ffff80000080a0d7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    addr_t pp=framebuffer.common.framebuffer_addr;
ffff80000080a0db:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a0e2:	ff ff ff 
ffff80000080a0e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a0e9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080a0ed:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    for (size_t i = 0; i < pgc; i++)
ffff80000080a0f1:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080a0f8:	00 
ffff80000080a0f9:	eb 44                	jmp    ffff80000080a13f <init_framebuffer+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
ffff80000080a0fb:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080a0ff:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a103:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
ffff80000080a10a:	80 ff ff 
ffff80000080a10d:	48 89 d1             	mov    rcx,rdx
ffff80000080a110:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080a115:	48 89 c7             	mov    rdi,rax
ffff80000080a118:	49 89 df             	mov    r15,rbx
ffff80000080a11b:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff80000080a122:	ff ff ff 
ffff80000080a125:	48 01 d8             	add    rax,rbx
ffff80000080a128:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:41 (discriminator 3)
        pp+=PAGE_SIZE;
ffff80000080a12a:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080a131:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
        p+=PAGE_SIZE;
ffff80000080a132:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffff80000080a139:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
ffff80000080a13a:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 1)
ffff80000080a13f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080a142:	48 98                	cdqe   
ffff80000080a144:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080a148:	72 b1                	jb     ffff80000080a0fb <init_framebuffer+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:46
    }
    
    
}
ffff80000080a14a:	90                   	nop
ffff80000080a14b:	90                   	nop
ffff80000080a14c:	48 83 c4 50          	add    rsp,0x50
ffff80000080a150:	5b                   	pop    rbx
ffff80000080a151:	41 5f                	pop    r15
ffff80000080a153:	5d                   	pop    rbp
ffff80000080a154:	c3                   	ret    

ffff80000080a155 <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
void init_font(){
ffff80000080a155:	f3 0f 1e fa          	endbr64 
ffff80000080a159:	55                   	push   rbp
ffff80000080a15a:	48 89 e5             	mov    rbp,rsp
ffff80000080a15d:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080a15d <init_font+0x8>
ffff80000080a164:	49 bb d3 38 11 00 00 	movabs r11,0x1138d3
ffff80000080a16b:	00 00 00 
ffff80000080a16e:	4c 01 d9             	add    rcx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
ffff80000080a171:	48 b8 b0 69 af ff ff 	movabs rax,0xffffffffffaf69b0
ffff80000080a178:	ff ff ff 
ffff80000080a17b:	48 ba b0 fd ff ff ff 	movabs rdx,0xfffffffffffffdb0
ffff80000080a182:	ff ff ff 
ffff80000080a185:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff80000080a189:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:50

    font_width_bytes = (boot_font->width + 7) / 8;
ffff80000080a18d:	48 b8 b0 69 af ff ff 	movabs rax,0xffffffffffaf69b0
ffff80000080a194:	ff ff ff 
ffff80000080a197:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a19b:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080a19e:	83 c0 07             	add    eax,0x7
ffff80000080a1a1:	c1 e8 03             	shr    eax,0x3
ffff80000080a1a4:	89 c2                	mov    edx,eax
ffff80000080a1a6:	48 b8 c0 69 af ff ff 	movabs rax,0xffffffffffaf69c0
ffff80000080a1ad:	ff ff ff 
ffff80000080a1b0:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51
    font_width = font_width_bytes * 8;
ffff80000080a1b3:	48 b8 c0 69 af ff ff 	movabs rax,0xffffffffffaf69c0
ffff80000080a1ba:	ff ff ff 
ffff80000080a1bd:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080a1c0:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff80000080a1c7:	48 b8 b8 69 af ff ff 	movabs rax,0xffffffffffaf69b8
ffff80000080a1ce:	ff ff ff 
ffff80000080a1d1:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_height = boot_font->height;
ffff80000080a1d4:	48 b8 b0 69 af ff ff 	movabs rax,0xffffffffffaf69b0
ffff80000080a1db:	ff ff ff 
ffff80000080a1de:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a1e2:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a1e5:	48 ba bc 69 af ff ff 	movabs rdx,0xffffffffffaf69bc
ffff80000080a1ec:	ff ff ff 
ffff80000080a1ef:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:54

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
ffff80000080a1f2:	48 b8 b0 69 af ff ff 	movabs rax,0xffffffffffaf69b0
ffff80000080a1f9:	ff ff ff 
ffff80000080a1fc:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a200:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a203:	89 c2                	mov    edx,eax
ffff80000080a205:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff80000080a20c:	ff ff ff 
ffff80000080a20f:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a213:	48 01 c2             	add    rdx,rax
ffff80000080a216:	48 b8 c8 69 af ff ff 	movabs rax,0xffffffffffaf69c8
ffff80000080a21d:	ff ff ff 
ffff80000080a220:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55
    glyph_nr = boot_font->glyph_nr;
ffff80000080a224:	48 b8 b0 69 af ff ff 	movabs rax,0xffffffffffaf69b0
ffff80000080a22b:	ff ff ff 
ffff80000080a22e:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a232:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a235:	48 ba d4 69 af ff ff 	movabs rdx,0xffffffffffaf69d4
ffff80000080a23c:	ff ff ff 
ffff80000080a23f:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    bytes_per_glyph = boot_font->bytes_per_glyph;
ffff80000080a242:	48 b8 b0 69 af ff ff 	movabs rax,0xffffffffffaf69b0
ffff80000080a249:	ff ff ff 
ffff80000080a24c:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a250:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a253:	48 ba d0 69 af ff ff 	movabs rdx,0xffffffffffaf69d0
ffff80000080a25a:	ff ff ff 
ffff80000080a25d:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:58

    fb_cursor_x = fb_cursor_y = 0;
ffff80000080a260:	48 b8 a0 69 af ff ff 	movabs rax,0xffffffffffaf69a0
ffff80000080a267:	ff ff ff 
ffff80000080a26a:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
ffff80000080a271:	48 b8 a0 69 af ff ff 	movabs rax,0xffffffffffaf69a0
ffff80000080a278:	ff ff ff 
ffff80000080a27b:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080a27e:	48 ba 9c 69 af ff ff 	movabs rdx,0xffffffffffaf699c
ffff80000080a285:	ff ff ff 
ffff80000080a288:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
ffff80000080a28b:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a292:	ff ff ff 
ffff80000080a295:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a299:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a29c:	48 ba b8 69 af ff ff 	movabs rdx,0xffffffffffaf69b8
ffff80000080a2a3:	ff ff ff 
ffff80000080a2a6:	8b 34 11             	mov    esi,DWORD PTR [rcx+rdx*1]
ffff80000080a2a9:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a2ae:	f7 f6                	div    esi
ffff80000080a2b0:	89 c2                	mov    edx,eax
ffff80000080a2b2:	48 b8 a4 69 af ff ff 	movabs rax,0xffffffffffaf69a4
ffff80000080a2b9:	ff ff ff 
ffff80000080a2bc:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
ffff80000080a2bf:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a2c6:	ff ff ff 
ffff80000080a2c9:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a2cd:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a2d0:	48 ba bc 69 af ff ff 	movabs rdx,0xffffffffffaf69bc
ffff80000080a2d7:	ff ff ff 
ffff80000080a2da:	8b 3c 11             	mov    edi,DWORD PTR [rcx+rdx*1]
ffff80000080a2dd:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a2e2:	f7 f7                	div    edi
ffff80000080a2e4:	89 c2                	mov    edx,eax
ffff80000080a2e6:	48 b8 a8 69 af ff ff 	movabs rax,0xffffffffffaf69a8
ffff80000080a2ed:	ff ff ff 
ffff80000080a2f0:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    font_size=1;
ffff80000080a2f3:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff80000080a2fa:	ff ff ff 
ffff80000080a2fd:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a301:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
}
ffff80000080a307:	90                   	nop
ffff80000080a308:	5d                   	pop    rbp
ffff80000080a309:	c3                   	ret    

ffff80000080a30a <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
ffff80000080a30a:	f3 0f 1e fa          	endbr64 
ffff80000080a30e:	55                   	push   rbp
ffff80000080a30f:	48 89 e5             	mov    rbp,rsp
ffff80000080a312:	53                   	push   rbx
ffff80000080a313:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a313 <set_framebuffer+0x9>
ffff80000080a31a:	49 bb 1d 37 11 00 00 	movabs r11,0x11371d
ffff80000080a321:	00 00 00 
ffff80000080a324:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:65
    framebuffer=tag;
ffff80000080a327:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a32e:	ff ff ff 
ffff80000080a331:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a335:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff80000080a339:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
ffff80000080a33d:	48 89 08             	mov    QWORD PTR [rax],rcx
ffff80000080a340:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
ffff80000080a344:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff80000080a348:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
ffff80000080a34c:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffff80000080a350:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffff80000080a354:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff80000080a358:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
}
ffff80000080a35c:	90                   	nop
ffff80000080a35d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080a361:	c9                   	leave  
ffff80000080a362:	c3                   	ret    

ffff80000080a363 <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68

void fill_rect(int x,int y,int w,int h,unsigned int color){
ffff80000080a363:	f3 0f 1e fa          	endbr64 
ffff80000080a367:	55                   	push   rbp
ffff80000080a368:	48 89 e5             	mov    rbp,rsp
ffff80000080a36b:	4c 8d 0d f9 ff ff ff 	lea    r9,[rip+0xfffffffffffffff9]        # ffff80000080a36b <fill_rect+0x8>
ffff80000080a372:	49 bb c5 36 11 00 00 	movabs r11,0x1136c5
ffff80000080a379:	00 00 00 
ffff80000080a37c:	4d 01 d9             	add    r9,r11
ffff80000080a37f:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080a382:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080a385:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080a388:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff80000080a38b:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
ffff80000080a38f:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a396:	80 ff ff 
ffff80000080a399:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
ffff80000080a39d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a3a0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffff80000080a3a3:	e9 82 00 00 00       	jmp    ffff80000080a42a <fill_rect+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72
        for(int px=y;px<w+y;px++){
ffff80000080a3a8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a3ab:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffff80000080a3ae:	eb 69                	jmp    ffff80000080a419 <fill_rect+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a3b0:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a3b7:	ff ff ff 
ffff80000080a3ba:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080a3be:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff80000080a3c1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080a3c4:	0f af c2             	imul   eax,edx
ffff80000080a3c7:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:74 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080a3c9:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a3d0:	ff ff ff 
ffff80000080a3d3:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080a3d7:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080a3db:	0f b6 c0             	movzx  eax,al
ffff80000080a3de:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
ffff80000080a3e2:	8d 50 07             	lea    edx,[rax+0x7]
ffff80000080a3e5:	85 c0                	test   eax,eax
ffff80000080a3e7:	0f 48 c2             	cmovs  eax,edx
ffff80000080a3ea:	c1 f8 03             	sar    eax,0x3
ffff80000080a3ed:	48 98                	cdqe   
ffff80000080a3ef:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a3f3:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a3fa:	80 ff ff 
ffff80000080a3fd:	48 01 d0             	add    rax,rdx
ffff80000080a400:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 3)
            fb=(unsigned int*)ptr;
ffff80000080a404:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a408:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
            *fb=color;
ffff80000080a40c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080a410:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080a413:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 3)
        for(int px=y;px<w+y;px++){
ffff80000080a415:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 1)
ffff80000080a419:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a41c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a41f:	01 d0                	add    eax,edx
ffff80000080a421:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
ffff80000080a424:	7c 8a                	jl     ffff80000080a3b0 <fill_rect+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 2)
    for(int py=x;py<h+x;py++){
ffff80000080a426:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 1)
ffff80000080a42a:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080a42d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a430:	01 d0                	add    eax,edx
ffff80000080a432:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffff80000080a435:	0f 8c 6d ff ff ff    	jl     ffff80000080a3a8 <fill_rect+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79
        }
    }
}
ffff80000080a43b:	90                   	nop
ffff80000080a43c:	90                   	nop
ffff80000080a43d:	5d                   	pop    rbp
ffff80000080a43e:	c3                   	ret    

ffff80000080a43f <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:82
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
ffff80000080a43f:	f3 0f 1e fa          	endbr64 
ffff80000080a443:	55                   	push   rbp
ffff80000080a444:	48 89 e5             	mov    rbp,rsp
ffff80000080a447:	41 57                	push   r15
ffff80000080a449:	53                   	push   rbx
ffff80000080a44a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a44e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a44e <draw_text+0xf>
ffff80000080a455:	49 bb e2 35 11 00 00 	movabs r11,0x1135e2
ffff80000080a45c:	00 00 00 
ffff80000080a45f:	4c 01 db             	add    rbx,r11
ffff80000080a462:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080a465:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080a468:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080a46b:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
    int tx=x;
ffff80000080a46f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a472:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080a475:	eb 75                	jmp    ffff80000080a4ec <draw_text+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
    {
        if(*str=='\n')
ffff80000080a477:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a47b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a47e:	3c 0a                	cmp    al,0xa
ffff80000080a480:	75 23                	jne    ffff80000080a4a5 <draw_text+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
        {
            y+=font_height*size;
ffff80000080a482:	48 b8 bc 69 af ff ff 	movabs rax,0xffffffffffaf69bc
ffff80000080a489:	ff ff ff 
ffff80000080a48c:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080a48f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080a492:	0f af d0             	imul   edx,eax
ffff80000080a495:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a498:	01 d0                	add    eax,edx
ffff80000080a49a:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:89
            tx=x;
ffff80000080a49d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a4a0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080a4a3:	eb 42                	jmp    ffff80000080a4e7 <draw_text+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
        }
        else
        {
            draw_letter(tx,y,size,*str);
ffff80000080a4a5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a4a9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a4ac:	0f be c8             	movsx  ecx,al
ffff80000080a4af:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a4b2:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
ffff80000080a4b5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a4b8:	89 c7                	mov    edi,eax
ffff80000080a4ba:	49 89 df             	mov    r15,rbx
ffff80000080a4bd:	48 b8 d2 ca ee ff ff 	movabs rax,0xffffffffffeecad2
ffff80000080a4c4:	ff ff ff 
ffff80000080a4c7:	48 01 d8             	add    rax,rbx
ffff80000080a4ca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:94
            tx+=size*font_width;
ffff80000080a4cc:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a4cf:	48 b8 b8 69 af ff ff 	movabs rax,0xffffffffffaf69b8
ffff80000080a4d6:	ff ff ff 
ffff80000080a4d9:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080a4dc:	0f af d0             	imul   edx,eax
ffff80000080a4df:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a4e2:	01 d0                	add    eax,edx
ffff80000080a4e4:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:96
        }
        str++;
ffff80000080a4e7:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080a4ec:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a4f0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a4f3:	84 c0                	test   al,al
ffff80000080a4f5:	75 80                	jne    ffff80000080a477 <draw_text+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
    }
}
ffff80000080a4f7:	90                   	nop
ffff80000080a4f8:	90                   	nop
ffff80000080a4f9:	48 83 c4 30          	add    rsp,0x30
ffff80000080a4fd:	5b                   	pop    rbx
ffff80000080a4fe:	41 5f                	pop    r15
ffff80000080a500:	5d                   	pop    rbp
ffff80000080a501:	c3                   	ret    

ffff80000080a502 <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:99
void draw_letter(int x, volatile int y, int size, char c) {
ffff80000080a502:	f3 0f 1e fa          	endbr64 
ffff80000080a506:	55                   	push   rbp
ffff80000080a507:	48 89 e5             	mov    rbp,rsp
ffff80000080a50a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a50a <draw_letter+0x8>
ffff80000080a511:	49 bb 26 35 11 00 00 	movabs r11,0x113526
ffff80000080a518:	00 00 00 
ffff80000080a51b:	4c 01 d8             	add    rax,r11
ffff80000080a51e:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080a521:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
ffff80000080a524:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
ffff80000080a527:	89 ca                	mov    edx,ecx
ffff80000080a529:	88 55 c0             	mov    BYTE PTR [rbp-0x40],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
    u8 *glyph = glyph_table;
ffff80000080a52c:	48 ba c8 69 af ff ff 	movabs rdx,0xffffffffffaf69c8
ffff80000080a533:	ff ff ff 
ffff80000080a536:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a53a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:101
    if (c < glyph_nr) {
ffff80000080a53e:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080a542:	48 ba d4 69 af ff ff 	movabs rdx,0xffffffffffaf69d4
ffff80000080a549:	ff ff ff 
ffff80000080a54c:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a54f:	39 d1                	cmp    ecx,edx
ffff80000080a551:	73 1a                	jae    ffff80000080a56d <draw_letter+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
        glyph += c * bytes_per_glyph;
ffff80000080a553:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080a557:	48 ba d0 69 af ff ff 	movabs rdx,0xffffffffffaf69d0
ffff80000080a55e:	ff ff ff 
ffff80000080a561:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a564:	0f af d1             	imul   edx,ecx
ffff80000080a567:	89 d2                	mov    edx,edx
ffff80000080a569:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080a56d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080a574:	e9 f8 00 00 00       	jmp    ffff80000080a671 <draw_letter+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        u8 mask = 1 << 7;
ffff80000080a579:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080a57d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080a584:	e9 bb 00 00 00       	jmp    ffff80000080a644 <draw_letter+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
            int px=x+ch_x*size;
ffff80000080a589:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080a58c:	89 d1                	mov    ecx,edx
ffff80000080a58e:	0f af 4d ec          	imul   ecx,DWORD PTR [rbp-0x14]
ffff80000080a592:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080a595:	01 ca                	add    edx,ecx
ffff80000080a597:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
            int py=y+ch_y*size;
ffff80000080a59a:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080a59d:	89 d1                	mov    ecx,edx
ffff80000080a59f:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
ffff80000080a5a3:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff80000080a5a6:	01 ca                	add    edx,ecx
ffff80000080a5a8:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a5ab:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a5b2:	ff ff ff 
ffff80000080a5b5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a5b9:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a5bc:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080a5bf:	0f af d1             	imul   edx,ecx
ffff80000080a5c2:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112
                     +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080a5c4:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a5cb:	ff ff ff 
ffff80000080a5ce:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a5d2:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080a5d6:	0f b6 d2             	movzx  edx,dl
ffff80000080a5d9:	0f af 55 e8          	imul   edx,DWORD PTR [rbp-0x18]
ffff80000080a5dd:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080a5e0:	85 d2                	test   edx,edx
ffff80000080a5e2:	0f 48 d1             	cmovs  edx,ecx
ffff80000080a5e5:	c1 fa 03             	sar    edx,0x3
ffff80000080a5e8:	48 63 d2             	movsxd rdx,edx
ffff80000080a5eb:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080a5ef:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080a5f6:	80 ff ff 
ffff80000080a5f9:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a5fc:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            if ((*(glyph + ch_x / 8) & mask) != 0) {
ffff80000080a600:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080a603:	c1 ea 03             	shr    edx,0x3
ffff80000080a606:	89 d1                	mov    ecx,edx
ffff80000080a608:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a60c:	48 01 ca             	add    rdx,rcx
ffff80000080a60f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080a612:	22 55 f3             	and    dl,BYTE PTR [rbp-0xd]
ffff80000080a615:	84 d2                	test   dl,dl
ffff80000080a617:	74 0c                	je     ffff80000080a625 <draw_letter+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
                *ptr=-1;
ffff80000080a619:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a61d:	c7 02 ff ff ff ff    	mov    DWORD PTR [rdx],0xffffffff
ffff80000080a623:	eb 0a                	jmp    ffff80000080a62f <draw_letter+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
            } else {
                *ptr=0;
ffff80000080a625:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a629:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:119
            }

            mask >>= 1;
ffff80000080a62f:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            if (ch_x % 8 == 0) {
ffff80000080a632:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080a635:	83 e2 07             	and    edx,0x7
ffff80000080a638:	85 d2                	test   edx,edx
ffff80000080a63a:	75 04                	jne    ffff80000080a640 <draw_letter+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:121
                mask = 1 << 7;
ffff80000080a63c:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080a640:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 1)
ffff80000080a644:	48 ba b8 69 af ff ff 	movabs rdx,0xffffffffffaf69b8
ffff80000080a64b:	ff ff ff 
ffff80000080a64e:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a651:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080a654:	0f 82 2f ff ff ff    	jb     ffff80000080a589 <draw_letter+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
ffff80000080a65a:	48 ba c0 69 af ff ff 	movabs rdx,0xffffffffffaf69c0
ffff80000080a661:	ff ff ff 
ffff80000080a664:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a667:	89 d2                	mov    edx,edx
ffff80000080a669:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080a66d:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 1)
ffff80000080a671:	48 ba bc 69 af ff ff 	movabs rdx,0xffffffffffaf69bc
ffff80000080a678:	ff ff ff 
ffff80000080a67b:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a67e:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080a681:	0f 82 f2 fe ff ff    	jb     ffff80000080a579 <draw_letter+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:127
    }
}
ffff80000080a687:	90                   	nop
ffff80000080a688:	90                   	nop
ffff80000080a689:	5d                   	pop    rbp
ffff80000080a68a:	c3                   	ret    

ffff80000080a68b <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129
//向上滚动一个像素
void scr_up(){
ffff80000080a68b:	f3 0f 1e fa          	endbr64 
ffff80000080a68f:	55                   	push   rbp
ffff80000080a690:	48 89 e5             	mov    rbp,rsp
ffff80000080a693:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a693 <scr_up+0x8>
ffff80000080a69a:	49 bb 9d 33 11 00 00 	movabs r11,0x11339d
ffff80000080a6a1:	00 00 00 
ffff80000080a6a4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080a6a7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080a6ae:	e9 ad 00 00 00       	jmp    ffff80000080a760 <scr_up+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080a6b3:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080a6ba:	e9 81 00 00 00       	jmp    ffff80000080a740 <scr_up+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
                    dy*framebuffer.common.framebuffer_pitch
ffff80000080a6bf:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a6c6:	ff ff ff 
ffff80000080a6c9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a6cd:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a6d0:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a6d3:	0f af d1             	imul   edx,ecx
ffff80000080a6d6:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134 (discriminator 3)
                    +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080a6d8:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a6df:	ff ff ff 
ffff80000080a6e2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a6e6:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080a6ea:	0f b6 d2             	movzx  edx,dl
ffff80000080a6ed:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080a6f1:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080a6f4:	85 d2                	test   edx,edx
ffff80000080a6f6:	0f 48 d1             	cmovs  edx,ecx
ffff80000080a6f9:	c1 fa 03             	sar    edx,0x3
ffff80000080a6fc:	48 63 d2             	movsxd rdx,edx
ffff80000080a6ff:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080a703:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080a70a:	80 ff ff 
ffff80000080a70d:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:132 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
ffff80000080a710:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135 (discriminator 3)
            *p=*(p+framebuffer.common.framebuffer_pitch);
ffff80000080a714:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a71b:	ff ff ff 
ffff80000080a71e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a722:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080a725:	89 d1                	mov    ecx,edx
ffff80000080a727:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a72b:	48 01 ca             	add    rdx,rcx
ffff80000080a72e:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080a731:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a735:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136 (discriminator 3)
            p++;
ffff80000080a737:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 3)
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080a73c:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 1)
ffff80000080a740:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a747:	ff ff ff 
ffff80000080a74a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a74e:	8b 4a 14             	mov    ecx,DWORD PTR [rdx+0x14]
ffff80000080a751:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080a754:	39 d1                	cmp    ecx,edx
ffff80000080a756:	0f 87 63 ff ff ff    	ja     ffff80000080a6bf <scr_up+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 2)
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080a75c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 1)
ffff80000080a760:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a767:	ff ff ff 
ffff80000080a76a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a76e:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080a771:	8d 4a ff             	lea    ecx,[rdx-0x1]
ffff80000080a774:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a777:	39 d1                	cmp    ecx,edx
ffff80000080a779:	0f 87 34 ff ff ff    	ja     ffff80000080a6b3 <scr_up+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:142
        }

    }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
ffff80000080a77f:	90                   	nop
ffff80000080a780:	90                   	nop
ffff80000080a781:	5d                   	pop    rbp
ffff80000080a782:	c3                   	ret    

ffff80000080a783 <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:143
void scr_down(){
ffff80000080a783:	f3 0f 1e fa          	endbr64 
ffff80000080a787:	55                   	push   rbp
ffff80000080a788:	48 89 e5             	mov    rbp,rsp
ffff80000080a78b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a78b <scr_down+0x8>
ffff80000080a792:	49 bb a5 32 11 00 00 	movabs r11,0x1132a5
ffff80000080a799:	00 00 00 
ffff80000080a79c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080a79f:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffff80000080a7a6:	e9 aa 00 00 00       	jmp    ffff80000080a855 <scr_down+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080a7ab:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080a7b2:	e9 82 00 00 00       	jmp    ffff80000080a839 <scr_down+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080a7b7:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a7be:	ff ff ff 
ffff80000080a7c1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a7c5:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a7c8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a7cb:	0f af d1             	imul   edx,ecx
ffff80000080a7ce:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:147 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080a7d0:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a7d7:	ff ff ff 
ffff80000080a7da:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a7de:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080a7e2:	0f b6 d2             	movzx  edx,dl
ffff80000080a7e5:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080a7e9:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080a7ec:	85 d2                	test   edx,edx
ffff80000080a7ee:	0f 48 d1             	cmovs  edx,ecx
ffff80000080a7f1:	c1 fa 03             	sar    edx,0x3
ffff80000080a7f4:	48 63 d2             	movsxd rdx,edx
ffff80000080a7f7:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080a7fb:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080a802:	80 ff ff 
ffff80000080a805:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080a808:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:148 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
ffff80000080a80c:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a813:	ff ff ff 
ffff80000080a816:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a81a:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080a81d:	89 d2                	mov    edx,edx
ffff80000080a81f:	48 89 d1             	mov    rcx,rdx
ffff80000080a822:	48 f7 d9             	neg    rcx
ffff80000080a825:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a829:	48 01 ca             	add    rdx,rcx
ffff80000080a82c:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080a82f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a833:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080a835:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 1)
ffff80000080a839:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080a83c:	48 ba a4 69 af ff ff 	movabs rdx,0xffffffffffaf69a4
ffff80000080a843:	ff ff ff 
ffff80000080a846:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a849:	39 d1                	cmp    ecx,edx
ffff80000080a84b:	0f 82 66 ff ff ff    	jb     ffff80000080a7b7 <scr_down+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080a851:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 1)
ffff80000080a855:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080a858:	48 ba a8 69 af ff ff 	movabs rdx,0xffffffffffaf69a8
ffff80000080a85f:	ff ff ff 
ffff80000080a862:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a865:	39 d1                	cmp    ecx,edx
ffff80000080a867:	0f 82 3e ff ff ff    	jb     ffff80000080a7ab <scr_down+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
        }

    }
}
ffff80000080a86d:	90                   	nop
ffff80000080a86e:	90                   	nop
ffff80000080a86f:	5d                   	pop    rbp
ffff80000080a870:	c3                   	ret    

ffff80000080a871 <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
void print(char* s){
ffff80000080a871:	f3 0f 1e fa          	endbr64 
ffff80000080a875:	55                   	push   rbp
ffff80000080a876:	48 89 e5             	mov    rbp,rsp
ffff80000080a879:	41 57                	push   r15
ffff80000080a87b:	53                   	push   rbx
ffff80000080a87c:	48 83 ec 10          	sub    rsp,0x10
ffff80000080a880:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a880 <print+0xf>
ffff80000080a887:	49 bb b0 31 11 00 00 	movabs r11,0x1131b0
ffff80000080a88e:	00 00 00 
ffff80000080a891:	4c 01 db             	add    rbx,r11
ffff80000080a894:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080a898:	e9 55 01 00 00       	jmp    ffff80000080a9f2 <print+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
ffff80000080a89d:	48 b8 9c 69 af ff ff 	movabs rax,0xffffffffffaf699c
ffff80000080a8a4:	ff ff ff 
ffff80000080a8a7:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080a8aa:	48 b8 a4 69 af ff ff 	movabs rax,0xffffffffffaf69a4
ffff80000080a8b1:	ff ff ff 
ffff80000080a8b4:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080a8b7:	39 c2                	cmp    edx,eax
ffff80000080a8b9:	77 0b                	ja     ffff80000080a8c6 <print+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 1)
ffff80000080a8bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a8bf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a8c2:	3c 0a                	cmp    al,0xa
ffff80000080a8c4:	75 2e                	jne    ffff80000080a8f4 <print+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157
        {
            fb_cursor_y+=1;
ffff80000080a8c6:	48 b8 a0 69 af ff ff 	movabs rax,0xffffffffffaf69a0
ffff80000080a8cd:	ff ff ff 
ffff80000080a8d0:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080a8d3:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080a8d6:	48 b8 a0 69 af ff ff 	movabs rax,0xffffffffffaf69a0
ffff80000080a8dd:	ff ff ff 
ffff80000080a8e0:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:158
            fb_cursor_x=0;
ffff80000080a8e3:	48 b8 9c 69 af ff ff 	movabs rax,0xffffffffffaf699c
ffff80000080a8ea:	ff ff ff 
ffff80000080a8ed:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        }
        if(*s=='\n')continue;
ffff80000080a8f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a8f8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a8fb:	3c 0a                	cmp    al,0xa
ffff80000080a8fd:	0f 84 e9 00 00 00    	je     ffff80000080a9ec <print+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        if(fb_cursor_y>=max_ch_nr_y-1){
ffff80000080a903:	48 b8 a8 69 af ff ff 	movabs rax,0xffffffffffaf69a8
ffff80000080a90a:	ff ff ff 
ffff80000080a90d:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080a910:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080a913:	48 b8 a0 69 af ff ff 	movabs rax,0xffffffffffaf69a0
ffff80000080a91a:	ff ff ff 
ffff80000080a91d:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080a920:	39 c2                	cmp    edx,eax
ffff80000080a922:	77 11                	ja     ffff80000080a935 <print+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:165
//            for(int i=0;i<font_height*font_size;i++)
////                scr_up();
////            fb_cursor_y=max_ch_nr_y-1;
            fb_cursor_y=0;
ffff80000080a924:	48 b8 a0 69 af ff ff 	movabs rax,0xffffffffffaf69a0
ffff80000080a92b:	ff ff ff 
ffff80000080a92e:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
ffff80000080a935:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a939:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a93c:	0f be d0             	movsx  edx,al
ffff80000080a93f:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff80000080a946:	ff ff ff 
ffff80000080a949:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a94d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a94f:	48 b9 a0 69 af ff ff 	movabs rcx,0xffffffffffaf69a0
ffff80000080a956:	ff ff ff 
ffff80000080a959:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080a95c:	48 b9 bc 69 af ff ff 	movabs rcx,0xffffffffffaf69bc
ffff80000080a963:	ff ff ff 
ffff80000080a966:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080a969:	0f af f1             	imul   esi,ecx
ffff80000080a96c:	48 b9 30 fe ff ff ff 	movabs rcx,0xfffffffffffffe30
ffff80000080a973:	ff ff ff 
ffff80000080a976:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080a97a:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080a97c:	0f af ce             	imul   ecx,esi
ffff80000080a97f:	41 89 c8             	mov    r8d,ecx
ffff80000080a982:	48 b9 9c 69 af ff ff 	movabs rcx,0xffffffffffaf699c
ffff80000080a989:	ff ff ff 
ffff80000080a98c:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080a98f:	48 b9 b8 69 af ff ff 	movabs rcx,0xffffffffffaf69b8
ffff80000080a996:	ff ff ff 
ffff80000080a999:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080a99c:	0f af f1             	imul   esi,ecx
ffff80000080a99f:	48 b9 30 fe ff ff ff 	movabs rcx,0xfffffffffffffe30
ffff80000080a9a6:	ff ff ff 
ffff80000080a9a9:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080a9ad:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080a9af:	0f af ce             	imul   ecx,esi
ffff80000080a9b2:	89 cf                	mov    edi,ecx
ffff80000080a9b4:	89 d1                	mov    ecx,edx
ffff80000080a9b6:	89 c2                	mov    edx,eax
ffff80000080a9b8:	44 89 c6             	mov    esi,r8d
ffff80000080a9bb:	49 89 df             	mov    r15,rbx
ffff80000080a9be:	48 b8 d2 ca ee ff ff 	movabs rax,0xffffffffffeecad2
ffff80000080a9c5:	ff ff ff 
ffff80000080a9c8:	48 01 d8             	add    rax,rbx
ffff80000080a9cb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:168
        fb_cursor_x+=1;
ffff80000080a9cd:	48 b8 9c 69 af ff ff 	movabs rax,0xffffffffffaf699c
ffff80000080a9d4:	ff ff ff 
ffff80000080a9d7:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080a9da:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080a9dd:	48 b8 9c 69 af ff ff 	movabs rax,0xffffffffffaf699c
ffff80000080a9e4:	ff ff ff 
ffff80000080a9e7:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
ffff80000080a9ea:	eb 01                	jmp    ffff80000080a9ed <print+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        if(*s=='\n')continue;
ffff80000080a9ec:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080a9ed:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
ffff80000080a9f2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a9f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a9f9:	84 c0                	test   al,al
ffff80000080a9fb:	0f 85 9c fe ff ff    	jne    ffff80000080a89d <print+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
    }
}
ffff80000080aa01:	90                   	nop
ffff80000080aa02:	90                   	nop
ffff80000080aa03:	48 83 c4 10          	add    rsp,0x10
ffff80000080aa07:	5b                   	pop    rbx
ffff80000080aa08:	41 5f                	pop    r15
ffff80000080aa0a:	5d                   	pop    rbp
ffff80000080aa0b:	c3                   	ret    

ffff80000080aa0c <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080aa0c:	f3 0f 1e fa          	endbr64 
ffff80000080aa10:	55                   	push   rbp
ffff80000080aa11:	48 89 e5             	mov    rbp,rsp
ffff80000080aa14:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080aa14 <open_framebuffer+0x8>
ffff80000080aa1b:	49 bb 1c 30 11 00 00 	movabs r11,0x11301c
ffff80000080aa22:	00 00 00 
ffff80000080aa25:	4c 01 d8             	add    rax,r11
ffff80000080aa28:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080aa2c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
    inode->f_ops=&framebuffer_fops;
ffff80000080aa30:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080aa34:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff80000080aa3b:	ff ff ff 
ffff80000080aa3e:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080aa42:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
    filp->f_ops=&framebuffer_fops;
ffff80000080aa46:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080aa4a:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff80000080aa51:	ff ff ff 
ffff80000080aa54:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080aa58:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
    return 1;
ffff80000080aa5c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:179
}
ffff80000080aa61:	5d                   	pop    rbp
ffff80000080aa62:	c3                   	ret    

ffff80000080aa63 <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
long close_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080aa63:	f3 0f 1e fa          	endbr64 
ffff80000080aa67:	55                   	push   rbp
ffff80000080aa68:	48 89 e5             	mov    rbp,rsp
ffff80000080aa6b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080aa6b <close_framebuffer+0x8>
ffff80000080aa72:	49 bb c5 2f 11 00 00 	movabs r11,0x112fc5
ffff80000080aa79:	00 00 00 
ffff80000080aa7c:	4c 01 d8             	add    rax,r11
ffff80000080aa7f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080aa83:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:182

}
ffff80000080aa87:	90                   	nop
ffff80000080aa88:	5d                   	pop    rbp
ffff80000080aa89:	c3                   	ret    

ffff80000080aa8a <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:183
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080aa8a:	f3 0f 1e fa          	endbr64 
ffff80000080aa8e:	55                   	push   rbp
ffff80000080aa8f:	48 89 e5             	mov    rbp,rsp
ffff80000080aa92:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080aa92 <read_framebuffer+0x8>
ffff80000080aa99:	49 bb 9e 2f 11 00 00 	movabs r11,0x112f9e
ffff80000080aaa0:	00 00 00 
ffff80000080aaa3:	4c 01 d8             	add    rax,r11
ffff80000080aaa6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080aaaa:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080aaae:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080aab2:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185

}
ffff80000080aab6:	90                   	nop
ffff80000080aab7:	5d                   	pop    rbp
ffff80000080aab8:	c3                   	ret    

ffff80000080aab9 <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080aab9:	f3 0f 1e fa          	endbr64 
ffff80000080aabd:	55                   	push   rbp
ffff80000080aabe:	48 89 e5             	mov    rbp,rsp
ffff80000080aac1:	41 57                	push   r15
ffff80000080aac3:	53                   	push   rbx
ffff80000080aac4:	48 83 ec 40          	sub    rsp,0x40
ffff80000080aac8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080aac8 <write_framebuffer+0xf>
ffff80000080aacf:	49 bb 68 2f 11 00 00 	movabs r11,0x112f68
ffff80000080aad6:	00 00 00 
ffff80000080aad9:	4c 01 db             	add    rbx,r11
ffff80000080aadc:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080aae0:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080aae4:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080aae8:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    char *tmp= (char*) kmalloc();
ffff80000080aaec:	49 89 df             	mov    r15,rbx
ffff80000080aaef:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080aaf4:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080aafb:	ff ff ff 
ffff80000080aafe:	48 01 da             	add    rdx,rbx
ffff80000080ab01:	ff d2                	call   rdx
ffff80000080ab03:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    int c=count/(PAGE_4K_SIZE-1),p=0;
ffff80000080ab07:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080ab0b:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
ffff80000080ab12:	01 10 00 
ffff80000080ab15:	48 89 c8             	mov    rax,rcx
ffff80000080ab18:	48 f7 e2             	mul    rdx
ffff80000080ab1b:	48 89 c8             	mov    rax,rcx
ffff80000080ab1e:	48 29 d0             	sub    rax,rdx
ffff80000080ab21:	48 d1 e8             	shr    rax,1
ffff80000080ab24:	48 01 d0             	add    rax,rdx
ffff80000080ab27:	48 c1 e8 0b          	shr    rax,0xb
ffff80000080ab2b:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080ab2e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
ffff80000080ab35:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080ab3c:	eb 60                	jmp    ffff80000080ab9e <write_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:191 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
ffff80000080ab3e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ab41:	48 63 d0             	movsxd rdx,eax
ffff80000080ab44:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ab48:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080ab4c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ab50:	ba ff 0f 00 00       	mov    edx,0xfff
ffff80000080ab55:	48 89 ce             	mov    rsi,rcx
ffff80000080ab58:	48 89 c7             	mov    rdi,rax
ffff80000080ab5b:	49 89 df             	mov    r15,rbx
ffff80000080ab5e:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff80000080ab65:	ff ff ff 
ffff80000080ab68:	48 01 d8             	add    rax,rbx
ffff80000080ab6b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
ffff80000080ab6d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ab71:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ab77:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193 (discriminator 7)
        print(tmp);
ffff80000080ab7a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ab7e:	48 89 c7             	mov    rdi,rax
ffff80000080ab81:	49 89 df             	mov    r15,rbx
ffff80000080ab84:	48 b8 41 ce ee ff ff 	movabs rax,0xffffffffffeece41
ffff80000080ab8b:	ff ff ff 
ffff80000080ab8e:	48 01 d8             	add    rax,rbx
ffff80000080ab91:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:194 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
ffff80000080ab93:	81 45 ec ff 0f 00 00 	add    DWORD PTR [rbp-0x14],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
ffff80000080ab9a:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 1)
ffff80000080ab9e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080aba2:	74 05                	je     ffff80000080aba9 <write_framebuffer+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 3)
ffff80000080aba4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080aba7:	eb 05                	jmp    ffff80000080abae <write_framebuffer+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 4)
ffff80000080aba9:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 6)
ffff80000080abae:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
ffff80000080abb1:	7f 8b                	jg     ffff80000080ab3e <write_framebuffer+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
    }
    kmfree(tmp);
ffff80000080abb3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080abb7:	48 89 c7             	mov    rdi,rax
ffff80000080abba:	49 89 df             	mov    r15,rbx
ffff80000080abbd:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080abc4:	ff ff ff 
ffff80000080abc7:	48 01 d8             	add    rax,rbx
ffff80000080abca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    return 0;
ffff80000080abcc:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
}
ffff80000080abd1:	48 83 c4 40          	add    rsp,0x40
ffff80000080abd5:	5b                   	pop    rbx
ffff80000080abd6:	41 5f                	pop    r15
ffff80000080abd8:	5d                   	pop    rbp
ffff80000080abd9:	c3                   	ret    

ffff80000080abda <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:199
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080abda:	f3 0f 1e fa          	endbr64 
ffff80000080abde:	55                   	push   rbp
ffff80000080abdf:	48 89 e5             	mov    rbp,rsp
ffff80000080abe2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080abe2 <ioctl_framebuffer+0x8>
ffff80000080abe9:	49 bb 4e 2e 11 00 00 	movabs r11,0x112e4e
ffff80000080abf0:	00 00 00 
ffff80000080abf3:	4c 01 d8             	add    rax,r11
ffff80000080abf6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080abfa:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080abfe:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080ac02:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201

}
ffff80000080ac06:	90                   	nop
ffff80000080ac07:	5d                   	pop    rbp
ffff80000080ac08:	c3                   	ret    

ffff80000080ac09 <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:15
#include "str.h"
#include <ramdisk.h>
mount_point mp_mount_points[MAX_MOUNTPOINTS];

struct dir_entry * path_walk(char * name,unsigned long flags)
{
ffff80000080ac09:	f3 0f 1e fa          	endbr64 
ffff80000080ac0d:	55                   	push   rbp
ffff80000080ac0e:	48 89 e5             	mov    rbp,rsp
ffff80000080ac11:	41 57                	push   r15
ffff80000080ac13:	53                   	push   rbx
ffff80000080ac14:	48 83 ec 60          	sub    rsp,0x60
ffff80000080ac18:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ac18 <path_walk+0xf>
ffff80000080ac1f:	49 bb 18 2e 11 00 00 	movabs r11,0x112e18
ffff80000080ac26:	00 00 00 
ffff80000080ac29:	4c 01 db             	add    rbx,r11
ffff80000080ac2c:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080ac30:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:16
    char * tmpname = NULL;
ffff80000080ac34:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080ac3b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:17
    int tmpnamelen = 0;
ffff80000080ac3c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:18
    struct dir_entry * parent = root_sb->root;
ffff80000080ac43:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080ac4a:	ff ff ff 
ffff80000080ac4d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ac51:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ac54:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ac57:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:19
    struct dir_entry * path = NULL;
ffff80000080ac5b:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080ac62:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:21

    while(*name == '/')
ffff80000080ac63:	eb 05                	jmp    ffff80000080ac6a <path_walk+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:22
        name++;
ffff80000080ac65:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:21
    while(*name == '/')
ffff80000080ac6a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ac6e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ac71:	3c 2f                	cmp    al,0x2f
ffff80000080ac73:	74 f0                	je     ffff80000080ac65 <path_walk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:24

    if(!*name)
ffff80000080ac75:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ac79:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ac7c:	84 c0                	test   al,al
ffff80000080ac7e:	75 09                	jne    ffff80000080ac89 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:26
    {
        return parent;
ffff80000080ac80:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ac84:	e9 f9 02 00 00       	jmp    ffff80000080af82 <path_walk+0x379>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
    }

    for(;;)
    {
        tmpname = name;
ffff80000080ac89:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ac8d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
        while(*name && (*name != '/'))
ffff80000080ac91:	eb 05                	jmp    ffff80000080ac98 <path_walk+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:33
            name++;
ffff80000080ac93:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
        while(*name && (*name != '/'))
ffff80000080ac98:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ac9c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ac9f:	84 c0                	test   al,al
ffff80000080aca1:	74 0b                	je     ffff80000080acae <path_walk+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32 (discriminator 1)
ffff80000080aca3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080aca7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080acaa:	3c 2f                	cmp    al,0x2f
ffff80000080acac:	75 e5                	jne    ffff80000080ac93 <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:34
        tmpnamelen = name - tmpname;
ffff80000080acae:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080acb2:	48 2b 45 d0          	sub    rax,QWORD PTR [rbp-0x30]
ffff80000080acb6:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:37
        //先在缓存中寻找已有的dentry
        //寻找名字为tmpname的dentry
        struct List* lp=parent->subdirs_list.next;
ffff80000080acb9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080acbd:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080acc1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38
        while (lp)
ffff80000080acc5:	eb 4e                	jmp    ffff80000080ad15 <path_walk+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        {
            path=lp->data;
ffff80000080acc7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080accb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080accf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:41
            if(memcmp(tmpname,path->name,tmpnamelen)==0){
ffff80000080acd3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080acd7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080acda:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080acdd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ace1:	48 89 ce             	mov    rsi,rcx
ffff80000080ace4:	48 89 c7             	mov    rdi,rax
ffff80000080ace7:	49 89 df             	mov    r15,rbx
ffff80000080acea:	48 b8 c7 50 ef ff ff 	movabs rax,0xffffffffffef50c7
ffff80000080acf1:	ff ff ff 
ffff80000080acf4:	48 01 d8             	add    rax,rbx
ffff80000080acf7:	ff d0                	call   rax
ffff80000080acf9:	85 c0                	test   eax,eax
ffff80000080acfb:	74 21                	je     ffff80000080ad1e <path_walk+0x115>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:44
                break;
            }
            lp=&path->child_node;
ffff80000080acfd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad01:	48 83 c0 10          	add    rax,0x10
ffff80000080ad05:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:45
            lp=lp->next;
ffff80000080ad09:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ad0d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ad11:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38
        while (lp)
ffff80000080ad15:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080ad1a:	75 ab                	jne    ffff80000080acc7 <path_walk+0xbe>
ffff80000080ad1c:	eb 01                	jmp    ffff80000080ad1f <path_walk+0x116>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:42
                break;
ffff80000080ad1e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:47
        }
        if(!lp){
ffff80000080ad1f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080ad24:	0f 85 ea 01 00 00    	jne    ffff80000080af14 <path_walk+0x30b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49
            //缓存中没有，再读取介质
            path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff80000080ad2a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ad2f:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080ad34:	49 89 df             	mov    r15,rbx
ffff80000080ad37:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ad3c:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080ad43:	ff ff ff 
ffff80000080ad46:	48 01 da             	add    rdx,rbx
ffff80000080ad49:	ff d2                	call   rdx
ffff80000080ad4b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:50
            memset(path,0,sizeof(struct dir_entry));
ffff80000080ad4f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad53:	ba 60 00 00 00       	mov    edx,0x60
ffff80000080ad58:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ad5d:	48 89 c7             	mov    rdi,rax
ffff80000080ad60:	49 89 df             	mov    r15,rbx
ffff80000080ad63:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff80000080ad6a:	ff ff ff 
ffff80000080ad6d:	48 01 d8             	add    rax,rbx
ffff80000080ad70:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:52

            path->name = kmalloc();
ffff80000080ad72:	49 89 df             	mov    r15,rbx
ffff80000080ad75:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ad7a:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080ad81:	ff ff ff 
ffff80000080ad84:	48 01 da             	add    rdx,rbx
ffff80000080ad87:	ff d2                	call   rdx
ffff80000080ad89:	48 89 c2             	mov    rdx,rax
ffff80000080ad8c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad90:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:53
            memset(path->name,0,tmpnamelen+1);
ffff80000080ad93:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ad96:	83 c0 01             	add    eax,0x1
ffff80000080ad99:	89 c2                	mov    edx,eax
ffff80000080ad9b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad9f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ada2:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ada7:	48 89 c7             	mov    rdi,rax
ffff80000080adaa:	49 89 df             	mov    r15,rbx
ffff80000080adad:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff80000080adb4:	ff ff ff 
ffff80000080adb7:	48 01 d8             	add    rax,rbx
ffff80000080adba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:54
            memcpy(path->name,tmpname,tmpnamelen);
ffff80000080adbc:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080adbf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080adc3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080adc6:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080adca:	48 89 ce             	mov    rsi,rcx
ffff80000080adcd:	48 89 c7             	mov    rdi,rax
ffff80000080add0:	49 89 df             	mov    r15,rbx
ffff80000080add3:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff80000080adda:	ff ff ff 
ffff80000080addd:	48 01 d8             	add    rax,rbx
ffff80000080ade0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:55
            path->name_length = tmpnamelen;
ffff80000080ade2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ade6:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080ade9:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:57

            path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
ffff80000080adec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080adf0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080adf4:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080adf8:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080adfc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ae00:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ae04:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ae08:	48 89 d6             	mov    rsi,rdx
ffff80000080ae0b:	48 89 c7             	mov    rdi,rax
ffff80000080ae0e:	ff d1                	call   rcx
ffff80000080ae10:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59
        
            if(path == NULL)
ffff80000080ae14:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080ae19:	75 39                	jne    ffff80000080ae54 <path_walk+0x24b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
            {
                printf("can not find file or dir:%s\n",name);
ffff80000080ae1b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ae1f:	48 89 c6             	mov    rsi,rax
ffff80000080ae22:	48 b8 88 d7 ff ff ff 	movabs rax,0xffffffffffffd788
ffff80000080ae29:	ff ff ff 
ffff80000080ae2c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ae30:	48 89 c7             	mov    rdi,rax
ffff80000080ae33:	49 89 df             	mov    r15,rbx
ffff80000080ae36:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ae3b:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080ae42:	ff ff ff 
ffff80000080ae45:	48 01 da             	add    rdx,rbx
ffff80000080ae48:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:64
                // kmfree(path->name);
                // kmfree(path);
                return NULL;
ffff80000080ae4a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ae4f:	e9 2e 01 00 00       	jmp    ffff80000080af82 <path_walk+0x379>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:68
            }
//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
            path->parent = parent;
ffff80000080ae54:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ae58:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ae5c:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:71
            //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
            //不过这里已经是缓存中没有找到dentry的情况了，一般不会出现data一样。
            list_add(&parent->subdirs_list,&path->child_node);
ffff80000080ae60:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ae64:	48 83 c0 10          	add    rax,0x10
ffff80000080ae68:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ae6c:	48 83 c2 28          	add    rdx,0x28
ffff80000080ae70:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffff80000080ae74:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    struct List* p=entry;
ffff80000080ae78:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ae7c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080ae80:	eb 21                	jmp    ffff80000080aea3 <path_walk+0x29a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        if(p->data==new->data)
ffff80000080ae82:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ae86:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080ae8a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ae8e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080ae92:	48 39 c2             	cmp    rdx,rax
ffff80000080ae95:	74 7c                	je     ffff80000080af13 <path_walk+0x30a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080ae97:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ae9b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ae9f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff80000080aea3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080aea7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080aeab:	48 85 c0             	test   rax,rax
ffff80000080aeae:	74 0e                	je     ffff80000080aebe <path_walk+0x2b5>
ffff80000080aeb0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080aeb4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080aeb8:	48 39 45 b0          	cmp    QWORD PTR [rbp-0x50],rax
ffff80000080aebc:	75 c4                	jne    ffff80000080ae82 <path_walk+0x279>
ffff80000080aebe:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080aec2:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080aec6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080aeca:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->next = entry->next;
ffff80000080aece:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080aed2:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080aed6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080aeda:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    new->prev = entry;
ffff80000080aede:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080aee2:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080aee6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
    if(new->next)
ffff80000080aee9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080aeed:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080aef1:	48 85 c0             	test   rax,rax
ffff80000080aef4:	74 0f                	je     ffff80000080af05 <path_walk+0x2fc>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
        new->next->prev = new;
ffff80000080aef6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080aefa:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080aefe:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080af02:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
    entry->next = new;
ffff80000080af05:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080af09:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080af0d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:31
}
ffff80000080af11:	eb 01                	jmp    ffff80000080af14 <path_walk+0x30b>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
            return;
ffff80000080af13:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:78
        }
        
        


        if(!*name)
ffff80000080af14:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080af18:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080af1b:	84 c0                	test   al,al
ffff80000080af1d:	74 49                	je     ffff80000080af68 <path_walk+0x35f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:80
            goto last_component;
        while(*name == '/')
ffff80000080af1f:	eb 05                	jmp    ffff80000080af26 <path_walk+0x31d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:81
            name++;
ffff80000080af21:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:80
        while(*name == '/')
ffff80000080af26:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080af2a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080af2d:	3c 2f                	cmp    al,0x2f
ffff80000080af2f:	74 f0                	je     ffff80000080af21 <path_walk+0x318>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:82
        if(!*name)
ffff80000080af31:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080af35:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080af38:	84 c0                	test   al,al
ffff80000080af3a:	74 2f                	je     ffff80000080af6b <path_walk+0x362>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:84
            goto last_slash;
        if(path->mount_point)
ffff80000080af3c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080af40:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffff80000080af44:	48 85 c0             	test   rax,rax
ffff80000080af47:	74 12                	je     ffff80000080af5b <path_walk+0x352>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:87
        {
            //有挂载点，则进入挂载文件系统的文件树
            path=path->mount_point->sb->root;
ffff80000080af49:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080af4d:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffff80000080af51:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af54:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af57:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
        }
        parent = path;
ffff80000080af5b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080af5f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
    {
ffff80000080af63:	e9 21 fd ff ff       	jmp    ffff80000080ac89 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:79
            goto last_component;
ffff80000080af68:	90                   	nop
ffff80000080af69:	eb 01                	jmp    ffff80000080af6c <path_walk+0x363>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:83
            goto last_slash;
ffff80000080af6b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:95
    }

    last_slash:
    last_component:

    if(flags & 1)
ffff80000080af6c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080af70:	83 e0 01             	and    eax,0x1
ffff80000080af73:	48 85 c0             	test   rax,rax
ffff80000080af76:	74 06                	je     ffff80000080af7e <path_walk+0x375>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:97
    {
        return parent;
ffff80000080af78:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080af7c:	eb 04                	jmp    ffff80000080af82 <path_walk+0x379>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
    }

    return path;
ffff80000080af7e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:101
}
ffff80000080af82:	48 83 c4 60          	add    rsp,0x60
ffff80000080af86:	5b                   	pop    rbx
ffff80000080af87:	41 5f                	pop    r15
ffff80000080af89:	5d                   	pop    rbp
ffff80000080af8a:	c3                   	ret    

ffff80000080af8b <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:105


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
ffff80000080af8b:	f3 0f 1e fa          	endbr64 
ffff80000080af8f:	55                   	push   rbp
ffff80000080af90:	48 89 e5             	mov    rbp,rsp
ffff80000080af93:	41 57                	push   r15
ffff80000080af95:	48 83 ec 48          	sub    rsp,0x48
ffff80000080af99:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080af99 <fill_dentry+0xe>
ffff80000080afa0:	49 bb 97 2a 11 00 00 	movabs r11,0x112a97
ffff80000080afa7:	00 00 00 
ffff80000080afaa:	4c 01 d8             	add    rax,r11
ffff80000080afad:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080afb1:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080afb5:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080afb9:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff80000080afbd:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:106
    struct dirent* dent = (struct dirent*)buf;
ffff80000080afc1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080afc5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108

    if((unsigned long)buf < PAGE_4K_SIZE)
ffff80000080afc9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080afcd:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff80000080afd4:	77 07                	ja     ffff80000080afdd <fill_dentry+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:109
        return -EFAULT;
ffff80000080afd6:	b8 eb ff ff ff       	mov    eax,0xffffffeb
ffff80000080afdb:	eb 53                	jmp    ffff80000080b030 <fill_dentry+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:111

    memcpy(name,dent->d_name,namelen);
ffff80000080afdd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080afe1:	89 d7                	mov    edi,edx
ffff80000080afe3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080afe7:	48 8d 72 18          	lea    rsi,[rdx+0x18]
ffff80000080afeb:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080afef:	89 fa                	mov    edx,edi
ffff80000080aff1:	48 89 cf             	mov    rdi,rcx
ffff80000080aff4:	49 89 c7             	mov    r15,rax
ffff80000080aff7:	48 b9 7d 50 ef ff ff 	movabs rcx,0xffffffffffef507d
ffff80000080affe:	ff ff ff 
ffff80000080b001:	48 01 c1             	add    rcx,rax
ffff80000080b004:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112
    dent->d_namelen = namelen;
ffff80000080b006:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b00a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b00e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:113
    dent->d_type = type;
ffff80000080b012:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b016:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080b01a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114
    dent->d_offset = offset;
ffff80000080b01e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b022:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080b026:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115
    return sizeof(struct dirent) + namelen;
ffff80000080b029:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b02d:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116
}
ffff80000080b030:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080b034:	c9                   	leave  
ffff80000080b035:	c3                   	ret    

ffff80000080b036 <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:123
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000080b036:	f3 0f 1e fa          	endbr64 
ffff80000080b03a:	55                   	push   rbp
ffff80000080b03b:	48 89 e5             	mov    rbp,rsp
ffff80000080b03e:	41 57                	push   r15
ffff80000080b040:	53                   	push   rbx
ffff80000080b041:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b045:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b045 <mount_fs+0xf>
ffff80000080b04c:	49 bb eb 29 11 00 00 	movabs r11,0x1129eb
ffff80000080b053:	00 00 00 
ffff80000080b056:	4c 01 db             	add    rbx,r11
ffff80000080b059:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080b05d:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080b061:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:124
    struct file_system_type * p = NULL;
ffff80000080b065:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b06c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126

    for(p = &filesystem;p;p = p->next)
ffff80000080b06d:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b074:	ff ff ff 
ffff80000080b077:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b07b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080b07f:	eb 4d                	jmp    ffff80000080b0ce <mount_fs+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:127
        if(!strcmp(p->name,name))
ffff80000080b081:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b085:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b088:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b08c:	48 89 d6             	mov    rsi,rdx
ffff80000080b08f:	48 89 c7             	mov    rdi,rax
ffff80000080b092:	49 89 df             	mov    r15,rbx
ffff80000080b095:	48 b8 cf 53 ef ff ff 	movabs rax,0xffffffffffef53cf
ffff80000080b09c:	ff ff ff 
ffff80000080b09f:	48 01 d8             	add    rax,rbx
ffff80000080b0a2:	ff d0                	call   rax
ffff80000080b0a4:	85 c0                	test   eax,eax
ffff80000080b0a6:	75 1a                	jne    ffff80000080b0c2 <mount_fs+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129
        {
            return p->read_superblock(DPTE,buf);
ffff80000080b0a8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b0ac:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffff80000080b0b0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b0b4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b0b8:	48 89 d6             	mov    rsi,rdx
ffff80000080b0bb:	48 89 c7             	mov    rdi,rax
ffff80000080b0be:	ff d1                	call   rcx
ffff80000080b0c0:	eb 18                	jmp    ffff80000080b0da <mount_fs+0xa4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080b0c2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b0c6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b0ca:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126 (discriminator 1)
ffff80000080b0ce:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b0d3:	75 ac                	jne    ffff80000080b081 <mount_fs+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:131
        }
    return 0;
ffff80000080b0d5:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:132
}
ffff80000080b0da:	48 83 c4 30          	add    rsp,0x30
ffff80000080b0de:	5b                   	pop    rbx
ffff80000080b0df:	41 5f                	pop    r15
ffff80000080b0e1:	5d                   	pop    rbp
ffff80000080b0e2:	c3                   	ret    

ffff80000080b0e3 <mount_fs_on>:
mount_fs_on():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:133
int mount_fs_on(struct dir_entry *d_to_mount,struct super_block* fs){
ffff80000080b0e3:	f3 0f 1e fa          	endbr64 
ffff80000080b0e7:	55                   	push   rbp
ffff80000080b0e8:	48 89 e5             	mov    rbp,rsp
ffff80000080b0eb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b0eb <mount_fs_on+0x8>
ffff80000080b0f2:	49 bb 45 29 11 00 00 	movabs r11,0x112945
ffff80000080b0f9:	00 00 00 
ffff80000080b0fc:	4c 01 d8             	add    rax,r11
ffff80000080b0ff:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080b103:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:134
    for(int i=0;i<MAX_MOUNTPOINTS;i++){
ffff80000080b107:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080b10e:	e9 9d 00 00 00       	jmp    ffff80000080b1b0 <mount_fs_on+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:135
        if(!mp_mount_points[i].sb){
ffff80000080b113:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080b11a:	ff ff ff 
ffff80000080b11d:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080b121:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080b124:	48 63 d2             	movsxd rdx,edx
ffff80000080b127:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080b12b:	48 01 ca             	add    rdx,rcx
ffff80000080b12e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b131:	48 85 d2             	test   rdx,rdx
ffff80000080b134:	75 76                	jne    ffff80000080b1ac <mount_fs_on+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:136
            mp_mount_points[i].sb=fs;
ffff80000080b136:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080b13d:	ff ff ff 
ffff80000080b140:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080b144:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080b147:	48 63 d2             	movsxd rdx,edx
ffff80000080b14a:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080b14e:	48 01 d1             	add    rcx,rdx
ffff80000080b151:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080b155:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
            mp_mount_points[i].dmount_point=d_to_mount;
ffff80000080b158:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080b15f:	ff ff ff 
ffff80000080b162:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080b166:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080b169:	48 63 d2             	movsxd rdx,edx
ffff80000080b16c:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080b170:	48 01 ca             	add    rdx,rcx
ffff80000080b173:	48 8d 4a 08          	lea    rcx,[rdx+0x8]
ffff80000080b177:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b17b:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
            d_to_mount->mount_point=mp_mount_points+i;
ffff80000080b17e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080b181:	48 63 d2             	movsxd rdx,edx
ffff80000080b184:	48 89 d1             	mov    rcx,rdx
ffff80000080b187:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080b18b:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080b192:	ff ff ff 
ffff80000080b195:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b199:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080b19d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b1a1:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:139
            return 1;
ffff80000080b1a5:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080b1aa:	eb 13                	jmp    ffff80000080b1bf <mount_fs_on+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:134 (discriminator 2)
    for(int i=0;i<MAX_MOUNTPOINTS;i++){
ffff80000080b1ac:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:134 (discriminator 1)
ffff80000080b1b0:	83 7d fc 17          	cmp    DWORD PTR [rbp-0x4],0x17
ffff80000080b1b4:	0f 8e 59 ff ff ff    	jle    ffff80000080b113 <mount_fs_on+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
        }
    }
    return -ENOMEM;
ffff80000080b1ba:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
}
ffff80000080b1bf:	5d                   	pop    rbp
ffff80000080b1c0:	c3                   	ret    

ffff80000080b1c1 <umount_fs>:
umount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
int umount_fs(struct dir_entry* d_mp){
ffff80000080b1c1:	f3 0f 1e fa          	endbr64 
ffff80000080b1c5:	55                   	push   rbp
ffff80000080b1c6:	48 89 e5             	mov    rbp,rsp
ffff80000080b1c9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b1c9 <umount_fs+0x8>
ffff80000080b1d0:	49 bb 67 28 11 00 00 	movabs r11,0x112867
ffff80000080b1d7:	00 00 00 
ffff80000080b1da:	4c 01 d8             	add    rax,r11
ffff80000080b1dd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:145
    if(d_mp->mount_point){
ffff80000080b1e1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b1e5:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffff80000080b1e9:	48 85 c0             	test   rax,rax
ffff80000080b1ec:	74 26                	je     ffff80000080b214 <umount_fs+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:146
        d_mp->mount_point->dmount_point=0;
ffff80000080b1ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b1f2:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffff80000080b1f6:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080b1fd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:147
        d_mp->mount_point->sb=0;
ffff80000080b1fe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b202:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffff80000080b206:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:148
        return 1;
ffff80000080b20d:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080b212:	eb 05                	jmp    ffff80000080b219 <umount_fs+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:150
    }
    return -ENOENT;
ffff80000080b214:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:151
}
ffff80000080b219:	5d                   	pop    rbp
ffff80000080b21a:	c3                   	ret    

ffff80000080b21b <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:153
unsigned long register_filesystem(struct file_system_type * fs)
{
ffff80000080b21b:	f3 0f 1e fa          	endbr64 
ffff80000080b21f:	55                   	push   rbp
ffff80000080b220:	48 89 e5             	mov    rbp,rsp
ffff80000080b223:	41 57                	push   r15
ffff80000080b225:	53                   	push   rbx
ffff80000080b226:	48 83 ec 20          	sub    rsp,0x20
ffff80000080b22a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b22a <register_filesystem+0xf>
ffff80000080b231:	49 bb 06 28 11 00 00 	movabs r11,0x112806
ffff80000080b238:	00 00 00 
ffff80000080b23b:	4c 01 db             	add    rbx,r11
ffff80000080b23e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:154
    struct file_system_type * p = NULL;
ffff80000080b242:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b249:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:156

    for(p = &filesystem;p;p = p->next)
ffff80000080b24a:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b251:	ff ff ff 
ffff80000080b254:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b258:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080b25c:	eb 3d                	jmp    ffff80000080b29b <register_filesystem+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:157
        if(!strcmp(fs->name,p->name))
ffff80000080b25e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b262:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b265:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b269:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b26c:	48 89 d6             	mov    rsi,rdx
ffff80000080b26f:	48 89 c7             	mov    rdi,rax
ffff80000080b272:	49 89 df             	mov    r15,rbx
ffff80000080b275:	48 b8 cf 53 ef ff ff 	movabs rax,0xffffffffffef53cf
ffff80000080b27c:	ff ff ff 
ffff80000080b27f:	48 01 d8             	add    rax,rbx
ffff80000080b282:	ff d0                	call   rax
ffff80000080b284:	85 c0                	test   eax,eax
ffff80000080b286:	75 07                	jne    ffff80000080b28f <register_filesystem+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:158
            return 0;
ffff80000080b288:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b28d:	eb 48                	jmp    ffff80000080b2d7 <register_filesystem+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:156 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080b28f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b293:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b297:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:156 (discriminator 1)
ffff80000080b29b:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b2a0:	75 bc                	jne    ffff80000080b25e <register_filesystem+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160

    fs->next = filesystem.next;
ffff80000080b2a2:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b2a9:	ff ff ff 
ffff80000080b2ac:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b2b0:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080b2b4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b2b8:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:161
    filesystem.next = fs;
ffff80000080b2bc:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b2c3:	ff ff ff 
ffff80000080b2c6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b2ca:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b2ce:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163

    return 1;
ffff80000080b2d2:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:164
}
ffff80000080b2d7:	48 83 c4 20          	add    rsp,0x20
ffff80000080b2db:	5b                   	pop    rbx
ffff80000080b2dc:	41 5f                	pop    r15
ffff80000080b2de:	5d                   	pop    rbp
ffff80000080b2df:	c3                   	ret    

ffff80000080b2e0 <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167

unsigned long unregister_filesystem(struct file_system_type * fs)
{
ffff80000080b2e0:	f3 0f 1e fa          	endbr64 
ffff80000080b2e4:	55                   	push   rbp
ffff80000080b2e5:	48 89 e5             	mov    rbp,rsp
ffff80000080b2e8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b2e8 <unregister_filesystem+0x8>
ffff80000080b2ef:	49 bb 48 27 11 00 00 	movabs r11,0x112748
ffff80000080b2f6:	00 00 00 
ffff80000080b2f9:	4c 01 d8             	add    rax,r11
ffff80000080b2fc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    struct file_system_type * p = &filesystem;
ffff80000080b300:	48 ba 50 ff ff ff ff 	movabs rdx,0xffffffffffffff50
ffff80000080b307:	ff ff ff 
ffff80000080b30a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b30e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170

    while(p->next)
ffff80000080b312:	eb 41                	jmp    ffff80000080b355 <unregister_filesystem+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:171
        if(p->next == fs)
ffff80000080b314:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b318:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b31c:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080b320:	75 27                	jne    ffff80000080b349 <unregister_filesystem+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:173
        {
            p->next = p->next->next;
ffff80000080b322:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b326:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b32a:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080b32e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b332:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:174
            fs->next = NULL;
ffff80000080b336:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b33a:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080b341:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:175
            return 1;
ffff80000080b342:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080b347:	eb 1e                	jmp    ffff80000080b367 <unregister_filesystem+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:178
        }
        else
            p = p->next;
ffff80000080b349:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b34d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b351:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170
    while(p->next)
ffff80000080b355:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b359:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b35d:	48 85 c0             	test   rax,rax
ffff80000080b360:	75 b2                	jne    ffff80000080b314 <unregister_filesystem+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:179
    return 0;
ffff80000080b362:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180
}
ffff80000080b367:	5d                   	pop    rbp
ffff80000080b368:	c3                   	ret    

ffff80000080b369 <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:182
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080b369:	f3 0f 1e fa          	endbr64 
ffff80000080b36d:	55                   	push   rbp
ffff80000080b36e:	48 89 e5             	mov    rbp,rsp
ffff80000080b371:	41 57                	push   r15
ffff80000080b373:	53                   	push   rbx
ffff80000080b374:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b378:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b378 <root_lookup+0xf>
ffff80000080b37f:	49 bb b8 26 11 00 00 	movabs r11,0x1126b8
ffff80000080b386:	00 00 00 
ffff80000080b389:	4c 01 db             	add    rbx,r11
ffff80000080b38c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080b390:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:183
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
ffff80000080b394:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b398:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080b39c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:184
    struct List* p= tmp->subdirs_list.next;
ffff80000080b3a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b3a4:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080b3a8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:185
    while (p){
ffff80000080b3ac:	eb 61                	jmp    ffff80000080b40f <root_lookup+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:186
        struct dir_entry* dp=p->data;
ffff80000080b3ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b3b2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b3b6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:187
        if(strcmp(dp->name,dest_dentry->name)==0){
ffff80000080b3ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b3be:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b3c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b3c5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b3c8:	48 89 d6             	mov    rsi,rdx
ffff80000080b3cb:	48 89 c7             	mov    rdi,rax
ffff80000080b3ce:	49 89 df             	mov    r15,rbx
ffff80000080b3d1:	48 b8 cf 53 ef ff ff 	movabs rax,0xffffffffffef53cf
ffff80000080b3d8:	ff ff ff 
ffff80000080b3db:	48 01 d8             	add    rax,rbx
ffff80000080b3de:	ff d0                	call   rax
ffff80000080b3e0:	85 c0                	test   eax,eax
ffff80000080b3e2:	75 1f                	jne    ffff80000080b403 <root_lookup+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:188
            kmfree(dest_dentry);
ffff80000080b3e4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b3e8:	48 89 c7             	mov    rdi,rax
ffff80000080b3eb:	49 89 df             	mov    r15,rbx
ffff80000080b3ee:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080b3f5:	ff ff ff 
ffff80000080b3f8:	48 01 d8             	add    rax,rbx
ffff80000080b3fb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:189
            return dp;
ffff80000080b3fd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b401:	eb 31                	jmp    ffff80000080b434 <root_lookup+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:191
        }
        p=p->next;
ffff80000080b403:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b407:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b40b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:185
    while (p){
ffff80000080b40f:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b414:	75 98                	jne    ffff80000080b3ae <root_lookup+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:193
    }
    kmfree(dest_dentry);
ffff80000080b416:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b41a:	48 89 c7             	mov    rdi,rax
ffff80000080b41d:	49 89 df             	mov    r15,rbx
ffff80000080b420:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080b427:	ff ff ff 
ffff80000080b42a:	48 01 d8             	add    rax,rbx
ffff80000080b42d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:194
    return NULL;
ffff80000080b42f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:195
}
ffff80000080b434:	48 83 c4 30          	add    rsp,0x30
ffff80000080b438:	5b                   	pop    rbx
ffff80000080b439:	41 5f                	pop    r15
ffff80000080b43b:	5d                   	pop    rbp
ffff80000080b43c:	c3                   	ret    

ffff80000080b43d <init_rootfs>:
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:199
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void init_rootfs(){
ffff80000080b43d:	f3 0f 1e fa          	endbr64 
ffff80000080b441:	55                   	push   rbp
ffff80000080b442:	48 89 e5             	mov    rbp,rsp
ffff80000080b445:	41 57                	push   r15
ffff80000080b447:	53                   	push   rbx
ffff80000080b448:	48 83 ec 20          	sub    rsp,0x20
ffff80000080b44c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b44c <init_rootfs+0xf>
ffff80000080b453:	49 bb e4 25 11 00 00 	movabs r11,0x1125e4
ffff80000080b45a:	00 00 00 
ffff80000080b45d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:200
    root_sb=(struct super_block*) kmalloc();
ffff80000080b460:	49 89 df             	mov    r15,rbx
ffff80000080b463:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b468:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080b46f:	ff ff ff 
ffff80000080b472:	48 01 da             	add    rdx,rbx
ffff80000080b475:	ff d2                	call   rdx
ffff80000080b477:	48 89 c2             	mov    rdx,rax
ffff80000080b47a:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b481:	ff ff ff 
ffff80000080b484:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b488:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:201
    root_sb->root=root_sb+1;//紧凑跟在后面
ffff80000080b48b:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b492:	ff ff ff 
ffff80000080b495:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b499:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b49c:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b4a3:	ff ff ff 
ffff80000080b4a6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b4aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b4ad:	48 83 c2 28          	add    rdx,0x28
ffff80000080b4b1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:202
    root_sb->sb_ops=NULL;
ffff80000080b4b4:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b4bb:	ff ff ff 
ffff80000080b4be:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b4c2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b4c5:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080b4cc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:204
    
    struct index_node* ir=root_sb->root+1;
ffff80000080b4cd:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b4d4:	ff ff ff 
ffff80000080b4d7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b4db:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b4de:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b4e1:	48 83 c0 60          	add    rax,0x60
ffff80000080b4e5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:205
    root_sb->root->dir_inode=ir;
ffff80000080b4e9:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b4f0:	ff ff ff 
ffff80000080b4f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b4f7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b4fa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b4fd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b501:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:206
    ir->sb=root_sb;
ffff80000080b505:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b50c:	ff ff ff 
ffff80000080b50f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b513:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b516:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b51a:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:207
    ir->attribute=FS_ATTR_DIR;
ffff80000080b51e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b522:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff80000080b529:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:208
    ir->file_size=0;
ffff80000080b52a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b52e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:209
    ir->inode_ops=&root_iops;//lookup函数是必要的
ffff80000080b535:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b539:	48 ba 48 fd ff ff ff 	movabs rdx,0xfffffffffffffd48
ffff80000080b540:	ff ff ff 
ffff80000080b543:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b547:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:210
    ir->f_ops=NULL;
ffff80000080b54b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b54f:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff80000080b556:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:211
    ir->private_index_info=root_sb->root;
ffff80000080b557:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b55e:	ff ff ff 
ffff80000080b561:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b565:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b568:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b56b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b56f:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:213

    root_sb->root->name=ir+1;//紧凑跟在后面
ffff80000080b573:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b57a:	ff ff ff 
ffff80000080b57d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b581:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b584:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b587:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b58b:	48 83 c2 40          	add    rdx,0x40
ffff80000080b58f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:214
    strcpy(root_sb->root->name,"/");
ffff80000080b592:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b599:	ff ff ff 
ffff80000080b59c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5a3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5a6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5a9:	48 ba b0 d7 ff ff ff 	movabs rdx,0xffffffffffffd7b0
ffff80000080b5b0:	ff ff ff 
ffff80000080b5b3:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080b5b7:	48 89 d6             	mov    rsi,rdx
ffff80000080b5ba:	48 89 c7             	mov    rdi,rax
ffff80000080b5bd:	49 89 df             	mov    r15,rbx
ffff80000080b5c0:	48 b8 81 51 ef ff ff 	movabs rax,0xffffffffffef5181
ffff80000080b5c7:	ff ff ff 
ffff80000080b5ca:	48 01 d8             	add    rax,rbx
ffff80000080b5cd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:215
    root_sb->root->name_length=1;
ffff80000080b5cf:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b5d6:	ff ff ff 
ffff80000080b5d9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5dd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5e0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5e3:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:216
    root_sb->root->parent=root_sb->root;
ffff80000080b5ea:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b5f1:	ff ff ff 
ffff80000080b5f4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5f8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b5fb:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b602:	ff ff ff 
ffff80000080b605:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b609:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b60c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b60f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b612:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:217
    list_init(&root_sb->root->subdirs_list);
ffff80000080b616:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b61d:	ff ff ff 
ffff80000080b620:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b624:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b627:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b62a:	48 83 c0 28          	add    rax,0x28
ffff80000080b62e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080b632:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b636:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080b63d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b641:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080b648:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080b649:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:218
    list_init(&root_sb->root->child_node);
ffff80000080b64a:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b651:	ff ff ff 
ffff80000080b654:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b658:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b65b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b65e:	48 83 c0 10          	add    rax,0x10
ffff80000080b662:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080b666:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b66a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080b671:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b675:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080b67c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080b67d:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:219
    root_sb->root->child_node.data=root_sb->root;
ffff80000080b67e:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b685:	ff ff ff 
ffff80000080b688:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b68c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b68f:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b696:	ff ff ff 
ffff80000080b699:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b69d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6a3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b6a6:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:221

    root_sb->dev=dev_ramdisk<<8;
ffff80000080b6aa:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff80000080b6b1:	ff ff ff 
ffff80000080b6b4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b6b8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b6ba:	89 c2                	mov    edx,eax
ffff80000080b6bc:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b6c3:	ff ff ff 
ffff80000080b6c6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b6ca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6cd:	c1 e2 08             	shl    edx,0x8
ffff80000080b6d0:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:222
    root_sb->p_dev=&bd_ramdisk;
ffff80000080b6d4:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b6db:	ff ff ff 
ffff80000080b6de:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b6e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6e5:	48 ba a8 ff ff ff ff 	movabs rdx,0xffffffffffffffa8
ffff80000080b6ec:	ff ff ff 
ffff80000080b6ef:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b6f3:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:223
}
ffff80000080b6f7:	90                   	nop
ffff80000080b6f8:	48 83 c4 20          	add    rsp,0x20
ffff80000080b6fc:	5b                   	pop    rbx
ffff80000080b6fd:	41 5f                	pop    r15
ffff80000080b6ff:	5d                   	pop    rbp
ffff80000080b700:	c3                   	ret    

ffff80000080b701 <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:21
#include "int.h"
#include <sys/mman.h>


unsigned long sys_putstring(char *string)
{
ffff80000080b701:	f3 0f 1e fa          	endbr64 
ffff80000080b705:	55                   	push   rbp
ffff80000080b706:	48 89 e5             	mov    rbp,rsp
ffff80000080b709:	41 57                	push   r15
ffff80000080b70b:	48 83 ec 18          	sub    rsp,0x18
ffff80000080b70f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080b70f <sys_putstring+0xe>
ffff80000080b716:	49 bb 21 23 11 00 00 	movabs r11,0x112321
ffff80000080b71d:	00 00 00 
ffff80000080b720:	4c 01 da             	add    rdx,r11
ffff80000080b723:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
    printf(string);
ffff80000080b727:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b72b:	48 89 c7             	mov    rdi,rax
ffff80000080b72e:	49 89 d7             	mov    r15,rdx
ffff80000080b731:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b736:	48 b9 c3 3c ee ff ff 	movabs rcx,0xffffffffffee3cc3
ffff80000080b73d:	ff ff ff 
ffff80000080b740:	48 01 d1             	add    rcx,rdx
ffff80000080b743:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
    return 0;
ffff80000080b745:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:24
}
ffff80000080b74a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080b74e:	c9                   	leave  
ffff80000080b74f:	c3                   	ret    

ffff80000080b750 <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:27

unsigned long sys_open(char *filename,int flags)
{
ffff80000080b750:	f3 0f 1e fa          	endbr64 
ffff80000080b754:	55                   	push   rbp
ffff80000080b755:	48 89 e5             	mov    rbp,rsp
ffff80000080b758:	41 57                	push   r15
ffff80000080b75a:	53                   	push   rbx
ffff80000080b75b:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff80000080b762:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b762 <sys_open+0x12>
ffff80000080b769:	49 bb ce 22 11 00 00 	movabs r11,0x1122ce
ffff80000080b770:	00 00 00 
ffff80000080b773:	4c 01 db             	add    rbx,r11
ffff80000080b776:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
ffff80000080b77d:	89 b5 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28
    char * path = NULL;
ffff80000080b783:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080b78a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    long pathlen = 0;
ffff80000080b78b:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080b792:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    long error = 0;
ffff80000080b793:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b79a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    struct dir_entry * dentry = NULL;
ffff80000080b79b:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080b7a2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct file * filp = NULL;
ffff80000080b7a3:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080b7aa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    struct file ** f = NULL;
ffff80000080b7ab:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080b7b2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:34
    int fd = -1;
ffff80000080b7b3:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:38
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc();
ffff80000080b7ba:	49 89 df             	mov    r15,rbx
ffff80000080b7bd:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b7c2:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080b7c9:	ff ff ff 
ffff80000080b7cc:	48 01 da             	add    rdx,rbx
ffff80000080b7cf:	ff d2                	call   rdx
ffff80000080b7d1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
    if(path == NULL)
ffff80000080b7d5:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080b7da:	75 0c                	jne    ffff80000080b7e8 <sys_open+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
        return -ENOMEM;
ffff80000080b7dc:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080b7e3:	e9 86 05 00 00       	jmp    ffff80000080bd6e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
    memset(path,0,PAGE_4K_SIZE);
ffff80000080b7e8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b7ec:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080b7f1:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b7f6:	48 89 c7             	mov    rdi,rax
ffff80000080b7f9:	49 89 df             	mov    r15,rbx
ffff80000080b7fc:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff80000080b803:	ff ff ff 
ffff80000080b806:	48 01 d8             	add    rax,rbx
ffff80000080b809:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    pathlen = strlen(filename);
ffff80000080b80b:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080b812:	48 89 c7             	mov    rdi,rax
ffff80000080b815:	49 89 df             	mov    r15,rbx
ffff80000080b818:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff80000080b81f:	ff ff ff 
ffff80000080b822:	48 01 d8             	add    rax,rbx
ffff80000080b825:	ff d0                	call   rax
ffff80000080b827:	48 98                	cdqe   
ffff80000080b829:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:43
    if(pathlen <= 0)
ffff80000080b82d:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080b832:	7f 25                	jg     ffff80000080b859 <sys_open+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:45
    {
        kmfree(path);
ffff80000080b834:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b838:	48 89 c7             	mov    rdi,rax
ffff80000080b83b:	49 89 df             	mov    r15,rbx
ffff80000080b83e:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080b845:	ff ff ff 
ffff80000080b848:	48 01 d8             	add    rax,rbx
ffff80000080b84b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:46
        return -EFAULT;
ffff80000080b84d:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080b854:	e9 15 05 00 00       	jmp    ffff80000080bd6e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:48
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080b859:	48 81 7d c0 ff 0f 00 	cmp    QWORD PTR [rbp-0x40],0xfff
ffff80000080b860:	00 
ffff80000080b861:	7e 25                	jle    ffff80000080b888 <sys_open+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:50
    {
        kmfree(path);
ffff80000080b863:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b867:	48 89 c7             	mov    rdi,rax
ffff80000080b86a:	49 89 df             	mov    r15,rbx
ffff80000080b86d:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080b874:	ff ff ff 
ffff80000080b877:	48 01 d8             	add    rax,rbx
ffff80000080b87a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:51
        return -ENAMETOOLONG;
ffff80000080b87c:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080b883:	e9 e6 04 00 00       	jmp    ffff80000080bd6e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:53
    }
    strcpy(path,filename);
ffff80000080b888:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff80000080b88f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b893:	48 89 d6             	mov    rsi,rdx
ffff80000080b896:	48 89 c7             	mov    rdi,rax
ffff80000080b899:	49 89 df             	mov    r15,rbx
ffff80000080b89c:	48 b8 81 51 ef ff ff 	movabs rax,0xffffffffffef5181
ffff80000080b8a3:	ff ff ff 
ffff80000080b8a6:	48 01 d8             	add    rax,rbx
ffff80000080b8a9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:55

    dentry = path_walk(path,0);
ffff80000080b8ab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b8af:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b8b4:	48 89 c7             	mov    rdi,rax
ffff80000080b8b7:	49 89 df             	mov    r15,rbx
ffff80000080b8ba:	48 b8 d9 d1 ee ff ff 	movabs rax,0xffffffffffeed1d9
ffff80000080b8c1:	ff ff ff 
ffff80000080b8c4:	48 01 d8             	add    rax,rbx
ffff80000080b8c7:	ff d0                	call   rax
ffff80000080b8c9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:57

    if(dentry == NULL){
ffff80000080b8cd:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080b8d2:	0f 85 32 02 00 00    	jne    ffff80000080bb0a <sys_open+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //找到上一级目录
        char* p=path+strlen(path)-1;
ffff80000080b8d8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b8dc:	48 89 c7             	mov    rdi,rax
ffff80000080b8df:	49 89 df             	mov    r15,rbx
ffff80000080b8e2:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff80000080b8e9:	ff ff ff 
ffff80000080b8ec:	48 01 d8             	add    rax,rbx
ffff80000080b8ef:	ff d0                	call   rax
ffff80000080b8f1:	48 98                	cdqe   
ffff80000080b8f3:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080b8f7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b8fb:	48 01 d0             	add    rax,rdx
ffff80000080b8fe:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63
        for(;*p!='/'&&p>path;p--);
ffff80000080b902:	eb 05                	jmp    ffff80000080b909 <sys_open+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 3)
ffff80000080b904:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 1)
ffff80000080b909:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b90d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b910:	3c 2f                	cmp    al,0x2f
ffff80000080b912:	74 0a                	je     ffff80000080b91e <sys_open+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 2)
ffff80000080b914:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b918:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080b91c:	77 e6                	ja     ffff80000080b904 <sys_open+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        *p='\0';
ffff80000080b91e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b922:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
ffff80000080b925:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b929:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080b92e:	48 89 c7             	mov    rdi,rax
ffff80000080b931:	49 89 df             	mov    r15,rbx
ffff80000080b934:	48 b8 d9 d1 ee ff ff 	movabs rax,0xffffffffffeed1d9
ffff80000080b93b:	ff ff ff 
ffff80000080b93e:	48 01 d8             	add    rax,rbx
ffff80000080b941:	ff d0                	call   rax
ffff80000080b943:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
        if(parent==NULL)
ffff80000080b947:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080b94c:	75 0c                	jne    ffff80000080b95a <sys_open+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:67
            return -ENOENT;//上级目录也不在
ffff80000080b94e:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080b955:	e9 14 04 00 00       	jmp    ffff80000080bd6e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:69
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc();
ffff80000080b95a:	49 89 df             	mov    r15,rbx
ffff80000080b95d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b962:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080b969:	ff ff ff 
ffff80000080b96c:	48 01 da             	add    rdx,rbx
ffff80000080b96f:	ff d2                	call   rdx
ffff80000080b971:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:70
        list_init(&dentry->subdirs_list);
ffff80000080b975:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b979:	48 83 c0 28          	add    rax,0x28
ffff80000080b97d:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080b984:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080b98b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080b992:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080b999:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080b9a0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080b9a1:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        list_init(&dentry->child_node);
ffff80000080b9a2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b9a6:	48 83 c0 10          	add    rax,0x10
ffff80000080b9aa:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080b9b1:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080b9b8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080b9bf:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080b9c6:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080b9cd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080b9ce:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        dentry->child_node.data=dentry;
ffff80000080b9cf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b9d3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080b9d7:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        list_add(&parent->subdirs_list,&dentry->child_node);
ffff80000080b9db:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b9df:	48 83 c0 10          	add    rax,0x10
ffff80000080b9e3:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080b9e7:	48 83 c2 28          	add    rdx,0x28
ffff80000080b9eb:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffff80000080b9ef:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    struct List* p=entry;
ffff80000080b9f3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b9f7:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080b9fb:	eb 21                	jmp    ffff80000080ba1e <sys_open+0x2ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        if(p->data==new->data)
ffff80000080b9fd:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ba01:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080ba05:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ba09:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080ba0d:	48 39 c2             	cmp    rdx,rax
ffff80000080ba10:	74 7c                	je     ffff80000080ba8e <sys_open+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080ba12:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ba16:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ba1a:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080ba1e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ba22:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ba26:	48 85 c0             	test   rax,rax
ffff80000080ba29:	74 0e                	je     ffff80000080ba39 <sys_open+0x2e9>
ffff80000080ba2b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ba2f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ba33:	48 39 45 90          	cmp    QWORD PTR [rbp-0x70],rax
ffff80000080ba37:	75 c4                	jne    ffff80000080b9fd <sys_open+0x2ad>
ffff80000080ba39:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ba3d:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080ba41:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ba45:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->next = entry->next;
ffff80000080ba49:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ba4d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080ba51:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ba55:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    new->prev = entry;
ffff80000080ba59:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ba5d:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080ba61:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
    if(new->next)
ffff80000080ba64:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ba68:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ba6c:	48 85 c0             	test   rax,rax
ffff80000080ba6f:	74 0f                	je     ffff80000080ba80 <sys_open+0x330>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
        new->next->prev = new;
ffff80000080ba71:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ba75:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ba79:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080ba7d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
    entry->next = new;
ffff80000080ba80:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ba84:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080ba88:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:31
}
ffff80000080ba8c:	eb 01                	jmp    ffff80000080ba8f <sys_open+0x33f>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
            return;
ffff80000080ba8e:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        dentry->parent=parent;
ffff80000080ba8f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ba93:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080ba97:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        dentry->dir_inode=dentry+1;//放在后面
ffff80000080ba9b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ba9f:	48 8d 50 60          	lea    rdx,[rax+0x60]
ffff80000080baa3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080baa7:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:76
        dentry->dir_inode->file_size=0;
ffff80000080baab:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080baaf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bab3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:78
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
ffff80000080baba:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080babe:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080bac2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bac6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080baca:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080bace:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:79
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
ffff80000080bad2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080bad6:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080bada:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bade:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bae2:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080bae6:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:80
        dentry->dir_ops=parent->dir_ops;
ffff80000080baea:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080baee:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff80000080baf2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080baf6:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:82
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
ffff80000080bafa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bafe:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bb02:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080bb09:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:84
    }
    kmfree(path);
ffff80000080bb0a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bb0e:	48 89 c7             	mov    rdi,rax
ffff80000080bb11:	49 89 df             	mov    r15,rbx
ffff80000080bb14:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080bb1b:	ff ff ff 
ffff80000080bb1e:	48 01 d8             	add    rax,rbx
ffff80000080bb21:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
ffff80000080bb23:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080bb29:	25 00 40 00 00       	and    eax,0x4000
ffff80000080bb2e:	85 c0                	test   eax,eax
ffff80000080bb30:	74 1e                	je     ffff80000080bb50 <sys_open+0x400>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86 (discriminator 1)
ffff80000080bb32:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb36:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bb3a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bb3e:	48 83 f8 02          	cmp    rax,0x2
ffff80000080bb42:	74 0c                	je     ffff80000080bb50 <sys_open+0x400>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87
        return -ENOTDIR;
ffff80000080bb44:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080bb4b:	e9 1e 02 00 00       	jmp    ffff80000080bd6e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
ffff80000080bb50:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080bb56:	25 00 40 00 00       	and    eax,0x4000
ffff80000080bb5b:	85 c0                	test   eax,eax
ffff80000080bb5d:	75 1e                	jne    ffff80000080bb7d <sys_open+0x42d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88 (discriminator 1)
ffff80000080bb5f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb63:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bb67:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bb6b:	48 83 f8 02          	cmp    rax,0x2
ffff80000080bb6f:	75 0c                	jne    ffff80000080bb7d <sys_open+0x42d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:89
        return -EISDIR;
ffff80000080bb71:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
ffff80000080bb78:	e9 f1 01 00 00       	jmp    ffff80000080bd6e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91

    filp = (struct file *) kmalloc();
ffff80000080bb7d:	49 89 df             	mov    r15,rbx
ffff80000080bb80:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080bb85:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080bb8c:	ff ff ff 
ffff80000080bb8f:	48 01 da             	add    rdx,rbx
ffff80000080bb92:	ff d2                	call   rdx
ffff80000080bb94:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:92
    memset(filp,0,sizeof(struct file));
ffff80000080bb98:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bb9c:	ba 28 00 00 00       	mov    edx,0x28
ffff80000080bba1:	be 00 00 00 00       	mov    esi,0x0
ffff80000080bba6:	48 89 c7             	mov    rdi,rax
ffff80000080bba9:	49 89 df             	mov    r15,rbx
ffff80000080bbac:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff80000080bbb3:	ff ff ff 
ffff80000080bbb6:	48 01 d8             	add    rax,rbx
ffff80000080bbb9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:93
    filp->dentry = dentry;
ffff80000080bbbb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bbbf:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080bbc3:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:94
    filp->mode = flags;
ffff80000080bbc7:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080bbcd:	48 63 d0             	movsxd rdx,eax
ffff80000080bbd0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bbd4:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:96

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
ffff80000080bbd8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bbdc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bbe0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bbe4:	83 e0 04             	and    eax,0x4
ffff80000080bbe7:	48 85 c0             	test   rax,rax
ffff80000080bbea:	74 18                	je     ffff80000080bc04 <sys_open+0x4b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:98
        extern struct file_operations devfs_fops;
        filp->f_ops = &devfs_fops;	//////	find device file operation function
ffff80000080bbec:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bbf0:	48 ba e8 fd ff ff ff 	movabs rdx,0xfffffffffffffde8
ffff80000080bbf7:	ff ff ff 
ffff80000080bbfa:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080bbfe:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffff80000080bc02:	eb 14                	jmp    ffff80000080bc18 <sys_open+0x4c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
ffff80000080bc04:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc08:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bc0c:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080bc10:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bc14:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102
    if(filp->f_ops && filp->f_ops->open)
ffff80000080bc18:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bc1c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bc20:	48 85 c0             	test   rax,rax
ffff80000080bc23:	74 33                	je     ffff80000080bc58 <sys_open+0x508>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102 (discriminator 1)
ffff80000080bc25:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bc29:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bc2d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bc30:	48 85 c0             	test   rax,rax
ffff80000080bc33:	74 23                	je     ffff80000080bc58 <sys_open+0x508>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:103
        error = filp->f_ops->open(dentry->dir_inode,filp);
ffff80000080bc35:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bc39:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bc3d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080bc40:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc44:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bc48:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080bc4c:	48 89 d6             	mov    rsi,rdx
ffff80000080bc4f:	48 89 c7             	mov    rdi,rax
ffff80000080bc52:	ff d1                	call   rcx
ffff80000080bc54:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:104
    if(error != 1)
ffff80000080bc58:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080bc5d:	74 25                	je     ffff80000080bc84 <sys_open+0x534>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
    {
        kmfree(filp);
ffff80000080bc5f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bc63:	48 89 c7             	mov    rdi,rax
ffff80000080bc66:	49 89 df             	mov    r15,rbx
ffff80000080bc69:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080bc70:	ff ff ff 
ffff80000080bc73:	48 01 d8             	add    rax,rbx
ffff80000080bc76:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:107
        return -EFAULT;
ffff80000080bc78:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080bc7f:	e9 ea 00 00 00       	jmp    ffff80000080bd6e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:110
    }

    if(filp->mode & O_TRUNC)
ffff80000080bc84:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bc88:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bc8c:	25 00 02 00 00       	and    eax,0x200
ffff80000080bc91:	48 85 c0             	test   rax,rax
ffff80000080bc94:	74 13                	je     ffff80000080bca9 <sys_open+0x559>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:112
    {
        filp->dentry->dir_inode->file_size = 0;
ffff80000080bc96:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bc9a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bc9e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bca2:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:114
    }
    if(filp->mode & O_APPEND)
ffff80000080bca9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bcad:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bcb1:	25 00 04 00 00       	and    eax,0x400
ffff80000080bcb6:	48 85 c0             	test   rax,rax
ffff80000080bcb9:	74 19                	je     ffff80000080bcd4 <sys_open+0x584>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:116
    {
        filp->position = filp->dentry->dir_inode->file_size;
ffff80000080bcbb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bcbf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bcc3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bcc7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bcca:	48 89 c2             	mov    rdx,rax
ffff80000080bccd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bcd1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119
    }

    f = current->openf;
ffff80000080bcd4:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080bcdb:	ff ff ff 
ffff80000080bcde:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bce2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bce5:	48 05 f8 00 00 00    	add    rax,0xf8
ffff80000080bceb:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080bcef:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080bcf6:	eb 28                	jmp    ffff80000080bd20 <sys_open+0x5d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:121
        if(f[i] == NULL)
ffff80000080bcf8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bcfb:	48 98                	cdqe   
ffff80000080bcfd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080bd04:	00 
ffff80000080bd05:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080bd09:	48 01 d0             	add    rax,rdx
ffff80000080bd0c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bd0f:	48 85 c0             	test   rax,rax
ffff80000080bd12:	75 08                	jne    ffff80000080bd1c <sys_open+0x5cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
        {
            fd = i;
ffff80000080bd14:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bd17:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:124
            break;
ffff80000080bd1a:	eb 0a                	jmp    ffff80000080bd26 <sys_open+0x5d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080bd1c:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120 (discriminator 1)
ffff80000080bd20:	83 7d d8 1f          	cmp    DWORD PTR [rbp-0x28],0x1f
ffff80000080bd24:	7e d2                	jle    ffff80000080bcf8 <sys_open+0x5a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:126
        }
    if(i == MAX_TASKS)
ffff80000080bd26:	83 7d d8 20          	cmp    DWORD PTR [rbp-0x28],0x20
ffff80000080bd2a:	75 22                	jne    ffff80000080bd4e <sys_open+0x5fe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:128
    {
        kmfree(filp);
ffff80000080bd2c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd30:	48 89 c7             	mov    rdi,rax
ffff80000080bd33:	49 89 df             	mov    r15,rbx
ffff80000080bd36:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080bd3d:	ff ff ff 
ffff80000080bd40:	48 01 d8             	add    rax,rbx
ffff80000080bd43:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:130
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
ffff80000080bd45:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
ffff80000080bd4c:	eb 20                	jmp    ffff80000080bd6e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:132
    }
    f[fd] = filp;
ffff80000080bd4e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bd51:	48 98                	cdqe   
ffff80000080bd53:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080bd5a:	00 
ffff80000080bd5b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080bd5f:	48 01 c2             	add    rdx,rax
ffff80000080bd62:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd66:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:134

    return fd;
ffff80000080bd69:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bd6c:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:135
}
ffff80000080bd6e:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff80000080bd75:	5b                   	pop    rbx
ffff80000080bd76:	41 5f                	pop    r15
ffff80000080bd78:	5d                   	pop    rbp
ffff80000080bd79:	c3                   	ret    

ffff80000080bd7a <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:138

unsigned long sys_close(int fd)
{
ffff80000080bd7a:	f3 0f 1e fa          	endbr64 
ffff80000080bd7e:	55                   	push   rbp
ffff80000080bd7f:	48 89 e5             	mov    rbp,rsp
ffff80000080bd82:	41 57                	push   r15
ffff80000080bd84:	53                   	push   rbx
ffff80000080bd85:	48 83 ec 20          	sub    rsp,0x20
ffff80000080bd89:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080bd89 <sys_close+0xf>
ffff80000080bd90:	49 bb a7 1c 11 00 00 	movabs r11,0x111ca7
ffff80000080bd97:	00 00 00 
ffff80000080bd9a:	4c 01 db             	add    rbx,r11
ffff80000080bd9d:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:139
    struct file * filp = NULL;
ffff80000080bda0:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080bda7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080bda8:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080bdac:	78 06                	js     ffff80000080bdb4 <sys_close+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142 (discriminator 1)
ffff80000080bdae:	83 7d dc 1f          	cmp    DWORD PTR [rbp-0x24],0x1f
ffff80000080bdb2:	7e 0c                	jle    ffff80000080bdc0 <sys_close+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:143
        return -EBADF;
ffff80000080bdb4:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080bdbb:	e9 a8 00 00 00       	jmp    ffff80000080be68 <sys_close+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145

    filp = current->openf[fd];
ffff80000080bdc0:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080bdc7:	ff ff ff 
ffff80000080bdca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bdce:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bdd1:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080bdd4:	48 63 d2             	movsxd rdx,edx
ffff80000080bdd7:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080bddb:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080bde0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146
    if(filp->f_ops && filp->f_ops->close)
ffff80000080bde4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bde8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bdec:	48 85 c0             	test   rax,rax
ffff80000080bdef:	74 35                	je     ffff80000080be26 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146 (discriminator 1)
ffff80000080bdf1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bdf5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bdf9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bdfd:	48 85 c0             	test   rax,rax
ffff80000080be00:	74 24                	je     ffff80000080be26 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:147
        filp->f_ops->close(filp->dentry->dir_inode,filp);
ffff80000080be02:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080be06:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080be0a:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080be0e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080be12:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080be16:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080be1a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080be1e:	48 89 d6             	mov    rsi,rdx
ffff80000080be21:	48 89 c7             	mov    rdi,rax
ffff80000080be24:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149

    kmfree(filp);
ffff80000080be26:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080be2a:	48 89 c7             	mov    rdi,rax
ffff80000080be2d:	49 89 df             	mov    r15,rbx
ffff80000080be30:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080be37:	ff ff ff 
ffff80000080be3a:	48 01 d8             	add    rax,rbx
ffff80000080be3d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:150
    current->openf[fd] = NULL;
ffff80000080be3f:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080be46:	ff ff ff 
ffff80000080be49:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080be4d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080be50:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080be53:	48 63 d2             	movsxd rdx,edx
ffff80000080be56:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080be5a:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
ffff80000080be61:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152

    return 0;
ffff80000080be63:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:153
}
ffff80000080be68:	48 83 c4 20          	add    rsp,0x20
ffff80000080be6c:	5b                   	pop    rbx
ffff80000080be6d:	41 5f                	pop    r15
ffff80000080be6f:	5d                   	pop    rbp
ffff80000080be70:	c3                   	ret    

ffff80000080be71 <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:156

unsigned long sys_read(int fd,void * buf,long count)
{
ffff80000080be71:	f3 0f 1e fa          	endbr64 
ffff80000080be75:	55                   	push   rbp
ffff80000080be76:	48 89 e5             	mov    rbp,rsp
ffff80000080be79:	48 83 ec 30          	sub    rsp,0x30
ffff80000080be7d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080be7d <sys_read+0xc>
ffff80000080be84:	49 bb b3 1b 11 00 00 	movabs r11,0x111bb3
ffff80000080be8b:	00 00 00 
ffff80000080be8e:	4c 01 d8             	add    rax,r11
ffff80000080be91:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080be94:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080be98:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:157
    struct file * filp = NULL;
ffff80000080be9c:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080bea3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:158
    unsigned long ret = 0;
ffff80000080bea4:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080beab:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080beac:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080beb0:	78 06                	js     ffff80000080beb8 <sys_read+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161 (discriminator 1)
ffff80000080beb2:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080beb6:	7e 09                	jle    ffff80000080bec1 <sys_read+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:162
        return -EBADF;
ffff80000080beb8:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080bebf:	eb 7c                	jmp    ffff80000080bf3d <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163
    if(count < 0)
ffff80000080bec1:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080bec6:	79 09                	jns    ffff80000080bed1 <sys_read+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:164
        return -EINVAL;
ffff80000080bec8:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080becf:	eb 6c                	jmp    ffff80000080bf3d <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166

    filp = current->openf[fd];
ffff80000080bed1:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080bed8:	ff ff ff 
ffff80000080bedb:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080bedf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bee2:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080bee5:	48 63 d2             	movsxd rdx,edx
ffff80000080bee8:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080beec:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080bef1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167
    if(filp->f_ops && filp->f_ops->read)
ffff80000080bef5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bef9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080befd:	48 85 c0             	test   rax,rax
ffff80000080bf00:	74 37                	je     ffff80000080bf39 <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167 (discriminator 1)
ffff80000080bf02:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bf06:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bf0a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bf0e:	48 85 c0             	test   rax,rax
ffff80000080bf11:	74 26                	je     ffff80000080bf39 <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:168
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
ffff80000080bf13:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bf17:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bf1b:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080bf1f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080bf23:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080bf27:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080bf2b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bf2f:	48 89 c7             	mov    rdi,rax
ffff80000080bf32:	41 ff d0             	call   r8
ffff80000080bf35:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169
    return ret;
ffff80000080bf39:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:170
}
ffff80000080bf3d:	c9                   	leave  
ffff80000080bf3e:	c3                   	ret    

ffff80000080bf3f <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:173

unsigned long sys_write(int fd,void * buf,long count)
{
ffff80000080bf3f:	f3 0f 1e fa          	endbr64 
ffff80000080bf43:	55                   	push   rbp
ffff80000080bf44:	48 89 e5             	mov    rbp,rsp
ffff80000080bf47:	48 83 ec 30          	sub    rsp,0x30
ffff80000080bf4b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bf4b <sys_write+0xc>
ffff80000080bf52:	49 bb e5 1a 11 00 00 	movabs r11,0x111ae5
ffff80000080bf59:	00 00 00 
ffff80000080bf5c:	4c 01 d8             	add    rax,r11
ffff80000080bf5f:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080bf62:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080bf66:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:174
    struct file * filp = NULL;
ffff80000080bf6a:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080bf71:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:175
    unsigned long ret = 0;
ffff80000080bf72:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080bf79:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080bf7a:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080bf7e:	78 06                	js     ffff80000080bf86 <sys_write+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178 (discriminator 1)
ffff80000080bf80:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080bf84:	7e 09                	jle    ffff80000080bf8f <sys_write+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:179
        return -EBADF;
ffff80000080bf86:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080bf8d:	eb 7c                	jmp    ffff80000080c00b <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180
    if(count < 0)
ffff80000080bf8f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080bf94:	79 09                	jns    ffff80000080bf9f <sys_write+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:181
        return -EINVAL;
ffff80000080bf96:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080bf9d:	eb 6c                	jmp    ffff80000080c00b <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183

    filp = current->openf[fd];
ffff80000080bf9f:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080bfa6:	ff ff ff 
ffff80000080bfa9:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080bfad:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bfb0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080bfb3:	48 63 d2             	movsxd rdx,edx
ffff80000080bfb6:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080bfba:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080bfbf:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184
    if(filp->f_ops && filp->f_ops->write)
ffff80000080bfc3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bfc7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bfcb:	48 85 c0             	test   rax,rax
ffff80000080bfce:	74 37                	je     ffff80000080c007 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184 (discriminator 1)
ffff80000080bfd0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bfd4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bfd8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bfdc:	48 85 c0             	test   rax,rax
ffff80000080bfdf:	74 26                	je     ffff80000080c007 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:185
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
ffff80000080bfe1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bfe5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bfe9:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
ffff80000080bfed:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080bff1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080bff5:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080bff9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bffd:	48 89 c7             	mov    rdi,rax
ffff80000080c000:	41 ff d0             	call   r8
ffff80000080c003:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186
    return ret;
ffff80000080c007:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:187
}
ffff80000080c00b:	c9                   	leave  
ffff80000080c00c:	c3                   	ret    

ffff80000080c00d <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:191


unsigned long sys_lseek(int filds,long offset,int whence)
{
ffff80000080c00d:	f3 0f 1e fa          	endbr64 
ffff80000080c011:	55                   	push   rbp
ffff80000080c012:	48 89 e5             	mov    rbp,rsp
ffff80000080c015:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c019:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c019 <sys_lseek+0xc>
ffff80000080c020:	49 bb 17 1a 11 00 00 	movabs r11,0x111a17
ffff80000080c027:	00 00 00 
ffff80000080c02a:	4c 01 d8             	add    rax,r11
ffff80000080c02d:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c030:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c034:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:192
    struct file * filp = NULL;
ffff80000080c037:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c03e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:193
    unsigned long ret = 0;
ffff80000080c03f:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c046:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
ffff80000080c047:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c04b:	78 06                	js     ffff80000080c053 <sys_lseek+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196 (discriminator 1)
ffff80000080c04d:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080c051:	7e 0c                	jle    ffff80000080c05f <sys_lseek+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197
        return -EBADF;
ffff80000080c053:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c05a:	e9 82 00 00 00       	jmp    ffff80000080c0e1 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198
    if(whence < 0 || whence >= SEEK_MAX)
ffff80000080c05f:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080c063:	78 06                	js     ffff80000080c06b <sys_lseek+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198 (discriminator 1)
ffff80000080c065:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
ffff80000080c069:	7e 09                	jle    ffff80000080c074 <sys_lseek+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:199
        return -EINVAL;
ffff80000080c06b:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c072:	eb 6d                	jmp    ffff80000080c0e1 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201

    filp = current->openf[filds];
ffff80000080c074:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c07b:	ff ff ff 
ffff80000080c07e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c082:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c085:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c088:	48 63 d2             	movsxd rdx,edx
ffff80000080c08b:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c08f:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c094:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202
    if(filp->f_ops && filp->f_ops->lseek)
ffff80000080c098:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c09c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c0a0:	48 85 c0             	test   rax,rax
ffff80000080c0a3:	74 38                	je     ffff80000080c0dd <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202 (discriminator 1)
ffff80000080c0a5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c0a9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c0ad:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080c0b1:	48 85 c0             	test   rax,rax
ffff80000080c0b4:	74 27                	je     ffff80000080c0dd <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:203
        ret = filp->f_ops->lseek(filp,offset,whence);
ffff80000080c0b6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c0ba:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c0be:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
ffff80000080c0c2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080c0c5:	48 63 d0             	movsxd rdx,eax
ffff80000080c0c8:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080c0cc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c0d0:	48 89 ce             	mov    rsi,rcx
ffff80000080c0d3:	48 89 c7             	mov    rdi,rax
ffff80000080c0d6:	41 ff d0             	call   r8
ffff80000080c0d9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204
    return ret;
ffff80000080c0dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:205
}
ffff80000080c0e1:	c9                   	leave  
ffff80000080c0e2:	c3                   	ret    

ffff80000080c0e3 <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:215
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
ffff80000080c0e3:	f3 0f 1e fa          	endbr64 
ffff80000080c0e7:	55                   	push   rbp
ffff80000080c0e8:	48 89 e5             	mov    rbp,rsp
ffff80000080c0eb:	41 57                	push   r15
ffff80000080c0ed:	48 83 ec 18          	sub    rsp,0x18
ffff80000080c0f1:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080c0f1 <sys_vfork+0xe>
ffff80000080c0f8:	49 bb 3f 19 11 00 00 	movabs r11,0x11193f
ffff80000080c0ff:	00 00 00 
ffff80000080c102:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:216
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
ffff80000080c105:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080c10c:	ff ff ff 
ffff80000080c10f:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080c113:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c116:	48 8b 80 fc 01 00 00 	mov    rax,QWORD PTR [rax+0x1fc]
ffff80000080c11d:	48 2d d0 00 00 00    	sub    rax,0xd0
ffff80000080c123:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:217
    printf("sys_vfork\n");
ffff80000080c127:	48 b8 b8 d7 ff ff ff 	movabs rax,0xffffffffffffd7b8
ffff80000080c12e:	ff ff ff 
ffff80000080c131:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080c135:	48 89 c7             	mov    rdi,rax
ffff80000080c138:	49 89 d7             	mov    r15,rdx
ffff80000080c13b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c140:	48 b9 c3 3c ee ff ff 	movabs rcx,0xffffffffffee3cc3
ffff80000080c147:	ff ff ff 
ffff80000080c14a:	48 01 d1             	add    rcx,rdx
ffff80000080c14d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:219
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
ffff80000080c14f:	90                   	nop
ffff80000080c150:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c154:	c9                   	leave  
ffff80000080c155:	c3                   	ret    

ffff80000080c156 <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:262

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
ffff80000080c156:	f3 0f 1e fa          	endbr64 
ffff80000080c15a:	55                   	push   rbp
ffff80000080c15b:	48 89 e5             	mov    rbp,rsp
ffff80000080c15e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c15e <sys_wait+0x8>
ffff80000080c165:	49 bb d2 18 11 00 00 	movabs r11,0x1118d2
ffff80000080c16c:	00 00 00 
ffff80000080c16f:	4c 01 d8             	add    rax,r11
ffff80000080c172:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
ffff80000080c175:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000080c179:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:263
    struct process* waitee=NULL;
ffff80000080c17c:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c183:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:265
    extern struct process task[];
    if(!current->child_procs)
ffff80000080c184:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c18b:	ff ff ff 
ffff80000080c18e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c192:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c195:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c19c:	48 85 d2             	test   rdx,rdx
ffff80000080c19f:	75 0c                	jne    ffff80000080c1ad <sys_wait+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266
        return -ECHILD;//没有子进程可以等
ffff80000080c1a1:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080c1a8:	e9 ef 01 00 00       	jmp    ffff80000080c39c <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:267
    if(pid==-1){
ffff80000080c1ad:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
ffff80000080c1b1:	75 58                	jne    ffff80000080c20b <sys_wait+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c1b3:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c1ba:	ff ff ff 
ffff80000080c1bd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c1c1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c1c4:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c1cb:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080c1cf:	eb 31                	jmp    ffff80000080c202 <sys_wait+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:271
                struct process* p=l->data;
ffff80000080c1d1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c1d5:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080c1d9:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:272
                if(p->stat == TASK_ZOMBIE) {
ffff80000080c1dd:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080c1e1:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080c1e4:	83 fa 04             	cmp    edx,0x4
ffff80000080c1e7:	75 0d                	jne    ffff80000080c1f6 <sys_wait+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
                    waitee=p;
ffff80000080c1e9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c1ed:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:274
                    goto done;
ffff80000080c1f1:	e9 46 01 00 00       	jmp    ffff80000080c33c <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c1f6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c1fa:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c1fe:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270 (discriminator 1)
ffff80000080c202:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff80000080c207:	75 c8                	jne    ffff80000080c1d1 <sys_wait+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
ffff80000080c209:	eb a8                	jmp    ffff80000080c1b3 <sys_wait+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:279
                }
            }
        }

    }else if(pid==0) {
ffff80000080c20b:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080c20f:	75 77                	jne    ffff80000080c288 <sys_wait+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c211:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c218:	ff ff ff 
ffff80000080c21b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c21f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c222:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c229:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c22d:	eb 50                	jmp    ffff80000080c27f <sys_wait+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283
                struct process* p=l->data;
ffff80000080c22f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c233:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080c237:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
ffff80000080c23b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c23f:	8b 4a 04             	mov    ecx,DWORD PTR [rdx+0x4]
ffff80000080c242:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c249:	ff ff ff 
ffff80000080c24c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c250:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c253:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080c256:	39 d1                	cmp    ecx,edx
ffff80000080c258:	75 19                	jne    ffff80000080c273 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284 (discriminator 1)
ffff80000080c25a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c25e:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080c261:	83 fa 04             	cmp    edx,0x4
ffff80000080c264:	75 0d                	jne    ffff80000080c273 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
                    waitee=p;
ffff80000080c266:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c26a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:286
                    goto done;
ffff80000080c26e:	e9 c9 00 00 00       	jmp    ffff80000080c33c <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c273:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c277:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c27b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282 (discriminator 1)
ffff80000080c27f:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c284:	75 a9                	jne    ffff80000080c22f <sys_wait+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
ffff80000080c286:	eb 89                	jmp    ffff80000080c211 <sys_wait+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:291
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
ffff80000080c288:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080c28c:	79 03                	jns    ffff80000080c291 <sys_wait+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:291 (discriminator 1)
ffff80000080c28e:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080c291:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080c298:	eb 4f                	jmp    ffff80000080c2e9 <sys_wait+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294
            if(task[i].pid==pid){
ffff80000080c29a:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080c2a1:	ff ff ff 
ffff80000080c2a4:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080c2a8:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080c2ab:	48 63 d2             	movsxd rdx,edx
ffff80000080c2ae:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080c2b5:	48 01 ca             	add    rdx,rcx
ffff80000080c2b8:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080c2ba:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080c2bd:	39 d1                	cmp    ecx,edx
ffff80000080c2bf:	75 24                	jne    ffff80000080c2e5 <sys_wait+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295
                waitee=&task[i];
ffff80000080c2c1:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080c2c4:	48 63 d2             	movsxd rdx,edx
ffff80000080c2c7:	48 69 ca 58 03 00 00 	imul   rcx,rdx,0x358
ffff80000080c2ce:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080c2d5:	ff ff ff 
ffff80000080c2d8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c2dc:	48 01 ca             	add    rdx,rcx
ffff80000080c2df:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:296
                break;
ffff80000080c2e3:	eb 0a                	jmp    ffff80000080c2ef <sys_wait+0x199>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080c2e5:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293 (discriminator 1)
ffff80000080c2e9:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080c2ed:	7e ab                	jle    ffff80000080c29a <sys_wait+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
ffff80000080c2ef:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080c2f4:	74 21                	je     ffff80000080c317 <sys_wait+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299 (discriminator 1)
ffff80000080c2f6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c2fa:	8b 92 bc 00 00 00    	mov    edx,DWORD PTR [rdx+0xbc]
ffff80000080c300:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff80000080c307:	ff ff ff 
ffff80000080c30a:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080c30e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c311:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c313:	39 c2                	cmp    edx,eax
ffff80000080c315:	74 09                	je     ffff80000080c320 <sys_wait+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:300
            return -ECHILD;//没有这个进程或者不是子进程
ffff80000080c317:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080c31e:	eb 7c                	jmp    ffff80000080c39c <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
ffff80000080c320:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302 (discriminator 1)
ffff80000080c321:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c325:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080c328:	83 f8 04             	cmp    eax,0x4
ffff80000080c32b:	75 f4                	jne    ffff80000080c321 <sys_wait+0x1cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:303
        *stat_loc=waitee->exit_code;
ffff80000080c32d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c331:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080c334:	89 c2                	mov    edx,eax
ffff80000080c336:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c33a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:307
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
ffff80000080c33c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c340:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:309
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
ffff80000080c347:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c34b:	48 05 34 03 00 00    	add    rax,0x334
ffff80000080c351:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:44
    list_add_to_behind(p,new);
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
ffff80000080c355:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c359:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c35c:	48 85 c0             	test   rax,rax
ffff80000080c35f:	74 13                	je     ffff80000080c374 <sys_wait+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:45
        entry->prev->next=entry->next;
ffff80000080c361:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c365:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c368:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c36c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c370:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:46
    if(entry->next)
ffff80000080c374:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c378:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c37c:	48 85 c0             	test   rax,rax
ffff80000080c37f:	74 12                	je     ffff80000080c393 <sys_wait+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
        entry->next->prev=entry->prev;
ffff80000080c381:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c385:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c389:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c38d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c390:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:48
}
ffff80000080c393:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:311
    //TODO 被信号中断时返回-1
    return waitee->pid;
ffff80000080c394:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c398:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c39a:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:312
}
ffff80000080c39c:	5d                   	pop    rbp
ffff80000080c39d:	c3                   	ret    

ffff80000080c39e <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:314
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
ffff80000080c39e:	f3 0f 1e fa          	endbr64 
ffff80000080c3a2:	55                   	push   rbp
ffff80000080c3a3:	48 89 e5             	mov    rbp,rsp
ffff80000080c3a6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c3a6 <sys_wait4+0x8>
ffff80000080c3ad:	49 bb 8a 16 11 00 00 	movabs r11,0x11168a
ffff80000080c3b4:	00 00 00 
ffff80000080c3b7:	4c 01 d8             	add    rax,r11
ffff80000080c3ba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c3be:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c3c2:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080c3c5:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:350
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
ffff80000080c3c9:	90                   	nop
ffff80000080c3ca:	5d                   	pop    rbp
ffff80000080c3cb:	c3                   	ret    

ffff80000080c3cc <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:353

unsigned long sys_brk(unsigned long brk)
{
ffff80000080c3cc:	f3 0f 1e fa          	endbr64 
ffff80000080c3d0:	55                   	push   rbp
ffff80000080c3d1:	48 89 e5             	mov    rbp,rsp
ffff80000080c3d4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c3d4 <sys_brk+0x8>
ffff80000080c3db:	49 bb 5c 16 11 00 00 	movabs r11,0x11165c
ffff80000080c3e2:	00 00 00 
ffff80000080c3e5:	4c 01 d8             	add    rax,r11
ffff80000080c3e8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:367
//
//    new_brk = do_brk(current->mm->end_brk,new_brk - current->mm->end_brk);	//expand brk space
//
//    current->mm->end_brk = new_brk;
//    return new_brk;
}
ffff80000080c3ec:	90                   	nop
ffff80000080c3ed:	5d                   	pop    rbp
ffff80000080c3ee:	c3                   	ret    

ffff80000080c3ef <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:370

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
ffff80000080c3ef:	f3 0f 1e fa          	endbr64 
ffff80000080c3f3:	55                   	push   rbp
ffff80000080c3f4:	48 89 e5             	mov    rbp,rsp
ffff80000080c3f7:	41 57                	push   r15
ffff80000080c3f9:	53                   	push   rbx
ffff80000080c3fa:	48 83 ec 10          	sub    rsp,0x10
ffff80000080c3fe:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c3fe <sys_reboot+0xf>
ffff80000080c405:	49 bb 32 16 11 00 00 	movabs r11,0x111632
ffff80000080c40c:	00 00 00 
ffff80000080c40f:	4c 01 db             	add    rbx,r11
ffff80000080c412:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080c416:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:371
    printf("sys_reboot\n");
ffff80000080c41a:	48 b8 c3 d7 ff ff ff 	movabs rax,0xffffffffffffd7c3
ffff80000080c421:	ff ff ff 
ffff80000080c424:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c428:	48 89 c7             	mov    rdi,rax
ffff80000080c42b:	49 89 df             	mov    r15,rbx
ffff80000080c42e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c433:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080c43a:	ff ff ff 
ffff80000080c43d:	48 01 da             	add    rdx,rbx
ffff80000080c440:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:372
    switch(cmd)
ffff80000080c442:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080c447:	74 09                	je     ffff80000080c452 <sys_reboot+0x63>
ffff80000080c449:	48 83 7d e8 02       	cmp    QWORD PTR [rbp-0x18],0x2
ffff80000080c44e:	74 20                	je     ffff80000080c470 <sys_reboot+0x81>
ffff80000080c450:	eb 48                	jmp    ffff80000080c49a <sys_reboot+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:375
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
ffff80000080c452:	be fe 00 00 00       	mov    esi,0xfe
ffff80000080c457:	bf 64 00 00 00       	mov    edi,0x64
ffff80000080c45c:	49 89 df             	mov    r15,rbx
ffff80000080c45f:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080c466:	ff ff ff 
ffff80000080c469:	48 01 d8             	add    rax,rbx
ffff80000080c46c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:376
            break;
ffff80000080c46e:	eb 53                	jmp    ffff80000080c4c3 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:379

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
ffff80000080c470:	48 b8 d0 d7 ff ff ff 	movabs rax,0xffffffffffffd7d0
ffff80000080c477:	ff ff ff 
ffff80000080c47a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c47e:	48 89 c7             	mov    rdi,rax
ffff80000080c481:	49 89 df             	mov    r15,rbx
ffff80000080c484:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c489:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080c490:	ff ff ff 
ffff80000080c493:	48 01 da             	add    rdx,rbx
ffff80000080c496:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:380
            break;
ffff80000080c498:	eb 29                	jmp    ffff80000080c4c3 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383

        default:
            printf("sys_reboot cmd ERROR!\n");
ffff80000080c49a:	48 b8 f0 d7 ff ff ff 	movabs rax,0xffffffffffffd7f0
ffff80000080c4a1:	ff ff ff 
ffff80000080c4a4:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c4a8:	48 89 c7             	mov    rdi,rax
ffff80000080c4ab:	49 89 df             	mov    r15,rbx
ffff80000080c4ae:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c4b3:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080c4ba:	ff ff ff 
ffff80000080c4bd:	48 01 da             	add    rdx,rbx
ffff80000080c4c0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:384
            break;
ffff80000080c4c2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386
    }
    return 0;
ffff80000080c4c3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:387
}
ffff80000080c4c8:	48 83 c4 10          	add    rsp,0x10
ffff80000080c4cc:	5b                   	pop    rbx
ffff80000080c4cd:	41 5f                	pop    r15
ffff80000080c4cf:	5d                   	pop    rbp
ffff80000080c4d0:	c3                   	ret    

ffff80000080c4d1 <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:391


unsigned long sys_chdir(char *filename)
{
ffff80000080c4d1:	f3 0f 1e fa          	endbr64 
ffff80000080c4d5:	55                   	push   rbp
ffff80000080c4d6:	48 89 e5             	mov    rbp,rsp
ffff80000080c4d9:	41 57                	push   r15
ffff80000080c4db:	53                   	push   rbx
ffff80000080c4dc:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c4e0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c4e0 <sys_chdir+0xf>
ffff80000080c4e7:	49 bb 50 15 11 00 00 	movabs r11,0x111550
ffff80000080c4ee:	00 00 00 
ffff80000080c4f1:	4c 01 db             	add    rbx,r11
ffff80000080c4f4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:392
    char * path = NULL;
ffff80000080c4f8:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c4ff:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:393
    long pathlen = 0;
ffff80000080c500:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080c507:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:394
    struct dir_entry * dentry = NULL;
ffff80000080c508:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080c50f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:396

    printf("sys_chdir\n");
ffff80000080c510:	48 b8 07 d8 ff ff ff 	movabs rax,0xffffffffffffd807
ffff80000080c517:	ff ff ff 
ffff80000080c51a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c51e:	48 89 c7             	mov    rdi,rax
ffff80000080c521:	49 89 df             	mov    r15,rbx
ffff80000080c524:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c529:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080c530:	ff ff ff 
ffff80000080c533:	48 01 da             	add    rdx,rbx
ffff80000080c536:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:397
    path = (char *) kmalloc();
ffff80000080c538:	49 89 df             	mov    r15,rbx
ffff80000080c53b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c540:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080c547:	ff ff ff 
ffff80000080c54a:	48 01 da             	add    rdx,rbx
ffff80000080c54d:	ff d2                	call   rdx
ffff80000080c54f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:399

    if(path == NULL)
ffff80000080c553:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c558:	75 0c                	jne    ffff80000080c566 <sys_chdir+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:400
        return -ENOMEM;
ffff80000080c55a:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080c561:	e9 28 01 00 00       	jmp    ffff80000080c68e <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:401
    memset(path,0,PAGE_4K_SIZE);
ffff80000080c566:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c56a:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080c56f:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c574:	48 89 c7             	mov    rdi,rax
ffff80000080c577:	49 89 df             	mov    r15,rbx
ffff80000080c57a:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff80000080c581:	ff ff ff 
ffff80000080c584:	48 01 d8             	add    rax,rbx
ffff80000080c587:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:402
    pathlen = strlen(filename);
ffff80000080c589:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c58d:	48 89 c7             	mov    rdi,rax
ffff80000080c590:	49 89 df             	mov    r15,rbx
ffff80000080c593:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff80000080c59a:	ff ff ff 
ffff80000080c59d:	48 01 d8             	add    rax,rbx
ffff80000080c5a0:	ff d0                	call   rax
ffff80000080c5a2:	48 98                	cdqe   
ffff80000080c5a4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:403
    if(pathlen <= 0)
ffff80000080c5a8:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080c5ad:	7f 25                	jg     ffff80000080c5d4 <sys_chdir+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
    {
        kmfree(path);
ffff80000080c5af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c5b3:	48 89 c7             	mov    rdi,rax
ffff80000080c5b6:	49 89 df             	mov    r15,rbx
ffff80000080c5b9:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080c5c0:	ff ff ff 
ffff80000080c5c3:	48 01 d8             	add    rax,rbx
ffff80000080c5c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:406
        return -EFAULT;
ffff80000080c5c8:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080c5cf:	e9 ba 00 00 00       	jmp    ffff80000080c68e <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:408
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080c5d4:	48 81 7d e0 ff 0f 00 	cmp    QWORD PTR [rbp-0x20],0xfff
ffff80000080c5db:	00 
ffff80000080c5dc:	7e 25                	jle    ffff80000080c603 <sys_chdir+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:410
    {
        kmfree(path);
ffff80000080c5de:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c5e2:	48 89 c7             	mov    rdi,rax
ffff80000080c5e5:	49 89 df             	mov    r15,rbx
ffff80000080c5e8:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080c5ef:	ff ff ff 
ffff80000080c5f2:	48 01 d8             	add    rax,rbx
ffff80000080c5f5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:411
        return -ENAMETOOLONG;
ffff80000080c5f7:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080c5fe:	e9 8b 00 00 00       	jmp    ffff80000080c68e <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:413
    }
    strcpy(filename,path);
ffff80000080c603:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c607:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c60b:	48 89 d6             	mov    rsi,rdx
ffff80000080c60e:	48 89 c7             	mov    rdi,rax
ffff80000080c611:	49 89 df             	mov    r15,rbx
ffff80000080c614:	48 b8 81 51 ef ff ff 	movabs rax,0xffffffffffef5181
ffff80000080c61b:	ff ff ff 
ffff80000080c61e:	48 01 d8             	add    rax,rbx
ffff80000080c621:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:415

    dentry = path_walk(path,0);
ffff80000080c623:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c627:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c62c:	48 89 c7             	mov    rdi,rax
ffff80000080c62f:	49 89 df             	mov    r15,rbx
ffff80000080c632:	48 b8 d9 d1 ee ff ff 	movabs rax,0xffffffffffeed1d9
ffff80000080c639:	ff ff ff 
ffff80000080c63c:	48 01 d8             	add    rax,rbx
ffff80000080c63f:	ff d0                	call   rax
ffff80000080c641:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:416
    kmfree(path);
ffff80000080c645:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c649:	48 89 c7             	mov    rdi,rax
ffff80000080c64c:	49 89 df             	mov    r15,rbx
ffff80000080c64f:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080c656:	ff ff ff 
ffff80000080c659:	48 01 d8             	add    rax,rbx
ffff80000080c65c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:418

    if(dentry == NULL)
ffff80000080c65e:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c663:	75 09                	jne    ffff80000080c66e <sys_chdir+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
        return -ENOENT;
ffff80000080c665:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080c66c:	eb 20                	jmp    ffff80000080c68e <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:420
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
ffff80000080c66e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c672:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c676:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c67a:	48 83 f8 02          	cmp    rax,0x2
ffff80000080c67e:	74 09                	je     ffff80000080c689 <sys_chdir+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421
        return -ENOTDIR;
ffff80000080c680:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080c687:	eb 05                	jmp    ffff80000080c68e <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
    return 0;
ffff80000080c689:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:423
}
ffff80000080c68e:	48 83 c4 30          	add    rsp,0x30
ffff80000080c692:	5b                   	pop    rbx
ffff80000080c693:	41 5f                	pop    r15
ffff80000080c695:	5d                   	pop    rbp
ffff80000080c696:	c3                   	ret    

ffff80000080c697 <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426

unsigned long sys_getdents(int fd, void * dirent, long count)
{
ffff80000080c697:	f3 0f 1e fa          	endbr64 
ffff80000080c69b:	55                   	push   rbp
ffff80000080c69c:	48 89 e5             	mov    rbp,rsp
ffff80000080c69f:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c6a3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c6a3 <sys_getdents+0xc>
ffff80000080c6aa:	49 bb 8d 13 11 00 00 	movabs r11,0x11138d
ffff80000080c6b1:	00 00 00 
ffff80000080c6b4:	4c 01 d8             	add    rax,r11
ffff80000080c6b7:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c6ba:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c6be:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:427
    struct file * filp = NULL;
ffff80000080c6c2:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c6c9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:428
    unsigned long ret = 0;
ffff80000080c6ca:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c6d1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
ffff80000080c6d2:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c6d6:	78 06                	js     ffff80000080c6de <sys_getdents+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431 (discriminator 1)
ffff80000080c6d8:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
ffff80000080c6dc:	7e 0c                	jle    ffff80000080c6ea <sys_getdents+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:432
        return -EBADF;
ffff80000080c6de:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c6e5:	e9 85 00 00 00       	jmp    ffff80000080c76f <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:433
    if(count < 0)
ffff80000080c6ea:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c6ef:	79 09                	jns    ffff80000080c6fa <sys_getdents+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:434
        return -EINVAL;
ffff80000080c6f1:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c6f8:	eb 75                	jmp    ffff80000080c76f <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436

    filp = current->openf[fd];
ffff80000080c6fa:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c701:	ff ff ff 
ffff80000080c704:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c708:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c70b:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080c70e:	48 63 c9             	movsxd rcx,ecx
ffff80000080c711:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080c715:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080c71a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437
    if(filp->f_ops && filp->f_ops->readdir)
ffff80000080c71e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c722:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c726:	48 85 d2             	test   rdx,rdx
ffff80000080c729:	74 40                	je     ffff80000080c76b <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437 (discriminator 1)
ffff80000080c72b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c72f:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c733:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080c737:	48 85 d2             	test   rdx,rdx
ffff80000080c73a:	74 2f                	je     ffff80000080c76b <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:438
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
ffff80000080c73c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c740:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c744:	4c 8b 42 30          	mov    r8,QWORD PTR [rdx+0x30]
ffff80000080c748:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c74c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080c750:	48 ba 80 ff ff ff ff 	movabs rdx,0xffffffffffffff80
ffff80000080c757:	ff ff ff 
ffff80000080c75a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c75e:	48 89 c2             	mov    rdx,rax
ffff80000080c761:	48 89 cf             	mov    rdi,rcx
ffff80000080c764:	41 ff d0             	call   r8
ffff80000080c767:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439
    return ret;
ffff80000080c76b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:440
}
ffff80000080c76f:	c9                   	leave  
ffff80000080c770:	c3                   	ret    

ffff80000080c771 <sys_mmap>:
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:442

void *sys_mmap(void *addr, size_t len, int prot, int flags,int fildes, off_t off){
ffff80000080c771:	f3 0f 1e fa          	endbr64 
ffff80000080c775:	55                   	push   rbp
ffff80000080c776:	48 89 e5             	mov    rbp,rsp
ffff80000080c779:	41 57                	push   r15
ffff80000080c77b:	41 56                	push   r14
ffff80000080c77d:	41 55                	push   r13
ffff80000080c77f:	41 54                	push   r12
ffff80000080c781:	53                   	push   rbx
ffff80000080c782:	48 83 ec 48          	sub    rsp,0x48
ffff80000080c786:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c786 <sys_mmap+0x15>
ffff80000080c78d:	49 bb aa 12 11 00 00 	movabs r11,0x1112aa
ffff80000080c794:	00 00 00 
ffff80000080c797:	4c 01 db             	add    rbx,r11
ffff80000080c79a:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff80000080c79e:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080c7a2:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
ffff80000080c7a5:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
ffff80000080c7a8:	44 89 45 94          	mov    DWORD PTR [rbp-0x6c],r8d
ffff80000080c7ac:	44 89 4d 90          	mov    DWORD PTR [rbp-0x70],r9d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:443
    int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080c7b0:	c7 45 c4 05 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x5
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:445
    if((prot|PROT_WRITE)||(prot|PROT_EXEC))
        attr|=PAGE_RWX;
ffff80000080c7b7:	83 4d c4 02          	or     DWORD PTR [rbp-0x3c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:446
    if(addr){
ffff80000080c7bb:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080c7c0:	0f 84 16 01 00 00    	je     ffff80000080c8dc <sys_mmap+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:447
        if(chk_mmap(addr,len)){
ffff80000080c7c6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c7ca:	89 c2                	mov    edx,eax
ffff80000080c7cc:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c7d0:	48 89 c6             	mov    rsi,rax
ffff80000080c7d3:	89 d7                	mov    edi,edx
ffff80000080c7d5:	49 89 df             	mov    r15,rbx
ffff80000080c7d8:	48 b8 2f 9a ee ff ff 	movabs rax,0xffffffffffee9a2f
ffff80000080c7df:	ff ff ff 
ffff80000080c7e2:	48 01 d8             	add    rax,rbx
ffff80000080c7e5:	ff d0                	call   rax
ffff80000080c7e7:	85 c0                	test   eax,eax
ffff80000080c7e9:	0f 84 8f 00 00 00    	je     ffff80000080c87e <sys_mmap+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:448
            int pgc=(len-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080c7ef:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c7f3:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080c7f9:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080c7fd:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449
            for(int i=0;i<pgc;i++){
ffff80000080c800:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080c807:	eb 68                	jmp    ffff80000080c871 <sys_mmap+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:450 (discriminator 3)
                smmap(pmalloc(),addr+i*PAGE_4K_SIZE,attr,current->pml4);
ffff80000080c809:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080c810:	ff ff ff 
ffff80000080c813:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c817:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c81a:	4c 8b a8 e0 00 00 00 	mov    r13,QWORD PTR [rax+0xe0]
ffff80000080c821:	44 8b 65 c4          	mov    r12d,DWORD PTR [rbp-0x3c]
ffff80000080c825:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080c828:	c1 e0 0c             	shl    eax,0xc
ffff80000080c82b:	48 63 d0             	movsxd rdx,eax
ffff80000080c82e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c832:	48 01 d0             	add    rax,rdx
ffff80000080c835:	49 89 c6             	mov    r14,rax
ffff80000080c838:	49 89 df             	mov    r15,rbx
ffff80000080c83b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c840:	48 ba 0e 51 ee ff ff 	movabs rdx,0xffffffffffee510e
ffff80000080c847:	ff ff ff 
ffff80000080c84a:	48 01 da             	add    rdx,rbx
ffff80000080c84d:	ff d2                	call   rdx
ffff80000080c84f:	4c 89 e9             	mov    rcx,r13
ffff80000080c852:	44 89 e2             	mov    edx,r12d
ffff80000080c855:	4c 89 f6             	mov    rsi,r14
ffff80000080c858:	48 89 c7             	mov    rdi,rax
ffff80000080c85b:	49 89 df             	mov    r15,rbx
ffff80000080c85e:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff80000080c865:	ff ff ff 
ffff80000080c868:	48 01 d8             	add    rax,rbx
ffff80000080c86b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449 (discriminator 3)
            for(int i=0;i<pgc;i++){
ffff80000080c86d:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449 (discriminator 1)
ffff80000080c871:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080c874:	3b 45 bc             	cmp    eax,DWORD PTR [rbp-0x44]
ffff80000080c877:	7c 90                	jl     ffff80000080c809 <sys_mmap+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:453

            }
            goto sync_f;
ffff80000080c879:	e9 0e 01 00 00       	jmp    ffff80000080c98c <sys_mmap+0x21b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:456
        }
        if(flags|MAP_FIXED){
            set_errno(-ENOMEM);
ffff80000080c87e:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080c883:	49 89 df             	mov    r15,rbx
ffff80000080c886:	48 b8 f0 a0 ee ff ff 	movabs rax,0xffffffffffeea0f0
ffff80000080c88d:	ff ff ff 
ffff80000080c890:	48 01 d8             	add    rax,rbx
ffff80000080c893:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:457
            return MAP_FAILED;
ffff80000080c895:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080c89c:	e9 ef 00 00 00       	jmp    ffff80000080c990 <sys_mmap+0x21f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:463
        }
    }
    //寻找一块空的虚拟内存
    while (!chk_mmap(addr,len))
    {
        addr+=PAGE_4K_SIZE;
ffff80000080c8a1:	48 81 45 a8 00 10 00 	add    QWORD PTR [rbp-0x58],0x1000
ffff80000080c8a8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:464
        if(addr>=KNL_BASE){
ffff80000080c8a9:	48 b8 ff ff ff ff ff 	movabs rax,0xffff7fffffffffff
ffff80000080c8b0:	7f ff ff 
ffff80000080c8b3:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080c8b7:	76 23                	jbe    ffff80000080c8dc <sys_mmap+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:465
            set_errno(-ENOMEM);
ffff80000080c8b9:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080c8be:	49 89 df             	mov    r15,rbx
ffff80000080c8c1:	48 b8 f0 a0 ee ff ff 	movabs rax,0xffffffffffeea0f0
ffff80000080c8c8:	ff ff ff 
ffff80000080c8cb:	48 01 d8             	add    rax,rbx
ffff80000080c8ce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:466
            return MAP_FAILED;
ffff80000080c8d0:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080c8d7:	e9 b4 00 00 00       	jmp    ffff80000080c990 <sys_mmap+0x21f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:461
    while (!chk_mmap(addr,len))
ffff80000080c8dc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c8e0:	89 c2                	mov    edx,eax
ffff80000080c8e2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c8e6:	48 89 c6             	mov    rsi,rax
ffff80000080c8e9:	89 d7                	mov    edi,edx
ffff80000080c8eb:	49 89 df             	mov    r15,rbx
ffff80000080c8ee:	48 b8 2f 9a ee ff ff 	movabs rax,0xffffffffffee9a2f
ffff80000080c8f5:	ff ff ff 
ffff80000080c8f8:	48 01 d8             	add    rax,rbx
ffff80000080c8fb:	ff d0                	call   rax
ffff80000080c8fd:	85 c0                	test   eax,eax
ffff80000080c8ff:	74 a0                	je     ffff80000080c8a1 <sys_mmap+0x130>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:469
        }
    }
    int pgc=(len-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080c901:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c905:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080c90b:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080c90f:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470
    for(int i=0;i<pgc;i++){
ffff80000080c912:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff80000080c919:	eb 68                	jmp    ffff80000080c983 <sys_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:471 (discriminator 3)
        smmap(pmalloc(),addr+i*PAGE_4K_SIZE,attr,current->pml4);
ffff80000080c91b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080c922:	ff ff ff 
ffff80000080c925:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c929:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c92c:	4c 8b a8 e0 00 00 00 	mov    r13,QWORD PTR [rax+0xe0]
ffff80000080c933:	44 8b 65 c4          	mov    r12d,DWORD PTR [rbp-0x3c]
ffff80000080c937:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff80000080c93a:	c1 e0 0c             	shl    eax,0xc
ffff80000080c93d:	48 63 d0             	movsxd rdx,eax
ffff80000080c940:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c944:	48 01 d0             	add    rax,rdx
ffff80000080c947:	49 89 c6             	mov    r14,rax
ffff80000080c94a:	49 89 df             	mov    r15,rbx
ffff80000080c94d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c952:	48 ba 0e 51 ee ff ff 	movabs rdx,0xffffffffffee510e
ffff80000080c959:	ff ff ff 
ffff80000080c95c:	48 01 da             	add    rdx,rbx
ffff80000080c95f:	ff d2                	call   rdx
ffff80000080c961:	4c 89 e9             	mov    rcx,r13
ffff80000080c964:	44 89 e2             	mov    edx,r12d
ffff80000080c967:	4c 89 f6             	mov    rsi,r14
ffff80000080c96a:	48 89 c7             	mov    rdi,rax
ffff80000080c96d:	49 89 df             	mov    r15,rbx
ffff80000080c970:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff80000080c977:	ff ff ff 
ffff80000080c97a:	48 01 d8             	add    rax,rbx
ffff80000080c97d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff80000080c97f:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470 (discriminator 1)
ffff80000080c983:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff80000080c986:	3b 45 c0             	cmp    eax,DWORD PTR [rbp-0x40]
ffff80000080c989:	7c 90                	jl     ffff80000080c91b <sys_mmap+0x1aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:473
    }
sync_f:
ffff80000080c98b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:476
    if(flags|MAP_ANNONYMOUS){
        //不需要映射到文件，匿名映射
        return addr;
ffff80000080c98c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:484
    //目前先一致读取
    sys_lseek(fildes,off,SEEK_SET);
    sys_read(fildes,addr,len);
    return addr;
    
}
ffff80000080c990:	48 83 c4 48          	add    rsp,0x48
ffff80000080c994:	5b                   	pop    rbx
ffff80000080c995:	41 5c                	pop    r12
ffff80000080c997:	41 5d                	pop    r13
ffff80000080c999:	41 5e                	pop    r14
ffff80000080c99b:	41 5f                	pop    r15
ffff80000080c99d:	5d                   	pop    rbp
ffff80000080c99e:	c3                   	ret    

ffff80000080c99f <init_ramfs>:
init_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:28
};
struct index_node_operations ramfs_iops={
        .lookup=lookup_inode_ramfs,.create=create_inode_ramfs
};
struct index_node* test;
void init_ramfs(){
ffff80000080c99f:	f3 0f 1e fa          	endbr64 
ffff80000080c9a3:	55                   	push   rbp
ffff80000080c9a4:	48 89 e5             	mov    rbp,rsp
ffff80000080c9a7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c9a7 <init_ramfs+0x8>
ffff80000080c9ae:	49 bb 89 10 11 00 00 	movabs r11,0x111089
ffff80000080c9b5:	00 00 00 
ffff80000080c9b8:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:31
    //挂载新文件系统到/mnt,设备为/dev/ram

    ramfs_sb.sb_ops=&ramfs_fops;
ffff80000080c9bb:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff80000080c9c2:	ff ff ff 
ffff80000080c9c5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c9c9:	48 b9 38 fd ff ff ff 	movabs rcx,0xfffffffffffffd38
ffff80000080c9d0:	ff ff ff 
ffff80000080c9d3:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080c9d7:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:32
    ramfs_sb.root=dmnt;
ffff80000080c9db:	48 ba e0 fe ff ff ff 	movabs rdx,0xfffffffffffffee0
ffff80000080c9e2:	ff ff ff 
ffff80000080c9e5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c9e9:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080c9ec:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff80000080c9f3:	ff ff ff 
ffff80000080c9f6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c9fa:	48 89 0a             	mov    QWORD PTR [rdx],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:33
    ramfs_sb.p_dev=&bd_ramdisk;
ffff80000080c9fd:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff80000080ca04:	ff ff ff 
ffff80000080ca07:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ca0b:	48 b9 a8 ff ff ff ff 	movabs rcx,0xffffffffffffffa8
ffff80000080ca12:	ff ff ff 
ffff80000080ca15:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ca19:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:34
    ramfs_sb.dev=dev_ramdisk;
ffff80000080ca1d:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080ca24:	ff ff ff 
ffff80000080ca27:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ca2b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080ca2d:	89 d1                	mov    ecx,edx
ffff80000080ca2f:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff80000080ca36:	ff ff ff 
ffff80000080ca39:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080ca3d:	66 89 48 10          	mov    WORD PTR [rax+0x10],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:45
    // test->sb=&ramfs_sb;
    // test->attribute=FS_ATTR_FILE;
    // test->inode_ops=&ramfs_iops;
    //设置一下dmnt的inode的操作，查找的时候会用到
    // dmnt->dir_inode->inode_ops=&ramfs_iops;
}
ffff80000080ca41:	90                   	nop
ffff80000080ca42:	5d                   	pop    rbp
ffff80000080ca43:	c3                   	ret    

ffff80000080ca44 <create_inode_ramfs>:
create_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:47

long create_inode_ramfs(struct index_node * inode,struct dir_entry * dentry,int mode){}
ffff80000080ca44:	f3 0f 1e fa          	endbr64 
ffff80000080ca48:	55                   	push   rbp
ffff80000080ca49:	48 89 e5             	mov    rbp,rsp
ffff80000080ca4c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ca4c <create_inode_ramfs+0x8>
ffff80000080ca53:	49 bb e4 0f 11 00 00 	movabs r11,0x110fe4
ffff80000080ca5a:	00 00 00 
ffff80000080ca5d:	4c 01 d8             	add    rax,r11
ffff80000080ca60:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ca64:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080ca68:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080ca6b:	90                   	nop
ffff80000080ca6c:	5d                   	pop    rbp
ffff80000080ca6d:	c3                   	ret    

ffff80000080ca6e <lookup_inode_ramfs>:
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:48
struct dir_entry* lookup_inode_ramfs(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080ca6e:	f3 0f 1e fa          	endbr64 
ffff80000080ca72:	55                   	push   rbp
ffff80000080ca73:	48 89 e5             	mov    rbp,rsp
ffff80000080ca76:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ca76 <lookup_inode_ramfs+0x8>
ffff80000080ca7d:	49 bb ba 0f 11 00 00 	movabs r11,0x110fba
ffff80000080ca84:	00 00 00 
ffff80000080ca87:	4c 01 d8             	add    rax,r11
ffff80000080ca8a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080ca8e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:49
    list_init(&dest_dentry->subdirs_list);
ffff80000080ca92:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ca96:	48 83 c2 28          	add    rdx,0x28
ffff80000080ca9a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080ca9e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080caa2:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080caa9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080caad:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080cab4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080cab5:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:50
    list_init(&dest_dentry->child_node);
ffff80000080cab6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080caba:	48 83 c2 10          	add    rdx,0x10
ffff80000080cabe:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080cac2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080cac6:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080cacd:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080cad1:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080cad8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080cad9:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:51
    dest_dentry->dir_inode=test;
ffff80000080cada:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff80000080cae1:	ff ff ff 
ffff80000080cae4:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cae8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080caeb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080caef:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:52
    dest_dentry->child_node.data=dest_dentry;
ffff80000080caf3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080caf7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cafb:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:53
    return dest_dentry;
ffff80000080caff:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:54
}
ffff80000080cb03:	5d                   	pop    rbp
ffff80000080cb04:	c3                   	ret    

ffff80000080cb05 <open_ramfs>:
open_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:55
long open_ramfs(struct index_node * inode,struct file * filp){
ffff80000080cb05:	f3 0f 1e fa          	endbr64 
ffff80000080cb09:	55                   	push   rbp
ffff80000080cb0a:	48 89 e5             	mov    rbp,rsp
ffff80000080cb0d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cb0d <open_ramfs+0x8>
ffff80000080cb14:	49 bb 23 0f 11 00 00 	movabs r11,0x110f23
ffff80000080cb1b:	00 00 00 
ffff80000080cb1e:	4c 01 d8             	add    rax,r11
ffff80000080cb21:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cb25:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:56
    filp->f_ops=inode->f_ops;
ffff80000080cb29:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080cb2d:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080cb31:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080cb35:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:57
    filp->position=0;
ffff80000080cb39:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080cb3d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:58
    return 1;
ffff80000080cb44:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:59
}
ffff80000080cb49:	5d                   	pop    rbp
ffff80000080cb4a:	c3                   	ret    

ffff80000080cb4b <close_ramfs>:
close_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:61

long close_ramfs(struct index_node * inode,struct file * filp){
ffff80000080cb4b:	f3 0f 1e fa          	endbr64 
ffff80000080cb4f:	55                   	push   rbp
ffff80000080cb50:	48 89 e5             	mov    rbp,rsp
ffff80000080cb53:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cb53 <close_ramfs+0x8>
ffff80000080cb5a:	49 bb dd 0e 11 00 00 	movabs r11,0x110edd
ffff80000080cb61:	00 00 00 
ffff80000080cb64:	4c 01 d8             	add    rax,r11
ffff80000080cb67:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cb6b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:62
    return 0;
ffff80000080cb6f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:63
}
ffff80000080cb74:	5d                   	pop    rbp
ffff80000080cb75:	c3                   	ret    

ffff80000080cb76 <read_ramfs>:
read_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:65
//注意一下:position是指针
long read_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080cb76:	f3 0f 1e fa          	endbr64 
ffff80000080cb7a:	55                   	push   rbp
ffff80000080cb7b:	48 89 e5             	mov    rbp,rsp
ffff80000080cb7e:	41 57                	push   r15
ffff80000080cb80:	48 83 ec 28          	sub    rsp,0x28
ffff80000080cb84:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cb84 <read_ramfs+0xe>
ffff80000080cb8b:	49 bb ac 0e 11 00 00 	movabs r11,0x110eac
ffff80000080cb92:	00 00 00 
ffff80000080cb95:	4c 01 d8             	add    rax,r11
ffff80000080cb98:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080cb9c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080cba0:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080cba4:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:66
    blkdev_read(filp->dentry->dir_inode->dev,*position,count,buf);
ffff80000080cba8:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080cbac:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080cbaf:	89 d6                	mov    esi,edx
ffff80000080cbb1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080cbb5:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080cbb9:	48 8b 52 40          	mov    rdx,QWORD PTR [rdx+0x40]
ffff80000080cbbd:	0f b7 52 18          	movzx  edx,WORD PTR [rdx+0x18]
ffff80000080cbc1:	0f b7 fa             	movzx  edi,dx
ffff80000080cbc4:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080cbc8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cbcc:	49 89 c7             	mov    r15,rax
ffff80000080cbcf:	49 b8 04 00 ef ff ff 	movabs r8,0xffffffffffef0004
ffff80000080cbd6:	ff ff ff 
ffff80000080cbd9:	49 01 c0             	add    r8,rax
ffff80000080cbdc:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:73
    if(len>count)len=count;
    for(int i=0;i<len;i++){
        buf[i]=_binary_bin_test_elf_start[i + *position];
    }
    *position+=len; */
    return 0;
ffff80000080cbdf:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:74
}
ffff80000080cbe4:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080cbe8:	c9                   	leave  
ffff80000080cbe9:	c3                   	ret    

ffff80000080cbea <write_ramfs>:
write_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:75
long write_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080cbea:	f3 0f 1e fa          	endbr64 
ffff80000080cbee:	55                   	push   rbp
ffff80000080cbef:	48 89 e5             	mov    rbp,rsp
ffff80000080cbf2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cbf2 <write_ramfs+0x8>
ffff80000080cbf9:	49 bb 3e 0e 11 00 00 	movabs r11,0x110e3e
ffff80000080cc00:	00 00 00 
ffff80000080cc03:	4c 01 d8             	add    rax,r11
ffff80000080cc06:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cc0a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080cc0e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080cc12:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:76
    return 0;
ffff80000080cc16:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:77
}
ffff80000080cc1b:	5d                   	pop    rbp
ffff80000080cc1c:	c3                   	ret    

ffff80000080cc1d <ioctl_ramfs>:
ioctl_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:78
long ioctl_ramfs(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080cc1d:	f3 0f 1e fa          	endbr64 
ffff80000080cc21:	55                   	push   rbp
ffff80000080cc22:	48 89 e5             	mov    rbp,rsp
ffff80000080cc25:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cc25 <ioctl_ramfs+0x8>
ffff80000080cc2c:	49 bb 0b 0e 11 00 00 	movabs r11,0x110e0b
ffff80000080cc33:	00 00 00 
ffff80000080cc36:	4c 01 d8             	add    rax,r11
ffff80000080cc39:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cc3d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080cc41:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080cc45:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:79
    return 0;
ffff80000080cc49:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:80
ffff80000080cc4e:	5d                   	pop    rbp
ffff80000080cc4f:	c3                   	ret    

ffff80000080cc50 <ramdisk_do_req>:
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:22
long ramdisk_size;
int dev_ramdisk=-1;
struct blk_dev bd_ramdisk={
    .do_request=ramdisk_do_req
};
void ramdisk_do_req(struct request* req){
ffff80000080cc50:	f3 0f 1e fa          	endbr64 
ffff80000080cc54:	55                   	push   rbp
ffff80000080cc55:	48 89 e5             	mov    rbp,rsp
ffff80000080cc58:	48 83 ec 40          	sub    rsp,0x40
ffff80000080cc5c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cc5c <ramdisk_do_req+0xc>
ffff80000080cc63:	49 bb d4 0d 11 00 00 	movabs r11,0x110dd4
ffff80000080cc6a:	00 00 00 
ffff80000080cc6d:	4c 01 d8             	add    rax,r11
ffff80000080cc70:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:23
    if(!req)
ffff80000080cc74:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080cc79:	0f 84 1b 02 00 00    	je     ffff80000080ce9a <ramdisk_do_req+0x24a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:25
        return;
    start_request(req->dev);
ffff80000080cc7f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cc83:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080cc86:	0f b7 d2             	movzx  edx,dx
ffff80000080cc89:	66 89 55 e6          	mov    WORD PTR [rbp-0x1a],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
    int major=BLKDEV_MAJOR(dev);
    blk_devs[major].current_request->dev=-1;
    blk_devs[major].current_request=blk_devs[major].current_request->next;
}
__attribute__((__always_inline__))inline void start_request(unsigned short dev){
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080cc8d:	0f b7 55 e6          	movzx  edx,WORD PTR [rbp-0x1a]
ffff80000080cc91:	c1 fa 04             	sar    edx,0x4
ffff80000080cc94:	89 d1                	mov    ecx,edx
ffff80000080cc96:	83 e1 0f             	and    ecx,0xf
ffff80000080cc99:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080cca0:	ff ff ff 
ffff80000080cca3:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080cca7:	48 63 d1             	movsxd rdx,ecx
ffff80000080ccaa:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ccae:	48 01 f2             	add    rdx,rsi
ffff80000080ccb1:	48 83 c2 08          	add    rdx,0x8
ffff80000080ccb5:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ccb8:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080ccbc:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:195
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline void wait_on_req(struct process* p){
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080ccc0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ccc4:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080ccc7:	83 fa 02             	cmp    edx,0x2
ffff80000080ccca:	74 0c                	je     ffff80000080ccd8 <ramdisk_do_req+0x88>
ffff80000080cccc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ccd0:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080ccd3:	83 fa 01             	cmp    edx,0x1
ffff80000080ccd6:	75 0b                	jne    ffff80000080cce3 <ramdisk_do_req+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
            p->stat=TASK_SUSPENDED;
ffff80000080ccd8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ccdc:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
}
ffff80000080cce3:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:71
ffff80000080cce4:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:26
    switch (req->cmd)
ffff80000080cce5:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cce9:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080ccec:	85 d2                	test   edx,edx
ffff80000080ccee:	74 0a                	je     ffff80000080ccfa <ramdisk_do_req+0xaa>
ffff80000080ccf0:	83 fa 01             	cmp    edx,0x1
ffff80000080ccf3:	74 6e                	je     ffff80000080cd63 <ramdisk_do_req+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:43
        for(int i=0;i<lenw;i++){
            ramdisk_base[i + basew]=req->buffer[i];
        }
        break;
    default:
        break;
ffff80000080ccf5:	e9 d1 00 00 00       	jmp    ffff80000080cdcb <ramdisk_do_req+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:29
        int len= req->nr_sectors*SECTOR_SIZE;
ffff80000080ccfa:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ccfe:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080cd02:	c1 e2 09             	shl    edx,0x9
ffff80000080cd05:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:30
        int base=req->sector*SECTOR_SIZE;
ffff80000080cd08:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cd0c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080cd10:	c1 e2 09             	shl    edx,0x9
ffff80000080cd13:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31
        for(int i=0;i<len;i++){
ffff80000080cd16:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080cd1d:	eb 3a                	jmp    ffff80000080cd59 <ramdisk_do_req+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:32 (discriminator 3)
            req->buffer[i]=ramdisk_base[i + base];
ffff80000080cd1f:	48 ba e8 ff ff ff ff 	movabs rdx,0xffffffffffffffe8
ffff80000080cd26:	ff ff ff 
ffff80000080cd29:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cd2d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080cd30:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff80000080cd33:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080cd36:	01 f2                	add    edx,esi
ffff80000080cd38:	48 63 d2             	movsxd rdx,edx
ffff80000080cd3b:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080cd3f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cd43:	48 8b 4a 28          	mov    rcx,QWORD PTR [rdx+0x28]
ffff80000080cd47:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080cd4a:	48 63 d2             	movsxd rdx,edx
ffff80000080cd4d:	48 01 d1             	add    rcx,rdx
ffff80000080cd50:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080cd53:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 3)
        for(int i=0;i<len;i++){
ffff80000080cd55:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 1)
ffff80000080cd59:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080cd5c:	3b 55 ec             	cmp    edx,DWORD PTR [rbp-0x14]
ffff80000080cd5f:	7c be                	jl     ffff80000080cd1f <ramdisk_do_req+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:34
        break;
ffff80000080cd61:	eb 68                	jmp    ffff80000080cdcb <ramdisk_do_req+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36
        int lenw= req->nr_sectors*BLOCK_SIZE;
ffff80000080cd63:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cd67:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080cd6b:	c1 e2 0c             	shl    edx,0xc
ffff80000080cd6e:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:37
        int basew=req->sector*BLOCK_SIZE;
ffff80000080cd71:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cd75:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080cd79:	c1 e2 0c             	shl    edx,0xc
ffff80000080cd7c:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38
        for(int i=0;i<lenw;i++){
ffff80000080cd7f:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080cd86:	eb 3a                	jmp    ffff80000080cdc2 <ramdisk_do_req+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:39 (discriminator 3)
            ramdisk_base[i + basew]=req->buffer[i];
ffff80000080cd88:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cd8c:	48 8b 4a 28          	mov    rcx,QWORD PTR [rdx+0x28]
ffff80000080cd90:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080cd93:	48 63 d2             	movsxd rdx,edx
ffff80000080cd96:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080cd9a:	48 ba e8 ff ff ff ff 	movabs rdx,0xffffffffffffffe8
ffff80000080cda1:	ff ff ff 
ffff80000080cda4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cda8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080cdab:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
ffff80000080cdae:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080cdb1:	01 fa                	add    edx,edi
ffff80000080cdb3:	48 63 d2             	movsxd rdx,edx
ffff80000080cdb6:	48 01 d1             	add    rcx,rdx
ffff80000080cdb9:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080cdbc:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 3)
        for(int i=0;i<lenw;i++){
ffff80000080cdbe:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 1)
ffff80000080cdc2:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080cdc5:	3b 55 f4             	cmp    edx,DWORD PTR [rbp-0xc]
ffff80000080cdc8:	7c be                	jl     ffff80000080cd88 <ramdisk_do_req+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:41
        break;
ffff80000080cdca:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:45
    }
    end_request(req->dev);
ffff80000080cdcb:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cdcf:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080cdd2:	0f b7 d2             	movzx  edx,dx
ffff80000080cdd5:	66 89 55 d6          	mov    WORD PTR [rbp-0x2a],dx
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    int major=BLKDEV_MAJOR(dev);
ffff80000080cdd9:	0f b7 55 d6          	movzx  edx,WORD PTR [rbp-0x2a]
ffff80000080cddd:	c1 fa 04             	sar    edx,0x4
ffff80000080cde0:	83 e2 0f             	and    edx,0xf
ffff80000080cde3:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request->dev=-1;
ffff80000080cde6:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080cded:	ff ff ff 
ffff80000080cdf0:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080cdf4:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080cdf7:	48 63 d2             	movsxd rdx,edx
ffff80000080cdfa:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cdfe:	48 01 ca             	add    rdx,rcx
ffff80000080ce01:	48 83 c2 08          	add    rdx,0x8
ffff80000080ce05:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ce08:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080ce0d:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080ce14:	ff ff ff 
ffff80000080ce17:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080ce1b:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080ce1e:	48 63 d2             	movsxd rdx,edx
ffff80000080ce21:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ce25:	48 01 ca             	add    rdx,rcx
ffff80000080ce28:	48 83 c2 08          	add    rdx,0x8
ffff80000080ce2c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ce2f:	48 8b 52 38          	mov    rdx,QWORD PTR [rdx+0x38]
ffff80000080ce33:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080ce3a:	ff ff ff 
ffff80000080ce3d:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080ce41:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
ffff80000080ce44:	48 63 c9             	movsxd rcx,ecx
ffff80000080ce47:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080ce4b:	48 01 f1             	add    rcx,rsi
ffff80000080ce4e:	48 83 c1 08          	add    rcx,0x8
ffff80000080ce52:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:68
}
ffff80000080ce55:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:46
    ramdisk_do_req(blk_devs[dev_ramdisk].current_request);
ffff80000080ce56:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080ce5d:	ff ff ff 
ffff80000080ce60:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ce64:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080ce66:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080ce6d:	ff ff ff 
ffff80000080ce70:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ce74:	48 63 d2             	movsxd rdx,edx
ffff80000080ce77:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ce7b:	48 01 ca             	add    rdx,rcx
ffff80000080ce7e:	48 83 c2 08          	add    rdx,0x8
ffff80000080ce82:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ce85:	48 89 d7             	mov    rdi,rdx
ffff80000080ce88:	48 ba 20 f2 ee ff ff 	movabs rdx,0xffffffffffeef220
ffff80000080ce8f:	ff ff ff 
ffff80000080ce92:	48 8d 04 10          	lea    rax,[rax+rdx*1]
ffff80000080ce96:	ff d0                	call   rax
ffff80000080ce98:	eb 01                	jmp    ffff80000080ce9b <ramdisk_do_req+0x24b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:24
        return;
ffff80000080ce9a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:47
}
ffff80000080ce9b:	c9                   	leave  
ffff80000080ce9c:	c3                   	ret    

ffff80000080ce9d <init_ramdisk>:
init_ramdisk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:48
void init_ramdisk(){
ffff80000080ce9d:	f3 0f 1e fa          	endbr64 
ffff80000080cea1:	55                   	push   rbp
ffff80000080cea2:	48 89 e5             	mov    rbp,rsp
ffff80000080cea5:	41 57                	push   r15
ffff80000080cea7:	41 54                	push   r12
ffff80000080cea9:	53                   	push   rbx
ffff80000080ceaa:	48 83 ec 18          	sub    rsp,0x18
ffff80000080ceae:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ceae <init_ramdisk+0x11>
ffff80000080ceb5:	49 bb 82 0b 11 00 00 	movabs r11,0x110b82
ffff80000080cebc:	00 00 00 
ffff80000080cebf:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:50
    //初始化ramdisk，在/dev下创建一个ram
    ramdisk_base= KNL_BASE+0x81000000;//(char *) kmallocat(0, 100);
ffff80000080cec2:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080cec9:	ff ff ff 
ffff80000080cecc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ced0:	48 be 00 00 00 81 00 	movabs rsi,0xffff800081000000
ffff80000080ced7:	80 ff ff 
ffff80000080ceda:	48 89 30             	mov    QWORD PTR [rax],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:51
    if(ramdisk_base==-1){
ffff80000080cedd:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080cee4:	ff ff ff 
ffff80000080cee7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ceeb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ceee:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
ffff80000080cef2:	75 2d                	jne    ffff80000080cf21 <init_ramdisk+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:52
        comprintf("failed to init ramdisk.\n");
ffff80000080cef4:	48 b8 12 d8 ff ff ff 	movabs rax,0xffffffffffffd812
ffff80000080cefb:	ff ff ff 
ffff80000080cefe:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080cf02:	48 89 c7             	mov    rdi,rax
ffff80000080cf05:	49 89 df             	mov    r15,rbx
ffff80000080cf08:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cf0d:	48 ba dc 4b ef ff ff 	movabs rdx,0xffffffffffef4bdc
ffff80000080cf14:	ff ff ff 
ffff80000080cf17:	48 01 da             	add    rdx,rbx
ffff80000080cf1a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:53
        return;
ffff80000080cf1c:	e9 a3 01 00 00       	jmp    ffff80000080d0c4 <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:55
    }
    ramdisk_size= (char*)_binary_rd_img_end - (char*)_binary_rd_img_start;//PAGE_4K_SIZE*100;
ffff80000080cf21:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080cf28:	ff ff ff 
ffff80000080cf2b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cf2f:	48 89 c2             	mov    rdx,rax
ffff80000080cf32:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff80000080cf39:	ff ff ff 
ffff80000080cf3c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cf40:	48 29 c2             	sub    rdx,rax
ffff80000080cf43:	48 b8 c0 fd ff ff ff 	movabs rax,0xfffffffffffffdc0
ffff80000080cf4a:	ff ff ff 
ffff80000080cf4d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cf51:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:56
    if((dev_ramdisk=reg_blkdev(&bd_ramdisk))<0){
ffff80000080cf54:	48 b8 a8 ff ff ff ff 	movabs rax,0xffffffffffffffa8
ffff80000080cf5b:	ff ff ff 
ffff80000080cf5e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cf62:	48 89 c7             	mov    rdi,rax
ffff80000080cf65:	49 89 df             	mov    r15,rbx
ffff80000080cf68:	48 b8 9f f6 ee ff ff 	movabs rax,0xffffffffffeef69f
ffff80000080cf6f:	ff ff ff 
ffff80000080cf72:	48 01 d8             	add    rax,rbx
ffff80000080cf75:	ff d0                	call   rax
ffff80000080cf77:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080cf7e:	ff ff ff 
ffff80000080cf81:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080cf85:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080cf87:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff80000080cf8e:	ff ff ff 
ffff80000080cf91:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cf95:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080cf97:	85 c0                	test   eax,eax
ffff80000080cf99:	79 2d                	jns    ffff80000080cfc8 <init_ramdisk+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:57
        comprintf("no place for more blkdev.\n");
ffff80000080cf9b:	48 b8 2b d8 ff ff ff 	movabs rax,0xffffffffffffd82b
ffff80000080cfa2:	ff ff ff 
ffff80000080cfa5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080cfa9:	48 89 c7             	mov    rdi,rax
ffff80000080cfac:	49 89 df             	mov    r15,rbx
ffff80000080cfaf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cfb4:	48 ba dc 4b ef ff ff 	movabs rdx,0xffffffffffef4bdc
ffff80000080cfbb:	ff ff ff 
ffff80000080cfbe:	48 01 da             	add    rdx,rbx
ffff80000080cfc1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58
        return;
ffff80000080cfc3:	e9 fc 00 00 00       	jmp    ffff80000080d0c4 <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60
    }
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080cfc8:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080cfcf:	e9 b8 00 00 00       	jmp    ffff80000080d08c <init_ramdisk+0x1ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:61 (discriminator 3)
        smmap(pmalloc(),ramdisk_base+i*PAGE_4K_SIZE,PAGE_PRESENT|PAGE_RWX,PML4_ADDR);
ffff80000080cfd4:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080cfdb:	ff ff ff 
ffff80000080cfde:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cfe2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cfe5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080cfe8:	c1 e0 0c             	shl    eax,0xc
ffff80000080cfeb:	48 98                	cdqe   
ffff80000080cfed:	48 01 d0             	add    rax,rdx
ffff80000080cff0:	49 89 c4             	mov    r12,rax
ffff80000080cff3:	49 89 df             	mov    r15,rbx
ffff80000080cff6:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cffb:	48 ba 0e 51 ee ff ff 	movabs rdx,0xffffffffffee510e
ffff80000080d002:	ff ff ff 
ffff80000080d005:	48 01 da             	add    rdx,rbx
ffff80000080d008:	ff d2                	call   rdx
ffff80000080d00a:	48 89 c7             	mov    rdi,rax
ffff80000080d00d:	48 b8 00 10 10 00 00 	movabs rax,0xffff800000101000
ffff80000080d014:	80 ff ff 
ffff80000080d017:	48 89 c1             	mov    rcx,rax
ffff80000080d01a:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080d01f:	4c 89 e6             	mov    rsi,r12
ffff80000080d022:	49 89 df             	mov    r15,rbx
ffff80000080d025:	48 b8 c9 40 ee ff ff 	movabs rax,0xffffffffffee40c9
ffff80000080d02c:	ff ff ff 
ffff80000080d02f:	48 01 d8             	add    rax,rbx
ffff80000080d032:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:63 (discriminator 3)
        //解压img里面的test程序
        memcpy(ramdisk_base+i*PAGE_4K_SIZE, _binary_rd_img_start+i*PAGE_4K_SIZE,PAGE_4K_SIZE);
ffff80000080d034:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d037:	c1 e0 0c             	shl    eax,0xc
ffff80000080d03a:	48 63 d0             	movsxd rdx,eax
ffff80000080d03d:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff80000080d044:	ff ff ff 
ffff80000080d047:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d04b:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080d04f:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080d056:	ff ff ff 
ffff80000080d059:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d05d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d060:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d063:	c1 e0 0c             	shl    eax,0xc
ffff80000080d066:	48 98                	cdqe   
ffff80000080d068:	48 01 d0             	add    rax,rdx
ffff80000080d06b:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d070:	48 89 ce             	mov    rsi,rcx
ffff80000080d073:	48 89 c7             	mov    rdi,rax
ffff80000080d076:	49 89 df             	mov    r15,rbx
ffff80000080d079:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff80000080d080:	ff ff ff 
ffff80000080d083:	48 01 d8             	add    rax,rbx
ffff80000080d086:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 3)
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080d088:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 1)
ffff80000080d08c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d08f:	48 63 d0             	movsxd rdx,eax
ffff80000080d092:	48 b8 c0 fd ff ff ff 	movabs rax,0xfffffffffffffdc0
ffff80000080d099:	ff ff ff 
ffff80000080d09c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d0a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d0a3:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080d0a9:	48 8d 88 ff 0f 00 00 	lea    rcx,[rax+0xfff]
ffff80000080d0b0:	48 85 c0             	test   rax,rax
ffff80000080d0b3:	48 0f 48 c1          	cmovs  rax,rcx
ffff80000080d0b7:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080d0bb:	48 39 c2             	cmp    rdx,rax
ffff80000080d0be:	0f 8c 10 ff ff ff    	jl     ffff80000080cfd4 <init_ramdisk+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:68

    }

    
}
ffff80000080d0c4:	48 83 c4 18          	add    rsp,0x18
ffff80000080d0c8:	5b                   	pop    rbx
ffff80000080d0c9:	41 5c                	pop    r12
ffff80000080d0cb:	41 5f                	pop    r15
ffff80000080d0cd:	5d                   	pop    rbp
ffff80000080d0ce:	c3                   	ret    

ffff80000080d0cf <reg_blkdev>:
reg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:5
#include <blk_dev.h>
#include <errno.h>
struct blk_dev blk_devs[MAX_BLKDEVS];
struct request requests[MAX_REQUESTS];
int reg_blkdev(struct blk_dev* dev){
ffff80000080d0cf:	f3 0f 1e fa          	endbr64 
ffff80000080d0d3:	55                   	push   rbp
ffff80000080d0d4:	48 89 e5             	mov    rbp,rsp
ffff80000080d0d7:	53                   	push   rbx
ffff80000080d0d8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d0d8 <reg_blkdev+0x9>
ffff80000080d0df:	49 bb 58 09 11 00 00 	movabs r11,0x110958
ffff80000080d0e6:	00 00 00 
ffff80000080d0e9:	4c 01 d8             	add    rax,r11
ffff80000080d0ec:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080d0f0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080d0f7:	e9 80 00 00 00       	jmp    ffff80000080d17c <reg_blkdev+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080d0fc:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d103:	ff ff ff 
ffff80000080d106:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d10a:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d10d:	48 63 d2             	movsxd rdx,edx
ffff80000080d110:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d114:	48 01 ca             	add    rdx,rcx
ffff80000080d117:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d11a:	48 85 d2             	test   rdx,rdx
ffff80000080d11d:	75 58                	jne    ffff80000080d177 <reg_blkdev+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:8
        blk_devs[i]=*dev;
ffff80000080d11f:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d126:	ff ff ff 
ffff80000080d129:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d12d:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d130:	48 63 d2             	movsxd rdx,edx
ffff80000080d133:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d137:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080d13b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d13f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080d142:	48 8b 5a 08          	mov    rbx,QWORD PTR [rdx+0x8]
ffff80000080d146:	48 89 0e             	mov    QWORD PTR [rsi],rcx
ffff80000080d149:	48 89 5e 08          	mov    QWORD PTR [rsi+0x8],rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:9
        blk_devs[i].current_request=NULL;
ffff80000080d14d:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d154:	ff ff ff 
ffff80000080d157:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d15b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080d15e:	48 98                	cdqe   
ffff80000080d160:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d164:	48 01 d0             	add    rax,rdx
ffff80000080d167:	48 83 c0 08          	add    rax,0x8
ffff80000080d16b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:10
        return i;
ffff80000080d172:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080d175:	eb 14                	jmp    ffff80000080d18b <reg_blkdev+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080d177:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080d178:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6 (discriminator 1)
ffff80000080d17c:	83 7d f4 0b          	cmp    DWORD PTR [rbp-0xc],0xb
ffff80000080d180:	0f 8e 76 ff ff ff    	jle    ffff80000080d0fc <reg_blkdev+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:12
    }
    return -ENOMEM;
ffff80000080d186:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:13
}
ffff80000080d18b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080d18f:	c9                   	leave  
ffff80000080d190:	c3                   	ret    

ffff80000080d191 <unreg_blkdev>:
unreg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:14
int unreg_blkdev(unsigned short dev){
ffff80000080d191:	f3 0f 1e fa          	endbr64 
ffff80000080d195:	55                   	push   rbp
ffff80000080d196:	48 89 e5             	mov    rbp,rsp
ffff80000080d199:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d199 <unreg_blkdev+0x8>
ffff80000080d1a0:	49 bb 97 08 11 00 00 	movabs r11,0x110897
ffff80000080d1a7:	00 00 00 
ffff80000080d1aa:	4c 01 d8             	add    rax,r11
ffff80000080d1ad:	89 fa                	mov    edx,edi
ffff80000080d1af:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:15
    if(blk_devs[dev].current_request)
ffff80000080d1b3:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080d1b7:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d1be:	ff ff ff 
ffff80000080d1c1:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d1c5:	48 63 d2             	movsxd rdx,edx
ffff80000080d1c8:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d1cc:	48 01 ca             	add    rdx,rcx
ffff80000080d1cf:	48 83 c2 08          	add    rdx,0x8
ffff80000080d1d3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d1d6:	48 85 d2             	test   rdx,rdx
ffff80000080d1d9:	74 07                	je     ffff80000080d1e2 <unreg_blkdev+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:16
        return -EBUSY;//设备还有没完成的请求
ffff80000080d1db:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
ffff80000080d1e0:	eb 23                	jmp    ffff80000080d205 <unreg_blkdev+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:17
    blk_devs[dev].do_request=0;//清除
ffff80000080d1e2:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080d1e6:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d1ed:	ff ff ff 
ffff80000080d1f0:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d1f4:	48 63 c2             	movsxd rax,edx
ffff80000080d1f7:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d1fb:	48 01 c8             	add    rax,rcx
ffff80000080d1fe:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:18
}
ffff80000080d205:	5d                   	pop    rbp
ffff80000080d206:	c3                   	ret    

ffff80000080d207 <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:19
int make_request(unsigned short dev,int cmd,unsigned long sector, unsigned long count,char * buffer){
ffff80000080d207:	f3 0f 1e fa          	endbr64 
ffff80000080d20b:	55                   	push   rbp
ffff80000080d20c:	48 89 e5             	mov    rbp,rsp
ffff80000080d20f:	48 83 ec 40          	sub    rsp,0x40
ffff80000080d213:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d213 <make_request+0xc>
ffff80000080d21a:	49 bb 1d 08 11 00 00 	movabs r11,0x11081d
ffff80000080d221:	00 00 00 
ffff80000080d224:	4c 01 d8             	add    rax,r11
ffff80000080d227:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d22a:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff80000080d22e:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffff80000080d232:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
ffff80000080d236:	89 fa                	mov    edx,edi
ffff80000080d238:	66 89 55 dc          	mov    WORD PTR [rbp-0x24],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:20
    struct blk_dev* d=&blk_devs[BLKDEV_MAJOR(dev)];
ffff80000080d23c:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d240:	c1 fa 04             	sar    edx,0x4
ffff80000080d243:	83 e2 0f             	and    edx,0xf
ffff80000080d246:	48 63 d2             	movsxd rdx,edx
ffff80000080d249:	48 89 d1             	mov    rcx,rdx
ffff80000080d24c:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080d250:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d257:	ff ff ff 
ffff80000080d25a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d25e:	48 01 ca             	add    rdx,rcx
ffff80000080d261:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:21
    if(!d->do_request)
ffff80000080d265:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d269:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d26c:	48 85 d2             	test   rdx,rdx
ffff80000080d26f:	75 0a                	jne    ffff80000080d27b <make_request+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:22
        return -ENODEV;//没有这个设备
ffff80000080d271:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080d276:	e9 53 01 00 00       	jmp    ffff80000080d3ce <make_request+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:24
    //找一个空的请求
    struct request* req=NULL;
ffff80000080d27b:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d282:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d283:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080d28a:	eb 4c                	jmp    ffff80000080d2d8 <make_request+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:26
        if(requests[i].dev==(unsigned short)-1){
ffff80000080d28c:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff80000080d293:	ff ff ff 
ffff80000080d296:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d29a:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d29d:	48 63 d2             	movsxd rdx,edx
ffff80000080d2a0:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080d2a4:	48 01 ca             	add    rdx,rcx
ffff80000080d2a7:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080d2aa:	66 83 fa ff          	cmp    dx,0xffff
ffff80000080d2ae:	75 24                	jne    ffff80000080d2d4 <make_request+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:27
            req=requests+i;
ffff80000080d2b0:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d2b3:	48 63 d2             	movsxd rdx,edx
ffff80000080d2b6:	48 89 d1             	mov    rcx,rdx
ffff80000080d2b9:	48 c1 e1 06          	shl    rcx,0x6
ffff80000080d2bd:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff80000080d2c4:	ff ff ff 
ffff80000080d2c7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d2cb:	48 01 ca             	add    rdx,rcx
ffff80000080d2ce:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:28
            break;
ffff80000080d2d2:	eb 0a                	jmp    ffff80000080d2de <make_request+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 2)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d2d4:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 1)
ffff80000080d2d8:	83 7d f4 3f          	cmp    DWORD PTR [rbp-0xc],0x3f
ffff80000080d2dc:	7e ae                	jle    ffff80000080d28c <make_request+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:32
        }
    }
    //下面的处理不太好。感觉最好是等到有空位置为止。
    if(!req)
ffff80000080d2de:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080d2e3:	75 0a                	jne    ffff80000080d2ef <make_request+0xe8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:33
        return -ENOMEM;//没有空的请求位置。
ffff80000080d2e5:	b8 cf ff ff ff       	mov    eax,0xffffffcf
ffff80000080d2ea:	e9 df 00 00 00       	jmp    ffff80000080d3ce <make_request+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:38
    /*
    检查有没有请求正在运行，有的话接到后面，没有的话直接接上去，前面请求完成之后顺着链表下一个，
    这样就能保证所有请求都可以被访问到。
    */
    req->dev=dev;
ffff80000080d2ef:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d2f3:	0f b7 4d dc          	movzx  ecx,WORD PTR [rbp-0x24]
ffff80000080d2f7:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:39
    req->cmd=cmd;
ffff80000080d2fa:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d2fe:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080d301:	89 4a 04             	mov    DWORD PTR [rdx+0x4],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:40
    req->buffer=buffer;
ffff80000080d304:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d308:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080d30c:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:41
    req->count=count;
ffff80000080d310:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d314:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080d318:	48 89 4a 20          	mov    QWORD PTR [rdx+0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:42
    req->next=NULL;
ffff80000080d31c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d320:	48 c7 42 38 00 00 00 	mov    QWORD PTR [rdx+0x38],0x0
ffff80000080d327:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:43
    req->nr_sectors=TO_BLKN(count);
ffff80000080d328:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d32c:	48 81 c2 ff 0f 00 00 	add    rdx,0xfff
ffff80000080d333:	48 89 d1             	mov    rcx,rdx
ffff80000080d336:	48 c1 e9 0c          	shr    rcx,0xc
ffff80000080d33a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d33e:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:44
    req->sector=sector;
ffff80000080d342:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d346:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080d34a:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:45
    req->waiting=current;
ffff80000080d34e:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080d355:	ff ff ff 
ffff80000080d358:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d35c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d35f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d363:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:47
    //这里可能不需要阻塞进程，有的设备不需要阻塞。    
    if(!d->current_request)
ffff80000080d367:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d36b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d36f:	48 85 c0             	test   rax,rax
ffff80000080d372:	75 22                	jne    ffff80000080d396 <make_request+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:49
    {
        d->current_request=req;
ffff80000080d374:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d378:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d37c:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:50
        d->do_request(d->current_request);
ffff80000080d380:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d384:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d387:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d38b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d38f:	48 89 c7             	mov    rdi,rax
ffff80000080d392:	ff d2                	call   rdx
ffff80000080d394:	eb 33                	jmp    ffff80000080d3c9 <make_request+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:52
    }else{
        struct request* rp=d->current_request;
ffff80000080d396:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d39a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d39e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53
        for(;rp->next;rp=rp->next);
ffff80000080d3a2:	eb 0c                	jmp    ffff80000080d3b0 <make_request+0x1a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 2)
ffff80000080d3a4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d3a8:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080d3ac:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 1)
ffff80000080d3b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d3b4:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080d3b8:	48 85 c0             	test   rax,rax
ffff80000080d3bb:	75 e7                	jne    ffff80000080d3a4 <make_request+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:54
        rp->next=req;
ffff80000080d3bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d3c1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d3c5:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:56
    }
    return 1;
ffff80000080d3c9:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:57
}
ffff80000080d3ce:	c9                   	leave  
ffff80000080d3cf:	c3                   	ret    

ffff80000080d3d0 <init_blkdev>:
init_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:58
void init_blkdev(void){
ffff80000080d3d0:	f3 0f 1e fa          	endbr64 
ffff80000080d3d4:	55                   	push   rbp
ffff80000080d3d5:	48 89 e5             	mov    rbp,rsp
ffff80000080d3d8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d3d8 <init_blkdev+0x8>
ffff80000080d3df:	49 bb 58 06 11 00 00 	movabs r11,0x110658
ffff80000080d3e6:	00 00 00 
ffff80000080d3e9:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d3ec:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080d3f3:	eb 24                	jmp    ffff80000080d419 <init_blkdev+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:60 (discriminator 3)
        requests[i].dev=-1;
ffff80000080d3f5:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff80000080d3fc:	ff ff ff 
ffff80000080d3ff:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d403:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d406:	48 63 d2             	movsxd rdx,edx
ffff80000080d409:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080d40d:	48 01 ca             	add    rdx,rcx
ffff80000080d410:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 3)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d415:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 1)
ffff80000080d419:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff80000080d41d:	7e d6                	jle    ffff80000080d3f5 <init_blkdev+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:62
    }
ffff80000080d41f:	90                   	nop
ffff80000080d420:	90                   	nop
ffff80000080d421:	5d                   	pop    rbp
ffff80000080d422:	c3                   	ret    

ffff80000080d423 <init_blkbuf>:
init_blkbuf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:9
#include <errno.h>
#include <memory.h>
buffer_head l_buffer_heads[MAX_BUFFERHEADS];
//这个存储的是各个块设备映射的缓冲区链表中的头
buffer_head* l_blk_bh_heads[MAX_BLKDEVS];
void init_blkbuf(){
ffff80000080d423:	f3 0f 1e fa          	endbr64 
ffff80000080d427:	55                   	push   rbp
ffff80000080d428:	48 89 e5             	mov    rbp,rsp
ffff80000080d42b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d42b <init_blkbuf+0x8>
ffff80000080d432:	49 bb 05 06 11 00 00 	movabs r11,0x110605
ffff80000080d439:	00 00 00 
ffff80000080d43c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d43f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080d446:	eb 44                	jmp    ffff80000080d48c <init_blkbuf+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:11 (discriminator 3)
        l_buffer_heads[i].dev=-1;
ffff80000080d448:	48 ba e0 fd ff ff ff 	movabs rdx,0xfffffffffffffde0
ffff80000080d44f:	ff ff ff 
ffff80000080d452:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d456:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d459:	48 63 d2             	movsxd rdx,edx
ffff80000080d45c:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080d460:	48 01 ca             	add    rdx,rcx
ffff80000080d463:	48 83 c2 10          	add    rdx,0x10
ffff80000080d467:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:12 (discriminator 3)
        l_blk_bh_heads[i]=NULL;
ffff80000080d46c:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080d473:	ff ff ff 
ffff80000080d476:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d47a:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080d47d:	48 63 c9             	movsxd rcx,ecx
ffff80000080d480:	48 c7 04 ca 00 00 00 	mov    QWORD PTR [rdx+rcx*8],0x0
ffff80000080d487:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 3)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d488:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 1)
ffff80000080d48c:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff80000080d490:	7e b6                	jle    ffff80000080d448 <init_blkbuf+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:14
    }
}
ffff80000080d492:	90                   	nop
ffff80000080d493:	90                   	nop
ffff80000080d494:	5d                   	pop    rbp
ffff80000080d495:	c3                   	ret    

ffff80000080d496 <bget>:
bget():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:15
buffer_head *bget(){
ffff80000080d496:	f3 0f 1e fa          	endbr64 
ffff80000080d49a:	55                   	push   rbp
ffff80000080d49b:	48 89 e5             	mov    rbp,rsp
ffff80000080d49e:	41 57                	push   r15
ffff80000080d4a0:	53                   	push   rbx
ffff80000080d4a1:	48 83 ec 10          	sub    rsp,0x10
ffff80000080d4a5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d4a5 <bget+0xf>
ffff80000080d4ac:	49 bb 8b 05 11 00 00 	movabs r11,0x11058b
ffff80000080d4b3:	00 00 00 
ffff80000080d4b6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d4b9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080d4c0:	e9 a2 00 00 00       	jmp    ffff80000080d567 <bget+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:17
        if(l_buffer_heads[i].dev==(unsigned short)-1)
ffff80000080d4c5:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff80000080d4cc:	ff ff ff 
ffff80000080d4cf:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080d4d3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d4d6:	48 98                	cdqe   
ffff80000080d4d8:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d4dc:	48 01 d0             	add    rax,rdx
ffff80000080d4df:	48 83 c0 10          	add    rax,0x10
ffff80000080d4e3:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080d4e6:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080d4ea:	75 77                	jne    ffff80000080d563 <bget+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:19
        {
            l_buffer_heads[i].data=kmalloc();
ffff80000080d4ec:	49 89 df             	mov    r15,rbx
ffff80000080d4ef:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d4f4:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff80000080d4fb:	ff ff ff 
ffff80000080d4fe:	48 01 da             	add    rdx,rbx
ffff80000080d501:	ff d2                	call   rdx
ffff80000080d503:	48 89 c2             	mov    rdx,rax
ffff80000080d506:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff80000080d50d:	ff ff ff 
ffff80000080d510:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080d514:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d517:	48 98                	cdqe   
ffff80000080d519:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d51d:	48 01 c8             	add    rax,rcx
ffff80000080d520:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:20
            l_buffer_heads[i].count=0;
ffff80000080d523:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff80000080d52a:	ff ff ff 
ffff80000080d52d:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080d531:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d534:	48 98                	cdqe   
ffff80000080d536:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d53a:	48 01 d0             	add    rax,rdx
ffff80000080d53d:	48 83 c0 14          	add    rax,0x14
ffff80000080d541:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:21
            return l_buffer_heads+i;
ffff80000080d544:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d547:	48 98                	cdqe   
ffff80000080d549:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d54d:	48 89 c2             	mov    rdx,rax
ffff80000080d550:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff80000080d557:	ff ff ff 
ffff80000080d55a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d55e:	48 01 d0             	add    rax,rdx
ffff80000080d561:	eb 13                	jmp    ffff80000080d576 <bget+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 2)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d563:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 1)
ffff80000080d567:	83 7d ec 7f          	cmp    DWORD PTR [rbp-0x14],0x7f
ffff80000080d56b:	0f 8e 54 ff ff ff    	jle    ffff80000080d4c5 <bget+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:25
        }
    }
    //errno = -ENOBUF
    return NULL;
ffff80000080d571:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:26
}
ffff80000080d576:	48 83 c4 10          	add    rsp,0x10
ffff80000080d57a:	5b                   	pop    rbx
ffff80000080d57b:	41 5f                	pop    r15
ffff80000080d57d:	5d                   	pop    rbp
ffff80000080d57e:	c3                   	ret    

ffff80000080d57f <get_block>:
get_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:28

buffer_head *get_block(unsigned short dev,int blocknr){
ffff80000080d57f:	f3 0f 1e fa          	endbr64 
ffff80000080d583:	55                   	push   rbp
ffff80000080d584:	48 89 e5             	mov    rbp,rsp
ffff80000080d587:	41 57                	push   r15
ffff80000080d589:	53                   	push   rbx
ffff80000080d58a:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d58e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d58e <get_block+0xf>
ffff80000080d595:	49 bb a2 04 11 00 00 	movabs r11,0x1104a2
ffff80000080d59c:	00 00 00 
ffff80000080d59f:	4c 01 db             	add    rbx,r11
ffff80000080d5a2:	89 f8                	mov    eax,edi
ffff80000080d5a4:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d5a7:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:29
    buffer_head *bh=l_blk_bh_heads[BLKDEV_MAJOR(dev)];
ffff80000080d5ab:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d5af:	c1 f8 04             	sar    eax,0x4
ffff80000080d5b2:	83 e0 0f             	and    eax,0xf
ffff80000080d5b5:	89 c2                	mov    edx,eax
ffff80000080d5b7:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080d5be:	ff ff ff 
ffff80000080d5c1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d5c5:	48 63 d2             	movsxd rdx,edx
ffff80000080d5c8:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080d5cc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:30
    if(!bh){
ffff80000080d5d0:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d5d5:	75 7c                	jne    ffff80000080d653 <get_block+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:32
        //这个设备没有任何的缓冲区
        bh=bget();
ffff80000080d5d7:	49 89 df             	mov    r15,rbx
ffff80000080d5da:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d5df:	48 ba 66 fa ee ff ff 	movabs rdx,0xffffffffffeefa66
ffff80000080d5e6:	ff ff ff 
ffff80000080d5e9:	48 01 da             	add    rdx,rbx
ffff80000080d5ec:	ff d2                	call   rdx
ffff80000080d5ee:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:33
        if(!bh){
ffff80000080d5f2:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d5f7:	75 0a                	jne    ffff80000080d603 <get_block+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:35
            //errno=-ENOBUFS
            return NULL;
ffff80000080d5f9:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d5fe:	e9 f0 00 00 00       	jmp    ffff80000080d6f3 <get_block+0x174>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:37
        }
        bh->dev=dev;
ffff80000080d603:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d607:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d60b:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:38
        bh->blocknr=blocknr;
ffff80000080d60f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d612:	48 63 d0             	movsxd rdx,eax
ffff80000080d615:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d619:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:39
        l_blk_bh_heads[BLKDEV_MAJOR(dev)]=bh;
ffff80000080d61d:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d621:	c1 f8 04             	sar    eax,0x4
ffff80000080d624:	83 e0 0f             	and    eax,0xf
ffff80000080d627:	89 c2                	mov    edx,eax
ffff80000080d629:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080d630:	ff ff ff 
ffff80000080d633:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d637:	48 63 d2             	movsxd rdx,edx
ffff80000080d63a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d63e:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffff80000080d642:	e9 96 00 00 00       	jmp    ffff80000080d6dd <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 3)
    }else{
        for(;bh->next&&bh->blocknr!=blocknr;bh=bh->next);
ffff80000080d647:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d64b:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d64f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 1)
ffff80000080d653:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d657:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d65b:	48 85 c0             	test   rax,rax
ffff80000080d65e:	74 12                	je     ffff80000080d672 <get_block+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 2)
ffff80000080d660:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d664:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080d668:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d66b:	48 98                	cdqe   
ffff80000080d66d:	48 39 c2             	cmp    rdx,rax
ffff80000080d670:	75 d5                	jne    ffff80000080d647 <get_block+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:42
        if(bh->blocknr!=blocknr)
ffff80000080d672:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d676:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080d67a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d67d:	48 98                	cdqe   
ffff80000080d67f:	48 39 c2             	cmp    rdx,rax
ffff80000080d682:	74 59                	je     ffff80000080d6dd <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:46
        {
            //这块数据没有缓冲
            //这个时候肯定处于链表最后一个了
            bh->next=bget();
ffff80000080d684:	49 89 df             	mov    r15,rbx
ffff80000080d687:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d68c:	48 ba 66 fa ee ff ff 	movabs rdx,0xffffffffffeefa66
ffff80000080d693:	ff ff ff 
ffff80000080d696:	48 01 da             	add    rdx,rbx
ffff80000080d699:	ff d2                	call   rdx
ffff80000080d69b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d69f:	48 89 42 28          	mov    QWORD PTR [rdx+0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:47
            buffer_head *bhn=bh->next;
ffff80000080d6a3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d6a7:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d6ab:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:48
            bhn->prev=bh;
ffff80000080d6af:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d6b3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d6b7:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:49
            bh=bhn;
ffff80000080d6bb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d6bf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:50
            bh->dev=dev;
ffff80000080d6c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d6c7:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d6cb:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:51
            bh->blocknr=blocknr;
ffff80000080d6cf:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d6d2:	48 63 d0             	movsxd rdx,eax
ffff80000080d6d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d6d9:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:55
        }
    }
    //TODO 等待缓冲解锁
    bh->count++;
ffff80000080d6dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d6e1:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080d6e5:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080d6e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d6ec:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:56
    return bh;
ffff80000080d6ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:57
}
ffff80000080d6f3:	48 83 c4 20          	add    rsp,0x20
ffff80000080d6f7:	5b                   	pop    rbx
ffff80000080d6f8:	41 5f                	pop    r15
ffff80000080d6fa:	5d                   	pop    rbp
ffff80000080d6fb:	c3                   	ret    

ffff80000080d6fc <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:59
//从指定的块设备中读取一块数据，然后返回这块数据。
buffer_head* bread(unsigned short dev,int blkn){
ffff80000080d6fc:	f3 0f 1e fa          	endbr64 
ffff80000080d700:	55                   	push   rbp
ffff80000080d701:	48 89 e5             	mov    rbp,rsp
ffff80000080d704:	41 57                	push   r15
ffff80000080d706:	53                   	push   rbx
ffff80000080d707:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d70b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d70b <bread+0xf>
ffff80000080d712:	49 bb 25 03 11 00 00 	movabs r11,0x110325
ffff80000080d719:	00 00 00 
ffff80000080d71c:	4c 01 db             	add    rbx,r11
ffff80000080d71f:	89 f8                	mov    eax,edi
ffff80000080d721:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d724:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:60
    if(!blk_devs[BLKDEV_MAJOR(dev)].do_request)
ffff80000080d728:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d72c:	c1 f8 04             	sar    eax,0x4
ffff80000080d72f:	83 e0 0f             	and    eax,0xf
ffff80000080d732:	89 c2                	mov    edx,eax
ffff80000080d734:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080d73b:	ff ff ff 
ffff80000080d73e:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080d742:	48 63 c2             	movsxd rax,edx
ffff80000080d745:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d749:	48 01 c8             	add    rax,rcx
ffff80000080d74c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d74f:	48 85 c0             	test   rax,rax
ffff80000080d752:	75 07                	jne    ffff80000080d75b <bread+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:61
        return NULL;
ffff80000080d754:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d759:	eb 7a                	jmp    ffff80000080d7d5 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:62
    buffer_head *bh=get_block(dev,blkn);
ffff80000080d75b:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d75f:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080d762:	89 d6                	mov    esi,edx
ffff80000080d764:	89 c7                	mov    edi,eax
ffff80000080d766:	49 89 df             	mov    r15,rbx
ffff80000080d769:	48 b8 4f fb ee ff ff 	movabs rax,0xffffffffffeefb4f
ffff80000080d770:	ff ff ff 
ffff80000080d773:	48 01 d8             	add    rax,rbx
ffff80000080d776:	ff d0                	call   rax
ffff80000080d778:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:63
    if(!bh)
ffff80000080d77c:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d781:	75 07                	jne    ffff80000080d78a <bread+0x8e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:64
        return NULL;
ffff80000080d783:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d788:	eb 4b                	jmp    ffff80000080d7d5 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:65
    if(bh->uptodate)
ffff80000080d78a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d78e:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
ffff80000080d792:	84 c0                	test   al,al
ffff80000080d794:	74 06                	je     ffff80000080d79c <bread+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:66
        return bh;//数据没变，可以直接返回
ffff80000080d796:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d79a:	eb 39                	jmp    ffff80000080d7d5 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:69
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(dev,BLKDEV_REQ_READ,blkn*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080d79c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7a0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080d7a3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d7a6:	c1 e0 03             	shl    eax,0x3
ffff80000080d7a9:	48 63 d0             	movsxd rdx,eax
ffff80000080d7ac:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d7b0:	49 89 c8             	mov    r8,rcx
ffff80000080d7b3:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080d7b8:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d7bd:	89 c7                	mov    edi,eax
ffff80000080d7bf:	49 89 df             	mov    r15,rbx
ffff80000080d7c2:	48 b8 d7 f7 ee ff ff 	movabs rax,0xffffffffffeef7d7
ffff80000080d7c9:	ff ff ff 
ffff80000080d7cc:	48 01 d8             	add    rax,rbx
ffff80000080d7cf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:71
    //TODO 等待读取完成
    return bh;
ffff80000080d7d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:72
}
ffff80000080d7d5:	48 83 c4 20          	add    rsp,0x20
ffff80000080d7d9:	5b                   	pop    rbx
ffff80000080d7da:	41 5f                	pop    r15
ffff80000080d7dc:	5d                   	pop    rbp
ffff80000080d7dd:	c3                   	ret    

ffff80000080d7de <bwrite>:
bwrite():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:77
/*
向缓冲区写入数据。注意缓冲区的大小固定BLOCK_SIZE。
这会使得dirty置位。
*/
int bwrite(buffer_head* bh,char* src,int pos,int count){
ffff80000080d7de:	f3 0f 1e fa          	endbr64 
ffff80000080d7e2:	55                   	push   rbp
ffff80000080d7e3:	48 89 e5             	mov    rbp,rsp
ffff80000080d7e6:	41 57                	push   r15
ffff80000080d7e8:	48 83 ec 28          	sub    rsp,0x28
ffff80000080d7ec:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d7ec <bwrite+0xe>
ffff80000080d7f3:	49 bb 44 02 11 00 00 	movabs r11,0x110244
ffff80000080d7fa:	00 00 00 
ffff80000080d7fd:	4c 01 d8             	add    rax,r11
ffff80000080d800:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080d804:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d808:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080d80b:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:78
    if(!bh)
ffff80000080d80e:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d813:	75 07                	jne    ffff80000080d81c <bwrite+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:79
        return -ENOBUFS;
ffff80000080d815:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080d81a:	eb 5d                	jmp    ffff80000080d879 <bwrite+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:80
    if (count+pos>BLOCK_SIZE)
ffff80000080d81c:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080d81f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d822:	01 ca                	add    edx,ecx
ffff80000080d824:	81 fa 00 10 00 00    	cmp    edx,0x1000
ffff80000080d82a:	7e 0b                	jle    ffff80000080d837 <bwrite+0x59>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:81
        count=BLOCK_SIZE-pos;//truncate
ffff80000080d82c:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d831:	2b 55 dc             	sub    edx,DWORD PTR [rbp-0x24]
ffff80000080d834:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:82
    memcpy(bh->data+pos,src,count);
ffff80000080d837:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080d83a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d83e:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff80000080d841:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff80000080d844:	48 63 c9             	movsxd rcx,ecx
ffff80000080d847:	48 8d 3c 0e          	lea    rdi,[rsi+rcx*1]
ffff80000080d84b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080d84f:	48 89 ce             	mov    rsi,rcx
ffff80000080d852:	49 89 c7             	mov    r15,rax
ffff80000080d855:	48 b9 7d 50 ef ff ff 	movabs rcx,0xffffffffffef507d
ffff80000080d85c:	ff ff ff 
ffff80000080d85f:	48 01 c1             	add    rcx,rax
ffff80000080d862:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:83
    bh->dirt=1;
ffff80000080d864:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d868:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:84
    bh->uptodate=0;
ffff80000080d86c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d870:	c6 40 12 00          	mov    BYTE PTR [rax+0x12],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:85
    return 1;
ffff80000080d874:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:86
}
ffff80000080d879:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d87d:	c9                   	leave  
ffff80000080d87e:	c3                   	ret    

ffff80000080d87f <bflush>:
bflush():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:90
/*
立即把缓冲区里面的更新应用到块设备上。
*/
int bflush(buffer_head* bh){
ffff80000080d87f:	f3 0f 1e fa          	endbr64 
ffff80000080d883:	55                   	push   rbp
ffff80000080d884:	48 89 e5             	mov    rbp,rsp
ffff80000080d887:	41 57                	push   r15
ffff80000080d889:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d88d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d88d <bflush+0xe>
ffff80000080d894:	49 bb a3 01 11 00 00 	movabs r11,0x1101a3
ffff80000080d89b:	00 00 00 
ffff80000080d89e:	4c 01 d8             	add    rax,r11
ffff80000080d8a1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:91
    if(!blk_devs[bh->dev].do_request)
ffff80000080d8a5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d8a9:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080d8ad:	0f b7 d2             	movzx  edx,dx
ffff80000080d8b0:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d8b7:	ff ff ff 
ffff80000080d8ba:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d8be:	48 63 d2             	movsxd rdx,edx
ffff80000080d8c1:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d8c5:	48 01 ca             	add    rdx,rcx
ffff80000080d8c8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d8cb:	48 85 d2             	test   rdx,rdx
ffff80000080d8ce:	75 07                	jne    ffff80000080d8d7 <bflush+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:92
        return -ENODEV;
ffff80000080d8d0:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080d8d5:	eb 5a                	jmp    ffff80000080d931 <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:93
    if(!bh->dirt)
ffff80000080d8d7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d8db:	0f b6 52 13          	movzx  edx,BYTE PTR [rdx+0x13]
ffff80000080d8df:	84 d2                	test   dl,dl
ffff80000080d8e1:	75 07                	jne    ffff80000080d8ea <bflush+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:94
        return 1;
ffff80000080d8e3:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080d8e8:	eb 47                	jmp    ffff80000080d931 <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:95
    make_request(bh->dev,BLKDEV_REQ_WRITE,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080d8ea:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d8ee:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080d8f1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d8f5:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080d8f9:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080d8fd:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080d901:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d905:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080d909:	0f b7 f9             	movzx  edi,cx
ffff80000080d90c:	49 89 f0             	mov    r8,rsi
ffff80000080d90f:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080d914:	be 01 00 00 00       	mov    esi,0x1
ffff80000080d919:	49 89 c7             	mov    r15,rax
ffff80000080d91c:	49 b9 d7 f7 ee ff ff 	movabs r9,0xffffffffffeef7d7
ffff80000080d923:	ff ff ff 
ffff80000080d926:	49 01 c1             	add    r9,rax
ffff80000080d929:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:97
    //这个不用等
    return 1;
ffff80000080d92c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:98
}
ffff80000080d931:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d935:	c9                   	leave  
ffff80000080d936:	c3                   	ret    

ffff80000080d937 <bdiscard>:
bdiscard():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:100
//丢弃更改。
int bdiscard(buffer_head *bh){
ffff80000080d937:	f3 0f 1e fa          	endbr64 
ffff80000080d93b:	55                   	push   rbp
ffff80000080d93c:	48 89 e5             	mov    rbp,rsp
ffff80000080d93f:	41 57                	push   r15
ffff80000080d941:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d945:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d945 <bdiscard+0xe>
ffff80000080d94c:	49 bb eb 00 11 00 00 	movabs r11,0x1100eb
ffff80000080d953:	00 00 00 
ffff80000080d956:	4c 01 d8             	add    rax,r11
ffff80000080d959:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:101
    if(bh->dev==-1||!blk_devs[bh->dev].do_request)
ffff80000080d95d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d961:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080d965:	0f b7 d2             	movzx  edx,dx
ffff80000080d968:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d96f:	ff ff ff 
ffff80000080d972:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d976:	48 63 d2             	movsxd rdx,edx
ffff80000080d979:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d97d:	48 01 ca             	add    rdx,rcx
ffff80000080d980:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d983:	48 85 d2             	test   rdx,rdx
ffff80000080d986:	75 07                	jne    ffff80000080d98f <bdiscard+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:102
        return -ENODEV;
ffff80000080d988:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080d98d:	eb 5a                	jmp    ffff80000080d9e9 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:104
    
    if(bh->uptodate)
ffff80000080d98f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d993:	0f b6 52 12          	movzx  edx,BYTE PTR [rdx+0x12]
ffff80000080d997:	84 d2                	test   dl,dl
ffff80000080d999:	74 07                	je     ffff80000080d9a2 <bdiscard+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:105
        return 1;//数据没变，可以直接返回
ffff80000080d99b:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080d9a0:	eb 47                	jmp    ffff80000080d9e9 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:108
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(bh->dev,BLKDEV_REQ_READ,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080d9a2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d9a6:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080d9a9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d9ad:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080d9b1:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080d9b5:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080d9b9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d9bd:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080d9c1:	0f b7 f9             	movzx  edi,cx
ffff80000080d9c4:	49 89 f0             	mov    r8,rsi
ffff80000080d9c7:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080d9cc:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d9d1:	49 89 c7             	mov    r15,rax
ffff80000080d9d4:	49 b9 d7 f7 ee ff ff 	movabs r9,0xffffffffffeef7d7
ffff80000080d9db:	ff ff ff 
ffff80000080d9de:	49 01 c1             	add    r9,rax
ffff80000080d9e1:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:110
    //TODO 等待读取完成
    return 1;
ffff80000080d9e4:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:111
}
ffff80000080d9e9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d9ed:	c9                   	leave  
ffff80000080d9ee:	c3                   	ret    

ffff80000080d9ef <bupdate>:
bupdate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:113

int bupdate(buffer_head *bh){
ffff80000080d9ef:	f3 0f 1e fa          	endbr64 
ffff80000080d9f3:	55                   	push   rbp
ffff80000080d9f4:	48 89 e5             	mov    rbp,rsp
ffff80000080d9f7:	41 57                	push   r15
ffff80000080d9f9:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d9fd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d9fd <bupdate+0xe>
ffff80000080da04:	49 bb 33 00 11 00 00 	movabs r11,0x110033
ffff80000080da0b:	00 00 00 
ffff80000080da0e:	4c 01 d8             	add    rax,r11
ffff80000080da11:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:114
    return bdiscard(bh);
ffff80000080da15:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da19:	48 89 d7             	mov    rdi,rdx
ffff80000080da1c:	49 89 c7             	mov    r15,rax
ffff80000080da1f:	48 ba 07 ff ee ff ff 	movabs rdx,0xffffffffffeeff07
ffff80000080da26:	ff ff ff 
ffff80000080da29:	48 01 c2             	add    rdx,rax
ffff80000080da2c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:115
}
ffff80000080da2e:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080da32:	c9                   	leave  
ffff80000080da33:	c3                   	ret    

ffff80000080da34 <blkdev_read>:
blkdev_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:119
/*
bread的更高级封装，可以不以块为单位读取到buf。
*/
int blkdev_read(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080da34:	f3 0f 1e fa          	endbr64 
ffff80000080da38:	55                   	push   rbp
ffff80000080da39:	48 89 e5             	mov    rbp,rsp
ffff80000080da3c:	41 57                	push   r15
ffff80000080da3e:	53                   	push   rbx
ffff80000080da3f:	48 83 ec 50          	sub    rsp,0x50
ffff80000080da43:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080da43 <blkdev_read+0xf>
ffff80000080da4a:	49 bb ed ff 10 00 00 	movabs r11,0x10ffed
ffff80000080da51:	00 00 00 
ffff80000080da54:	4c 01 db             	add    rbx,r11
ffff80000080da57:	89 f8                	mov    eax,edi
ffff80000080da59:	89 75 b8             	mov    DWORD PTR [rbp-0x48],esi
ffff80000080da5c:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffff80000080da60:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffff80000080da64:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:120
    int n=TO_BLKN(count);
ffff80000080da68:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080da6c:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080da72:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080da76:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:121
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080da79:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080da7c:	99                   	cdq    
ffff80000080da7d:	c1 ea 14             	shr    edx,0x14
ffff80000080da80:	01 d0                	add    eax,edx
ffff80000080da82:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080da87:	29 d0                	sub    eax,edx
ffff80000080da89:	89 c2                	mov    edx,eax
ffff80000080da8b:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080da8e:	29 d0                	sub    eax,edx
ffff80000080da90:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:122
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080da93:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080da96:	99                   	cdq    
ffff80000080da97:	c1 ea 14             	shr    edx,0x14
ffff80000080da9a:	01 d0                	add    eax,edx
ffff80000080da9c:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080daa1:	29 d0                	sub    eax,edx
ffff80000080daa3:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:123
    char* p=buf;
ffff80000080daa6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080daaa:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:124
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080daae:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dab2:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dab7:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:125
    int len=BLOCK_SIZE-first_off;
ffff80000080dabb:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080dac0:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080dac3:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126
    for(int i=0;i<n;i++){
ffff80000080dac6:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080dacd:	e9 b1 00 00 00       	jmp    ffff80000080db83 <blkdev_read+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:127
        buffer_head *bh=bread(dev,blkn);
ffff80000080dad2:	0f b7 45 bc          	movzx  eax,WORD PTR [rbp-0x44]
ffff80000080dad6:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080dad9:	89 d6                	mov    esi,edx
ffff80000080dadb:	89 c7                	mov    edi,eax
ffff80000080dadd:	49 89 df             	mov    r15,rbx
ffff80000080dae0:	48 b8 cc fc ee ff ff 	movabs rax,0xffffffffffeefccc
ffff80000080dae7:	ff ff ff 
ffff80000080daea:	48 01 d8             	add    rax,rbx
ffff80000080daed:	ff d0                	call   rax
ffff80000080daef:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128
        if(!bh)
ffff80000080daf3:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080daf8:	75 0a                	jne    ffff80000080db04 <blkdev_read+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:129
            return -ENOBUFS;//buffer不够了
ffff80000080dafa:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080daff:	e9 90 00 00 00       	jmp    ffff80000080db94 <blkdev_read+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:130
        if(i==n-1)
ffff80000080db04:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080db07:	83 e8 01             	sub    eax,0x1
ffff80000080db0a:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff80000080db0d:	75 09                	jne    ffff80000080db18 <blkdev_read+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:131
            len=mod_count;
ffff80000080db0f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080db13:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080db16:	eb 0d                	jmp    ffff80000080db25 <blkdev_read+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:132
        else if(i==2)
ffff80000080db18:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
ffff80000080db1c:	75 07                	jne    ffff80000080db25 <blkdev_read+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:133
            len=BLOCK_SIZE;
ffff80000080db1e:	c7 45 dc 00 10 00 00 	mov    DWORD PTR [rbp-0x24],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:134 (discriminator 2)
        memcpy(p,bh->data+first_off,len);
ffff80000080db25:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080db28:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080db2c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080db2f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080db32:	48 98                	cdqe   
ffff80000080db34:	48 01 c1             	add    rcx,rax
ffff80000080db37:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080db3b:	48 89 ce             	mov    rsi,rcx
ffff80000080db3e:	48 89 c7             	mov    rdi,rax
ffff80000080db41:	49 89 df             	mov    r15,rbx
ffff80000080db44:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff80000080db4b:	ff ff ff 
ffff80000080db4e:	48 01 d8             	add    rax,rbx
ffff80000080db51:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:135 (discriminator 2)
        brelse(bh);
ffff80000080db53:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080db57:	48 89 c7             	mov    rdi,rax
ffff80000080db5a:	49 89 df             	mov    r15,rbx
ffff80000080db5d:	48 b8 d6 02 ef ff ff 	movabs rax,0xffffffffffef02d6
ffff80000080db64:	ff ff ff 
ffff80000080db67:	48 01 d8             	add    rax,rbx
ffff80000080db6a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:136 (discriminator 2)
        blkn++;
ffff80000080db6c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:137 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080db70:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080db77:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:138 (discriminator 2)
        first_off=0;
ffff80000080db78:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080db7f:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 1)
ffff80000080db83:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080db86:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080db89:	0f 8c 43 ff ff ff    	jl     ffff80000080dad2 <blkdev_read+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:140
    }
    return 1;
ffff80000080db8f:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:141
}
ffff80000080db94:	48 83 c4 50          	add    rsp,0x50
ffff80000080db98:	5b                   	pop    rbx
ffff80000080db99:	41 5f                	pop    r15
ffff80000080db9b:	5d                   	pop    rbp
ffff80000080db9c:	c3                   	ret    

ffff80000080db9d <blkdev_write>:
blkdev_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:143

int blkdev_write(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080db9d:	f3 0f 1e fa          	endbr64 
ffff80000080dba1:	55                   	push   rbp
ffff80000080dba2:	48 89 e5             	mov    rbp,rsp
ffff80000080dba5:	41 57                	push   r15
ffff80000080dba7:	53                   	push   rbx
ffff80000080dba8:	48 83 ec 50          	sub    rsp,0x50
ffff80000080dbac:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dbac <blkdev_write+0xf>
ffff80000080dbb3:	49 bb 84 fe 10 00 00 	movabs r11,0x10fe84
ffff80000080dbba:	00 00 00 
ffff80000080dbbd:	4c 01 db             	add    rbx,r11
ffff80000080dbc0:	89 f8                	mov    eax,edi
ffff80000080dbc2:	89 75 b8             	mov    DWORD PTR [rbp-0x48],esi
ffff80000080dbc5:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffff80000080dbc9:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffff80000080dbcd:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:144
    int n=TO_BLKN(count);
ffff80000080dbd1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dbd5:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080dbdb:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080dbdf:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:145
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080dbe2:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dbe5:	99                   	cdq    
ffff80000080dbe6:	c1 ea 14             	shr    edx,0x14
ffff80000080dbe9:	01 d0                	add    eax,edx
ffff80000080dbeb:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dbf0:	29 d0                	sub    eax,edx
ffff80000080dbf2:	89 c2                	mov    edx,eax
ffff80000080dbf4:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dbf7:	29 d0                	sub    eax,edx
ffff80000080dbf9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:146
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080dbfc:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dbff:	99                   	cdq    
ffff80000080dc00:	c1 ea 14             	shr    edx,0x14
ffff80000080dc03:	01 d0                	add    eax,edx
ffff80000080dc05:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dc0a:	29 d0                	sub    eax,edx
ffff80000080dc0c:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:147
    char* p=buf;
ffff80000080dc0f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080dc13:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:148
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080dc17:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dc1b:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dc20:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:149
    int len=BLOCK_SIZE-first_off;
ffff80000080dc24:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080dc29:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080dc2c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150
    for(int i=0;i<n;i++){
ffff80000080dc2f:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080dc36:	e9 b1 00 00 00       	jmp    ffff80000080dcec <blkdev_write+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:151
        buffer_head *bh=get_block(dev,blkn);
ffff80000080dc3b:	0f b7 45 bc          	movzx  eax,WORD PTR [rbp-0x44]
ffff80000080dc3f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080dc42:	89 d6                	mov    esi,edx
ffff80000080dc44:	89 c7                	mov    edi,eax
ffff80000080dc46:	49 89 df             	mov    r15,rbx
ffff80000080dc49:	48 b8 4f fb ee ff ff 	movabs rax,0xffffffffffeefb4f
ffff80000080dc50:	ff ff ff 
ffff80000080dc53:	48 01 d8             	add    rax,rbx
ffff80000080dc56:	ff d0                	call   rax
ffff80000080dc58:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152
        if(!bh)
ffff80000080dc5c:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080dc61:	75 0a                	jne    ffff80000080dc6d <blkdev_write+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:153
            return -ENOBUFS;//buffer不够了
ffff80000080dc63:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080dc68:	e9 90 00 00 00       	jmp    ffff80000080dcfd <blkdev_write+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:154
        if(i==n-1)
ffff80000080dc6d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080dc70:	83 e8 01             	sub    eax,0x1
ffff80000080dc73:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff80000080dc76:	75 09                	jne    ffff80000080dc81 <blkdev_write+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:155
            len=mod_count;
ffff80000080dc78:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080dc7c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080dc7f:	eb 0d                	jmp    ffff80000080dc8e <blkdev_write+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:156
        else if(i==2)
ffff80000080dc81:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
ffff80000080dc85:	75 07                	jne    ffff80000080dc8e <blkdev_write+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:157
            len=BLOCK_SIZE;
ffff80000080dc87:	c7 45 dc 00 10 00 00 	mov    DWORD PTR [rbp-0x24],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:158 (discriminator 2)
        memcpy(bh->data+first_off,p,len);
ffff80000080dc8e:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080dc91:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080dc95:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080dc98:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080dc9b:	48 98                	cdqe   
ffff80000080dc9d:	48 01 c1             	add    rcx,rax
ffff80000080dca0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dca4:	48 89 c6             	mov    rsi,rax
ffff80000080dca7:	48 89 cf             	mov    rdi,rcx
ffff80000080dcaa:	49 89 df             	mov    r15,rbx
ffff80000080dcad:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff80000080dcb4:	ff ff ff 
ffff80000080dcb7:	48 01 d8             	add    rax,rbx
ffff80000080dcba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:159 (discriminator 2)
        brelse(bh);
ffff80000080dcbc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080dcc0:	48 89 c7             	mov    rdi,rax
ffff80000080dcc3:	49 89 df             	mov    r15,rbx
ffff80000080dcc6:	48 b8 d6 02 ef ff ff 	movabs rax,0xffffffffffef02d6
ffff80000080dccd:	ff ff ff 
ffff80000080dcd0:	48 01 d8             	add    rax,rbx
ffff80000080dcd3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:160 (discriminator 2)
        blkn++;
ffff80000080dcd5:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:161 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080dcd9:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080dce0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:162 (discriminator 2)
        first_off=0;
ffff80000080dce1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080dce8:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 1)
ffff80000080dcec:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dcef:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080dcf2:	0f 8c 43 ff ff ff    	jl     ffff80000080dc3b <blkdev_write+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:164
    }
    return 1;
ffff80000080dcf8:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:166

}
ffff80000080dcfd:	48 83 c4 50          	add    rsp,0x50
ffff80000080dd01:	5b                   	pop    rbx
ffff80000080dd02:	41 5f                	pop    r15
ffff80000080dd04:	5d                   	pop    rbp
ffff80000080dd05:	c3                   	ret    

ffff80000080dd06 <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:167
int brelse(buffer_head *bh){
ffff80000080dd06:	f3 0f 1e fa          	endbr64 
ffff80000080dd0a:	55                   	push   rbp
ffff80000080dd0b:	48 89 e5             	mov    rbp,rsp
ffff80000080dd0e:	41 57                	push   r15
ffff80000080dd10:	53                   	push   rbx
ffff80000080dd11:	48 83 ec 10          	sub    rsp,0x10
ffff80000080dd15:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dd15 <brelse+0xf>
ffff80000080dd1c:	49 bb 1b fd 10 00 00 	movabs r11,0x10fd1b
ffff80000080dd23:	00 00 00 
ffff80000080dd26:	4c 01 db             	add    rbx,r11
ffff80000080dd29:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168
    if(bh->dev==(unsigned short)-1||!blk_devs[BLKDEV_MAJOR(bh->dev)].do_request)
ffff80000080dd2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dd31:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080dd35:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080dd39:	74 33                	je     ffff80000080dd6e <brelse+0x68>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168 (discriminator 1)
ffff80000080dd3b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dd3f:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080dd43:	0f b7 c0             	movzx  eax,ax
ffff80000080dd46:	c1 f8 04             	sar    eax,0x4
ffff80000080dd49:	83 e0 0f             	and    eax,0xf
ffff80000080dd4c:	89 c2                	mov    edx,eax
ffff80000080dd4e:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080dd55:	ff ff ff 
ffff80000080dd58:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080dd5c:	48 63 c2             	movsxd rax,edx
ffff80000080dd5f:	48 c1 e0 04          	shl    rax,0x4
ffff80000080dd63:	48 01 c8             	add    rax,rcx
ffff80000080dd66:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080dd69:	48 85 c0             	test   rax,rax
ffff80000080dd6c:	75 0a                	jne    ffff80000080dd78 <brelse+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:169
        return -ENODEV;
ffff80000080dd6e:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080dd73:	e9 b0 00 00 00       	jmp    ffff80000080de28 <brelse+0x122>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:170
    if(bh->dirt)
ffff80000080dd78:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dd7c:	0f b6 40 13          	movzx  eax,BYTE PTR [rax+0x13]
ffff80000080dd80:	84 c0                	test   al,al
ffff80000080dd82:	74 19                	je     ffff80000080dd9d <brelse+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:171
        bflush(bh);
ffff80000080dd84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dd88:	48 89 c7             	mov    rdi,rax
ffff80000080dd8b:	49 89 df             	mov    r15,rbx
ffff80000080dd8e:	48 b8 4f fe ee ff ff 	movabs rax,0xffffffffffeefe4f
ffff80000080dd95:	ff ff ff 
ffff80000080dd98:	48 01 d8             	add    rax,rbx
ffff80000080dd9b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:172
    bh->count--;
ffff80000080dd9d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dda1:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080dda5:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080dda8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ddac:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:173
    if(bh->count==0)
ffff80000080ddaf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ddb3:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080ddb7:	84 c0                	test   al,al
ffff80000080ddb9:	75 68                	jne    ffff80000080de23 <brelse+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:175
    {
        if(bh->prev)
ffff80000080ddbb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ddbf:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080ddc3:	48 85 c0             	test   rax,rax
ffff80000080ddc6:	74 14                	je     ffff80000080dddc <brelse+0xd6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:176
            bh->prev->next=bh->next;
ffff80000080ddc8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ddcc:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080ddd0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ddd4:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080ddd8:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:177
        if(bh->next)
ffff80000080dddc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dde0:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080dde4:	48 85 c0             	test   rax,rax
ffff80000080dde7:	74 14                	je     ffff80000080ddfd <brelse+0xf7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:178
            bh->next->prev=bh->prev;
ffff80000080dde9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dded:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080ddf1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ddf5:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000080ddf9:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:179
        bh->dev=-1;
ffff80000080ddfd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de01:	66 c7 40 10 ff ff    	mov    WORD PTR [rax+0x10],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:180
        kmfree(bh->data);
ffff80000080de07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de0b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080de0e:	48 89 c7             	mov    rdi,rax
ffff80000080de11:	49 89 df             	mov    r15,rbx
ffff80000080de14:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080de1b:	ff ff ff 
ffff80000080de1e:	48 01 d8             	add    rax,rbx
ffff80000080de21:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:182
    }
    return 1;
ffff80000080de23:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:183
ffff80000080de28:	48 83 c4 10          	add    rsp,0x10
ffff80000080de2c:	5b                   	pop    rbx
ffff80000080de2d:	41 5f                	pop    r15
ffff80000080de2f:	5d                   	pop    rbp
ffff80000080de30:	c3                   	ret    

ffff80000080de31 <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:123
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
ffff80000080de31:	f3 0f 1e fa          	endbr64 
ffff80000080de35:	55                   	push   rbp
ffff80000080de36:	48 89 e5             	mov    rbp,rsp
ffff80000080de39:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080de39 <shift+0x8>
ffff80000080de40:	49 bb f7 fb 10 00 00 	movabs r11,0x10fbf7
ffff80000080de47:	00 00 00 
ffff80000080de4a:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:124
    k_shift=!k_shift;
ffff80000080de4d:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080de54:	ff ff ff 
ffff80000080de57:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080de5b:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080de5e:	84 d2                	test   dl,dl
ffff80000080de60:	0f 94 c2             	sete   dl
ffff80000080de63:	89 d1                	mov    ecx,edx
ffff80000080de65:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080de6c:	ff ff ff 
ffff80000080de6f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080de73:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:125
}
ffff80000080de75:	90                   	nop
ffff80000080de76:	5d                   	pop    rbp
ffff80000080de77:	c3                   	ret    

ffff80000080de78 <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:127
void ctrl()
{
ffff80000080de78:	f3 0f 1e fa          	endbr64 
ffff80000080de7c:	55                   	push   rbp
ffff80000080de7d:	48 89 e5             	mov    rbp,rsp
ffff80000080de80:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080de80 <ctrl+0x8>
ffff80000080de87:	49 bb b0 fb 10 00 00 	movabs r11,0x10fbb0
ffff80000080de8e:	00 00 00 
ffff80000080de91:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:128
    k_ctrl=!k_ctrl;
ffff80000080de94:	48 ba 28 fd ff ff ff 	movabs rdx,0xfffffffffffffd28
ffff80000080de9b:	ff ff ff 
ffff80000080de9e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dea2:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080dea5:	84 d2                	test   dl,dl
ffff80000080dea7:	0f 94 c2             	sete   dl
ffff80000080deaa:	89 d1                	mov    ecx,edx
ffff80000080deac:	48 ba 28 fd ff ff ff 	movabs rdx,0xfffffffffffffd28
ffff80000080deb3:	ff ff ff 
ffff80000080deb6:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080deba:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:129
}
ffff80000080debc:	90                   	nop
ffff80000080debd:	5d                   	pop    rbp
ffff80000080debe:	c3                   	ret    

ffff80000080debf <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:131
void capslock()
{
ffff80000080debf:	f3 0f 1e fa          	endbr64 
ffff80000080dec3:	55                   	push   rbp
ffff80000080dec4:	48 89 e5             	mov    rbp,rsp
ffff80000080dec7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dec7 <capslock+0x8>
ffff80000080dece:	49 bb 69 fb 10 00 00 	movabs r11,0x10fb69
ffff80000080ded5:	00 00 00 
ffff80000080ded8:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:132
    k_capslock=k_capslock==0?1:0;
ffff80000080dedb:	48 ba 88 fe ff ff ff 	movabs rdx,0xfffffffffffffe88
ffff80000080dee2:	ff ff ff 
ffff80000080dee5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dee9:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080deec:	84 d2                	test   dl,dl
ffff80000080deee:	0f 94 c2             	sete   dl
ffff80000080def1:	89 d1                	mov    ecx,edx
ffff80000080def3:	48 ba 88 fe ff ff ff 	movabs rdx,0xfffffffffffffe88
ffff80000080defa:	ff ff ff 
ffff80000080defd:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080df01:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
}
ffff80000080df03:	90                   	nop
ffff80000080df04:	5d                   	pop    rbp
ffff80000080df05:	c3                   	ret    

ffff80000080df06 <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
char to_ascii(char scan_code)
{
ffff80000080df06:	f3 0f 1e fa          	endbr64 
ffff80000080df0a:	55                   	push   rbp
ffff80000080df0b:	48 89 e5             	mov    rbp,rsp
ffff80000080df0e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080df0e <to_ascii+0x8>
ffff80000080df15:	49 bb 22 fb 10 00 00 	movabs r11,0x10fb22
ffff80000080df1c:	00 00 00 
ffff80000080df1f:	4c 01 d8             	add    rax,r11
ffff80000080df22:	89 fa                	mov    edx,edi
ffff80000080df24:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080df27:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080df2e:	e9 25 01 00 00       	jmp    ffff80000080e058 <to_ascii+0x152>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
        if(key_map[i].scan_code==scan_code)
ffff80000080df33:	48 be 50 d8 ff ff ff 	movabs rsi,0xffffffffffffd850
ffff80000080df3a:	ff ff ff 
ffff80000080df3d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080df40:	48 63 ca             	movsxd rcx,edx
ffff80000080df43:	48 89 ca             	mov    rdx,rcx
ffff80000080df46:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080df4a:	48 01 ca             	add    rdx,rcx
ffff80000080df4d:	48 01 c2             	add    rdx,rax
ffff80000080df50:	48 01 f2             	add    rdx,rsi
ffff80000080df53:	48 83 c2 02          	add    rdx,0x2
ffff80000080df57:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080df5a:	38 55 ec             	cmp    BYTE PTR [rbp-0x14],dl
ffff80000080df5d:	0f 85 f1 00 00 00    	jne    ffff80000080e054 <to_ascii+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
ffff80000080df63:	48 ba 88 fe ff ff ff 	movabs rdx,0xfffffffffffffe88
ffff80000080df6a:	ff ff ff 
ffff80000080df6d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080df71:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080df74:	84 d2                	test   dl,dl
ffff80000080df76:	74 79                	je     ffff80000080dff1 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 1)
ffff80000080df78:	48 be 50 d8 ff ff ff 	movabs rsi,0xffffffffffffd850
ffff80000080df7f:	ff ff ff 
ffff80000080df82:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080df85:	48 63 ca             	movsxd rcx,edx
ffff80000080df88:	48 01 c6             	add    rsi,rax
ffff80000080df8b:	48 89 ca             	mov    rdx,rcx
ffff80000080df8e:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080df92:	48 01 ca             	add    rdx,rcx
ffff80000080df95:	48 01 f2             	add    rdx,rsi
ffff80000080df98:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080df9b:	80 fa 60             	cmp    dl,0x60
ffff80000080df9e:	7e 51                	jle    ffff80000080dff1 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 2)
ffff80000080dfa0:	48 be 50 d8 ff ff ff 	movabs rsi,0xffffffffffffd850
ffff80000080dfa7:	ff ff ff 
ffff80000080dfaa:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080dfad:	48 63 ca             	movsxd rcx,edx
ffff80000080dfb0:	48 01 c6             	add    rsi,rax
ffff80000080dfb3:	48 89 ca             	mov    rdx,rcx
ffff80000080dfb6:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080dfba:	48 01 ca             	add    rdx,rcx
ffff80000080dfbd:	48 01 f2             	add    rdx,rsi
ffff80000080dfc0:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080dfc3:	80 fa 7a             	cmp    dl,0x7a
ffff80000080dfc6:	7f 29                	jg     ffff80000080dff1 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 3)
ffff80000080dfc8:	48 be 50 d8 ff ff ff 	movabs rsi,0xffffffffffffd850
ffff80000080dfcf:	ff ff ff 
ffff80000080dfd2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080dfd5:	48 63 ca             	movsxd rcx,edx
ffff80000080dfd8:	48 89 ca             	mov    rdx,rcx
ffff80000080dfdb:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080dfdf:	48 01 ca             	add    rdx,rcx
ffff80000080dfe2:	48 01 d0             	add    rax,rdx
ffff80000080dfe5:	48 01 f0             	add    rax,rsi
ffff80000080dfe8:	48 83 c0 01          	add    rax,0x1
ffff80000080dfec:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080dfef:	eb 76                	jmp    ffff80000080e067 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140
            else if(k_shift)return key_map[i].ascii_shift;
ffff80000080dff1:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080dff8:	ff ff ff 
ffff80000080dffb:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dfff:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e002:	84 d2                	test   dl,dl
ffff80000080e004:	74 29                	je     ffff80000080e02f <to_ascii+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140 (discriminator 1)
ffff80000080e006:	48 be 50 d8 ff ff ff 	movabs rsi,0xffffffffffffd850
ffff80000080e00d:	ff ff ff 
ffff80000080e010:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e013:	48 63 ca             	movsxd rcx,edx
ffff80000080e016:	48 89 ca             	mov    rdx,rcx
ffff80000080e019:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e01d:	48 01 ca             	add    rdx,rcx
ffff80000080e020:	48 01 d0             	add    rax,rdx
ffff80000080e023:	48 01 f0             	add    rax,rsi
ffff80000080e026:	48 83 c0 01          	add    rax,0x1
ffff80000080e02a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e02d:	eb 38                	jmp    ffff80000080e067 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
            else return key_map[i].ascii;
ffff80000080e02f:	48 b9 50 d8 ff ff ff 	movabs rcx,0xffffffffffffd850
ffff80000080e036:	ff ff ff 
ffff80000080e039:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e03c:	48 63 d2             	movsxd rdx,edx
ffff80000080e03f:	48 01 c1             	add    rcx,rax
ffff80000080e042:	48 89 d0             	mov    rax,rdx
ffff80000080e045:	48 c1 e0 02          	shl    rax,0x2
ffff80000080e049:	48 01 d0             	add    rax,rdx
ffff80000080e04c:	48 01 c8             	add    rax,rcx
ffff80000080e04f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e052:	eb 13                	jmp    ffff80000080e067 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e054:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 1)
ffff80000080e058:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
ffff80000080e05c:	0f 8e d1 fe ff ff    	jle    ffff80000080df33 <to_ascii+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:144
        }

    return '\0';
ffff80000080e062:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
}
ffff80000080e067:	5d                   	pop    rbp
ffff80000080e068:	c3                   	ret    

ffff80000080e069 <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
int init_kb()
{
ffff80000080e069:	f3 0f 1e fa          	endbr64 
ffff80000080e06d:	55                   	push   rbp
ffff80000080e06e:	48 89 e5             	mov    rbp,rsp
ffff80000080e071:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e071 <init_kb+0x8>
ffff80000080e078:	49 bb bf f9 10 00 00 	movabs r11,0x10f9bf
ffff80000080e07f:	00 00 00 
ffff80000080e082:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:148
}
ffff80000080e085:	90                   	nop
ffff80000080e086:	5d                   	pop    rbp
ffff80000080e087:	c3                   	ret    

ffff80000080e088 <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
int key_proc()
{
ffff80000080e088:	f3 0f 1e fa          	endbr64 
ffff80000080e08c:	55                   	push   rbp
ffff80000080e08d:	48 89 e5             	mov    rbp,rsp
ffff80000080e090:	41 57                	push   r15
ffff80000080e092:	53                   	push   rbx
ffff80000080e093:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e097:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e097 <key_proc+0xf>
ffff80000080e09e:	49 bb 99 f9 10 00 00 	movabs r11,0x10f999
ffff80000080e0a5:	00 00 00 
ffff80000080e0a8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
    asm volatile("cli");
ffff80000080e0ab:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:153
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
ffff80000080e0ac:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffff80000080e0b0:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
ffff80000080e0b4:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
    key_code tmpc;
    scan1=inb(0x60);
ffff80000080e0b8:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080e0bd:	49 89 df             	mov    r15,rbx
ffff80000080e0c0:	48 b8 49 a1 ee ff ff 	movabs rax,0xffffffffffeea149
ffff80000080e0c7:	ff ff ff 
ffff80000080e0ca:	48 01 d8             	add    rax,rbx
ffff80000080e0cd:	ff d0                	call   rax
ffff80000080e0cf:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
ffff80000080e0d2:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e0d9:	ff ff ff 
ffff80000080e0dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e0e0:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e0e3:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e0e6:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e0ed:	ff ff ff 
ffff80000080e0f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e0f4:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e0f7:	89 d0                	mov    eax,edx
ffff80000080e0f9:	99                   	cdq    
ffff80000080e0fa:	f7 f9                	idiv   ecx
ffff80000080e0fc:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e103:	ff ff ff 
ffff80000080e106:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e10a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e10d:	39 c2                	cmp    edx,eax
ffff80000080e10f:	74 68                	je     ffff80000080e179 <key_proc+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:169
    {
        key_bufq.data[key_bufq.tail]=scan1;
ffff80000080e111:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e118:	ff ff ff 
ffff80000080e11b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e11f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e122:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e129:	ff ff ff 
ffff80000080e12c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e130:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e133:	48 98                	cdqe   
ffff80000080e135:	48 01 c2             	add    rdx,rax
ffff80000080e138:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e13c:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:170
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
ffff80000080e13e:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e145:	ff ff ff 
ffff80000080e148:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e14c:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e14f:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e152:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e159:	ff ff ff 
ffff80000080e15c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e160:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e163:	89 d0                	mov    eax,edx
ffff80000080e165:	99                   	cdq    
ffff80000080e166:	f7 f9                	idiv   ecx
ffff80000080e168:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e16f:	ff ff ff 
ffff80000080e172:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e176:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:173
    }

    if(scan1==0x48)
ffff80000080e179:	80 7d ef 48          	cmp    BYTE PTR [rbp-0x11],0x48
ffff80000080e17d:	75 17                	jne    ffff80000080e196 <key_proc+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:174
        scr_up();
ffff80000080e17f:	49 89 df             	mov    r15,rbx
ffff80000080e182:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e187:	48 ba 5b cc ee ff ff 	movabs rdx,0xffffffffffeecc5b
ffff80000080e18e:	ff ff ff 
ffff80000080e191:	48 01 da             	add    rdx,rbx
ffff80000080e194:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:175
    if(scan1==0x50)
ffff80000080e196:	80 7d ef 50          	cmp    BYTE PTR [rbp-0x11],0x50
ffff80000080e19a:	75 17                	jne    ffff80000080e1b3 <key_proc+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:176
        scr_down();
ffff80000080e19c:	49 89 df             	mov    r15,rbx
ffff80000080e19f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e1a4:	48 ba 53 cd ee ff ff 	movabs rdx,0xffffffffffeecd53
ffff80000080e1ab:	ff ff ff 
ffff80000080e1ae:	48 01 da             	add    rdx,rbx
ffff80000080e1b1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:177
    switch (scan1)
ffff80000080e1b3:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e1b7:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e1bc:	74 45                	je     ffff80000080e203 <key_proc+0x17b>
ffff80000080e1be:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e1c3:	0f 8f 85 00 00 00    	jg     ffff80000080e24e <key_proc+0x1c6>
ffff80000080e1c9:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e1ce:	74 33                	je     ffff80000080e203 <key_proc+0x17b>
ffff80000080e1d0:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e1d5:	7f 77                	jg     ffff80000080e24e <key_proc+0x1c6>
ffff80000080e1d7:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e1dc:	74 3e                	je     ffff80000080e21c <key_proc+0x194>
ffff80000080e1de:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e1e3:	7f 69                	jg     ffff80000080e24e <key_proc+0x1c6>
ffff80000080e1e5:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e1e8:	74 4b                	je     ffff80000080e235 <key_proc+0x1ad>
ffff80000080e1ea:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e1ed:	7f 5f                	jg     ffff80000080e24e <key_proc+0x1c6>
ffff80000080e1ef:	83 f8 36             	cmp    eax,0x36
ffff80000080e1f2:	74 0f                	je     ffff80000080e203 <key_proc+0x17b>
ffff80000080e1f4:	83 f8 36             	cmp    eax,0x36
ffff80000080e1f7:	7f 55                	jg     ffff80000080e24e <key_proc+0x1c6>
ffff80000080e1f9:	83 f8 1d             	cmp    eax,0x1d
ffff80000080e1fc:	74 1e                	je     ffff80000080e21c <key_proc+0x194>
ffff80000080e1fe:	83 f8 2a             	cmp    eax,0x2a
ffff80000080e201:	75 4b                	jne    ffff80000080e24e <key_proc+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:183
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
ffff80000080e203:	49 89 df             	mov    r15,rbx
ffff80000080e206:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e20b:	48 ba 01 04 ef ff ff 	movabs rdx,0xffffffffffef0401
ffff80000080e212:	ff ff ff 
ffff80000080e215:	48 01 da             	add    rdx,rbx
ffff80000080e218:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:184
            break;
ffff80000080e21a:	eb 33                	jmp    ffff80000080e24f <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
        case 0x1d:
        case 0x9d:
            ctrl();
ffff80000080e21c:	49 89 df             	mov    r15,rbx
ffff80000080e21f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e224:	48 ba 48 04 ef ff ff 	movabs rdx,0xffffffffffef0448
ffff80000080e22b:	ff ff ff 
ffff80000080e22e:	48 01 da             	add    rdx,rbx
ffff80000080e231:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
            break;
ffff80000080e233:	eb 1a                	jmp    ffff80000080e24f <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:190
        case 0x3a:
            capslock();
ffff80000080e235:	49 89 df             	mov    r15,rbx
ffff80000080e238:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e23d:	48 ba 8f 04 ef ff ff 	movabs rdx,0xffffffffffef048f
ffff80000080e244:	ff ff ff 
ffff80000080e247:	48 01 da             	add    rdx,rbx
ffff80000080e24a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:191
            break;
ffff80000080e24c:	eb 01                	jmp    ffff80000080e24f <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:193
        default:
            break;
ffff80000080e24e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
ffff80000080e24f:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e253:	84 c0                	test   al,al
ffff80000080e255:	78 51                	js     ffff80000080e2a8 <key_proc+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:197
        char ch= to_ascii(scan1);
ffff80000080e257:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e25b:	0f be c0             	movsx  eax,al
ffff80000080e25e:	89 c7                	mov    edi,eax
ffff80000080e260:	49 89 df             	mov    r15,rbx
ffff80000080e263:	48 b8 d6 04 ef ff ff 	movabs rax,0xffffffffffef04d6
ffff80000080e26a:	ff ff ff 
ffff80000080e26d:	48 01 d8             	add    rax,rbx
ffff80000080e270:	ff d0                	call   rax
ffff80000080e272:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:198
        unsigned long args[]={(unsigned long) &ch, 1};
ffff80000080e275:	48 8d 45 e7          	lea    rax,[rbp-0x19]
ffff80000080e279:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000080e27d:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffff80000080e284:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
ffff80000080e285:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffff80000080e289:	48 89 c2             	mov    rdx,rax
ffff80000080e28c:	be 03 00 00 00       	mov    esi,0x3
ffff80000080e291:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e296:	49 89 df             	mov    r15,rbx
ffff80000080e299:	48 b8 43 a0 ee ff ff 	movabs rax,0xffffffffffeea043
ffff80000080e2a0:	ff ff ff 
ffff80000080e2a3:	48 01 d8             	add    rax,rbx
ffff80000080e2a6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:219
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
ffff80000080e2a8:	49 89 df             	mov    r15,rbx
ffff80000080e2ab:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e2b0:	48 ba 5e a1 ee ff ff 	movabs rdx,0xffffffffffeea15e
ffff80000080e2b7:	ff ff ff 
ffff80000080e2ba:	48 01 da             	add    rdx,rbx
ffff80000080e2bd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:220
    asm volatile("leave\r\n iretq");
ffff80000080e2bf:	c9                   	leave  
ffff80000080e2c0:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:221
}
ffff80000080e2c2:	90                   	nop
ffff80000080e2c3:	48 83 c4 20          	add    rsp,0x20
ffff80000080e2c7:	5b                   	pop    rbx
ffff80000080e2c8:	41 5f                	pop    r15
ffff80000080e2ca:	5d                   	pop    rbp
ffff80000080e2cb:	c3                   	ret    

ffff80000080e2cc <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:224

char sys_analyse_key()
{
ffff80000080e2cc:	f3 0f 1e fa          	endbr64 
ffff80000080e2d0:	55                   	push   rbp
ffff80000080e2d1:	48 89 e5             	mov    rbp,rsp
ffff80000080e2d4:	41 57                	push   r15
ffff80000080e2d6:	53                   	push   rbx
ffff80000080e2d7:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e2db:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e2db <sys_analyse_key+0xf>
ffff80000080e2e2:	49 bb 55 f7 10 00 00 	movabs r11,0x10f755
ffff80000080e2e9:	00 00 00 
ffff80000080e2ec:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225
    if(key_bufq.tail==key_bufq.head)return -1;
ffff80000080e2ef:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e2f6:	ff ff ff 
ffff80000080e2f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e2fd:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000080e300:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e307:	ff ff ff 
ffff80000080e30a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e30e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e311:	39 c2                	cmp    edx,eax
ffff80000080e313:	75 0a                	jne    ffff80000080e31f <sys_analyse_key+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225 (discriminator 1)
ffff80000080e315:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e31a:	e9 b1 01 00 00       	jmp    ffff80000080e4d0 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:226
    char c=key_buf[key_bufq.head];
ffff80000080e31f:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e326:	ff ff ff 
ffff80000080e329:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e32d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e330:	48 ba 80 fd ff ff ff 	movabs rdx,0xfffffffffffffd80
ffff80000080e337:	ff ff ff 
ffff80000080e33a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e33e:	48 98                	cdqe   
ffff80000080e340:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080e344:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:227
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
ffff80000080e347:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e34e:	ff ff ff 
ffff80000080e351:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e355:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e358:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e35b:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e362:	ff ff ff 
ffff80000080e365:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e369:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e36c:	89 d0                	mov    eax,edx
ffff80000080e36e:	99                   	cdq    
ffff80000080e36f:	f7 f9                	idiv   ecx
ffff80000080e371:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e378:	ff ff ff 
ffff80000080e37b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e37f:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:229
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
ffff80000080e382:	48 b8 26 da ff ff ff 	movabs rax,0xffffffffffffda26
ffff80000080e389:	ff ff ff 
ffff80000080e38c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e390:	48 89 c7             	mov    rdi,rax
ffff80000080e393:	49 89 df             	mov    r15,rbx
ffff80000080e396:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e39b:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080e3a2:	ff ff ff 
ffff80000080e3a5:	48 01 da             	add    rdx,rbx
ffff80000080e3a8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:230
    char res[33]={0};
ffff80000080e3aa:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080e3b1:	00 
ffff80000080e3b2:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080e3b9:	00 
ffff80000080e3ba:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080e3c1:	00 
ffff80000080e3c2:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080e3c9:	00 
ffff80000080e3ca:	c6 45 e0 00          	mov    BYTE PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
    itoa(res,16,c);
ffff80000080e3ce:	0f be 55 ef          	movsx  edx,BYTE PTR [rbp-0x11]
ffff80000080e3d2:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e3d6:	be 10 00 00 00       	mov    esi,0x10
ffff80000080e3db:	48 89 c7             	mov    rdi,rax
ffff80000080e3de:	49 89 df             	mov    r15,rbx
ffff80000080e3e1:	48 b8 49 3b ee ff ff 	movabs rax,0xffffffffffee3b49
ffff80000080e3e8:	ff ff ff 
ffff80000080e3eb:	48 01 d8             	add    rax,rbx
ffff80000080e3ee:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    printf(res);
ffff80000080e3f0:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e3f4:	48 89 c7             	mov    rdi,rax
ffff80000080e3f7:	49 89 df             	mov    r15,rbx
ffff80000080e3fa:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e3ff:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080e406:	ff ff ff 
ffff80000080e409:	48 01 da             	add    rdx,rbx
ffff80000080e40c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
    if(c&FLAG_BREAK){
ffff80000080e40e:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff80000080e412:	79 32                	jns    ffff80000080e446 <sys_analyse_key+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:234
        printf("\n");
ffff80000080e414:	48 b8 31 da ff ff ff 	movabs rax,0xffffffffffffda31
ffff80000080e41b:	ff ff ff 
ffff80000080e41e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e422:	48 89 c7             	mov    rdi,rax
ffff80000080e425:	49 89 df             	mov    r15,rbx
ffff80000080e428:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e42d:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080e434:	ff ff ff 
ffff80000080e437:	48 01 da             	add    rdx,rbx
ffff80000080e43a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:235
        return -1;
ffff80000080e43c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e441:	e9 8a 00 00 00       	jmp    ffff80000080e4d0 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    }
    c= to_ascii(c&0x7f);
ffff80000080e446:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e44a:	83 e0 7f             	and    eax,0x7f
ffff80000080e44d:	89 c7                	mov    edi,eax
ffff80000080e44f:	49 89 df             	mov    r15,rbx
ffff80000080e452:	48 b8 d6 04 ef ff ff 	movabs rax,0xffffffffffef04d6
ffff80000080e459:	ff ff ff 
ffff80000080e45c:	48 01 d8             	add    rax,rbx
ffff80000080e45f:	ff d0                	call   rax
ffff80000080e461:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    printf(" char:");
ffff80000080e464:	48 b8 33 da ff ff ff 	movabs rax,0xffffffffffffda33
ffff80000080e46b:	ff ff ff 
ffff80000080e46e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e472:	48 89 c7             	mov    rdi,rax
ffff80000080e475:	49 89 df             	mov    r15,rbx
ffff80000080e478:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e47d:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080e484:	ff ff ff 
ffff80000080e487:	48 01 da             	add    rdx,rbx
ffff80000080e48a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    putchar(c);
ffff80000080e48c:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e490:	89 c7                	mov    edi,eax
ffff80000080e492:	49 89 df             	mov    r15,rbx
ffff80000080e495:	48 b8 72 3c ee ff ff 	movabs rax,0xffffffffffee3c72
ffff80000080e49c:	ff ff ff 
ffff80000080e49f:	48 01 d8             	add    rax,rbx
ffff80000080e4a2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:240
    printf("\n");
ffff80000080e4a4:	48 b8 31 da ff ff ff 	movabs rax,0xffffffffffffda31
ffff80000080e4ab:	ff ff ff 
ffff80000080e4ae:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e4b2:	48 89 c7             	mov    rdi,rax
ffff80000080e4b5:	49 89 df             	mov    r15,rbx
ffff80000080e4b8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e4bd:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080e4c4:	ff ff ff 
ffff80000080e4c7:	48 01 da             	add    rdx,rbx
ffff80000080e4ca:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
    return c;
ffff80000080e4cc:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242 (discriminator 1)
ffff80000080e4d0:	48 83 c4 30          	add    rsp,0x30
ffff80000080e4d4:	5b                   	pop    rbx
ffff80000080e4d5:	41 5f                	pop    r15
ffff80000080e4d7:	5d                   	pop    rbp
ffff80000080e4d8:	c3                   	ret    

ffff80000080e4d9 <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:20
struct blk_dev bd_hd={
    .do_request=hd_do_req
};
int dev_hd=-1,last_chk_res=0;
int init_disk()
{
ffff80000080e4d9:	f3 0f 1e fa          	endbr64 
ffff80000080e4dd:	55                   	push   rbp
ffff80000080e4de:	48 89 e5             	mov    rbp,rsp
ffff80000080e4e1:	41 57                	push   r15
ffff80000080e4e3:	53                   	push   rbx
ffff80000080e4e4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e4e4 <init_disk+0xb>
ffff80000080e4eb:	49 bb 4c f5 10 00 00 	movabs r11,0x10f54c
ffff80000080e4f2:	00 00 00 
ffff80000080e4f5:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:21
    if((dev_hd= reg_blkdev(&bd_hd))<0)
ffff80000080e4f8:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000080e4ff:	ff ff ff 
ffff80000080e502:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e506:	48 89 c7             	mov    rdi,rax
ffff80000080e509:	49 89 df             	mov    r15,rbx
ffff80000080e50c:	48 b8 9f f6 ee ff ff 	movabs rax,0xffffffffffeef69f
ffff80000080e513:	ff ff ff 
ffff80000080e516:	48 01 d8             	add    rax,rbx
ffff80000080e519:	ff d0                	call   rax
ffff80000080e51b:	48 ba 10 ff ff ff ff 	movabs rdx,0xffffffffffffff10
ffff80000080e522:	ff ff ff 
ffff80000080e525:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e529:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080e52b:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e532:	ff ff ff 
ffff80000080e535:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e539:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e53b:	85 c0                	test   eax,eax
ffff80000080e53d:	79 07                	jns    ffff80000080e546 <init_disk+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:22
        return -1;
ffff80000080e53f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e544:	eb 05                	jmp    ffff80000080e54b <init_disk+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    // hd_iterate();
    return 0;
ffff80000080e546:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:28
}
ffff80000080e54b:	5b                   	pop    rbx
ffff80000080e54c:	41 5f                	pop    r15
ffff80000080e54e:	5d                   	pop    rbp
ffff80000080e54f:	c3                   	ret    

ffff80000080e550 <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31

int disk_int_handler_c()
{
ffff80000080e550:	f3 0f 1e fa          	endbr64 
ffff80000080e554:	55                   	push   rbp
ffff80000080e555:	48 89 e5             	mov    rbp,rsp
ffff80000080e558:	41 57                	push   r15
ffff80000080e55a:	53                   	push   rbx
ffff80000080e55b:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e55f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e55f <disk_int_handler_c+0xf>
ffff80000080e566:	49 bb d1 f4 10 00 00 	movabs r11,0x10f4d1
ffff80000080e56d:	00 00 00 
ffff80000080e570:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    if(r_running==NULL)
ffff80000080e573:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080e57a:	ff ff ff 
ffff80000080e57d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e581:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e584:	48 85 c0             	test   rax,rax
ffff80000080e587:	75 32                	jne    ffff80000080e5bb <disk_int_handler_c+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:34
    {
        comprintf("err:null running dreq\n");
ffff80000080e589:	48 b8 3a da ff ff ff 	movabs rax,0xffffffffffffda3a
ffff80000080e590:	ff ff ff 
ffff80000080e593:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e597:	48 89 c7             	mov    rdi,rax
ffff80000080e59a:	49 89 df             	mov    r15,rbx
ffff80000080e59d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e5a2:	48 ba dc 4b ef ff ff 	movabs rdx,0xffffffffffef4bdc
ffff80000080e5a9:	ff ff ff 
ffff80000080e5ac:	48 01 da             	add    rdx,rbx
ffff80000080e5af:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:35
        return 1;//同步读写硬盘
ffff80000080e5b1:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080e5b6:	e9 20 03 00 00       	jmp    ffff80000080e8db <disk_int_handler_c+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    }
    short *p=r_running->buffer;
ffff80000080e5bb:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080e5c2:	ff ff ff 
ffff80000080e5c5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e5c9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e5cc:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080e5d0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:38
    int port=PORT_DISK_MAJOR;
ffff80000080e5d4:	c7 45 e4 f0 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080e5db:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080e5e2:	ff ff ff 
ffff80000080e5e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e5e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e5ec:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e5ef:	0f b7 c0             	movzx  eax,ax
ffff80000080e5f2:	83 e0 0f             	and    eax,0xf
ffff80000080e5f5:	83 f8 02             	cmp    eax,0x2
ffff80000080e5f8:	74 1f                	je     ffff80000080e619 <disk_int_handler_c+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40 (discriminator 1)
    BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_SLAVE)
ffff80000080e5fa:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080e601:	ff ff ff 
ffff80000080e604:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e608:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e60b:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e60e:	0f b7 c0             	movzx  eax,ax
ffff80000080e611:	83 e0 0f             	and    eax,0xf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39 (discriminator 1)
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080e614:	83 f8 03             	cmp    eax,0x3
ffff80000080e617:	75 07                	jne    ffff80000080e620 <disk_int_handler_c+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:41
        port=PORT_DISK_SLAVE;
ffff80000080e619:	c7 45 e4 70 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    if(r_running->cmd==BLKDEV_REQ_READ)
ffff80000080e620:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080e627:	ff ff ff 
ffff80000080e62a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e62e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e631:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e634:	85 c0                	test   eax,eax
ffff80000080e636:	75 61                	jne    ffff80000080e699 <disk_int_handler_c+0x149>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e638:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080e63f:	eb 2f                	jmp    ffff80000080e670 <disk_int_handler_c+0x120>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:48 (discriminator 3)
        {
            *p++=inw(port);
ffff80000080e641:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e644:	0f b7 c0             	movzx  eax,ax
ffff80000080e647:	89 c7                	mov    edi,eax
ffff80000080e649:	49 89 df             	mov    r15,rbx
ffff80000080e64c:	48 b8 53 a1 ee ff ff 	movabs rax,0xffffffffffeea153
ffff80000080e653:	ff ff ff 
ffff80000080e656:	48 01 d8             	add    rax,rbx
ffff80000080e659:	ff d0                	call   rax
ffff80000080e65b:	89 c2                	mov    edx,eax
ffff80000080e65d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e661:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffff80000080e665:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080e669:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e66c:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 1)
ffff80000080e670:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080e673:	48 63 d0             	movsxd rdx,eax
ffff80000080e676:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080e67d:	ff ff ff 
ffff80000080e680:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e684:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e687:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e68b:	48 c1 e0 08          	shl    rax,0x8
ffff80000080e68f:	48 39 c2             	cmp    rdx,rax
ffff80000080e692:	72 ad                	jb     ffff80000080e641 <disk_int_handler_c+0xf1>
ffff80000080e694:	e9 53 01 00 00       	jmp    ffff80000080e7ec <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:50
        }
    }else if(r_running->cmd==BLKDEV_REQ_WRITE)
ffff80000080e699:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080e6a0:	ff ff ff 
ffff80000080e6a3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6a7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e6aa:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e6ad:	83 f8 01             	cmp    eax,0x1
ffff80000080e6b0:	75 64                	jne    ffff80000080e716 <disk_int_handler_c+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52
    {
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e6b2:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080e6b9:	eb 32                	jmp    ffff80000080e6ed <disk_int_handler_c+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
            outw(port,*p++);
ffff80000080e6bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e6bf:	48 8d 50 02          	lea    rdx,[rax+0x2]
ffff80000080e6c3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080e6c7:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e6ca:	0f b7 d0             	movzx  edx,ax
ffff80000080e6cd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e6d0:	0f b7 c0             	movzx  eax,ax
ffff80000080e6d3:	89 d6                	mov    esi,edx
ffff80000080e6d5:	89 c7                	mov    edi,eax
ffff80000080e6d7:	49 89 df             	mov    r15,rbx
ffff80000080e6da:	48 b8 3d a1 ee ff ff 	movabs rax,0xffffffffffeea13d
ffff80000080e6e1:	ff ff ff 
ffff80000080e6e4:	48 01 d8             	add    rax,rbx
ffff80000080e6e7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e6e9:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 1)
ffff80000080e6ed:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080e6f0:	48 63 d0             	movsxd rdx,eax
ffff80000080e6f3:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080e6fa:	ff ff ff 
ffff80000080e6fd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e701:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e704:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e708:	48 c1 e0 08          	shl    rax,0x8
ffff80000080e70c:	48 39 c2             	cmp    rdx,rax
ffff80000080e70f:	72 aa                	jb     ffff80000080e6bb <disk_int_handler_c+0x16b>
ffff80000080e711:	e9 d6 00 00 00       	jmp    ffff80000080e7ec <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:54
    }else if(r_running->cmd==DISKREQ_CHECK)
ffff80000080e716:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080e71d:	ff ff ff 
ffff80000080e720:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e724:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e727:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e72a:	83 f8 02             	cmp    eax,0x2
ffff80000080e72d:	75 54                	jne    ffff80000080e783 <disk_int_handler_c+0x233>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    {
        char stat=inb(port+7);
ffff80000080e72f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e732:	83 c0 07             	add    eax,0x7
ffff80000080e735:	0f b6 c0             	movzx  eax,al
ffff80000080e738:	89 c7                	mov    edi,eax
ffff80000080e73a:	49 89 df             	mov    r15,rbx
ffff80000080e73d:	48 b8 49 a1 ee ff ff 	movabs rax,0xffffffffffeea149
ffff80000080e744:	ff ff ff 
ffff80000080e747:	48 01 d8             	add    rax,rbx
ffff80000080e74a:	ff d0                	call   rax
ffff80000080e74c:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:57
        short dat=inw(port);
ffff80000080e74f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e752:	0f b7 c0             	movzx  eax,ax
ffff80000080e755:	89 c7                	mov    edi,eax
ffff80000080e757:	49 89 df             	mov    r15,rbx
ffff80000080e75a:	48 b8 53 a1 ee ff ff 	movabs rax,0xffffffffffeea153
ffff80000080e761:	ff ff ff 
ffff80000080e764:	48 01 d8             	add    rax,rbx
ffff80000080e767:	ff d0                	call   rax
ffff80000080e769:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        if(1)
        {
            last_chk_res=DISK_CHK_OK;
ffff80000080e76d:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff80000080e774:	ff ff ff 
ffff80000080e777:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e77b:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
ffff80000080e781:	eb 69                	jmp    ffff80000080e7ec <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        {
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            last_chk_res=DISK_CHK_ERR;
        }
    }else if(r_running->cmd==DISKREQ_RESET)
ffff80000080e783:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080e78a:	ff ff ff 
ffff80000080e78d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e791:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e794:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e797:	83 f8 03             	cmp    eax,0x3
ffff80000080e79a:	75 50                	jne    ffff80000080e7ec <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:69
    {
        int stat=inb(port+7);
ffff80000080e79c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e79f:	83 c0 07             	add    eax,0x7
ffff80000080e7a2:	0f b6 c0             	movzx  eax,al
ffff80000080e7a5:	89 c7                	mov    edi,eax
ffff80000080e7a7:	49 89 df             	mov    r15,rbx
ffff80000080e7aa:	48 b8 49 a1 ee ff ff 	movabs rax,0xffffffffffeea149
ffff80000080e7b1:	ff ff ff 
ffff80000080e7b4:	48 01 d8             	add    rax,rbx
ffff80000080e7b7:	ff d0                	call   rax
ffff80000080e7b9:	0f b6 c0             	movzx  eax,al
ffff80000080e7bc:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:70
        printf("reset disk done.\nstat now:%x\n",stat);
ffff80000080e7bf:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080e7c2:	89 c6                	mov    esi,eax
ffff80000080e7c4:	48 b8 51 da ff ff ff 	movabs rax,0xffffffffffffda51
ffff80000080e7cb:	ff ff ff 
ffff80000080e7ce:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e7d2:	48 89 c7             	mov    rdi,rax
ffff80000080e7d5:	49 89 df             	mov    r15,rbx
ffff80000080e7d8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e7dd:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080e7e4:	ff ff ff 
ffff80000080e7e7:	48 01 da             	add    rdx,rbx
ffff80000080e7ea:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:73
    }
    
    r_running=NULL;
ffff80000080e7ec:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080e7f3:	ff ff ff 
ffff80000080e7f6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e7fa:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:74
    end_request(dev_hd);
ffff80000080e801:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e808:	ff ff ff 
ffff80000080e80b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e80f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e811:	0f b7 c0             	movzx  eax,ax
ffff80000080e814:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    int major=BLKDEV_MAJOR(dev);
ffff80000080e818:	0f b7 45 d2          	movzx  eax,WORD PTR [rbp-0x2e]
ffff80000080e81c:	c1 f8 04             	sar    eax,0x4
ffff80000080e81f:	83 e0 0f             	and    eax,0xf
ffff80000080e822:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request->dev=-1;
ffff80000080e825:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e82c:	ff ff ff 
ffff80000080e82f:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080e833:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080e836:	48 98                	cdqe   
ffff80000080e838:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e83c:	48 01 d0             	add    rax,rdx
ffff80000080e83f:	48 83 c0 08          	add    rax,0x8
ffff80000080e843:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e846:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080e84b:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e852:	ff ff ff 
ffff80000080e855:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080e859:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080e85c:	48 98                	cdqe   
ffff80000080e85e:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e862:	48 01 d0             	add    rax,rdx
ffff80000080e865:	48 83 c0 08          	add    rax,0x8
ffff80000080e869:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e86c:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080e870:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080e877:	ff ff ff 
ffff80000080e87a:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080e87e:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080e881:	48 63 d2             	movsxd rdx,edx
ffff80000080e884:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080e888:	48 01 ca             	add    rdx,rcx
ffff80000080e88b:	48 83 c2 08          	add    rdx,0x8
ffff80000080e88f:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:68
}
ffff80000080e892:	90                   	nop
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:76
    //执行下一个请求
    hd_do_req(blk_devs[dev_hd].current_request);
ffff80000080e893:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e89a:	ff ff ff 
ffff80000080e89d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e8a1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e8a3:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080e8aa:	ff ff ff 
ffff80000080e8ad:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e8b1:	48 98                	cdqe   
ffff80000080e8b3:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e8b7:	48 01 d0             	add    rax,rdx
ffff80000080e8ba:	48 83 c0 08          	add    rax,0x8
ffff80000080e8be:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e8c1:	48 89 c7             	mov    rdi,rax
ffff80000080e8c4:	49 89 df             	mov    r15,rbx
ffff80000080e8c7:	48 b8 68 14 ef ff ff 	movabs rax,0xffffffffffef1468
ffff80000080e8ce:	ff ff ff 
ffff80000080e8d1:	48 01 d8             	add    rax,rbx
ffff80000080e8d4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    return 0;
ffff80000080e8d6:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
}
ffff80000080e8db:	48 83 c4 30          	add    rsp,0x30
ffff80000080e8df:	5b                   	pop    rbx
ffff80000080e8e0:	41 5f                	pop    r15
ffff80000080e8e2:	5d                   	pop    rbp
ffff80000080e8e3:	c3                   	ret    

ffff80000080e8e4 <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
int async_reset_disk(int disk)
{
ffff80000080e8e4:	f3 0f 1e fa          	endbr64 
ffff80000080e8e8:	55                   	push   rbp
ffff80000080e8e9:	48 89 e5             	mov    rbp,rsp
ffff80000080e8ec:	41 57                	push   r15
ffff80000080e8ee:	48 83 ec 18          	sub    rsp,0x18
ffff80000080e8f2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e8f2 <async_reset_disk+0xe>
ffff80000080e8f9:	49 bb 3e f1 10 00 00 	movabs r11,0x10f13e
ffff80000080e900:	00 00 00 
ffff80000080e903:	4c 01 d8             	add    rax,r11
ffff80000080e906:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
ffff80000080e909:	be 0c 00 00 00       	mov    esi,0xc
ffff80000080e90e:	bf f6 03 00 00       	mov    edi,0x3f6
ffff80000080e913:	49 89 c7             	mov    r15,rax
ffff80000080e916:	48 ba 30 a1 ee ff ff 	movabs rdx,0xffffffffffeea130
ffff80000080e91d:	ff ff ff 
ffff80000080e920:	48 01 c2             	add    rdx,rax
ffff80000080e923:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    return 0;
ffff80000080e925:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
}
ffff80000080e92a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080e92e:	c9                   	leave  
ffff80000080e92f:	c3                   	ret    

ffff80000080e930 <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
ffff80000080e930:	f3 0f 1e fa          	endbr64 
ffff80000080e934:	55                   	push   rbp
ffff80000080e935:	48 89 e5             	mov    rbp,rsp
ffff80000080e938:	41 57                	push   r15
ffff80000080e93a:	53                   	push   rbx
ffff80000080e93b:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e93f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e93f <async_read_disk+0xf>
ffff80000080e946:	49 bb f1 f0 10 00 00 	movabs r11,0x10f0f1
ffff80000080e94d:	00 00 00 
ffff80000080e950:	4c 01 db             	add    rbx,r11
ffff80000080e953:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080e956:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080e959:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080e95c:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080e960:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
    int slave_disk=0;
ffff80000080e966:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080e96d:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080e971:	74 06                	je     ffff80000080e979 <async_read_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88 (discriminator 1)
ffff80000080e973:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080e977:	75 06                	jne    ffff80000080e97f <async_read_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
        port=PORT_DISK_SLAVE;
ffff80000080e979:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080e97f:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080e983:	74 06                	je     ffff80000080e98b <async_read_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90 (discriminator 1)
ffff80000080e985:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080e989:	75 07                	jne    ffff80000080e992 <async_read_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
        slave_disk=1;
ffff80000080e98b:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
    outb(port+2,sec_n);
ffff80000080e992:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080e995:	0f b6 d0             	movzx  edx,al
ffff80000080e998:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080e99c:	83 c0 02             	add    eax,0x2
ffff80000080e99f:	0f b7 c0             	movzx  eax,ax
ffff80000080e9a2:	89 d6                	mov    esi,edx
ffff80000080e9a4:	89 c7                	mov    edi,eax
ffff80000080e9a6:	49 89 df             	mov    r15,rbx
ffff80000080e9a9:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080e9b0:	ff ff ff 
ffff80000080e9b3:	48 01 d8             	add    rax,rbx
ffff80000080e9b6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    outb(port+3,lba&0xff);
ffff80000080e9b8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080e9bb:	0f b6 d0             	movzx  edx,al
ffff80000080e9be:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080e9c2:	83 c0 03             	add    eax,0x3
ffff80000080e9c5:	0f b7 c0             	movzx  eax,ax
ffff80000080e9c8:	89 d6                	mov    esi,edx
ffff80000080e9ca:	89 c7                	mov    edi,eax
ffff80000080e9cc:	49 89 df             	mov    r15,rbx
ffff80000080e9cf:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080e9d6:	ff ff ff 
ffff80000080e9d9:	48 01 d8             	add    rax,rbx
ffff80000080e9dc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:94
    outb(port+4,(lba>>8)&0xff);
ffff80000080e9de:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080e9e1:	c1 e8 08             	shr    eax,0x8
ffff80000080e9e4:	0f b6 d0             	movzx  edx,al
ffff80000080e9e7:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080e9eb:	83 c0 04             	add    eax,0x4
ffff80000080e9ee:	0f b7 c0             	movzx  eax,ax
ffff80000080e9f1:	89 d6                	mov    esi,edx
ffff80000080e9f3:	89 c7                	mov    edi,eax
ffff80000080e9f5:	49 89 df             	mov    r15,rbx
ffff80000080e9f8:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080e9ff:	ff ff ff 
ffff80000080ea02:	48 01 d8             	add    rax,rbx
ffff80000080ea05:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    outb(port+5,(lba>>16)&0xff);
ffff80000080ea07:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ea0a:	c1 e8 10             	shr    eax,0x10
ffff80000080ea0d:	0f b6 d0             	movzx  edx,al
ffff80000080ea10:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ea14:	83 c0 05             	add    eax,0x5
ffff80000080ea17:	0f b7 c0             	movzx  eax,ax
ffff80000080ea1a:	89 d6                	mov    esi,edx
ffff80000080ea1c:	89 c7                	mov    edi,eax
ffff80000080ea1e:	49 89 df             	mov    r15,rbx
ffff80000080ea21:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080ea28:	ff ff ff 
ffff80000080ea2b:	48 01 d8             	add    rax,rbx
ffff80000080ea2e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96
    char drv=slave_disk?0x10:0;
ffff80000080ea30:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080ea34:	74 07                	je     ffff80000080ea3d <async_read_disk+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 1)
ffff80000080ea36:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080ea3b:	eb 05                	jmp    ffff80000080ea42 <async_read_disk+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 2)
ffff80000080ea3d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 4)
ffff80000080ea42:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080ea45:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ea48:	c1 e8 18             	shr    eax,0x18
ffff80000080ea4b:	83 e0 0f             	and    eax,0xf
ffff80000080ea4e:	89 c2                	mov    edx,eax
ffff80000080ea50:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080ea54:	09 d0                	or     eax,edx
ffff80000080ea56:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080ea59:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080ea5c:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffff80000080ea60:	0f b6 d0             	movzx  edx,al
ffff80000080ea63:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ea67:	83 c0 06             	add    eax,0x6
ffff80000080ea6a:	0f b7 c0             	movzx  eax,ax
ffff80000080ea6d:	89 d6                	mov    esi,edx
ffff80000080ea6f:	89 c7                	mov    edi,eax
ffff80000080ea71:	49 89 df             	mov    r15,rbx
ffff80000080ea74:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080ea7b:	ff ff ff 
ffff80000080ea7e:	48 01 d8             	add    rax,rbx
ffff80000080ea81:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
ffff80000080ea83:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ea87:	83 c0 07             	add    eax,0x7
ffff80000080ea8a:	0f b7 c0             	movzx  eax,ax
ffff80000080ea8d:	be 20 00 00 00       	mov    esi,0x20
ffff80000080ea92:	89 c7                	mov    edi,eax
ffff80000080ea94:	49 89 df             	mov    r15,rbx
ffff80000080ea97:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080ea9e:	ff ff ff 
ffff80000080eaa1:	48 01 d8             	add    rax,rbx
ffff80000080eaa4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
ffff80000080eaa6:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:120 (discriminator 4)
}
ffff80000080eaab:	48 83 c4 30          	add    rsp,0x30
ffff80000080eaaf:	5b                   	pop    rbx
ffff80000080eab0:	41 5f                	pop    r15
ffff80000080eab2:	5d                   	pop    rbp
ffff80000080eab3:	c3                   	ret    

ffff80000080eab4 <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:122
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
ffff80000080eab4:	f3 0f 1e fa          	endbr64 
ffff80000080eab8:	55                   	push   rbp
ffff80000080eab9:	48 89 e5             	mov    rbp,rsp
ffff80000080eabc:	41 57                	push   r15
ffff80000080eabe:	53                   	push   rbx
ffff80000080eabf:	48 83 ec 30          	sub    rsp,0x30
ffff80000080eac3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080eac3 <async_write_disk+0xf>
ffff80000080eaca:	49 bb 6d ef 10 00 00 	movabs r11,0x10ef6d
ffff80000080ead1:	00 00 00 
ffff80000080ead4:	4c 01 db             	add    rbx,r11
ffff80000080ead7:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080eada:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080eadd:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080eae0:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080eae4:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:124
    int slave_disk=0;
ffff80000080eaea:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080eaf1:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080eaf5:	74 06                	je     ffff80000080eafd <async_write_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125 (discriminator 1)
ffff80000080eaf7:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080eafb:	75 06                	jne    ffff80000080eb03 <async_write_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        port=PORT_DISK_SLAVE;
ffff80000080eafd:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080eb03:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080eb07:	74 06                	je     ffff80000080eb0f <async_write_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127 (discriminator 1)
ffff80000080eb09:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080eb0d:	75 07                	jne    ffff80000080eb16 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
        slave_disk=1;
ffff80000080eb0f:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    while (1)
    {
        byte t=inb(0x1f7);
ffff80000080eb16:	bf f7 00 00 00       	mov    edi,0xf7
ffff80000080eb1b:	49 89 df             	mov    r15,rbx
ffff80000080eb1e:	48 b8 49 a1 ee ff ff 	movabs rax,0xffffffffffeea149
ffff80000080eb25:	ff ff ff 
ffff80000080eb28:	48 01 d8             	add    rax,rbx
ffff80000080eb2b:	ff d0                	call   rax
ffff80000080eb2d:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:133
        //logf("istat:%x",t);
        byte err=t&1;
ffff80000080eb30:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080eb34:	83 e0 01             	and    eax,0x1
ffff80000080eb37:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:134
        if(err!=0)
ffff80000080eb3a:	80 7d e6 00          	cmp    BYTE PTR [rbp-0x1a],0x0
ffff80000080eb3e:	74 0a                	je     ffff80000080eb4a <async_write_disk+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        {
            //printf("ERR iwriting disk\n");
            return -1;
ffff80000080eb40:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080eb45:	e9 23 01 00 00       	jmp    ffff80000080ec6d <async_write_disk+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        }
        t&=0x88;
ffff80000080eb4a:	80 65 e7 88          	and    BYTE PTR [rbp-0x19],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080eb4e:	80 7d e7 08          	cmp    BYTE PTR [rbp-0x19],0x8
ffff80000080eb52:	74 02                	je     ffff80000080eb56 <async_write_disk+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:130
    {
ffff80000080eb54:	eb c0                	jmp    ffff80000080eb16 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080eb56:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
    }
    outb(port+2,sec_n);
ffff80000080eb57:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080eb5a:	0f b6 d0             	movzx  edx,al
ffff80000080eb5d:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb61:	83 c0 02             	add    eax,0x2
ffff80000080eb64:	0f b7 c0             	movzx  eax,ax
ffff80000080eb67:	89 d6                	mov    esi,edx
ffff80000080eb69:	89 c7                	mov    edi,eax
ffff80000080eb6b:	49 89 df             	mov    r15,rbx
ffff80000080eb6e:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080eb75:	ff ff ff 
ffff80000080eb78:	48 01 d8             	add    rax,rbx
ffff80000080eb7b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:143
    outb(port+3,lba&0xff);
ffff80000080eb7d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eb80:	0f b6 d0             	movzx  edx,al
ffff80000080eb83:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb87:	83 c0 03             	add    eax,0x3
ffff80000080eb8a:	0f b7 c0             	movzx  eax,ax
ffff80000080eb8d:	89 d6                	mov    esi,edx
ffff80000080eb8f:	89 c7                	mov    edi,eax
ffff80000080eb91:	49 89 df             	mov    r15,rbx
ffff80000080eb94:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080eb9b:	ff ff ff 
ffff80000080eb9e:	48 01 d8             	add    rax,rbx
ffff80000080eba1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
    outb(port+4,(lba>>8)&0xff);
ffff80000080eba3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eba6:	c1 e8 08             	shr    eax,0x8
ffff80000080eba9:	0f b6 d0             	movzx  edx,al
ffff80000080ebac:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ebb0:	83 c0 04             	add    eax,0x4
ffff80000080ebb3:	0f b7 c0             	movzx  eax,ax
ffff80000080ebb6:	89 d6                	mov    esi,edx
ffff80000080ebb8:	89 c7                	mov    edi,eax
ffff80000080ebba:	49 89 df             	mov    r15,rbx
ffff80000080ebbd:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080ebc4:	ff ff ff 
ffff80000080ebc7:	48 01 d8             	add    rax,rbx
ffff80000080ebca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
    outb(port+5,(lba>>16)&0xff);
ffff80000080ebcc:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ebcf:	c1 e8 10             	shr    eax,0x10
ffff80000080ebd2:	0f b6 d0             	movzx  edx,al
ffff80000080ebd5:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ebd9:	83 c0 05             	add    eax,0x5
ffff80000080ebdc:	0f b7 c0             	movzx  eax,ax
ffff80000080ebdf:	89 d6                	mov    esi,edx
ffff80000080ebe1:	89 c7                	mov    edi,eax
ffff80000080ebe3:	49 89 df             	mov    r15,rbx
ffff80000080ebe6:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080ebed:	ff ff ff 
ffff80000080ebf0:	48 01 d8             	add    rax,rbx
ffff80000080ebf3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146
    char drv=slave_disk?0x10:0;
ffff80000080ebf5:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080ebf9:	74 07                	je     ffff80000080ec02 <async_write_disk+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 1)
ffff80000080ebfb:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080ec00:	eb 05                	jmp    ffff80000080ec07 <async_write_disk+0x153>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 2)
ffff80000080ec02:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 4)
ffff80000080ec07:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080ec0a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ec0d:	c1 e8 18             	shr    eax,0x18
ffff80000080ec10:	83 e0 0f             	and    eax,0xf
ffff80000080ec13:	89 c2                	mov    edx,eax
ffff80000080ec15:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffff80000080ec19:	09 d0                	or     eax,edx
ffff80000080ec1b:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080ec1e:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080ec21:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000080ec25:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ec29:	83 c0 06             	add    eax,0x6
ffff80000080ec2c:	0f b7 c0             	movzx  eax,ax
ffff80000080ec2f:	89 d6                	mov    esi,edx
ffff80000080ec31:	89 c7                	mov    edi,eax
ffff80000080ec33:	49 89 df             	mov    r15,rbx
ffff80000080ec36:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080ec3d:	ff ff ff 
ffff80000080ec40:	48 01 d8             	add    rax,rbx
ffff80000080ec43:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:149 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
ffff80000080ec45:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ec49:	83 c0 07             	add    eax,0x7
ffff80000080ec4c:	0f b7 c0             	movzx  eax,ax
ffff80000080ec4f:	be 30 00 00 00       	mov    esi,0x30
ffff80000080ec54:	89 c7                	mov    edi,eax
ffff80000080ec56:	49 89 df             	mov    r15,rbx
ffff80000080ec59:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080ec60:	ff ff ff 
ffff80000080ec63:	48 01 d8             	add    rax,rbx
ffff80000080ec66:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
ffff80000080ec68:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
}
ffff80000080ec6d:	48 83 c4 30          	add    rsp,0x30
ffff80000080ec71:	5b                   	pop    rbx
ffff80000080ec72:	41 5f                	pop    r15
ffff80000080ec74:	5d                   	pop    rbp
ffff80000080ec75:	c3                   	ret    

ffff80000080ec76 <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
int read_disk(int disk, int lba, int secn, char *dest)
{
ffff80000080ec76:	f3 0f 1e fa          	endbr64 
ffff80000080ec7a:	55                   	push   rbp
ffff80000080ec7b:	48 89 e5             	mov    rbp,rsp
ffff80000080ec7e:	41 57                	push   r15
ffff80000080ec80:	53                   	push   rbx
ffff80000080ec81:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ec85:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ec85 <read_disk+0xf>
ffff80000080ec8c:	49 bb ab ed 10 00 00 	movabs r11,0x10edab
ffff80000080ec93:	00 00 00 
ffff80000080ec96:	4c 01 db             	add    rbx,r11
ffff80000080ec99:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ec9c:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ec9f:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080eca2:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    // request(disk,DISKREQ_READ,lba,secn,dest);
    int ret=read_disk_asm(lba,secn,dest);
ffff80000080eca6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ecaa:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080ecad:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ecb0:	89 ce                	mov    esi,ecx
ffff80000080ecb2:	89 c7                	mov    edi,eax
ffff80000080ecb4:	49 89 df             	mov    r15,rbx
ffff80000080ecb7:	48 b8 ec 15 ef ff ff 	movabs rax,0xffffffffffef15ec
ffff80000080ecbe:	ff ff ff 
ffff80000080ecc1:	48 01 d8             	add    rax,rbx
ffff80000080ecc4:	ff d0                	call   rax
ffff80000080ecc6:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:179

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080ecc9:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080ecd0:	ff ff ff 
ffff80000080ecd3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ecd7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:180
    return ret;
ffff80000080ecde:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:181
}
ffff80000080ece1:	48 83 c4 30          	add    rsp,0x30
ffff80000080ece5:	5b                   	pop    rbx
ffff80000080ece6:	41 5f                	pop    r15
ffff80000080ece8:	5d                   	pop    rbp
ffff80000080ece9:	c3                   	ret    

ffff80000080ecea <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:183
int write_disk(int disk, int lba, int secn, char *src)
{
ffff80000080ecea:	f3 0f 1e fa          	endbr64 
ffff80000080ecee:	55                   	push   rbp
ffff80000080ecef:	48 89 e5             	mov    rbp,rsp
ffff80000080ecf2:	41 57                	push   r15
ffff80000080ecf4:	53                   	push   rbx
ffff80000080ecf5:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ecf9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ecf9 <write_disk+0xf>
ffff80000080ed00:	49 bb 37 ed 10 00 00 	movabs r11,0x10ed37
ffff80000080ed07:	00 00 00 
ffff80000080ed0a:	4c 01 db             	add    rbx,r11
ffff80000080ed0d:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ed10:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ed13:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ed16:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:185
    // request(disk,DISKREQ_WRITE,lba,secn,src);
    int ret=write_disk_asm(lba,secn,src);
ffff80000080ed1a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ed1e:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080ed21:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ed24:	89 ce                	mov    esi,ecx
ffff80000080ed26:	89 c7                	mov    edi,eax
ffff80000080ed28:	49 89 df             	mov    r15,rbx
ffff80000080ed2b:	48 b8 60 16 ef ff ff 	movabs rax,0xffffffffffef1660
ffff80000080ed32:	ff ff ff 
ffff80000080ed35:	48 01 d8             	add    rax,rbx
ffff80000080ed38:	ff d0                	call   rax
ffff80000080ed3a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:192
    if(running_req){

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    running_req=NULL;
ffff80000080ed3d:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080ed44:	ff ff ff 
ffff80000080ed47:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed4b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:193
    return ret;
ffff80000080ed52:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:194
}
ffff80000080ed55:	48 83 c4 30          	add    rsp,0x30
ffff80000080ed59:	5b                   	pop    rbx
ffff80000080ed5a:	41 5f                	pop    r15
ffff80000080ed5c:	5d                   	pop    rbp
ffff80000080ed5d:	c3                   	ret    

ffff80000080ed5e <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198


int async_check_disk(int disk)
{
ffff80000080ed5e:	f3 0f 1e fa          	endbr64 
ffff80000080ed62:	55                   	push   rbp
ffff80000080ed63:	48 89 e5             	mov    rbp,rsp
ffff80000080ed66:	41 57                	push   r15
ffff80000080ed68:	53                   	push   rbx
ffff80000080ed69:	48 83 ec 20          	sub    rsp,0x20
ffff80000080ed6d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ed6d <async_check_disk+0xf>
ffff80000080ed74:	49 bb c3 ec 10 00 00 	movabs r11,0x10ecc3
ffff80000080ed7b:	00 00 00 
ffff80000080ed7e:	4c 01 db             	add    rbx,r11
ffff80000080ed81:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short disknr=PORT_DISK_MAJOR;
ffff80000080ed84:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    unsigned short chkcmd=0xe0;
ffff80000080ed8a:	66 c7 45 ec e0 00    	mov    WORD PTR [rbp-0x14],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ed90:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080ed94:	74 06                	je     ffff80000080ed9c <async_check_disk+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
ffff80000080ed96:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ed9a:	75 06                	jne    ffff80000080eda2 <async_check_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        disknr=PORT_DISK_SLAVE;
ffff80000080ed9c:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
ffff80000080eda2:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080eda6:	74 06                	je     ffff80000080edae <async_check_disk+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
ffff80000080eda8:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080edac:	75 06                	jne    ffff80000080edb4 <async_check_disk+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        chkcmd=0xf0;
ffff80000080edae:	66 c7 45 ec f0 00    	mov    WORD PTR [rbp-0x14],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:205
    outb(disknr+2,1);
ffff80000080edb4:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080edb8:	83 c0 02             	add    eax,0x2
ffff80000080edbb:	0f b7 c0             	movzx  eax,ax
ffff80000080edbe:	be 01 00 00 00       	mov    esi,0x1
ffff80000080edc3:	89 c7                	mov    edi,eax
ffff80000080edc5:	49 89 df             	mov    r15,rbx
ffff80000080edc8:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080edcf:	ff ff ff 
ffff80000080edd2:	48 01 d8             	add    rax,rbx
ffff80000080edd5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    outb(disknr+3,0);
ffff80000080edd7:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eddb:	83 c0 03             	add    eax,0x3
ffff80000080edde:	0f b7 c0             	movzx  eax,ax
ffff80000080ede1:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ede6:	89 c7                	mov    edi,eax
ffff80000080ede8:	49 89 df             	mov    r15,rbx
ffff80000080edeb:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080edf2:	ff ff ff 
ffff80000080edf5:	48 01 d8             	add    rax,rbx
ffff80000080edf8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    outb(disknr+4,0);
ffff80000080edfa:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080edfe:	83 c0 04             	add    eax,0x4
ffff80000080ee01:	0f b7 c0             	movzx  eax,ax
ffff80000080ee04:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ee09:	89 c7                	mov    edi,eax
ffff80000080ee0b:	49 89 df             	mov    r15,rbx
ffff80000080ee0e:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080ee15:	ff ff ff 
ffff80000080ee18:	48 01 d8             	add    rax,rbx
ffff80000080ee1b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:208
    outb(disknr+5,0);
ffff80000080ee1d:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ee21:	83 c0 05             	add    eax,0x5
ffff80000080ee24:	0f b7 c0             	movzx  eax,ax
ffff80000080ee27:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ee2c:	89 c7                	mov    edi,eax
ffff80000080ee2e:	49 89 df             	mov    r15,rbx
ffff80000080ee31:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080ee38:	ff ff ff 
ffff80000080ee3b:	48 01 d8             	add    rax,rbx
ffff80000080ee3e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
    outb(disknr+6,chkcmd);//主硬盘
ffff80000080ee40:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffff80000080ee44:	0f b6 d0             	movzx  edx,al
ffff80000080ee47:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ee4b:	83 c0 06             	add    eax,0x6
ffff80000080ee4e:	0f b7 c0             	movzx  eax,ax
ffff80000080ee51:	89 d6                	mov    esi,edx
ffff80000080ee53:	89 c7                	mov    edi,eax
ffff80000080ee55:	49 89 df             	mov    r15,rbx
ffff80000080ee58:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080ee5f:	ff ff ff 
ffff80000080ee62:	48 01 d8             	add    rax,rbx
ffff80000080ee65:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
    outb(disknr+7,DISK_CMD_CHECK);
ffff80000080ee67:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ee6b:	83 c0 07             	add    eax,0x7
ffff80000080ee6e:	0f b7 c0             	movzx  eax,ax
ffff80000080ee71:	be 90 00 00 00       	mov    esi,0x90
ffff80000080ee76:	89 c7                	mov    edi,eax
ffff80000080ee78:	49 89 df             	mov    r15,rbx
ffff80000080ee7b:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000080ee82:	ff ff ff 
ffff80000080ee85:	48 01 d8             	add    rax,rbx
ffff80000080ee88:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
ffff80000080ee8a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
}
ffff80000080ee8f:	48 83 c4 20          	add    rsp,0x20
ffff80000080ee93:	5b                   	pop    rbx
ffff80000080ee94:	41 5f                	pop    r15
ffff80000080ee96:	5d                   	pop    rbp
ffff80000080ee97:	c3                   	ret    

ffff80000080ee98 <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:226

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(struct request* req)
{
ffff80000080ee98:	f3 0f 1e fa          	endbr64 
ffff80000080ee9c:	55                   	push   rbp
ffff80000080ee9d:	48 89 e5             	mov    rbp,rsp
ffff80000080eea0:	41 57                	push   r15
ffff80000080eea2:	48 83 ec 28          	sub    rsp,0x28
ffff80000080eea6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080eea6 <hd_do_req+0xe>
ffff80000080eead:	49 bb 8a eb 10 00 00 	movabs r11,0x10eb8a
ffff80000080eeb4:	00 00 00 
ffff80000080eeb7:	4c 01 d8             	add    rax,r11
ffff80000080eeba:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:227
    if(!req)
ffff80000080eebe:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080eec3:	75 0a                	jne    ffff80000080eecf <hd_do_req+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:228
        return -1;
ffff80000080eec5:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080eeca:	e9 38 01 00 00       	jmp    ffff80000080f007 <hd_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:229
    start_request(req->dev);
ffff80000080eecf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080eed3:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080eed6:	0f b7 d2             	movzx  edx,dx
ffff80000080eed9:	66 89 55 ea          	mov    WORD PTR [rbp-0x16],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080eedd:	0f b7 55 ea          	movzx  edx,WORD PTR [rbp-0x16]
ffff80000080eee1:	c1 fa 04             	sar    edx,0x4
ffff80000080eee4:	89 d1                	mov    ecx,edx
ffff80000080eee6:	83 e1 0f             	and    ecx,0xf
ffff80000080eee9:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080eef0:	ff ff ff 
ffff80000080eef3:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080eef7:	48 63 d1             	movsxd rdx,ecx
ffff80000080eefa:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080eefe:	48 01 f2             	add    rdx,rsi
ffff80000080ef01:	48 83 c2 08          	add    rdx,0x8
ffff80000080ef05:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ef08:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080ef0c:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:195
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080ef10:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ef14:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080ef17:	83 fa 02             	cmp    edx,0x2
ffff80000080ef1a:	74 0c                	je     ffff80000080ef28 <hd_do_req+0x90>
ffff80000080ef1c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ef20:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080ef23:	83 fa 01             	cmp    edx,0x1
ffff80000080ef26:	75 0b                	jne    ffff80000080ef33 <hd_do_req+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
            p->stat=TASK_SUSPENDED;
ffff80000080ef28:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ef2c:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
}
ffff80000080ef33:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:71
ffff80000080ef34:	90                   	nop
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:230
    int diski=BLKDEV_MINOR(req->dev);
ffff80000080ef35:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ef39:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080ef3c:	0f b7 d2             	movzx  edx,dx
ffff80000080ef3f:	83 e2 0f             	and    edx,0xf
ffff80000080ef42:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:233
    // for(;disks[diski]!=args->dev;diski++);

    switch (req->cmd)
ffff80000080ef45:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ef49:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080ef4c:	83 fa 04             	cmp    edx,0x4
ffff80000080ef4f:	0f 84 8d 00 00 00    	je     ffff80000080efe2 <hd_do_req+0x14a>
ffff80000080ef55:	83 fa 04             	cmp    edx,0x4
ffff80000080ef58:	0f 8f 9d 00 00 00    	jg     ffff80000080effb <hd_do_req+0x163>
ffff80000080ef5e:	85 d2                	test   edx,edx
ffff80000080ef60:	74 0a                	je     ffff80000080ef6c <hd_do_req+0xd4>
ffff80000080ef62:	83 fa 01             	cmp    edx,0x1
ffff80000080ef65:	74 40                	je     ffff80000080efa7 <hd_do_req+0x10f>
ffff80000080ef67:	e9 8f 00 00 00       	jmp    ffff80000080effb <hd_do_req+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:236
    {
    case BLKDEV_REQ_READ:
        async_read_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080ef6c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ef70:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080ef74:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080ef78:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
ffff80000080ef7c:	41 89 c8             	mov    r8d,ecx
ffff80000080ef7f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080ef83:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffff80000080ef87:	89 ce                	mov    esi,ecx
ffff80000080ef89:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080ef8c:	48 89 d1             	mov    rcx,rdx
ffff80000080ef8f:	44 89 c2             	mov    edx,r8d
ffff80000080ef92:	49 89 c7             	mov    r15,rax
ffff80000080ef95:	49 b8 00 0f ef ff ff 	movabs r8,0xffffffffffef0f00
ffff80000080ef9c:	ff ff ff 
ffff80000080ef9f:	49 01 c0             	add    r8,rax
ffff80000080efa2:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:237
        break;
ffff80000080efa5:	eb 5b                	jmp    ffff80000080f002 <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:239
    case BLKDEV_REQ_WRITE:
        async_write_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080efa7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080efab:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080efaf:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080efb3:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
ffff80000080efb7:	41 89 c8             	mov    r8d,ecx
ffff80000080efba:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080efbe:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffff80000080efc2:	89 ce                	mov    esi,ecx
ffff80000080efc4:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080efc7:	48 89 d1             	mov    rcx,rdx
ffff80000080efca:	44 89 c2             	mov    edx,r8d
ffff80000080efcd:	49 89 c7             	mov    r15,rax
ffff80000080efd0:	49 b8 84 10 ef ff ff 	movabs r8,0xffffffffffef1084
ffff80000080efd7:	ff ff ff 
ffff80000080efda:	49 01 c0             	add    r8,rax
ffff80000080efdd:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:240
        break;
ffff80000080efe0:	eb 20                	jmp    ffff80000080f002 <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242
    case DRVF_CHK:
        async_check_disk(diski);
ffff80000080efe2:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080efe5:	89 d7                	mov    edi,edx
ffff80000080efe7:	49 89 c7             	mov    r15,rax
ffff80000080efea:	48 ba 2e 13 ef ff ff 	movabs rdx,0xffffffffffef132e
ffff80000080eff1:	ff ff ff 
ffff80000080eff4:	48 01 c2             	add    rdx,rax
ffff80000080eff7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
        break;
ffff80000080eff9:	eb 07                	jmp    ffff80000080f002 <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:244
    default:return -1;
ffff80000080effb:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f000:	eb 05                	jmp    ffff80000080f007 <hd_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    }
    return 0;
ffff80000080f002:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:247
ffff80000080f007:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f00b:	c9                   	leave  
ffff80000080f00c:	c3                   	ret    
ffff80000080f00d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff80000080f010 <disk_int_handler>:
disk_int_handler():
ffff80000080f010:	e8 79 8b ff ff       	call   ffff800000807b8e <eoi>
ffff80000080f015:	e8 36 f5 ff ff       	call   ffff80000080e550 <disk_int_handler_c>
ffff80000080f01a:	48 cf                	iretq  

ffff80000080f01c <read_disk_asm>:
read_disk_asm():
ffff80000080f01c:	55                   	push   rbp
ffff80000080f01d:	48 89 e5             	mov    rbp,rsp
ffff80000080f020:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f024:	31 c9                	xor    ecx,ecx
ffff80000080f026:	48 89 f8             	mov    rax,rdi
ffff80000080f029:	48 89 f1             	mov    rcx,rsi
ffff80000080f02c:	48 89 d3             	mov    rbx,rdx
ffff80000080f02f:	48 89 c6             	mov    rsi,rax
ffff80000080f032:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f036:	88 c8                	mov    al,cl
ffff80000080f038:	ee                   	out    dx,al
ffff80000080f039:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f03d:	89 f0                	mov    eax,esi
ffff80000080f03f:	ee                   	out    dx,al
ffff80000080f040:	66 ff c2             	inc    dx
ffff80000080f043:	c1 e8 08             	shr    eax,0x8
ffff80000080f046:	ee                   	out    dx,al
ffff80000080f047:	66 ff c2             	inc    dx
ffff80000080f04a:	c1 e8 08             	shr    eax,0x8
ffff80000080f04d:	ee                   	out    dx,al
ffff80000080f04e:	66 ff c2             	inc    dx
ffff80000080f051:	66 c1 e8 08          	shr    ax,0x8
ffff80000080f055:	24 0f                	and    al,0xf
ffff80000080f057:	0c e0                	or     al,0xe0
ffff80000080f059:	ee                   	out    dx,al
ffff80000080f05a:	66 ff c2             	inc    dx
ffff80000080f05d:	b0 20                	mov    al,0x20
ffff80000080f05f:	ee                   	out    dx,al

ffff80000080f060 <read_disk_asm.wait>:
read_disk_asm.wait():
ffff80000080f060:	90                   	nop
ffff80000080f061:	ec                   	in     al,dx
ffff80000080f062:	24 88                	and    al,0x88
ffff80000080f064:	3c 08                	cmp    al,0x8
ffff80000080f066:	75 f8                	jne    ffff80000080f060 <read_disk_asm.wait>
ffff80000080f068:	66 89 d7             	mov    di,dx
ffff80000080f06b:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080f06f:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f073 <read_disk_asm.read>:
read_disk_asm.read():
ffff80000080f073:	66 ed                	in     ax,dx
ffff80000080f075:	66 89 03             	mov    WORD PTR [rbx],ax
ffff80000080f078:	48 83 c3 02          	add    rbx,0x2
ffff80000080f07c:	e2 f5                	loop   ffff80000080f073 <read_disk_asm.read>
ffff80000080f07e:	c9                   	leave  
ffff80000080f07f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f084:	c3                   	ret    

ffff80000080f085 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
ffff80000080f085:	66 ba f1 01          	mov    dx,0x1f1
ffff80000080f089:	48 31 c0             	xor    rax,rax
ffff80000080f08c:	66 ed                	in     ax,dx
ffff80000080f08e:	c9                   	leave  
ffff80000080f08f:	c3                   	ret    

ffff80000080f090 <write_disk_asm>:
write_disk_asm():
ffff80000080f090:	55                   	push   rbp
ffff80000080f091:	48 89 e5             	mov    rbp,rsp
ffff80000080f094:	48 89 f8             	mov    rax,rdi
ffff80000080f097:	48 89 f1             	mov    rcx,rsi
ffff80000080f09a:	48 89 d3             	mov    rbx,rdx
ffff80000080f09d:	50                   	push   rax
ffff80000080f09e:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f0a2:	88 c8                	mov    al,cl
ffff80000080f0a4:	ee                   	out    dx,al
ffff80000080f0a5:	58                   	pop    rax
ffff80000080f0a6:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f0aa:	ee                   	out    dx,al
ffff80000080f0ab:	c1 e8 08             	shr    eax,0x8
ffff80000080f0ae:	66 ba f4 01          	mov    dx,0x1f4
ffff80000080f0b2:	ee                   	out    dx,al
ffff80000080f0b3:	c1 e8 08             	shr    eax,0x8
ffff80000080f0b6:	66 ba f5 01          	mov    dx,0x1f5
ffff80000080f0ba:	ee                   	out    dx,al
ffff80000080f0bb:	c1 e8 08             	shr    eax,0x8
ffff80000080f0be:	24 0f                	and    al,0xf
ffff80000080f0c0:	0c e0                	or     al,0xe0
ffff80000080f0c2:	66 ba f6 01          	mov    dx,0x1f6
ffff80000080f0c6:	ee                   	out    dx,al
ffff80000080f0c7:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f0cb:	b0 30                	mov    al,0x30
ffff80000080f0cd:	ee                   	out    dx,al

ffff80000080f0ce <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
ffff80000080f0ce:	90                   	nop
ffff80000080f0cf:	ec                   	in     al,dx
ffff80000080f0d0:	24 88                	and    al,0x88
ffff80000080f0d2:	3c 08                	cmp    al,0x8
ffff80000080f0d4:	75 f8                	jne    ffff80000080f0ce <write_disk_asm.not_ready2>
ffff80000080f0d6:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080f0da:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f0de <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
ffff80000080f0de:	66 8b 03             	mov    ax,WORD PTR [rbx]
ffff80000080f0e1:	66 ef                	out    dx,ax
ffff80000080f0e3:	83 c3 02             	add    ebx,0x2
ffff80000080f0e6:	e2 f6                	loop   ffff80000080f0de <write_disk_asm.go_on_write>
ffff80000080f0e8:	c9                   	leave  
ffff80000080f0e9:	c3                   	ret    

ffff80000080f0ea <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:14
#include "memory.h"
#include "devman.h"
#include <sys/unistd.h>

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
ffff80000080f0ea:	f3 0f 1e fa          	endbr64 
ffff80000080f0ee:	55                   	push   rbp
ffff80000080f0ef:	48 89 e5             	mov    rbp,rsp
ffff80000080f0f2:	41 57                	push   r15
ffff80000080f0f4:	53                   	push   rbx
ffff80000080f0f5:	48 83 ec 20          	sub    rsp,0x20
ffff80000080f0f9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f0f9 <DISK1_FAT32_read_FAT_Entry+0xf>
ffff80000080f100:	49 bb 37 e9 10 00 00 	movabs r11,0x10e937
ffff80000080f107:	00 00 00 
ffff80000080f10a:	4c 01 db             	add    rbx,r11
ffff80000080f10d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080f111:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:16
	unsigned int *buf;
	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080f114:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f118:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f11c:	89 c2                	mov    edx,eax
ffff80000080f11e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f121:	c1 e8 07             	shr    eax,0x7
ffff80000080f124:	01 d0                	add    eax,edx
ffff80000080f126:	89 c2                	mov    edx,eax
ffff80000080f128:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080f12f:	ff ff ff 
ffff80000080f132:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f136:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f139:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f13d:	0f b7 c0             	movzx  eax,ax
ffff80000080f140:	89 d6                	mov    esi,edx
ffff80000080f142:	89 c7                	mov    edi,eax
ffff80000080f144:	49 89 df             	mov    r15,rbx
ffff80000080f147:	48 b8 cc fc ee ff ff 	movabs rax,0xffffffffffeefccc
ffff80000080f14e:	ff ff ff 
ffff80000080f151:	48 01 d8             	add    rax,rbx
ffff80000080f154:	ff d0                	call   rax
ffff80000080f156:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
	buf=bh->data;
ffff80000080f15a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f15e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f161:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:18
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%#010x\n",fat_entry,buf[fat_entry & 0x7f]);
ffff80000080f165:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f168:	83 e0 7f             	and    eax,0x7f
ffff80000080f16b:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f172:	00 
ffff80000080f173:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f177:	48 01 d0             	add    rax,rdx
ffff80000080f17a:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080f17c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f17f:	89 c6                	mov    esi,eax
ffff80000080f181:	48 b8 70 da ff ff ff 	movabs rax,0xffffffffffffda70
ffff80000080f188:	ff ff ff 
ffff80000080f18b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f18f:	48 89 c7             	mov    rdi,rax
ffff80000080f192:	49 89 df             	mov    r15,rbx
ffff80000080f195:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f19a:	48 b9 c3 3c ee ff ff 	movabs rcx,0xffffffffffee3cc3
ffff80000080f1a1:	ff ff ff 
ffff80000080f1a4:	48 01 d9             	add    rcx,rbx
ffff80000080f1a7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
	brelse(bh);
ffff80000080f1a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f1ad:	48 89 c7             	mov    rdi,rax
ffff80000080f1b0:	49 89 df             	mov    r15,rbx
ffff80000080f1b3:	48 b8 d6 02 ef ff ff 	movabs rax,0xffffffffffef02d6
ffff80000080f1ba:	ff ff ff 
ffff80000080f1bd:	48 01 d8             	add    rax,rbx
ffff80000080f1c0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:20
	return buf[fat_entry & 0x7f] & 0x0fffffff;
ffff80000080f1c2:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f1c5:	83 e0 7f             	and    eax,0x7f
ffff80000080f1c8:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f1cf:	00 
ffff80000080f1d0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f1d4:	48 01 d0             	add    rax,rdx
ffff80000080f1d7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f1d9:	25 ff ff ff 0f       	and    eax,0xfffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21
}
ffff80000080f1de:	48 83 c4 20          	add    rsp,0x20
ffff80000080f1e2:	5b                   	pop    rbx
ffff80000080f1e3:	41 5f                	pop    r15
ffff80000080f1e5:	5d                   	pop    rbp
ffff80000080f1e6:	c3                   	ret    

ffff80000080f1e7 <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:25


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
ffff80000080f1e7:	f3 0f 1e fa          	endbr64 
ffff80000080f1eb:	55                   	push   rbp
ffff80000080f1ec:	48 89 e5             	mov    rbp,rsp
ffff80000080f1ef:	41 57                	push   r15
ffff80000080f1f1:	53                   	push   rbx
ffff80000080f1f2:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f1f6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f1f6 <DISK1_FAT32_write_FAT_Entry+0xf>
ffff80000080f1fd:	49 bb 3a e8 10 00 00 	movabs r11,0x10e83a
ffff80000080f204:	00 00 00 
ffff80000080f207:	4c 01 db             	add    rbx,r11
ffff80000080f20a:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080f20e:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080f211:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:29
	unsigned int *buf;
	int i;

	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080f214:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f218:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f21c:	89 c2                	mov    edx,eax
ffff80000080f21e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f221:	c1 e8 07             	shr    eax,0x7
ffff80000080f224:	01 d0                	add    eax,edx
ffff80000080f226:	89 c2                	mov    edx,eax
ffff80000080f228:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080f22f:	ff ff ff 
ffff80000080f232:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f236:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f239:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f23d:	0f b7 c0             	movzx  eax,ax
ffff80000080f240:	89 d6                	mov    esi,edx
ffff80000080f242:	89 c7                	mov    edi,eax
ffff80000080f244:	49 89 df             	mov    r15,rbx
ffff80000080f247:	48 b8 cc fc ee ff ff 	movabs rax,0xffffffffffeefccc
ffff80000080f24e:	ff ff ff 
ffff80000080f251:	48 01 d8             	add    rax,rbx
ffff80000080f254:	ff d0                	call   rax
ffff80000080f256:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30
	buf=bh->data;
ffff80000080f25a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f25e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f261:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:31
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
ffff80000080f265:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f268:	83 e0 7f             	and    eax,0x7f
ffff80000080f26b:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f272:	00 
ffff80000080f273:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f277:	48 01 d0             	add    rax,rdx
ffff80000080f27a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f27c:	25 00 00 00 f0       	and    eax,0xf0000000
ffff80000080f281:	89 c1                	mov    ecx,eax
ffff80000080f283:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff80000080f286:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080f28b:	89 c2                	mov    edx,eax
ffff80000080f28d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f290:	83 e0 7f             	and    eax,0x7f
ffff80000080f293:	48 8d 34 85 00 00 00 	lea    rsi,[rax*4+0x0]
ffff80000080f29a:	00 
ffff80000080f29b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f29f:	48 01 f0             	add    rax,rsi
ffff80000080f2a2:	09 ca                	or     edx,ecx
ffff80000080f2a4:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33

	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080f2a6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080f2ad:	eb 6d                	jmp    ffff80000080f31c <DISK1_FAT32_write_FAT_Entry+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 3)
		off_t off=(fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7))*SECTOR_SIZE;
ffff80000080f2af:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f2b3:	48 8b 48 30          	mov    rcx,QWORD PTR [rax+0x30]
ffff80000080f2b7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f2bb:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
ffff80000080f2bf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f2c2:	48 98                	cdqe   
ffff80000080f2c4:	48 0f af c2          	imul   rax,rdx
ffff80000080f2c8:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080f2cc:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f2cf:	c1 e8 07             	shr    eax,0x7
ffff80000080f2d2:	89 c0                	mov    eax,eax
ffff80000080f2d4:	48 01 d0             	add    rax,rdx
ffff80000080f2d7:	c1 e0 09             	shl    eax,0x9
ffff80000080f2da:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:35 (discriminator 3)
		blkdev_write(root_sb->dev,off,SECTOR_SIZE,buf);
ffff80000080f2dd:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080f2e4:	ff ff ff 
ffff80000080f2e7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f2eb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f2ee:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f2f2:	0f b7 c0             	movzx  eax,ax
ffff80000080f2f5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f2f9:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
ffff80000080f2fc:	48 89 d1             	mov    rcx,rdx
ffff80000080f2ff:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f304:	89 c7                	mov    edi,eax
ffff80000080f306:	49 89 df             	mov    r15,rbx
ffff80000080f309:	48 b8 6d 01 ef ff ff 	movabs rax,0xffffffffffef016d
ffff80000080f310:	ff ff ff 
ffff80000080f313:	48 01 d8             	add    rax,rbx
ffff80000080f316:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080f318:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33 (discriminator 1)
ffff80000080f31c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f31f:	48 63 d0             	movsxd rdx,eax
ffff80000080f322:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f326:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f32a:	48 39 c2             	cmp    rdx,rax
ffff80000080f32d:	72 80                	jb     ffff80000080f2af <DISK1_FAT32_write_FAT_Entry+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:37
    }
	brelse(bh);
ffff80000080f32f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f333:	48 89 c7             	mov    rdi,rax
ffff80000080f336:	49 89 df             	mov    r15,rbx
ffff80000080f339:	48 b8 d6 02 ef ff ff 	movabs rax,0xffffffffffef02d6
ffff80000080f340:	ff ff ff 
ffff80000080f343:	48 01 d8             	add    rax,rbx
ffff80000080f346:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38
	return 1;
ffff80000080f348:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:39
}
ffff80000080f34d:	48 83 c4 30          	add    rsp,0x30
ffff80000080f351:	5b                   	pop    rbx
ffff80000080f352:	41 5f                	pop    r15
ffff80000080f354:	5d                   	pop    rbp
ffff80000080f355:	c3                   	ret    

ffff80000080f356 <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:43


long FAT32_open(struct index_node * inode,struct file * filp)
{
ffff80000080f356:	f3 0f 1e fa          	endbr64 
ffff80000080f35a:	55                   	push   rbp
ffff80000080f35b:	48 89 e5             	mov    rbp,rsp
ffff80000080f35e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f35e <FAT32_open+0x8>
ffff80000080f365:	49 bb d2 e6 10 00 00 	movabs r11,0x10e6d2
ffff80000080f36c:	00 00 00 
ffff80000080f36f:	4c 01 d8             	add    rax,r11
ffff80000080f372:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f376:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:44
	return 1;
ffff80000080f37a:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:45
}
ffff80000080f37f:	5d                   	pop    rbp
ffff80000080f380:	c3                   	ret    

ffff80000080f381 <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:49


long FAT32_close(struct index_node * inode,struct file * filp)
{
ffff80000080f381:	f3 0f 1e fa          	endbr64 
ffff80000080f385:	55                   	push   rbp
ffff80000080f386:	48 89 e5             	mov    rbp,rsp
ffff80000080f389:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f389 <FAT32_close+0x8>
ffff80000080f390:	49 bb a7 e6 10 00 00 	movabs r11,0x10e6a7
ffff80000080f397:	00 00 00 
ffff80000080f39a:	4c 01 d8             	add    rax,r11
ffff80000080f39d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f3a1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:50
	return 1;
ffff80000080f3a5:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:51
}
ffff80000080f3aa:	5d                   	pop    rbp
ffff80000080f3ab:	c3                   	ret    

ffff80000080f3ac <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:55


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080f3ac:	f3 0f 1e fa          	endbr64 
ffff80000080f3b0:	55                   	push   rbp
ffff80000080f3b1:	48 89 e5             	mov    rbp,rsp
ffff80000080f3b4:	41 57                	push   r15
ffff80000080f3b6:	53                   	push   rbx
ffff80000080f3b7:	48 83 ec 70          	sub    rsp,0x70
ffff80000080f3bb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f3bb <FAT32_read+0xf>
ffff80000080f3c2:	49 bb 75 e6 10 00 00 	movabs r11,0x10e675
ffff80000080f3c9:	00 00 00 
ffff80000080f3cc:	4c 01 db             	add    rbx,r11
ffff80000080f3cf:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080f3d3:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff80000080f3d7:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff80000080f3db:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:56
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080f3df:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f3e3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f3e7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f3eb:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f3ef:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:57
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080f3f3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f3f7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f3fb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f3ff:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080f403:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080f407:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:59

	unsigned long cluster = finode->first_cluster;
ffff80000080f40b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f40f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f412:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60
	unsigned long sector = 0;
ffff80000080f416:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080f41d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	int i,length = 0;
ffff80000080f41e:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	long retval = 0;
ffff80000080f425:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080f42c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:63
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080f42d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f431:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f434:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080f438:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080f43c:	48 99                	cqo    
ffff80000080f43e:	48 f7 fe             	idiv   rsi
ffff80000080f441:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:64
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080f444:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f448:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f44b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080f44f:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080f453:	48 99                	cqo    
ffff80000080f455:	48 f7 f9             	idiv   rcx
ffff80000080f458:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65
	char * buffer = (char *) kmallocat(0,(fsbi->bytes_per_cluster+PAGE_4K_SIZE-1)/PAGE_4K_SIZE);
ffff80000080f45c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f460:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f464:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080f46a:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080f471:	48 85 c0             	test   rax,rax
ffff80000080f474:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080f478:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080f47c:	89 c6                	mov    esi,eax
ffff80000080f47e:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080f483:	49 89 df             	mov    r15,rbx
ffff80000080f486:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff80000080f48d:	ff ff ff 
ffff80000080f490:	48 01 d8             	add    rax,rbx
ffff80000080f493:	ff d0                	call   rax
ffff80000080f495:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67

	if(!cluster)
ffff80000080f499:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f49e:	75 0c                	jne    ffff80000080f4ac <FAT32_read+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68
		return -EFAULT;
ffff80000080f4a0:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080f4a7:	e9 6d 02 00 00       	jmp    ffff80000080f719 <FAT32_read+0x36d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69
	for(i = 0;i < index;i++)
ffff80000080f4ac:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080f4b3:	eb 2b                	jmp    ffff80000080f4e0 <FAT32_read+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080f4b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f4b9:	89 c2                	mov    edx,eax
ffff80000080f4bb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f4bf:	89 d6                	mov    esi,edx
ffff80000080f4c1:	48 89 c7             	mov    rdi,rax
ffff80000080f4c4:	49 89 df             	mov    r15,rbx
ffff80000080f4c7:	48 b8 ba 16 ef ff ff 	movabs rax,0xffffffffffef16ba
ffff80000080f4ce:	ff ff ff 
ffff80000080f4d1:	48 01 d8             	add    rax,rbx
ffff80000080f4d4:	ff d0                	call   rax
ffff80000080f4d6:	89 c0                	mov    eax,eax
ffff80000080f4d8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69 (discriminator 3)
	for(i = 0;i < index;i++)
ffff80000080f4dc:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69 (discriminator 1)
ffff80000080f4e0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080f4e3:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080f4e6:	7c cd                	jl     ffff80000080f4b5 <FAT32_read+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:72

	if(*position + count > filp->dentry->dir_inode->file_size)
ffff80000080f4e8:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f4ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f4ef:	48 89 c2             	mov    rdx,rax
ffff80000080f4f2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f4f6:	48 01 c2             	add    rdx,rax
ffff80000080f4f9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f4fd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f501:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f505:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f508:	48 39 c2             	cmp    rdx,rax
ffff80000080f50b:	76 2c                	jbe    ffff80000080f539 <FAT32_read+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73
		index = count = filp->dentry->dir_inode->file_size - *position;
ffff80000080f50d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f511:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f515:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f519:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f51c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f520:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f523:	48 89 c1             	mov    rcx,rax
ffff80000080f526:	48 89 d0             	mov    rax,rdx
ffff80000080f529:	48 29 c8             	sub    rax,rcx
ffff80000080f52c:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080f530:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f534:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000080f537:	eb 07                	jmp    ffff80000080f540 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:75
	else
		index = count;
ffff80000080f539:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f53d:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:81

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080f540:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f544:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f548:	89 c2                	mov    edx,eax
ffff80000080f54a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f54e:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f553:	48 89 c7             	mov    rdi,rax
ffff80000080f556:	49 89 df             	mov    r15,rbx
ffff80000080f559:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff80000080f560:	ff ff ff 
ffff80000080f563:	48 01 d8             	add    rax,rbx
ffff80000080f566:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:82
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080f568:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f56c:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080f570:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f574:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080f578:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f57c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f580:	48 0f af c2          	imul   rax,rdx
ffff80000080f584:	48 01 c8             	add    rax,rcx
ffff80000080f587:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:83
		if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080f58b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f58f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f593:	48 c1 e0 09          	shl    rax,0x9
ffff80000080f597:	48 89 c7             	mov    rdi,rax
ffff80000080f59a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f59e:	c1 e0 09             	shl    eax,0x9
ffff80000080f5a1:	89 c6                	mov    esi,eax
ffff80000080f5a3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f5a7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f5ab:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f5af:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080f5b3:	0f b7 c0             	movzx  eax,ax
ffff80000080f5b6:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080f5ba:	48 89 d1             	mov    rcx,rdx
ffff80000080f5bd:	48 89 fa             	mov    rdx,rdi
ffff80000080f5c0:	89 c7                	mov    edi,eax
ffff80000080f5c2:	49 89 df             	mov    r15,rbx
ffff80000080f5c5:	48 b8 04 00 ef ff ff 	movabs rax,0xffffffffffef0004
ffff80000080f5cc:	ff ff ff 
ffff80000080f5cf:	48 01 d8             	add    rax,rbx
ffff80000080f5d2:	ff d0                	call   rax
ffff80000080f5d4:	85 c0                	test   eax,eax
ffff80000080f5d6:	79 35                	jns    ffff80000080f60d <FAT32_read+0x261>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:85
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
ffff80000080f5d8:	48 b8 a0 da ff ff ff 	movabs rax,0xffffffffffffdaa0
ffff80000080f5df:	ff ff ff 
ffff80000080f5e2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f5e6:	48 89 c7             	mov    rdi,rax
ffff80000080f5e9:	49 89 df             	mov    r15,rbx
ffff80000080f5ec:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f5f1:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080f5f8:	ff ff ff 
ffff80000080f5fb:	48 01 da             	add    rdx,rbx
ffff80000080f5fe:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86
			retval = -EIO;
ffff80000080f600:	48 c7 45 d8 e3 ff ff 	mov    QWORD PTR [rbp-0x28],0xffffffffffffffe3
ffff80000080f607:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:87
			break;
ffff80000080f608:	e9 e1 00 00 00       	jmp    ffff80000080f6ee <FAT32_read+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:90
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080f60d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f610:	48 63 d0             	movsxd rdx,eax
ffff80000080f613:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f617:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f61b:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff80000080f61f:	48 39 c2             	cmp    rdx,rax
ffff80000080f622:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080f626:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:92

		if((unsigned long)buf < MAX_TASKS)
ffff80000080f629:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f62d:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080f631:	77 2c                	ja     ffff80000080f65f <FAT32_read+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:93
			memcpy(buffer + offset,buf,length);
ffff80000080f633:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080f636:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080f63a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f63e:	48 01 c1             	add    rcx,rax
ffff80000080f641:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f645:	48 89 c6             	mov    rsi,rax
ffff80000080f648:	48 89 cf             	mov    rdi,rcx
ffff80000080f64b:	49 89 df             	mov    r15,rbx
ffff80000080f64e:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff80000080f655:	ff ff ff 
ffff80000080f658:	48 01 d8             	add    rax,rbx
ffff80000080f65b:	ff d0                	call   rax
ffff80000080f65d:	eb 2a                	jmp    ffff80000080f689 <FAT32_read+0x2dd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:95
		else
			memcpy(buffer + offset,buf,length);
ffff80000080f65f:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080f662:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080f666:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f66a:	48 01 c1             	add    rcx,rax
ffff80000080f66d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f671:	48 89 c6             	mov    rsi,rax
ffff80000080f674:	48 89 cf             	mov    rdi,rcx
ffff80000080f677:	49 89 df             	mov    r15,rbx
ffff80000080f67a:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff80000080f681:	ff ff ff 
ffff80000080f684:	48 01 d8             	add    rax,rbx
ffff80000080f687:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:97

		index -= length;
ffff80000080f689:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f68c:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98
		buf += length;
ffff80000080f68f:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f692:	48 98                	cdqe   
ffff80000080f694:	48 01 45 90          	add    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:99
		offset -= offset;
ffff80000080f698:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080f69f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
		*position += length;
ffff80000080f6a0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f6a4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f6a7:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f6aa:	48 98                	cdqe   
ffff80000080f6ac:	48 01 c2             	add    rdx,rax
ffff80000080f6af:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f6b3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:101
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
ffff80000080f6b6:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080f6ba:	74 32                	je     ffff80000080f6ee <FAT32_read+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:101 (discriminator 1)
ffff80000080f6bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f6c0:	89 c2                	mov    edx,eax
ffff80000080f6c2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f6c6:	89 d6                	mov    esi,edx
ffff80000080f6c8:	48 89 c7             	mov    rdi,rax
ffff80000080f6cb:	49 89 df             	mov    r15,rbx
ffff80000080f6ce:	48 b8 ba 16 ef ff ff 	movabs rax,0xffffffffffef16ba
ffff80000080f6d5:	ff ff ff 
ffff80000080f6d8:	48 01 d8             	add    rax,rbx
ffff80000080f6db:	ff d0                	call   rax
ffff80000080f6dd:	89 c0                	mov    eax,eax
ffff80000080f6df:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080f6e3:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f6e8:	0f 85 52 fe ff ff    	jne    ffff80000080f540 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:103

    kmfree(buffer);
ffff80000080f6ee:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f6f2:	48 89 c7             	mov    rdi,rax
ffff80000080f6f5:	49 89 df             	mov    r15,rbx
ffff80000080f6f8:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080f6ff:	ff ff ff 
ffff80000080f702:	48 01 d8             	add    rax,rbx
ffff80000080f705:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104
	if(!index)
ffff80000080f707:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080f70b:	75 08                	jne    ffff80000080f715 <FAT32_read+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
		retval = count;
ffff80000080f70d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f711:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
	return retval;
ffff80000080f715:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:107
}
ffff80000080f719:	48 83 c4 70          	add    rsp,0x70
ffff80000080f71d:	5b                   	pop    rbx
ffff80000080f71e:	41 5f                	pop    r15
ffff80000080f720:	5d                   	pop    rbp
ffff80000080f721:	c3                   	ret    

ffff80000080f722 <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:111


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
ffff80000080f722:	f3 0f 1e fa          	endbr64 
ffff80000080f726:	55                   	push   rbp
ffff80000080f727:	48 89 e5             	mov    rbp,rsp
ffff80000080f72a:	41 57                	push   r15
ffff80000080f72c:	53                   	push   rbx
ffff80000080f72d:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff80000080f734:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f734 <FAT32_find_available_cluster+0x12>
ffff80000080f73b:	49 bb fc e2 10 00 00 	movabs r11,0x10e2fc
ffff80000080f742:	00 00 00 
ffff80000080f745:	4c 01 db             	add    rbx,r11
ffff80000080f748:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:114
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
ffff80000080f74f:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f756:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f75a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:119
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
ffff80000080f75e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080f765:	e9 b6 00 00 00       	jmp    ffff80000080f820 <FAT32_find_available_cluster+0xfe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:121
	{
		memset(buf,0,512);
ffff80000080f76a:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000080f771:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f776:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f77b:	48 89 c7             	mov    rdi,rax
ffff80000080f77e:	49 89 df             	mov    r15,rbx
ffff80000080f781:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff80000080f788:	ff ff ff 
ffff80000080f78b:	48 01 d8             	add    rax,rbx
ffff80000080f78e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:122
		blkdev_read(root_sb->dev,(fsbi->FAT1_firstsector + i)*SECTOR_SIZE,SECTOR_SIZE,buf);
ffff80000080f790:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f797:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffff80000080f79b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f79e:	48 98                	cdqe   
ffff80000080f7a0:	48 01 d0             	add    rax,rdx
ffff80000080f7a3:	c1 e0 09             	shl    eax,0x9
ffff80000080f7a6:	89 c6                	mov    esi,eax
ffff80000080f7a8:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080f7af:	ff ff ff 
ffff80000080f7b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f7b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f7b9:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f7bd:	0f b7 c0             	movzx  eax,ax
ffff80000080f7c0:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff80000080f7c7:	48 89 d1             	mov    rcx,rdx
ffff80000080f7ca:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f7cf:	89 c7                	mov    edi,eax
ffff80000080f7d1:	49 89 df             	mov    r15,rbx
ffff80000080f7d4:	48 b8 04 00 ef ff ff 	movabs rax,0xffffffffffef0004
ffff80000080f7db:	ff ff ff 
ffff80000080f7de:	48 01 d8             	add    rax,rbx
ffff80000080f7e1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124

		for(j = 0;j < 128;j++)
ffff80000080f7e3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080f7ea:	eb 2a                	jmp    ffff80000080f816 <FAT32_find_available_cluster+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:126
		{
			if((buf[j] & 0x0fffffff) == 0)
ffff80000080f7ec:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080f7ef:	48 98                	cdqe   
ffff80000080f7f1:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff80000080f7f8:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080f7fd:	85 c0                	test   eax,eax
ffff80000080f7ff:	75 11                	jne    ffff80000080f812 <FAT32_find_available_cluster+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:127
				return (i << 7) + j;
ffff80000080f801:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f804:	c1 e0 07             	shl    eax,0x7
ffff80000080f807:	89 c2                	mov    edx,eax
ffff80000080f809:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080f80c:	01 d0                	add    eax,edx
ffff80000080f80e:	48 98                	cdqe   
ffff80000080f810:	eb 22                	jmp    ffff80000080f834 <FAT32_find_available_cluster+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124 (discriminator 2)
		for(j = 0;j < 128;j++)
ffff80000080f812:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124 (discriminator 1)
ffff80000080f816:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
ffff80000080f81a:	7e d0                	jle    ffff80000080f7ec <FAT32_find_available_cluster+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:119 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
ffff80000080f81c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:119 (discriminator 1)
ffff80000080f820:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f823:	48 98                	cdqe   
ffff80000080f825:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080f829:	0f 87 3b ff ff ff    	ja     ffff80000080f76a <FAT32_find_available_cluster+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:130
		}
	}
	return 0;
ffff80000080f82f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:131 (discriminator 1)
}
ffff80000080f834:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff80000080f83b:	5b                   	pop    rbx
ffff80000080f83c:	41 5f                	pop    r15
ffff80000080f83e:	5d                   	pop    rbp
ffff80000080f83f:	c3                   	ret    

ffff80000080f840 <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:135


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080f840:	f3 0f 1e fa          	endbr64 
ffff80000080f844:	55                   	push   rbp
ffff80000080f845:	48 89 e5             	mov    rbp,rsp
ffff80000080f848:	41 57                	push   r15
ffff80000080f84a:	53                   	push   rbx
ffff80000080f84b:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff80000080f84f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f84f <FAT32_write+0xf>
ffff80000080f856:	49 bb e1 e1 10 00 00 	movabs r11,0x10e1e1
ffff80000080f85d:	00 00 00 
ffff80000080f860:	4c 01 db             	add    rbx,r11
ffff80000080f863:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080f867:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000080f86b:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffff80000080f872:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080f879:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f87d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f881:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f885:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f889:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:137
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080f88d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f891:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f895:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f899:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080f89d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080f8a1:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:139

	unsigned long cluster = finode->first_cluster;
ffff80000080f8a5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f8a9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f8ac:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140
	unsigned long next_cluster = 0;
ffff80000080f8b0:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080f8b7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	unsigned long sector = 0;
ffff80000080f8b8:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080f8bf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	int i,length = 0;
ffff80000080f8c0:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:143
	long retval = 0;
ffff80000080f8c7:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080f8ce:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144
	long flags = 0;
ffff80000080f8cf:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080f8d6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080f8d7:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080f8de:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f8e1:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080f8e5:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080f8e9:	48 99                	cqo    
ffff80000080f8eb:	48 f7 fe             	idiv   rsi
ffff80000080f8ee:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080f8f1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080f8f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f8fb:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080f8ff:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080f903:	48 99                	cqo    
ffff80000080f905:	48 f7 f9             	idiv   rcx
ffff80000080f908:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:147
	char * buffer = (char *) kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff80000080f90c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080f910:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f914:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080f91a:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080f921:	48 85 c0             	test   rax,rax
ffff80000080f924:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080f928:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080f92c:	89 c6                	mov    esi,eax
ffff80000080f92e:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080f933:	49 89 df             	mov    r15,rbx
ffff80000080f936:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff80000080f93d:	ff ff ff 
ffff80000080f940:	48 01 d8             	add    rax,rbx
ffff80000080f943:	ff d0                	call   rax
ffff80000080f945:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:149

	if(!cluster)
ffff80000080f949:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f94e:	75 27                	jne    ffff80000080f977 <FAT32_write+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:151
	{
		cluster = FAT32_find_available_cluster(fsbi);
ffff80000080f950:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080f954:	48 89 c7             	mov    rdi,rax
ffff80000080f957:	49 89 df             	mov    r15,rbx
ffff80000080f95a:	48 b8 f2 1c ef ff ff 	movabs rax,0xffffffffffef1cf2
ffff80000080f961:	ff ff ff 
ffff80000080f964:	48 01 d8             	add    rax,rbx
ffff80000080f967:	ff d0                	call   rax
ffff80000080f969:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:152
		flags = 1;
ffff80000080f96d:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000080f974:	00 
ffff80000080f975:	eb 3c                	jmp    ffff80000080f9b3 <FAT32_write+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155
	}
	else
		for(i = 0;i < index;i++)
ffff80000080f977:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080f97e:	eb 2b                	jmp    ffff80000080f9ab <FAT32_write+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080f980:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f984:	89 c2                	mov    edx,eax
ffff80000080f986:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080f98a:	89 d6                	mov    esi,edx
ffff80000080f98c:	48 89 c7             	mov    rdi,rax
ffff80000080f98f:	49 89 df             	mov    r15,rbx
ffff80000080f992:	48 b8 ba 16 ef ff ff 	movabs rax,0xffffffffffef16ba
ffff80000080f999:	ff ff ff 
ffff80000080f99c:	48 01 d8             	add    rax,rbx
ffff80000080f99f:	ff d0                	call   rax
ffff80000080f9a1:	89 c0                	mov    eax,eax
ffff80000080f9a3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155 (discriminator 3)
		for(i = 0;i < index;i++)
ffff80000080f9a7:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155 (discriminator 1)
ffff80000080f9ab:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f9ae:	3b 45 c4             	cmp    eax,DWORD PTR [rbp-0x3c]
ffff80000080f9b1:	7c cd                	jl     ffff80000080f980 <FAT32_write+0x140>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:158

	if(!cluster)
ffff80000080f9b3:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f9b8:	75 25                	jne    ffff80000080f9df <FAT32_write+0x19f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160
	{
        kmfree(buffer);
ffff80000080f9ba:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f9be:	48 89 c7             	mov    rdi,rax
ffff80000080f9c1:	49 89 df             	mov    r15,rbx
ffff80000080f9c4:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080f9cb:	ff ff ff 
ffff80000080f9ce:	48 01 d8             	add    rax,rbx
ffff80000080f9d1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:161
		return -ENOSPC;
ffff80000080f9d3:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000080f9da:	e9 f7 03 00 00       	jmp    ffff80000080fdd6 <FAT32_write+0x596>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:164
	}

	if(flags)
ffff80000080f9df:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080f9e4:	74 5a                	je     ffff80000080fa40 <FAT32_write+0x200>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:166
	{
		finode->first_cluster = cluster;
ffff80000080f9e6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f9ea:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f9ee:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:167
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000080f9f1:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f9f5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f9f9:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f9fd:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080fa01:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080fa05:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080fa09:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fa0d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fa11:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fa15:	48 89 c7             	mov    rdi,rax
ffff80000080fa18:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:168
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
ffff80000080fa1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fa1e:	89 c1                	mov    ecx,eax
ffff80000080fa20:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fa24:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000080fa29:	89 ce                	mov    esi,ecx
ffff80000080fa2b:	48 89 c7             	mov    rdi,rax
ffff80000080fa2e:	49 89 df             	mov    r15,rbx
ffff80000080fa31:	48 b8 b7 17 ef ff ff 	movabs rax,0xffffffffffef17b7
ffff80000080fa38:	ff ff ff 
ffff80000080fa3b:	48 01 d8             	add    rax,rbx
ffff80000080fa3e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:171
	}

	index = count;
ffff80000080fa40:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fa47:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:175

	do
	{
		if(!flags)
ffff80000080fa4a:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080fa4f:	0f 85 cd 00 00 00    	jne    ffff80000080fb22 <FAT32_write+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:177
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080fa55:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fa59:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fa5d:	89 c2                	mov    edx,eax
ffff80000080fa5f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fa63:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fa68:	48 89 c7             	mov    rdi,rax
ffff80000080fa6b:	49 89 df             	mov    r15,rbx
ffff80000080fa6e:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff80000080fa75:	ff ff ff 
ffff80000080fa78:	48 01 d8             	add    rax,rbx
ffff80000080fa7b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:178
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080fa7d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fa81:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080fa85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fa89:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080fa8d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fa91:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fa95:	48 0f af c2          	imul   rax,rdx
ffff80000080fa99:	48 01 c8             	add    rax,rcx
ffff80000080fa9c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:180
			
			if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080faa0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080faa4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080faa8:	48 c1 e0 09          	shl    rax,0x9
ffff80000080faac:	48 89 c7             	mov    rdi,rax
ffff80000080faaf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fab3:	c1 e0 09             	shl    eax,0x9
ffff80000080fab6:	89 c6                	mov    esi,eax
ffff80000080fab8:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fabc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fac0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fac4:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080fac8:	0f b7 c0             	movzx  eax,ax
ffff80000080facb:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080facf:	48 89 d1             	mov    rcx,rdx
ffff80000080fad2:	48 89 fa             	mov    rdx,rdi
ffff80000080fad5:	89 c7                	mov    edi,eax
ffff80000080fad7:	49 89 df             	mov    r15,rbx
ffff80000080fada:	48 b8 04 00 ef ff ff 	movabs rax,0xffffffffffef0004
ffff80000080fae1:	ff ff ff 
ffff80000080fae4:	48 01 d8             	add    rax,rbx
ffff80000080fae7:	ff d0                	call   rax
ffff80000080fae9:	85 c0                	test   eax,eax
ffff80000080faeb:	79 35                	jns    ffff80000080fb22 <FAT32_write+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:182
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
ffff80000080faed:	48 b8 d0 da ff ff ff 	movabs rax,0xffffffffffffdad0
ffff80000080faf4:	ff ff ff 
ffff80000080faf7:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fafb:	48 89 c7             	mov    rdi,rax
ffff80000080fafe:	49 89 df             	mov    r15,rbx
ffff80000080fb01:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fb06:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080fb0d:	ff ff ff 
ffff80000080fb10:	48 01 da             	add    rdx,rbx
ffff80000080fb13:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
				retval = -EIO;
ffff80000080fb15:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000080fb1c:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:184
				break;
ffff80000080fb1d:	e9 23 02 00 00       	jmp    ffff80000080fd45 <FAT32_write+0x505>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:188
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080fb22:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080fb25:	48 63 d0             	movsxd rdx,eax
ffff80000080fb28:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fb2c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fb30:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffff80000080fb34:	48 39 c2             	cmp    rdx,rax
ffff80000080fb37:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080fb3b:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:190

		if((unsigned long)buf < MAX_TASKS)
ffff80000080fb3e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fb42:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080fb46:	77 2c                	ja     ffff80000080fb74 <FAT32_write+0x334>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:191
			memcpy(buf,buffer + offset,length);
ffff80000080fb48:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000080fb4b:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080fb4f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fb53:	48 01 c1             	add    rcx,rax
ffff80000080fb56:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fb5a:	48 89 ce             	mov    rsi,rcx
ffff80000080fb5d:	48 89 c7             	mov    rdi,rax
ffff80000080fb60:	49 89 df             	mov    r15,rbx
ffff80000080fb63:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff80000080fb6a:	ff ff ff 
ffff80000080fb6d:	48 01 d8             	add    rax,rbx
ffff80000080fb70:	ff d0                	call   rax
ffff80000080fb72:	eb 2a                	jmp    ffff80000080fb9e <FAT32_write+0x35e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:193
		else
			memcpy(buf,buffer + offset,length);
ffff80000080fb74:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000080fb77:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080fb7b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fb7f:	48 01 c1             	add    rcx,rax
ffff80000080fb82:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fb86:	48 89 ce             	mov    rsi,rcx
ffff80000080fb89:	48 89 c7             	mov    rdi,rax
ffff80000080fb8c:	49 89 df             	mov    r15,rbx
ffff80000080fb8f:	48 b8 7d 50 ef ff ff 	movabs rax,0xffffffffffef507d
ffff80000080fb96:	ff ff ff 
ffff80000080fb99:	48 01 d8             	add    rax,rbx
ffff80000080fb9c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:194
        if(blkdev_write(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080fb9e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fba2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fba6:	48 c1 e0 09          	shl    rax,0x9
ffff80000080fbaa:	48 89 c7             	mov    rdi,rax
ffff80000080fbad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fbb1:	c1 e0 09             	shl    eax,0x9
ffff80000080fbb4:	89 c6                	mov    esi,eax
ffff80000080fbb6:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fbba:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fbbe:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fbc2:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080fbc6:	0f b7 c0             	movzx  eax,ax
ffff80000080fbc9:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080fbcd:	48 89 d1             	mov    rcx,rdx
ffff80000080fbd0:	48 89 fa             	mov    rdx,rdi
ffff80000080fbd3:	89 c7                	mov    edi,eax
ffff80000080fbd5:	49 89 df             	mov    r15,rbx
ffff80000080fbd8:	48 b8 6d 01 ef ff ff 	movabs rax,0xffffffffffef016d
ffff80000080fbdf:	ff ff ff 
ffff80000080fbe2:	48 01 d8             	add    rax,rbx
ffff80000080fbe5:	ff d0                	call   rax
ffff80000080fbe7:	85 c0                	test   eax,eax
ffff80000080fbe9:	79 35                	jns    ffff80000080fc20 <FAT32_write+0x3e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:196
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
ffff80000080fbeb:	48 b8 00 db ff ff ff 	movabs rax,0xffffffffffffdb00
ffff80000080fbf2:	ff ff ff 
ffff80000080fbf5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fbf9:	48 89 c7             	mov    rdi,rax
ffff80000080fbfc:	49 89 df             	mov    r15,rbx
ffff80000080fbff:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fc04:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080fc0b:	ff ff ff 
ffff80000080fc0e:	48 01 da             	add    rdx,rbx
ffff80000080fc11:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:197
			retval = -EIO;
ffff80000080fc13:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000080fc1a:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
			break;
ffff80000080fc1b:	e9 25 01 00 00       	jmp    ffff80000080fd45 <FAT32_write+0x505>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:201
		}

		index -= length;
ffff80000080fc20:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fc23:	29 45 c4             	sub    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:202
		buf += length;
ffff80000080fc26:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fc29:	48 98                	cdqe   
ffff80000080fc2b:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
		offset -= offset;
ffff80000080fc2f:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080fc36:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:204
		*position += length;
ffff80000080fc37:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fc3e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fc41:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fc44:	48 98                	cdqe   
ffff80000080fc46:	48 01 c2             	add    rdx,rax
ffff80000080fc49:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fc50:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:206

		if(index)
ffff80000080fc53:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fc57:	0f 84 e7 00 00 00    	je     ffff80000080fd44 <FAT32_write+0x504>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:207
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080fc5d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fc61:	89 c2                	mov    edx,eax
ffff80000080fc63:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fc67:	89 d6                	mov    esi,edx
ffff80000080fc69:	48 89 c7             	mov    rdi,rax
ffff80000080fc6c:	49 89 df             	mov    r15,rbx
ffff80000080fc6f:	48 b8 ba 16 ef ff ff 	movabs rax,0xffffffffffef16ba
ffff80000080fc76:	ff ff ff 
ffff80000080fc79:	48 01 d8             	add    rax,rbx
ffff80000080fc7c:	ff d0                	call   rax
ffff80000080fc7e:	89 c0                	mov    eax,eax
ffff80000080fc80:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:211
		else
			break;

		if(next_cluster >= 0x0ffffff8)
ffff80000080fc84:	48 81 7d a0 f7 ff ff 	cmp    QWORD PTR [rbp-0x60],0xffffff7
ffff80000080fc8b:	0f 
ffff80000080fc8c:	0f 86 a6 00 00 00    	jbe    ffff80000080fd38 <FAT32_write+0x4f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:213
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
ffff80000080fc92:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fc96:	48 89 c7             	mov    rdi,rax
ffff80000080fc99:	49 89 df             	mov    r15,rbx
ffff80000080fc9c:	48 b8 f2 1c ef ff ff 	movabs rax,0xffffffffffef1cf2
ffff80000080fca3:	ff ff ff 
ffff80000080fca6:	48 01 d8             	add    rax,rbx
ffff80000080fca9:	ff d0                	call   rax
ffff80000080fcab:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:214
			if(!next_cluster)
ffff80000080fcaf:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff80000080fcb4:	75 25                	jne    ffff80000080fcdb <FAT32_write+0x49b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:216
			{
                kmfree(buffer);
ffff80000080fcb6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fcba:	48 89 c7             	mov    rdi,rax
ffff80000080fcbd:	49 89 df             	mov    r15,rbx
ffff80000080fcc0:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080fcc7:	ff ff ff 
ffff80000080fcca:	48 01 d8             	add    rax,rbx
ffff80000080fccd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:217
				return -ENOSPC;
ffff80000080fccf:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000080fcd6:	e9 fb 00 00 00       	jmp    ffff80000080fdd6 <FAT32_write+0x596>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:220
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
ffff80000080fcdb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fcdf:	89 c2                	mov    edx,eax
ffff80000080fce1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fce5:	89 c1                	mov    ecx,eax
ffff80000080fce7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fceb:	89 ce                	mov    esi,ecx
ffff80000080fced:	48 89 c7             	mov    rdi,rax
ffff80000080fcf0:	49 89 df             	mov    r15,rbx
ffff80000080fcf3:	48 b8 b7 17 ef ff ff 	movabs rax,0xffffffffffef17b7
ffff80000080fcfa:	ff ff ff 
ffff80000080fcfd:	48 01 d8             	add    rax,rbx
ffff80000080fd00:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:221
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
ffff80000080fd02:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fd06:	89 c1                	mov    ecx,eax
ffff80000080fd08:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fd0c:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000080fd11:	89 ce                	mov    esi,ecx
ffff80000080fd13:	48 89 c7             	mov    rdi,rax
ffff80000080fd16:	49 89 df             	mov    r15,rbx
ffff80000080fd19:	48 b8 b7 17 ef ff ff 	movabs rax,0xffffffffffef17b7
ffff80000080fd20:	ff ff ff 
ffff80000080fd23:	48 01 d8             	add    rax,rbx
ffff80000080fd26:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
			cluster = next_cluster;
ffff80000080fd28:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fd2c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:223
			flags = 1;
ffff80000080fd30:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000080fd37:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:226
		}

	}while(index);
ffff80000080fd38:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fd3c:	0f 85 08 fd ff ff    	jne    ffff80000080fa4a <FAT32_write+0x20a>
ffff80000080fd42:	eb 01                	jmp    ffff80000080fd45 <FAT32_write+0x505>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:209
			break;
ffff80000080fd44:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:228

	if(*position > filp->dentry->dir_inode->file_size)
ffff80000080fd45:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fd4c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fd4f:	48 89 c2             	mov    rdx,rax
ffff80000080fd52:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fd56:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fd5a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fd5e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fd61:	48 39 c2             	cmp    rdx,rax
ffff80000080fd64:	76 42                	jbe    ffff80000080fda8 <FAT32_write+0x568>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:230
	{
		filp->dentry->dir_inode->file_size = *position;
ffff80000080fd66:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fd6d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fd70:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fd74:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fd78:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fd7c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:231
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000080fd7f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fd83:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fd87:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fd8b:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080fd8f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080fd93:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080fd97:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fd9b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fd9f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fda3:	48 89 c7             	mov    rdi,rax
ffff80000080fda6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:234
	}

    kmfree(buffer);
ffff80000080fda8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fdac:	48 89 c7             	mov    rdi,rax
ffff80000080fdaf:	49 89 df             	mov    r15,rbx
ffff80000080fdb2:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000080fdb9:	ff ff ff 
ffff80000080fdbc:	48 01 d8             	add    rax,rbx
ffff80000080fdbf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:235
	if(!index)
ffff80000080fdc1:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fdc5:	75 0b                	jne    ffff80000080fdd2 <FAT32_write+0x592>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
		retval = count;
ffff80000080fdc7:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fdce:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:237
	return retval;
ffff80000080fdd2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:238
}
ffff80000080fdd6:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000080fdda:	5b                   	pop    rbx
ffff80000080fddb:	41 5f                	pop    r15
ffff80000080fddd:	5d                   	pop    rbp
ffff80000080fdde:	c3                   	ret    

ffff80000080fddf <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:242


long FAT32_lseek(struct file * filp,long offset,long origin)
{
ffff80000080fddf:	f3 0f 1e fa          	endbr64 
ffff80000080fde3:	55                   	push   rbp
ffff80000080fde4:	48 89 e5             	mov    rbp,rsp
ffff80000080fde7:	41 57                	push   r15
ffff80000080fde9:	48 83 ec 38          	sub    rsp,0x38
ffff80000080fded:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080fded <FAT32_lseek+0xe>
ffff80000080fdf4:	49 bb 43 dc 10 00 00 	movabs r11,0x10dc43
ffff80000080fdfb:	00 00 00 
ffff80000080fdfe:	4c 01 d9             	add    rcx,r11
ffff80000080fe01:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080fe05:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080fe09:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:243
	struct index_node *inode = filp->dentry->dir_inode;
ffff80000080fe0d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fe11:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe15:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fe19:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:244
	long pos = 0;
ffff80000080fe1d:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080fe24:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:246

	switch(origin)
ffff80000080fe25:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000080fe2a:	74 21                	je     ffff80000080fe4d <FAT32_lseek+0x6e>
ffff80000080fe2c:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000080fe31:	7f 4a                	jg     ffff80000080fe7d <FAT32_lseek+0x9e>
ffff80000080fe33:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080fe38:	74 09                	je     ffff80000080fe43 <FAT32_lseek+0x64>
ffff80000080fe3a:	48 83 7d c8 01       	cmp    QWORD PTR [rbp-0x38],0x1
ffff80000080fe3f:	74 20                	je     ffff80000080fe61 <FAT32_lseek+0x82>
ffff80000080fe41:	eb 3a                	jmp    ffff80000080fe7d <FAT32_lseek+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:249
	{
		case SEEK_SET:
				pos = offset;
ffff80000080fe43:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080fe47:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:250
			break;
ffff80000080fe4b:	eb 39                	jmp    ffff80000080fe86 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:253

		case SEEK_CUR:
				pos =  filp->position + offset;
ffff80000080fe4d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fe51:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fe54:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080fe58:	48 01 d0             	add    rax,rdx
ffff80000080fe5b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:254
			break;
ffff80000080fe5f:	eb 25                	jmp    ffff80000080fe86 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:257

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
ffff80000080fe61:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fe65:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe69:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fe6d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fe70:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080fe74:	48 01 d0             	add    rax,rdx
ffff80000080fe77:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:258
			break;
ffff80000080fe7b:	eb 09                	jmp    ffff80000080fe86 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:261

		default:
			return -EINVAL;
ffff80000080fe7d:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080fe84:	eb 69                	jmp    ffff80000080feef <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:265
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
ffff80000080fe86:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fe8b:	78 18                	js     ffff80000080fea5 <FAT32_lseek+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:265 (discriminator 1)
ffff80000080fe8d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fe91:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe95:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fe99:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fe9c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fea0:	48 39 c2             	cmp    rdx,rax
ffff80000080fea3:	73 09                	jae    ffff80000080feae <FAT32_lseek+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:266
		return -EOVERFLOW;
ffff80000080fea5:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
ffff80000080feac:	eb 41                	jmp    ffff80000080feef <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:268

	filp->position = pos;
ffff80000080feae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080feb2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080feb6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:269
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
ffff80000080feb9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080febd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fec0:	48 89 c6             	mov    rsi,rax
ffff80000080fec3:	48 b8 30 db ff ff ff 	movabs rax,0xffffffffffffdb30
ffff80000080feca:	ff ff ff 
ffff80000080fecd:	48 8d 04 01          	lea    rax,[rcx+rax*1]
ffff80000080fed1:	48 89 c7             	mov    rdi,rax
ffff80000080fed4:	49 89 cf             	mov    r15,rcx
ffff80000080fed7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fedc:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff80000080fee3:	ff ff ff 
ffff80000080fee6:	48 01 ca             	add    rdx,rcx
ffff80000080fee9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:271

	return pos;
ffff80000080feeb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:272
}
ffff80000080feef:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080fef3:	c9                   	leave  
ffff80000080fef4:	c3                   	ret    

ffff80000080fef5 <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:276


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
ffff80000080fef5:	f3 0f 1e fa          	endbr64 
ffff80000080fef9:	55                   	push   rbp
ffff80000080fefa:	48 89 e5             	mov    rbp,rsp
ffff80000080fefd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080fefd <FAT32_ioctl+0x8>
ffff80000080ff04:	49 bb 33 db 10 00 00 	movabs r11,0x10db33
ffff80000080ff0b:	00 00 00 
ffff80000080ff0e:	4c 01 d8             	add    rax,r11
ffff80000080ff11:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ff15:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080ff19:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080ff1d:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080ff21:	90                   	nop
ffff80000080ff22:	5d                   	pop    rbp
ffff80000080ff23:	c3                   	ret    

ffff80000080ff24 <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:279

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
ffff80000080ff24:	f3 0f 1e fa          	endbr64 
ffff80000080ff28:	55                   	push   rbp
ffff80000080ff29:	48 89 e5             	mov    rbp,rsp
ffff80000080ff2c:	41 57                	push   r15
ffff80000080ff2e:	53                   	push   rbx
ffff80000080ff2f:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff80000080ff33:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ff33 <FAT32_readdir+0xf>
ffff80000080ff3a:	49 bb fd da 10 00 00 	movabs r11,0x10dafd
ffff80000080ff41:	00 00 00 
ffff80000080ff44:	4c 01 db             	add    rbx,r11
ffff80000080ff47:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080ff4b:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000080ff4f:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:280
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080ff56:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ff5a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff5e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ff62:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080ff66:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080ff6a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ff6e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff72:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ff76:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080ff7a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080ff7e:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:283

	unsigned int cluster = 0;
ffff80000080ff82:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:284
	unsigned long sector = 0;
ffff80000080ff89:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080ff90:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285
	unsigned char * buf =NULL; 
ffff80000080ff91:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff80000080ff98:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	char *name = NULL;
ffff80000080ff99:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080ffa0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:287
	int namelen = 0;
ffff80000080ffa1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288
	int i = 0,j = 0,x = 0,y = 0;
ffff80000080ffa8:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080ffaf:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff80000080ffb6:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000080ffbd:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	struct FAT32_Directory * tmpdentry = NULL;
ffff80000080ffc4:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080ffcb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff80000080ffcc:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080ffd3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:292

	buf = kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff80000080ffd4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ffd8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ffdc:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ffe2:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080ffe9:	48 85 c0             	test   rax,rax
ffff80000080ffec:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080fff0:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080fff4:	89 c6                	mov    esi,eax
ffff80000080fff6:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080fffb:	49 89 df             	mov    r15,rbx
ffff80000080fffe:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff800000810005:	ff ff ff 
ffff800000810008:	48 01 d8             	add    rax,rbx
ffff80000081000b:	ff d0                	call   rax
ffff80000081000d:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:294

	cluster = finode->first_cluster;
ffff800000810011:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810015:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810018:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:296

	j = filp->position/fsbi->bytes_per_cluster;
ffff80000081001b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081001f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810022:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810026:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000081002a:	48 99                	cqo    
ffff80000081002c:	48 f7 fe             	idiv   rsi
ffff80000081002f:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298
	
	for(i = 0;i<j;i++)
ffff800000810032:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000810039:	eb 60                	jmp    ffff80000081009b <FAT32_readdir+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000081003b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081003e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810042:	89 d6                	mov    esi,edx
ffff800000810044:	48 89 c7             	mov    rdi,rax
ffff800000810047:	49 89 df             	mov    r15,rbx
ffff80000081004a:	48 b8 ba 16 ef ff ff 	movabs rax,0xffffffffffef16ba
ffff800000810051:	ff ff ff 
ffff800000810054:	48 01 d8             	add    rax,rbx
ffff800000810057:	ff d0                	call   rax
ffff800000810059:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:301
		if(cluster > 0x0ffffff7)
ffff80000081005c:	81 7d ec f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff7
ffff800000810063:	76 32                	jbe    ffff800000810097 <FAT32_readdir+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
ffff800000810065:	48 b8 58 db ff ff ff 	movabs rax,0xffffffffffffdb58
ffff80000081006c:	ff ff ff 
ffff80000081006f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810073:	48 89 c7             	mov    rdi,rax
ffff800000810076:	49 89 df             	mov    r15,rbx
ffff800000810079:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081007e:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff800000810085:	ff ff ff 
ffff800000810088:	48 01 da             	add    rdx,rbx
ffff80000081008b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:304
			return NULL;
ffff80000081008d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810092:	e9 1c 06 00 00       	jmp    ffff8000008106b3 <FAT32_readdir+0x78f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298 (discriminator 2)
	for(i = 0;i<j;i++)
ffff800000810097:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298 (discriminator 1)
ffff80000081009b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000081009e:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008100a1:	7c 98                	jl     ffff80000081003b <FAT32_readdir+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:308
		}
	}

next_cluster:
ffff8000008100a3:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:309
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff8000008100a4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008100a8:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008100ac:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008100af:	83 e8 02             	sub    eax,0x2
ffff8000008100b2:	89 c1                	mov    ecx,eax
ffff8000008100b4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008100b8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008100bc:	48 0f af c1          	imul   rax,rcx
ffff8000008100c0:	48 01 d0             	add    rax,rdx
ffff8000008100c3:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:310
    if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff8000008100c7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008100cb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008100cf:	48 c1 e0 09          	shl    rax,0x9
ffff8000008100d3:	48 89 c7             	mov    rdi,rax
ffff8000008100d6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008100da:	c1 e0 09             	shl    eax,0x9
ffff8000008100dd:	89 c6                	mov    esi,eax
ffff8000008100df:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008100e3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008100e7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008100eb:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008100ef:	0f b7 c0             	movzx  eax,ax
ffff8000008100f2:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff8000008100f6:	48 89 d1             	mov    rcx,rdx
ffff8000008100f9:	48 89 fa             	mov    rdx,rdi
ffff8000008100fc:	89 c7                	mov    edi,eax
ffff8000008100fe:	49 89 df             	mov    r15,rbx
ffff800000810101:	48 b8 04 00 ef ff ff 	movabs rax,0xffffffffffef0004
ffff800000810108:	ff ff ff 
ffff80000081010b:	48 01 d8             	add    rax,rbx
ffff80000081010e:	ff d0                	call   rax
ffff800000810110:	85 c0                	test   eax,eax
ffff800000810112:	79 4b                	jns    ffff80000081015f <FAT32_readdir+0x23b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:312
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
ffff800000810114:	48 b8 80 db ff ff ff 	movabs rax,0xffffffffffffdb80
ffff80000081011b:	ff ff ff 
ffff80000081011e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810122:	48 89 c7             	mov    rdi,rax
ffff800000810125:	49 89 df             	mov    r15,rbx
ffff800000810128:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081012d:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff800000810134:	ff ff ff 
ffff800000810137:	48 01 da             	add    rdx,rbx
ffff80000081013a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
        kmfree(buf);
ffff80000081013c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810140:	48 89 c7             	mov    rdi,rax
ffff800000810143:	49 89 df             	mov    r15,rbx
ffff800000810146:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000081014d:	ff ff ff 
ffff800000810150:	48 01 d8             	add    rax,rbx
ffff800000810153:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:314
		return NULL;
ffff800000810155:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081015a:	e9 54 05 00 00       	jmp    ffff8000008106b3 <FAT32_readdir+0x78f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:317
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
ffff80000081015f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810163:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810166:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000081016a:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081016e:	48 99                	cqo    
ffff800000810170:	48 f7 f9             	idiv   rcx
ffff800000810173:	48 89 d0             	mov    rax,rdx
ffff800000810176:	48 89 c2             	mov    rdx,rax
ffff800000810179:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081017d:	48 01 d0             	add    rax,rdx
ffff800000810180:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:319

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff800000810184:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810188:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081018b:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000081018f:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff800000810193:	48 99                	cqo    
ffff800000810195:	48 f7 f9             	idiv   rcx
ffff800000810198:	48 89 d0             	mov    rax,rdx
ffff80000081019b:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffff80000081019e:	e9 6c 04 00 00       	jmp    ffff80000081060f <FAT32_readdir+0x6eb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:321
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff8000008101a3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008101a7:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008101ab:	3c 0f                	cmp    al,0xf
ffff8000008101ad:	0f 84 3d 04 00 00    	je     ffff8000008105f0 <FAT32_readdir+0x6cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff8000008101b3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008101b7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008101ba:	3c e5                	cmp    al,0xe5
ffff8000008101bc:	0f 84 31 04 00 00    	je     ffff8000008105f3 <FAT32_readdir+0x6cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323 (discriminator 2)
ffff8000008101c2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008101c6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008101c9:	84 c0                	test   al,al
ffff8000008101cb:	0f 84 22 04 00 00    	je     ffff8000008105f3 <FAT32_readdir+0x6cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323 (discriminator 4)
ffff8000008101d1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008101d5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008101d8:	3c 05                	cmp    al,0x5
ffff8000008101da:	0f 84 13 04 00 00    	je     ffff8000008105f3 <FAT32_readdir+0x6cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326
			continue;

		namelen = 0;
ffff8000008101e0:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008101e7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008101eb:	48 83 e8 20          	sub    rax,0x20
ffff8000008101ef:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff8000008101f3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008101f7:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008101fb:	3c 0f                	cmp    al,0xf
ffff8000008101fd:	0f 85 4f 02 00 00    	jne    ffff800000810452 <FAT32_readdir+0x52e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329 (discriminator 1)
ffff800000810203:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810207:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081020a:	3c e5                	cmp    al,0xe5
ffff80000081020c:	0f 84 40 02 00 00    	je     ffff800000810452 <FAT32_readdir+0x52e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329 (discriminator 2)
ffff800000810212:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810216:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810219:	84 c0                	test   al,al
ffff80000081021b:	0f 84 31 02 00 00    	je     ffff800000810452 <FAT32_readdir+0x52e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329 (discriminator 3)
ffff800000810221:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810225:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810228:	3c 05                	cmp    al,0x5
ffff80000081022a:	0f 84 22 02 00 00    	je     ffff800000810452 <FAT32_readdir+0x52e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:331
		{
			j = 0;
ffff800000810230:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff800000810237:	eb 1a                	jmp    ffff800000810253 <FAT32_readdir+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:335
			{
				j++;
ffff800000810239:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
				if(tmpldentry->LDIR_Ord & 0x40)
ffff80000081023d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810241:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810244:	0f b6 c0             	movzx  eax,al
ffff800000810247:	83 e0 40             	and    eax,0x40
ffff80000081024a:	85 c0                	test   eax,eax
ffff80000081024c:	75 34                	jne    ffff800000810282 <FAT32_readdir+0x35e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
					break;
				tmpldentry --;
ffff80000081024e:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff800000810253:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810257:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000081025b:	3c 0f                	cmp    al,0xf
ffff80000081025d:	75 24                	jne    ffff800000810283 <FAT32_readdir+0x35f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333 (discriminator 1)
ffff80000081025f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810263:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810266:	3c e5                	cmp    al,0xe5
ffff800000810268:	74 19                	je     ffff800000810283 <FAT32_readdir+0x35f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333 (discriminator 2)
ffff80000081026a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081026e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810271:	84 c0                	test   al,al
ffff800000810273:	74 0e                	je     ffff800000810283 <FAT32_readdir+0x35f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333 (discriminator 3)
ffff800000810275:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810279:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081027c:	3c 05                	cmp    al,0x5
ffff80000081027e:	75 b9                	jne    ffff800000810239 <FAT32_readdir+0x315>
ffff800000810280:	eb 01                	jmp    ffff800000810283 <FAT32_readdir+0x35f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:337
					break;
ffff800000810282:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:341
			}

			name = kmallocat(0,TO_MPGN(j * 13 + 1));
ffff800000810283:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000810286:	89 d0                	mov    eax,edx
ffff800000810288:	01 c0                	add    eax,eax
ffff80000081028a:	01 d0                	add    eax,edx
ffff80000081028c:	c1 e0 02             	shl    eax,0x2
ffff80000081028f:	01 d0                	add    eax,edx
ffff800000810291:	05 00 10 00 00       	add    eax,0x1000
ffff800000810296:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000081029c:	85 c0                	test   eax,eax
ffff80000081029e:	0f 48 c2             	cmovs  eax,edx
ffff8000008102a1:	c1 f8 0c             	sar    eax,0xc
ffff8000008102a4:	89 c6                	mov    esi,eax
ffff8000008102a6:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008102ab:	49 89 df             	mov    r15,rbx
ffff8000008102ae:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff8000008102b5:	ff ff ff 
ffff8000008102b8:	48 01 d8             	add    rax,rbx
ffff8000008102bb:	ff d0                	call   rax
ffff8000008102bd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:342
			memset(name,0,j*13+1);
ffff8000008102c1:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008102c4:	89 d0                	mov    eax,edx
ffff8000008102c6:	01 c0                	add    eax,eax
ffff8000008102c8:	01 d0                	add    eax,edx
ffff8000008102ca:	c1 e0 02             	shl    eax,0x2
ffff8000008102cd:	01 d0                	add    eax,edx
ffff8000008102cf:	83 c0 01             	add    eax,0x1
ffff8000008102d2:	89 c2                	mov    edx,eax
ffff8000008102d4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008102d8:	be 00 00 00 00       	mov    esi,0x0
ffff8000008102dd:	48 89 c7             	mov    rdi,rax
ffff8000008102e0:	49 89 df             	mov    r15,rbx
ffff8000008102e3:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff8000008102ea:	ff ff ff 
ffff8000008102ed:	48 01 d8             	add    rax,rbx
ffff8000008102f0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:343
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008102f2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008102f6:	48 83 e8 20          	sub    rax,0x20
ffff8000008102fa:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345

			for(x = 0;x<j;x++,tmpldentry --)
ffff8000008102fe:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000810305:	e9 37 01 00 00       	jmp    ffff800000810441 <FAT32_readdir+0x51d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:347
			{
				for(y = 0;y<5;y++)
ffff80000081030a:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810311:	eb 53                	jmp    ffff800000810366 <FAT32_readdir+0x442>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810313:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810317:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081031a:	48 63 d2             	movsxd rdx,edx
ffff80000081031d:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810322:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810326:	74 3a                	je     ffff800000810362 <FAT32_readdir+0x43e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 1)
ffff800000810328:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081032c:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081032f:	48 63 d2             	movsxd rdx,edx
ffff800000810332:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810337:	66 85 c0             	test   ax,ax
ffff80000081033a:	74 26                	je     ffff800000810362 <FAT32_readdir+0x43e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:349
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
ffff80000081033c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810340:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810343:	48 63 d2             	movsxd rdx,edx
ffff800000810346:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff80000081034b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081034e:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810351:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810354:	48 63 d0             	movsxd rdx,eax
ffff800000810357:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081035b:	48 01 d0             	add    rax,rdx
ffff80000081035e:	89 ca                	mov    edx,ecx
ffff800000810360:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:347 (discriminator 2)
				for(y = 0;y<5;y++)
ffff800000810362:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:347 (discriminator 1)
ffff800000810366:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
ffff80000081036a:	7e a7                	jle    ffff800000810313 <FAT32_readdir+0x3ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351

				for(y = 0;y<6;y++)
ffff80000081036c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810373:	eb 53                	jmp    ffff8000008103c8 <FAT32_readdir+0x4a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810375:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810379:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081037c:	48 63 d2             	movsxd rdx,edx
ffff80000081037f:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000810384:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810388:	74 3a                	je     ffff8000008103c4 <FAT32_readdir+0x4a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 1)
ffff80000081038a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081038e:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810391:	48 63 d2             	movsxd rdx,edx
ffff800000810394:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810399:	66 85 c0             	test   ax,ax
ffff80000081039c:	74 26                	je     ffff8000008103c4 <FAT32_readdir+0x4a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
ffff80000081039e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008103a2:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008103a5:	48 63 d2             	movsxd rdx,edx
ffff8000008103a8:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff8000008103ad:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008103b0:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008103b3:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008103b6:	48 63 d0             	movsxd rdx,eax
ffff8000008103b9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008103bd:	48 01 d0             	add    rax,rdx
ffff8000008103c0:	89 ca                	mov    edx,ecx
ffff8000008103c2:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351 (discriminator 2)
				for(y = 0;y<6;y++)
ffff8000008103c4:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351 (discriminator 1)
ffff8000008103c8:	83 7d cc 05          	cmp    DWORD PTR [rbp-0x34],0x5
ffff8000008103cc:	7e a7                	jle    ffff800000810375 <FAT32_readdir+0x451>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355

				for(y = 0;y<2;y++)
ffff8000008103ce:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008103d5:	eb 5b                	jmp    ffff800000810432 <FAT32_readdir+0x50e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff8000008103d7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008103db:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008103de:	48 63 d2             	movsxd rdx,edx
ffff8000008103e1:	48 83 c2 08          	add    rdx,0x8
ffff8000008103e5:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff8000008103ea:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008103ee:	74 3e                	je     ffff80000081042e <FAT32_readdir+0x50a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 1)
ffff8000008103f0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008103f4:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008103f7:	48 63 d2             	movsxd rdx,edx
ffff8000008103fa:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008103ff:	66 85 c0             	test   ax,ax
ffff800000810402:	74 2a                	je     ffff80000081042e <FAT32_readdir+0x50a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
ffff800000810404:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810408:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081040b:	48 63 d2             	movsxd rdx,edx
ffff80000081040e:	48 83 c2 08          	add    rdx,0x8
ffff800000810412:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000810417:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081041a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081041d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810420:	48 63 d0             	movsxd rdx,eax
ffff800000810423:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810427:	48 01 d0             	add    rax,rdx
ffff80000081042a:	89 ca                	mov    edx,ecx
ffff80000081042c:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355 (discriminator 2)
				for(y = 0;y<2;y++)
ffff80000081042e:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355 (discriminator 1)
ffff800000810432:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
ffff800000810436:	7e 9f                	jle    ffff8000008103d7 <FAT32_readdir+0x4b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
ffff800000810438:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
ffff80000081043c:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345 (discriminator 1)
ffff800000810441:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810444:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000810447:	0f 8c bd fe ff ff    	jl     ffff80000081030a <FAT32_readdir+0x3e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:359
			}
			goto find_lookup_success;
ffff80000081044d:	e9 27 02 00 00       	jmp    ffff800000810679 <FAT32_readdir+0x755>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:362
		}

		name = kmallocat(0,TO_MPGN(15));
ffff800000810452:	be 01 00 00 00       	mov    esi,0x1
ffff800000810457:	bf 00 00 00 00       	mov    edi,0x0
ffff80000081045c:	49 89 df             	mov    r15,rbx
ffff80000081045f:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff800000810466:	ff ff ff 
ffff800000810469:	48 01 d8             	add    rax,rbx
ffff80000081046c:	ff d0                	call   rax
ffff80000081046e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:363
		memset(name,0,15);
ffff800000810472:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810476:	ba 0f 00 00 00       	mov    edx,0xf
ffff80000081047b:	be 00 00 00 00       	mov    esi,0x0
ffff800000810480:	48 89 c7             	mov    rdi,rax
ffff800000810483:	49 89 df             	mov    r15,rbx
ffff800000810486:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff80000081048d:	ff ff ff 
ffff800000810490:	48 01 d8             	add    rax,rbx
ffff800000810493:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365
		//short file/dir base name compare
		for(x=0;x<8;x++)
ffff800000810495:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000081049c:	eb 74                	jmp    ffff800000810512 <FAT32_readdir+0x5ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:367
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff80000081049e:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008104a2:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008104a5:	48 98                	cdqe   
ffff8000008104a7:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008104ab:	3c 20                	cmp    al,0x20
ffff8000008104ad:	74 6b                	je     ffff80000081051a <FAT32_readdir+0x5f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:369
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff8000008104af:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008104b3:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff8000008104b7:	0f b6 c0             	movzx  eax,al
ffff8000008104ba:	83 e0 08             	and    eax,0x8
ffff8000008104bd:	85 c0                	test   eax,eax
ffff8000008104bf:	74 29                	je     ffff8000008104ea <FAT32_readdir+0x5c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff8000008104c1:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008104c5:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008104c8:	48 98                	cdqe   
ffff8000008104ca:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008104ce:	8d 48 20             	lea    ecx,[rax+0x20]
ffff8000008104d1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008104d4:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008104d7:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008104da:	48 63 d0             	movsxd rdx,eax
ffff8000008104dd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008104e1:	48 01 d0             	add    rax,rdx
ffff8000008104e4:	89 ca                	mov    edx,ecx
ffff8000008104e6:	88 10                	mov    BYTE PTR [rax],dl
ffff8000008104e8:	eb 24                	jmp    ffff80000081050e <FAT32_readdir+0x5ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:372
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff8000008104ea:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008104ee:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008104f1:	48 98                	cdqe   
ffff8000008104f3:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff8000008104f7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008104fa:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008104fd:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810500:	48 63 d0             	movsxd rdx,eax
ffff800000810503:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810507:	48 01 d0             	add    rax,rdx
ffff80000081050a:	89 ca                	mov    edx,ecx
ffff80000081050c:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365 (discriminator 2)
		for(x=0;x<8;x++)
ffff80000081050e:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365 (discriminator 1)
ffff800000810512:	83 7d d0 07          	cmp    DWORD PTR [rbp-0x30],0x7
ffff800000810516:	7e 86                	jle    ffff80000081049e <FAT32_readdir+0x57a>
ffff800000810518:	eb 01                	jmp    ffff80000081051b <FAT32_readdir+0x5f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
				break;
ffff80000081051a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:375
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
ffff80000081051b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081051f:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810523:	0f b6 c0             	movzx  eax,al
ffff800000810526:	83 e0 10             	and    eax,0x10
ffff800000810529:	85 c0                	test   eax,eax
ffff80000081052b:	0f 85 44 01 00 00    	jne    ffff800000810675 <FAT32_readdir+0x751>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:378
			goto find_lookup_success;

		name[namelen++] = '.';
ffff800000810531:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810534:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810537:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000081053a:	48 63 d0             	movsxd rdx,eax
ffff80000081053d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810541:	48 01 d0             	add    rax,rdx
ffff800000810544:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381

		//short file ext name compare
		for(x=8;x<11;x++)
ffff800000810547:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
ffff80000081054e:	eb 74                	jmp    ffff8000008105c4 <FAT32_readdir+0x6a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:383
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000810550:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810554:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810557:	48 98                	cdqe   
ffff800000810559:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000081055d:	3c 20                	cmp    al,0x20
ffff80000081055f:	74 6b                	je     ffff8000008105cc <FAT32_readdir+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:385
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000810561:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810565:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810569:	0f b6 c0             	movzx  eax,al
ffff80000081056c:	83 e0 10             	and    eax,0x10
ffff80000081056f:	85 c0                	test   eax,eax
ffff800000810571:	74 29                	je     ffff80000081059c <FAT32_readdir+0x678>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000810573:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810577:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081057a:	48 98                	cdqe   
ffff80000081057c:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810580:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000810583:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810586:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810589:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000081058c:	48 63 d0             	movsxd rdx,eax
ffff80000081058f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810593:	48 01 d0             	add    rax,rdx
ffff800000810596:	89 ca                	mov    edx,ecx
ffff800000810598:	88 10                	mov    BYTE PTR [rax],dl
ffff80000081059a:	eb 24                	jmp    ffff8000008105c0 <FAT32_readdir+0x69c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:388
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff80000081059c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008105a0:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008105a3:	48 98                	cdqe   
ffff8000008105a5:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff8000008105a9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008105ac:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008105af:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008105b2:	48 63 d0             	movsxd rdx,eax
ffff8000008105b5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008105b9:	48 01 d0             	add    rax,rdx
ffff8000008105bc:	89 ca                	mov    edx,ecx
ffff8000008105be:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381 (discriminator 2)
		for(x=8;x<11;x++)
ffff8000008105c0:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381 (discriminator 1)
ffff8000008105c4:	83 7d d0 0a          	cmp    DWORD PTR [rbp-0x30],0xa
ffff8000008105c8:	7e 86                	jle    ffff800000810550 <FAT32_readdir+0x62c>
ffff8000008105ca:	eb 01                	jmp    ffff8000008105cd <FAT32_readdir+0x6a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384
				break;
ffff8000008105cc:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:390
		}
		if(x == 8)
ffff8000008105cd:	83 7d d0 08          	cmp    DWORD PTR [rbp-0x30],0x8
ffff8000008105d1:	0f 85 a1 00 00 00    	jne    ffff800000810678 <FAT32_readdir+0x754>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
			name[--namelen] = 0;
ffff8000008105d7:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffff8000008105db:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008105de:	48 63 d0             	movsxd rdx,eax
ffff8000008105e1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008105e5:	48 01 d0             	add    rax,rdx
ffff8000008105e8:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:392
		goto find_lookup_success;
ffff8000008105eb:	e9 88 00 00 00       	jmp    ffff800000810678 <FAT32_readdir+0x754>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322
			continue;
ffff8000008105f0:	90                   	nop
ffff8000008105f1:	eb 01                	jmp    ffff8000008105f4 <FAT32_readdir+0x6d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324
			continue;
ffff8000008105f3:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:319 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff8000008105f4:	83 45 d8 20          	add    DWORD PTR [rbp-0x28],0x20
ffff8000008105f8:	48 83 45 c0 20       	add    QWORD PTR [rbp-0x40],0x20
ffff8000008105fd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810601:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810604:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff800000810608:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081060c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:319 (discriminator 1)
ffff80000081060f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000810612:	48 63 d0             	movsxd rdx,eax
ffff800000810615:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810619:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081061d:	48 39 c2             	cmp    rdx,rax
ffff800000810620:	0f 8c 7d fb ff ff    	jl     ffff8000008101a3 <FAT32_readdir+0x27f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810626:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000810629:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081062d:	89 d6                	mov    esi,edx
ffff80000081062f:	48 89 c7             	mov    rdi,rax
ffff800000810632:	49 89 df             	mov    r15,rbx
ffff800000810635:	48 b8 ba 16 ef ff ff 	movabs rax,0xffffffffffef16ba
ffff80000081063c:	ff ff ff 
ffff80000081063f:	48 01 d8             	add    rax,rbx
ffff800000810642:	ff d0                	call   rax
ffff800000810644:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:396
	if(cluster < 0x0ffffff7)
ffff800000810647:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff80000081064e:	77 05                	ja     ffff800000810655 <FAT32_readdir+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:397
		goto next_cluster;
ffff800000810650:	e9 4f fa ff ff       	jmp    ffff8000008100a4 <FAT32_readdir+0x180>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:399

    kmfree(buf);
ffff800000810655:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810659:	48 89 c7             	mov    rdi,rax
ffff80000081065c:	49 89 df             	mov    r15,rbx
ffff80000081065f:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000810666:	ff ff ff 
ffff800000810669:	48 01 d8             	add    rax,rbx
ffff80000081066c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400
	return NULL;
ffff80000081066e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810673:	eb 3e                	jmp    ffff8000008106b3 <FAT32_readdir+0x78f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:376
			goto find_lookup_success;
ffff800000810675:	90                   	nop
ffff800000810676:	eb 01                	jmp    ffff800000810679 <FAT32_readdir+0x755>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:392
		goto find_lookup_success;
ffff800000810678:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:404

find_lookup_success:

	filp->position += 32;
ffff800000810679:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081067d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810680:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff800000810684:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810688:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:405
	return filler(dirent,name,namelen,0,0);
ffff80000081068b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081068e:	48 63 d0             	movsxd rdx,eax
ffff800000810691:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000810695:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000810699:	4c 8b 8d 78 ff ff ff 	mov    r9,QWORD PTR [rbp-0x88]
ffff8000008106a0:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff8000008106a6:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008106ab:	48 89 c7             	mov    rdi,rax
ffff8000008106ae:	41 ff d1             	call   r9
ffff8000008106b1:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:406
}
ffff8000008106b3:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff8000008106b7:	5b                   	pop    rbx
ffff8000008106b8:	41 5f                	pop    r15
ffff8000008106ba:	5d                   	pop    rbp
ffff8000008106bb:	c3                   	ret    

ffff8000008106bc <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:423
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff8000008106bc:	f3 0f 1e fa          	endbr64 
ffff8000008106c0:	55                   	push   rbp
ffff8000008106c1:	48 89 e5             	mov    rbp,rsp
ffff8000008106c4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008106c4 <FAT32_create+0x8>
ffff8000008106cb:	49 bb 6c d3 10 00 00 	movabs r11,0x10d36c
ffff8000008106d2:	00 00 00 
ffff8000008106d5:	4c 01 d8             	add    rax,r11
ffff8000008106d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008106dc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008106e0:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff8000008106e3:	90                   	nop
ffff8000008106e4:	5d                   	pop    rbp
ffff8000008106e5:	c3                   	ret    

ffff8000008106e6 <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:427


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
ffff8000008106e6:	f3 0f 1e fa          	endbr64 
ffff8000008106ea:	55                   	push   rbp
ffff8000008106eb:	48 89 e5             	mov    rbp,rsp
ffff8000008106ee:	41 57                	push   r15
ffff8000008106f0:	53                   	push   rbx
ffff8000008106f1:	48 83 ec 60          	sub    rsp,0x60
ffff8000008106f5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008106f5 <FAT32_lookup+0xf>
ffff8000008106fc:	49 bb 3b d3 10 00 00 	movabs r11,0x10d33b
ffff800000810703:	00 00 00 
ffff800000810706:	4c 01 db             	add    rbx,r11
ffff800000810709:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000081070d:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:428
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
ffff800000810711:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810715:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000810719:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:429
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
ffff80000081071d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810721:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810725:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810729:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:431

	unsigned int cluster = 0;
ffff80000081072d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432
	unsigned long sector = 0;
ffff800000810734:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000081073b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:433
	unsigned char * buf =NULL; 
ffff80000081073c:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff800000810743:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434
	int i = 0,j = 0,x = 0;
ffff800000810744:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000081074b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000810752:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:435
	struct FAT32_Directory * tmpdentry = NULL;
ffff800000810759:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000810760:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000810761:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000810768:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	struct index_node * p = NULL;
ffff800000810769:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000810770:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:439

	buf = kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff800000810771:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810775:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810779:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000081077f:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff800000810786:	48 85 c0             	test   rax,rax
ffff800000810789:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000081078d:	48 c1 f8 0c          	sar    rax,0xc
ffff800000810791:	89 c6                	mov    esi,eax
ffff800000810793:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810798:	49 89 df             	mov    r15,rbx
ffff80000081079b:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff8000008107a2:	ff ff ff 
ffff8000008107a5:	48 01 d8             	add    rax,rbx
ffff8000008107a8:	ff d0                	call   rax
ffff8000008107aa:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:441

	cluster = finode->first_cluster;
ffff8000008107ae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008107b2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008107b5:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:444

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff8000008107b8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008107bc:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008107c0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008107c3:	83 e8 02             	sub    eax,0x2
ffff8000008107c6:	89 c1                	mov    ecx,eax
ffff8000008107c8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008107cc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008107d0:	48 0f af c1          	imul   rax,rcx
ffff8000008107d4:	48 01 d0             	add    rax,rdx
ffff8000008107d7:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:445
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
ffff8000008107db:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008107df:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008107e2:	89 c6                	mov    esi,eax
ffff8000008107e4:	48 b8 b0 db ff ff ff 	movabs rax,0xffffffffffffdbb0
ffff8000008107eb:	ff ff ff 
ffff8000008107ee:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008107f2:	48 89 c7             	mov    rdi,rax
ffff8000008107f5:	49 89 df             	mov    r15,rbx
ffff8000008107f8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008107fd:	48 b9 c3 3c ee ff ff 	movabs rcx,0xffffffffffee3cc3
ffff800000810804:	ff ff ff 
ffff800000810807:	48 01 d9             	add    rcx,rbx
ffff80000081080a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:446
    if(blkdev_read(parent_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff80000081080c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810810:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810814:	48 c1 e0 09          	shl    rax,0x9
ffff800000810818:	48 89 c7             	mov    rdi,rax
ffff80000081081b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081081f:	c1 e0 09             	shl    eax,0x9
ffff800000810822:	89 c6                	mov    esi,eax
ffff800000810824:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810828:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000081082c:	0f b7 c0             	movzx  eax,ax
ffff80000081082f:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000810833:	48 89 d1             	mov    rcx,rdx
ffff800000810836:	48 89 fa             	mov    rdx,rdi
ffff800000810839:	89 c7                	mov    edi,eax
ffff80000081083b:	49 89 df             	mov    r15,rbx
ffff80000081083e:	48 b8 04 00 ef ff ff 	movabs rax,0xffffffffffef0004
ffff800000810845:	ff ff ff 
ffff800000810848:	48 01 d8             	add    rax,rbx
ffff80000081084b:	ff d0                	call   rax
ffff80000081084d:	85 c0                	test   eax,eax
ffff80000081084f:	79 4b                	jns    ffff80000081089c <FAT32_lookup+0x1b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:448
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
ffff800000810851:	48 b8 d8 db ff ff ff 	movabs rax,0xffffffffffffdbd8
ffff800000810858:	ff ff ff 
ffff80000081085b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081085f:	48 89 c7             	mov    rdi,rax
ffff800000810862:	49 89 df             	mov    r15,rbx
ffff800000810865:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081086a:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff800000810871:	ff ff ff 
ffff800000810874:	48 01 da             	add    rdx,rbx
ffff800000810877:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449
        kmfree(buf);
ffff800000810879:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081087d:	48 89 c7             	mov    rdi,rax
ffff800000810880:	49 89 df             	mov    r15,rbx
ffff800000810883:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000081088a:	ff ff ff 
ffff80000081088d:	48 01 d8             	add    rax,rbx
ffff800000810890:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
		return NULL;
ffff800000810892:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810897:	e9 55 08 00 00       	jmp    ffff8000008110f1 <FAT32_lookup+0xa0b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:453
	}

	tmpdentry = (struct FAT32_Directory *)buf;
ffff80000081089c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008108a0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:455

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff8000008108a4:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008108ab:	e9 9d 05 00 00       	jmp    ffff800000810e4d <FAT32_lookup+0x767>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:457
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff8000008108b0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008108b4:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008108b8:	3c 0f                	cmp    al,0xf
ffff8000008108ba:	0f 84 59 05 00 00    	je     ffff800000810e19 <FAT32_lookup+0x733>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff8000008108c0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008108c4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008108c7:	3c e5                	cmp    al,0xe5
ffff8000008108c9:	0f 84 4d 05 00 00    	je     ffff800000810e1c <FAT32_lookup+0x736>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 2)
ffff8000008108cf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008108d3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008108d6:	84 c0                	test   al,al
ffff8000008108d8:	0f 84 3e 05 00 00    	je     ffff800000810e1c <FAT32_lookup+0x736>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 4)
ffff8000008108de:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008108e2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008108e5:	3c 05                	cmp    al,0x5
ffff8000008108e7:	0f 84 2f 05 00 00    	je     ffff800000810e1c <FAT32_lookup+0x736>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:462
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008108ed:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008108f1:	48 83 e8 20          	sub    rax,0x20
ffff8000008108f5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
		j = 0;
ffff8000008108f9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000810900:	e9 88 01 00 00       	jmp    ffff800000810a8d <FAT32_lookup+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:468
		{
			for(x=0;x<5;x++)
ffff800000810905:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000081090c:	eb 6a                	jmp    ffff800000810978 <FAT32_lookup+0x292>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
ffff80000081090e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810912:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810915:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810918:	7e 15                	jle    ffff80000081092f <FAT32_lookup+0x249>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470 (discriminator 1)
ffff80000081091a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081091e:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810921:	48 63 d2             	movsxd rdx,edx
ffff800000810924:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810929:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000081092d:	74 44                	je     ffff800000810973 <FAT32_lookup+0x28d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
ffff80000081092f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810933:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810936:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810939:	0f 8f e0 04 00 00    	jg     ffff800000810e1f <FAT32_lookup+0x739>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472 (discriminator 1)
ffff80000081093f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810943:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810946:	48 63 d2             	movsxd rdx,edx
ffff800000810949:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff80000081094e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810952:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810955:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810958:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081095b:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff80000081095e:	48 98                	cdqe   
ffff800000810960:	48 01 f0             	add    rax,rsi
ffff800000810963:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810966:	66 98                	cbw    
ffff800000810968:	66 39 c1             	cmp    cx,ax
ffff80000081096b:	0f 85 ae 04 00 00    	jne    ffff800000810e1f <FAT32_lookup+0x739>
ffff800000810971:	eb 01                	jmp    ffff800000810974 <FAT32_lookup+0x28e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471
					continue;
ffff800000810973:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:468 (discriminator 2)
			for(x=0;x<5;x++)
ffff800000810974:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:468 (discriminator 1)
ffff800000810978:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
ffff80000081097c:	7e 90                	jle    ffff80000081090e <FAT32_lookup+0x228>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
ffff80000081097e:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810985:	eb 6a                	jmp    ffff8000008109f1 <FAT32_lookup+0x30b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
ffff800000810987:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081098b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081098e:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810991:	7e 15                	jle    ffff8000008109a8 <FAT32_lookup+0x2c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477 (discriminator 1)
ffff800000810993:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810997:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000081099a:	48 63 d2             	movsxd rdx,edx
ffff80000081099d:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff8000008109a2:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008109a6:	74 44                	je     ffff8000008109ec <FAT32_lookup+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
ffff8000008109a8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008109ac:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008109af:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008109b2:	0f 8f 6a 04 00 00    	jg     ffff800000810e22 <FAT32_lookup+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479 (discriminator 1)
ffff8000008109b8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008109bc:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008109bf:	48 63 d2             	movsxd rdx,edx
ffff8000008109c2:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff8000008109c7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008109cb:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008109ce:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008109d1:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008109d4:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff8000008109d7:	48 98                	cdqe   
ffff8000008109d9:	48 01 f0             	add    rax,rsi
ffff8000008109dc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008109df:	66 98                	cbw    
ffff8000008109e1:	66 39 c1             	cmp    cx,ax
ffff8000008109e4:	0f 85 38 04 00 00    	jne    ffff800000810e22 <FAT32_lookup+0x73c>
ffff8000008109ea:	eb 01                	jmp    ffff8000008109ed <FAT32_lookup+0x307>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:478
					continue;
ffff8000008109ec:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475 (discriminator 2)
			for(x=0;x<6;x++)
ffff8000008109ed:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475 (discriminator 1)
ffff8000008109f1:	83 7d e0 05          	cmp    DWORD PTR [rbp-0x20],0x5
ffff8000008109f5:	7e 90                	jle    ffff800000810987 <FAT32_lookup+0x2a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
ffff8000008109f7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008109fe:	eb 72                	jmp    ffff800000810a72 <FAT32_lookup+0x38c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
ffff800000810a00:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a04:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810a07:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810a0a:	7e 19                	jle    ffff800000810a25 <FAT32_lookup+0x33f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484 (discriminator 1)
ffff800000810a0c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810a10:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810a13:	48 63 d2             	movsxd rdx,edx
ffff800000810a16:	48 83 c2 08          	add    rdx,0x8
ffff800000810a1a:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff800000810a1f:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810a23:	74 48                	je     ffff800000810a6d <FAT32_lookup+0x387>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000810a25:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a29:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810a2c:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810a2f:	0f 8f f0 03 00 00    	jg     ffff800000810e25 <FAT32_lookup+0x73f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486 (discriminator 1)
ffff800000810a35:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810a39:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810a3c:	48 63 d2             	movsxd rdx,edx
ffff800000810a3f:	48 83 c2 08          	add    rdx,0x8
ffff800000810a43:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000810a48:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a4c:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810a4f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810a52:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810a55:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810a58:	48 98                	cdqe   
ffff800000810a5a:	48 01 f0             	add    rax,rsi
ffff800000810a5d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810a60:	66 98                	cbw    
ffff800000810a62:	66 39 c1             	cmp    cx,ax
ffff800000810a65:	0f 85 ba 03 00 00    	jne    ffff800000810e25 <FAT32_lookup+0x73f>
ffff800000810a6b:	eb 01                	jmp    ffff800000810a6e <FAT32_lookup+0x388>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:485
					continue;
ffff800000810a6d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482 (discriminator 2)
			for(x=0;x<2;x++)
ffff800000810a6e:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482 (discriminator 1)
ffff800000810a72:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffff800000810a76:	7e 88                	jle    ffff800000810a00 <FAT32_lookup+0x31a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
ffff800000810a78:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a7c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810a7f:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810a82:	0f 8d 2e 04 00 00    	jge    ffff800000810eb6 <FAT32_lookup+0x7d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:495
			{
				goto find_lookup_success;
			}

			tmpldentry --;
ffff800000810a88:	48 83 6d d0 20       	sub    QWORD PTR [rbp-0x30],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000810a8d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810a91:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810a95:	3c 0f                	cmp    al,0xf
ffff800000810a97:	75 0f                	jne    ffff800000810aa8 <FAT32_lookup+0x3c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466 (discriminator 1)
ffff800000810a99:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810a9d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810aa0:	3c e5                	cmp    al,0xe5
ffff800000810aa2:	0f 85 5d fe ff ff    	jne    ffff800000810905 <FAT32_lookup+0x21f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:499
		}

		//short file/dir base name compare
		j = 0;
ffff800000810aa8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500
		for(x=0;x<8;x++)
ffff800000810aaf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810ab6:	e9 f4 01 00 00       	jmp    ffff800000810caf <FAT32_lookup+0x5c9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:502
		{
			switch(tmpdentry->DIR_Name[x])
ffff800000810abb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810abf:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810ac2:	48 98                	cdqe   
ffff800000810ac4:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810ac8:	0f b6 c0             	movzx  eax,al
ffff800000810acb:	83 f8 7a             	cmp    eax,0x7a
ffff800000810ace:	0f 8f d0 01 00 00    	jg     ffff800000810ca4 <FAT32_lookup+0x5be>
ffff800000810ad4:	83 f8 61             	cmp    eax,0x61
ffff800000810ad7:	0f 8d e6 00 00 00    	jge    ffff800000810bc3 <FAT32_lookup+0x4dd>
ffff800000810add:	83 f8 5a             	cmp    eax,0x5a
ffff800000810ae0:	0f 8f be 01 00 00    	jg     ffff800000810ca4 <FAT32_lookup+0x5be>
ffff800000810ae6:	83 f8 41             	cmp    eax,0x41
ffff800000810ae9:	0f 8d d4 00 00 00    	jge    ffff800000810bc3 <FAT32_lookup+0x4dd>
ffff800000810aef:	83 f8 20             	cmp    eax,0x20
ffff800000810af2:	74 1a                	je     ffff800000810b0e <FAT32_lookup+0x428>
ffff800000810af4:	83 f8 20             	cmp    eax,0x20
ffff800000810af7:	0f 8c a7 01 00 00    	jl     ffff800000810ca4 <FAT32_lookup+0x5be>
ffff800000810afd:	83 e8 30             	sub    eax,0x30
ffff800000810b00:	83 f8 09             	cmp    eax,0x9
ffff800000810b03:	0f 87 9b 01 00 00    	ja     ffff800000810ca4 <FAT32_lookup+0x5be>
ffff800000810b09:	e9 53 01 00 00       	jmp    ffff800000810c61 <FAT32_lookup+0x57b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:505
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000810b0e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810b12:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810b16:	0f b6 c0             	movzx  eax,al
ffff800000810b19:	83 e0 10             	and    eax,0x10
ffff800000810b1c:	85 c0                	test   eax,eax
ffff800000810b1e:	75 50                	jne    ffff800000810b70 <FAT32_lookup+0x48a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:507
					{
						if(dest_dentry->name[j]=='.')
ffff800000810b20:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b24:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810b27:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810b2a:	48 98                	cdqe   
ffff800000810b2c:	48 01 d0             	add    rax,rdx
ffff800000810b2f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810b32:	3c 2e                	cmp    al,0x2e
ffff800000810b34:	0f 84 70 01 00 00    	je     ffff800000810caa <FAT32_lookup+0x5c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:509
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810b3a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810b3e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810b41:	48 98                	cdqe   
ffff800000810b43:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810b47:	0f b6 d0             	movzx  edx,al
ffff800000810b4a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b4e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810b51:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810b54:	48 98                	cdqe   
ffff800000810b56:	48 01 c8             	add    rax,rcx
ffff800000810b59:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810b5c:	0f be c0             	movsx  eax,al
ffff800000810b5f:	39 c2                	cmp    edx,eax
ffff800000810b61:	0f 85 c1 02 00 00    	jne    ffff800000810e28 <FAT32_lookup+0x742>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:511
						{
							j++;
ffff800000810b67:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
							break;
ffff800000810b6b:	e9 3b 01 00 00       	jmp    ffff800000810cab <FAT32_lookup+0x5c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:519
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810b70:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b74:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810b77:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810b7a:	7d 32                	jge    ffff800000810bae <FAT32_lookup+0x4c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:519 (discriminator 1)
ffff800000810b7c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810b80:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810b83:	48 98                	cdqe   
ffff800000810b85:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810b89:	0f b6 d0             	movzx  edx,al
ffff800000810b8c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b90:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810b93:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810b96:	48 98                	cdqe   
ffff800000810b98:	48 01 c8             	add    rax,rcx
ffff800000810b9b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810b9e:	0f be c0             	movsx  eax,al
ffff800000810ba1:	39 c2                	cmp    edx,eax
ffff800000810ba3:	75 09                	jne    ffff800000810bae <FAT32_lookup+0x4c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:521
						{
							j++;
ffff800000810ba5:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:522
							break;
ffff800000810ba9:	e9 fd 00 00 00       	jmp    ffff800000810cab <FAT32_lookup+0x5c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:524
						}
						else if(j == dest_dentry->name_length)
ffff800000810bae:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810bb2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810bb5:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810bb8:	0f 85 6d 02 00 00    	jne    ffff800000810e2b <FAT32_lookup+0x745>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:525
							continue;
ffff800000810bbe:	e9 e8 00 00 00       	jmp    ffff800000810cab <FAT32_lookup+0x5c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:532
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000810bc3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810bc7:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810bcb:	0f b6 c0             	movzx  eax,al
ffff800000810bce:	83 e0 08             	and    eax,0x8
ffff800000810bd1:	85 c0                	test   eax,eax
ffff800000810bd3:	74 49                	je     ffff800000810c1e <FAT32_lookup+0x538>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:533
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000810bd5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810bd9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810bdc:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810bdf:	0f 8d 49 02 00 00    	jge    ffff800000810e2e <FAT32_lookup+0x748>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:533 (discriminator 1)
ffff800000810be5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810be9:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810bec:	48 98                	cdqe   
ffff800000810bee:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810bf2:	0f b6 c0             	movzx  eax,al
ffff800000810bf5:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000810bf8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810bfc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810bff:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810c02:	48 98                	cdqe   
ffff800000810c04:	48 01 c8             	add    rax,rcx
ffff800000810c07:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810c0a:	0f be c0             	movsx  eax,al
ffff800000810c0d:	39 c2                	cmp    edx,eax
ffff800000810c0f:	0f 85 19 02 00 00    	jne    ffff800000810e2e <FAT32_lookup+0x748>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:535
						{
							j++;
ffff800000810c15:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:536
							break;
ffff800000810c19:	e9 8d 00 00 00       	jmp    ffff800000810cab <FAT32_lookup+0x5c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:542
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810c1e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c22:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810c25:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810c28:	0f 8d 03 02 00 00    	jge    ffff800000810e31 <FAT32_lookup+0x74b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:542 (discriminator 1)
ffff800000810c2e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810c32:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810c35:	48 98                	cdqe   
ffff800000810c37:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810c3b:	0f b6 d0             	movzx  edx,al
ffff800000810c3e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c42:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810c45:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810c48:	48 98                	cdqe   
ffff800000810c4a:	48 01 c8             	add    rax,rcx
ffff800000810c4d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810c50:	0f be c0             	movsx  eax,al
ffff800000810c53:	39 c2                	cmp    edx,eax
ffff800000810c55:	0f 85 d6 01 00 00    	jne    ffff800000810e31 <FAT32_lookup+0x74b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:544
						{
							j++;
ffff800000810c5b:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:545
							break;
ffff800000810c5f:	eb 4a                	jmp    ffff800000810cab <FAT32_lookup+0x5c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:552
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810c61:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c65:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810c68:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810c6b:	0f 8d c3 01 00 00    	jge    ffff800000810e34 <FAT32_lookup+0x74e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:552 (discriminator 1)
ffff800000810c71:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810c75:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810c78:	48 98                	cdqe   
ffff800000810c7a:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810c7e:	0f b6 d0             	movzx  edx,al
ffff800000810c81:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c85:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810c88:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810c8b:	48 98                	cdqe   
ffff800000810c8d:	48 01 c8             	add    rax,rcx
ffff800000810c90:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810c93:	0f be c0             	movsx  eax,al
ffff800000810c96:	39 c2                	cmp    edx,eax
ffff800000810c98:	0f 85 96 01 00 00    	jne    ffff800000810e34 <FAT32_lookup+0x74e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:554
					{
						j++;
ffff800000810c9e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:555
						break;
ffff800000810ca2:	eb 07                	jmp    ffff800000810cab <FAT32_lookup+0x5c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:561
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
ffff800000810ca4:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:562
					break;
ffff800000810ca8:	eb 01                	jmp    ffff800000810cab <FAT32_lookup+0x5c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:508
							continue;
ffff800000810caa:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000810cab:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500 (discriminator 1)
ffff800000810caf:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
ffff800000810cb3:	0f 8e 02 fe ff ff    	jle    ffff800000810abb <FAT32_lookup+0x3d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:566
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000810cb9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810cbd:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810cc1:	0f b6 c0             	movzx  eax,al
ffff800000810cc4:	83 e0 10             	and    eax,0x10
ffff800000810cc7:	85 c0                	test   eax,eax
ffff800000810cc9:	0f 85 ea 01 00 00    	jne    ffff800000810eb9 <FAT32_lookup+0x7d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:568
		{
			j++;
ffff800000810ccf:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569
			for(x=8;x<11;x++)
ffff800000810cd3:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
ffff800000810cda:	e9 2b 01 00 00       	jmp    ffff800000810e0a <FAT32_lookup+0x724>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:571
			{
				switch(tmpdentry->DIR_Name[x])
ffff800000810cdf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810ce3:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810ce6:	48 98                	cdqe   
ffff800000810ce8:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810cec:	0f b6 c0             	movzx  eax,al
ffff800000810cef:	83 f8 7a             	cmp    eax,0x7a
ffff800000810cf2:	0f 8f 3f 01 00 00    	jg     ffff800000810e37 <FAT32_lookup+0x751>
ffff800000810cf8:	83 f8 61             	cmp    eax,0x61
ffff800000810cfb:	7d 2e                	jge    ffff800000810d2b <FAT32_lookup+0x645>
ffff800000810cfd:	83 f8 5a             	cmp    eax,0x5a
ffff800000810d00:	0f 8f 31 01 00 00    	jg     ffff800000810e37 <FAT32_lookup+0x751>
ffff800000810d06:	83 f8 41             	cmp    eax,0x41
ffff800000810d09:	7d 20                	jge    ffff800000810d2b <FAT32_lookup+0x645>
ffff800000810d0b:	83 f8 20             	cmp    eax,0x20
ffff800000810d0e:	0f 84 c4 00 00 00    	je     ffff800000810dd8 <FAT32_lookup+0x6f2>
ffff800000810d14:	83 f8 20             	cmp    eax,0x20
ffff800000810d17:	0f 8c 1a 01 00 00    	jl     ffff800000810e37 <FAT32_lookup+0x751>
ffff800000810d1d:	83 e8 30             	sub    eax,0x30
ffff800000810d20:	83 f8 09             	cmp    eax,0x9
ffff800000810d23:	0f 87 0e 01 00 00    	ja     ffff800000810e37 <FAT32_lookup+0x751>
ffff800000810d29:	eb 7e                	jmp    ffff800000810da9 <FAT32_lookup+0x6c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:575
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000810d2b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810d2f:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810d33:	0f b6 c0             	movzx  eax,al
ffff800000810d36:	83 e0 10             	and    eax,0x10
ffff800000810d39:	85 c0                	test   eax,eax
ffff800000810d3b:	74 39                	je     ffff800000810d76 <FAT32_lookup+0x690>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:576
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000810d3d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810d41:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810d44:	48 98                	cdqe   
ffff800000810d46:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810d4a:	0f b6 c0             	movzx  eax,al
ffff800000810d4d:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000810d50:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d54:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810d57:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810d5a:	48 98                	cdqe   
ffff800000810d5c:	48 01 c8             	add    rax,rcx
ffff800000810d5f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810d62:	0f be c0             	movsx  eax,al
ffff800000810d65:	39 c2                	cmp    edx,eax
ffff800000810d67:	0f 85 cd 00 00 00    	jne    ffff800000810e3a <FAT32_lookup+0x754>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:578
							{
								j++;
ffff800000810d6d:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:579
								break;
ffff800000810d71:	e9 90 00 00 00       	jmp    ffff800000810e06 <FAT32_lookup+0x720>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:585
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810d76:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810d7a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810d7d:	48 98                	cdqe   
ffff800000810d7f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810d83:	0f b6 d0             	movzx  edx,al
ffff800000810d86:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d8a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810d8d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810d90:	48 98                	cdqe   
ffff800000810d92:	48 01 c8             	add    rax,rcx
ffff800000810d95:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810d98:	0f be c0             	movsx  eax,al
ffff800000810d9b:	39 c2                	cmp    edx,eax
ffff800000810d9d:	0f 85 9a 00 00 00    	jne    ffff800000810e3d <FAT32_lookup+0x757>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:587
							{
								j++;
ffff800000810da3:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:588
								break;
ffff800000810da7:	eb 5d                	jmp    ffff800000810e06 <FAT32_lookup+0x720>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:595
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810da9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810dad:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810db0:	48 98                	cdqe   
ffff800000810db2:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810db6:	0f b6 d0             	movzx  edx,al
ffff800000810db9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810dbd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810dc0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810dc3:	48 98                	cdqe   
ffff800000810dc5:	48 01 c8             	add    rax,rcx
ffff800000810dc8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810dcb:	0f be c0             	movsx  eax,al
ffff800000810dce:	39 c2                	cmp    edx,eax
ffff800000810dd0:	75 6e                	jne    ffff800000810e40 <FAT32_lookup+0x75a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:597
						{
							j++;
ffff800000810dd2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:598
							break;
ffff800000810dd6:	eb 2e                	jmp    ffff800000810e06 <FAT32_lookup+0x720>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:604
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810dd8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810ddc:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810ddf:	48 98                	cdqe   
ffff800000810de1:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810de5:	0f b6 d0             	movzx  edx,al
ffff800000810de8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810dec:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810def:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810df2:	48 98                	cdqe   
ffff800000810df4:	48 01 c8             	add    rax,rcx
ffff800000810df7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810dfa:	0f be c0             	movsx  eax,al
ffff800000810dfd:	39 c2                	cmp    edx,eax
ffff800000810dff:	75 42                	jne    ffff800000810e43 <FAT32_lookup+0x75d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:606
						{
							j++;
ffff800000810e01:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:607
							break;
ffff800000810e05:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569 (discriminator 2)
			for(x=8;x<11;x++)
ffff800000810e06:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569 (discriminator 1)
ffff800000810e0a:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
ffff800000810e0e:	0f 8e cb fe ff ff    	jle    ffff800000810cdf <FAT32_lookup+0x5f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:617
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
ffff800000810e14:	e9 a0 00 00 00       	jmp    ffff800000810eb9 <FAT32_lookup+0x7d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:458
			continue;
ffff800000810e19:	90                   	nop
ffff800000810e1a:	eb 28                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460
			continue;
ffff800000810e1c:	90                   	nop
ffff800000810e1d:	eb 25                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473
					goto continue_cmp_fail;
ffff800000810e1f:	90                   	nop
ffff800000810e20:	eb 22                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480
					goto continue_cmp_fail;
ffff800000810e22:	90                   	nop
ffff800000810e23:	eb 1f                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487
					goto continue_cmp_fail;
ffff800000810e25:	90                   	nop
ffff800000810e26:	eb 1c                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:515
							goto continue_cmp_fail;
ffff800000810e28:	90                   	nop
ffff800000810e29:	eb 19                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:527
							goto continue_cmp_fail;
ffff800000810e2b:	90                   	nop
ffff800000810e2c:	eb 16                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:539
							goto continue_cmp_fail;
ffff800000810e2e:	90                   	nop
ffff800000810e2f:	eb 13                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:548
							goto continue_cmp_fail;
ffff800000810e31:	90                   	nop
ffff800000810e32:	eb 10                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:558
						goto continue_cmp_fail;
ffff800000810e34:	90                   	nop
ffff800000810e35:	eb 0d                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:613
						goto continue_cmp_fail;
ffff800000810e37:	90                   	nop
ffff800000810e38:	eb 0a                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:582
								goto continue_cmp_fail;
ffff800000810e3a:	90                   	nop
ffff800000810e3b:	eb 07                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:591
								goto continue_cmp_fail;
ffff800000810e3d:	90                   	nop
ffff800000810e3e:	eb 04                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:601
							goto continue_cmp_fail;
ffff800000810e40:	90                   	nop
ffff800000810e41:	eb 01                	jmp    ffff800000810e44 <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:610
							goto continue_cmp_fail;
ffff800000810e43:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:455 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000810e44:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
ffff800000810e48:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:455 (discriminator 1)
ffff800000810e4d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000810e50:	48 63 d0             	movsxd rdx,eax
ffff800000810e53:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810e57:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810e5b:	48 39 c2             	cmp    rdx,rax
ffff800000810e5e:	0f 8c 4c fa ff ff    	jl     ffff8000008108b0 <FAT32_lookup+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:622

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810e64:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000810e67:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810e6b:	89 d6                	mov    esi,edx
ffff800000810e6d:	48 89 c7             	mov    rdi,rax
ffff800000810e70:	49 89 df             	mov    r15,rbx
ffff800000810e73:	48 b8 ba 16 ef ff ff 	movabs rax,0xffffffffffef16ba
ffff800000810e7a:	ff ff ff 
ffff800000810e7d:	48 01 d8             	add    rax,rbx
ffff800000810e80:	ff d0                	call   rax
ffff800000810e82:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:623
	if(cluster < 0x0ffffff7)
ffff800000810e85:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000810e8c:	77 05                	ja     ffff800000810e93 <FAT32_lookup+0x7ad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:624
		goto next_cluster;
ffff800000810e8e:	e9 25 f9 ff ff       	jmp    ffff8000008107b8 <FAT32_lookup+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:626

    kmfree(buf);
ffff800000810e93:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810e97:	48 89 c7             	mov    rdi,rax
ffff800000810e9a:	49 89 df             	mov    r15,rbx
ffff800000810e9d:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000810ea4:	ff ff ff 
ffff800000810ea7:	48 01 d8             	add    rax,rbx
ffff800000810eaa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627
	return NULL;
ffff800000810eac:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810eb1:	e9 3b 02 00 00       	jmp    ffff8000008110f1 <FAT32_lookup+0xa0b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:492
				goto find_lookup_success;
ffff800000810eb6:	90                   	nop
ffff800000810eb7:	eb 01                	jmp    ffff800000810eba <FAT32_lookup+0x7d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:617
		goto find_lookup_success;
ffff800000810eb9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:630

find_lookup_success:
	p = (struct index_node *) kmallocat(0,TO_MPGN(sizeof(struct index_node)));
ffff800000810eba:	be 01 00 00 00       	mov    esi,0x1
ffff800000810ebf:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810ec4:	49 89 df             	mov    r15,rbx
ffff800000810ec7:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff800000810ece:	ff ff ff 
ffff800000810ed1:	48 01 d8             	add    rax,rbx
ffff800000810ed4:	ff d0                	call   rax
ffff800000810ed6:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631
	memset(p,0,sizeof(struct index_node));
ffff800000810eda:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810ede:	ba 40 00 00 00       	mov    edx,0x40
ffff800000810ee3:	be 00 00 00 00       	mov    esi,0x0
ffff800000810ee8:	48 89 c7             	mov    rdi,rax
ffff800000810eeb:	49 89 df             	mov    r15,rbx
ffff800000810eee:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff800000810ef5:	ff ff ff 
ffff800000810ef8:	48 01 d8             	add    rax,rbx
ffff800000810efb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:632
	p->file_size = tmpdentry->DIR_FileSize;
ffff800000810efd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810f01:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff800000810f04:	89 c2                	mov    edx,eax
ffff800000810f06:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810f0a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:633
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000810f0d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810f11:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810f14:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810f18:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810f1c:	48 01 d0             	add    rax,rdx
ffff800000810f1f:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000810f23:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810f27:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810f2b:	48 89 c1             	mov    rcx,rax
ffff800000810f2e:	48 89 d0             	mov    rax,rdx
ffff800000810f31:	ba 00 00 00 00       	mov    edx,0x0
ffff800000810f36:	48 f7 f1             	div    rcx
ffff800000810f39:	48 89 c2             	mov    rdx,rax
ffff800000810f3c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810f40:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
ffff800000810f44:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810f48:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810f4c:	0f b6 c0             	movzx  eax,al
ffff800000810f4f:	83 e0 10             	and    eax,0x10
ffff800000810f52:	85 c0                	test   eax,eax
ffff800000810f54:	74 07                	je     ffff800000810f5d <FAT32_lookup+0x877>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634 (discriminator 1)
ffff800000810f56:	ba 02 00 00 00       	mov    edx,0x2
ffff800000810f5b:	eb 05                	jmp    ffff800000810f62 <FAT32_lookup+0x87c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634 (discriminator 2)
ffff800000810f5d:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634 (discriminator 4)
ffff800000810f62:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810f66:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 4)
	p->sb = parent_inode->sb;
ffff800000810f6a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810f6e:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff800000810f72:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810f76:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
ffff800000810f7a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810f7e:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000810f85:	ff ff ff 
ffff800000810f88:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000810f8c:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
ffff800000810f90:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810f94:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff800000810f9b:	ff ff ff 
ffff800000810f9e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000810fa2:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_inode_info)));
ffff800000810fa6:	be 01 00 00 00       	mov    esi,0x1
ffff800000810fab:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810fb0:	49 89 df             	mov    r15,rbx
ffff800000810fb3:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff800000810fba:	ff ff ff 
ffff800000810fbd:	48 01 d8             	add    rax,rbx
ffff800000810fc0:	ff d0                	call   rax
ffff800000810fc2:	48 89 c2             	mov    rdx,rax
ffff800000810fc5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810fc9:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000810fcd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810fd1:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000810fd5:	ba 20 00 00 00       	mov    edx,0x20
ffff800000810fda:	be 00 00 00 00       	mov    esi,0x0
ffff800000810fdf:	48 89 c7             	mov    rdi,rax
ffff800000810fe2:	49 89 df             	mov    r15,rbx
ffff800000810fe5:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff800000810fec:	ff ff ff 
ffff800000810fef:	48 01 d8             	add    rax,rbx
ffff800000810ff2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	finode = p->private_index_info;
ffff800000810ff4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810ff8:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000810ffc:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:643 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
ffff800000811000:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811004:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000811008:	0f b7 c0             	movzx  eax,ax
ffff80000081100b:	c1 e0 10             	shl    eax,0x10
ffff80000081100e:	89 c2                	mov    edx,eax
ffff800000811010:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811014:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
ffff800000811018:	0f b7 c0             	movzx  eax,ax
ffff80000081101b:	09 d0                	or     eax,edx
ffff80000081101d:	48 98                	cdqe   
ffff80000081101f:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff800000811024:	48 89 c2             	mov    rdx,rax
ffff800000811027:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081102b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)
	finode->dentry_location = cluster;
ffff80000081102e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811031:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811035:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
ffff800000811039:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081103d:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffff800000811041:	48 c1 f8 05          	sar    rax,0x5
ffff800000811045:	48 89 c2             	mov    rdx,rax
ffff800000811048:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081104c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:646 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
ffff800000811050:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811054:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
ffff800000811058:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081105c:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:647 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
ffff800000811060:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811064:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
ffff800000811068:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081106c:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
ffff800000811070:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811074:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
ffff800000811078:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081107c:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
ffff800000811080:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811084:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff800000811088:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081108c:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
ffff800000811090:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811094:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000811098:	66 c1 e8 0c          	shr    ax,0xc
ffff80000081109c:	66 85 c0             	test   ax,ax
ffff80000081109f:	74 27                	je     ffff8000008110c8 <FAT32_lookup+0x9e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 1)
ffff8000008110a1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008110a5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008110a9:	83 e0 01             	and    eax,0x1
ffff8000008110ac:	48 85 c0             	test   rax,rax
ffff8000008110af:	74 17                	je     ffff8000008110c8 <FAT32_lookup+0x9e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:653
	{
		p->attribute |= FS_ATTR_DEVICE;
ffff8000008110b1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008110b5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008110b9:	48 83 c8 04          	or     rax,0x4
ffff8000008110bd:	48 89 c2             	mov    rdx,rax
ffff8000008110c0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008110c4:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:656
	}

	dest_dentry->dir_inode = p;
ffff8000008110c8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008110cc:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008110d0:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:657
    kmfree(buf);
ffff8000008110d4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008110d8:	48 89 c7             	mov    rdi,rax
ffff8000008110db:	49 89 df             	mov    r15,rbx
ffff8000008110de:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff8000008110e5:	ff ff ff 
ffff8000008110e8:	48 01 d8             	add    rax,rbx
ffff8000008110eb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:658
	return dest_dentry;	
ffff8000008110ed:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:659
}
ffff8000008110f1:	48 83 c4 60          	add    rsp,0x60
ffff8000008110f5:	5b                   	pop    rbx
ffff8000008110f6:	41 5f                	pop    r15
ffff8000008110f8:	5d                   	pop    rbp
ffff8000008110f9:	c3                   	ret    

ffff8000008110fa <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:663


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff8000008110fa:	f3 0f 1e fa          	endbr64 
ffff8000008110fe:	55                   	push   rbp
ffff8000008110ff:	48 89 e5             	mov    rbp,rsp
ffff800000811102:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811102 <FAT32_mkdir+0x8>
ffff800000811109:	49 bb 2e c9 10 00 00 	movabs r11,0x10c92e
ffff800000811110:	00 00 00 
ffff800000811113:	4c 01 d8             	add    rax,r11
ffff800000811116:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081111a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081111e:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000811121:	90                   	nop
ffff800000811122:	5d                   	pop    rbp
ffff800000811123:	c3                   	ret    

ffff800000811124 <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:667


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
ffff800000811124:	f3 0f 1e fa          	endbr64 
ffff800000811128:	55                   	push   rbp
ffff800000811129:	48 89 e5             	mov    rbp,rsp
ffff80000081112c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081112c <FAT32_rmdir+0x8>
ffff800000811133:	49 bb 04 c9 10 00 00 	movabs r11,0x10c904
ffff80000081113a:	00 00 00 
ffff80000081113d:	4c 01 d8             	add    rax,r11
ffff800000811140:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811144:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811148:	90                   	nop
ffff800000811149:	5d                   	pop    rbp
ffff80000081114a:	c3                   	ret    

ffff80000081114b <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:670

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
ffff80000081114b:	f3 0f 1e fa          	endbr64 
ffff80000081114f:	55                   	push   rbp
ffff800000811150:	48 89 e5             	mov    rbp,rsp
ffff800000811153:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811153 <FAT32_rename+0x8>
ffff80000081115a:	49 bb dd c8 10 00 00 	movabs r11,0x10c8dd
ffff800000811161:	00 00 00 
ffff800000811164:	4c 01 d8             	add    rax,r11
ffff800000811167:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081116b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081116f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000811173:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000811177:	90                   	nop
ffff800000811178:	5d                   	pop    rbp
ffff800000811179:	c3                   	ret    

ffff80000081117a <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:673

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff80000081117a:	f3 0f 1e fa          	endbr64 
ffff80000081117e:	55                   	push   rbp
ffff80000081117f:	48 89 e5             	mov    rbp,rsp
ffff800000811182:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811182 <FAT32_getattr+0x8>
ffff800000811189:	49 bb ae c8 10 00 00 	movabs r11,0x10c8ae
ffff800000811190:	00 00 00 
ffff800000811193:	4c 01 d8             	add    rax,r11
ffff800000811196:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081119a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081119e:	90                   	nop
ffff80000081119f:	5d                   	pop    rbp
ffff8000008111a0:	c3                   	ret    

ffff8000008111a1 <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:676

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff8000008111a1:	f3 0f 1e fa          	endbr64 
ffff8000008111a5:	55                   	push   rbp
ffff8000008111a6:	48 89 e5             	mov    rbp,rsp
ffff8000008111a9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008111a9 <FAT32_setattr+0x8>
ffff8000008111b0:	49 bb 87 c8 10 00 00 	movabs r11,0x10c887
ffff8000008111b7:	00 00 00 
ffff8000008111ba:	4c 01 d8             	add    rax,r11
ffff8000008111bd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008111c1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008111c5:	90                   	nop
ffff8000008111c6:	5d                   	pop    rbp
ffff8000008111c7:	c3                   	ret    

ffff8000008111c8 <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:691
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
ffff8000008111c8:	f3 0f 1e fa          	endbr64 
ffff8000008111cc:	55                   	push   rbp
ffff8000008111cd:	48 89 e5             	mov    rbp,rsp
ffff8000008111d0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008111d0 <FAT32_compare+0x8>
ffff8000008111d7:	49 bb 60 c8 10 00 00 	movabs r11,0x10c860
ffff8000008111de:	00 00 00 
ffff8000008111e1:	4c 01 d8             	add    rax,r11
ffff8000008111e4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008111e8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008111ec:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008111f0:	90                   	nop
ffff8000008111f1:	5d                   	pop    rbp
ffff8000008111f2:	c3                   	ret    

ffff8000008111f3 <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:692
long FAT32_hash(struct dir_entry * dentry,char * filename){}
ffff8000008111f3:	f3 0f 1e fa          	endbr64 
ffff8000008111f7:	55                   	push   rbp
ffff8000008111f8:	48 89 e5             	mov    rbp,rsp
ffff8000008111fb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008111fb <FAT32_hash+0x8>
ffff800000811202:	49 bb 35 c8 10 00 00 	movabs r11,0x10c835
ffff800000811209:	00 00 00 
ffff80000081120c:	4c 01 d8             	add    rax,r11
ffff80000081120f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811213:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811217:	90                   	nop
ffff800000811218:	5d                   	pop    rbp
ffff800000811219:	c3                   	ret    

ffff80000081121a <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:693
long FAT32_release(struct dir_entry * dentry){}
ffff80000081121a:	f3 0f 1e fa          	endbr64 
ffff80000081121e:	55                   	push   rbp
ffff80000081121f:	48 89 e5             	mov    rbp,rsp
ffff800000811222:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811222 <FAT32_release+0x8>
ffff800000811229:	49 bb 0e c8 10 00 00 	movabs r11,0x10c80e
ffff800000811230:	00 00 00 
ffff800000811233:	4c 01 d8             	add    rax,r11
ffff800000811236:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081123a:	90                   	nop
ffff80000081123b:	5d                   	pop    rbp
ffff80000081123c:	c3                   	ret    

ffff80000081123d <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:694
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
ffff80000081123d:	f3 0f 1e fa          	endbr64 
ffff800000811241:	55                   	push   rbp
ffff800000811242:	48 89 e5             	mov    rbp,rsp
ffff800000811245:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811245 <FAT32_iput+0x8>
ffff80000081124c:	49 bb eb c7 10 00 00 	movabs r11,0x10c7eb
ffff800000811253:	00 00 00 
ffff800000811256:	4c 01 d8             	add    rax,r11
ffff800000811259:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081125d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811261:	90                   	nop
ffff800000811262:	5d                   	pop    rbp
ffff800000811263:	c3                   	ret    

ffff800000811264 <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:706
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
ffff800000811264:	f3 0f 1e fa          	endbr64 
ffff800000811268:	55                   	push   rbp
ffff800000811269:	48 89 e5             	mov    rbp,rsp
ffff80000081126c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081126c <fat32_write_superblock+0x8>
ffff800000811273:	49 bb c4 c7 10 00 00 	movabs r11,0x10c7c4
ffff80000081127a:	00 00 00 
ffff80000081127d:	4c 01 d8             	add    rax,r11
ffff800000811280:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811284:	90                   	nop
ffff800000811285:	5d                   	pop    rbp
ffff800000811286:	c3                   	ret    

ffff800000811287 <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:709

void fat32_put_superblock(struct super_block * sb)
{
ffff800000811287:	f3 0f 1e fa          	endbr64 
ffff80000081128b:	55                   	push   rbp
ffff80000081128c:	48 89 e5             	mov    rbp,rsp
ffff80000081128f:	41 57                	push   r15
ffff800000811291:	53                   	push   rbx
ffff800000811292:	48 83 ec 10          	sub    rsp,0x10
ffff800000811296:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811296 <fat32_put_superblock+0xf>
ffff80000081129d:	49 bb 9a c7 10 00 00 	movabs r11,0x10c79a
ffff8000008112a4:	00 00 00 
ffff8000008112a7:	4c 01 db             	add    rbx,r11
ffff8000008112aa:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:710
    kmfree(sb->private_sb_info);
ffff8000008112ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008112b2:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008112b6:	48 89 c7             	mov    rdi,rax
ffff8000008112b9:	49 89 df             	mov    r15,rbx
ffff8000008112bc:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff8000008112c3:	ff ff ff 
ffff8000008112c6:	48 01 d8             	add    rax,rbx
ffff8000008112c9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:711
    kmfree(sb->root->dir_inode->private_index_info);
ffff8000008112cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008112cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008112d2:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008112d6:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008112da:	48 89 c7             	mov    rdi,rax
ffff8000008112dd:	49 89 df             	mov    r15,rbx
ffff8000008112e0:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff8000008112e7:	ff ff ff 
ffff8000008112ea:	48 01 d8             	add    rax,rbx
ffff8000008112ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:712
    kmfree(sb->root->dir_inode);
ffff8000008112ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008112f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008112f6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008112fa:	48 89 c7             	mov    rdi,rax
ffff8000008112fd:	49 89 df             	mov    r15,rbx
ffff800000811300:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000811307:	ff ff ff 
ffff80000081130a:	48 01 d8             	add    rax,rbx
ffff80000081130d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:713
    kmfree(sb->root);
ffff80000081130f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811313:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811316:	48 89 c7             	mov    rdi,rax
ffff800000811319:	49 89 df             	mov    r15,rbx
ffff80000081131c:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000811323:	ff ff ff 
ffff800000811326:	48 01 d8             	add    rax,rbx
ffff800000811329:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714
    kmfree(sb);
ffff80000081132b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081132f:	48 89 c7             	mov    rdi,rax
ffff800000811332:	49 89 df             	mov    r15,rbx
ffff800000811335:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff80000081133c:	ff ff ff 
ffff80000081133f:	48 01 d8             	add    rax,rbx
ffff800000811342:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
}
ffff800000811344:	90                   	nop
ffff800000811345:	48 83 c4 10          	add    rsp,0x10
ffff800000811349:	5b                   	pop    rbx
ffff80000081134a:	41 5f                	pop    r15
ffff80000081134c:	5d                   	pop    rbp
ffff80000081134d:	c3                   	ret    

ffff80000081134e <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:718

void fat32_write_inode(struct index_node * inode)
{
ffff80000081134e:	f3 0f 1e fa          	endbr64 
ffff800000811352:	55                   	push   rbp
ffff800000811353:	48 89 e5             	mov    rbp,rsp
ffff800000811356:	41 57                	push   r15
ffff800000811358:	53                   	push   rbx
ffff800000811359:	48 83 ec 40          	sub    rsp,0x40
ffff80000081135d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081135d <fat32_write_inode+0xf>
ffff800000811364:	49 bb d3 c6 10 00 00 	movabs r11,0x10c6d3
ffff80000081136b:	00 00 00 
ffff80000081136e:	4c 01 db             	add    rbx,r11
ffff800000811371:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719
	struct FAT32_Directory * fdentry = NULL;
ffff800000811375:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000081137c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:720
	struct FAT32_Directory * buf = NULL;
ffff80000081137d:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000811384:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:721
	struct FAT32_inode_info * finode = inode->private_index_info;
ffff800000811385:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811389:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000081138d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:722
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
ffff800000811391:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811395:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811399:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081139d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723
	unsigned long sector = 0;
ffff8000008113a1:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008113a8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:725

	if(finode->dentry_location == 0)
ffff8000008113a9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008113ad:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008113b1:	48 85 c0             	test   rax,rax
ffff8000008113b4:	75 2d                	jne    ffff8000008113e3 <fat32_write_inode+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:727
	{
		printf("FS ERROR:write root inode!\n");	
ffff8000008113b6:	48 b8 04 dc ff ff ff 	movabs rax,0xffffffffffffdc04
ffff8000008113bd:	ff ff ff 
ffff8000008113c0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008113c4:	48 89 c7             	mov    rdi,rax
ffff8000008113c7:	49 89 df             	mov    r15,rbx
ffff8000008113ca:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008113cf:	48 ba c3 3c ee ff ff 	movabs rdx,0xffffffffffee3cc3
ffff8000008113d6:	ff ff ff 
ffff8000008113d9:	48 01 da             	add    rdx,rbx
ffff8000008113dc:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:728
		return ;
ffff8000008113de:	e9 85 01 00 00       	jmp    ffff800000811568 <fat32_write_inode+0x21a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:731
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
ffff8000008113e3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008113e7:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff8000008113eb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008113ef:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008113f3:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff8000008113f7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008113fb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008113ff:	48 0f af c2          	imul   rax,rdx
ffff800000811403:	48 01 c8             	add    rax,rcx
ffff800000811406:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
	buf = (struct FAT32_Directory *) kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff80000081140a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081140e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811412:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000811418:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000081141f:	48 85 c0             	test   rax,rax
ffff800000811422:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000811426:	48 c1 f8 0c          	sar    rax,0xc
ffff80000081142a:	89 c6                	mov    esi,eax
ffff80000081142c:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811431:	49 89 df             	mov    r15,rbx
ffff800000811434:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff80000081143b:	ff ff ff 
ffff80000081143e:	48 01 d8             	add    rax,rbx
ffff800000811441:	ff d0                	call   rax
ffff800000811443:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:733
	memset(buf,0,fsbi->bytes_per_cluster);
ffff800000811447:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081144b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081144f:	89 c2                	mov    edx,eax
ffff800000811451:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811455:	be 00 00 00 00       	mov    esi,0x0
ffff80000081145a:	48 89 c7             	mov    rdi,rax
ffff80000081145d:	49 89 df             	mov    r15,rbx
ffff800000811460:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff800000811467:	ff ff ff 
ffff80000081146a:	48 01 d8             	add    rax,rbx
ffff80000081146d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:734
	blkdev_read(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff80000081146f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811473:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811477:	48 c1 e0 09          	shl    rax,0x9
ffff80000081147b:	48 89 c7             	mov    rdi,rax
ffff80000081147e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811482:	c1 e0 09             	shl    eax,0x9
ffff800000811485:	89 c6                	mov    esi,eax
ffff800000811487:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081148b:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000081148f:	0f b7 c0             	movzx  eax,ax
ffff800000811492:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000811496:	48 89 d1             	mov    rcx,rdx
ffff800000811499:	48 89 fa             	mov    rdx,rdi
ffff80000081149c:	89 c7                	mov    edi,eax
ffff80000081149e:	49 89 df             	mov    r15,rbx
ffff8000008114a1:	48 b8 04 00 ef ff ff 	movabs rax,0xffffffffffef0004
ffff8000008114a8:	ff ff ff 
ffff8000008114ab:	48 01 d8             	add    rax,rbx
ffff8000008114ae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:735
    fdentry = buf+finode->dentry_position;
ffff8000008114b0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008114b4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008114b8:	48 c1 e0 05          	shl    rax,0x5
ffff8000008114bc:	48 89 c2             	mov    rdx,rax
ffff8000008114bf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008114c3:	48 01 d0             	add    rax,rdx
ffff8000008114c6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:738

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
ffff8000008114ca:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008114ce:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008114d1:	89 c2                	mov    edx,eax
ffff8000008114d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008114d7:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
ffff8000008114da:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008114de:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008114e1:	89 c2                	mov    edx,eax
ffff8000008114e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008114e7:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
ffff8000008114eb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008114ef:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008114f3:	66 25 00 f0          	and    ax,0xf000
ffff8000008114f7:	89 c2                	mov    edx,eax
ffff8000008114f9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008114fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811500:	48 c1 e8 10          	shr    rax,0x10
ffff800000811504:	09 c2                	or     edx,eax
ffff800000811506:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081150a:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:742
	
	blkdev_write(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff80000081150e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811512:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811516:	48 c1 e0 09          	shl    rax,0x9
ffff80000081151a:	48 89 c7             	mov    rdi,rax
ffff80000081151d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811521:	c1 e0 09             	shl    eax,0x9
ffff800000811524:	89 c6                	mov    esi,eax
ffff800000811526:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081152a:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000081152e:	0f b7 c0             	movzx  eax,ax
ffff800000811531:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000811535:	48 89 d1             	mov    rcx,rdx
ffff800000811538:	48 89 fa             	mov    rdx,rdi
ffff80000081153b:	89 c7                	mov    edi,eax
ffff80000081153d:	49 89 df             	mov    r15,rbx
ffff800000811540:	48 b8 6d 01 ef ff ff 	movabs rax,0xffffffffffef016d
ffff800000811547:	ff ff ff 
ffff80000081154a:	48 01 d8             	add    rax,rbx
ffff80000081154d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743
    kmfree(buf);
ffff80000081154f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811553:	48 89 c7             	mov    rdi,rax
ffff800000811556:	49 89 df             	mov    r15,rbx
ffff800000811559:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000811560:	ff ff ff 
ffff800000811563:	48 01 d8             	add    rax,rbx
ffff800000811566:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
}
ffff800000811568:	48 83 c4 40          	add    rsp,0x40
ffff80000081156c:	5b                   	pop    rbx
ffff80000081156d:	41 5f                	pop    r15
ffff80000081156f:	5d                   	pop    rbp
ffff800000811570:	c3                   	ret    

ffff800000811571 <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:755

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff800000811571:	f3 0f 1e fa          	endbr64 
ffff800000811575:	55                   	push   rbp
ffff800000811576:	48 89 e5             	mov    rbp,rsp
ffff800000811579:	41 57                	push   r15
ffff80000081157b:	53                   	push   rbx
ffff80000081157c:	48 83 ec 40          	sub    rsp,0x40
ffff800000811580:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811580 <fat32_read_superblock+0xf>
ffff800000811587:	49 bb b0 c4 10 00 00 	movabs r11,0x10c4b0
ffff80000081158e:	00 00 00 
ffff800000811591:	4c 01 db             	add    rbx,r11
ffff800000811594:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000811598:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:756
	struct super_block * sbp = NULL;
ffff80000081159c:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008115a3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:757
	struct FAT32_inode_info * finode = NULL;
ffff8000008115a4:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008115ab:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:758
	struct FAT32_BootSector * fbs = NULL;
ffff8000008115ac:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff8000008115b3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:759
	struct FAT32_sb_info * fsbi = NULL;
ffff8000008115b4:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008115bb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:762

	////super block
	sbp = (struct super_block *) kmallocat(0,TO_MPGN(sizeof(struct super_block)));
ffff8000008115bc:	be 01 00 00 00       	mov    esi,0x1
ffff8000008115c1:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008115c6:	49 89 df             	mov    r15,rbx
ffff8000008115c9:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff8000008115d0:	ff ff ff 
ffff8000008115d3:	48 01 d8             	add    rax,rbx
ffff8000008115d6:	ff d0                	call   rax
ffff8000008115d8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763
	memset(sbp,0,sizeof(struct super_block));
ffff8000008115dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008115e0:	ba 28 00 00 00       	mov    edx,0x28
ffff8000008115e5:	be 00 00 00 00       	mov    esi,0x0
ffff8000008115ea:	48 89 c7             	mov    rdi,rax
ffff8000008115ed:	49 89 df             	mov    r15,rbx
ffff8000008115f0:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff8000008115f7:	ff ff ff 
ffff8000008115fa:	48 01 d8             	add    rax,rbx
ffff8000008115fd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:765

	sbp->sb_ops = &FAT32_sb_ops;
ffff8000008115ff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811603:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff80000081160a:	ff ff ff 
ffff80000081160d:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811611:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:766
	sbp->private_sb_info = (struct FAT32_sb_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_sb_info)));
ffff800000811615:	be 01 00 00 00       	mov    esi,0x1
ffff80000081161a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000081161f:	49 89 df             	mov    r15,rbx
ffff800000811622:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff800000811629:	ff ff ff 
ffff80000081162c:	48 01 d8             	add    rax,rbx
ffff80000081162f:	ff d0                	call   rax
ffff800000811631:	48 89 c2             	mov    rdx,rax
ffff800000811634:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811638:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:767
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
ffff80000081163c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811640:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811644:	ba 60 00 00 00       	mov    edx,0x60
ffff800000811649:	be 00 00 00 00       	mov    esi,0x0
ffff80000081164e:	48 89 c7             	mov    rdi,rax
ffff800000811651:	49 89 df             	mov    r15,rbx
ffff800000811654:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff80000081165b:	ff ff ff 
ffff80000081165e:	48 01 d8             	add    rax,rbx
ffff800000811661:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:770

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
ffff800000811663:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811667:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771
 	fsbi = sbp->private_sb_info;
ffff80000081166b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081166f:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811673:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
	fsbi->start_sector = DPTE->start_LBA;
ffff800000811677:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081167b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081167e:	89 c2                	mov    edx,eax
ffff800000811680:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811684:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:773
	fsbi->sector_count = DPTE->sectors_limit;
ffff800000811687:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081168b:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000081168e:	89 c2                	mov    edx,eax
ffff800000811690:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811694:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:774
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
ffff800000811698:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081169c:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff8000008116a0:	0f b6 d0             	movzx  edx,al
ffff8000008116a3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008116a7:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:775
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
ffff8000008116ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008116af:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff8000008116b3:	0f b6 d0             	movzx  edx,al
ffff8000008116b6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008116ba:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff8000008116be:	0f b7 c0             	movzx  eax,ax
ffff8000008116c1:	0f af c2             	imul   eax,edx
ffff8000008116c4:	48 63 d0             	movsxd rdx,eax
ffff8000008116c7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008116cb:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
ffff8000008116cf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008116d3:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff8000008116d7:	0f b7 d0             	movzx  edx,ax
ffff8000008116da:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008116de:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
ffff8000008116e2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008116e6:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff8000008116e9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008116ed:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff8000008116f1:	0f b7 c0             	movzx  eax,ax
ffff8000008116f4:	8d 0c 02             	lea    ecx,[rdx+rax*1]
ffff8000008116f7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008116fb:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff8000008116fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811702:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000811706:	0f b6 c0             	movzx  eax,al
ffff800000811709:	0f af c2             	imul   eax,edx
ffff80000081170c:	01 c8                	add    eax,ecx
ffff80000081170e:	89 c2                	mov    edx,eax
ffff800000811710:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811714:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
ffff800000811718:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081171c:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff80000081171f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811723:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff800000811727:	0f b7 c0             	movzx  eax,ax
ffff80000081172a:	01 d0                	add    eax,edx
ffff80000081172c:	89 c2                	mov    edx,eax
ffff80000081172e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811732:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
ffff800000811736:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081173a:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000081173d:	89 c2                	mov    edx,eax
ffff80000081173f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811743:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->NumFATs = fbs->BPB_NumFATs;
ffff800000811747:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081174b:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff80000081174f:	0f b6 d0             	movzx  edx,al
ffff800000811752:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811756:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
ffff80000081175a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081175e:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811762:	0f b7 d0             	movzx  edx,ax
ffff800000811765:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811769:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
ffff80000081176d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811771:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000811775:	0f b7 d0             	movzx  edx,ax
ffff800000811778:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081177c:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:784
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
ffff800000811780:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811784:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
ffff800000811787:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081178b:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff80000081178f:	0f b7 d0             	movzx  edx,ax
ffff800000811792:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811796:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff80000081179a:	0f b7 c0             	movzx  eax,ax
ffff80000081179d:	89 c6                	mov    esi,eax
ffff80000081179f:	48 b8 20 dc ff ff ff 	movabs rax,0xffffffffffffdc20
ffff8000008117a6:	ff ff ff 
ffff8000008117a9:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008117ad:	48 89 c7             	mov    rdi,rax
ffff8000008117b0:	49 89 df             	mov    r15,rbx
ffff8000008117b3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008117b8:	49 b8 c3 3c ee ff ff 	movabs r8,0xffffffffffee3cc3
ffff8000008117bf:	ff ff ff 
ffff8000008117c2:	49 01 d8             	add    r8,rbx
ffff8000008117c5:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:787
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_FSInfo)));
ffff8000008117c8:	be 01 00 00 00       	mov    esi,0x1
ffff8000008117cd:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008117d2:	49 89 df             	mov    r15,rbx
ffff8000008117d5:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff8000008117dc:	ff ff ff 
ffff8000008117df:	48 01 d8             	add    rax,rbx
ffff8000008117e2:	ff d0                	call   rax
ffff8000008117e4:	48 89 c2             	mov    rdx,rax
ffff8000008117e7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117eb:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:788
	memset(fsbi->fat_fsinfo,0,512);
ffff8000008117ef:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117f3:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff8000008117f7:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008117fc:	be 00 00 00 00       	mov    esi,0x0
ffff800000811801:	48 89 c7             	mov    rdi,rax
ffff800000811804:	49 89 df             	mov    r15,rbx
ffff800000811807:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff80000081180e:	ff ff ff 
ffff800000811811:	48 01 d8             	add    rax,rbx
ffff800000811814:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:789
	blkdev_read(root_sb->dev,(DPTE->start_LBA + fbs->BPB_FSInfo)*SECTOR_SIZE,SECTOR_SIZE,(unsigned char *)fsbi->fat_fsinfo);
ffff800000811816:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081181a:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff80000081181e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811822:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff800000811825:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811829:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff80000081182d:	0f b7 c0             	movzx  eax,ax
ffff800000811830:	01 c8                	add    eax,ecx
ffff800000811832:	c1 e0 09             	shl    eax,0x9
ffff800000811835:	89 c6                	mov    esi,eax
ffff800000811837:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000081183e:	ff ff ff 
ffff800000811841:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811845:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811848:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000081184c:	0f b7 c0             	movzx  eax,ax
ffff80000081184f:	48 89 d1             	mov    rcx,rdx
ffff800000811852:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811857:	89 c7                	mov    edi,eax
ffff800000811859:	49 89 df             	mov    r15,rbx
ffff80000081185c:	48 b8 04 00 ef ff ff 	movabs rax,0xffffffffffef0004
ffff800000811863:	ff ff ff 
ffff800000811866:	48 01 d8             	add    rax,rbx
ffff800000811869:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:790
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
ffff80000081186b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081186f:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811873:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
ffff800000811879:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081187d:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811881:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
ffff800000811887:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081188b:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000081188f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811891:	89 c6                	mov    esi,eax
ffff800000811893:	48 b8 68 dc ff ff ff 	movabs rax,0xffffffffffffdc68
ffff80000081189a:	ff ff ff 
ffff80000081189d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008118a1:	48 89 c7             	mov    rdi,rax
ffff8000008118a4:	49 89 df             	mov    r15,rbx
ffff8000008118a7:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008118ac:	49 b8 c3 3c ee ff ff 	movabs r8,0xffffffffffee3cc3
ffff8000008118b3:	ff ff ff 
ffff8000008118b6:	49 01 d8             	add    r8,rbx
ffff8000008118b9:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:793
	
	////directory entry
	sbp->root = (struct dir_entry *) kmallocat(0,TO_MPGN(sizeof(struct dir_entry)));
ffff8000008118bc:	be 01 00 00 00       	mov    esi,0x1
ffff8000008118c1:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008118c6:	49 89 df             	mov    r15,rbx
ffff8000008118c9:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff8000008118d0:	ff ff ff 
ffff8000008118d3:	48 01 d8             	add    rax,rbx
ffff8000008118d6:	ff d0                	call   rax
ffff8000008118d8:	48 89 c2             	mov    rdx,rax
ffff8000008118db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008118df:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	memset(sbp->root,0,sizeof(struct dir_entry));
ffff8000008118e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008118e6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008118e9:	ba 60 00 00 00       	mov    edx,0x60
ffff8000008118ee:	be 00 00 00 00       	mov    esi,0x0
ffff8000008118f3:	48 89 c7             	mov    rdi,rax
ffff8000008118f6:	49 89 df             	mov    r15,rbx
ffff8000008118f9:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff800000811900:	ff ff ff 
ffff800000811903:	48 01 d8             	add    rax,rbx
ffff800000811906:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:796

	list_init(&sbp->root->child_node);
ffff800000811908:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081190c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081190f:	48 83 c0 10          	add    rax,0x10
ffff800000811913:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff800000811917:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081191b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff800000811922:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811926:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000081192d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000081192e:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:797
	list_init(&sbp->root->subdirs_list);
ffff80000081192f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811933:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811936:	48 83 c0 28          	add    rax,0x28
ffff80000081193a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000081193e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811942:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff800000811949:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081194d:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811954:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff800000811955:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:798
	sbp->root->parent = sbp->root;
ffff800000811956:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081195a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081195d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000811961:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000811964:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:799
	sbp->root->dir_ops = &FAT32_dentry_ops;
ffff800000811968:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081196c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081196f:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff800000811976:	ff ff ff 
ffff800000811979:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000081197d:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:800
	sbp->root->name = (char *) kmallocat(0,TO_MPGN(2));
ffff800000811981:	be 01 00 00 00       	mov    esi,0x1
ffff800000811986:	bf 00 00 00 00       	mov    edi,0x0
ffff80000081198b:	49 89 df             	mov    r15,rbx
ffff80000081198e:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff800000811995:	ff ff ff 
ffff800000811998:	48 01 d8             	add    rax,rbx
ffff80000081199b:	ff d0                	call   rax
ffff80000081199d:	48 89 c2             	mov    rdx,rax
ffff8000008119a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119a7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801
	sbp->root->name[0] = '/';
ffff8000008119aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119b4:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:802
	sbp->root->name_length = 1;
ffff8000008119b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119be:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:805

	////index node
	sbp->root->dir_inode = (struct index_node *) kmallocat(0,TO_MPGN(sizeof(struct index_node)));
ffff8000008119c5:	be 01 00 00 00       	mov    esi,0x1
ffff8000008119ca:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008119cf:	49 89 df             	mov    r15,rbx
ffff8000008119d2:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff8000008119d9:	ff ff ff 
ffff8000008119dc:	48 01 d8             	add    rax,rbx
ffff8000008119df:	ff d0                	call   rax
ffff8000008119e1:	48 89 c2             	mov    rdx,rax
ffff8000008119e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119e8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119eb:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
ffff8000008119ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119f6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008119fa:	ba 40 00 00 00       	mov    edx,0x40
ffff8000008119ff:	be 00 00 00 00       	mov    esi,0x0
ffff800000811a04:	48 89 c7             	mov    rdi,rax
ffff800000811a07:	49 89 df             	mov    r15,rbx
ffff800000811a0a:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff800000811a11:	ff ff ff 
ffff800000811a14:	48 01 d8             	add    rax,rbx
ffff800000811a17:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
ffff800000811a19:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a1d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a20:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811a24:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff800000811a2b:	ff ff ff 
ffff800000811a2e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811a32:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:808
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
ffff800000811a36:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a3a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a3d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811a41:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000811a48:	ff ff ff 
ffff800000811a4b:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811a4f:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:809
	sbp->root->dir_inode->file_size = 0;
ffff800000811a53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a57:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a5a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811a5e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:810
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000811a65:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a69:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a6c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811a70:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811a73:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811a77:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811a7b:	48 01 d0             	add    rax,rdx
ffff800000811a7e:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000811a82:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811a86:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811a8a:	48 89 c6             	mov    rsi,rax
ffff800000811a8d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a91:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a94:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffff800000811a98:	48 89 d0             	mov    rax,rdx
ffff800000811a9b:	ba 00 00 00 00       	mov    edx,0x0
ffff800000811aa0:	48 f7 f6             	div    rsi
ffff800000811aa3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:811
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
ffff800000811aa7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811aab:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811aae:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811ab2:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff800000811ab9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812
	sbp->root->dir_inode->sb = sbp;
ffff800000811aba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811abe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ac1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811ac5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000811ac9:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:815

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_inode_info)));
ffff800000811acd:	be 01 00 00 00       	mov    esi,0x1
ffff800000811ad2:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811ad7:	49 89 df             	mov    r15,rbx
ffff800000811ada:	48 b8 40 46 ee ff ff 	movabs rax,0xffffffffffee4640
ffff800000811ae1:	ff ff ff 
ffff800000811ae4:	48 01 d8             	add    rax,rbx
ffff800000811ae7:	ff d0                	call   rax
ffff800000811ae9:	48 89 c2             	mov    rdx,rax
ffff800000811aec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811af0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811af3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811af7:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000811afb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811aff:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b02:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811b06:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000811b0a:	ba 20 00 00 00       	mov    edx,0x20
ffff800000811b0f:	be 00 00 00 00       	mov    esi,0x0
ffff800000811b14:	48 89 c7             	mov    rdi,rax
ffff800000811b17:	49 89 df             	mov    r15,rbx
ffff800000811b1a:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff800000811b21:	ff ff ff 
ffff800000811b24:	48 01 d8             	add    rax,rbx
ffff800000811b27:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
ffff800000811b29:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b2d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b30:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811b34:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000811b38:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:818
	finode->first_cluster = fbs->BPB_RootClus;
ffff800000811b3c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811b40:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff800000811b43:	89 c2                	mov    edx,eax
ffff800000811b45:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b49:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:819
	finode->dentry_location = 0;
ffff800000811b4c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b50:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff800000811b57:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:820
	finode->dentry_position = 0; 
ffff800000811b58:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b5c:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811b63:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:821
	finode->create_date = 0;
ffff800000811b64:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b68:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822
	finode->create_time = 0;
ffff800000811b6e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b72:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	finode->write_date = 0;
ffff800000811b78:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b7c:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode->write_time = 0;
ffff800000811b82:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b86:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:826

	return sbp;
ffff800000811b8c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827
}
ffff800000811b90:	48 83 c4 40          	add    rsp,0x40
ffff800000811b94:	5b                   	pop    rbx
ffff800000811b95:	41 5f                	pop    r15
ffff800000811b97:	5d                   	pop    rbp
ffff800000811b98:	c3                   	ret    

ffff800000811b99 <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:839
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};

void DISK1_FAT32_FS_init()
{
ffff800000811b99:	f3 0f 1e fa          	endbr64 
ffff800000811b9d:	55                   	push   rbp
ffff800000811b9e:	48 89 e5             	mov    rbp,rsp
ffff800000811ba1:	41 57                	push   r15
ffff800000811ba3:	53                   	push   rbx
ffff800000811ba4:	48 81 ec 10 04 00 00 	sub    rsp,0x410
ffff800000811bab:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811bab <DISK1_FAT32_FS_init+0x12>
ffff800000811bb2:	49 bb 85 be 10 00 00 	movabs r11,0x10be85
ffff800000811bb9:	00 00 00 
ffff800000811bbc:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:842
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
ffff800000811bbf:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000811bc6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:843
	struct Disk_Partition_Table DPT = {0};
ffff800000811bc7:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000811bce:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811bd3:	b9 40 00 00 00       	mov    ecx,0x40
ffff800000811bd8:	48 89 d7             	mov    rdi,rdx
ffff800000811bdb:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:845

	register_filesystem(&FAT32_fs_type);
ffff800000811bde:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000811be5:	ff ff ff 
ffff800000811be8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811bec:	48 89 c7             	mov    rdi,rax
ffff800000811bef:	49 89 df             	mov    r15,rbx
ffff800000811bf2:	48 b8 eb d7 ee ff ff 	movabs rax,0xffffffffffeed7eb
ffff800000811bf9:	ff ff ff 
ffff800000811bfc:	48 01 d8             	add    rax,rbx
ffff800000811bff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:847
	
	memset(buf,0,512);
ffff800000811c01:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811c08:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811c0d:	be 00 00 00 00       	mov    esi,0x0
ffff800000811c12:	48 89 c7             	mov    rdi,rax
ffff800000811c15:	49 89 df             	mov    r15,rbx
ffff800000811c18:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff800000811c1f:	ff ff ff 
ffff800000811c22:	48 01 d8             	add    rax,rbx
ffff800000811c25:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:849

	blkdev_read(root_sb->dev,0,512,buf);
ffff800000811c27:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000811c2e:	ff ff ff 
ffff800000811c31:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811c35:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811c38:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811c3c:	0f b7 c0             	movzx  eax,ax
ffff800000811c3f:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811c46:	48 89 d1             	mov    rcx,rdx
ffff800000811c49:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811c4e:	be 00 00 00 00       	mov    esi,0x0
ffff800000811c53:	89 c7                	mov    edi,eax
ffff800000811c55:	49 89 df             	mov    r15,rbx
ffff800000811c58:	48 b8 04 00 ef ff ff 	movabs rax,0xffffffffffef0004
ffff800000811c5f:	ff ff ff 
ffff800000811c62:	48 01 d8             	add    rax,rbx
ffff800000811c65:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:852
    // read_disk(DISK_MAJOR_MAJOR, 0, 1, buf);/*rint r= equest(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
    // chk_result(r);
    DPT = *(struct Disk_Partition_Table *)buf;
ffff800000811c67:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811c6e:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
ffff800000811c75:	48 89 d6             	mov    rsi,rdx
ffff800000811c78:	ba 40 00 00 00       	mov    edx,0x40
ffff800000811c7d:	48 89 c7             	mov    rdi,rax
ffff800000811c80:	48 89 d1             	mov    rcx,rdx
ffff800000811c83:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:853
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
ffff800000811c86:	0f b6 85 a2 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x25e]
ffff800000811c8d:	0f b6 d0             	movzx  edx,al
ffff800000811c90:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000811c96:	89 c6                	mov    esi,eax
ffff800000811c98:	48 b8 b0 dc ff ff ff 	movabs rax,0xffffffffffffdcb0
ffff800000811c9f:	ff ff ff 
ffff800000811ca2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811ca6:	48 89 c7             	mov    rdi,rax
ffff800000811ca9:	49 89 df             	mov    r15,rbx
ffff800000811cac:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811cb1:	48 b9 c3 3c ee ff ff 	movabs rcx,0xffffffffffee3cc3
ffff800000811cb8:	ff ff ff 
ffff800000811cbb:	48 01 d9             	add    rcx,rbx
ffff800000811cbe:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:855

	memset(buf,0,512);
ffff800000811cc0:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811cc7:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811ccc:	be 00 00 00 00       	mov    esi,0x0
ffff800000811cd1:	48 89 c7             	mov    rdi,rax
ffff800000811cd4:	49 89 df             	mov    r15,rbx
ffff800000811cd7:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff800000811cde:	ff ff ff 
ffff800000811ce1:	48 01 d8             	add    rax,rbx
ffff800000811ce4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:856
	blkdev_read(root_sb->dev,DPT.DPTE[0].start_LBA*512,512,buf);
ffff800000811ce6:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000811cec:	c1 e0 09             	shl    eax,0x9
ffff800000811cef:	89 c6                	mov    esi,eax
ffff800000811cf1:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000811cf8:	ff ff ff 
ffff800000811cfb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811cff:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811d02:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811d06:	0f b7 c0             	movzx  eax,ax
ffff800000811d09:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811d10:	48 89 d1             	mov    rcx,rdx
ffff800000811d13:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811d18:	89 c7                	mov    edi,eax
ffff800000811d1a:	49 89 df             	mov    r15,rbx
ffff800000811d1d:	48 b8 04 00 ef ff ff 	movabs rax,0xffffffffffef0004
ffff800000811d24:	ff ff ff 
ffff800000811d27:	48 01 d8             	add    rax,rbx
ffff800000811d2a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:859

    //挂载新文件系统到/mnt
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
ffff800000811d2c:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811d33:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000811d3a:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
ffff800000811d41:	48 89 c2             	mov    rdx,rax
ffff800000811d44:	48 89 ce             	mov    rsi,rcx
ffff800000811d47:	48 b8 aa dc ff ff ff 	movabs rax,0xffffffffffffdcaa
ffff800000811d4e:	ff ff ff 
ffff800000811d51:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811d55:	48 89 c7             	mov    rdi,rax
ffff800000811d58:	49 89 df             	mov    r15,rbx
ffff800000811d5b:	48 b8 06 d6 ee ff ff 	movabs rax,0xffffffffffeed606
ffff800000811d62:	ff ff ff 
ffff800000811d65:	48 01 d8             	add    rax,rbx
ffff800000811d68:	ff d0                	call   rax
ffff800000811d6a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:860
	mount_fs_on(dmnt,fat32_sb);//挂载到/mnt上
ffff800000811d6e:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000811d75:	ff ff ff 
ffff800000811d78:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811d7c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811d7f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000811d83:	48 89 d6             	mov    rsi,rdx
ffff800000811d86:	48 89 c7             	mov    rdi,rax
ffff800000811d89:	49 89 df             	mov    r15,rbx
ffff800000811d8c:	48 b8 b3 d6 ee ff ff 	movabs rax,0xffffffffffeed6b3
ffff800000811d93:	ff ff ff 
ffff800000811d96:	48 01 d8             	add    rax,rbx
ffff800000811d99:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:861
}
ffff800000811d9b:	90                   	nop
ffff800000811d9c:	48 81 c4 10 04 00 00 	add    rsp,0x410
ffff800000811da3:	5b                   	pop    rbx
ffff800000811da4:	41 5f                	pop    r15
ffff800000811da6:	5d                   	pop    rbp
ffff800000811da7:	c3                   	ret    

ffff800000811da8 <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
ffff800000811da8:	f3 0f 1e fa          	endbr64 
ffff800000811dac:	55                   	push   rbp
ffff800000811dad:	48 89 e5             	mov    rbp,rsp
ffff800000811db0:	41 57                	push   r15
ffff800000811db2:	53                   	push   rbx
ffff800000811db3:	48 83 ec 30          	sub    rsp,0x30
ffff800000811db7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811db7 <close_tty+0xf>
ffff800000811dbe:	49 bb 79 bc 10 00 00 	movabs r11,0x10bc79
ffff800000811dc5:	00 00 00 
ffff800000811dc8:	4c 01 db             	add    rbx,r11
ffff800000811dcb:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000811dcf:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000811dd3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811dd7:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811ddb:	48 83 c0 18          	add    rax,0x18
ffff800000811ddf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000811de3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811de7:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811deb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000811def:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811df3:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811df7:	48 83 c0 30          	add    rax,0x30
ffff800000811dfb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
ffff800000811dff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811e03:	48 89 c7             	mov    rdi,rax
ffff800000811e06:	49 89 df             	mov    r15,rbx
ffff800000811e09:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000811e10:	ff ff ff 
ffff800000811e13:	48 01 d8             	add    rax,rbx
ffff800000811e16:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
ffff800000811e18:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811e1c:	48 89 c7             	mov    rdi,rax
ffff800000811e1f:	49 89 df             	mov    r15,rbx
ffff800000811e22:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000811e29:	ff ff ff 
ffff800000811e2c:	48 01 d8             	add    rax,rbx
ffff800000811e2f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
ffff800000811e31:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e35:	48 89 c7             	mov    rdi,rax
ffff800000811e38:	49 89 df             	mov    r15,rbx
ffff800000811e3b:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000811e42:	ff ff ff 
ffff800000811e45:	48 01 d8             	add    rax,rbx
ffff800000811e48:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
ffff800000811e4a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811e4e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811e52:	48 89 c7             	mov    rdi,rax
ffff800000811e55:	49 89 df             	mov    r15,rbx
ffff800000811e58:	48 b8 b5 48 ee ff ff 	movabs rax,0xffffffffffee48b5
ffff800000811e5f:	ff ff ff 
ffff800000811e62:	48 01 d8             	add    rax,rbx
ffff800000811e65:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
ffff800000811e67:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
ffff800000811e6c:	48 83 c4 30          	add    rsp,0x30
ffff800000811e70:	5b                   	pop    rbx
ffff800000811e71:	41 5f                	pop    r15
ffff800000811e73:	5d                   	pop    rbp
ffff800000811e74:	c3                   	ret    

ffff800000811e75 <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
ffff800000811e75:	f3 0f 1e fa          	endbr64 
ffff800000811e79:	55                   	push   rbp
ffff800000811e7a:	48 89 e5             	mov    rbp,rsp
ffff800000811e7d:	41 57                	push   r15
ffff800000811e7f:	53                   	push   rbx
ffff800000811e80:	48 83 ec 20          	sub    rsp,0x20
ffff800000811e84:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811e84 <init_tty+0xf>
ffff800000811e8b:	49 bb ac bb 10 00 00 	movabs r11,0x10bbac
ffff800000811e92:	00 00 00 
ffff800000811e95:	4c 01 db             	add    rbx,r11
ffff800000811e98:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000811e9c:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc();
ffff800000811ea0:	49 89 df             	mov    r15,rbx
ffff800000811ea3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ea8:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000811eaf:	ff ff ff 
ffff800000811eb2:	48 01 da             	add    rdx,rbx
ffff800000811eb5:	ff d2                	call   rdx
ffff800000811eb7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc();
ffff800000811ebb:	49 89 df             	mov    r15,rbx
ffff800000811ebe:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ec3:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000811eca:	ff ff ff 
ffff800000811ecd:	48 01 da             	add    rdx,rbx
ffff800000811ed0:	ff d2                	call   rdx
ffff800000811ed2:	48 89 c2             	mov    rdx,rax
ffff800000811ed5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ed9:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc();
ffff800000811edd:	49 89 df             	mov    r15,rbx
ffff800000811ee0:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ee5:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000811eec:	ff ff ff 
ffff800000811eef:	48 01 da             	add    rdx,rbx
ffff800000811ef2:	ff d2                	call   rdx
ffff800000811ef4:	48 89 c2             	mov    rdx,rax
ffff800000811ef7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811efb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc();
ffff800000811efe:	49 89 df             	mov    r15,rbx
ffff800000811f01:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811f06:	48 ba 46 45 ee ff ff 	movabs rdx,0xffffffffffee4546
ffff800000811f0d:	ff ff ff 
ffff800000811f10:	48 01 da             	add    rdx,rbx
ffff800000811f13:	ff d2                	call   rdx
ffff800000811f15:	48 89 c2             	mov    rdx,rax
ffff800000811f18:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f1c:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
ffff800000811f20:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f24:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
ffff800000811f2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f2f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
ffff800000811f36:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f3a:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
ffff800000811f41:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f45:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
ffff800000811f4c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f50:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
ffff800000811f57:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f5b:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
ffff800000811f62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f66:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
ffff800000811f6d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f71:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
ffff800000811f78:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f7c:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
ffff800000811f83:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811f87:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000811f8e:	ff ff ff 
ffff800000811f91:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811f95:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
ffff800000811f99:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811f9d:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000811fa4:	ff ff ff 
ffff800000811fa7:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811fab:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
ffff800000811faf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811fb3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000811fb7:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
ffff800000811fbb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
ffff800000811fc0:	48 83 c4 20          	add    rsp,0x20
ffff800000811fc4:	5b                   	pop    rbx
ffff800000811fc5:	41 5f                	pop    r15
ffff800000811fc7:	5d                   	pop    rbp
ffff800000811fc8:	c3                   	ret    

ffff800000811fc9 <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000811fc9:	f3 0f 1e fa          	endbr64 
ffff800000811fcd:	55                   	push   rbp
ffff800000811fce:	48 89 e5             	mov    rbp,rsp
ffff800000811fd1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811fd1 <read_tty+0x8>
ffff800000811fd8:	49 bb 5f ba 10 00 00 	movabs r11,0x10ba5f
ffff800000811fdf:	00 00 00 
ffff800000811fe2:	4c 01 d8             	add    rax,r11
ffff800000811fe5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000811fe9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000811fed:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000811ff1:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000811ff5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ff9:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811ffd:	48 83 c0 18          	add    rax,0x18
ffff800000812001:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
ffff800000812005:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff80000081200c:	eb 6e                	jmp    ffff80000081207c <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
ffff80000081200e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812012:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000812015:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812019:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000081201c:	39 c2                	cmp    edx,eax
ffff80000081201e:	75 0b                	jne    ffff80000081202b <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
ffff800000812020:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812024:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
ffff80000081202b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081202f:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000812032:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812036:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812039:	39 c2                	cmp    edx,eax
ffff80000081203b:	75 02                	jne    ffff80000081203f <read_tty+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
ffff80000081203d:	eb 3d                	jmp    ffff80000081207c <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
ffff80000081203f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812043:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812046:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081204a:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000081204d:	48 98                	cdqe   
ffff80000081204f:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff800000812053:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812056:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812059:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff80000081205c:	48 63 d0             	movsxd rdx,eax
ffff80000081205f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812063:	48 01 c2             	add    rdx,rax
ffff800000812066:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000812069:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
ffff80000081206b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081206f:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000812072:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812075:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812079:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff80000081207c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081207f:	48 98                	cdqe   
ffff800000812081:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff800000812085:	77 87                	ja     ffff80000081200e <read_tty+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
ffff800000812087:	90                   	nop
ffff800000812088:	5d                   	pop    rbp
ffff800000812089:	c3                   	ret    

ffff80000081208a <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000081208a:	f3 0f 1e fa          	endbr64 
ffff80000081208e:	55                   	push   rbp
ffff80000081208f:	48 89 e5             	mov    rbp,rsp
ffff800000812092:	41 57                	push   r15
ffff800000812094:	48 83 ec 48          	sub    rsp,0x48
ffff800000812098:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812098 <write_tty+0xe>
ffff80000081209f:	49 bb 98 b9 10 00 00 	movabs r11,0x10b998
ffff8000008120a6:	00 00 00 
ffff8000008120a9:	4c 01 d8             	add    rax,r11
ffff8000008120ac:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008120b0:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff8000008120b4:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff8000008120b8:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
ffff8000008120bc:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008120c0:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008120c4:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
ffff8000008120c8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
ffff8000008120cf:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008120d3:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008120d6:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff8000008120d9:	eb 5b                	jmp    ffff800000812136 <write_tty+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
ffff8000008120db:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008120df:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008120e2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008120e6:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff8000008120e9:	39 d1                	cmp    ecx,edx
ffff8000008120eb:	75 0b                	jne    ffff8000008120f8 <write_tty+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
ffff8000008120ed:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008120f1:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
ffff8000008120f8:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008120fb:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008120fe:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff800000812101:	48 63 ca             	movsxd rcx,edx
ffff800000812104:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000812108:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000081210c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812110:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812113:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812117:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081211a:	48 63 d2             	movsxd rdx,edx
ffff80000081211d:	48 01 d1             	add    rcx,rdx
ffff800000812120:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff800000812123:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
ffff800000812125:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812129:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081212c:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081212f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812133:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff800000812136:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812139:	48 63 d2             	movsxd rdx,edx
ffff80000081213c:	48 39 55 b8          	cmp    QWORD PTR [rbp-0x48],rdx
ffff800000812140:	77 99                	ja     ffff8000008120db <write_tty+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff800000812142:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812146:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812149:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000081214c:	48 63 d2             	movsxd rdx,edx
ffff80000081214f:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000812153:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000812157:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffff80000081215b:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000812160:	49 89 c7             	mov    r15,rax
ffff800000812163:	49 b8 89 d0 ee ff ff 	movabs r8,0xffffffffffeed089
ffff80000081216a:	ff ff ff 
ffff80000081216d:	49 01 c0             	add    r8,rax
ffff800000812170:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
ffff800000812173:	90                   	nop
ffff800000812174:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000812178:	c9                   	leave  
ffff800000812179:	c3                   	ret    

ffff80000081217a <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
ffff80000081217a:	f3 0f 1e fa          	endbr64 
ffff80000081217e:	55                   	push   rbp
ffff80000081217f:	48 89 e5             	mov    rbp,rsp
ffff800000812182:	41 57                	push   r15
ffff800000812184:	48 83 ec 58          	sub    rsp,0x58
ffff800000812188:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812188 <ioctl_tty+0xe>
ffff80000081218f:	49 bb a8 b8 10 00 00 	movabs r11,0x10b8a8
ffff800000812196:	00 00 00 
ffff800000812199:	4c 01 d8             	add    rax,r11
ffff80000081219c:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff8000008121a0:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff8000008121a4:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffff8000008121a8:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
ffff8000008121ac:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008121b0:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008121b4:	48 83 c2 30          	add    rdx,0x30
ffff8000008121b8:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008121bc:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008121c0:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008121c4:	48 83 c2 18          	add    rdx,0x18
ffff8000008121c8:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
ffff8000008121cc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
ffff8000008121d3:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008121d7:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008121da:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
ffff8000008121de:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008121e2:	48 83 c2 08          	add    rdx,0x8
ffff8000008121e6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008121e9:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
ffff8000008121ed:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121f1:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008121f4:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
ffff8000008121f7:	c7 45 c0 ff ff ff ff 	mov    DWORD PTR [rbp-0x40],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
ffff8000008121fe:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff800000812203:	0f 84 b8 01 00 00    	je     ffff8000008123c1 <ioctl_tty+0x247>
ffff800000812209:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff80000081220e:	0f 87 b8 01 00 00    	ja     ffff8000008123cc <ioctl_tty+0x252>
ffff800000812214:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff800000812219:	0f 84 0f 01 00 00    	je     ffff80000081232e <ioctl_tty+0x1b4>
ffff80000081221f:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff800000812224:	0f 87 a2 01 00 00    	ja     ffff8000008123cc <ioctl_tty+0x252>
ffff80000081222a:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000081222f:	74 6b                	je     ffff80000081229c <ioctl_tty+0x122>
ffff800000812231:	48 83 7d a8 01       	cmp    QWORD PTR [rbp-0x58],0x1
ffff800000812236:	0f 84 a2 00 00 00    	je     ffff8000008122de <ioctl_tty+0x164>
ffff80000081223c:	e9 8b 01 00 00       	jmp    ffff8000008123cc <ioctl_tty+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
ffff800000812241:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812245:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000812248:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081224c:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000081224f:	39 d1                	cmp    ecx,edx
ffff800000812251:	75 0b                	jne    ffff80000081225e <ioctl_tty+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
ffff800000812253:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812257:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
ffff80000081225e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812261:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000812264:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff800000812267:	48 63 ca             	movsxd rcx,edx
ffff80000081226a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000081226e:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000812272:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812276:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812279:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081227d:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812280:	48 63 d2             	movsxd rdx,edx
ffff800000812283:	48 01 d1             	add    rcx,rdx
ffff800000812286:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff800000812289:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
ffff80000081228b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081228f:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812292:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000812295:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812299:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
ffff80000081229c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081229f:	48 63 d2             	movsxd rdx,edx
ffff8000008122a2:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff8000008122a6:	77 99                	ja     ffff800000812241 <ioctl_tty+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff8000008122a8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008122ac:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008122af:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff8000008122b2:	48 63 d2             	movsxd rdx,edx
ffff8000008122b5:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008122b9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008122bd:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffff8000008122c1:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008122c6:	49 89 c7             	mov    r15,rax
ffff8000008122c9:	49 b8 89 d0 ee ff ff 	movabs r8,0xffffffffffeed089
ffff8000008122d0:	ff ff ff 
ffff8000008122d3:	49 01 c0             	add    r8,rax
ffff8000008122d6:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
ffff8000008122d9:	e9 f7 00 00 00       	jmp    ffff8000008123d5 <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
ffff8000008122de:	be c1 00 00 00       	mov    esi,0xc1
ffff8000008122e3:	48 ba ce dc ff ff ff 	movabs rdx,0xffffffffffffdcce
ffff8000008122ea:	ff ff ff 
ffff8000008122ed:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff8000008122f1:	48 89 d7             	mov    rdi,rdx
ffff8000008122f4:	49 89 c7             	mov    r15,rax
ffff8000008122f7:	48 ba 20 dd ee ff ff 	movabs rdx,0xffffffffffeedd20
ffff8000008122fe:	ff ff ff 
ffff800000812301:	48 01 c2             	add    rdx,rax
ffff800000812304:	ff d2                	call   rdx
ffff800000812306:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
ffff800000812309:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff80000081230d:	75 0c                	jne    ffff80000081231b <ioctl_tty+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
ffff80000081230f:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000812316:	e9 bf 00 00 00       	jmp    ffff8000008123da <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
ffff80000081231b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081231f:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812323:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000812326:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
ffff800000812329:	e9 a7 00 00 00       	jmp    ffff8000008123d5 <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
ffff80000081232e:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000812332:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff800000812336:	8b 52 48             	mov    edx,DWORD PTR [rdx+0x48]
ffff800000812339:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
ffff80000081233c:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000812340:	75 0c                	jne    ffff80000081234e <ioctl_tty+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
ffff800000812342:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000812349:	e9 8c 00 00 00       	jmp    ffff8000008123da <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
ffff80000081234e:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000812351:	89 d7                	mov    edi,edx
ffff800000812353:	49 89 c7             	mov    r15,rax
ffff800000812356:	48 ba 4a e3 ee ff ff 	movabs rdx,0xffffffffffeee34a
ffff80000081235d:	ff ff ff 
ffff800000812360:	48 01 c2             	add    rdx,rax
ffff800000812363:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
ffff800000812365:	eb 5a                	jmp    ffff8000008123c1 <ioctl_tty+0x247>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
ffff800000812367:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081236b:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff80000081236e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812372:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000812375:	39 c2                	cmp    edx,eax
ffff800000812377:	75 0b                	jne    ffff800000812384 <ioctl_tty+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
ffff800000812379:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081237d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
ffff800000812384:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812387:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081238a:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000081238d:	48 63 d0             	movsxd rdx,eax
ffff800000812390:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812394:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff800000812398:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081239c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081239f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008123a3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008123a6:	48 98                	cdqe   
ffff8000008123a8:	48 01 c2             	add    rdx,rax
ffff8000008123ab:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff8000008123ae:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
ffff8000008123b0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008123b4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008123b7:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008123ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008123be:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
ffff8000008123c1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008123c4:	48 98                	cdqe   
ffff8000008123c6:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff8000008123ca:	77 9b                	ja     ffff800000812367 <ioctl_tty+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
ffff8000008123cc:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008123d3:	eb 05                	jmp    ffff8000008123da <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
ffff8000008123d5:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
ffff8000008123da:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008123de:	c9                   	leave  
ffff8000008123df:	c3                   	ret    

ffff8000008123e0 <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
ffff8000008123e0:	f3 0f 1e fa          	endbr64 
ffff8000008123e4:	55                   	push   rbp
ffff8000008123e5:	48 89 e5             	mov    rbp,rsp
ffff8000008123e8:	41 57                	push   r15
ffff8000008123ea:	53                   	push   rbx
ffff8000008123eb:	48 83 ec 10          	sub    rsp,0x10
ffff8000008123ef:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008123ef <init_com+0xf>
ffff8000008123f6:	49 bb 41 b6 10 00 00 	movabs r11,0x10b641
ffff8000008123fd:	00 00 00 
ffff800000812400:	4c 01 db             	add    rbx,r11
ffff800000812403:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
ffff800000812406:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812409:	83 c0 01             	add    eax,0x1
ffff80000081240c:	0f b7 c0             	movzx  eax,ax
ffff80000081240f:	be 00 00 00 00       	mov    esi,0x0
ffff800000812414:	89 c7                	mov    edi,eax
ffff800000812416:	49 89 df             	mov    r15,rbx
ffff800000812419:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff800000812420:	ff ff ff 
ffff800000812423:	48 01 d8             	add    rax,rbx
ffff800000812426:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
ffff800000812428:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081242b:	83 c0 03             	add    eax,0x3
ffff80000081242e:	0f b7 c0             	movzx  eax,ax
ffff800000812431:	be 80 00 00 00       	mov    esi,0x80
ffff800000812436:	89 c7                	mov    edi,eax
ffff800000812438:	49 89 df             	mov    r15,rbx
ffff80000081243b:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff800000812442:	ff ff ff 
ffff800000812445:	48 01 d8             	add    rax,rbx
ffff800000812448:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
ffff80000081244a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081244d:	0f b7 c0             	movzx  eax,ax
ffff800000812450:	be 03 00 00 00       	mov    esi,0x3
ffff800000812455:	89 c7                	mov    edi,eax
ffff800000812457:	49 89 df             	mov    r15,rbx
ffff80000081245a:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff800000812461:	ff ff ff 
ffff800000812464:	48 01 d8             	add    rax,rbx
ffff800000812467:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
ffff800000812469:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081246c:	83 c0 01             	add    eax,0x1
ffff80000081246f:	0f b7 c0             	movzx  eax,ax
ffff800000812472:	be 00 00 00 00       	mov    esi,0x0
ffff800000812477:	89 c7                	mov    edi,eax
ffff800000812479:	49 89 df             	mov    r15,rbx
ffff80000081247c:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff800000812483:	ff ff ff 
ffff800000812486:	48 01 d8             	add    rax,rbx
ffff800000812489:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
ffff80000081248b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081248e:	83 c0 03             	add    eax,0x3
ffff800000812491:	0f b7 c0             	movzx  eax,ax
ffff800000812494:	be 03 00 00 00       	mov    esi,0x3
ffff800000812499:	89 c7                	mov    edi,eax
ffff80000081249b:	49 89 df             	mov    r15,rbx
ffff80000081249e:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff8000008124a5:	ff ff ff 
ffff8000008124a8:	48 01 d8             	add    rax,rbx
ffff8000008124ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
ffff8000008124ad:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008124b0:	83 c0 02             	add    eax,0x2
ffff8000008124b3:	0f b7 c0             	movzx  eax,ax
ffff8000008124b6:	be 87 00 00 00       	mov    esi,0x87
ffff8000008124bb:	89 c7                	mov    edi,eax
ffff8000008124bd:	49 89 df             	mov    r15,rbx
ffff8000008124c0:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff8000008124c7:	ff ff ff 
ffff8000008124ca:	48 01 d8             	add    rax,rbx
ffff8000008124cd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
ffff8000008124cf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008124d2:	83 c0 04             	add    eax,0x4
ffff8000008124d5:	0f b7 c0             	movzx  eax,ax
ffff8000008124d8:	be 0b 00 00 00       	mov    esi,0xb
ffff8000008124dd:	89 c7                	mov    edi,eax
ffff8000008124df:	49 89 df             	mov    r15,rbx
ffff8000008124e2:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff8000008124e9:	ff ff ff 
ffff8000008124ec:	48 01 d8             	add    rax,rbx
ffff8000008124ef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
ffff8000008124f1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008124f4:	83 c0 04             	add    eax,0x4
ffff8000008124f7:	0f b7 c0             	movzx  eax,ax
ffff8000008124fa:	be 0f 00 00 00       	mov    esi,0xf
ffff8000008124ff:	89 c7                	mov    edi,eax
ffff800000812501:	49 89 df             	mov    r15,rbx
ffff800000812504:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000081250b:	ff ff ff 
ffff80000081250e:	48 01 d8             	add    rax,rbx
ffff800000812511:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
ffff800000812513:	90                   	nop
ffff800000812514:	48 83 c4 10          	add    rsp,0x10
ffff800000812518:	5b                   	pop    rbx
ffff800000812519:	41 5f                	pop    r15
ffff80000081251b:	5d                   	pop    rbp
ffff80000081251c:	c3                   	ret    

ffff80000081251d <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
ffff80000081251d:	f3 0f 1e fa          	endbr64 
ffff800000812521:	55                   	push   rbp
ffff800000812522:	48 89 e5             	mov    rbp,rsp
ffff800000812525:	41 57                	push   r15
ffff800000812527:	53                   	push   rbx
ffff800000812528:	48 83 ec 20          	sub    rsp,0x20
ffff80000081252c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081252c <com_putchar+0xf>
ffff800000812533:	49 bb 04 b5 10 00 00 	movabs r11,0x10b504
ffff80000081253a:	00 00 00 
ffff80000081253d:	4c 01 db             	add    rbx,r11
ffff800000812540:	89 f8                	mov    eax,edi
ffff800000812542:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000812545:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
ffff800000812549:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000081254c:	83 c0 05             	add    eax,0x5
ffff80000081254f:	0f b6 c0             	movzx  eax,al
ffff800000812552:	89 c7                	mov    edi,eax
ffff800000812554:	49 89 df             	mov    r15,rbx
ffff800000812557:	48 b8 49 a1 ee ff ff 	movabs rax,0xffffffffffeea149
ffff80000081255e:	ff ff ff 
ffff800000812561:	48 01 d8             	add    rax,rbx
ffff800000812564:	ff d0                	call   rax
ffff800000812566:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
ffff800000812569:	80 65 ef 20          	and    BYTE PTR [rbp-0x11],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
ffff80000081256d:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000812571:	74 d6                	je     ffff800000812549 <com_putchar+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
ffff800000812573:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff800000812577:	0f b6 d0             	movzx  edx,al
ffff80000081257a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000081257d:	0f b7 c0             	movzx  eax,ax
ffff800000812580:	89 d6                	mov    esi,edx
ffff800000812582:	89 c7                	mov    edi,eax
ffff800000812584:	49 89 df             	mov    r15,rbx
ffff800000812587:	48 b8 30 a1 ee ff ff 	movabs rax,0xffffffffffeea130
ffff80000081258e:	ff ff ff 
ffff800000812591:	48 01 d8             	add    rax,rbx
ffff800000812594:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
ffff800000812596:	90                   	nop
ffff800000812597:	48 83 c4 20          	add    rsp,0x20
ffff80000081259b:	5b                   	pop    rbx
ffff80000081259c:	41 5f                	pop    r15
ffff80000081259e:	5d                   	pop    rbp
ffff80000081259f:	c3                   	ret    

ffff8000008125a0 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
ffff8000008125a0:	f3 0f 1e fa          	endbr64 
ffff8000008125a4:	55                   	push   rbp
ffff8000008125a5:	48 89 e5             	mov    rbp,rsp
ffff8000008125a8:	41 57                	push   r15
ffff8000008125aa:	53                   	push   rbx
ffff8000008125ab:	48 83 ec 10          	sub    rsp,0x10
ffff8000008125af:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008125af <com_puts+0xf>
ffff8000008125b6:	49 bb 81 b4 10 00 00 	movabs r11,0x10b481
ffff8000008125bd:	00 00 00 
ffff8000008125c0:	4c 01 db             	add    rbx,r11
ffff8000008125c3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008125c7:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
ffff8000008125ca:	eb 2a                	jmp    ffff8000008125f6 <com_puts+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
ffff8000008125cc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008125d0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008125d3:	66 98                	cbw    
ffff8000008125d5:	0f b7 c0             	movzx  eax,ax
ffff8000008125d8:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff8000008125db:	89 d6                	mov    esi,edx
ffff8000008125dd:	89 c7                	mov    edi,eax
ffff8000008125df:	49 89 df             	mov    r15,rbx
ffff8000008125e2:	48 b8 ed 4a ef ff ff 	movabs rax,0xffffffffffef4aed
ffff8000008125e9:	ff ff ff 
ffff8000008125ec:	48 01 d8             	add    rax,rbx
ffff8000008125ef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
ffff8000008125f1:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
ffff8000008125f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008125fa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008125fd:	84 c0                	test   al,al
ffff8000008125ff:	75 cb                	jne    ffff8000008125cc <com_puts+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
ffff800000812601:	90                   	nop
ffff800000812602:	90                   	nop
ffff800000812603:	48 83 c4 10          	add    rsp,0x10
ffff800000812607:	5b                   	pop    rbx
ffff800000812608:	41 5f                	pop    r15
ffff80000081260a:	5d                   	pop    rbp
ffff80000081260b:	c3                   	ret    

ffff80000081260c <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
ffff80000081260c:	f3 0f 1e fa          	endbr64 
ffff800000812610:	55                   	push   rbp
ffff800000812611:	48 89 e5             	mov    rbp,rsp
ffff800000812614:	41 57                	push   r15
ffff800000812616:	53                   	push   rbx
ffff800000812617:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff80000081261e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081261e <comprintf+0x12>
ffff800000812625:	49 bb 12 b4 10 00 00 	movabs r11,0x10b412
ffff80000081262c:	00 00 00 
ffff80000081262f:	4c 01 db             	add    rbx,r11
ffff800000812632:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
ffff800000812639:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000812640:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff800000812647:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff80000081264e:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff800000812655:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff80000081265c:	84 c0                	test   al,al
ffff80000081265e:	74 23                	je     ffff800000812683 <comprintf+0x77>
ffff800000812660:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff800000812667:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff80000081266b:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff80000081266f:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000812673:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff800000812677:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff80000081267b:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff80000081267f:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
ffff800000812683:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000081268a:	48 89 c7             	mov    rdi,rax
ffff80000081268d:	49 89 df             	mov    r15,rbx
ffff800000812690:	48 b8 4e 54 ef ff ff 	movabs rax,0xffffffffffef544e
ffff800000812697:	ff ff ff 
ffff80000081269a:	48 01 d8             	add    rax,rbx
ffff80000081269d:	ff d0                	call   rax
ffff80000081269f:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff8000008126a4:	0f 8f f6 03 00 00    	jg     ffff800000812aa0 <comprintf+0x494>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
ffff8000008126aa:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff8000008126b1:	ff ff ff 
ffff8000008126b4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008126b8:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
ffff8000008126bf:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008126c6:	ba 00 04 00 00       	mov    edx,0x400
ffff8000008126cb:	be 00 00 00 00       	mov    esi,0x0
ffff8000008126d0:	48 89 c7             	mov    rdi,rax
ffff8000008126d3:	49 89 df             	mov    r15,rbx
ffff8000008126d6:	48 b8 2c 51 ef ff ff 	movabs rax,0xffffffffffef512c
ffff8000008126dd:	ff ff ff 
ffff8000008126e0:	48 01 d8             	add    rax,rbx
ffff8000008126e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
ffff8000008126e5:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008126ec:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
ffff8000008126f3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008126fa:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
ffff800000812701:	c7 85 f0 fe ff ff 08 	mov    DWORD PTR [rbp-0x110],0x8
ffff800000812708:	00 00 00 
ffff80000081270b:	c7 85 f4 fe ff ff 30 	mov    DWORD PTR [rbp-0x10c],0x30
ffff800000812712:	00 00 00 
ffff800000812715:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000812719:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffff800000812720:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff800000812727:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
ffff80000081272e:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812735:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff80000081273c:	e9 2a 03 00 00       	jmp    ffff800000812a6b <comprintf+0x45f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000812741:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812748:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081274b:	3c 25                	cmp    al,0x25
ffff80000081274d:	0f 85 e5 02 00 00    	jne    ffff800000812a38 <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
ffff800000812753:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081275a:	48 83 c0 01          	add    rax,0x1
ffff80000081275e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812761:	84 c0                	test   al,al
ffff800000812763:	0f 84 cf 02 00 00    	je     ffff800000812a38 <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
ffff800000812769:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000812770:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000812771:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812778:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081277b:	3c 78                	cmp    al,0x78
ffff80000081277d:	75 70                	jne    ffff8000008127ef <comprintf+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
ffff80000081277f:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812785:	83 f8 2f             	cmp    eax,0x2f
ffff800000812788:	77 23                	ja     ffff8000008127ad <comprintf+0x1a1>
ffff80000081278a:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812791:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812797:	89 d2                	mov    edx,edx
ffff800000812799:	48 01 d0             	add    rax,rdx
ffff80000081279c:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008127a2:	83 c2 08             	add    edx,0x8
ffff8000008127a5:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008127ab:	eb 12                	jmp    ffff8000008127bf <comprintf+0x1b3>
ffff8000008127ad:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008127b4:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008127b8:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008127bf:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008127c1:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
ffff8000008127c7:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff8000008127cd:	48 63 d0             	movsxd rdx,eax
ffff8000008127d0:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008127d7:	48 89 d6             	mov    rsi,rdx
ffff8000008127da:	48 89 c7             	mov    rdi,rax
ffff8000008127dd:	49 89 df             	mov    r15,rbx
ffff8000008127e0:	48 b8 a1 58 ef ff ff 	movabs rax,0xffffffffffef58a1
ffff8000008127e7:	ff ff ff 
ffff8000008127ea:	48 01 d8             	add    rax,rbx
ffff8000008127ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008127ef:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008127f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008127f9:	3c 6c                	cmp    al,0x6c
ffff8000008127fb:	75 76                	jne    ffff800000812873 <comprintf+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                int v=va_arg(vargs,unsigned long long);
ffff8000008127fd:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812803:	83 f8 2f             	cmp    eax,0x2f
ffff800000812806:	77 23                	ja     ffff80000081282b <comprintf+0x21f>
ffff800000812808:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000081280f:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812815:	89 d2                	mov    edx,edx
ffff800000812817:	48 01 d0             	add    rax,rdx
ffff80000081281a:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812820:	83 c2 08             	add    edx,0x8
ffff800000812823:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812829:	eb 12                	jmp    ffff80000081283d <comprintf+0x231>
ffff80000081282b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812832:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812836:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff80000081283d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812840:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprint_hex(tmp,v);
ffff800000812846:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
ffff80000081284c:	48 63 d0             	movsxd rdx,eax
ffff80000081284f:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812856:	48 89 d6             	mov    rsi,rdx
ffff800000812859:	48 89 c7             	mov    rdi,rax
ffff80000081285c:	49 89 df             	mov    r15,rbx
ffff80000081285f:	48 b8 a1 58 ef ff ff 	movabs rax,0xffffffffffef58a1
ffff800000812866:	ff ff ff 
ffff800000812869:	48 01 d8             	add    rax,rbx
ffff80000081286c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff80000081286e:	e9 f0 01 00 00       	jmp    ffff800000812a63 <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='s'){
ffff800000812873:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081287a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081287d:	3c 73                	cmp    al,0x73
ffff80000081287f:	75 75                	jne    ffff8000008128f6 <comprintf+0x2ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
ffff800000812881:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812887:	83 f8 2f             	cmp    eax,0x2f
ffff80000081288a:	77 23                	ja     ffff8000008128af <comprintf+0x2a3>
ffff80000081288c:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812893:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812899:	89 d2                	mov    edx,edx
ffff80000081289b:	48 01 d0             	add    rax,rdx
ffff80000081289e:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008128a4:	83 c2 08             	add    edx,0x8
ffff8000008128a7:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008128ad:	eb 12                	jmp    ffff8000008128c1 <comprintf+0x2b5>
ffff8000008128af:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008128b6:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008128ba:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008128c1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008128c4:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprintn(tmp,v);
ffff8000008128cb:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff8000008128d2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008128d9:	48 89 d6             	mov    rsi,rdx
ffff8000008128dc:	48 89 c7             	mov    rdi,rax
ffff8000008128df:	49 89 df             	mov    r15,rbx
ffff8000008128e2:	48 b8 2f 59 ef ff ff 	movabs rax,0xffffffffffef592f
ffff8000008128e9:	ff ff ff 
ffff8000008128ec:	48 01 d8             	add    rax,rbx
ffff8000008128ef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008128f1:	e9 6d 01 00 00       	jmp    ffff800000812a63 <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='d'){
ffff8000008128f6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008128fd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812900:	3c 64                	cmp    al,0x64
ffff800000812902:	75 76                	jne    ffff80000081297a <comprintf+0x36e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char* v=va_arg(vargs,char*);
ffff800000812904:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081290a:	83 f8 2f             	cmp    eax,0x2f
ffff80000081290d:	77 23                	ja     ffff800000812932 <comprintf+0x326>
ffff80000081290f:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812916:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081291c:	89 d2                	mov    edx,edx
ffff80000081291e:	48 01 d0             	add    rax,rdx
ffff800000812921:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812927:	83 c2 08             	add    edx,0x8
ffff80000081292a:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812930:	eb 12                	jmp    ffff800000812944 <comprintf+0x338>
ffff800000812932:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812939:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081293d:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812944:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812947:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:90
                sprint_decimal(tmp,v);
ffff80000081294e:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000812955:	89 c2                	mov    edx,eax
ffff800000812957:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081295e:	89 d6                	mov    esi,edx
ffff800000812960:	48 89 c7             	mov    rdi,rax
ffff800000812963:	49 89 df             	mov    r15,rbx
ffff800000812966:	48 b8 e6 57 ef ff ff 	movabs rax,0xffffffffffef57e6
ffff80000081296d:	ff ff ff 
ffff800000812970:	48 01 d8             	add    rax,rbx
ffff800000812973:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812975:	e9 e9 00 00 00       	jmp    ffff800000812a63 <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
            }else if(*pstr=='c'){
ffff80000081297a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812981:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812984:	3c 63                	cmp    al,0x63
ffff800000812986:	75 02                	jne    ffff80000081298a <comprintf+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                char v=va_arg(vargs,char);
ffff800000812988:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:94
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
ffff80000081298a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812991:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812994:	3c 70                	cmp    al,0x70
ffff800000812996:	75 73                	jne    ffff800000812a0b <comprintf+0x3ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
                int v=va_arg(vargs,addr_t);
ffff800000812998:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081299e:	83 f8 2f             	cmp    eax,0x2f
ffff8000008129a1:	77 23                	ja     ffff8000008129c6 <comprintf+0x3ba>
ffff8000008129a3:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008129aa:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008129b0:	89 d2                	mov    edx,edx
ffff8000008129b2:	48 01 d0             	add    rax,rdx
ffff8000008129b5:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008129bb:	83 c2 08             	add    edx,0x8
ffff8000008129be:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008129c4:	eb 12                	jmp    ffff8000008129d8 <comprintf+0x3cc>
ffff8000008129c6:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008129cd:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008129d1:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008129d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008129db:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:96
                sprint_hex(tmp,v);
ffff8000008129e1:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff8000008129e7:	48 63 d0             	movsxd rdx,eax
ffff8000008129ea:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008129f1:	48 89 d6             	mov    rsi,rdx
ffff8000008129f4:	48 89 c7             	mov    rdi,rax
ffff8000008129f7:	49 89 df             	mov    r15,rbx
ffff8000008129fa:	48 b8 a1 58 ef ff ff 	movabs rax,0xffffffffffef58a1
ffff800000812a01:	ff ff ff 
ffff800000812a04:	48 01 d8             	add    rax,rbx
ffff800000812a07:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812a09:	eb 58                	jmp    ffff800000812a63 <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
            }else{
                    sprintchar(tmp,*pstr);
ffff800000812a0b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812a12:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812a15:	0f be d0             	movsx  edx,al
ffff800000812a18:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812a1f:	89 d6                	mov    esi,edx
ffff800000812a21:	48 89 c7             	mov    rdi,rax
ffff800000812a24:	49 89 df             	mov    r15,rbx
ffff800000812a27:	48 b8 a7 57 ef ff ff 	movabs rax,0xffffffffffef57a7
ffff800000812a2e:	ff ff ff 
ffff800000812a31:	48 01 d8             	add    rax,rbx
ffff800000812a34:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812a36:	eb 2b                	jmp    ffff800000812a63 <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:101
                }
        }else{
            sprintchar(tmp,*pstr);
ffff800000812a38:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812a3f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812a42:	0f be d0             	movsx  edx,al
ffff800000812a45:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812a4c:	89 d6                	mov    esi,edx
ffff800000812a4e:	48 89 c7             	mov    rdi,rax
ffff800000812a51:	49 89 df             	mov    r15,rbx
ffff800000812a54:	48 b8 a7 57 ef ff ff 	movabs rax,0xffffffffffef57a7
ffff800000812a5b:	ff ff ff 
ffff800000812a5e:	48 01 d8             	add    rax,rbx
ffff800000812a61:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000812a63:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000812a6a:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
ffff800000812a6b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812a72:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812a75:	84 c0                	test   al,al
ffff800000812a77:	0f 85 c4 fc ff ff    	jne    ffff800000812741 <comprintf+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:105
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
ffff800000812a7d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812a84:	be f8 03 00 00       	mov    esi,0x3f8
ffff800000812a89:	48 89 c7             	mov    rdi,rax
ffff800000812a8c:	49 89 df             	mov    r15,rbx
ffff800000812a8f:	48 b8 70 4b ef ff ff 	movabs rax,0xffffffffffef4b70
ffff800000812a96:	ff ff ff 
ffff800000812a99:	48 01 d8             	add    rax,rbx
ffff800000812a9c:	ff d0                	call   rax
ffff800000812a9e:	eb 01                	jmp    ffff800000812aa1 <comprintf+0x495>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
ffff800000812aa0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:106
ffff800000812aa1:	48 81 c4 10 01 00 00 	add    rsp,0x110
ffff800000812aa8:	5b                   	pop    rbx
ffff800000812aa9:	41 5f                	pop    r15
ffff800000812aab:	5d                   	pop    rbp
ffff800000812aac:	c3                   	ret    

ffff800000812aad <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
ffff800000812aad:	f3 0f 1e fa          	endbr64 
ffff800000812ab1:	55                   	push   rbp
ffff800000812ab2:	48 89 e5             	mov    rbp,rsp
ffff800000812ab5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812ab9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000812abd:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
ffff800000812ac0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812ac4:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
ffff800000812ac7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812ace:	eb 1b                	jmp    ffff800000812aeb <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
ffff800000812ad0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812ad4:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812ad7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812adb:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
ffff800000812add:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
ffff800000812ae2:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
ffff800000812ae7:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
ffff800000812aeb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812aee:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000812af1:	77 dd                	ja     ffff800000812ad0 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
ffff800000812af3:	90                   	nop
ffff800000812af4:	90                   	nop
ffff800000812af5:	5d                   	pop    rbp
ffff800000812af6:	c3                   	ret    

ffff800000812af7 <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
ffff800000812af7:	f3 0f 1e fa          	endbr64 
ffff800000812afb:	55                   	push   rbp
ffff800000812afc:	48 89 e5             	mov    rbp,rsp
ffff800000812aff:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812b03:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000812b07:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
ffff800000812b0a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812b11:	eb 3a                	jmp    ffff800000812b4d <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
ffff800000812b13:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b17:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812b1a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b1e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812b21:	38 c2                	cmp    dl,al
ffff800000812b23:	74 1a                	je     ffff800000812b3f <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
ffff800000812b25:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b29:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812b2c:	0f b6 d0             	movzx  edx,al
ffff800000812b2f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b33:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812b36:	0f b6 c8             	movzx  ecx,al
ffff800000812b39:	89 d0                	mov    eax,edx
ffff800000812b3b:	29 c8                	sub    eax,ecx
ffff800000812b3d:	eb 1b                	jmp    ffff800000812b5a <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
ffff800000812b3f:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
ffff800000812b44:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
ffff800000812b49:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
ffff800000812b4d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812b50:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffff800000812b53:	7c be                	jl     ffff800000812b13 <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
ffff800000812b55:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
ffff800000812b5a:	5d                   	pop    rbp
ffff800000812b5b:	c3                   	ret    

ffff800000812b5c <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
ffff800000812b5c:	f3 0f 1e fa          	endbr64 
ffff800000812b60:	55                   	push   rbp
ffff800000812b61:	48 89 e5             	mov    rbp,rsp
ffff800000812b64:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812b68:	89 f0                	mov    eax,esi
ffff800000812b6a:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffff800000812b6d:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
ffff800000812b70:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812b77:	eb 16                	jmp    ffff800000812b8f <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
ffff800000812b79:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b7d:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000812b81:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000812b85:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff800000812b89:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
ffff800000812b8b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
ffff800000812b8f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812b92:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff800000812b95:	72 e2                	jb     ffff800000812b79 <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
ffff800000812b97:	90                   	nop
ffff800000812b98:	90                   	nop
ffff800000812b99:	5d                   	pop    rbp
ffff800000812b9a:	c3                   	ret    

ffff800000812b9b <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
ffff800000812b9b:	f3 0f 1e fa          	endbr64 
ffff800000812b9f:	55                   	push   rbp
ffff800000812ba0:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
ffff800000812ba3:	48 b8 60 a3 41 00 00 	movabs rax,0xffff80000041a360
ffff800000812baa:	80 ff ff 
ffff800000812bad:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
ffff800000812baf:	5d                   	pop    rbp
ffff800000812bb0:	c3                   	ret    

ffff800000812bb1 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
ffff800000812bb1:	f3 0f 1e fa          	endbr64 
ffff800000812bb5:	55                   	push   rbp
ffff800000812bb6:	48 89 e5             	mov    rbp,rsp
ffff800000812bb9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812bbd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000812bc1:	eb 1d                	jmp    ffff800000812be0 <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
ffff800000812bc3:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000812bc7:	48 8d 42 01          	lea    rax,[rdx+0x1]
ffff800000812bcb:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff800000812bcf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812bd3:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffff800000812bd7:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffff800000812bdb:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000812bde:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000812be0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812be4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812be7:	84 c0                	test   al,al
ffff800000812be9:	75 d8                	jne    ffff800000812bc3 <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
ffff800000812beb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812bef:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
ffff800000812bf2:	90                   	nop
ffff800000812bf3:	5d                   	pop    rbp
ffff800000812bf4:	c3                   	ret    

ffff800000812bf5 <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
ffff800000812bf5:	f3 0f 1e fa          	endbr64 
ffff800000812bf9:	55                   	push   rbp
ffff800000812bfa:	48 89 e5             	mov    rbp,rsp
ffff800000812bfd:	48 83 ec 30          	sub    rsp,0x30
ffff800000812c01:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000812c05:	89 f0                	mov    eax,esi
ffff800000812c07:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
ffff800000812c0a:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000812c0f:	0f 84 fa 00 00 00    	je     ffff800000812d0f <strtok+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
ffff800000812c15:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812c19:	48 89 c6             	mov    rsi,rax
ffff800000812c1c:	48 b8 80 a3 41 00 00 	movabs rax,0xffff80000041a380
ffff800000812c23:	80 ff ff 
ffff800000812c26:	48 89 c7             	mov    rdi,rax
ffff800000812c29:	48 b8 b1 2b 81 00 00 	movabs rax,0xffff800000812bb1
ffff800000812c30:	80 ff ff 
ffff800000812c33:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
ffff800000812c35:	48 b8 80 a3 41 00 00 	movabs rax,0xffff80000041a380
ffff800000812c3c:	80 ff ff 
ffff800000812c3f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
ffff800000812c43:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812c4a:	80 ff ff 
ffff800000812c4d:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffff800000812c53:	eb 2a                	jmp    ffff800000812c7f <strtok+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
ffff800000812c55:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812c5c:	80 ff ff 
ffff800000812c5f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812c61:	83 c0 01             	add    eax,0x1
ffff800000812c64:	99                   	cdq    
ffff800000812c65:	c1 ea 17             	shr    edx,0x17
ffff800000812c68:	01 d0                	add    eax,edx
ffff800000812c6a:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812c6f:	29 d0                	sub    eax,edx
ffff800000812c71:	89 c2                	mov    edx,eax
ffff800000812c73:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812c7a:	80 ff ff 
ffff800000812c7d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
ffff800000812c7f:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812c86:	80 ff ff 
ffff800000812c89:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812c8b:	48 ba 80 a3 41 00 00 	movabs rdx,0xffff80000041a380
ffff800000812c92:	80 ff ff 
ffff800000812c95:	48 98                	cdqe   
ffff800000812c97:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812c9b:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000812c9e:	74 20                	je     ffff800000812cc0 <strtok+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
ffff800000812ca0:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812ca7:	80 ff ff 
ffff800000812caa:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812cac:	48 ba 80 a3 41 00 00 	movabs rdx,0xffff80000041a380
ffff800000812cb3:	80 ff ff 
ffff800000812cb6:	48 98                	cdqe   
ffff800000812cb8:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812cbc:	84 c0                	test   al,al
ffff800000812cbe:	75 95                	jne    ffff800000812c55 <strtok+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
ffff800000812cc0:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812cc7:	80 ff ff 
ffff800000812cca:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812ccc:	48 ba 80 a3 41 00 00 	movabs rdx,0xffff80000041a380
ffff800000812cd3:	80 ff ff 
ffff800000812cd6:	48 98                	cdqe   
ffff800000812cd8:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
ffff800000812cdc:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812ce3:	80 ff ff 
ffff800000812ce6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812ce8:	83 c0 01             	add    eax,0x1
ffff800000812ceb:	99                   	cdq    
ffff800000812cec:	c1 ea 17             	shr    edx,0x17
ffff800000812cef:	01 d0                	add    eax,edx
ffff800000812cf1:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812cf6:	29 d0                	sub    eax,edx
ffff800000812cf8:	89 c2                	mov    edx,eax
ffff800000812cfa:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812d01:	80 ff ff 
ffff800000812d04:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
ffff800000812d06:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812d0a:	e9 ee 00 00 00       	jmp    ffff800000812dfd <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
ffff800000812d0f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
ffff800000812d16:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812d1d:	80 ff ff 
ffff800000812d20:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d22:	48 98                	cdqe   
ffff800000812d24:	48 ba 80 a3 41 00 00 	movabs rdx,0xffff80000041a380
ffff800000812d2b:	80 ff ff 
ffff800000812d2e:	48 01 d0             	add    rax,rdx
ffff800000812d31:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
ffff800000812d35:	eb 2e                	jmp    ffff800000812d65 <strtok+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
ffff800000812d37:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812d3e:	80 ff ff 
ffff800000812d41:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d43:	83 c0 01             	add    eax,0x1
ffff800000812d46:	99                   	cdq    
ffff800000812d47:	c1 ea 17             	shr    edx,0x17
ffff800000812d4a:	01 d0                	add    eax,edx
ffff800000812d4c:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812d51:	29 d0                	sub    eax,edx
ffff800000812d53:	89 c2                	mov    edx,eax
ffff800000812d55:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812d5c:	80 ff ff 
ffff800000812d5f:	89 10                	mov    DWORD PTR [rax],edx
ffff800000812d61:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
ffff800000812d65:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812d6c:	80 ff ff 
ffff800000812d6f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d71:	48 ba 80 a3 41 00 00 	movabs rdx,0xffff80000041a380
ffff800000812d78:	80 ff ff 
ffff800000812d7b:	48 98                	cdqe   
ffff800000812d7d:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812d81:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000812d84:	74 20                	je     ffff800000812da6 <strtok+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
ffff800000812d86:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812d8d:	80 ff ff 
ffff800000812d90:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d92:	48 ba 80 a3 41 00 00 	movabs rdx,0xffff80000041a380
ffff800000812d99:	80 ff ff 
ffff800000812d9c:	48 98                	cdqe   
ffff800000812d9e:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812da2:	84 c0                	test   al,al
ffff800000812da4:	75 91                	jne    ffff800000812d37 <strtok+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
ffff800000812da6:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812dad:	80 ff ff 
ffff800000812db0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812db2:	48 ba 80 a3 41 00 00 	movabs rdx,0xffff80000041a380
ffff800000812db9:	80 ff ff 
ffff800000812dbc:	48 98                	cdqe   
ffff800000812dbe:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
ffff800000812dc2:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812dc9:	80 ff ff 
ffff800000812dcc:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812dce:	83 c0 01             	add    eax,0x1
ffff800000812dd1:	99                   	cdq    
ffff800000812dd2:	c1 ea 17             	shr    edx,0x17
ffff800000812dd5:	01 d0                	add    eax,edx
ffff800000812dd7:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812ddc:	29 d0                	sub    eax,edx
ffff800000812dde:	89 c2                	mov    edx,eax
ffff800000812de0:	48 b8 80 a5 41 00 00 	movabs rax,0xffff80000041a580
ffff800000812de7:	80 ff ff 
ffff800000812dea:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
ffff800000812dec:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000812df0:	74 06                	je     ffff800000812df8 <strtok+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
ffff800000812df2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812df6:	eb 05                	jmp    ffff800000812dfd <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
ffff800000812df8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
ffff800000812dfd:	c9                   	leave  
ffff800000812dfe:	c3                   	ret    

ffff800000812dff <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
ffff800000812dff:	f3 0f 1e fa          	endbr64 
ffff800000812e03:	55                   	push   rbp
ffff800000812e04:	48 89 e5             	mov    rbp,rsp
ffff800000812e07:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812e0b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000812e0f:	eb 3c                	jmp    ffff800000812e4d <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
ffff800000812e11:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812e15:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812e18:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812e1c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812e1f:	38 c2                	cmp    dl,al
ffff800000812e21:	7e 07                	jle    ffff800000812e2a <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
ffff800000812e23:	b8 01 00 00 00       	mov    eax,0x1
ffff800000812e28:	eb 52                	jmp    ffff800000812e7c <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
ffff800000812e2a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812e2e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812e31:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812e35:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812e38:	38 c2                	cmp    dl,al
ffff800000812e3a:	7d 07                	jge    ffff800000812e43 <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
ffff800000812e3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000812e41:	eb 39                	jmp    ffff800000812e7c <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
ffff800000812e43:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
ffff800000812e48:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000812e4d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812e51:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812e54:	84 c0                	test   al,al
ffff800000812e56:	74 0b                	je     ffff800000812e63 <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
ffff800000812e58:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812e5c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812e5f:	84 c0                	test   al,al
ffff800000812e61:	75 ae                	jne    ffff800000812e11 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
ffff800000812e63:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812e67:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812e6a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812e6e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812e71:	38 c2                	cmp    dl,al
ffff800000812e73:	75 07                	jne    ffff800000812e7c <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
ffff800000812e75:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812e7a:	eb 00                	jmp    ffff800000812e7c <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
ffff800000812e7c:	5d                   	pop    rbp
ffff800000812e7d:	c3                   	ret    

ffff800000812e7e <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
ffff800000812e7e:	f3 0f 1e fa          	endbr64 
ffff800000812e82:	55                   	push   rbp
ffff800000812e83:	48 89 e5             	mov    rbp,rsp
ffff800000812e86:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
ffff800000812e8a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
ffff800000812e91:	eb 09                	jmp    ffff800000812e9c <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
ffff800000812e93:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffff800000812e98:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
ffff800000812e9c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812ea0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812ea3:	84 c0                	test   al,al
ffff800000812ea5:	75 ec                	jne    ffff800000812e93 <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
ffff800000812ea7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
ffff800000812eaa:	5d                   	pop    rbp
ffff800000812eab:	c3                   	ret    

ffff800000812eac <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
ffff800000812eac:	f3 0f 1e fa          	endbr64 
ffff800000812eb0:	55                   	push   rbp
ffff800000812eb1:	48 89 e5             	mov    rbp,rsp
ffff800000812eb4:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000812ebb:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000812ec2:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffff800000812ec9:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffff800000812ed0:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffff800000812ed7:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffff800000812ede:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffff800000812ee5:	84 c0                	test   al,al
ffff800000812ee7:	74 20                	je     ffff800000812f09 <sprintf+0x5d>
ffff800000812ee9:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffff800000812eed:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffff800000812ef1:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffff800000812ef5:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffff800000812ef9:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffff800000812efd:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffff800000812f01:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffff800000812f05:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
ffff800000812f09:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000812f10:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
ffff800000812f17:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000812f1e:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
ffff800000812f25:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff800000812f2c:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000812f2f:	eb 39                	jmp    ffff800000812f6a <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
ffff800000812f31:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000812f38:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f3b:	3c 25                	cmp    al,0x25
ffff800000812f3d:	75 15                	jne    ffff800000812f54 <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
ffff800000812f3f:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000812f46:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f49:	3c 25                	cmp    al,0x25
ffff800000812f4b:	74 07                	je     ffff800000812f54 <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
ffff800000812f4d:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
ffff800000812f54:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000812f5b:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
ffff800000812f62:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000812f69:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000812f6a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000812f71:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f74:	3c 0a                	cmp    al,0xa
ffff800000812f76:	75 b9                	jne    ffff800000812f31 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
ffff800000812f78:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
ffff800000812f7f:	00 00 00 
ffff800000812f82:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
ffff800000812f89:	00 00 00 
ffff800000812f8c:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000812f90:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff800000812f97:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffff800000812f9e:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
ffff800000812fa5:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000812fac:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff800000812fb3:	e9 09 02 00 00       	jmp    ffff8000008131c1 <sprintf+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000812fb8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000812fbf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812fc2:	3c 25                	cmp    al,0x25
ffff800000812fc4:	0f 85 ca 01 00 00    	jne    ffff800000813194 <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
ffff800000812fca:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000812fd1:	48 83 c0 01          	add    rax,0x1
ffff800000812fd5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812fd8:	84 c0                	test   al,al
ffff800000812fda:	0f 84 b4 01 00 00    	je     ffff800000813194 <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
ffff800000812fe0:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000812fe7:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000812fe8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000812fef:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812ff2:	3c 78                	cmp    al,0x78
ffff800000812ff4:	75 6f                	jne    ffff800000813065 <sprintf+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
ffff800000812ff6:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000812ffc:	83 f8 2f             	cmp    eax,0x2f
ffff800000812fff:	77 23                	ja     ffff800000813024 <sprintf+0x178>
ffff800000813001:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000813008:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081300e:	89 d2                	mov    edx,edx
ffff800000813010:	48 01 d0             	add    rax,rdx
ffff800000813013:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813019:	83 c2 08             	add    edx,0x8
ffff80000081301c:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813022:	eb 12                	jmp    ffff800000813036 <sprintf+0x18a>
ffff800000813024:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081302b:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081302f:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000813036:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813038:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
ffff80000081303e:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000813044:	48 63 d0             	movsxd rdx,eax
ffff800000813047:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081304e:	48 89 d6             	mov    rsi,rdx
ffff800000813051:	48 89 c7             	mov    rdi,rax
ffff800000813054:	48 b8 d1 32 81 00 00 	movabs rax,0xffff8000008132d1
ffff80000081305b:	80 ff ff 
ffff80000081305e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813060:	e9 54 01 00 00       	jmp    ffff8000008131b9 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
ffff800000813065:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081306c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081306f:	3c 73                	cmp    al,0x73
ffff800000813071:	75 6f                	jne    ffff8000008130e2 <sprintf+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
ffff800000813073:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000813079:	83 f8 2f             	cmp    eax,0x2f
ffff80000081307c:	77 23                	ja     ffff8000008130a1 <sprintf+0x1f5>
ffff80000081307e:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000813085:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081308b:	89 d2                	mov    edx,edx
ffff80000081308d:	48 01 d0             	add    rax,rdx
ffff800000813090:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813096:	83 c2 08             	add    edx,0x8
ffff800000813099:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff80000081309f:	eb 12                	jmp    ffff8000008130b3 <sprintf+0x207>
ffff8000008130a1:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008130a8:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008130ac:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008130b3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008130b6:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
ffff8000008130bd:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff8000008130c4:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008130cb:	48 89 d6             	mov    rsi,rdx
ffff8000008130ce:	48 89 c7             	mov    rdi,rax
ffff8000008130d1:	48 b8 5f 33 81 00 00 	movabs rax,0xffff80000081335f
ffff8000008130d8:	80 ff ff 
ffff8000008130db:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008130dd:	e9 d7 00 00 00       	jmp    ffff8000008131b9 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
ffff8000008130e2:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008130e9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008130ec:	3c 64                	cmp    al,0x64
ffff8000008130ee:	75 6d                	jne    ffff80000081315d <sprintf+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
ffff8000008130f0:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008130f6:	83 f8 2f             	cmp    eax,0x2f
ffff8000008130f9:	77 23                	ja     ffff80000081311e <sprintf+0x272>
ffff8000008130fb:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000813102:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813108:	89 d2                	mov    edx,edx
ffff80000081310a:	48 01 d0             	add    rax,rdx
ffff80000081310d:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813113:	83 c2 08             	add    edx,0x8
ffff800000813116:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff80000081311c:	eb 12                	jmp    ffff800000813130 <sprintf+0x284>
ffff80000081311e:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000813125:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813129:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000813130:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813133:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
ffff80000081313a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813141:	89 c2                	mov    edx,eax
ffff800000813143:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081314a:	89 d6                	mov    esi,edx
ffff80000081314c:	48 89 c7             	mov    rdi,rax
ffff80000081314f:	48 b8 16 32 81 00 00 	movabs rax,0xffff800000813216
ffff800000813156:	80 ff ff 
ffff800000813159:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff80000081315b:	eb 5c                	jmp    ffff8000008131b9 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
ffff80000081315d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813164:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813167:	3c 63                	cmp    al,0x63
ffff800000813169:	75 02                	jne    ffff80000081316d <sprintf+0x2c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
ffff80000081316b:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
ffff80000081316d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813174:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813177:	0f be d0             	movsx  edx,al
ffff80000081317a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813181:	89 d6                	mov    esi,edx
ffff800000813183:	48 89 c7             	mov    rdi,rax
ffff800000813186:	48 b8 d7 31 81 00 00 	movabs rax,0xffff8000008131d7
ffff80000081318d:	80 ff ff 
ffff800000813190:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813192:	eb 25                	jmp    ffff8000008131b9 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
ffff800000813194:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081319b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081319e:	0f be d0             	movsx  edx,al
ffff8000008131a1:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008131a8:	89 d6                	mov    esi,edx
ffff8000008131aa:	48 89 c7             	mov    rdi,rax
ffff8000008131ad:	48 b8 d7 31 81 00 00 	movabs rax,0xffff8000008131d7
ffff8000008131b4:	80 ff ff 
ffff8000008131b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff8000008131b9:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008131c0:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
ffff8000008131c1:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008131c8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008131cb:	84 c0                	test   al,al
ffff8000008131cd:	0f 85 e5 fd ff ff    	jne    ffff800000812fb8 <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
ffff8000008131d3:	90                   	nop
ffff8000008131d4:	90                   	nop
ffff8000008131d5:	c9                   	leave  
ffff8000008131d6:	c3                   	ret    

ffff8000008131d7 <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
ffff8000008131d7:	f3 0f 1e fa          	endbr64 
ffff8000008131db:	55                   	push   rbp
ffff8000008131dc:	48 89 e5             	mov    rbp,rsp
ffff8000008131df:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008131e3:	89 f0                	mov    eax,esi
ffff8000008131e5:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff8000008131e8:	eb 05                	jmp    ffff8000008131ef <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
ffff8000008131ea:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff8000008131ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008131f3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008131f6:	84 c0                	test   al,al
ffff8000008131f8:	75 f0                	jne    ffff8000008131ea <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
ffff8000008131fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008131fe:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000813202:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff800000813206:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
ffff80000081320a:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
ffff80000081320c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813210:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
ffff800000813213:	90                   	nop
ffff800000813214:	5d                   	pop    rbp
ffff800000813215:	c3                   	ret    

ffff800000813216 <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
ffff800000813216:	f3 0f 1e fa          	endbr64 
ffff80000081321a:	55                   	push   rbp
ffff80000081321b:	48 89 e5             	mov    rbp,rsp
ffff80000081321e:	48 83 ec 30          	sub    rsp,0x30
ffff800000813222:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000813226:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
ffff800000813229:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff800000813230:	eb 65                	jmp    ffff800000813297 <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
ffff800000813232:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000813235:	48 63 c2             	movsxd rax,edx
ffff800000813238:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
ffff80000081323f:	48 c1 e8 20          	shr    rax,0x20
ffff800000813243:	c1 f8 02             	sar    eax,0x2
ffff800000813246:	89 d6                	mov    esi,edx
ffff800000813248:	c1 fe 1f             	sar    esi,0x1f
ffff80000081324b:	29 f0                	sub    eax,esi
ffff80000081324d:	89 c1                	mov    ecx,eax
ffff80000081324f:	89 c8                	mov    eax,ecx
ffff800000813251:	c1 e0 02             	shl    eax,0x2
ffff800000813254:	01 c8                	add    eax,ecx
ffff800000813256:	01 c0                	add    eax,eax
ffff800000813258:	89 d1                	mov    ecx,edx
ffff80000081325a:	29 c1                	sub    ecx,eax
ffff80000081325c:	89 c8                	mov    eax,ecx
ffff80000081325e:	83 c0 30             	add    eax,0x30
ffff800000813261:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
ffff800000813264:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813267:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081326a:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff80000081326d:	48 98                	cdqe   
ffff80000081326f:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff800000813273:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
ffff800000813277:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000081327a:	48 63 d0             	movsxd rdx,eax
ffff80000081327d:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
ffff800000813284:	48 c1 ea 20          	shr    rdx,0x20
ffff800000813288:	c1 fa 02             	sar    edx,0x2
ffff80000081328b:	c1 f8 1f             	sar    eax,0x1f
ffff80000081328e:	89 c1                	mov    ecx,eax
ffff800000813290:	89 d0                	mov    eax,edx
ffff800000813292:	29 c8                	sub    eax,ecx
ffff800000813294:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff800000813297:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081329a:	83 f8 0f             	cmp    eax,0xf
ffff80000081329d:	76 93                	jbe    ffff800000813232 <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
ffff80000081329f:	eb 26                	jmp    ffff8000008132c7 <sprint_decimal+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
ffff8000008132a1:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff8000008132a5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008132a8:	48 98                	cdqe   
ffff8000008132aa:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff8000008132af:	0f be d0             	movsx  edx,al
ffff8000008132b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008132b6:	89 d6                	mov    esi,edx
ffff8000008132b8:	48 89 c7             	mov    rdi,rax
ffff8000008132bb:	48 b8 d7 31 81 00 00 	movabs rax,0xffff8000008131d7
ffff8000008132c2:	80 ff ff 
ffff8000008132c5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
ffff8000008132c7:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008132cb:	7f d4                	jg     ffff8000008132a1 <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
ffff8000008132cd:	90                   	nop
ffff8000008132ce:	90                   	nop
ffff8000008132cf:	c9                   	leave  
ffff8000008132d0:	c3                   	ret    

ffff8000008132d1 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long c)
{
ffff8000008132d1:	f3 0f 1e fa          	endbr64 
ffff8000008132d5:	55                   	push   rbp
ffff8000008132d6:	48 89 e5             	mov    rbp,rsp
ffff8000008132d9:	48 83 ec 30          	sub    rsp,0x30
ffff8000008132dd:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008132e1:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[22];
    int p=0;
ffff8000008132e5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff8000008132ec:	eb 39                	jmp    ffff800000813327 <sprint_hex+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
ffff8000008132ee:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008132f2:	83 e0 0f             	and    eax,0xf
ffff8000008132f5:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
ffff8000008132f8:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
ffff8000008132fc:	76 06                	jbe    ffff800000813304 <sprint_hex+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
ffff8000008132fe:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
ffff800000813302:	eb 04                	jmp    ffff800000813308 <sprint_hex+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
ffff800000813304:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
ffff800000813308:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081330b:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081330e:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000813311:	48 98                	cdqe   
ffff800000813313:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff800000813317:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
ffff80000081331b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081331f:	48 c1 e8 04          	shr    rax,0x4
ffff800000813323:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff800000813327:	83 7d fc 15          	cmp    DWORD PTR [rbp-0x4],0x15
ffff80000081332b:	7e c1                	jle    ffff8000008132ee <sprint_hex+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
ffff80000081332d:	eb 26                	jmp    ffff800000813355 <sprint_hex+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
ffff80000081332f:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff800000813333:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813336:	48 98                	cdqe   
ffff800000813338:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff80000081333d:	0f be d0             	movsx  edx,al
ffff800000813340:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813344:	89 d6                	mov    esi,edx
ffff800000813346:	48 89 c7             	mov    rdi,rax
ffff800000813349:	48 b8 d7 31 81 00 00 	movabs rax,0xffff8000008131d7
ffff800000813350:	80 ff ff 
ffff800000813353:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
ffff800000813355:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000813359:	7f d4                	jg     ffff80000081332f <sprint_hex+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
ffff80000081335b:	90                   	nop
ffff80000081335c:	90                   	nop
ffff80000081335d:	c9                   	leave  
ffff80000081335e:	c3                   	ret    

ffff80000081335f <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
ffff80000081335f:	f3 0f 1e fa          	endbr64 
ffff800000813363:	55                   	push   rbp
ffff800000813364:	48 89 e5             	mov    rbp,rsp
ffff800000813367:	48 83 ec 10          	sub    rsp,0x10
ffff80000081336b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081336f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff800000813373:	eb 27                	jmp    ffff80000081339c <sprintn+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
ffff800000813375:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813379:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff80000081337d:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000813381:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813384:	0f be d0             	movsx  edx,al
ffff800000813387:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000081338b:	89 d6                	mov    esi,edx
ffff80000081338d:	48 89 c7             	mov    rdi,rax
ffff800000813390:	48 b8 d7 31 81 00 00 	movabs rax,0xffff8000008131d7
ffff800000813397:	80 ff ff 
ffff80000081339a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff80000081339c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008133a0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008133a3:	84 c0                	test   al,al
ffff8000008133a5:	75 ce                	jne    ffff800000813375 <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
ffff8000008133a7:	90                   	nop
ffff8000008133a8:	90                   	nop
ffff8000008133a9:	c9                   	leave  
ffff8000008133aa:	c3                   	ret    
ffff8000008133ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffff8000008133b0 <create_zero>:
create_zero():
ffff8000008133b0:	e8 97 15 ff ff       	call   ffff80000080494c <req_proc>
ffff8000008133b5:	83 f8 ff             	cmp    eax,0xffffffff
ffff8000008133b8:	74 0c                	je     ffff8000008133c6 <create_zero.retu>
ffff8000008133ba:	e8 de 16 ff ff       	call   ffff800000804a9d <set_proc>
ffff8000008133bf:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
ffff8000008133c3:	83 c4 40             	add    esp,0x40

ffff8000008133c6 <create_zero.retu>:
create_zero.retu():
ffff8000008133c6:	c3                   	ret    

ffff8000008133c7 <switch_proc_asm>:
save_context():
ffff8000008133c7:	67 8b 44 24 24       	mov    eax,DWORD PTR [esp+0x24]
ffff8000008133cc:	83 c0 44             	add    eax,0x44
ffff8000008133cf:	b9 08 00 00 00       	mov    ecx,0x8
ffff8000008133d4:	89 e7                	mov    edi,esp

ffff8000008133d6 <save_context.loops>:
save_context.loops():
ffff8000008133d6:	67 8b 17             	mov    edx,DWORD PTR [edi]
ffff8000008133d9:	67 89 10             	mov    DWORD PTR [eax],edx
ffff8000008133dc:	83 c7 04             	add    edi,0x4
ffff8000008133df:	83 e8 04             	sub    eax,0x4
ffff8000008133e2:	e2 f2                	loop   ffff8000008133d6 <save_context.loops>
ffff8000008133e4:	5b                   	pop    rbx
ffff8000008133e5:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff8000008133ea:	67 89 58 24          	mov    DWORD PTR [eax+0x24],ebx
ffff8000008133ee:	67 48 8b 1c 24       	mov    rbx,QWORD PTR [esp]
ffff8000008133f3:	67 89 58 20          	mov    DWORD PTR [eax+0x20],ebx
ffff8000008133f7:	c3                   	ret    

ffff8000008133f8 <desc>:
	...

ffff800000813400 <ret_sys_call>:
ret_sys_call():
ffff800000813400:	58                   	pop    rax
ffff800000813401:	8e d8                	mov    ds,eax
ffff800000813403:	58                   	pop    rax
ffff800000813404:	8e c0                	mov    es,eax
ffff800000813406:	41 5f                	pop    r15
ffff800000813408:	41 5e                	pop    r14
ffff80000081340a:	41 5d                	pop    r13
ffff80000081340c:	41 5c                	pop    r12
ffff80000081340e:	41 5b                	pop    r11
ffff800000813410:	41 5a                	pop    r10
ffff800000813412:	41 59                	pop    r9
ffff800000813414:	41 58                	pop    r8
ffff800000813416:	5e                   	pop    rsi
ffff800000813417:	5f                   	pop    rdi
ffff800000813418:	5a                   	pop    rdx
ffff800000813419:	59                   	pop    rcx
ffff80000081341a:	5b                   	pop    rbx
ffff80000081341b:	58                   	pop    rax

ffff80000081341c <tmp>:
tmp():
ffff80000081341c:	48 0f 07             	sysretq 

ffff80000081341f <ret_normal_proc>:
ret_normal_proc():
ffff80000081341f:	58                   	pop    rax
ffff800000813420:	8e d8                	mov    ds,eax
ffff800000813422:	58                   	pop    rax
ffff800000813423:	8e c0                	mov    es,eax
ffff800000813425:	41 5f                	pop    r15
ffff800000813427:	41 5e                	pop    r14
ffff800000813429:	41 5d                	pop    r13
ffff80000081342b:	41 5c                	pop    r12
ffff80000081342d:	41 5b                	pop    r11
ffff80000081342f:	41 5a                	pop    r10
ffff800000813431:	41 59                	pop    r9
ffff800000813433:	41 58                	pop    r8
ffff800000813435:	5e                   	pop    rsi
ffff800000813436:	5f                   	pop    rdi
ffff800000813437:	5a                   	pop    rdx
ffff800000813438:	59                   	pop    rcx
ffff800000813439:	5b                   	pop    rbx
ffff80000081343a:	58                   	pop    rax
ffff80000081343b:	c3                   	ret    

ffff80000081343c <move_to_user_mode>:
move_to_user_mode():
ffff80000081343c:	48 b9 4c 34 81 00 00 	movabs rcx,0xffff80000081344c
ffff800000813443:	80 ff ff 
ffff800000813446:	9c                   	pushf  
ffff800000813447:	41 5b                	pop    r11
ffff800000813449:	48 0f 07             	sysretq 

ffff80000081344c <move_to_user_mode.result>:
move_to_user_mode.result():
ffff80000081344c:	b8 2b 00 00 00       	mov    eax,0x2b
ffff800000813451:	8e c0                	mov    es,eax
ffff800000813453:	8e d8                	mov    ds,eax
ffff800000813455:	8e e0                	mov    fs,eax
ffff800000813457:	8e e8                	mov    gs,eax
ffff800000813459:	c3                   	ret    
