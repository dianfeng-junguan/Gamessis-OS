
bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

ffff800000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:13
#include "kb.h"
#include "framebuffer.h"

gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
ffff800000800000:	f3 0f 1e fa          	endbr64 
ffff800000800004:	55                   	push   rbp
ffff800000800005:	48 89 e5             	mov    rbp,rsp
ffff800000800008:	41 57                	push   r15
ffff80000080000a:	53                   	push   rbx
ffff80000080000b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080000f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080000f <init_int+0xf>
ffff800000800016:	49 bb 49 db 11 00 00 	movabs r11,0x11db49
ffff80000080001d:	00 00 00 
ffff800000800020:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:15
    //asm volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800023:	48 b8 30 ff ff ff ff 	movabs rax,0xffffffffffffff30
ffff80000080002a:	ff ff ff 
ffff80000080002d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800031:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800036:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080003b:	48 89 c6             	mov    rsi,rax
ffff80000080003e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000800043:	49 89 df             	mov    r15,rbx
ffff800000800046:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff80000080004d:	ff ff ff 
ffff800000800050:	48 01 d8             	add    rax,rbx
ffff800000800053:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800055:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080005c:	ff ff ff 
ffff80000080005f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800063:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800068:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080006d:	48 89 c6             	mov    rsi,rax
ffff800000800070:	bf 01 00 00 00       	mov    edi,0x1
ffff800000800075:	49 89 df             	mov    r15,rbx
ffff800000800078:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff80000080007f:	ff ff ff 
ffff800000800082:	48 01 d8             	add    rax,rbx
ffff800000800085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800087:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080008e:	ff ff ff 
ffff800000800091:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800095:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080009a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080009f:	48 89 c6             	mov    rsi,rax
ffff8000008000a2:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008000a7:	49 89 df             	mov    r15,rbx
ffff8000008000aa:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff8000008000b1:	ff ff ff 
ffff8000008000b4:	48 01 d8             	add    rax,rbx
ffff8000008000b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000b9:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008000c0:	ff ff ff 
ffff8000008000c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000c7:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000cc:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008000d1:	48 89 c6             	mov    rsi,rax
ffff8000008000d4:	bf 03 00 00 00       	mov    edi,0x3
ffff8000008000d9:	49 89 df             	mov    r15,rbx
ffff8000008000dc:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff8000008000e3:	ff ff ff 
ffff8000008000e6:	48 01 d8             	add    rax,rbx
ffff8000008000e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000eb:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff8000008000f2:	ff ff ff 
ffff8000008000f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000f9:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000fe:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800103:	48 89 c6             	mov    rsi,rax
ffff800000800106:	bf 04 00 00 00       	mov    edi,0x4
ffff80000080010b:	49 89 df             	mov    r15,rbx
ffff80000080010e:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff800000800115:	ff ff ff 
ffff800000800118:	48 01 d8             	add    rax,rbx
ffff80000080011b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080011d:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000800124:	ff ff ff 
ffff800000800127:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080012b:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800130:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800135:	48 89 c6             	mov    rsi,rax
ffff800000800138:	bf 05 00 00 00       	mov    edi,0x5
ffff80000080013d:	49 89 df             	mov    r15,rbx
ffff800000800140:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff800000800147:	ff ff ff 
ffff80000080014a:	48 01 d8             	add    rax,rbx
ffff80000080014d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080014f:	48 b8 60 ff ff ff ff 	movabs rax,0xffffffffffffff60
ffff800000800156:	ff ff ff 
ffff800000800159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080015d:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800162:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800167:	48 89 c6             	mov    rsi,rax
ffff80000080016a:	bf 06 00 00 00       	mov    edi,0x6
ffff80000080016f:	49 89 df             	mov    r15,rbx
ffff800000800172:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff800000800179:	ff ff ff 
ffff80000080017c:	48 01 d8             	add    rax,rbx
ffff80000080017f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800181:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000800188:	ff ff ff 
ffff80000080018b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080018f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800194:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800199:	48 89 c6             	mov    rsi,rax
ffff80000080019c:	bf 07 00 00 00       	mov    edi,0x7
ffff8000008001a1:	49 89 df             	mov    r15,rbx
ffff8000008001a4:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff8000008001ab:	ff ff ff 
ffff8000008001ae:	48 01 d8             	add    rax,rbx
ffff8000008001b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
ffff8000008001b3:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff8000008001ba:	ff ff ff 
ffff8000008001bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001c1:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001c6:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001cb:	48 89 c6             	mov    rsi,rax
ffff8000008001ce:	bf 08 00 00 00       	mov    edi,0x8
ffff8000008001d3:	49 89 df             	mov    r15,rbx
ffff8000008001d6:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff8000008001dd:	ff ff ff 
ffff8000008001e0:	48 01 d8             	add    rax,rbx
ffff8000008001e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008001e5:	48 b8 20 fe ff ff ff 	movabs rax,0xfffffffffffffe20
ffff8000008001ec:	ff ff ff 
ffff8000008001ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001f3:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001f8:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001fd:	48 89 c6             	mov    rsi,rax
ffff800000800200:	bf 09 00 00 00       	mov    edi,0x9
ffff800000800205:	49 89 df             	mov    r15,rbx
ffff800000800208:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff80000080020f:	ff ff ff 
ffff800000800212:	48 01 d8             	add    rax,rbx
ffff800000800215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800217:	48 b8 d0 ff ff ff ff 	movabs rax,0xffffffffffffffd0
ffff80000080021e:	ff ff ff 
ffff800000800221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800225:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080022a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080022f:	48 89 c6             	mov    rsi,rax
ffff800000800232:	bf 0a 00 00 00       	mov    edi,0xa
ffff800000800237:	49 89 df             	mov    r15,rbx
ffff80000080023a:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff800000800241:	ff ff ff 
ffff800000800244:	48 01 d8             	add    rax,rbx
ffff800000800247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800249:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff800000800250:	ff ff ff 
ffff800000800253:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800257:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080025c:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800261:	48 89 c6             	mov    rsi,rax
ffff800000800264:	bf 0b 00 00 00       	mov    edi,0xb
ffff800000800269:	49 89 df             	mov    r15,rbx
ffff80000080026c:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff800000800273:	ff ff ff 
ffff800000800276:	48 01 d8             	add    rax,rbx
ffff800000800279:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
ffff80000080027b:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff800000800282:	ff ff ff 
ffff800000800285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800289:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080028e:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800293:	48 89 c6             	mov    rsi,rax
ffff800000800296:	bf 0c 00 00 00       	mov    edi,0xc
ffff80000080029b:	49 89 df             	mov    r15,rbx
ffff80000080029e:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff8000008002a5:	ff ff ff 
ffff8000008002a8:	48 01 d8             	add    rax,rbx
ffff8000008002ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002ad:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008002b4:	ff ff ff 
ffff8000008002b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002bb:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002c0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002c5:	48 89 c6             	mov    rsi,rax
ffff8000008002c8:	bf 0d 00 00 00       	mov    edi,0xd
ffff8000008002cd:	49 89 df             	mov    r15,rbx
ffff8000008002d0:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff8000008002d7:	ff ff ff 
ffff8000008002da:	48 01 d8             	add    rax,rbx
ffff8000008002dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002df:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff8000008002e6:	ff ff ff 
ffff8000008002e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002ed:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002f2:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002f7:	48 89 c6             	mov    rsi,rax
ffff8000008002fa:	bf 0e 00 00 00       	mov    edi,0xe
ffff8000008002ff:	49 89 df             	mov    r15,rbx
ffff800000800302:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff800000800309:	ff ff ff 
ffff80000080030c:	48 01 d8             	add    rax,rbx
ffff80000080030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800311:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000800318:	ff ff ff 
ffff80000080031b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080031f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800324:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800329:	48 89 c6             	mov    rsi,rax
ffff80000080032c:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000800331:	49 89 df             	mov    r15,rbx
ffff800000800334:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff80000080033b:	ff ff ff 
ffff80000080033e:	48 01 d8             	add    rax,rbx
ffff800000800341:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800343:	48 b8 68 ff ff ff ff 	movabs rax,0xffffffffffffff68
ffff80000080034a:	ff ff ff 
ffff80000080034d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800351:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800356:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080035b:	48 89 c6             	mov    rsi,rax
ffff80000080035e:	bf 10 00 00 00       	mov    edi,0x10
ffff800000800363:	49 89 df             	mov    r15,rbx
ffff800000800366:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff80000080036d:	ff ff ff 
ffff800000800370:	48 01 d8             	add    rax,rbx
ffff800000800373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32
    for (int i=17;i<48;i++)
ffff800000800375:	c7 45 ec 11 00 00 00 	mov    DWORD PTR [rbp-0x14],0x11
ffff80000080037c:	eb 39                	jmp    ffff8000008003b7 <init_int+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff80000080037e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000800385:	ff ff ff 
ffff800000800388:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080038c:	48 89 c6             	mov    rsi,rax
ffff80000080038f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000800392:	0f b6 c0             	movzx  eax,al
ffff800000800395:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff80000080039a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080039f:	89 c7                	mov    edi,eax
ffff8000008003a1:	49 89 df             	mov    r15,rbx
ffff8000008003a4:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff8000008003ab:	ff ff ff 
ffff8000008003ae:	48 01 d8             	add    rax,rbx
ffff8000008003b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 3)
    for (int i=17;i<48;i++)
ffff8000008003b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 1)
ffff8000008003b7:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff8000008003bb:	7e c1                	jle    ffff80000080037e <init_int+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003bd:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff8000008003c4:	ff ff ff 
ffff8000008003c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003cb:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff8000008003d0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008003d5:	48 89 c6             	mov    rsi,rax
ffff8000008003d8:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008003dd:	49 89 df             	mov    r15,rbx
ffff8000008003e0:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff8000008003e7:	ff ff ff 
ffff8000008003ea:	48 01 d8             	add    rax,rbx
ffff8000008003ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003ef:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff8000008003f6:	ff ff ff 
ffff8000008003f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003fd:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800402:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800407:	48 89 c6             	mov    rsi,rax
ffff80000080040a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080040f:	49 89 df             	mov    r15,rbx
ffff800000800412:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff800000800419:	ff ff ff 
ffff80000080041c:	48 01 d8             	add    rax,rbx
ffff80000080041f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff800000800421:	48 b8 f8 ff ff ff ff 	movabs rax,0xfffffffffffffff8
ffff800000800428:	ff ff ff 
ffff80000080042b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080042f:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800434:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800439:	48 89 c6             	mov    rsi,rax
ffff80000080043c:	bf 2e 00 00 00       	mov    edi,0x2e
ffff800000800441:	49 89 df             	mov    r15,rbx
ffff800000800444:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff80000080044b:	ff ff ff 
ffff80000080044e:	48 01 d8             	add    rax,rbx
ffff800000800451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:37
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
ffff800000800453:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff80000080045a:	ff ff ff 
ffff80000080045d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800461:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800466:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080046b:	48 89 c6             	mov    rsi,rax
ffff80000080046e:	bf 80 00 00 00       	mov    edi,0x80
ffff800000800473:	49 89 df             	mov    r15,rbx
ffff800000800476:	48 b8 7a 2a ee ff ff 	movabs rax,0xffffffffffee2a7a
ffff80000080047d:	ff ff ff 
ffff800000800480:	48 01 d8             	add    rax,rbx
ffff800000800483:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:42
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
ffff800000800485:	be 11 00 00 00       	mov    esi,0x11
ffff80000080048a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080048f:	49 89 df             	mov    r15,rbx
ffff800000800492:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000800499:	ff ff ff 
ffff80000080049c:	48 01 d8             	add    rax,rbx
ffff80000080049f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:43
	outb(0xA0,0x11);
ffff8000008004a1:	be 11 00 00 00       	mov    esi,0x11
ffff8000008004a6:	bf a0 00 00 00       	mov    edi,0xa0
ffff8000008004ab:	49 89 df             	mov    r15,rbx
ffff8000008004ae:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008004b5:	ff ff ff 
ffff8000008004b8:	48 01 d8             	add    rax,rbx
ffff8000008004bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:45
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
ffff8000008004bd:	be 20 00 00 00       	mov    esi,0x20
ffff8000008004c2:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004c7:	49 89 df             	mov    r15,rbx
ffff8000008004ca:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008004d1:	ff ff ff 
ffff8000008004d4:	48 01 d8             	add    rax,rbx
ffff8000008004d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:46
	outb(0xA1,0x28);
ffff8000008004d9:	be 28 00 00 00       	mov    esi,0x28
ffff8000008004de:	bf a1 00 00 00       	mov    edi,0xa1
ffff8000008004e3:	49 89 df             	mov    r15,rbx
ffff8000008004e6:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008004ed:	ff ff ff 
ffff8000008004f0:	48 01 d8             	add    rax,rbx
ffff8000008004f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:48
	//ICW3
	outb(0x21,0x04);
ffff8000008004f5:	be 04 00 00 00       	mov    esi,0x4
ffff8000008004fa:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004ff:	49 89 df             	mov    r15,rbx
ffff800000800502:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000800509:	ff ff ff 
ffff80000080050c:	48 01 d8             	add    rax,rbx
ffff80000080050f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:49
	outb(0xA1,0x02);
ffff800000800511:	be 02 00 00 00       	mov    esi,0x2
ffff800000800516:	bf a1 00 00 00       	mov    edi,0xa1
ffff80000080051b:	49 89 df             	mov    r15,rbx
ffff80000080051e:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000800525:	ff ff ff 
ffff800000800528:	48 01 d8             	add    rax,rbx
ffff80000080052b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:51
	//ICW4
	outb(0x21,0x01);
ffff80000080052d:	be 01 00 00 00       	mov    esi,0x1
ffff800000800532:	bf 21 00 00 00       	mov    edi,0x21
ffff800000800537:	49 89 df             	mov    r15,rbx
ffff80000080053a:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000800541:	ff ff ff 
ffff800000800544:	48 01 d8             	add    rax,rbx
ffff800000800547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:52
	outb(0xA1,0x01);
ffff800000800549:	be 01 00 00 00       	mov    esi,0x1
ffff80000080054e:	bf a1 00 00 00       	mov    edi,0xa1
ffff800000800553:	49 89 df             	mov    r15,rbx
ffff800000800556:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080055d:	ff ff ff 
ffff800000800560:	48 01 d8             	add    rax,rbx
ffff800000800563:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:54

    turn_on_int();
ffff800000800565:	49 89 df             	mov    r15,rbx
ffff800000800568:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080056d:	48 ba 22 a3 ee ff ff 	movabs rdx,0xffffffffffeea322
ffff800000800574:	ff ff ff 
ffff800000800577:	48 01 da             	add    rdx,rbx
ffff80000080057a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:58


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
ffff80000080057c:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000800583:	ff ff ff 
ffff800000800586:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080058a:	48 89 c6             	mov    rsi,rax
ffff80000080058d:	b8 82 00 00 c0       	mov    eax,0xc0000082
ffff800000800592:	48 89 c7             	mov    rdi,rax
ffff800000800595:	49 89 df             	mov    r15,rbx
ffff800000800598:	48 b8 0f 33 ee ff ff 	movabs rax,0xffffffffffee330f
ffff80000080059f:	ff ff ff 
ffff8000008005a2:	48 01 d8             	add    rax,rbx
ffff8000008005a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:60
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
ffff8000008005a7:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
ffff8000008005ae:	b8 84 00 00 c0       	mov    eax,0xc0000084
ffff8000008005b3:	48 89 c7             	mov    rdi,rax
ffff8000008005b6:	49 89 df             	mov    r15,rbx
ffff8000008005b9:	48 b8 0f 33 ee ff ff 	movabs rax,0xffffffffffee330f
ffff8000008005c0:	ff ff ff 
ffff8000008005c3:	48 01 d8             	add    rax,rbx
ffff8000008005c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:61
}
ffff8000008005c8:	90                   	nop
ffff8000008005c9:	48 83 c4 10          	add    rsp,0x10
ffff8000008005cd:	5b                   	pop    rbx
ffff8000008005ce:	41 5f                	pop    r15
ffff8000008005d0:	5d                   	pop    rbp
ffff8000008005d1:	c3                   	ret    

ffff8000008005d2 <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:63
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
ffff8000008005d2:	f3 0f 1e fa          	endbr64 
ffff8000008005d6:	55                   	push   rbp
ffff8000008005d7:	48 89 e5             	mov    rbp,rsp
ffff8000008005da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008005da <set_gate+0x8>
ffff8000008005e1:	49 bb 7e d5 11 00 00 	movabs r11,0x11d57e
ffff8000008005e8:	00 00 00 
ffff8000008005eb:	4c 01 d8             	add    rax,r11
ffff8000008005ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008005f2:	89 d6                	mov    esi,edx
ffff8000008005f4:	89 ca                	mov    edx,ecx
ffff8000008005f6:	89 f9                	mov    ecx,edi
ffff8000008005f8:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
ffff8000008005fb:	89 f1                	mov    ecx,esi
ffff8000008005fd:	66 89 4d f8          	mov    WORD PTR [rbp-0x8],cx
ffff800000800601:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:70
    idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector;
#else
    offset|=KNL_BASE;//中断必须在内核空间
ffff800000800605:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080060c:	80 ff ff 
ffff80000080060f:	48 09 55 f0          	or     QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_low=offset&0xffff;
ffff800000800613:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000080061a:	ff ff ff 
ffff80000080061d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000800624:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800628:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080062c:	48 01 ca             	add    rdx,rcx
ffff80000080062f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000800633:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_mid=(offset>>16)&0xffff;
ffff800000800636:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080063a:	48 89 d1             	mov    rcx,rdx
ffff80000080063d:	48 c1 e9 10          	shr    rcx,0x10
ffff800000800641:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800648:	ff ff ff 
ffff80000080064b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080064f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000800652:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800656:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080065a:	48 01 f2             	add    rdx,rsi
ffff80000080065d:	66 89 4a 06          	mov    WORD PTR [rdx+0x6],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].offset_high=(offset>>32);//0x0000ffff;
ffff800000800661:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000800665:	48 89 d1             	mov    rcx,rdx
ffff800000800668:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080066c:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800673:	ff ff ff 
ffff800000800676:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080067a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080067d:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800681:	48 c1 e2 04          	shl    rdx,0x4
ffff800000800685:	48 01 f2             	add    rdx,rsi
ffff800000800688:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].attr=attr|1;//1是ist索引
ffff80000080068b:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800692:	ff ff ff 
ffff800000800695:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800699:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080069c:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006a0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006a4:	48 01 ca             	add    rdx,rcx
ffff8000008006a7:	0f b7 4d ec          	movzx  ecx,WORD PTR [rbp-0x14]
ffff8000008006ab:	83 c9 01             	or     ecx,0x1
ffff8000008006ae:	66 89 4a 04          	mov    WORD PTR [rdx+0x4],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].selector=selector;
ffff8000008006b2:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff8000008006b9:	ff ff ff 
ffff8000008006bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008006c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008006c3:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006c7:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006cb:	48 01 d1             	add    rcx,rdx
ffff8000008006ce:	0f b7 55 f8          	movzx  edx,WORD PTR [rbp-0x8]
ffff8000008006d2:	66 89 51 02          	mov    WORD PTR [rcx+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:76
    idt[index].rsvd=0;
ffff8000008006d6:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff8000008006dd:	ff ff ff 
ffff8000008006e0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008006e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008006e7:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffff8000008006eb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008006ef:	48 01 d0             	add    rax,rdx
ffff8000008006f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:78
#endif
}
ffff8000008006f9:	90                   	nop
ffff8000008006fa:	5d                   	pop    rbp
ffff8000008006fb:	c3                   	ret    

ffff8000008006fc <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:80

void divide_err(){
ffff8000008006fc:	f3 0f 1e fa          	endbr64 
ffff800000800700:	55                   	push   rbp
ffff800000800701:	48 89 e5             	mov    rbp,rsp
ffff800000800704:	41 57                	push   r15
ffff800000800706:	48 83 ec 08          	sub    rsp,0x8
ffff80000080070a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080070a <divide_err+0xe>
ffff800000800711:	49 bb 4e d4 11 00 00 	movabs r11,0x11d44e
ffff800000800718:	00 00 00 
ffff80000080071b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:81
    asm("cli");
ffff80000080071e:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:83
    //puts("divide err");
    eoi();
ffff80000080071f:	49 89 d7             	mov    r15,rdx
ffff800000800722:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800727:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff80000080072e:	ff ff ff 
ffff800000800731:	48 01 d1             	add    rcx,rdx
ffff800000800734:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800736:	fb                   	sti    
ffff800000800737:	c9                   	leave  
ffff800000800738:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:85
}
ffff80000080073a:	90                   	nop
ffff80000080073b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080073f:	c9                   	leave  
ffff800000800740:	c3                   	ret    

ffff800000800741 <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:87

void debug(){
ffff800000800741:	f3 0f 1e fa          	endbr64 
ffff800000800745:	55                   	push   rbp
ffff800000800746:	48 89 e5             	mov    rbp,rsp
ffff800000800749:	41 57                	push   r15
ffff80000080074b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080074f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080074f <debug+0xe>
ffff800000800756:	49 bb 09 d4 11 00 00 	movabs r11,0x11d409
ffff80000080075d:	00 00 00 
ffff800000800760:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:88
    asm("cli");
ffff800000800763:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:90
    //puts("debug");
    eoi();
ffff800000800764:	49 89 d7             	mov    r15,rdx
ffff800000800767:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080076c:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800773:	ff ff ff 
ffff800000800776:	48 01 d1             	add    rcx,rdx
ffff800000800779:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080077b:	fb                   	sti    
ffff80000080077c:	c9                   	leave  
ffff80000080077d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
}
ffff80000080077f:	90                   	nop
ffff800000800780:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800784:	c9                   	leave  
ffff800000800785:	c3                   	ret    

ffff800000800786 <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
void default_int_proc(){
ffff800000800786:	f3 0f 1e fa          	endbr64 
ffff80000080078a:	55                   	push   rbp
ffff80000080078b:	48 89 e5             	mov    rbp,rsp
ffff80000080078e:	41 57                	push   r15
ffff800000800790:	48 83 ec 08          	sub    rsp,0x8
ffff800000800794:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800794 <default_int_proc+0xe>
ffff80000080079b:	49 bb c4 d3 11 00 00 	movabs r11,0x11d3c4
ffff8000008007a2:	00 00 00 
ffff8000008007a5:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:94
    asm("cli");
ffff8000008007a8:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:96
    //puts("default_int_proc");
    eoi();
ffff8000008007a9:	49 89 d7             	mov    r15,rdx
ffff8000008007ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007b1:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff8000008007b8:	ff ff ff 
ffff8000008007bb:	48 01 d1             	add    rcx,rdx
ffff8000008007be:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008007c0:	fb                   	sti    
ffff8000008007c1:	c9                   	leave  
ffff8000008007c2:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
}
ffff8000008007c4:	90                   	nop
ffff8000008007c5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008007c9:	c9                   	leave  
ffff8000008007ca:	c3                   	ret    

ffff8000008007cb <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
void breakpoint(){
ffff8000008007cb:	f3 0f 1e fa          	endbr64 
ffff8000008007cf:	55                   	push   rbp
ffff8000008007d0:	48 89 e5             	mov    rbp,rsp
ffff8000008007d3:	41 57                	push   r15
ffff8000008007d5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008007d9:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008007d9 <breakpoint+0xe>
ffff8000008007e0:	49 bb 7f d3 11 00 00 	movabs r11,0x11d37f
ffff8000008007e7:	00 00 00 
ffff8000008007ea:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:100
    asm("cli");
ffff8000008007ed:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:102
    //puts("breakpoint");
    eoi();
ffff8000008007ee:	49 89 d7             	mov    r15,rdx
ffff8000008007f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007f6:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff8000008007fd:	ff ff ff 
ffff800000800800:	48 01 d1             	add    rcx,rdx
ffff800000800803:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800805:	fb                   	sti    
ffff800000800806:	c9                   	leave  
ffff800000800807:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
}
ffff800000800809:	90                   	nop
ffff80000080080a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080080e:	c9                   	leave  
ffff80000080080f:	c3                   	ret    

ffff800000800810 <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
void overflow(){
ffff800000800810:	f3 0f 1e fa          	endbr64 
ffff800000800814:	55                   	push   rbp
ffff800000800815:	48 89 e5             	mov    rbp,rsp
ffff800000800818:	41 57                	push   r15
ffff80000080081a:	48 83 ec 08          	sub    rsp,0x8
ffff80000080081e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080081e <overflow+0xe>
ffff800000800825:	49 bb 3a d3 11 00 00 	movabs r11,0x11d33a
ffff80000080082c:	00 00 00 
ffff80000080082f:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:106
    asm("cli");
ffff800000800832:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:108
    //puts("overflow");
    eoi();
ffff800000800833:	49 89 d7             	mov    r15,rdx
ffff800000800836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080083b:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800842:	ff ff ff 
ffff800000800845:	48 01 d1             	add    rcx,rdx
ffff800000800848:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080084a:	fb                   	sti    
ffff80000080084b:	c9                   	leave  
ffff80000080084c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
}
ffff80000080084e:	90                   	nop
ffff80000080084f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800853:	c9                   	leave  
ffff800000800854:	c3                   	ret    

ffff800000800855 <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
void bounds(){
ffff800000800855:	f3 0f 1e fa          	endbr64 
ffff800000800859:	55                   	push   rbp
ffff80000080085a:	48 89 e5             	mov    rbp,rsp
ffff80000080085d:	41 57                	push   r15
ffff80000080085f:	48 83 ec 08          	sub    rsp,0x8
ffff800000800863:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800863 <bounds+0xe>
ffff80000080086a:	49 bb f5 d2 11 00 00 	movabs r11,0x11d2f5
ffff800000800871:	00 00 00 
ffff800000800874:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:112
    asm("cli");
ffff800000800877:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:114
    //puts("bounds");
    eoi();
ffff800000800878:	49 89 d7             	mov    r15,rdx
ffff80000080087b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800880:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800887:	ff ff ff 
ffff80000080088a:	48 01 d1             	add    rcx,rdx
ffff80000080088d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080088f:	fb                   	sti    
ffff800000800890:	c9                   	leave  
ffff800000800891:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
}
ffff800000800893:	90                   	nop
ffff800000800894:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800898:	c9                   	leave  
ffff800000800899:	c3                   	ret    

ffff80000080089a <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:117
void undefined_operator(){
ffff80000080089a:	f3 0f 1e fa          	endbr64 
ffff80000080089e:	55                   	push   rbp
ffff80000080089f:	48 89 e5             	mov    rbp,rsp
ffff8000008008a2:	41 57                	push   r15
ffff8000008008a4:	53                   	push   rbx
ffff8000008008a5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008008a5 <undefined_operator+0xb>
ffff8000008008ac:	49 bb b3 d2 11 00 00 	movabs r11,0x11d2b3
ffff8000008008b3:	00 00 00 
ffff8000008008b6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:119
    //puts("undef operator");
    eoi();
ffff8000008008b9:	49 89 df             	mov    r15,rbx
ffff8000008008bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008c1:	48 ba 16 a3 ee ff ff 	movabs rdx,0xffffffffffeea316
ffff8000008008c8:	ff ff ff 
ffff8000008008cb:	48 01 da             	add    rdx,rbx
ffff8000008008ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    report_back_trace_of_err();
ffff8000008008d0:	49 89 df             	mov    r15,rbx
ffff8000008008d3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008d8:	48 ba 46 a3 ee ff ff 	movabs rdx,0xffffffffffeea346
ffff8000008008df:	ff ff ff 
ffff8000008008e2:	48 01 da             	add    rdx,rbx
ffff8000008008e5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
ffff8000008008e7:	eb fe                	jmp    ffff8000008008e7 <undefined_operator+0x4d>
ffff8000008008e9:	c9                   	leave  
ffff8000008008ea:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
}
ffff8000008008ec:	90                   	nop
ffff8000008008ed:	5b                   	pop    rbx
ffff8000008008ee:	41 5f                	pop    r15
ffff8000008008f0:	5d                   	pop    rbp
ffff8000008008f1:	c3                   	ret    

ffff8000008008f2 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
void coprocessor_notexist(){
ffff8000008008f2:	f3 0f 1e fa          	endbr64 
ffff8000008008f6:	55                   	push   rbp
ffff8000008008f7:	48 89 e5             	mov    rbp,rsp
ffff8000008008fa:	41 57                	push   r15
ffff8000008008fc:	48 83 ec 08          	sub    rsp,0x8
ffff800000800900:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800900 <coprocessor_notexist+0xe>
ffff800000800907:	49 bb 58 d2 11 00 00 	movabs r11,0x11d258
ffff80000080090e:	00 00 00 
ffff800000800911:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:124
    asm("cli");
ffff800000800914:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:126
    //puts("coprocessor doesnt exist");
    eoi();
ffff800000800915:	49 89 d7             	mov    r15,rdx
ffff800000800918:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080091d:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800924:	ff ff ff 
ffff800000800927:	48 01 d1             	add    rcx,rdx
ffff80000080092a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080092c:	fb                   	sti    
ffff80000080092d:	c9                   	leave  
ffff80000080092e:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:128
}
ffff800000800930:	90                   	nop
ffff800000800931:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800935:	c9                   	leave  
ffff800000800936:	c3                   	ret    

ffff800000800937 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
void double_ints(){
ffff800000800937:	f3 0f 1e fa          	endbr64 
ffff80000080093b:	55                   	push   rbp
ffff80000080093c:	48 89 e5             	mov    rbp,rsp
ffff80000080093f:	41 57                	push   r15
ffff800000800941:	48 83 ec 08          	sub    rsp,0x8
ffff800000800945:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800945 <double_ints+0xe>
ffff80000080094c:	49 bb 13 d2 11 00 00 	movabs r11,0x11d213
ffff800000800953:	00 00 00 
ffff800000800956:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:130
    asm("cli");
ffff800000800959:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:132
    //puts("double interrupts");
    eoi();
ffff80000080095a:	49 89 d7             	mov    r15,rdx
ffff80000080095d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800962:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800969:	ff ff ff 
ffff80000080096c:	48 01 d1             	add    rcx,rdx
ffff80000080096f:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800971:	fb                   	sti    
ffff800000800972:	c9                   	leave  
ffff800000800973:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:134
}
ffff800000800975:	90                   	nop
ffff800000800976:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080097a:	c9                   	leave  
ffff80000080097b:	c3                   	ret    

ffff80000080097c <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:135
void coprocessor_seg_overbound(){
ffff80000080097c:	f3 0f 1e fa          	endbr64 
ffff800000800980:	55                   	push   rbp
ffff800000800981:	48 89 e5             	mov    rbp,rsp
ffff800000800984:	41 57                	push   r15
ffff800000800986:	48 83 ec 08          	sub    rsp,0x8
ffff80000080098a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080098a <coprocessor_seg_overbound+0xe>
ffff800000800991:	49 bb ce d1 11 00 00 	movabs r11,0x11d1ce
ffff800000800998:	00 00 00 
ffff80000080099b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:137
    //puts("coprocessfor seg overdound");
    eoi();
ffff80000080099e:	49 89 d7             	mov    r15,rdx
ffff8000008009a1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009a6:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff8000008009ad:	ff ff ff 
ffff8000008009b0:	48 01 d1             	add    rcx,rdx
ffff8000008009b3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
    __asm__ volatile ("leave \r\n iretq");
ffff8000008009b5:	c9                   	leave  
ffff8000008009b6:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:139
}
ffff8000008009b8:	90                   	nop
ffff8000008009b9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008009bd:	c9                   	leave  
ffff8000008009be:	c3                   	ret    

ffff8000008009bf <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
void invalid_tss(){
ffff8000008009bf:	f3 0f 1e fa          	endbr64 
ffff8000008009c3:	55                   	push   rbp
ffff8000008009c4:	48 89 e5             	mov    rbp,rsp
ffff8000008009c7:	41 57                	push   r15
ffff8000008009c9:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009cd:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009cd <invalid_tss+0xe>
ffff8000008009d4:	49 bb 8b d1 11 00 00 	movabs r11,0x11d18b
ffff8000008009db:	00 00 00 
ffff8000008009de:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:141
    asm("cli");
ffff8000008009e1:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:143
    //puts("invalid tss");
    eoi();
ffff8000008009e2:	49 89 d7             	mov    r15,rdx
ffff8000008009e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009ea:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff8000008009f1:	ff ff ff 
ffff8000008009f4:	48 01 d1             	add    rcx,rdx
ffff8000008009f7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008009f9:	fb                   	sti    
ffff8000008009fa:	c9                   	leave  
ffff8000008009fb:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:145
}
ffff8000008009fd:	90                   	nop
ffff8000008009fe:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a02:	c9                   	leave  
ffff800000800a03:	c3                   	ret    

ffff800000800a04 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
void segment_notexist(){
ffff800000800a04:	f3 0f 1e fa          	endbr64 
ffff800000800a08:	55                   	push   rbp
ffff800000800a09:	48 89 e5             	mov    rbp,rsp
ffff800000800a0c:	41 57                	push   r15
ffff800000800a0e:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a12:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a12 <segment_notexist+0xe>
ffff800000800a19:	49 bb 46 d1 11 00 00 	movabs r11,0x11d146
ffff800000800a20:	00 00 00 
ffff800000800a23:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:147
    asm("cli");
ffff800000800a26:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:149
    //puts("seg nonexistent");
    eoi();
ffff800000800a27:	49 89 d7             	mov    r15,rdx
ffff800000800a2a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a2f:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800a36:	ff ff ff 
ffff800000800a39:	48 01 d1             	add    rcx,rdx
ffff800000800a3c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a3e:	fb                   	sti    
ffff800000800a3f:	c9                   	leave  
ffff800000800a40:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:151
}
ffff800000800a42:	90                   	nop
ffff800000800a43:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a47:	c9                   	leave  
ffff800000800a48:	c3                   	ret    

ffff800000800a49 <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
void stackseg_overbound(){
ffff800000800a49:	f3 0f 1e fa          	endbr64 
ffff800000800a4d:	55                   	push   rbp
ffff800000800a4e:	48 89 e5             	mov    rbp,rsp
ffff800000800a51:	41 57                	push   r15
ffff800000800a53:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a57:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a57 <stackseg_overbound+0xe>
ffff800000800a5e:	49 bb 01 d1 11 00 00 	movabs r11,0x11d101
ffff800000800a65:	00 00 00 
ffff800000800a68:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:153
    asm("cli");
ffff800000800a6b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:155
    //puts("stack seg overbound");
    eoi();
ffff800000800a6c:	49 89 d7             	mov    r15,rdx
ffff800000800a6f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a74:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800a7b:	ff ff ff 
ffff800000800a7e:	48 01 d1             	add    rcx,rdx
ffff800000800a81:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a83:	fb                   	sti    
ffff800000800a84:	c9                   	leave  
ffff800000800a85:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:157
}
ffff800000800a87:	90                   	nop
ffff800000800a88:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a8c:	c9                   	leave  
ffff800000800a8d:	c3                   	ret    

ffff800000800a8e <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:158
void general_protect(){
ffff800000800a8e:	f3 0f 1e fa          	endbr64 
ffff800000800a92:	55                   	push   rbp
ffff800000800a93:	48 89 e5             	mov    rbp,rsp
ffff800000800a96:	41 57                	push   r15
ffff800000800a98:	48 83 ec 18          	sub    rsp,0x18
ffff800000800a9c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a9c <general_protect+0xe>
ffff800000800aa3:	49 bb bc d0 11 00 00 	movabs r11,0x11d0bc
ffff800000800aaa:	00 00 00 
ffff800000800aad:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:160
    //print("general protect.");
    int err_code=0;
ffff800000800ab0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:178
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
ffff800000800ab7:	49 89 d7             	mov    r15,rdx
ffff800000800aba:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800abf:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800ac6:	ff ff ff 
ffff800000800ac9:	48 01 d1             	add    rcx,rdx
ffff800000800acc:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:179
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
ffff800000800ace:	c9                   	leave  
ffff800000800acf:	48 83 c4 08          	add    rsp,0x8
ffff800000800ad3:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:180
}
ffff800000800ad5:	90                   	nop
ffff800000800ad6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800ada:	c9                   	leave  
ffff800000800adb:	c3                   	ret    

ffff800000800adc <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:182

void coprocessor_err(){
ffff800000800adc:	f3 0f 1e fa          	endbr64 
ffff800000800ae0:	55                   	push   rbp
ffff800000800ae1:	48 89 e5             	mov    rbp,rsp
ffff800000800ae4:	41 57                	push   r15
ffff800000800ae6:	48 83 ec 08          	sub    rsp,0x8
ffff800000800aea:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800aea <coprocessor_err+0xe>
ffff800000800af1:	49 bb 6e d0 11 00 00 	movabs r11,0x11d06e
ffff800000800af8:	00 00 00 
ffff800000800afb:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:183
    asm("cli");
ffff800000800afe:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:185
    //puts("coprocessor err");
    eoi();
ffff800000800aff:	49 89 d7             	mov    r15,rdx
ffff800000800b02:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800b07:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800b0e:	ff ff ff 
ffff800000800b11:	48 01 d1             	add    rcx,rdx
ffff800000800b14:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800b16:	fb                   	sti    
ffff800000800b17:	c9                   	leave  
ffff800000800b18:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:187
}
ffff800000800b1a:	90                   	nop
ffff800000800b1b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800b1f:	c9                   	leave  
ffff800000800b20:	c3                   	ret    

ffff800000800b21 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:206

xchg rcx to r10

*/
int syscall(long a, long b, long c, long d, long e, long f)
{
ffff800000800b21:	f3 0f 1e fa          	endbr64 
ffff800000800b25:	55                   	push   rbp
ffff800000800b26:	48 89 e5             	mov    rbp,rsp
ffff800000800b29:	41 57                	push   r15
ffff800000800b2b:	53                   	push   rbx
ffff800000800b2c:	48 83 ec 40          	sub    rsp,0x40
ffff800000800b30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800b30 <syscall+0xf>
ffff800000800b37:	49 bb 28 d0 11 00 00 	movabs r11,0x11d028
ffff800000800b3e:	00 00 00 
ffff800000800b41:	4c 01 db             	add    rbx,r11
ffff800000800b44:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000800b48:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000800b4c:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000800b50:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff800000800b54:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
ffff800000800b58:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:208
    unsigned long num;
    asm volatile("":"=a"(num));//这样rax中存的参数就到这了
ffff800000800b5c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:209
    switch (num)
ffff800000800b60:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800b64:	48 83 e8 05          	sub    rax,0x5
ffff800000800b68:	48 83 f8 5f          	cmp    rax,0x5f
ffff800000800b6c:	0f 87 ec 02 00 00    	ja     ffff800000800e5e <syscall+0x33d>
ffff800000800b72:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800b79:	00 
ffff800000800b7a:	48 8d 05 7f a1 11 00 	lea    rax,[rip+0x11a17f]        # ffff80000091ad00 <filesystem+0x20>
ffff800000800b81:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800b85:	48 8d 15 74 a1 11 00 	lea    rdx,[rip+0x11a174]        # ffff80000091ad00 <filesystem+0x20>
ffff800000800b8c:	48 01 d0             	add    rax,rdx
ffff800000800b8f:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:216
        // case 0:return reg_device(a);
        // case 1:return dispose_device(a);
        // case 2:return reg_driver(a);
        // case 3:return dispose_driver(a);
        // case 4:return call_drv_func(a,b,c);
        case 5:return req_page_at(a,b);
ffff800000800b92:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800b96:	89 c2                	mov    edx,eax
ffff800000800b98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800b9c:	89 d6                	mov    esi,edx
ffff800000800b9e:	48 89 c7             	mov    rdi,rax
ffff800000800ba1:	49 89 df             	mov    r15,rbx
ffff800000800ba4:	48 b8 28 54 ee ff ff 	movabs rax,0xffffffffffee5428
ffff800000800bab:	ff ff ff 
ffff800000800bae:	48 01 d8             	add    rax,rbx
ffff800000800bb1:	ff d0                	call   rax
ffff800000800bb3:	e9 a6 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:217
        case 6:return free_page(a);
ffff800000800bb8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bbc:	48 89 c7             	mov    rdi,rax
ffff800000800bbf:	49 89 df             	mov    r15,rbx
ffff800000800bc2:	48 b8 1c 51 ee ff ff 	movabs rax,0xffffffffffee511c
ffff800000800bc9:	ff ff ff 
ffff800000800bcc:	48 01 d8             	add    rax,rbx
ffff800000800bcf:	ff d0                	call   rax
ffff800000800bd1:	e9 88 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:218
        case 7:return reg_proc(a, b, c);
ffff800000800bd6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800bda:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000800bde:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800be2:	48 89 ce             	mov    rsi,rcx
ffff800000800be5:	48 89 c7             	mov    rdi,rax
ffff800000800be8:	49 89 df             	mov    r15,rbx
ffff800000800beb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800bf0:	48 b9 ce 80 ee ff ff 	movabs rcx,0xffffffffffee80ce
ffff800000800bf7:	ff ff ff 
ffff800000800bfa:	48 01 d9             	add    rcx,rbx
ffff800000800bfd:	ff d1                	call   rcx
ffff800000800bff:	e9 5a 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        case 8:del_proc(a);
ffff800000800c04:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c08:	89 c7                	mov    edi,eax
ffff800000800c0a:	49 89 df             	mov    r15,rbx
ffff800000800c0d:	48 b8 7f 7d ee ff ff 	movabs rax,0xffffffffffee7d7f
ffff800000800c14:	ff ff ff 
ffff800000800c17:	48 01 d8             	add    rax,rbx
ffff800000800c1a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 10:chk_vm(a,b);
ffff800000800c1c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c20:	89 c2                	mov    edx,eax
ffff800000800c22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c26:	89 d6                	mov    esi,edx
ffff800000800c28:	89 c7                	mov    edi,eax
ffff800000800c2a:	49 89 df             	mov    r15,rbx
ffff800000800c2d:	48 b8 5a 55 ee ff ff 	movabs rax,0xffffffffffee555a
ffff800000800c34:	ff ff ff 
ffff800000800c37:	48 01 d8             	add    rax,rbx
ffff800000800c3a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 11:return sys_open(a,b);
ffff800000800c3c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c40:	89 c2                	mov    edx,eax
ffff800000800c42:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c46:	89 d6                	mov    esi,edx
ffff800000800c48:	48 89 c7             	mov    rdi,rax
ffff800000800c4b:	49 89 df             	mov    r15,rbx
ffff800000800c4e:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff800000800c55:	ff ff ff 
ffff800000800c58:	48 01 d8             	add    rax,rbx
ffff800000800c5b:	ff d0                	call   rax
ffff800000800c5d:	e9 fc 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 12:return sys_close(a);
ffff800000800c62:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c66:	89 c7                	mov    edi,eax
ffff800000800c68:	49 89 df             	mov    r15,rbx
ffff800000800c6b:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff800000800c72:	ff ff ff 
ffff800000800c75:	48 01 d8             	add    rax,rbx
ffff800000800c78:	ff d0                	call   rax
ffff800000800c7a:	e9 df 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 13:return sys_read(a,b,c);
ffff800000800c7f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c83:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800c87:	89 d1                	mov    ecx,edx
ffff800000800c89:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800c8d:	48 89 c6             	mov    rsi,rax
ffff800000800c90:	89 cf                	mov    edi,ecx
ffff800000800c92:	49 89 df             	mov    r15,rbx
ffff800000800c95:	48 b8 5a e4 ee ff ff 	movabs rax,0xffffffffffeee45a
ffff800000800c9c:	ff ff ff 
ffff800000800c9f:	48 01 d8             	add    rax,rbx
ffff800000800ca2:	ff d0                	call   rax
ffff800000800ca4:	e9 b5 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 14:return sys_write(a,b,c);
ffff800000800ca9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800cad:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800cb1:	89 d1                	mov    ecx,edx
ffff800000800cb3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800cb7:	48 89 c6             	mov    rsi,rax
ffff800000800cba:	89 cf                	mov    edi,ecx
ffff800000800cbc:	49 89 df             	mov    r15,rbx
ffff800000800cbf:	48 b8 28 e5 ee ff ff 	movabs rax,0xffffffffffeee528
ffff800000800cc6:	ff ff ff 
ffff800000800cc9:	48 01 d8             	add    rax,rbx
ffff800000800ccc:	ff d0                	call   rax
ffff800000800cce:	e9 8b 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:225
        case 15:return sys_lseek(a,b,c);
ffff800000800cd3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800cd7:	89 c2                	mov    edx,eax
ffff800000800cd9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800cdd:	89 c1                	mov    ecx,eax
ffff800000800cdf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800ce3:	48 89 c6             	mov    rsi,rax
ffff800000800ce6:	89 cf                	mov    edi,ecx
ffff800000800ce8:	49 89 df             	mov    r15,rbx
ffff800000800ceb:	48 b8 f6 e5 ee ff ff 	movabs rax,0xffffffffffeee5f6
ffff800000800cf2:	ff ff ff 
ffff800000800cf5:	48 01 d8             	add    rax,rbx
ffff800000800cf8:	ff d0                	call   rax
ffff800000800cfa:	e9 5f 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:229
        // case 16:return sys_tell(a);
        // case 17:return reg_vol(a,b,c);
        // case 18:return free_vol(a);
        case 19:return execute(a, NULL);
ffff800000800cff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d03:	be 00 00 00 00       	mov    esi,0x0
ffff800000800d08:	48 89 c7             	mov    rdi,rax
ffff800000800d0b:	49 89 df             	mov    r15,rbx
ffff800000800d0e:	48 b8 8c a6 ee ff ff 	movabs rax,0xffffffffffeea68c
ffff800000800d15:	ff ff ff 
ffff800000800d18:	48 01 d8             	add    rax,rbx
ffff800000800d1b:	ff d0                	call   rax
ffff800000800d1d:	e9 3c 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:230
        case SYSCALL_EXIT:return sys_exit(a);
ffff800000800d22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d26:	89 c7                	mov    edi,eax
ffff800000800d28:	49 89 df             	mov    r15,rbx
ffff800000800d2b:	48 b8 54 80 ee ff ff 	movabs rax,0xffffffffffee8054
ffff800000800d32:	ff ff ff 
ffff800000800d35:	48 01 d8             	add    rax,rbx
ffff800000800d38:	ff d0                	call   rax
ffff800000800d3a:	e9 1f 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:231
        case SYSCALL_CALL:return exec_call(a);
ffff800000800d3f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d43:	48 89 c7             	mov    rdi,rax
ffff800000800d46:	49 89 df             	mov    r15,rbx
ffff800000800d49:	48 b8 8f aa ee ff ff 	movabs rax,0xffffffffffeeaa8f
ffff800000800d50:	ff ff ff 
ffff800000800d53:	48 01 d8             	add    rax,rbx
ffff800000800d56:	ff d0                	call   rax
ffff800000800d58:	e9 01 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        // case SYSCALL_MKFIFO:return sys_mkfifo(a);
        case SYSCALL_MALLOC:return sys_malloc(a);
ffff800000800d5d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d61:	48 89 c7             	mov    rdi,rax
ffff800000800d64:	49 89 df             	mov    r15,rbx
ffff800000800d67:	48 b8 b2 83 ee ff ff 	movabs rax,0xffffffffffee83b2
ffff800000800d6e:	ff ff ff 
ffff800000800d71:	48 01 d8             	add    rax,rbx
ffff800000800d74:	ff d0                	call   rax
ffff800000800d76:	e9 e3 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_FREE:return sys_free(a);
ffff800000800d7b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d7f:	89 c7                	mov    edi,eax
ffff800000800d81:	49 89 df             	mov    r15,rbx
ffff800000800d84:	48 b8 9f 85 ee ff ff 	movabs rax,0xffffffffffee859f
ffff800000800d8b:	ff ff ff 
ffff800000800d8e:	48 01 d8             	add    rax,rbx
ffff800000800d91:	ff d0                	call   rax
ffff800000800d93:	e9 c6 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:235
        case SYSCALL_KB_READC:return sys_analyse_key();
ffff800000800d98:	49 89 df             	mov    r15,rbx
ffff800000800d9b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800da0:	48 ba bc 08 ef ff ff 	movabs rdx,0xffffffffffef08bc
ffff800000800da7:	ff ff ff 
ffff800000800daa:	48 01 da             	add    rdx,rbx
ffff800000800dad:	ff d2                	call   rdx
ffff800000800daf:	0f be c0             	movsx  eax,al
ffff800000800db2:	e9 a7 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        // case SYSCALL_FIND_DEV:return sys_find_dev(a);
        case SYSCALL_FORK:return sys_fork();
ffff800000800db7:	49 89 df             	mov    r15,rbx
ffff800000800dba:	48 b8 c6 89 ee ff ff 	movabs rax,0xffffffffffee89c6
ffff800000800dc1:	ff ff ff 
ffff800000800dc4:	48 01 d8             	add    rax,rbx
ffff800000800dc7:	ff d0                	call   rax
ffff800000800dc9:	e9 90 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:238
        case SYSCALL_EXECVE:return sys_execve(a, b, c);
ffff800000800dce:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800dd2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800dd6:	89 c1                	mov    ecx,eax
ffff800000800dd8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800ddc:	89 ce                	mov    esi,ecx
ffff800000800dde:	48 89 c7             	mov    rdi,rax
ffff800000800de1:	49 89 df             	mov    r15,rbx
ffff800000800de4:	48 b8 80 a7 ee ff ff 	movabs rax,0xffffffffffeea780
ffff800000800deb:	ff ff ff 
ffff800000800dee:	48 01 d8             	add    rax,rbx
ffff800000800df1:	ff d0                	call   rax
ffff800000800df3:	eb 69                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        // case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
        case SYSCALL_WAIT:return sys_wait(a,b,c);
ffff800000800df5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800df9:	89 c6                	mov    esi,eax
ffff800000800dfb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800dff:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800e03:	89 d1                	mov    ecx,edx
ffff800000800e05:	89 f2                	mov    edx,esi
ffff800000800e07:	48 89 c6             	mov    rsi,rax
ffff800000800e0a:	89 cf                	mov    edi,ecx
ffff800000800e0c:	49 89 df             	mov    r15,rbx
ffff800000800e0f:	48 b8 3f e7 ee ff ff 	movabs rax,0xffffffffffeee73f
ffff800000800e16:	ff ff ff 
ffff800000800e19:	48 01 d8             	add    rax,rbx
ffff800000800e1c:	ff d0                	call   rax
ffff800000800e1e:	eb 3e                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:241
        case SYSCALL_MMAP:return sys_mmap(a,b,c,d,e,f);
ffff800000800e20:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000800e24:	41 89 c0             	mov    r8d,eax
ffff800000800e27:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000800e2b:	89 c7                	mov    edi,eax
ffff800000800e2d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000800e31:	89 c1                	mov    ecx,eax
ffff800000800e33:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800e37:	89 c2                	mov    edx,eax
ffff800000800e39:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000800e3d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e41:	45 89 c1             	mov    r9d,r8d
ffff800000800e44:	41 89 f8             	mov    r8d,edi
ffff800000800e47:	48 89 c7             	mov    rdi,rax
ffff800000800e4a:	49 89 df             	mov    r15,rbx
ffff800000800e4d:	48 b8 5a ed ee ff ff 	movabs rax,0xffffffffffeeed5a
ffff800000800e54:	ff ff ff 
ffff800000800e57:	48 01 d8             	add    rax,rbx
ffff800000800e5a:	ff d0                	call   rax
ffff800000800e5c:	eb 00                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:247
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
ffff800000800e5e:	48 83 c4 40          	add    rsp,0x40
ffff800000800e62:	5b                   	pop    rbx
ffff800000800e63:	41 5f                	pop    r15
ffff800000800e65:	5d                   	pop    rbp
ffff800000800e66:	c3                   	ret    

ffff800000800e67 <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:249
void wrmsr(unsigned long address,unsigned long value)
{
ffff800000800e67:	f3 0f 1e fa          	endbr64 
ffff800000800e6b:	55                   	push   rbp
ffff800000800e6c:	48 89 e5             	mov    rbp,rsp
ffff800000800e6f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800e6f <wrmsr+0x8>
ffff800000800e76:	49 bb e9 cc 11 00 00 	movabs r11,0x11cce9
ffff800000800e7d:	00 00 00 
ffff800000800e80:	4c 01 d8             	add    rax,r11
ffff800000800e83:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000800e87:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
ffff800000800e8b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800e8f:	48 c1 e8 20          	shr    rax,0x20
ffff800000800e93:	48 89 c2             	mov    rdx,rax
ffff800000800e96:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800e9a:	89 c0                	mov    eax,eax
ffff800000800e9c:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000800ea0:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:251
ffff800000800ea2:	90                   	nop
ffff800000800ea3:	5d                   	pop    rbp
ffff800000800ea4:	c3                   	ret    

ffff800000800ea5 <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:24
#include "ramdisk.h"
#include "ramfs.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
ffff800000800ea5:	f3 0f 1e fa          	endbr64 
ffff800000800ea9:	55                   	push   rbp
ffff800000800eaa:	48 89 e5             	mov    rbp,rsp
ffff800000800ead:	41 57                	push   r15
ffff800000800eaf:	53                   	push   rbx
ffff800000800eb0:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000800eb7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800eb7 <main+0x12>
ffff800000800ebe:	49 bb a1 cc 11 00 00 	movabs r11,0x11cca1
ffff800000800ec5:	00 00 00 
ffff800000800ec8:	4c 01 db             	add    rbx,r11
ffff800000800ecb:	89 bd fc fe ff ff    	mov    DWORD PTR [rbp-0x104],edi
ffff800000800ed1:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26

    struct multiboot_header* mbi=0ul;
ffff800000800ed8:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000800edf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    mbi=(struct multiboot_header*)addr;
ffff800000800ee0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800ee7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:28
    init_logging();
ffff800000800eeb:	49 89 df             	mov    r15,rbx
ffff800000800eee:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800ef3:	48 ba ce 39 ee ff ff 	movabs rdx,0xffffffffffee39ce
ffff800000800efa:	ff ff ff 
ffff800000800efd:	48 01 da             	add    rdx,rbx
ffff800000800f00:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
ffff800000800f02:	bf f8 03 00 00       	mov    edi,0x3f8
ffff800000800f07:	49 89 df             	mov    r15,rbx
ffff800000800f0a:	48 b8 9f 49 ef ff ff 	movabs rax,0xffffffffffef499f
ffff800000800f11:	ff ff ff 
ffff800000800f14:	48 01 d8             	add    rax,rbx
ffff800000800f17:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:39
    comprintf("\rgamessis os loaded.\r\n");
ffff800000800f19:	48 b8 a8 d4 ff ff ff 	movabs rax,0xffffffffffffd4a8
ffff800000800f20:	ff ff ff 
ffff800000800f23:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000800f27:	48 89 c7             	mov    rdi,rax
ffff800000800f2a:	49 89 df             	mov    r15,rbx
ffff800000800f2d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800f32:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff800000800f39:	ff ff ff 
ffff800000800f3c:	48 01 da             	add    rdx,rbx
ffff800000800f3f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:41
	unsigned size;
    size = *(unsigned long*)addr;
ffff800000800f41:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800f48:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000800f4b:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
ffff800000800f4e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800f55:	48 83 c0 08          	add    rax,0x8
ffff800000800f59:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000800f5d:	e9 93 02 00 00       	jmp    ffff8000008011f5 <main+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
		switch (tag->type)
ffff800000800f62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800f66:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000800f68:	83 f8 08             	cmp    eax,0x8
ffff800000800f6b:	0f 87 71 02 00 00    	ja     ffff8000008011e2 <main+0x33d>
ffff800000800f71:	89 c0                	mov    eax,eax
ffff800000800f73:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800f7a:	00 
ffff800000800f7b:	48 8d 05 de a0 11 00 	lea    rax,[rip+0x11a0de]        # ffff80000091b060 <.LC4+0x11>
ffff800000800f82:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800f86:	48 8d 15 d3 a0 11 00 	lea    rdx,[rip+0x11a0d3]        # ffff80000091b060 <.LC4+0x11>
ffff800000800f8d:	48 01 d0             	add    rax,rdx
ffff800000800f90:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:66
			break;
		case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
			//printf("mem_lower = %uKB, mem_upper = %uKB\n",
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_lower,
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_upper);
			set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
ffff800000800f93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800f97:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000800f9a:	89 c7                	mov    edi,eax
ffff800000800f9c:	49 89 df             	mov    r15,rbx
ffff800000800f9f:	48 b8 b8 42 ee ff ff 	movabs rax,0xffffffffffee42b8
ffff800000800fa6:	ff ff ff 
ffff800000800fa9:	48 01 d8             	add    rax,rbx
ffff800000800fac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:67
			break;
ffff800000800fae:	e9 2f 02 00 00       	jmp    ffff8000008011e2 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80

			break;
		case MULTIBOOT_TAG_TYPE_MMAP:
		{
			//printf("mmap\n");
            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
ffff800000800fb3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800fb7:	48 83 c0 10          	add    rax,0x10
ffff800000800fbb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000800fbf:	eb 44                	jmp    ffff800000801005 <main+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:84
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
ffff800000800fc1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fc5:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000800fc8:	89 c2                	mov    edx,eax
ffff800000800fca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fce:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff800000800fd2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fd6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000800fd9:	48 89 ce             	mov    rsi,rcx
ffff800000800fdc:	48 89 c7             	mov    rdi,rax
ffff800000800fdf:	49 89 df             	mov    r15,rbx
ffff800000800fe2:	48 b8 ed 42 ee ff ff 	movabs rax,0xffffffffffee42ed
ffff800000800fe9:	ff ff ff 
ffff800000800fec:	48 01 d8             	add    rax,rbx
ffff800000800fef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
ffff800000800ff1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800ff5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000800ff8:	89 c2                	mov    edx,eax
ffff800000800ffa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800ffe:	48 01 d0             	add    rax,rdx
ffff800000801001:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:81
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
ffff800000801005:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801009:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080100c:	89 c2                	mov    edx,eax
ffff80000080100e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801012:	48 01 d0             	add    rax,rdx
ffff800000801015:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000801019:	72 a6                	jb     ffff800000800fc1 <main+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:88
            }

		}
		break;
ffff80000080101b:	e9 c2 01 00 00       	jmp    ffff8000008011e2 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93
		case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
		{
			multiboot_uint32_t color;
			unsigned i;
			struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
ffff800000801020:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801024:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:94
			void *fb = (void *) FRAMEBUFFER_ADDR;
ffff800000801028:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080102f:	80 ff ff 
ffff800000801032:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:95
			set_framebuffer(*tagfb);
ffff800000801036:	48 83 ec 08          	sub    rsp,0x8
ffff80000080103a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080103e:	ff 70 20             	push   QWORD PTR [rax+0x20]
ffff800000801041:	ff 70 18             	push   QWORD PTR [rax+0x18]
ffff800000801044:	ff 70 10             	push   QWORD PTR [rax+0x10]
ffff800000801047:	ff 70 08             	push   QWORD PTR [rax+0x8]
ffff80000080104a:	ff 30                	push   QWORD PTR [rax]
ffff80000080104c:	49 89 df             	mov    r15,rbx
ffff80000080104f:	48 b8 e2 c9 ee ff ff 	movabs rax,0xffffffffffeec9e2
ffff800000801056:	ff ff ff 
ffff800000801059:	48 01 d8             	add    rax,rbx
ffff80000080105c:	ff d0                	call   rax
ffff80000080105e:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97

			switch (tagfb->common.framebuffer_type)
ffff800000801062:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801066:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
ffff80000080106a:	0f b6 c0             	movzx  eax,al
ffff80000080106d:	83 f8 02             	cmp    eax,0x2
ffff800000801070:	0f 84 5a 01 00 00    	je     ffff8000008011d0 <main+0x32b>
ffff800000801076:	83 f8 02             	cmp    eax,0x2
ffff800000801079:	0f 8f 5a 01 00 00    	jg     ffff8000008011d9 <main+0x334>
ffff80000080107f:	85 c0                	test   eax,eax
ffff800000801081:	74 0e                	je     ffff800000801091 <main+0x1ec>
ffff800000801083:	83 f8 01             	cmp    eax,0x1
ffff800000801086:	0f 84 15 01 00 00    	je     ffff8000008011a1 <main+0x2fc>
ffff80000080108c:	e9 48 01 00 00       	jmp    ffff8000008011d9 <main+0x334>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:104
			case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
			{
				unsigned best_distance, distance;
				struct multiboot_color *palette;

				palette = tagfb->framebuffer_palette;
ffff800000801091:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801095:	48 83 c0 22          	add    rax,0x22
ffff800000801099:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:106

				color = 0;
ffff80000080109d:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:107
				best_distance = 4 * 256 * 256;
ffff8000008010a4:	c7 45 d8 00 00 04 00 	mov    DWORD PTR [rbp-0x28],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109

				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff8000008010ab:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff8000008010b2:	e9 d4 00 00 00       	jmp    ffff80000080118b <main+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:111
				{
					distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
ffff8000008010b7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008010ba:	48 89 d0             	mov    rax,rdx
ffff8000008010bd:	48 01 c0             	add    rax,rax
ffff8000008010c0:	48 01 c2             	add    rdx,rax
ffff8000008010c3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008010c7:	48 01 d0             	add    rax,rdx
ffff8000008010ca:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008010ce:	0f b6 c0             	movzx  eax,al
ffff8000008010d1:	ba ff 00 00 00       	mov    edx,0xff
ffff8000008010d6:	89 d1                	mov    ecx,edx
ffff8000008010d8:	29 c1                	sub    ecx,eax
ffff8000008010da:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008010dd:	48 89 d0             	mov    rax,rdx
ffff8000008010e0:	48 01 c0             	add    rax,rax
ffff8000008010e3:	48 01 c2             	add    rdx,rax
ffff8000008010e6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008010ea:	48 01 d0             	add    rax,rdx
ffff8000008010ed:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008010f1:	0f b6 d0             	movzx  edx,al
ffff8000008010f4:	b8 ff 00 00 00       	mov    eax,0xff
ffff8000008010f9:	29 d0                	sub    eax,edx
ffff8000008010fb:	89 ce                	mov    esi,ecx
ffff8000008010fd:	0f af f0             	imul   esi,eax
ffff800000801100:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801103:	48 89 d0             	mov    rax,rdx
ffff800000801106:	48 01 c0             	add    rax,rax
ffff800000801109:	48 01 c2             	add    rdx,rax
ffff80000080110c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801110:	48 01 d0             	add    rax,rdx
ffff800000801113:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801116:	0f b6 c8             	movzx  ecx,al
ffff800000801119:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080111c:	48 89 d0             	mov    rax,rdx
ffff80000080111f:	48 01 c0             	add    rax,rax
ffff800000801122:	48 01 c2             	add    rdx,rax
ffff800000801125:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801129:	48 01 d0             	add    rax,rdx
ffff80000080112c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080112f:	0f b6 c0             	movzx  eax,al
ffff800000801132:	0f af c1             	imul   eax,ecx
ffff800000801135:	01 c6                	add    esi,eax
ffff800000801137:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080113a:	48 89 d0             	mov    rax,rdx
ffff80000080113d:	48 01 c0             	add    rax,rax
ffff800000801140:	48 01 c2             	add    rdx,rax
ffff800000801143:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801147:	48 01 d0             	add    rax,rdx
ffff80000080114a:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff80000080114e:	0f b6 c8             	movzx  ecx,al
ffff800000801151:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801154:	48 89 d0             	mov    rax,rdx
ffff800000801157:	48 01 c0             	add    rax,rax
ffff80000080115a:	48 01 c2             	add    rdx,rax
ffff80000080115d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801161:	48 01 d0             	add    rax,rdx
ffff800000801164:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801168:	0f b6 c0             	movzx  eax,al
ffff80000080116b:	0f af c1             	imul   eax,ecx
ffff80000080116e:	01 f0                	add    eax,esi
ffff800000801170:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:112
					if (distance < best_distance)
ffff800000801173:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801176:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000801179:	73 0c                	jae    ffff800000801187 <main+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:114
					{
						color = i;
ffff80000080117b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080117e:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:115
						best_distance = distance;
ffff800000801181:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801184:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 2)
				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801187:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 1)
ffff80000080118b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080118f:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
ffff800000801193:	0f b7 c0             	movzx  eax,ax
ffff800000801196:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000801199:	0f 82 18 ff ff ff    	jb     ffff8000008010b7 <main+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:119
					}
				}
			}
			break;
ffff80000080119f:	eb 40                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:122

			case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
				color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
ffff8000008011a1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008011a5:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
ffff8000008011a9:	0f b6 c0             	movzx  eax,al
ffff8000008011ac:	ba 01 00 00 00       	mov    edx,0x1
ffff8000008011b1:	89 c1                	mov    ecx,eax
ffff8000008011b3:	d3 e2                	shl    edx,cl
ffff8000008011b5:	89 d0                	mov    eax,edx
ffff8000008011b7:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008011ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008011be:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffff8000008011c2:	0f b6 c0             	movzx  eax,al
ffff8000008011c5:	89 c1                	mov    ecx,eax
ffff8000008011c7:	d3 e2                	shl    edx,cl
ffff8000008011c9:	89 d0                	mov    eax,edx
ffff8000008011cb:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:123
				break;
ffff8000008011ce:	eb 11                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:126

			case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
				color = '\\' | 0x0100;
ffff8000008011d0:	c7 45 b4 5c 01 00 00 	mov    DWORD PTR [rbp-0x4c],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:127
				break;
ffff8000008011d7:	eb 08                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:130

			default:
				color = 0xffffffff;
ffff8000008011d9:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:131
				break;
ffff8000008011e0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:134 (discriminator 1)
			}

			break;
ffff8000008011e1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:45
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
ffff8000008011e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008011e6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008011e9:	83 c0 07             	add    eax,0x7
ffff8000008011ec:	89 c0                	mov    eax,eax
ffff8000008011ee:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008011f1:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag->type != MULTIBOOT_TAG_TYPE_END;
ffff8000008011f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008011f9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008011fb:	85 c0                	test   eax,eax
ffff8000008011fd:	0f 85 5f fd ff ff    	jne    ffff800000800f62 <main+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:138
		}
		}
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
ffff800000801203:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801207:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080120a:	83 c0 07             	add    eax,0x7
ffff80000080120d:	89 c0                	mov    eax,eax
ffff80000080120f:	83 e0 f8             	and    eax,0xfffffff8
ffff800000801212:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:139
    init_memory();
ffff800000801216:	49 89 df             	mov    r15,rbx
ffff800000801219:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080121e:	48 ba 3d 4a ee ff ff 	movabs rdx,0xffffffffffee4a3d
ffff800000801225:	ff ff ff 
ffff800000801228:	48 01 da             	add    rdx,rbx
ffff80000080122b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:140
    init_framebuffer();
ffff80000080122d:	49 89 df             	mov    r15,rbx
ffff800000801230:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801235:	48 ba fc c6 ee ff ff 	movabs rdx,0xffffffffffeec6fc
ffff80000080123c:	ff ff ff 
ffff80000080123f:	48 01 da             	add    rdx,rbx
ffff800000801242:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:142
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
ffff800000801244:	b8 75 04 00 00       	mov    eax,0x475
ffff800000801249:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080124c:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:144
	//printf("disk count:%d\n",disk_count);
    init_font();
ffff80000080124f:	49 89 df             	mov    r15,rbx
ffff800000801252:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801257:	48 ba 2d c8 ee ff ff 	movabs rdx,0xffffffffffeec82d
ffff80000080125e:	ff ff ff 
ffff800000801261:	48 01 da             	add    rdx,rbx
ffff800000801264:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:147
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
ffff800000801266:	48 b8 bf d4 ff ff ff 	movabs rax,0xffffffffffffd4bf
ffff80000080126d:	ff ff ff 
ffff800000801270:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801274:	48 89 c7             	mov    rdi,rax
ffff800000801277:	49 89 df             	mov    r15,rbx
ffff80000080127a:	48 b8 49 cf ee ff ff 	movabs rax,0xffffffffffeecf49
ffff800000801281:	ff ff ff 
ffff800000801284:	48 01 d8             	add    rax,rbx
ffff800000801287:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:148
    init_int();
ffff800000801289:	49 89 df             	mov    r15,rbx
ffff80000080128c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801291:	48 ba a8 24 ee ff ff 	movabs rdx,0xffffffffffee24a8
ffff800000801298:	ff ff ff 
ffff80000080129b:	48 01 da             	add    rdx,rbx
ffff80000080129e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:149
    print("int loaded.\n");
ffff8000008012a0:	48 b8 dc d4 ff ff ff 	movabs rax,0xffffffffffffd4dc
ffff8000008012a7:	ff ff ff 
ffff8000008012aa:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008012ae:	48 89 c7             	mov    rdi,rax
ffff8000008012b1:	49 89 df             	mov    r15,rbx
ffff8000008012b4:	48 b8 49 cf ee ff ff 	movabs rax,0xffffffffffeecf49
ffff8000008012bb:	ff ff ff 
ffff8000008012be:	48 01 d8             	add    rax,rbx
ffff8000008012c1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:151
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
ffff8000008012c3:	49 89 df             	mov    r15,rbx
ffff8000008012c6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008012cb:	48 ba 81 42 ee ff ff 	movabs rdx,0xffffffffffee4281
ffff8000008012d2:	ff ff ff 
ffff8000008012d5:	48 01 da             	add    rdx,rbx
ffff8000008012d8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:152
 	init_gdt();
ffff8000008012da:	49 89 df             	mov    r15,rbx
ffff8000008012dd:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008012e2:	48 ba 65 a3 ee ff ff 	movabs rdx,0xffffffffffeea365
ffff8000008012e9:	ff ff ff 
ffff8000008012ec:	48 01 da             	add    rdx,rbx
ffff8000008012ef:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:154

	init_blkdev();
ffff8000008012f1:	49 89 df             	mov    r15,rbx
ffff8000008012f4:	48 b8 b6 f9 ee ff ff 	movabs rax,0xffffffffffeef9b6
ffff8000008012fb:	ff ff ff 
ffff8000008012fe:	48 01 d8             	add    rax,rbx
ffff800000801301:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:155
	init_blkbuf();
ffff800000801303:	49 89 df             	mov    r15,rbx
ffff800000801306:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080130b:	48 ba 09 fa ee ff ff 	movabs rdx,0xffffffffffeefa09
ffff800000801312:	ff ff ff 
ffff800000801315:	48 01 da             	add    rdx,rbx
ffff800000801318:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:157
	// init_disk();
    init_ramdisk();
ffff80000080131a:	49 89 df             	mov    r15,rbx
ffff80000080131d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801322:	48 ba 77 f4 ee ff ff 	movabs rdx,0xffffffffffeef477
ffff800000801329:	ff ff ff 
ffff80000080132c:	48 01 da             	add    rdx,rbx
ffff80000080132f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:158
    init_rootfs();
ffff800000801331:	49 89 df             	mov    r15,rbx
ffff800000801334:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801339:	48 ba dc d9 ee ff ff 	movabs rdx,0xffffffffffeed9dc
ffff800000801340:	ff ff ff 
ffff800000801343:	48 01 da             	add    rdx,rbx
ffff800000801346:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:159
    init_devfs();
ffff800000801348:	49 89 df             	mov    r15,rbx
ffff80000080134b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801350:	48 ba 0d 5b ee ff ff 	movabs rdx,0xffffffffffee5b0d
ffff800000801357:	ff ff ff 
ffff80000080135a:	48 01 da             	add    rdx,rbx
ffff80000080135d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:161

    init_proc();
ffff80000080135f:	49 89 df             	mov    r15,rbx
ffff800000801362:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801367:	48 ba 7b 68 ee ff ff 	movabs rdx,0xffffffffffee687b
ffff80000080136e:	ff ff ff 
ffff800000801371:	48 01 da             	add    rdx,rbx
ffff800000801374:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:163
	// init_ramfs();
  	DISK1_FAT32_FS_init();
ffff800000801376:	49 89 df             	mov    r15,rbx
ffff800000801379:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080137e:	48 ba 6d 41 ef ff ff 	movabs rdx,0xffffffffffef416d
ffff800000801385:	ff ff ff 
ffff800000801388:	48 01 da             	add    rdx,rbx
ffff80000080138b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:167

    //自带驱动
    //init_tty();
    init_kb();
ffff80000080138d:	49 89 df             	mov    r15,rbx
ffff800000801390:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801395:	48 ba 59 06 ef ff ff 	movabs rdx,0xffffffffffef0659
ffff80000080139c:	ff ff ff 
ffff80000080139f:	48 01 da             	add    rdx,rbx
ffff8000008013a2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:169
//    init_disk();
    sti();
ffff8000008013a4:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:170
    manage_proc_lock=0;
ffff8000008013a5:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff8000008013ac:	ff ff ff 
ffff8000008013af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008013b3:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:173


    move_to_user_mode();
ffff8000008013b9:	49 89 df             	mov    r15,rbx
ffff8000008013bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008013c1:	48 ba 04 5a ef ff ff 	movabs rdx,0xffffffffffef5a04
ffff8000008013c8:	ff ff ff 
ffff8000008013cb:	48 01 da             	add    rdx,rbx
ffff8000008013ce:	ff d2                	call   rdx
ffff8000008013d0:	48 c7 45 98 1b 00 00 	mov    QWORD PTR [rbp-0x68],0x1b
ffff8000008013d7:	00 
ffff8000008013d8:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff8000008013df:	00 
ffff8000008013e0:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffff8000008013e7:	00 
ffff8000008013e8:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
ffff8000008013ef:	00 
ffff8000008013f0:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
ffff8000008013f7:	00 00 00 00 
ffff8000008013fb:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
ffff800000801402:	00 00 00 00 
ffff800000801406:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
ffff80000080140d:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63

#define	SYSTEM_REBOOT	(1UL << 0)
#define	SYSTEM_POWEROFF	(1UL << 1)

__attribute__((__always_inline__))inline int do_syscall(long func,long a1,long a2,long a3,long a4,long a5,long a6){
        asm volatile(".byte 0x48\n"
ffff800000801411:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000801415:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
ffff800000801419:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff80000080141d:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000801421:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffff800000801428:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
ffff80000080142f:	4c 8b 8d 68 ff ff ff 	mov    r9,QWORD PTR [rbp-0x98]
ffff800000801436:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
        long ret=0;
ffff800000801439:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff800000801440:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff800000801444:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:67
        return ret;
ffff80000080144b:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:174
    if(do_syscall(SYSCALL_FORK,0,0,0,0,0,0)==0){
ffff800000801452:	85 c0                	test   eax,eax
ffff800000801454:	0f 85 ca 00 00 00    	jne    ffff800000801524 <main+0x67f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:175
        char *argv[]={"/mnt/test.exe","gamessis os"};
ffff80000080145a:	48 b8 e9 d4 ff ff ff 	movabs rax,0xffffffffffffd4e9
ffff800000801461:	ff ff ff 
ffff800000801464:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801468:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000080146f:	48 b8 f7 d4 ff ff ff 	movabs rax,0xffffffffffffd4f7
ffff800000801476:	ff ff ff 
ffff800000801479:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080147d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:176
        do_syscall(SYSCALL_EXECVE, (long) "/mnt/test.exe", 2, (long) &argv[0], 0, 0, 0);
ffff800000801484:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff80000080148b:	48 ba e9 d4 ff ff ff 	movabs rdx,0xffffffffffffd4e9
ffff800000801492:	ff ff ff 
ffff800000801495:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000801499:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x1c
ffff8000008014a0:	1c 00 00 00 
ffff8000008014a4:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffff8000008014ab:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x2
ffff8000008014b2:	02 00 00 00 
ffff8000008014b6:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffff8000008014bd:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffff8000008014c4:	00 00 00 00 
ffff8000008014c8:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff8000008014cf:	00 00 00 00 
ffff8000008014d3:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
ffff8000008014da:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        asm volatile(".byte 0x48\n"
ffff8000008014de:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008014e5:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
ffff8000008014ec:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
ffff8000008014f3:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff8000008014fa:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffff800000801501:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffff800000801508:	4c 8b 8d 30 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd0]
ffff80000080150f:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff800000801512:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
ffff800000801519:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff80000080151d:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:187 (discriminator 3)
//    init_fat16();

//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
ffff800000801524:	eb fe                	jmp    ffff800000801524 <main+0x67f>

ffff800000801526 <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
ffff800000801526:	f3 0f 1e fa          	endbr64 
ffff80000080152a:	55                   	push   rbp
ffff80000080152b:	48 89 e5             	mov    rbp,rsp
ffff80000080152e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080152e <init_logging+0x8>
ffff800000801535:	49 bb 2a c6 11 00 00 	movabs r11,0x11c62a
ffff80000080153c:	00 00 00 
ffff80000080153f:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
ffff800000801542:	48 ba a8 24 ae ff ff 	movabs rdx,0xffffffffffae24a8
ffff800000801549:	ff ff ff 
ffff80000080154c:	48 c7 04 10 00 80 0b 	mov    QWORD PTR [rax+rdx*1],0xb8000
ffff800000801553:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
ffff800000801554:	48 ba b0 24 ae ff ff 	movabs rdx,0xffffffffffae24b0
ffff80000080155b:	ff ff ff 
ffff80000080155e:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
ffff800000801565:	48 ba b4 24 ae ff ff 	movabs rdx,0xffffffffffae24b4
ffff80000080156c:	ff ff ff 
ffff80000080156f:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
ffff800000801576:	90                   	nop
ffff800000801577:	5d                   	pop    rbp
ffff800000801578:	c3                   	ret    

ffff800000801579 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
ffff800000801579:	f3 0f 1e fa          	endbr64 
ffff80000080157d:	55                   	push   rbp
ffff80000080157e:	48 89 e5             	mov    rbp,rsp
ffff800000801581:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801581 <itoa+0x8>
ffff800000801588:	49 bb d7 c5 11 00 00 	movabs r11,0x11c5d7
ffff80000080158f:	00 00 00 
ffff800000801592:	4c 01 d8             	add    rax,r11
ffff800000801595:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801599:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080159c:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
ffff80000080159f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008015a3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
ffff8000008015a7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008015aa:	48 98                	cdqe   
ffff8000008015ac:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
ffff8000008015b0:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
ffff8000008015b7:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
ffff8000008015bb:	75 27                	jne    ffff8000008015e4 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
ffff8000008015bd:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
ffff8000008015c1:	79 21                	jns    ffff8000008015e4 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
ffff8000008015c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008015c7:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008015cb:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008015cf:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
ffff8000008015d2:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
ffff8000008015d7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008015da:	f7 d8                	neg    eax
ffff8000008015dc:	48 98                	cdqe   
ffff8000008015de:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008015e2:	eb 0d                	jmp    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
ffff8000008015e4:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
ffff8000008015e8:	75 07                	jne    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
ffff8000008015ea:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
ffff8000008015f1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008015f4:	48 63 c8             	movsxd rcx,eax
ffff8000008015f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008015fb:	ba 00 00 00 00       	mov    edx,0x0
ffff800000801600:	48 f7 f1             	div    rcx
ffff800000801603:	48 89 d0             	mov    rax,rdx
ffff800000801606:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffff800000801609:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
ffff80000080160d:	7f 0a                	jg     ffff800000801619 <itoa+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
ffff80000080160f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000801612:	83 c0 30             	add    eax,0x30
ffff800000801615:	89 c1                	mov    ecx,eax
ffff800000801617:	eb 08                	jmp    ffff800000801621 <itoa+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
ffff800000801619:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080161c:	83 c0 57             	add    eax,0x57
ffff80000080161f:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
ffff800000801621:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801625:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000801629:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000080162d:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
ffff80000080162f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000801632:	48 63 f0             	movsxd rsi,eax
ffff800000801635:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801639:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080163e:	48 f7 f6             	div    rsi
ffff800000801641:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000801645:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080164a:	75 a5                	jne    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
ffff80000080164c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801650:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
ffff800000801653:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801657:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
ffff80000080165b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080165f:	48 83 e8 01          	sub    rax,0x1
ffff800000801663:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801667:	eb 2b                	jmp    ffff800000801694 <itoa+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
ffff800000801669:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080166d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801670:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
ffff800000801673:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801677:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff80000080167a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080167e:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
ffff800000801680:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801684:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
ffff800000801688:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
ffff80000080168a:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
ffff80000080168f:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801694:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801698:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080169c:	72 cb                	jb     ffff800000801669 <itoa+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
ffff80000080169e:	90                   	nop
ffff80000080169f:	90                   	nop
ffff8000008016a0:	5d                   	pop    rbp
ffff8000008016a1:	c3                   	ret    

ffff8000008016a2 <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
ffff8000008016a2:	f3 0f 1e fa          	endbr64 
ffff8000008016a6:	55                   	push   rbp
ffff8000008016a7:	48 89 e5             	mov    rbp,rsp
ffff8000008016aa:	41 57                	push   r15
ffff8000008016ac:	48 83 ec 28          	sub    rsp,0x28
ffff8000008016b0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008016b0 <putchar+0xe>
ffff8000008016b7:	49 bb a8 c4 11 00 00 	movabs r11,0x11c4a8
ffff8000008016be:	00 00 00 
ffff8000008016c1:	4c 01 d8             	add    rax,r11
ffff8000008016c4:	89 fa                	mov    edx,edi
ffff8000008016c6:	88 55 dc             	mov    BYTE PTR [rbp-0x24],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
ffff8000008016c9:	0f b6 55 dc          	movzx  edx,BYTE PTR [rbp-0x24]
ffff8000008016cd:	88 55 ee             	mov    BYTE PTR [rbp-0x12],dl
ffff8000008016d0:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
ffff8000008016d4:	48 8d 55 ee          	lea    rdx,[rbp-0x12]
ffff8000008016d8:	48 89 d7             	mov    rdi,rdx
ffff8000008016db:	49 89 c7             	mov    r15,rax
ffff8000008016de:	48 ba 49 cf ee ff ff 	movabs rdx,0xffffffffffeecf49
ffff8000008016e5:	ff ff ff 
ffff8000008016e8:	48 01 c2             	add    rdx,rax
ffff8000008016eb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
ffff8000008016ed:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008016f1:	c9                   	leave  
ffff8000008016f2:	c3                   	ret    

ffff8000008016f3 <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
ffff8000008016f3:	f3 0f 1e fa          	endbr64 
ffff8000008016f7:	55                   	push   rbp
ffff8000008016f8:	48 89 e5             	mov    rbp,rsp
ffff8000008016fb:	41 57                	push   r15
ffff8000008016fd:	53                   	push   rbx
ffff8000008016fe:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000801705:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801705 <printf+0x12>
ffff80000080170c:	49 bb 53 c4 11 00 00 	movabs r11,0x11c453
ffff800000801713:	00 00 00 
ffff800000801716:	4c 01 db             	add    rbx,r11
ffff800000801719:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000801720:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000801727:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff80000080172e:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000801735:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff80000080173c:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000801743:	84 c0                	test   al,al
ffff800000801745:	74 23                	je     ffff80000080176a <printf+0x77>
ffff800000801747:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff80000080174e:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000801752:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000801756:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff80000080175a:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff80000080175e:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000801762:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000801766:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
ffff80000080176a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000801771:	48 89 c7             	mov    rdi,rax
ffff800000801774:	49 89 df             	mov    r15,rbx
ffff800000801777:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff80000080177e:	ff ff ff 
ffff800000801781:	48 01 d8             	add    rax,rbx
ffff800000801784:	ff d0                	call   rax
ffff800000801786:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff80000080178b:	0f 8f f2 02 00 00    	jg     ffff800000801a83 <printf+0x390>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc();
ffff800000801791:	49 89 df             	mov    r15,rbx
ffff800000801794:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801799:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff8000008017a0:	ff ff ff 
ffff8000008017a3:	48 01 da             	add    rdx,rbx
ffff8000008017a6:	ff d2                	call   rdx
ffff8000008017a8:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
ffff8000008017af:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
ffff8000008017b6:	00 00 00 
ffff8000008017b9:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
ffff8000008017c0:	00 00 00 
ffff8000008017c3:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff8000008017c7:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffff8000008017ce:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff8000008017d5:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
ffff8000008017dc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008017e3:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff8000008017ea:	e9 27 02 00 00       	jmp    ffff800000801a16 <printf+0x323>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008017ef:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008017f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008017f9:	3c 25                	cmp    al,0x25
ffff8000008017fb:	0f 85 e2 01 00 00    	jne    ffff8000008019e3 <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
ffff800000801801:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801808:	48 83 c0 01          	add    rax,0x1
ffff80000080180c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080180f:	84 c0                	test   al,al
ffff800000801811:	0f 84 cc 01 00 00    	je     ffff8000008019e3 <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
ffff800000801817:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff80000080181e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff80000080181f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801826:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801829:	3c 78                	cmp    al,0x78
ffff80000080182b:	75 75                	jne    ffff8000008018a2 <printf+0x1af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
ffff80000080182d:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801833:	83 f8 2f             	cmp    eax,0x2f
ffff800000801836:	77 23                	ja     ffff80000080185b <printf+0x168>
ffff800000801838:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080183f:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801845:	89 d2                	mov    edx,edx
ffff800000801847:	48 01 d0             	add    rax,rdx
ffff80000080184a:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801850:	83 c2 08             	add    edx,0x8
ffff800000801853:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801859:	eb 12                	jmp    ffff80000080186d <printf+0x17a>
ffff80000080185b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801862:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801866:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff80000080186d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080186f:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
ffff800000801875:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff80000080187b:	48 63 d0             	movsxd rdx,eax
ffff80000080187e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801885:	48 89 d6             	mov    rsi,rdx
ffff800000801888:	48 89 c7             	mov    rdi,rax
ffff80000080188b:	49 89 df             	mov    r15,rbx
ffff80000080188e:	48 b8 90 58 ef ff ff 	movabs rax,0xffffffffffef5890
ffff800000801895:	ff ff ff 
ffff800000801898:	48 01 d8             	add    rax,rbx
ffff80000080189b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff80000080189d:	e9 6c 01 00 00       	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
ffff8000008018a2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008018a9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008018ac:	3c 73                	cmp    al,0x73
ffff8000008018ae:	75 75                	jne    ffff800000801925 <printf+0x232>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
ffff8000008018b0:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff8000008018b6:	83 f8 2f             	cmp    eax,0x2f
ffff8000008018b9:	77 23                	ja     ffff8000008018de <printf+0x1eb>
ffff8000008018bb:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008018c2:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff8000008018c8:	89 d2                	mov    edx,edx
ffff8000008018ca:	48 01 d0             	add    rax,rdx
ffff8000008018cd:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff8000008018d3:	83 c2 08             	add    edx,0x8
ffff8000008018d6:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff8000008018dc:	eb 12                	jmp    ffff8000008018f0 <printf+0x1fd>
ffff8000008018de:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008018e5:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008018e9:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff8000008018f0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008018f3:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
ffff8000008018fa:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff800000801901:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801908:	48 89 d6             	mov    rsi,rdx
ffff80000080190b:	48 89 c7             	mov    rdi,rax
ffff80000080190e:	49 89 df             	mov    r15,rbx
ffff800000801911:	48 b8 1e 59 ef ff ff 	movabs rax,0xffffffffffef591e
ffff800000801918:	ff ff ff 
ffff80000080191b:	48 01 d8             	add    rax,rbx
ffff80000080191e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801920:	e9 e9 00 00 00       	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
ffff800000801925:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080192c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080192f:	3c 64                	cmp    al,0x64
ffff800000801931:	75 73                	jne    ffff8000008019a6 <printf+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
ffff800000801933:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801939:	83 f8 2f             	cmp    eax,0x2f
ffff80000080193c:	77 23                	ja     ffff800000801961 <printf+0x26e>
ffff80000080193e:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801945:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080194b:	89 d2                	mov    edx,edx
ffff80000080194d:	48 01 d0             	add    rax,rdx
ffff800000801950:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801956:	83 c2 08             	add    edx,0x8
ffff800000801959:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff80000080195f:	eb 12                	jmp    ffff800000801973 <printf+0x280>
ffff800000801961:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801968:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000080196c:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801973:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801976:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
ffff80000080197d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000801984:	89 c2                	mov    edx,eax
ffff800000801986:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080198d:	89 d6                	mov    esi,edx
ffff80000080198f:	48 89 c7             	mov    rdi,rax
ffff800000801992:	49 89 df             	mov    r15,rbx
ffff800000801995:	48 b8 d5 57 ef ff ff 	movabs rax,0xffffffffffef57d5
ffff80000080199c:	ff ff ff 
ffff80000080199f:	48 01 d8             	add    rax,rbx
ffff8000008019a2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008019a4:	eb 68                	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
ffff8000008019a6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019ad:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019b0:	3c 63                	cmp    al,0x63
ffff8000008019b2:	75 02                	jne    ffff8000008019b6 <printf+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
ffff8000008019b4:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
ffff8000008019b6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019bd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019c0:	0f be d0             	movsx  edx,al
ffff8000008019c3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019ca:	89 d6                	mov    esi,edx
ffff8000008019cc:	48 89 c7             	mov    rdi,rax
ffff8000008019cf:	49 89 df             	mov    r15,rbx
ffff8000008019d2:	48 b8 96 57 ef ff ff 	movabs rax,0xffffffffffef5796
ffff8000008019d9:	ff ff ff 
ffff8000008019dc:	48 01 d8             	add    rax,rbx
ffff8000008019df:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008019e1:	eb 2b                	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
ffff8000008019e3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019ea:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019ed:	0f be d0             	movsx  edx,al
ffff8000008019f0:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019f7:	89 d6                	mov    esi,edx
ffff8000008019f9:	48 89 c7             	mov    rdi,rax
ffff8000008019fc:	49 89 df             	mov    r15,rbx
ffff8000008019ff:	48 b8 96 57 ef ff ff 	movabs rax,0xffffffffffef5796
ffff800000801a06:	ff ff ff 
ffff800000801a09:	48 01 d8             	add    rax,rbx
ffff800000801a0c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801a0e:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801a15:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
ffff800000801a16:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801a1d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801a20:	84 c0                	test   al,al
ffff800000801a22:	0f 85 c7 fd ff ff    	jne    ffff8000008017ef <printf+0xfc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
ffff800000801a28:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a2f:	48 89 c7             	mov    rdi,rax
ffff800000801a32:	49 89 df             	mov    r15,rbx
ffff800000801a35:	48 b8 49 cf ee ff ff 	movabs rax,0xffffffffffeecf49
ffff800000801a3c:	ff ff ff 
ffff800000801a3f:	48 01 d8             	add    rax,rbx
ffff800000801a42:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
ffff800000801a44:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a4b:	48 89 c7             	mov    rdi,rax
ffff800000801a4e:	49 89 df             	mov    r15,rbx
ffff800000801a51:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801a56:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff800000801a5d:	ff ff ff 
ffff800000801a60:	48 01 da             	add    rdx,rbx
ffff800000801a63:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
ffff800000801a65:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a6c:	48 89 c7             	mov    rdi,rax
ffff800000801a6f:	49 89 df             	mov    r15,rbx
ffff800000801a72:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000801a79:	ff ff ff 
ffff800000801a7c:	48 01 d8             	add    rax,rbx
ffff800000801a7f:	ff d0                	call   rax
ffff800000801a81:	eb 01                	jmp    ffff800000801a84 <printf+0x391>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
ffff800000801a83:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
ffff800000801a84:	48 81 c4 00 01 00 00 	add    rsp,0x100
ffff800000801a8b:	5b                   	pop    rbx
ffff800000801a8c:	41 5f                	pop    r15
ffff800000801a8e:	5d                   	pop    rbp
ffff800000801a8f:	c3                   	ret    

ffff800000801a90 <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:27
//以kb为单位
int high_mem_base=1024;
int mmap_t_i=0;

stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
ffff800000801a90:	f3 0f 1e fa          	endbr64 
ffff800000801a94:	55                   	push   rbp
ffff800000801a95:	48 89 e5             	mov    rbp,rsp
ffff800000801a98:	41 57                	push   r15
ffff800000801a9a:	48 83 ec 28          	sub    rsp,0x28
ffff800000801a9e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801a9e <mmap+0xe>
ffff800000801aa5:	49 bb ba c0 11 00 00 	movabs r11,0x11c0ba
ffff800000801aac:	00 00 00 
ffff800000801aaf:	4c 01 d8             	add    rax,r11
ffff800000801ab2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801ab6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801aba:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:28
    return smmap(pa,la,attr,current->pml4);
ffff800000801abd:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000801ac4:	ff ff ff 
ffff800000801ac7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801acb:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000801ace:	48 8b 8a e0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xe0]
ffff800000801ad5:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801ad8:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000801adc:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff800000801ae0:	49 89 c7             	mov    r15,rax
ffff800000801ae3:	49 b8 a1 3f ee ff ff 	movabs r8,0xffffffffffee3fa1
ffff800000801aea:	ff ff ff 
ffff800000801aed:	49 01 c0             	add    r8,rax
ffff800000801af0:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:58
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
ffff800000801af3:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801af7:	c9                   	leave  
ffff800000801af8:	c3                   	ret    

ffff800000801af9 <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:60
stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
ffff800000801af9:	f3 0f 1e fa          	endbr64 
ffff800000801afd:	55                   	push   rbp
ffff800000801afe:	48 89 e5             	mov    rbp,rsp
ffff800000801b01:	41 57                	push   r15
ffff800000801b03:	53                   	push   rbx
ffff800000801b04:	48 83 ec 40          	sub    rsp,0x40
ffff800000801b08:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801b08 <smmap+0xf>
ffff800000801b0f:	49 bb 50 c0 11 00 00 	movabs r11,0x11c050
ffff800000801b16:	00 00 00 
ffff800000801b19:	4c 01 db             	add    rbx,r11
ffff800000801b1c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801b20:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000801b24:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffff800000801b27:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:63
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
ffff800000801b2b:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000801b32:	7f 00 00 
ffff800000801b35:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff800000801b39:	76 0e                	jbe    ffff800000801b49 <smmap+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
        la&=~0xffff000000000000ul;
ffff800000801b3b:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
ffff800000801b42:	ff 00 00 
ffff800000801b45:	48 21 45 c0          	and    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:66
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
ffff800000801b49:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b4d:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b51:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801b58:	00 
ffff800000801b59:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801b5d:	48 01 d0             	add    rax,rdx
ffff800000801b60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801b63:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:67
    int pml4i=la / PML4E_SIZE;
ffff800000801b67:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b6b:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b6f:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:68
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
ffff800000801b72:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b76:	83 e0 01             	and    eax,0x1
ffff800000801b79:	48 85 c0             	test   rax,rax
ffff800000801b7c:	75 6f                	jne    ffff800000801bed <smmap+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:70
    {
        pdptp=(page_item*) kmalloc();
ffff800000801b7e:	49 89 df             	mov    r15,rbx
ffff800000801b81:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801b86:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000801b8d:	ff ff ff 
ffff800000801b90:	48 01 da             	add    rdx,rbx
ffff800000801b93:	ff d2                	call   rdx
ffff800000801b95:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:71
        memset(pdptp,0,4096);
ffff800000801b99:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b9d:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801ba2:	be 00 00 00 00       	mov    esi,0x0
ffff800000801ba7:	48 89 c7             	mov    rdi,rax
ffff800000801baa:	49 89 df             	mov    r15,rbx
ffff800000801bad:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000801bb4:	ff ff ff 
ffff800000801bb7:	48 01 d8             	add    rax,rbx
ffff800000801bba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:73
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4p[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
ffff800000801bbc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801bc0:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801bc7:	7f 00 00 
ffff800000801bca:	48 21 d0             	and    rax,rdx
ffff800000801bcd:	48 89 c1             	mov    rcx,rax
ffff800000801bd0:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801bd3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000801bd6:	48 98                	cdqe   
ffff800000801bd8:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801bdf:	00 
ffff800000801be0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801be4:	48 01 f0             	add    rax,rsi
ffff800000801be7:	48 09 ca             	or     rdx,rcx
ffff800000801bea:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:75
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
ffff800000801bed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801bf1:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801bf8:	7f 00 00 
ffff800000801bfb:	48 21 c2             	and    rdx,rax
ffff800000801bfe:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801c05:	80 ff ff 
ffff800000801c08:	48 09 d0             	or     rax,rdx
ffff800000801c0b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:78

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
ffff800000801c0f:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
ffff800000801c16:	00 00 00 
ffff800000801c19:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000801c1d:	48 c1 e8 1e          	shr    rax,0x1e
ffff800000801c21:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
ffff800000801c24:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801c27:	48 98                	cdqe   
ffff800000801c29:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801c30:	00 
ffff800000801c31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c35:	48 01 d0             	add    rax,rdx
ffff800000801c38:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801c3b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:81
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
ffff800000801c3f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c43:	83 e0 01             	and    eax,0x1
ffff800000801c46:	48 85 c0             	test   rax,rax
ffff800000801c49:	75 6f                	jne    ffff800000801cba <smmap+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:83
    {
        pdp=(page_item*) kmalloc();
ffff800000801c4b:	49 89 df             	mov    r15,rbx
ffff800000801c4e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801c53:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000801c5a:	ff ff ff 
ffff800000801c5d:	48 01 da             	add    rdx,rbx
ffff800000801c60:	ff d2                	call   rdx
ffff800000801c62:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:84
        memset(pdp,0,4096);
ffff800000801c66:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c6a:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801c6f:	be 00 00 00 00       	mov    esi,0x0
ffff800000801c74:	48 89 c7             	mov    rdi,rax
ffff800000801c77:	49 89 df             	mov    r15,rbx
ffff800000801c7a:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000801c81:	ff ff ff 
ffff800000801c84:	48 01 d8             	add    rax,rbx
ffff800000801c87:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
ffff800000801c89:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c8d:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801c94:	7f 00 00 
ffff800000801c97:	48 21 d0             	and    rax,rdx
ffff800000801c9a:	48 89 c1             	mov    rcx,rax
ffff800000801c9d:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801ca0:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801ca3:	48 98                	cdqe   
ffff800000801ca5:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801cac:	00 
ffff800000801cad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801cb1:	48 01 f0             	add    rax,rsi
ffff800000801cb4:	48 09 ca             	or     rdx,rcx
ffff800000801cb7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:87
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
ffff800000801cba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801cbe:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801cc5:	7f 00 00 
ffff800000801cc8:	48 21 c2             	and    rdx,rax
ffff800000801ccb:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801cd2:	80 ff ff 
ffff800000801cd5:	48 09 d0             	or     rax,rdx
ffff800000801cd8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:90

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
ffff800000801cdc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801ce0:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801ce5:	48 c1 e8 15          	shr    rax,0x15
ffff800000801ce9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801cf0:	00 
ffff800000801cf1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801cf5:	48 01 d0             	add    rax,rdx
ffff800000801cf8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801cfb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91
    if(!((unsigned long long)pt & PAGE_PRESENT))
ffff800000801cff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d03:	83 e0 01             	and    eax,0x1
ffff800000801d06:	48 85 c0             	test   rax,rax
ffff800000801d09:	75 77                	jne    ffff800000801d82 <smmap+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:93
    {
        pt=(page_item*) kmalloc();
ffff800000801d0b:	49 89 df             	mov    r15,rbx
ffff800000801d0e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801d13:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000801d1a:	ff ff ff 
ffff800000801d1d:	48 01 da             	add    rdx,rbx
ffff800000801d20:	ff d2                	call   rdx
ffff800000801d22:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:94
        memset(pt,0,4096);
ffff800000801d26:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d2a:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801d2f:	be 00 00 00 00       	mov    esi,0x0
ffff800000801d34:	48 89 c7             	mov    rdi,rax
ffff800000801d37:	49 89 df             	mov    r15,rbx
ffff800000801d3a:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000801d41:	ff ff ff 
ffff800000801d44:	48 01 d8             	add    rax,rbx
ffff800000801d47:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:95
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
ffff800000801d49:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d4d:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801d54:	7f 00 00 
ffff800000801d57:	48 21 d0             	and    rax,rdx
ffff800000801d5a:	48 89 c1             	mov    rcx,rax
ffff800000801d5d:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801d60:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801d64:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801d69:	48 c1 e8 15          	shr    rax,0x15
ffff800000801d6d:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801d74:	00 
ffff800000801d75:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d79:	48 01 f0             	add    rax,rsi
ffff800000801d7c:	48 09 ca             	or     rdx,rcx
ffff800000801d7f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:97
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
ffff800000801d82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d86:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801d8d:	7f 00 00 
ffff800000801d90:	48 21 c2             	and    rdx,rax
ffff800000801d93:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801d9a:	80 ff ff 
ffff800000801d9d:	48 09 d0             	or     rax,rdx
ffff800000801da0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:100

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
ffff800000801da4:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000801da7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000801dab:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
ffff800000801db1:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000801db5:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000801dbc:	00 
ffff800000801dbd:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000801dc1:	48 01 ca             	add    rdx,rcx
ffff800000801dc4:	48 0b 45 c8          	or     rax,QWORD PTR [rbp-0x38]
ffff800000801dc8:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101
    return NORMAL;
ffff800000801dcb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:102
}
ffff800000801dd0:	48 83 c4 40          	add    rsp,0x40
ffff800000801dd4:	5b                   	pop    rbx
ffff800000801dd5:	41 5f                	pop    r15
ffff800000801dd7:	5d                   	pop    rbp
ffff800000801dd8:	c3                   	ret    

ffff800000801dd9 <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106


int init_paging()
{
ffff800000801dd9:	f3 0f 1e fa          	endbr64 
ffff800000801ddd:	55                   	push   rbp
ffff800000801dde:	48 89 e5             	mov    rbp,rsp
ffff800000801de1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801de1 <init_paging+0x8>
ffff800000801de8:	49 bb 77 bd 11 00 00 	movabs r11,0x11bd77
ffff800000801def:	00 00 00 
ffff800000801df2:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:139
//    set_page_item(pml4,PDPT_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //把低512GB的空间取消映射，留给用户
    pml4[0]=0;
ffff800000801df5:	48 ba b0 ff ff ff ff 	movabs rdx,0xffffffffffffffb0
ffff800000801dfc:	ff ff ff 
ffff800000801dff:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801e03:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801e06:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:141
    #endif
}
ffff800000801e0d:	90                   	nop
ffff800000801e0e:	5d                   	pop    rbp
ffff800000801e0f:	c3                   	ret    

ffff800000801e10 <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:143
void set_high_mem_base(int base)
{
ffff800000801e10:	f3 0f 1e fa          	endbr64 
ffff800000801e14:	55                   	push   rbp
ffff800000801e15:	48 89 e5             	mov    rbp,rsp
ffff800000801e18:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801e18 <set_high_mem_base+0x8>
ffff800000801e1f:	49 bb 40 bd 11 00 00 	movabs r11,0x11bd40
ffff800000801e26:	00 00 00 
ffff800000801e29:	4c 01 d8             	add    rax,r11
ffff800000801e2c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:144
    high_mem_base=base;
ffff800000801e2f:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff800000801e36:	ff ff ff 
ffff800000801e39:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801e3d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801e40:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:145
}
ffff800000801e42:	90                   	nop
ffff800000801e43:	5d                   	pop    rbp
ffff800000801e44:	c3                   	ret    

ffff800000801e45 <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
ffff800000801e45:	f3 0f 1e fa          	endbr64 
ffff800000801e49:	55                   	push   rbp
ffff800000801e4a:	48 89 e5             	mov    rbp,rsp
ffff800000801e4d:	41 57                	push   r15
ffff800000801e4f:	48 83 ec 28          	sub    rsp,0x28
ffff800000801e53:	4c 8d 05 f9 ff ff ff 	lea    r8,[rip+0xfffffffffffffff9]        # ffff800000801e53 <set_mem_area+0xe>
ffff800000801e5a:	49 bb 05 bd 11 00 00 	movabs r11,0x11bd05
ffff800000801e61:	00 00 00 
ffff800000801e64:	4d 01 d8             	add    r8,r11
ffff800000801e67:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801e6b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801e6f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:148
    mmap_struct[mmap_t_i].base=base;
ffff800000801e73:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000801e7a:	ff ff ff 
ffff800000801e7d:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801e81:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801e83:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff800000801e8a:	ff ff ff 
ffff800000801e8d:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801e91:	48 63 d0             	movsxd rdx,eax
ffff800000801e94:	48 89 d0             	mov    rax,rdx
ffff800000801e97:	48 01 c0             	add    rax,rax
ffff800000801e9a:	48 01 d0             	add    rax,rdx
ffff800000801e9d:	48 c1 e0 03          	shl    rax,0x3
ffff800000801ea1:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000801ea5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801ea9:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:149
    mmap_struct[mmap_t_i].len=len;
ffff800000801eac:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000801eb3:	ff ff ff 
ffff800000801eb6:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801eba:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801ebc:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff800000801ec3:	ff ff ff 
ffff800000801ec6:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801eca:	48 63 d0             	movsxd rdx,eax
ffff800000801ecd:	48 89 d0             	mov    rax,rdx
ffff800000801ed0:	48 01 c0             	add    rax,rax
ffff800000801ed3:	48 01 d0             	add    rax,rdx
ffff800000801ed6:	48 c1 e0 03          	shl    rax,0x3
ffff800000801eda:	48 01 c8             	add    rax,rcx
ffff800000801edd:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801ee1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801ee5:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:150
    mmap_struct[mmap_t_i++].type=type;
ffff800000801ee8:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000801eef:	ff ff ff 
ffff800000801ef2:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801ef6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801ef8:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000801efb:	48 ba 88 fe ff ff ff 	movabs rdx,0xfffffffffffffe88
ffff800000801f02:	ff ff ff 
ffff800000801f05:	49 8b 14 10          	mov    rdx,QWORD PTR [r8+rdx*1]
ffff800000801f09:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000801f0b:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff800000801f12:	ff ff ff 
ffff800000801f15:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801f19:	48 63 d0             	movsxd rdx,eax
ffff800000801f1c:	48 89 d0             	mov    rax,rdx
ffff800000801f1f:	48 01 c0             	add    rax,rax
ffff800000801f22:	48 01 d0             	add    rax,rdx
ffff800000801f25:	48 c1 e0 03          	shl    rax,0x3
ffff800000801f29:	48 01 c8             	add    rax,rcx
ffff800000801f2c:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000801f30:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801f34:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
    comprintf("mem info:base=0x%l,len=0x%l,type=%d\n",base,len,type);
ffff800000801f37:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000801f3b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000801f3f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f43:	48 89 c6             	mov    rsi,rax
ffff800000801f46:	48 b8 50 d5 ff ff ff 	movabs rax,0xffffffffffffd550
ffff800000801f4d:	ff ff ff 
ffff800000801f50:	49 8d 04 00          	lea    rax,[r8+rax*1]
ffff800000801f54:	48 89 c7             	mov    rdi,rax
ffff800000801f57:	4d 89 c7             	mov    r15,r8
ffff800000801f5a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801f5f:	49 b9 cb 4b ef ff ff 	movabs r9,0xffffffffffef4bcb
ffff800000801f66:	ff ff ff 
ffff800000801f69:	4d 01 c1             	add    r9,r8
ffff800000801f6c:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:152
}
ffff800000801f6f:	90                   	nop
ffff800000801f70:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801f74:	c9                   	leave  
ffff800000801f75:	c3                   	ret    

ffff800000801f76 <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
addr_t kmalloc()
{
ffff800000801f76:	f3 0f 1e fa          	endbr64 
ffff800000801f7a:	55                   	push   rbp
ffff800000801f7b:	48 89 e5             	mov    rbp,rsp
ffff800000801f7e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801f7e <kmalloc+0x8>
ffff800000801f85:	49 bb da bb 11 00 00 	movabs r11,0x11bbda
ffff800000801f8c:	00 00 00 
ffff800000801f8f:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000801f92:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000801f99:	e9 c6 00 00 00       	jmp    ffff800000802064 <kmalloc+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157
    {
        for(int j=0;j<32;j++)
ffff800000801f9e:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000801fa5:	e9 ac 00 00 00       	jmp    ffff800000802056 <kmalloc+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159
        {
            if(!(vmalloc_map[i]&(1<<j)))
ffff800000801faa:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000801fb1:	ff ff ff 
ffff800000801fb4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801fb8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801fbb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801fbe:	48 63 d2             	movsxd rdx,edx
ffff800000801fc1:	48 c1 e2 02          	shl    rdx,0x2
ffff800000801fc5:	48 01 ca             	add    rdx,rcx
ffff800000801fc8:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000801fca:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000801fcd:	bf 01 00 00 00       	mov    edi,0x1
ffff800000801fd2:	89 d1                	mov    ecx,edx
ffff800000801fd4:	d3 e7                	shl    edi,cl
ffff800000801fd6:	89 fa                	mov    edx,edi
ffff800000801fd8:	21 f2                	and    edx,esi
ffff800000801fda:	85 d2                	test   edx,edx
ffff800000801fdc:	75 74                	jne    ffff800000802052 <kmalloc+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161
            {
                vmalloc_map[i]|=(1<<j);
ffff800000801fde:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000801fe5:	ff ff ff 
ffff800000801fe8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801fec:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801fef:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801ff2:	48 63 d2             	movsxd rdx,edx
ffff800000801ff5:	48 c1 e2 02          	shl    rdx,0x2
ffff800000801ff9:	48 01 ca             	add    rdx,rcx
ffff800000801ffc:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000801ffe:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802001:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802006:	89 d1                	mov    ecx,edx
ffff800000802008:	d3 e7                	shl    edi,cl
ffff80000080200a:	89 fa                	mov    edx,edi
ffff80000080200c:	89 d1                	mov    ecx,edx
ffff80000080200e:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000802015:	ff ff ff 
ffff800000802018:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080201c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080201f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802022:	48 98                	cdqe   
ffff800000802024:	48 c1 e0 02          	shl    rax,0x2
ffff800000802028:	48 01 d0             	add    rax,rdx
ffff80000080202b:	09 ce                	or     esi,ecx
ffff80000080202d:	89 f2                	mov    edx,esi
ffff80000080202f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:162
                return VMALLOC_BASE+(i*32+j)*0x1000;
ffff800000802031:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802034:	c1 e0 05             	shl    eax,0x5
ffff800000802037:	89 c2                	mov    edx,eax
ffff800000802039:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080203c:	01 d0                	add    eax,edx
ffff80000080203e:	c1 e0 0c             	shl    eax,0xc
ffff800000802041:	48 98                	cdqe   
ffff800000802043:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff80000080204a:	80 ff ff 
ffff80000080204d:	48 01 d0             	add    rax,rdx
ffff800000802050:	eb 1c                	jmp    ffff80000080206e <kmalloc+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 2)
        for(int j=0;j<32;j++)
ffff800000802052:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 1)
ffff800000802056:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff80000080205a:	0f 8e 4a ff ff ff    	jle    ffff800000801faa <kmalloc+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802060:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155 (discriminator 1)
ffff800000802064:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff800000802068:	0f 8e 30 ff ff ff    	jle    ffff800000801f9e <kmalloc+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:166
            }
        }
    }
}
ffff80000080206e:	5d                   	pop    rbp
ffff80000080206f:	c3                   	ret    

ffff800000802070 <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:168
addr_t kmallocat(addr_t addr,int pgc)
{
ffff800000802070:	f3 0f 1e fa          	endbr64 
ffff800000802074:	55                   	push   rbp
ffff800000802075:	48 89 e5             	mov    rbp,rsp
ffff800000802078:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802078 <kmallocat+0x8>
ffff80000080207f:	49 bb e0 ba 11 00 00 	movabs r11,0x11bae0
ffff800000802086:	00 00 00 
ffff800000802089:	4c 01 d8             	add    rax,r11
ffff80000080208c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802090:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:169
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
ffff800000802093:	48 b9 00 00 00 fe ff 	movabs rcx,0x7ffffe000000
ffff80000080209a:	7f 00 00 
ffff80000080209d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008020a1:	48 01 ca             	add    rdx,rcx
ffff8000008020a4:	48 c1 ea 0c          	shr    rdx,0xc
ffff8000008020a8:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:170
    if(addr==0){
ffff8000008020ab:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff8000008020b0:	0f 85 3f 01 00 00    	jne    ffff8000008021f5 <kmallocat+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:171
        int l=0,p=0;
ffff8000008020b6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008020bd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
        for(int i=0;i<kmalloc_pgc;i++){
ffff8000008020c4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008020cb:	eb 63                	jmp    ffff800000802130 <kmallocat+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:173
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
ffff8000008020cd:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff8000008020d4:	ff ff ff 
ffff8000008020d7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008020db:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008020de:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020e1:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008020e4:	85 d2                	test   edx,edx
ffff8000008020e6:	0f 48 d1             	cmovs  edx,ecx
ffff8000008020e9:	c1 fa 05             	sar    edx,0x5
ffff8000008020ec:	48 63 d2             	movsxd rdx,edx
ffff8000008020ef:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008020f3:	48 01 f2             	add    rdx,rsi
ffff8000008020f6:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008020f8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020fb:	83 e2 1f             	and    edx,0x1f
ffff8000008020fe:	89 d1                	mov    ecx,edx
ffff800000802100:	d3 ee                	shr    esi,cl
ffff800000802102:	89 f2                	mov    edx,esi
ffff800000802104:	83 e2 01             	and    edx,0x1
ffff800000802107:	85 d2                	test   edx,edx
ffff800000802109:	75 12                	jne    ffff80000080211d <kmallocat+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
                if(l==0)
ffff80000080210b:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000080210f:	75 06                	jne    ffff800000802117 <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
                    p=i;//开头空页
ffff800000802111:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000802114:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
                l++;
ffff800000802117:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffff80000080211b:	eb 07                	jmp    ffff800000802124 <kmallocat+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
            } else
                l=0;
ffff80000080211d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
            if(l==pgc)break;
ffff800000802124:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802127:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080212a:	74 1b                	je     ffff800000802147 <kmallocat+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
ffff80000080212c:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172 (discriminator 1)
ffff800000802130:	48 ba 58 ff ff ff ff 	movabs rdx,0xffffffffffffff58
ffff800000802137:	ff ff ff 
ffff80000080213a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080213e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802140:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff800000802143:	7c 88                	jl     ffff8000008020cd <kmallocat+0x5d>
ffff800000802145:	eb 01                	jmp    ffff800000802148 <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
            if(l==pgc)break;
ffff800000802147:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
        }
        if(l<pgc)return -1;
ffff800000802148:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080214b:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080214e:	7d 0c                	jge    ffff80000080215c <kmallocat+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181 (discriminator 1)
ffff800000802150:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802157:	e9 87 01 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183
        //开始占用
        for(int i=0;i<pgc;i++){
ffff80000080215c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffff800000802163:	eb 6e                	jmp    ffff8000008021d3 <kmallocat+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
ffff800000802165:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff80000080216c:	ff ff ff 
ffff80000080216f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802173:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000802176:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff800000802179:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080217c:	01 ca                	add    edx,ecx
ffff80000080217e:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff800000802181:	85 d2                	test   edx,edx
ffff800000802183:	0f 48 d1             	cmovs  edx,ecx
ffff800000802186:	c1 fa 05             	sar    edx,0x5
ffff800000802189:	89 d6                	mov    esi,edx
ffff80000080218b:	48 63 d6             	movsxd rdx,esi
ffff80000080218e:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802192:	48 01 fa             	add    rdx,rdi
ffff800000802195:	8b 3a                	mov    edi,DWORD PTR [rdx]
ffff800000802197:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080219a:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080219d:	01 ca                	add    edx,ecx
ffff80000080219f:	83 e2 1f             	and    edx,0x1f
ffff8000008021a2:	41 b8 01 00 00 00    	mov    r8d,0x1
ffff8000008021a8:	89 d1                	mov    ecx,edx
ffff8000008021aa:	41 d3 e0             	shl    r8d,cl
ffff8000008021ad:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff8000008021b4:	ff ff ff 
ffff8000008021b7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008021bb:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008021be:	48 63 d6             	movsxd rdx,esi
ffff8000008021c1:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008021c5:	48 01 ca             	add    rdx,rcx
ffff8000008021c8:	44 09 c7             	or     edi,r8d
ffff8000008021cb:	89 f9                	mov    ecx,edi
ffff8000008021cd:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 3)
        for(int i=0;i<pgc;i++){
ffff8000008021cf:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 1)
ffff8000008021d3:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008021d6:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008021d9:	7c 8a                	jl     ffff800000802165 <kmallocat+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
ffff8000008021db:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008021de:	c1 e0 0c             	shl    eax,0xc
ffff8000008021e1:	48 98                	cdqe   
ffff8000008021e3:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff8000008021ea:	80 ff ff 
ffff8000008021ed:	48 01 d0             	add    rax,rdx
ffff8000008021f0:	e9 ee 00 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188
    }
    for(int i=0;i<pgc;i++){
ffff8000008021f5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008021fc:	eb 5c                	jmp    ffff80000080225a <kmallocat+0x1ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:189
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
ffff8000008021fe:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000802205:	ff ff ff 
ffff800000802208:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080220c:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080220f:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802212:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802215:	01 ca                	add    edx,ecx
ffff800000802217:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff80000080221a:	85 d2                	test   edx,edx
ffff80000080221c:	0f 48 d1             	cmovs  edx,ecx
ffff80000080221f:	c1 fa 05             	sar    edx,0x5
ffff800000802222:	48 63 d2             	movsxd rdx,edx
ffff800000802225:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802229:	48 01 f2             	add    rdx,rsi
ffff80000080222c:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff80000080222e:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802231:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802234:	01 ca                	add    edx,ecx
ffff800000802236:	83 e2 1f             	and    edx,0x1f
ffff800000802239:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080223e:	89 d1                	mov    ecx,edx
ffff800000802240:	d3 e7                	shl    edi,cl
ffff800000802242:	89 fa                	mov    edx,edi
ffff800000802244:	21 f2                	and    edx,esi
ffff800000802246:	85 d2                	test   edx,edx
ffff800000802248:	74 0c                	je     ffff800000802256 <kmallocat+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190
            return -1;
ffff80000080224a:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802251:	e9 8d 00 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188 (discriminator 2)
    for(int i=0;i<pgc;i++){
ffff800000802256:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188 (discriminator 1)
ffff80000080225a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080225d:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802260:	7c 9c                	jl     ffff8000008021fe <kmallocat+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193
    }
    //
    for(int i=0;i<pgc;i++){
ffff800000802262:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000802269:	eb 6c                	jmp    ffff8000008022d7 <kmallocat+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:194 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
ffff80000080226b:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000802272:	ff ff ff 
ffff800000802275:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802279:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080227c:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
ffff80000080227f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802282:	01 f2                	add    edx,esi
ffff800000802284:	48 63 d2             	movsxd rdx,edx
ffff800000802287:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080228b:	48 01 ca             	add    rdx,rcx
ffff80000080228e:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802290:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802293:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802296:	01 ca                	add    edx,ecx
ffff800000802298:	83 e2 1f             	and    edx,0x1f
ffff80000080229b:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008022a0:	89 d1                	mov    ecx,edx
ffff8000008022a2:	d3 e7                	shl    edi,cl
ffff8000008022a4:	89 fa                	mov    edx,edi
ffff8000008022a6:	41 89 d0             	mov    r8d,edx
ffff8000008022a9:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff8000008022b0:	ff ff ff 
ffff8000008022b3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008022b7:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008022ba:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
ffff8000008022bd:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022c0:	01 fa                	add    edx,edi
ffff8000008022c2:	48 63 d2             	movsxd rdx,edx
ffff8000008022c5:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022c9:	48 01 ca             	add    rdx,rcx
ffff8000008022cc:	44 09 c6             	or     esi,r8d
ffff8000008022cf:	89 f1                	mov    ecx,esi
ffff8000008022d1:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff8000008022d3:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193 (discriminator 1)
ffff8000008022d7:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022da:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008022dd:	7c 8c                	jl     ffff80000080226b <kmallocat+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196
    }
    return addr;
ffff8000008022df:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:198

}
ffff8000008022e3:	5d                   	pop    rbp
ffff8000008022e4:	c3                   	ret    

ffff8000008022e5 <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:201

int kmfree(addr_t ptr)
{
ffff8000008022e5:	f3 0f 1e fa          	endbr64 
ffff8000008022e9:	55                   	push   rbp
ffff8000008022ea:	48 89 e5             	mov    rbp,rsp
ffff8000008022ed:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008022ed <kmfree+0x8>
ffff8000008022f4:	49 bb 6b b8 11 00 00 	movabs r11,0x11b86b
ffff8000008022fb:	00 00 00 
ffff8000008022fe:	4c 01 da             	add    rdx,r11
ffff800000802301:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:202
    int num=ptr/PAGE_SIZE;
ffff800000802305:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802309:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080230d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:203
    int n=num/32;
ffff800000802310:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802313:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802316:	85 c0                	test   eax,eax
ffff800000802318:	0f 48 c1             	cmovs  eax,ecx
ffff80000080231b:	c1 f8 05             	sar    eax,0x5
ffff80000080231e:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:204
    int r=num%32;
ffff800000802321:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802324:	89 c1                	mov    ecx,eax
ffff800000802326:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802329:	c1 e9 1b             	shr    ecx,0x1b
ffff80000080232c:	01 c8                	add    eax,ecx
ffff80000080232e:	83 e0 1f             	and    eax,0x1f
ffff800000802331:	29 c8                	sub    eax,ecx
ffff800000802333:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:205
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
ffff800000802336:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080233d:	ff ff ff 
ffff800000802340:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802344:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802347:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080234a:	48 98                	cdqe   
ffff80000080234c:	48 c1 e0 02          	shl    rax,0x2
ffff800000802350:	48 01 c8             	add    rax,rcx
ffff800000802353:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802355:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802358:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080235d:	89 c1                	mov    ecx,eax
ffff80000080235f:	d3 e7                	shl    edi,cl
ffff800000802361:	89 f8                	mov    eax,edi
ffff800000802363:	f7 d0                	not    eax
ffff800000802365:	89 c1                	mov    ecx,eax
ffff800000802367:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080236e:	ff ff ff 
ffff800000802371:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802375:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802378:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080237b:	48 98                	cdqe   
ffff80000080237d:	48 c1 e0 02          	shl    rax,0x2
ffff800000802381:	48 01 d0             	add    rax,rdx
ffff800000802384:	21 ce                	and    esi,ecx
ffff800000802386:	89 f2                	mov    edx,esi
ffff800000802388:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:206
}
ffff80000080238a:	90                   	nop
ffff80000080238b:	5d                   	pop    rbp
ffff80000080238c:	c3                   	ret    

ffff80000080238d <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207
void page_err(){
ffff80000080238d:	f3 0f 1e fa          	endbr64 
ffff800000802391:	55                   	push   rbp
ffff800000802392:	48 89 e5             	mov    rbp,rsp
ffff800000802395:	41 57                	push   r15
ffff800000802397:	41 55                	push   r13
ffff800000802399:	41 54                	push   r12
ffff80000080239b:	53                   	push   rbx
ffff80000080239c:	48 83 ec 20          	sub    rsp,0x20
ffff8000008023a0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008023a0 <page_err+0x13>
ffff8000008023a7:	49 bb b8 b7 11 00 00 	movabs r11,0x11b7b8
ffff8000008023ae:	00 00 00 
ffff8000008023b1:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
    asm("cli");
ffff8000008023b4:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
    printf("page err\n");
ffff8000008023b5:	48 b8 75 d5 ff ff ff 	movabs rax,0xffffffffffffd575
ffff8000008023bc:	ff ff ff 
ffff8000008023bf:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008023c3:	48 89 c7             	mov    rdi,rax
ffff8000008023c6:	49 89 df             	mov    r15,rbx
ffff8000008023c9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008023ce:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff8000008023d5:	ff ff ff 
ffff8000008023d8:	48 01 da             	add    rdx,rbx
ffff8000008023db:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
    unsigned long err_code=0,l_addr=0;
ffff8000008023dd:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008023e4:	00 
ffff8000008023e5:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008023ec:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:211
    asm volatile("mov 0(%%rbp),%0":"=r"(err_code));
ffff8000008023ed:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
ffff8000008023f1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:212
    asm volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
ffff8000008023f5:	0f 20 d0             	mov    rax,cr2
ffff8000008023f8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:213
    int p=err_code&1;
ffff8000008023fc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802400:	83 e0 01             	and    eax,0x1
ffff800000802403:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215

    if(!p)
ffff800000802406:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080240a:	75 72                	jne    ffff80000080247e <page_err+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:222
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        //在进程的页表中申请新页
        smmap(get_phyaddr(req_a_page()),l_addr&~0xfff,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff80000080240c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000802413:	ff ff ff 
ffff800000802416:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080241a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080241d:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000802424:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000802428:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080242e:	49 89 c5             	mov    r13,rax
ffff800000802431:	49 89 df             	mov    r15,rbx
ffff800000802434:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802439:	48 ba c9 4e ee ff ff 	movabs rdx,0xffffffffffee4ec9
ffff800000802440:	ff ff ff 
ffff800000802443:	48 01 da             	add    rdx,rbx
ffff800000802446:	ff d2                	call   rdx
ffff800000802448:	89 c7                	mov    edi,eax
ffff80000080244a:	49 89 df             	mov    r15,rbx
ffff80000080244d:	48 b8 b6 52 ee ff ff 	movabs rax,0xffffffffffee52b6
ffff800000802454:	ff ff ff 
ffff800000802457:	48 01 d8             	add    rax,rbx
ffff80000080245a:	ff d0                	call   rax
ffff80000080245c:	48 98                	cdqe   
ffff80000080245e:	4c 89 e1             	mov    rcx,r12
ffff800000802461:	ba 07 00 00 00       	mov    edx,0x7
ffff800000802466:	4c 89 ee             	mov    rsi,r13
ffff800000802469:	48 89 c7             	mov    rdi,rax
ffff80000080246c:	49 89 df             	mov    r15,rbx
ffff80000080246f:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff800000802476:	ff ff ff 
ffff800000802479:	48 01 d8             	add    rax,rbx
ffff80000080247c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:240
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
ffff80000080247e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802482:	83 e0 02             	and    eax,0x2
ffff800000802485:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:241
    if(p)printf("when writing\n");else //puts("when reading");
ffff800000802488:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080248c:	74 2a                	je     ffff8000008024b8 <page_err+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:241 (discriminator 1)
ffff80000080248e:	48 b8 7f d5 ff ff ff 	movabs rax,0xffffffffffffd57f
ffff800000802495:	ff ff ff 
ffff800000802498:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080249c:	48 89 c7             	mov    rdi,rax
ffff80000080249f:	49 89 df             	mov    r15,rbx
ffff8000008024a2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024a7:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff8000008024ae:	ff ff ff 
ffff8000008024b1:	48 01 da             	add    rdx,rbx
ffff8000008024b4:	ff d2                	call   rdx
ffff8000008024b6:	eb 0a                	jmp    ffff8000008024c2 <page_err+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:242
    p=err_code&4;
ffff8000008024b8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008024bc:	83 e0 04             	and    eax,0x4
ffff8000008024bf:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243
    if(!p)printf("supervisor mode\n");else //puts("user mode");
ffff8000008024c2:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008024c6:	75 2a                	jne    ffff8000008024f2 <page_err+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243 (discriminator 1)
ffff8000008024c8:	48 b8 8d d5 ff ff ff 	movabs rax,0xffffffffffffd58d
ffff8000008024cf:	ff ff ff 
ffff8000008024d2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008024d6:	48 89 c7             	mov    rdi,rax
ffff8000008024d9:	49 89 df             	mov    r15,rbx
ffff8000008024dc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024e1:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff8000008024e8:	ff ff ff 
ffff8000008024eb:	48 01 da             	add    rdx,rbx
ffff8000008024ee:	ff d2                	call   rdx
ffff8000008024f0:	eb 0a                	jmp    ffff8000008024fc <page_err+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244
    p=err_code&16;
ffff8000008024f2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008024f6:	83 e0 10             	and    eax,0x10
ffff8000008024f9:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245
    if(p)printf("an instruction tries to fetch\n");
ffff8000008024fc:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000802500:	74 28                	je     ffff80000080252a <page_err+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245 (discriminator 1)
ffff800000802502:	48 b8 a0 d5 ff ff ff 	movabs rax,0xffffffffffffd5a0
ffff800000802509:	ff ff ff 
ffff80000080250c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802510:	48 89 c7             	mov    rdi,rax
ffff800000802513:	49 89 df             	mov    r15,rbx
ffff800000802516:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080251b:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff800000802522:	ff ff ff 
ffff800000802525:	48 01 da             	add    rdx,rbx
ffff800000802528:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246
    unsigned int addr=0;
ffff80000080252a:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
    asm volatile("mov 8(%%rbp),%0":"=r"(addr));
ffff800000802531:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
ffff800000802534:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
ffff800000802537:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080253b:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080253e:	89 c6                	mov    esi,eax
ffff800000802540:	48 b8 c0 d5 ff ff ff 	movabs rax,0xffffffffffffd5c0
ffff800000802547:	ff ff ff 
ffff80000080254a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080254e:	48 89 c7             	mov    rdi,rax
ffff800000802551:	49 89 df             	mov    r15,rbx
ffff800000802554:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802559:	48 b9 9b 3b ee ff ff 	movabs rcx,0xffffffffffee3b9b
ffff800000802560:	ff ff ff 
ffff800000802563:	48 01 d9             	add    rcx,rbx
ffff800000802566:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:260
    }*/
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
ffff800000802568:	49 89 df             	mov    r15,rbx
ffff80000080256b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802570:	48 ba 16 a3 ee ff ff 	movabs rdx,0xffffffffffeea316
ffff800000802577:	ff ff ff 
ffff80000080257a:	48 01 da             	add    rdx,rbx
ffff80000080257d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:262
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
ffff80000080257f:	fb                   	sti    
ffff800000802580:	c9                   	leave  
ffff800000802581:	48 83 c4 08          	add    rsp,0x8
ffff800000802585:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:263
}
ffff800000802587:	90                   	nop
ffff800000802588:	48 83 c4 20          	add    rsp,0x20
ffff80000080258c:	5b                   	pop    rbx
ffff80000080258d:	41 5c                	pop    r12
ffff80000080258f:	41 5d                	pop    r13
ffff800000802591:	41 5f                	pop    r15
ffff800000802593:	5d                   	pop    rbp
ffff800000802594:	c3                   	ret    

ffff800000802595 <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:265
void init_memory()
{
ffff800000802595:	f3 0f 1e fa          	endbr64 
ffff800000802599:	55                   	push   rbp
ffff80000080259a:	48 89 e5             	mov    rbp,rsp
ffff80000080259d:	41 57                	push   r15
ffff80000080259f:	53                   	push   rbx
ffff8000008025a0:	48 83 ec 60          	sub    rsp,0x60
ffff8000008025a4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008025a4 <init_memory+0xf>
ffff8000008025ab:	49 bb b4 b5 11 00 00 	movabs r11,0x11b5b4
ffff8000008025b2:	00 00 00 
ffff8000008025b5:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:268
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取可用内存大小mem_size
    size_t tot_mem_size=mmap_struct[mmap_t_i-1].base+mmap_struct[mmap_t_i-1].len,mem_size=0;
ffff8000008025b8:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008025bf:	ff ff ff 
ffff8000008025c2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008025c6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008025c8:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008025cb:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff8000008025d2:	ff ff ff 
ffff8000008025d5:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008025d9:	48 63 d2             	movsxd rdx,edx
ffff8000008025dc:	48 89 d0             	mov    rax,rdx
ffff8000008025df:	48 01 c0             	add    rax,rax
ffff8000008025e2:	48 01 d0             	add    rax,rdx
ffff8000008025e5:	48 c1 e0 03          	shl    rax,0x3
ffff8000008025e9:	48 01 c8             	add    rax,rcx
ffff8000008025ec:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008025ef:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008025f6:	ff ff ff 
ffff8000008025f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008025fd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008025ff:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802602:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff800000802609:	ff ff ff 
ffff80000080260c:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802610:	48 63 d2             	movsxd rdx,edx
ffff800000802613:	48 89 d0             	mov    rax,rdx
ffff800000802616:	48 01 c0             	add    rax,rax
ffff800000802619:	48 01 d0             	add    rax,rdx
ffff80000080261c:	48 c1 e0 03          	shl    rax,0x3
ffff800000802620:	48 01 f0             	add    rax,rsi
ffff800000802623:	48 83 c0 08          	add    rax,0x8
ffff800000802627:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080262a:	48 01 c8             	add    rax,rcx
ffff80000080262d:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff800000802631:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000802638:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269
    for(int i=0;i<mmap_t_i;i++)
ffff800000802639:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000802640:	eb 64                	jmp    ffff8000008026a6 <init_memory+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:271
    {
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff800000802642:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff800000802649:	ff ff ff 
ffff80000080264c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802650:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802653:	48 63 d0             	movsxd rdx,eax
ffff800000802656:	48 89 d0             	mov    rax,rdx
ffff800000802659:	48 01 c0             	add    rax,rax
ffff80000080265c:	48 01 d0             	add    rax,rdx
ffff80000080265f:	48 c1 e0 03          	shl    rax,0x3
ffff800000802663:	48 01 c8             	add    rax,rcx
ffff800000802666:	48 83 c0 10          	add    rax,0x10
ffff80000080266a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080266d:	48 83 f8 01          	cmp    rax,0x1
ffff800000802671:	75 2f                	jne    ffff8000008026a2 <init_memory+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272
            mem_size+=mmap_struct[i].len;
ffff800000802673:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080267a:	ff ff ff 
ffff80000080267d:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802681:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802684:	48 63 d0             	movsxd rdx,eax
ffff800000802687:	48 89 d0             	mov    rax,rdx
ffff80000080268a:	48 01 c0             	add    rax,rax
ffff80000080268d:	48 01 d0             	add    rax,rdx
ffff800000802690:	48 c1 e0 03          	shl    rax,0x3
ffff800000802694:	48 01 c8             	add    rax,rcx
ffff800000802697:	48 83 c0 08          	add    rax,0x8
ffff80000080269b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080269e:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff8000008026a2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269 (discriminator 1)
ffff8000008026a6:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008026ad:	ff ff ff 
ffff8000008026b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026b4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008026b6:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008026b9:	7c 87                	jl     ffff800000802642 <init_memory+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274
    }
    usr_mem_pa=PAGE_4K_ALIGN(mem_size/2);
ffff8000008026bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008026bf:	48 d1 e8             	shr    rax,1
ffff8000008026c2:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008026c8:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008026ce:	48 89 c2             	mov    rdx,rax
ffff8000008026d1:	48 b8 28 fd ff ff ff 	movabs rax,0xfffffffffffffd28
ffff8000008026d8:	ff ff ff 
ffff8000008026db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026df:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:281
    /*
     * 注：物理内存的一半会分给内核。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    pmalloc_entc= tot_mem_size / PAGE_4K_SIZE/32;
ffff8000008026e2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008026e6:	48 c1 e8 11          	shr    rax,0x11
ffff8000008026ea:	89 c2                	mov    edx,eax
ffff8000008026ec:	48 b8 28 ff ff ff ff 	movabs rax,0xffffffffffffff28
ffff8000008026f3:	ff ff ff 
ffff8000008026f6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026fa:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:282
    int pgc=(tot_mem_size/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
ffff8000008026fc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802700:	48 c1 e8 1b          	shr    rax,0x1b
ffff800000802704:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:284
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
ffff800000802707:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080270a:	c1 f8 05             	sar    eax,0x5
ffff80000080270d:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
ffff800000802710:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802714:	48 d1 e8             	shr    rax,1
ffff800000802717:	48 2d 00 00 00 01    	sub    rax,0x1000000
ffff80000080271d:	48 c1 e8 11          	shr    rax,0x11
ffff800000802721:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:288
    size_t vmms=vmec*4/PAGE_4K_SIZE;//位图自己需要多少页
ffff800000802725:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802729:	48 c1 e0 02          	shl    rax,0x2
ffff80000080272d:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802731:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:289
    comprintf("tot memsize:0x%l,available size 0x%l,kmalloc pages count:%d,kmalloc bitmap taking 0x%d pages\n", tot_mem_size,mem_size,vmec,vmms);
ffff800000802735:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000802739:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffff80000080273d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000802741:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802745:	49 89 f0             	mov    r8,rsi
ffff800000802748:	48 89 c6             	mov    rsi,rax
ffff80000080274b:	48 b8 e8 d5 ff ff ff 	movabs rax,0xffffffffffffd5e8
ffff800000802752:	ff ff ff 
ffff800000802755:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802759:	48 89 c7             	mov    rdi,rax
ffff80000080275c:	49 89 df             	mov    r15,rbx
ffff80000080275f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802764:	49 b9 cb 4b ef ff ff 	movabs r9,0xffffffffffef4bcb
ffff80000080276b:	ff ff ff 
ffff80000080276e:	49 01 d9             	add    r9,rbx
ffff800000802771:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:290
    if(vmec*4%PAGE_4K_SIZE)
ffff800000802774:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802778:	48 c1 e0 02          	shl    rax,0x2
ffff80000080277c:	25 fc 0f 00 00       	and    eax,0xffc
ffff800000802781:	48 85 c0             	test   rax,rax
ffff800000802784:	74 05                	je     ffff80000080278b <init_memory+0x1f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291
        vmms++;
ffff800000802786:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292
    for(int i=0;i<vmec;i++){
ffff80000080278b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000802792:	eb 27                	jmp    ffff8000008027bb <init_memory+0x226>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:293 (discriminator 3)
        vmalloc_map[i]=0;
ffff800000802794:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080279b:	ff ff ff 
ffff80000080279e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027a2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008027a5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008027a8:	48 98                	cdqe   
ffff8000008027aa:	48 c1 e0 02          	shl    rax,0x2
ffff8000008027ae:	48 01 d0             	add    rax,rdx
ffff8000008027b1:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292 (discriminator 3)
    for(int i=0;i<vmec;i++){
ffff8000008027b7:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292 (discriminator 1)
ffff8000008027bb:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008027be:	48 98                	cdqe   
ffff8000008027c0:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff8000008027c4:	77 ce                	ja     ffff800000802794 <init_memory+0x1ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296
    }
    //位图占用前几页
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff8000008027c6:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008027cd:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008027d4:	eb 61                	jmp    ffff800000802837 <init_memory+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:298
    {
        if(i==32)
ffff8000008027d6:	83 7d d0 20          	cmp    DWORD PTR [rbp-0x30],0x20
ffff8000008027da:	75 0b                	jne    ffff8000008027e7 <init_memory+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:300
        {
            i=0;
ffff8000008027dc:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301
            j++;
ffff8000008027e3:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303 (discriminator 2)
        }
        vmalloc_map[j]|=1u<<i;
ffff8000008027e7:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff8000008027ee:	ff ff ff 
ffff8000008027f1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027f5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008027f8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008027fb:	48 98                	cdqe   
ffff8000008027fd:	48 c1 e0 02          	shl    rax,0x2
ffff800000802801:	48 01 d0             	add    rax,rdx
ffff800000802804:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802806:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802809:	be 01 00 00 00       	mov    esi,0x1
ffff80000080280e:	89 c1                	mov    ecx,eax
ffff800000802810:	d3 e6                	shl    esi,cl
ffff800000802812:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000802819:	ff ff ff 
ffff80000080281c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802820:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802823:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802826:	48 98                	cdqe   
ffff800000802828:	48 c1 e0 02          	shl    rax,0x2
ffff80000080282c:	48 01 c8             	add    rax,rcx
ffff80000080282f:	09 f2                	or     edx,esi
ffff800000802831:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296 (discriminator 2)
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff800000802833:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296 (discriminator 1)
ffff800000802837:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080283a:	c1 e0 05             	shl    eax,0x5
ffff80000080283d:	89 c2                	mov    edx,eax
ffff80000080283f:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802842:	01 d0                	add    eax,edx
ffff800000802844:	48 98                	cdqe   
ffff800000802846:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080284a:	77 8a                	ja     ffff8000008027d6 <init_memory+0x241>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:306
    }
    //kmalloc连续的内存
    page_map=kmallocat(0,pgc);//(unsigned int*)PAGE_4K_ALIGN(0xc00000);
ffff80000080284c:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080284f:	89 c6                	mov    esi,eax
ffff800000802851:	bf 00 00 00 00       	mov    edi,0x0
ffff800000802856:	49 89 df             	mov    r15,rbx
ffff800000802859:	48 b8 18 45 ee ff ff 	movabs rax,0xffffffffffee4518
ffff800000802860:	ff ff ff 
ffff800000802863:	48 01 d8             	add    rax,rbx
ffff800000802866:	ff d0                	call   rax
ffff800000802868:	48 89 c2             	mov    rdx,rax
ffff80000080286b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802872:	ff ff ff 
ffff800000802875:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802879:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:307
    int* p=page_map;
ffff80000080287c:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802883:	ff ff ff 
ffff800000802886:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080288a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080288d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:308
    addr_t curp=0;
ffff800000802891:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000802898:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310
    //不能使用的内存提前占用掉
    for(int i=0;i<mmap_t_i;i++){
ffff800000802899:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff8000008028a0:	e9 1f 01 00 00       	jmp    ffff8000008029c4 <init_memory+0x42f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:311
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff8000008028a5:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff8000008028ac:	ff ff ff 
ffff8000008028af:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008028b3:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008028b6:	48 63 d0             	movsxd rdx,eax
ffff8000008028b9:	48 89 d0             	mov    rax,rdx
ffff8000008028bc:	48 01 c0             	add    rax,rax
ffff8000008028bf:	48 01 d0             	add    rax,rdx
ffff8000008028c2:	48 c1 e0 03          	shl    rax,0x3
ffff8000008028c6:	48 01 c8             	add    rax,rcx
ffff8000008028c9:	48 83 c0 10          	add    rax,0x10
ffff8000008028cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008028d0:	48 83 f8 01          	cmp    rax,0x1
ffff8000008028d4:	0f 84 e5 00 00 00    	je     ffff8000008029bf <init_memory+0x42a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313
            continue;
        int b=(mmap_struct[i].base-usr_mem_pa)/PAGE_4K_SIZE;
ffff8000008028da:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff8000008028e1:	ff ff ff 
ffff8000008028e4:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008028e8:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008028eb:	48 63 d0             	movsxd rdx,eax
ffff8000008028ee:	48 89 d0             	mov    rax,rdx
ffff8000008028f1:	48 01 c0             	add    rax,rax
ffff8000008028f4:	48 01 d0             	add    rax,rdx
ffff8000008028f7:	48 c1 e0 03          	shl    rax,0x3
ffff8000008028fb:	48 01 c8             	add    rax,rcx
ffff8000008028fe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802901:	48 b8 28 fd ff ff ff 	movabs rax,0xfffffffffffffd28
ffff800000802908:	ff ff ff 
ffff80000080290b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080290f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802912:	48 89 d0             	mov    rax,rdx
ffff800000802915:	48 29 c8             	sub    rax,rcx
ffff800000802918:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080291c:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:314
        int l=mmap_struct[i].len/PAGE_4K_SIZE;
ffff80000080291f:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff800000802926:	ff ff ff 
ffff800000802929:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080292d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802930:	48 63 d0             	movsxd rdx,eax
ffff800000802933:	48 89 d0             	mov    rax,rdx
ffff800000802936:	48 01 c0             	add    rax,rax
ffff800000802939:	48 01 d0             	add    rax,rdx
ffff80000080293c:	48 c1 e0 03          	shl    rax,0x3
ffff800000802940:	48 01 c8             	add    rax,rcx
ffff800000802943:	48 83 c0 08          	add    rax,0x8
ffff800000802947:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080294a:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080294e:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315
        for(int j=0;j<l;j++){
ffff800000802951:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff800000802958:	eb 5b                	jmp    ffff8000008029b5 <init_memory+0x420>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:316 (discriminator 3)
            p[b+j/32]|=1u<<(j%32);
ffff80000080295a:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080295d:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000802960:	85 c0                	test   eax,eax
ffff800000802962:	0f 48 c2             	cmovs  eax,edx
ffff800000802965:	c1 f8 05             	sar    eax,0x5
ffff800000802968:	89 c6                	mov    esi,eax
ffff80000080296a:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080296d:	01 f0                	add    eax,esi
ffff80000080296f:	48 98                	cdqe   
ffff800000802971:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000802978:	00 
ffff800000802979:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080297d:	48 01 d0             	add    rax,rdx
ffff800000802980:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802982:	89 c7                	mov    edi,eax
ffff800000802984:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802987:	83 e0 1f             	and    eax,0x1f
ffff80000080298a:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080298f:	89 c1                	mov    ecx,eax
ffff800000802991:	d3 e2                	shl    edx,cl
ffff800000802993:	89 d0                	mov    eax,edx
ffff800000802995:	09 c7                	or     edi,eax
ffff800000802997:	89 fa                	mov    edx,edi
ffff800000802999:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080299c:	01 f0                	add    eax,esi
ffff80000080299e:	48 98                	cdqe   
ffff8000008029a0:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
ffff8000008029a7:	00 
ffff8000008029a8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008029ac:	48 01 c8             	add    rax,rcx
ffff8000008029af:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315 (discriminator 3)
        for(int j=0;j<l;j++){
ffff8000008029b1:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315 (discriminator 1)
ffff8000008029b5:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008029b8:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
ffff8000008029bb:	7c 9d                	jl     ffff80000080295a <init_memory+0x3c5>
ffff8000008029bd:	eb 01                	jmp    ffff8000008029c0 <init_memory+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:312
            continue;
ffff8000008029bf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++){
ffff8000008029c0:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310 (discriminator 1)
ffff8000008029c4:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008029cb:	ff ff ff 
ffff8000008029ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029d2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008029d4:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
ffff8000008029d7:	0f 8c c8 fe ff ff    	jl     ffff8000008028a5 <init_memory+0x310>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320
        }
    }
    //低1gb提前占用掉 knl
    for(int j=0;j<0x2000;j++){
ffff8000008029dd:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
ffff8000008029e4:	eb 27                	jmp    ffff800000802a0d <init_memory+0x478>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:321 (discriminator 3)
        page_map[j]=-1;
ffff8000008029e6:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008029ed:	ff ff ff 
ffff8000008029f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029f4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008029f7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008029fa:	48 98                	cdqe   
ffff8000008029fc:	48 c1 e0 02          	shl    rax,0x2
ffff800000802a00:	48 01 d0             	add    rax,rdx
ffff800000802a03:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320 (discriminator 3)
    for(int j=0;j<0x2000;j++){
ffff800000802a09:	83 45 c0 01          	add    DWORD PTR [rbp-0x40],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320 (discriminator 1)
ffff800000802a0d:	81 7d c0 ff 1f 00 00 	cmp    DWORD PTR [rbp-0x40],0x1fff
ffff800000802a14:	7e d0                	jle    ffff8000008029e6 <init_memory+0x451>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:351
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
ffff800000802a16:	90                   	nop
ffff800000802a17:	90                   	nop
ffff800000802a18:	48 83 c4 60          	add    rsp,0x60
ffff800000802a1c:	5b                   	pop    rbx
ffff800000802a1d:	41 5f                	pop    r15
ffff800000802a1f:	5d                   	pop    rbp
ffff800000802a20:	c3                   	ret    

ffff800000802a21 <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:357
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
ffff800000802a21:	f3 0f 1e fa          	endbr64 
ffff800000802a25:	55                   	push   rbp
ffff800000802a26:	48 89 e5             	mov    rbp,rsp
ffff800000802a29:	41 57                	push   r15
ffff800000802a2b:	53                   	push   rbx
ffff800000802a2c:	48 83 ec 10          	sub    rsp,0x10
ffff800000802a30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802a30 <req_a_page+0xf>
ffff800000802a37:	49 bb 28 b1 11 00 00 	movabs r11,0x11b128
ffff800000802a3e:	00 00 00 
ffff800000802a41:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802a44:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802a4b:	e9 6b 01 00 00       	jmp    ffff800000802bbb <req_a_page+0x19a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359
        for(int j=0;j<32;j++){
ffff800000802a50:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000802a57:	e9 51 01 00 00       	jmp    ffff800000802bad <req_a_page+0x18c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:360
            unsigned int bit=page_map[i]&(1<<j);
ffff800000802a5c:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802a63:	ff ff ff 
ffff800000802a66:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802a6a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802a6d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802a70:	48 98                	cdqe   
ffff800000802a72:	48 c1 e0 02          	shl    rax,0x2
ffff800000802a76:	48 01 d0             	add    rax,rdx
ffff800000802a79:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802a7b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802a7e:	be 01 00 00 00       	mov    esi,0x1
ffff800000802a83:	89 c1                	mov    ecx,eax
ffff800000802a85:	d3 e6                	shl    esi,cl
ffff800000802a87:	89 f0                	mov    eax,esi
ffff800000802a89:	21 d0                	and    eax,edx
ffff800000802a8b:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361
            if((i*32+j)*4096>=0x100000&&(bit==0u))
ffff800000802a8e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802a91:	c1 e0 05             	shl    eax,0x5
ffff800000802a94:	89 c2                	mov    edx,eax
ffff800000802a96:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802a99:	01 d0                	add    eax,edx
ffff800000802a9b:	c1 e0 0c             	shl    eax,0xc
ffff800000802a9e:	3d ff ff 0f 00       	cmp    eax,0xfffff
ffff800000802aa3:	0f 8e 00 01 00 00    	jle    ffff800000802ba9 <req_a_page+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361 (discriminator 1)
ffff800000802aa9:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000802aad:	0f 85 f6 00 00 00    	jne    ffff800000802ba9 <req_a_page+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:363
            {
                comprintf("req_a_page:before:page_map[%d]=0x%x,",i,page_map[i]);
ffff800000802ab3:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802aba:	ff ff ff 
ffff800000802abd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802ac1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802ac4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802ac7:	48 98                	cdqe   
ffff800000802ac9:	48 c1 e0 02          	shl    rax,0x2
ffff800000802acd:	48 01 d0             	add    rax,rdx
ffff800000802ad0:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802ad2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802ad5:	89 c6                	mov    esi,eax
ffff800000802ad7:	48 b8 48 d6 ff ff ff 	movabs rax,0xffffffffffffd648
ffff800000802ade:	ff ff ff 
ffff800000802ae1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802ae5:	48 89 c7             	mov    rdi,rax
ffff800000802ae8:	49 89 df             	mov    r15,rbx
ffff800000802aeb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802af0:	48 b9 cb 4b ef ff ff 	movabs rcx,0xffffffffffef4bcb
ffff800000802af7:	ff ff ff 
ffff800000802afa:	48 01 d9             	add    rcx,rbx
ffff800000802afd:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364
                page_map[i]=page_map[i]|(1<<j);
ffff800000802aff:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802b06:	ff ff ff 
ffff800000802b09:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b0d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802b10:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b13:	48 98                	cdqe   
ffff800000802b15:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b19:	48 01 d0             	add    rax,rdx
ffff800000802b1c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802b1e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802b21:	be 01 00 00 00       	mov    esi,0x1
ffff800000802b26:	89 c1                	mov    ecx,eax
ffff800000802b28:	d3 e6                	shl    esi,cl
ffff800000802b2a:	89 f0                	mov    eax,esi
ffff800000802b2c:	89 c6                	mov    esi,eax
ffff800000802b2e:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802b35:	ff ff ff 
ffff800000802b38:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b3c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802b3f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b42:	48 98                	cdqe   
ffff800000802b44:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b48:	48 01 c8             	add    rax,rcx
ffff800000802b4b:	09 f2                	or     edx,esi
ffff800000802b4d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:365
                comprintf("now = 0x%x",page_map[i]);
ffff800000802b4f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802b56:	ff ff ff 
ffff800000802b59:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b5d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802b60:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b63:	48 98                	cdqe   
ffff800000802b65:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b69:	48 01 d0             	add    rax,rdx
ffff800000802b6c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802b6e:	89 c6                	mov    esi,eax
ffff800000802b70:	48 b8 6d d6 ff ff ff 	movabs rax,0xffffffffffffd66d
ffff800000802b77:	ff ff ff 
ffff800000802b7a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802b7e:	48 89 c7             	mov    rdi,rax
ffff800000802b81:	49 89 df             	mov    r15,rbx
ffff800000802b84:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802b89:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff800000802b90:	ff ff ff 
ffff800000802b93:	48 01 da             	add    rdx,rbx
ffff800000802b96:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
                return i*32+j;//num of page
ffff800000802b98:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b9b:	c1 e0 05             	shl    eax,0x5
ffff800000802b9e:	89 c2                	mov    edx,eax
ffff800000802ba0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802ba3:	01 d0                	add    eax,edx
ffff800000802ba5:	48 98                	cdqe   
ffff800000802ba7:	eb 32                	jmp    ffff800000802bdb <req_a_page+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359 (discriminator 2)
        for(int j=0;j<32;j++){
ffff800000802ba9:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359 (discriminator 1)
ffff800000802bad:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000802bb1:	0f 8e a5 fe ff ff    	jle    ffff800000802a5c <req_a_page+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358 (discriminator 2)
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802bb7:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358 (discriminator 1)
ffff800000802bbb:	48 b8 28 ff ff ff ff 	movabs rax,0xffffffffffffff28
ffff800000802bc2:	ff ff ff 
ffff800000802bc5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802bc9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802bcb:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffff800000802bce:	0f 8c 7c fe ff ff    	jl     ffff800000802a50 <req_a_page+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:371

            }
        }
    }
    return -1;
ffff800000802bd4:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:372
}
ffff800000802bdb:	48 83 c4 10          	add    rsp,0x10
ffff800000802bdf:	5b                   	pop    rbx
ffff800000802be0:	41 5f                	pop    r15
ffff800000802be2:	5d                   	pop    rbp
ffff800000802be3:	c3                   	ret    

ffff800000802be4 <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:374

void * pmalloc(){
ffff800000802be4:	f3 0f 1e fa          	endbr64 
ffff800000802be8:	55                   	push   rbp
ffff800000802be9:	48 89 e5             	mov    rbp,rsp
ffff800000802bec:	41 57                	push   r15
ffff800000802bee:	53                   	push   rbx
ffff800000802bef:	48 83 ec 10          	sub    rsp,0x10
ffff800000802bf3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802bf3 <pmalloc+0xf>
ffff800000802bfa:	49 bb 65 af 11 00 00 	movabs r11,0x11af65
ffff800000802c01:	00 00 00 
ffff800000802c04:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:375
    void *ret=(void*)(get_phyaddr(req_a_page()));
ffff800000802c07:	49 89 df             	mov    r15,rbx
ffff800000802c0a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802c0f:	48 ba c9 4e ee ff ff 	movabs rdx,0xffffffffffee4ec9
ffff800000802c16:	ff ff ff 
ffff800000802c19:	48 01 da             	add    rdx,rbx
ffff800000802c1c:	ff d2                	call   rdx
ffff800000802c1e:	89 c7                	mov    edi,eax
ffff800000802c20:	49 89 df             	mov    r15,rbx
ffff800000802c23:	48 b8 b6 52 ee ff ff 	movabs rax,0xffffffffffee52b6
ffff800000802c2a:	ff ff ff 
ffff800000802c2d:	48 01 d8             	add    rax,rbx
ffff800000802c30:	ff d0                	call   rax
ffff800000802c32:	48 98                	cdqe   
ffff800000802c34:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:376
    comprintf("pmalloc():%l\n",ret);
ffff800000802c38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802c3c:	48 89 c6             	mov    rsi,rax
ffff800000802c3f:	48 b8 78 d6 ff ff ff 	movabs rax,0xffffffffffffd678
ffff800000802c46:	ff ff ff 
ffff800000802c49:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802c4d:	48 89 c7             	mov    rdi,rax
ffff800000802c50:	49 89 df             	mov    r15,rbx
ffff800000802c53:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802c58:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff800000802c5f:	ff ff ff 
ffff800000802c62:	48 01 da             	add    rdx,rbx
ffff800000802c65:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:377
    return ret;
ffff800000802c67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:378
}
ffff800000802c6b:	48 83 c4 10          	add    rsp,0x10
ffff800000802c6f:	5b                   	pop    rbx
ffff800000802c70:	41 5f                	pop    r15
ffff800000802c72:	5d                   	pop    rbp
ffff800000802c73:	c3                   	ret    

ffff800000802c74 <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:379
int free_page(char *paddr){
ffff800000802c74:	f3 0f 1e fa          	endbr64 
ffff800000802c78:	55                   	push   rbp
ffff800000802c79:	48 89 e5             	mov    rbp,rsp
ffff800000802c7c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802c7c <free_page+0x8>
ffff800000802c83:	49 bb dc ae 11 00 00 	movabs r11,0x11aedc
ffff800000802c8a:	00 00 00 
ffff800000802c8d:	4c 01 da             	add    rdx,r11
ffff800000802c90:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:380
    int num=(int)paddr/4096;
ffff800000802c94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802c98:	8d 88 ff 0f 00 00    	lea    ecx,[rax+0xfff]
ffff800000802c9e:	85 c0                	test   eax,eax
ffff800000802ca0:	0f 48 c1             	cmovs  eax,ecx
ffff800000802ca3:	c1 f8 0c             	sar    eax,0xc
ffff800000802ca6:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:381
    int n=num/32;
ffff800000802ca9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802cac:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802caf:	85 c0                	test   eax,eax
ffff800000802cb1:	0f 48 c1             	cmovs  eax,ecx
ffff800000802cb4:	c1 f8 05             	sar    eax,0x5
ffff800000802cb7:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:382
    int r=num%32;
ffff800000802cba:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802cbd:	89 c1                	mov    ecx,eax
ffff800000802cbf:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802cc2:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802cc5:	01 c8                	add    eax,ecx
ffff800000802cc7:	83 e0 1f             	and    eax,0x1f
ffff800000802cca:	29 c8                	sub    eax,ecx
ffff800000802ccc:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:383
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
ffff800000802ccf:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802cd6:	ff ff ff 
ffff800000802cd9:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802cdd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802ce0:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802ce3:	48 98                	cdqe   
ffff800000802ce5:	48 c1 e0 02          	shl    rax,0x2
ffff800000802ce9:	48 01 c8             	add    rax,rcx
ffff800000802cec:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802cee:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802cf1:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802cf6:	89 c1                	mov    ecx,eax
ffff800000802cf8:	d3 e7                	shl    edi,cl
ffff800000802cfa:	89 f8                	mov    eax,edi
ffff800000802cfc:	f7 d0                	not    eax
ffff800000802cfe:	89 c1                	mov    ecx,eax
ffff800000802d00:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802d07:	ff ff ff 
ffff800000802d0a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802d0e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802d11:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802d14:	48 98                	cdqe   
ffff800000802d16:	48 c1 e0 02          	shl    rax,0x2
ffff800000802d1a:	48 01 d0             	add    rax,rdx
ffff800000802d1d:	21 ce                	and    esi,ecx
ffff800000802d1f:	89 f2                	mov    edx,esi
ffff800000802d21:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:384
}
ffff800000802d23:	90                   	nop
ffff800000802d24:	5d                   	pop    rbp
ffff800000802d25:	c3                   	ret    

ffff800000802d26 <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:386

int free_pages_at(int base,int pgn){
ffff800000802d26:	f3 0f 1e fa          	endbr64 
ffff800000802d2a:	55                   	push   rbp
ffff800000802d2b:	48 89 e5             	mov    rbp,rsp
ffff800000802d2e:	41 57                	push   r15
ffff800000802d30:	53                   	push   rbx
ffff800000802d31:	48 83 ec 20          	sub    rsp,0x20
ffff800000802d35:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802d35 <free_pages_at+0xf>
ffff800000802d3c:	49 bb 23 ae 11 00 00 	movabs r11,0x11ae23
ffff800000802d43:	00 00 00 
ffff800000802d46:	4c 01 db             	add    rbx,r11
ffff800000802d49:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000802d4c:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387
    for(int i=0;i<pgn;i++){
ffff800000802d4f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802d56:	eb 28                	jmp    ffff800000802d80 <free_pages_at+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:388 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
ffff800000802d58:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802d5b:	c1 e0 0c             	shl    eax,0xc
ffff800000802d5e:	89 c2                	mov    edx,eax
ffff800000802d60:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802d63:	01 d0                	add    eax,edx
ffff800000802d65:	48 98                	cdqe   
ffff800000802d67:	48 89 c7             	mov    rdi,rax
ffff800000802d6a:	49 89 df             	mov    r15,rbx
ffff800000802d6d:	48 b8 1c 51 ee ff ff 	movabs rax,0xffffffffffee511c
ffff800000802d74:	ff ff ff 
ffff800000802d77:	48 01 d8             	add    rax,rbx
ffff800000802d7a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387 (discriminator 3)
    for(int i=0;i<pgn;i++){
ffff800000802d7c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387 (discriminator 1)
ffff800000802d80:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802d83:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000802d86:	7c d0                	jl     ffff800000802d58 <free_pages_at+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390
    }
}
ffff800000802d88:	90                   	nop
ffff800000802d89:	48 83 c4 20          	add    rsp,0x20
ffff800000802d8d:	5b                   	pop    rbx
ffff800000802d8e:	41 5f                	pop    r15
ffff800000802d90:	5d                   	pop    rbp
ffff800000802d91:	c3                   	ret    

ffff800000802d92 <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:391
int check_page(int num){
ffff800000802d92:	f3 0f 1e fa          	endbr64 
ffff800000802d96:	55                   	push   rbp
ffff800000802d97:	48 89 e5             	mov    rbp,rsp
ffff800000802d9a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802d9a <check_page+0x8>
ffff800000802da1:	49 bb be ad 11 00 00 	movabs r11,0x11adbe
ffff800000802da8:	00 00 00 
ffff800000802dab:	4c 01 da             	add    rdx,r11
ffff800000802dae:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:392
    int n=num/32;
ffff800000802db1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802db4:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802db7:	85 c0                	test   eax,eax
ffff800000802db9:	0f 48 c1             	cmovs  eax,ecx
ffff800000802dbc:	c1 f8 05             	sar    eax,0x5
ffff800000802dbf:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:393
    int r=num%32;
ffff800000802dc2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802dc5:	89 c1                	mov    ecx,eax
ffff800000802dc7:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802dca:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802dcd:	01 c8                	add    eax,ecx
ffff800000802dcf:	83 e0 1f             	and    eax,0x1f
ffff800000802dd2:	29 c8                	sub    eax,ecx
ffff800000802dd4:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:394
    int bit=page_map[n]&(1<<r);
ffff800000802dd7:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802dde:	ff ff ff 
ffff800000802de1:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802de5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802de8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802deb:	48 98                	cdqe   
ffff800000802ded:	48 c1 e0 02          	shl    rax,0x2
ffff800000802df1:	48 01 d0             	add    rax,rdx
ffff800000802df4:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802df6:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802df9:	be 01 00 00 00       	mov    esi,0x1
ffff800000802dfe:	89 c1                	mov    ecx,eax
ffff800000802e00:	d3 e6                	shl    esi,cl
ffff800000802e02:	89 f0                	mov    eax,esi
ffff800000802e04:	21 d0                	and    eax,edx
ffff800000802e06:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:395
    return bit;
ffff800000802e09:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:396
}
ffff800000802e0c:	5d                   	pop    rbp
ffff800000802e0d:	c3                   	ret    

ffff800000802e0e <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:400
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
ffff800000802e0e:	f3 0f 1e fa          	endbr64 
ffff800000802e12:	55                   	push   rbp
ffff800000802e13:	48 89 e5             	mov    rbp,rsp
ffff800000802e16:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802e16 <get_phyaddr+0x8>
ffff800000802e1d:	49 bb 42 ad 11 00 00 	movabs r11,0x11ad42
ffff800000802e24:	00 00 00 
ffff800000802e27:	4c 01 d8             	add    rax,r11
ffff800000802e2a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:401
    if(num==-1)return -1;
ffff800000802e2d:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
ffff800000802e31:	75 07                	jne    ffff800000802e3a <get_phyaddr+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:401 (discriminator 1)
ffff800000802e33:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000802e38:	eb 06                	jmp    ffff800000802e40 <get_phyaddr+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:402
    return num*0x1000;
ffff800000802e3a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802e3d:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:403
}
ffff800000802e40:	5d                   	pop    rbp
ffff800000802e41:	c3                   	ret    

ffff800000802e42 <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:406

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
ffff800000802e42:	f3 0f 1e fa          	endbr64 
ffff800000802e46:	55                   	push   rbp
ffff800000802e47:	48 89 e5             	mov    rbp,rsp
ffff800000802e4a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802e4a <set_page_item+0x8>
ffff800000802e51:	49 bb 0e ad 11 00 00 	movabs r11,0x11ad0e
ffff800000802e58:	00 00 00 
ffff800000802e5b:	4c 01 d8             	add    rax,r11
ffff800000802e5e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000802e62:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000802e65:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:407
    *item_addr=0;
ffff800000802e68:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e6c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:408
    *item_addr|=phy_addr&0xfffff000;
ffff800000802e73:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e77:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e7a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802e7d:	89 c0                	mov    eax,eax
ffff800000802e7f:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000802e84:	48 09 c2             	or     rdx,rax
ffff800000802e87:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e8b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:409
    *item_addr|=attr;
ffff800000802e8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e92:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e95:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffff800000802e98:	48 98                	cdqe   
ffff800000802e9a:	48 09 c2             	or     rdx,rax
ffff800000802e9d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802ea1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:410
}
ffff800000802ea4:	90                   	nop
ffff800000802ea5:	5d                   	pop    rbp
ffff800000802ea6:	c3                   	ret    

ffff800000802ea7 <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:412
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
ffff800000802ea7:	f3 0f 1e fa          	endbr64 
ffff800000802eab:	55                   	push   rbp
ffff800000802eac:	48 89 e5             	mov    rbp,rsp
ffff800000802eaf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802eaf <set_1gb_pdpt+0x8>
ffff800000802eb6:	49 bb a9 ac 11 00 00 	movabs r11,0x11aca9
ffff800000802ebd:	00 00 00 
ffff800000802ec0:	4c 01 d8             	add    rax,r11
ffff800000802ec3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802ec7:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802eca:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:413
    *ppdpt=0;
ffff800000802ecd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802ed1:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:414
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
ffff800000802ed8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802edc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802edf:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802ee2:	0c 81                	or     al,0x81
ffff800000802ee4:	89 c0                	mov    eax,eax
ffff800000802ee6:	48 09 c2             	or     rdx,rax
ffff800000802ee9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802eed:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:415
    unsigned int hipa=pa&0xffffc0000000ul;
ffff800000802ef0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802ef3:	25 00 00 00 c0       	and    eax,0xc0000000
ffff800000802ef8:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:416
    *ppdpt|=hipa;
ffff800000802efb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802eff:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f02:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802f05:	48 09 c2             	or     rdx,rax
ffff800000802f08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f0c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:417
}
ffff800000802f0f:	90                   	nop
ffff800000802f10:	5d                   	pop    rbp
ffff800000802f11:	c3                   	ret    

ffff800000802f12 <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:419
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
ffff800000802f12:	f3 0f 1e fa          	endbr64 
ffff800000802f16:	55                   	push   rbp
ffff800000802f17:	48 89 e5             	mov    rbp,rsp
ffff800000802f1a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802f1a <set_2mb_pde+0x8>
ffff800000802f21:	49 bb 3e ac 11 00 00 	movabs r11,0x11ac3e
ffff800000802f28:	00 00 00 
ffff800000802f2b:	4c 01 d8             	add    rax,r11
ffff800000802f2e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802f32:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802f35:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:420
    *pde=0;
ffff800000802f38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f3c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:421
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
ffff800000802f43:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f47:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f4a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802f4d:	0d 81 10 00 00       	or     eax,0x1081
ffff800000802f52:	48 98                	cdqe   
ffff800000802f54:	48 09 c2             	or     rdx,rax
ffff800000802f57:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f5b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:422
    unsigned int hipa=pa&0xffc00000;
ffff800000802f5e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802f61:	25 00 00 c0 ff       	and    eax,0xffc00000
ffff800000802f66:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:423
    *pde|=hipa;
ffff800000802f69:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f6d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f70:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802f73:	48 09 c2             	or     rdx,rax
ffff800000802f76:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f7a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:424
}
ffff800000802f7d:	90                   	nop
ffff800000802f7e:	5d                   	pop    rbp
ffff800000802f7f:	c3                   	ret    

ffff800000802f80 <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:445
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
ffff800000802f80:	f3 0f 1e fa          	endbr64 
ffff800000802f84:	55                   	push   rbp
ffff800000802f85:	48 89 e5             	mov    rbp,rsp
ffff800000802f88:	41 57                	push   r15
ffff800000802f8a:	53                   	push   rbx
ffff800000802f8b:	48 83 ec 20          	sub    rsp,0x20
ffff800000802f8f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802f8f <req_page_at+0xf>
ffff800000802f96:	49 bb c9 ab 11 00 00 	movabs r11,0x11abc9
ffff800000802f9d:	00 00 00 
ffff800000802fa0:	4c 01 db             	add    rbx,r11
ffff800000802fa3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802fa7:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:446
    if(base==0)//不指定地址
ffff800000802faa:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000802faf:	75 32                	jne    ffff800000802fe3 <req_page_at+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:448
    {
        return get_phyaddr(req_a_page());
ffff800000802fb1:	49 89 df             	mov    r15,rbx
ffff800000802fb4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802fb9:	48 ba c9 4e ee ff ff 	movabs rdx,0xffffffffffee4ec9
ffff800000802fc0:	ff ff ff 
ffff800000802fc3:	48 01 da             	add    rdx,rbx
ffff800000802fc6:	ff d2                	call   rdx
ffff800000802fc8:	89 c7                	mov    edi,eax
ffff800000802fca:	49 89 df             	mov    r15,rbx
ffff800000802fcd:	48 b8 b6 52 ee ff ff 	movabs rax,0xffffffffffee52b6
ffff800000802fd4:	ff ff ff 
ffff800000802fd7:	48 01 d8             	add    rax,rbx
ffff800000802fda:	ff d0                	call   rax
ffff800000802fdc:	48 98                	cdqe   
ffff800000802fde:	e9 c6 00 00 00       	jmp    ffff8000008030a9 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
ffff800000802fe3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802fe7:	89 c2                	mov    edx,eax
ffff800000802fe9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000802fec:	89 c6                	mov    esi,eax
ffff800000802fee:	89 d7                	mov    edi,edx
ffff800000802ff0:	49 89 df             	mov    r15,rbx
ffff800000802ff3:	48 b8 2b 56 ee ff ff 	movabs rax,0xffffffffffee562b
ffff800000802ffa:	ff ff ff 
ffff800000802ffd:	48 01 d8             	add    rax,rbx
ffff800000803000:	ff d0                	call   rax
ffff800000803002:	85 c0                	test   eax,eax
ffff800000803004:	75 0c                	jne    ffff800000803012 <req_page_at+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450 (discriminator 1)
ffff800000803006:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080300d:	e9 97 00 00 00       	jmp    ffff8000008030a9 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:451
    int pgni=base/4096;
ffff800000803012:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803016:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080301a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:452
    int pgi=pgni/32;
ffff80000080301d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803020:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000803023:	85 c0                	test   eax,eax
ffff800000803025:	0f 48 c2             	cmovs  eax,edx
ffff800000803028:	c1 f8 05             	sar    eax,0x5
ffff80000080302b:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453
    int pgj=pgni%32;
ffff80000080302e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803031:	99                   	cdq    
ffff800000803032:	c1 ea 1b             	shr    edx,0x1b
ffff800000803035:	01 d0                	add    eax,edx
ffff800000803037:	83 e0 1f             	and    eax,0x1f
ffff80000080303a:	29 d0                	sub    eax,edx
ffff80000080303c:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454
    for(int i=0;i<pgn;i++)
ffff80000080303f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803046:	eb 54                	jmp    ffff80000080309c <req_page_at+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
ffff800000803048:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080304f:	ff ff ff 
ffff800000803052:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803056:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803059:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080305c:	48 98                	cdqe   
ffff80000080305e:	48 c1 e0 02          	shl    rax,0x2
ffff800000803062:	48 01 d0             	add    rax,rdx
ffff800000803065:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000803067:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080306a:	be 01 00 00 00       	mov    esi,0x1
ffff80000080306f:	89 c1                	mov    ecx,eax
ffff800000803071:	d3 e6                	shl    esi,cl
ffff800000803073:	89 f0                	mov    eax,esi
ffff800000803075:	89 c6                	mov    esi,eax
ffff800000803077:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080307e:	ff ff ff 
ffff800000803081:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803085:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803088:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080308b:	48 98                	cdqe   
ffff80000080308d:	48 c1 e0 02          	shl    rax,0x2
ffff800000803091:	48 01 c8             	add    rax,rcx
ffff800000803094:	09 f2                	or     edx,esi
ffff800000803096:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454 (discriminator 3)
    for(int i=0;i<pgn;i++)
ffff800000803098:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454 (discriminator 1)
ffff80000080309c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080309f:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008030a2:	7c a4                	jl     ffff800000803048 <req_page_at+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:458
    }
    return 0;
ffff8000008030a4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:460

}
ffff8000008030a9:	48 83 c4 20          	add    rsp,0x20
ffff8000008030ad:	5b                   	pop    rbx
ffff8000008030ae:	41 5f                	pop    r15
ffff8000008030b0:	5d                   	pop    rbp
ffff8000008030b1:	c3                   	ret    

ffff8000008030b2 <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:462
int chk_vm(int base, int pgn)
{
ffff8000008030b2:	f3 0f 1e fa          	endbr64 
ffff8000008030b6:	55                   	push   rbp
ffff8000008030b7:	48 89 e5             	mov    rbp,rsp
ffff8000008030ba:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008030ba <chk_vm+0x8>
ffff8000008030c1:	49 bb 9e aa 11 00 00 	movabs r11,0x11aa9e
ffff8000008030c8:	00 00 00 
ffff8000008030cb:	4c 01 d8             	add    rax,r11
ffff8000008030ce:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff8000008030d1:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463
    int *pdet=0;
ffff8000008030d4:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff8000008030db:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:464
    asm volatile("mov %%cr3,%0":"=r"(pdet));
ffff8000008030dc:	0f 20 d8             	mov    rax,cr3
ffff8000008030df:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
ffff8000008030e3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008030e6:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff8000008030ec:	85 c0                	test   eax,eax
ffff8000008030ee:	0f 48 c2             	cmovs  eax,edx
ffff8000008030f1:	c1 f8 15             	sar    eax,0x15
ffff8000008030f4:	48 98                	cdqe   
ffff8000008030f6:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff8000008030fd:	00 
ffff8000008030fe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803102:	48 01 d0             	add    rax,rdx
ffff800000803105:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803107:	89 c0                	mov    eax,eax
ffff800000803109:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff80000080310e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000803112:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803115:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff80000080311b:	85 c0                	test   eax,eax
ffff80000080311d:	0f 48 c2             	cmovs  eax,edx
ffff800000803120:	c1 f8 15             	sar    eax,0x15
ffff800000803123:	48 98                	cdqe   
ffff800000803125:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080312c:	00 
ffff80000080312d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803131:	48 01 d0             	add    rax,rdx
ffff800000803134:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803136:	83 e0 01             	and    eax,0x1
ffff800000803139:	85 c0                	test   eax,eax
ffff80000080313b:	74 38                	je     ffff800000803175 <chk_vm+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
ffff80000080313d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803140:	99                   	cdq    
ffff800000803141:	c1 ea 0b             	shr    edx,0xb
ffff800000803144:	01 d0                	add    eax,edx
ffff800000803146:	25 ff ff 1f 00       	and    eax,0x1fffff
ffff80000080314b:	29 d0                	sub    eax,edx
ffff80000080314d:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000803153:	85 c0                	test   eax,eax
ffff800000803155:	0f 48 c2             	cmovs  eax,edx
ffff800000803158:	c1 f8 0c             	sar    eax,0xc
ffff80000080315b:	48 98                	cdqe   
ffff80000080315d:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803164:	00 
ffff800000803165:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803169:	48 01 d0             	add    rax,rdx
ffff80000080316c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080316e:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000803171:	85 c0                	test   eax,eax
ffff800000803173:	75 07                	jne    ffff80000080317c <chk_vm+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:469
    {
        return -1;
ffff800000803175:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080317a:	eb 05                	jmp    ffff800000803181 <chk_vm+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:471
    }
    return 0;
ffff80000080317c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:472
}
ffff800000803181:	5d                   	pop    rbp
ffff800000803182:	c3                   	ret    

ffff800000803183 <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:475
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
ffff800000803183:	f3 0f 1e fa          	endbr64 
ffff800000803187:	55                   	push   rbp
ffff800000803188:	48 89 e5             	mov    rbp,rsp
ffff80000080318b:	41 57                	push   r15
ffff80000080318d:	53                   	push   rbx
ffff80000080318e:	48 83 ec 20          	sub    rsp,0x20
ffff800000803192:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803192 <is_pgs_ava+0xf>
ffff800000803199:	49 bb c6 a9 11 00 00 	movabs r11,0x11a9c6
ffff8000008031a0:	00 00 00 
ffff8000008031a3:	4c 01 db             	add    rbx,r11
ffff8000008031a6:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008031a9:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:476
    int pgi=base/4096;
ffff8000008031ac:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008031af:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008031b5:	85 c0                	test   eax,eax
ffff8000008031b7:	0f 48 c2             	cmovs  eax,edx
ffff8000008031ba:	c1 f8 0c             	sar    eax,0xc
ffff8000008031bd:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477
    for(int i=0;i<pgn;i++)
ffff8000008031c0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008031c7:	eb 2b                	jmp    ffff8000008031f4 <is_pgs_ava+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479
    {
        if(check_page(pgi+i)!=0)return 0;
ffff8000008031c9:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008031cc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008031cf:	01 d0                	add    eax,edx
ffff8000008031d1:	89 c7                	mov    edi,eax
ffff8000008031d3:	49 89 df             	mov    r15,rbx
ffff8000008031d6:	48 b8 3a 52 ee ff ff 	movabs rax,0xffffffffffee523a
ffff8000008031dd:	ff ff ff 
ffff8000008031e0:	48 01 d8             	add    rax,rbx
ffff8000008031e3:	ff d0                	call   rax
ffff8000008031e5:	85 c0                	test   eax,eax
ffff8000008031e7:	74 07                	je     ffff8000008031f0 <is_pgs_ava+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479 (discriminator 1)
ffff8000008031e9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008031ee:	eb 11                	jmp    ffff800000803201 <is_pgs_ava+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477 (discriminator 2)
    for(int i=0;i<pgn;i++)
ffff8000008031f0:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477 (discriminator 1)
ffff8000008031f4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008031f7:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff8000008031fa:	7c cd                	jl     ffff8000008031c9 <is_pgs_ava+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481
    }
    return 1;
ffff8000008031fc:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:483

}
ffff800000803201:	48 83 c4 20          	add    rsp,0x20
ffff800000803205:	5b                   	pop    rbx
ffff800000803206:	41 5f                	pop    r15
ffff800000803208:	5d                   	pop    rbp
ffff800000803209:	c3                   	ret    

ffff80000080320a <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:24
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
ffff80000080320a:	f3 0f 1e fa          	endbr64 
ffff80000080320e:	55                   	push   rbp
ffff80000080320f:	48 89 e5             	mov    rbp,rsp
ffff800000803212:	41 57                	push   r15
ffff800000803214:	48 81 ec 88 00 00 00 	sub    rsp,0x88
ffff80000080321b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080321b <make_dentry+0x11>
ffff800000803222:	49 bb 3d a9 11 00 00 	movabs r11,0x11a93d
ffff800000803229:	00 00 00 
ffff80000080322c:	4c 01 d8             	add    rax,r11
ffff80000080322f:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000803233:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff800000803237:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
ffff80000080323a:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff80000080323e:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:25
    strcpy(d->name,name);
ffff800000803245:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff800000803249:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080324c:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
ffff800000803250:	48 89 ce             	mov    rsi,rcx
ffff800000803253:	48 89 d7             	mov    rdi,rdx
ffff800000803256:	49 89 c7             	mov    r15,rax
ffff800000803259:	48 ba 70 51 ef ff ff 	movabs rdx,0xffffffffffef5170
ffff800000803260:	ff ff ff 
ffff800000803263:	48 01 c2             	add    rdx,rax
ffff800000803266:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:26
    d->name_length=namelen;
ffff800000803268:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080326c:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
ffff80000080326f:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:28
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
ffff800000803272:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803276:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080327d:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:29
    list_init(&d->subdirs_list);
ffff800000803281:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803285:	48 83 c0 28          	add    rax,0x28
ffff800000803289:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    struct List * next;
};

__attribute__((always_inline)) inline void list_init(struct List * list)
{
    list->prev = NULL;
ffff80000080328d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803291:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000803298:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080329c:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008032a3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008032a4:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:30
    list_init(&d->child_node);
ffff8000008032a5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032a9:	48 83 c0 10          	add    rax,0x10
ffff8000008032ad:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008032b1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008032b5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008032bc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008032c0:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008032c7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008032c8:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:31
    d->child_node.data=d;
ffff8000008032c9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032cd:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff8000008032d1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:32
    d->parent=parent;
ffff8000008032d5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032d9:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008032dd:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:33
    list_add(&parent->subdirs_list,&d->child_node);
ffff8000008032e1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032e5:	48 83 c0 10          	add    rax,0x10
ffff8000008032e9:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008032ed:	48 83 c2 28          	add    rdx,0x28
ffff8000008032f1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008032f5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
        new->next->prev = new;
    // entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    if(entry->next==NULL)
ffff8000008032f9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008032fd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803301:	48 85 c0             	test   rax,rax
ffff800000803304:	75 50                	jne    ffff800000803356 <make_dentry+0x14c>
ffff800000803306:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080330a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff80000080330e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803312:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803316:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080331a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080331e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803322:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803326:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080332a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080332e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000803331:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803335:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803339:	48 85 c0             	test   rax,rax
ffff80000080333c:	0f 84 a3 00 00 00    	je     ffff8000008033e5 <make_dentry+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000803342:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803346:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080334a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080334e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000803351:	e9 8f 00 00 00       	jmp    ffff8000008033e5 <make_dentry+0x1db>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        list_add_to_behind(entry,new);
    else{
        struct List* p=entry;
ffff800000803356:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080335a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080335e:	eb 21                	jmp    ffff800000803381 <make_dentry+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff800000803360:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803364:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000803368:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080336c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803370:	48 39 c2             	cmp    rdx,rax
ffff800000803373:	74 73                	je     ffff8000008033e8 <make_dentry+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000803375:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803379:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080337d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff800000803381:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803385:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803389:	48 85 c0             	test   rax,rax
ffff80000080338c:	74 0e                	je     ffff80000080339c <make_dentry+0x192>
ffff80000080338e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803392:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803396:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff80000080339a:	75 c4                	jne    ffff800000803360 <make_dentry+0x156>
ffff80000080339c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008033a0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffff8000008033a4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008033a8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008033ac:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008033b0:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008033b4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033b8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008033bc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033c0:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008033c4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008033c7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033cb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008033cf:	48 85 c0             	test   rax,rax
ffff8000008033d2:	74 17                	je     ffff8000008033eb <make_dentry+0x1e1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008033d4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033d8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008033dc:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008033e0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008033e3:	eb 06                	jmp    ffff8000008033eb <make_dentry+0x1e1>
ffff8000008033e5:	90                   	nop
ffff8000008033e6:	eb 04                	jmp    ffff8000008033ec <make_dentry+0x1e2>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff8000008033e8:	90                   	nop
ffff8000008033e9:	eb 01                	jmp    ffff8000008033ec <make_dentry+0x1e2>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008033eb:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
}
ffff8000008033ec:	90                   	nop
ffff8000008033ed:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008033f1:	c9                   	leave  
ffff8000008033f2:	c3                   	ret    

ffff8000008033f3 <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,struct super_block* sb){
ffff8000008033f3:	f3 0f 1e fa          	endbr64 
ffff8000008033f7:	55                   	push   rbp
ffff8000008033f8:	48 89 e5             	mov    rbp,rsp
ffff8000008033fb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008033fb <make_inode+0x8>
ffff800000803402:	49 bb 5d a7 11 00 00 	movabs r11,0x11a75d
ffff800000803409:	00 00 00 
ffff80000080340c:	4c 01 d8             	add    rax,r11
ffff80000080340f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000803413:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000803417:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080341b:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080341f:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
    i->f_ops=fops;
ffff800000803423:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803427:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080342b:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:37
    i->attribute=attr;
ffff80000080342f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803433:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803437:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    i->sb=sb;
ffff80000080343b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080343f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000803443:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    i->file_size=0;
ffff800000803447:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080344b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    i->inode_ops=iops;
ffff800000803452:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803456:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080345a:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
}
ffff80000080345e:	90                   	nop
ffff80000080345f:	5d                   	pop    rbp
ffff800000803460:	c3                   	ret    

ffff800000803461 <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* ddev,struct file_operations* fops){
ffff800000803461:	f3 0f 1e fa          	endbr64 
ffff800000803465:	55                   	push   rbp
ffff800000803466:	48 89 e5             	mov    rbp,rsp
ffff800000803469:	41 57                	push   r15
ffff80000080346b:	41 54                	push   r12
ffff80000080346d:	53                   	push   rbx
ffff80000080346e:	48 83 ec 78          	sub    rsp,0x78
ffff800000803472:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803472 <make_devf+0x11>
ffff800000803479:	49 bb e6 a6 11 00 00 	movabs r11,0x11a6e6
ffff800000803480:	00 00 00 
ffff800000803483:	4c 01 db             	add    rbx,r11
ffff800000803486:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080348a:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff80000080348e:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff800000803492:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff800000803496:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:43
    make_dentry(d,name, strlen(name),root_sb->root,&dev_dir_dops);
ffff80000080349d:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008034a4:	ff ff ff 
ffff8000008034a7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008034ab:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008034ae:	4c 8b 20             	mov    r12,QWORD PTR [rax]
ffff8000008034b1:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008034b5:	48 89 c7             	mov    rdi,rax
ffff8000008034b8:	49 89 df             	mov    r15,rbx
ffff8000008034bb:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff8000008034c2:	ff ff ff 
ffff8000008034c5:	48 01 d8             	add    rax,rbx
ffff8000008034c8:	ff d0                	call   rax
ffff8000008034ca:	89 c2                	mov    edx,eax
ffff8000008034cc:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff8000008034d0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008034d4:	48 b9 c0 ff ff ff ff 	movabs rcx,0xffffffffffffffc0
ffff8000008034db:	ff ff ff 
ffff8000008034de:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff8000008034e2:	49 89 c8             	mov    r8,rcx
ffff8000008034e5:	4c 89 e1             	mov    rcx,r12
ffff8000008034e8:	48 89 c7             	mov    rdi,rax
ffff8000008034eb:	49 89 df             	mov    r15,rbx
ffff8000008034ee:	48 b8 b2 56 ee ff ff 	movabs rax,0xffffffffffee56b2
ffff8000008034f5:	ff ff ff 
ffff8000008034f8:	48 01 d8             	add    rax,rbx
ffff8000008034fb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:44
    d->dir_inode=i;
ffff8000008034fd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803501:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff800000803505:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:45
    make_inode(i,ddev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
ffff800000803509:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803510:	ff ff ff 
ffff800000803513:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803517:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080351a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080351e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803522:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff800000803526:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080352d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000803531:	49 89 c8             	mov    r8,rcx
ffff800000803534:	b9 04 00 00 00       	mov    ecx,0x4
ffff800000803539:	48 89 c7             	mov    rdi,rax
ffff80000080353c:	49 89 df             	mov    r15,rbx
ffff80000080353f:	48 b8 9b 58 ee ff ff 	movabs rax,0xffffffffffee589b
ffff800000803546:	ff ff ff 
ffff800000803549:	48 01 d8             	add    rax,rbx
ffff80000080354c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:46
    list_add(&ddev->subdirs_list,&d->child_node);//添加到/dev下
ffff80000080354e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803552:	48 83 c0 10          	add    rax,0x10
ffff800000803556:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080355a:	48 83 c2 28          	add    rdx,0x28
ffff80000080355e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000803562:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff800000803566:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080356a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080356e:	48 85 c0             	test   rax,rax
ffff800000803571:	75 50                	jne    ffff8000008035c3 <make_devf+0x162>
ffff800000803573:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803577:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff80000080357b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080357f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803583:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803587:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080358b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080358f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803593:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803597:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080359b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080359e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008035a2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035a6:	48 85 c0             	test   rax,rax
ffff8000008035a9:	0f 84 a3 00 00 00    	je     ffff800000803652 <make_devf+0x1f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008035af:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008035b3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035b7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008035bb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008035be:	e9 8f 00 00 00       	jmp    ffff800000803652 <make_devf+0x1f1>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff8000008035c3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008035c7:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008035cb:	eb 21                	jmp    ffff8000008035ee <make_devf+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff8000008035cd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008035d1:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008035d5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008035d9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008035dd:	48 39 c2             	cmp    rdx,rax
ffff8000008035e0:	74 73                	je     ffff800000803655 <make_devf+0x1f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008035e2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008035e6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035ea:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff8000008035ee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008035f2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035f6:	48 85 c0             	test   rax,rax
ffff8000008035f9:	74 0e                	je     ffff800000803609 <make_devf+0x1a8>
ffff8000008035fb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008035ff:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803603:	48 39 45 b8          	cmp    QWORD PTR [rbp-0x48],rax
ffff800000803607:	75 c4                	jne    ffff8000008035cd <make_devf+0x16c>
ffff800000803609:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080360d:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff800000803611:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803615:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803619:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080361d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000803621:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803625:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803629:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080362d:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000803631:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000803634:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803638:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080363c:	48 85 c0             	test   rax,rax
ffff80000080363f:	74 17                	je     ffff800000803658 <make_devf+0x1f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000803641:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803645:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803649:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080364d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000803650:	eb 06                	jmp    ffff800000803658 <make_devf+0x1f7>
ffff800000803652:	90                   	nop
ffff800000803653:	eb 04                	jmp    ffff800000803659 <make_devf+0x1f8>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff800000803655:	90                   	nop
ffff800000803656:	eb 01                	jmp    ffff800000803659 <make_devf+0x1f8>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000803658:	90                   	nop
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
}
ffff800000803659:	90                   	nop
ffff80000080365a:	48 83 c4 78          	add    rsp,0x78
ffff80000080365e:	5b                   	pop    rbx
ffff80000080365f:	41 5c                	pop    r12
ffff800000803661:	41 5f                	pop    r15
ffff800000803663:	5d                   	pop    rbp
ffff800000803664:	c3                   	ret    

ffff800000803665 <init_devfs>:
init_devfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
struct dir_entry* ddev=NULL,*dmnt,*dconsole,*dhd0,*dtty,*dramdisk;
struct file ftty;
int init_devfs()
{
ffff800000803665:	f3 0f 1e fa          	endbr64 
ffff800000803669:	55                   	push   rbp
ffff80000080366a:	48 89 e5             	mov    rbp,rsp
ffff80000080366d:	41 57                	push   r15
ffff80000080366f:	53                   	push   rbx
ffff800000803670:	48 83 ec 30          	sub    rsp,0x30
ffff800000803674:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803674 <init_devfs+0xf>
ffff80000080367b:	49 bb e4 a4 11 00 00 	movabs r11,0x11a4e4
ffff800000803682:	00 00 00 
ffff800000803685:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:57
    //创建dev文件夹
    ddev=(struct dir_entry*) kmalloc();
ffff800000803688:	49 89 df             	mov    r15,rbx
ffff80000080368b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803690:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000803697:	ff ff ff 
ffff80000080369a:	48 01 da             	add    rdx,rbx
ffff80000080369d:	ff d2                	call   rdx
ffff80000080369f:	48 89 c2             	mov    rdx,rax
ffff8000008036a2:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008036a9:	ff ff ff 
ffff8000008036ac:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036b0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:58
    struct index_node* idev=ddev+1;
ffff8000008036b3:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008036ba:	ff ff ff 
ffff8000008036bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036c1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036c4:	48 83 c0 58          	add    rax,0x58
ffff8000008036c8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:59
    ddev->name=idev+1;
ffff8000008036cc:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008036d3:	ff ff ff 
ffff8000008036d6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036da:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036dd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008036e1:	48 83 c2 40          	add    rdx,0x40
ffff8000008036e5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:60
    make_dentry(ddev,"dev",3,root_sb->root,root_sb->root->dir_ops);
ffff8000008036e8:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008036ef:	ff ff ff 
ffff8000008036f2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036fc:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff800000803700:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803707:	ff ff ff 
ffff80000080370a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080370e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803711:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803714:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080371b:	ff ff ff 
ffff80000080371e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803722:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803725:	49 89 c8             	mov    r8,rcx
ffff800000803728:	48 89 d1             	mov    rcx,rdx
ffff80000080372b:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803730:	48 be 86 d6 ff ff ff 	movabs rsi,0xffffffffffffd686
ffff800000803737:	ff ff ff 
ffff80000080373a:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff80000080373e:	48 89 c7             	mov    rdi,rax
ffff800000803741:	49 89 df             	mov    r15,rbx
ffff800000803744:	48 b8 b2 56 ee ff ff 	movabs rax,0xffffffffffee56b2
ffff80000080374b:	ff ff ff 
ffff80000080374e:	48 01 d8             	add    rax,rbx
ffff800000803751:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:61
    ddev->dir_inode=idev;
ffff800000803753:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080375a:	ff ff ff 
ffff80000080375d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803761:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803764:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803768:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:62
    make_inode(idev,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff80000080376c:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803773:	ff ff ff 
ffff800000803776:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080377a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080377d:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803784:	ff ff ff 
ffff800000803787:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080378b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080378e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803791:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803795:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000803799:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008037a0:	ff ff ff 
ffff8000008037a3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008037a7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037ad:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008037b1:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008037b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008037b9:	49 89 c8             	mov    r8,rcx
ffff8000008037bc:	b9 02 00 00 00       	mov    ecx,0x2
ffff8000008037c1:	48 89 c7             	mov    rdi,rax
ffff8000008037c4:	49 89 df             	mov    r15,rbx
ffff8000008037c7:	48 b8 9b 58 ee ff ff 	movabs rax,0xffffffffffee589b
ffff8000008037ce:	ff ff ff 
ffff8000008037d1:	48 01 d8             	add    rax,rbx
ffff8000008037d4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:63
    idev->private_index_info=ddev;
ffff8000008037d6:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008037dd:	ff ff ff 
ffff8000008037e0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008037e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008037e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008037eb:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:66

    //创建mnt文件夹
    dmnt=(struct dir_entry*) kmalloc();
ffff8000008037ef:	49 89 df             	mov    r15,rbx
ffff8000008037f2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008037f7:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff8000008037fe:	ff ff ff 
ffff800000803801:	48 01 da             	add    rdx,rbx
ffff800000803804:	ff d2                	call   rdx
ffff800000803806:	48 89 c2             	mov    rdx,rax
ffff800000803809:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803810:	ff ff ff 
ffff800000803813:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803817:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:67
    struct index_node* imnt=dmnt+1;
ffff80000080381a:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803821:	ff ff ff 
ffff800000803824:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803828:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080382b:	48 83 c0 58          	add    rax,0x58
ffff80000080382f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
    dmnt->name=imnt+1;
ffff800000803833:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff80000080383a:	ff ff ff 
ffff80000080383d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803841:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803844:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803848:	48 83 c2 40          	add    rdx,0x40
ffff80000080384c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
ffff80000080384f:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803856:	ff ff ff 
ffff800000803859:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080385d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803860:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803863:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff800000803867:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080386e:	ff ff ff 
ffff800000803871:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803875:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803878:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080387b:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803882:	ff ff ff 
ffff800000803885:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803889:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080388c:	49 89 c8             	mov    r8,rcx
ffff80000080388f:	48 89 d1             	mov    rcx,rdx
ffff800000803892:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803897:	48 be 8a d6 ff ff ff 	movabs rsi,0xffffffffffffd68a
ffff80000080389e:	ff ff ff 
ffff8000008038a1:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff8000008038a5:	48 89 c7             	mov    rdi,rax
ffff8000008038a8:	49 89 df             	mov    r15,rbx
ffff8000008038ab:	48 b8 b2 56 ee ff ff 	movabs rax,0xffffffffffee56b2
ffff8000008038b2:	ff ff ff 
ffff8000008038b5:	48 01 d8             	add    rax,rbx
ffff8000008038b8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    dmnt->dir_inode=imnt;
ffff8000008038ba:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff8000008038c1:	ff ff ff 
ffff8000008038c4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038c8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038cb:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008038cf:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff8000008038d3:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008038da:	ff ff ff 
ffff8000008038dd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038e1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008038e4:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008038eb:	ff ff ff 
ffff8000008038ee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038f2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038f8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008038fc:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000803900:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803907:	ff ff ff 
ffff80000080390a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080390e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803911:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803914:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803918:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff80000080391c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803920:	49 89 c8             	mov    r8,rcx
ffff800000803923:	b9 02 00 00 00       	mov    ecx,0x2
ffff800000803928:	48 89 c7             	mov    rdi,rax
ffff80000080392b:	49 89 df             	mov    r15,rbx
ffff80000080392e:	48 b8 9b 58 ee ff ff 	movabs rax,0xffffffffffee589b
ffff800000803935:	ff ff ff 
ffff800000803938:	48 01 d8             	add    rax,rbx
ffff80000080393b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    imnt->private_index_info=dmnt;
ffff80000080393d:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803944:	ff ff ff 
ffff800000803947:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080394b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080394e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803952:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77


    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc();
ffff800000803956:	49 89 df             	mov    r15,rbx
ffff800000803959:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080395e:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000803965:	ff ff ff 
ffff800000803968:	48 01 da             	add    rdx,rbx
ffff80000080396b:	ff d2                	call   rdx
ffff80000080396d:	48 89 c2             	mov    rdx,rax
ffff800000803970:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000803977:	ff ff ff 
ffff80000080397a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080397e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    struct index_node* iconsole=dconsole+1;
ffff800000803981:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000803988:	ff ff ff 
ffff80000080398b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080398f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803992:	48 83 c0 58          	add    rax,0x58
ffff800000803996:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    dconsole->name=iconsole+1;
ffff80000080399a:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff8000008039a1:	ff ff ff 
ffff8000008039a4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039a8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039ab:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008039af:	48 83 c2 40          	add    rdx,0x40
ffff8000008039b3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    iconsole->dev=0x10000;
ffff8000008039b6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008039ba:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:81
    make_devf(dconsole,iconsole,"console",ddev,&devfs_fops);
ffff8000008039c0:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008039c7:	ff ff ff 
ffff8000008039ca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039ce:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008039d1:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff8000008039d8:	ff ff ff 
ffff8000008039db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039e2:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff8000008039e6:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff8000008039ed:	ff ff ff 
ffff8000008039f0:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff8000008039f4:	49 89 c8             	mov    r8,rcx
ffff8000008039f7:	48 89 d1             	mov    rcx,rdx
ffff8000008039fa:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff800000803a01:	ff ff ff 
ffff800000803a04:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803a08:	48 89 c7             	mov    rdi,rax
ffff800000803a0b:	49 89 df             	mov    r15,rbx
ffff800000803a0e:	48 b8 09 59 ee ff ff 	movabs rax,0xffffffffffee5909
ffff800000803a15:	ff ff ff 
ffff800000803a18:	48 01 d8             	add    rax,rbx
ffff800000803a1b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:83
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc();
ffff800000803a1d:	49 89 df             	mov    r15,rbx
ffff800000803a20:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803a25:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000803a2c:	ff ff ff 
ffff800000803a2f:	48 01 da             	add    rdx,rbx
ffff800000803a32:	ff d2                	call   rdx
ffff800000803a34:	48 89 c2             	mov    rdx,rax
ffff800000803a37:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803a3e:	ff ff ff 
ffff800000803a41:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a45:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:84
    struct index_node* ihd0=dhd0+1;
ffff800000803a48:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803a4f:	ff ff ff 
ffff800000803a52:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a56:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a59:	48 83 c0 58          	add    rax,0x58
ffff800000803a5d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:85
    dhd0->name=ihd0+1;
ffff800000803a61:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803a68:	ff ff ff 
ffff800000803a6b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a6f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a72:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803a76:	48 83 c2 40          	add    rdx,0x40
ffff800000803a7a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87
    extern int dev_hd;
    ihd0->dev=dev_hd<<8;
ffff800000803a7d:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000803a84:	ff ff ff 
ffff800000803a87:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a8b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803a8d:	c1 e0 08             	shl    eax,0x8
ffff800000803a90:	89 c2                	mov    edx,eax
ffff800000803a92:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803a96:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    make_devf(dhd0,ihd0,"hd0",ddev,&devfs_fops);
ffff800000803a9a:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803aa1:	ff ff ff 
ffff800000803aa4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803aa8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803aab:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803ab2:	ff ff ff 
ffff800000803ab5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803ab9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803abc:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000803ac0:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff800000803ac7:	ff ff ff 
ffff800000803aca:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803ace:	49 89 c8             	mov    r8,rcx
ffff800000803ad1:	48 89 d1             	mov    rcx,rdx
ffff800000803ad4:	48 ba 96 d6 ff ff ff 	movabs rdx,0xffffffffffffd696
ffff800000803adb:	ff ff ff 
ffff800000803ade:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803ae2:	48 89 c7             	mov    rdi,rax
ffff800000803ae5:	49 89 df             	mov    r15,rbx
ffff800000803ae8:	48 b8 09 59 ee ff ff 	movabs rax,0xffffffffffee5909
ffff800000803aef:	ff ff ff 
ffff800000803af2:	48 01 d8             	add    rax,rbx
ffff800000803af5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:90
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc();
ffff800000803af7:	49 89 df             	mov    r15,rbx
ffff800000803afa:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803aff:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000803b06:	ff ff ff 
ffff800000803b09:	48 01 da             	add    rdx,rbx
ffff800000803b0c:	ff d2                	call   rdx
ffff800000803b0e:	48 89 c2             	mov    rdx,rax
ffff800000803b11:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803b18:	ff ff ff 
ffff800000803b1b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b1f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:91
    struct index_node* itty=dtty+1;
ffff800000803b22:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803b29:	ff ff ff 
ffff800000803b2c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b30:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b33:	48 83 c0 58          	add    rax,0x58
ffff800000803b37:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
    dtty->name=itty+1;
ffff800000803b3b:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803b42:	ff ff ff 
ffff800000803b45:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b49:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b4c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000803b50:	48 83 c2 40          	add    rdx,0x40
ffff800000803b54:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:93
    itty->dev|=0x10000;
ffff800000803b57:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803b5b:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff800000803b5f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803b63:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:94
    make_devf(dtty,itty,"tty",ddev,&devfs_fops);
ffff800000803b67:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803b6e:	ff ff ff 
ffff800000803b71:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b75:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b78:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803b7f:	ff ff ff 
ffff800000803b82:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b86:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b89:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff800000803b8d:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff800000803b94:	ff ff ff 
ffff800000803b97:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803b9b:	49 89 c8             	mov    r8,rcx
ffff800000803b9e:	48 89 d1             	mov    rcx,rdx
ffff800000803ba1:	48 ba 9a d6 ff ff ff 	movabs rdx,0xffffffffffffd69a
ffff800000803ba8:	ff ff ff 
ffff800000803bab:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803baf:	48 89 c7             	mov    rdi,rax
ffff800000803bb2:	49 89 df             	mov    r15,rbx
ffff800000803bb5:	48 b8 09 59 ee ff ff 	movabs rax,0xffffffffffee5909
ffff800000803bbc:	ff ff ff 
ffff800000803bbf:	48 01 d8             	add    rax,rbx
ffff800000803bc2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:96
    //初始化一下
    tty_fops.open(itty,&ftty);
ffff800000803bc4:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000803bcb:	ff ff ff 
ffff800000803bce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803bd2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803bd5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803bd9:	48 b9 40 fe ff ff ff 	movabs rcx,0xfffffffffffffe40
ffff800000803be0:	ff ff ff 
ffff800000803be3:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803be7:	48 89 ce             	mov    rsi,rcx
ffff800000803bea:	48 89 c7             	mov    rdi,rax
ffff800000803bed:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:99

    //ramdisk- ramdisk.c
    dramdisk= (struct dir_entry *) kmalloc();
ffff800000803bef:	49 89 df             	mov    r15,rbx
ffff800000803bf2:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803bf7:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000803bfe:	ff ff ff 
ffff800000803c01:	48 01 da             	add    rdx,rbx
ffff800000803c04:	ff d2                	call   rdx
ffff800000803c06:	48 89 c2             	mov    rdx,rax
ffff800000803c09:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803c10:	ff ff ff 
ffff800000803c13:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c17:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:100
    struct index_node* iramdisk=dramdisk+1;
ffff800000803c1a:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803c21:	ff ff ff 
ffff800000803c24:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c28:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c2b:	48 83 c0 58          	add    rax,0x58
ffff800000803c2f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:101
    dramdisk->name=iramdisk+1;
ffff800000803c33:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803c3a:	ff ff ff 
ffff800000803c3d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c41:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c44:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000803c48:	48 83 c2 40          	add    rdx,0x40
ffff800000803c4c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:102
    iramdisk->dev=dev_ramdisk<<8;
ffff800000803c4f:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000803c56:	ff ff ff 
ffff800000803c59:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c5d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803c5f:	c1 e0 08             	shl    eax,0x8
ffff800000803c62:	89 c2                	mov    edx,eax
ffff800000803c64:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803c68:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:103
    make_devf(dramdisk,iramdisk,"ram",ddev,&devfs_fops);
ffff800000803c6c:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803c73:	ff ff ff 
ffff800000803c76:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c7a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803c7d:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803c84:	ff ff ff 
ffff800000803c87:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c8b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c8e:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803c92:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff800000803c99:	ff ff ff 
ffff800000803c9c:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803ca0:	49 89 c8             	mov    r8,rcx
ffff800000803ca3:	48 89 d1             	mov    rcx,rdx
ffff800000803ca6:	48 ba 9e d6 ff ff ff 	movabs rdx,0xffffffffffffd69e
ffff800000803cad:	ff ff ff 
ffff800000803cb0:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803cb4:	48 89 c7             	mov    rdi,rax
ffff800000803cb7:	49 89 df             	mov    r15,rbx
ffff800000803cba:	48 b8 09 59 ee ff ff 	movabs rax,0xffffffffffee5909
ffff800000803cc1:	ff ff ff 
ffff800000803cc4:	48 01 d8             	add    rax,rbx
ffff800000803cc7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:105

}
ffff800000803cc9:	90                   	nop
ffff800000803cca:	48 83 c4 30          	add    rsp,0x30
ffff800000803cce:	5b                   	pop    rbx
ffff800000803ccf:	41 5f                	pop    r15
ffff800000803cd1:	5d                   	pop    rbp
ffff800000803cd2:	c3                   	ret    

ffff800000803cd3 <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:107
//
long open_dev(struct index_node * inode,struct file * filp){
ffff800000803cd3:	f3 0f 1e fa          	endbr64 
ffff800000803cd7:	55                   	push   rbp
ffff800000803cd8:	48 89 e5             	mov    rbp,rsp
ffff800000803cdb:	41 57                	push   r15
ffff800000803cdd:	53                   	push   rbx
ffff800000803cde:	48 83 ec 20          	sub    rsp,0x20
ffff800000803ce2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803ce2 <open_dev+0xf>
ffff800000803ce9:	49 bb 76 9e 11 00 00 	movabs r11,0x119e76
ffff800000803cf0:	00 00 00 
ffff800000803cf3:	4c 01 db             	add    rbx,r11
ffff800000803cf6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803cfa:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:109
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803cfe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803d02:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803d06:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803d09:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110
    char* p=name+ strlen(name)-1;
ffff800000803d0d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803d11:	48 89 c7             	mov    rdi,rax
ffff800000803d14:	49 89 df             	mov    r15,rbx
ffff800000803d17:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff800000803d1e:	ff ff ff 
ffff800000803d21:	48 01 d8             	add    rax,rbx
ffff800000803d24:	ff d0                	call   rax
ffff800000803d26:	48 98                	cdqe   
ffff800000803d28:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803d2c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803d30:	48 01 d0             	add    rax,rdx
ffff800000803d33:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111
    for(;*p!='/'&&p>=name;p--);
ffff800000803d37:	eb 05                	jmp    ffff800000803d3e <open_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111 (discriminator 3)
ffff800000803d39:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111 (discriminator 1)
ffff800000803d3e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803d42:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803d45:	3c 2f                	cmp    al,0x2f
ffff800000803d47:	74 0a                	je     ffff800000803d53 <open_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111 (discriminator 2)
ffff800000803d49:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803d4d:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803d51:	73 e6                	jae    ffff800000803d39 <open_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:112
    if(p>=name)
ffff800000803d53:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803d57:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803d5b:	72 0c                	jb     ffff800000803d69 <open_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:113
        name=p+1;
ffff800000803d5d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803d61:	48 83 c0 01          	add    rax,0x1
ffff800000803d65:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:114
    if(memcmp(name,"tty",3)==0){
ffff800000803d69:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803d6d:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803d72:	48 b9 9a d6 ff ff ff 	movabs rcx,0xffffffffffffd69a
ffff800000803d79:	ff ff ff 
ffff800000803d7c:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803d80:	48 89 ce             	mov    rsi,rcx
ffff800000803d83:	48 89 c7             	mov    rdi,rax
ffff800000803d86:	49 89 df             	mov    r15,rbx
ffff800000803d89:	48 b8 b6 50 ef ff ff 	movabs rax,0xffffffffffef50b6
ffff800000803d90:	ff ff ff 
ffff800000803d93:	48 01 d8             	add    rax,rbx
ffff800000803d96:	ff d0                	call   rax
ffff800000803d98:	85 c0                	test   eax,eax
ffff800000803d9a:	75 22                	jne    ffff800000803dbe <open_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:115
        return init_tty(inode,filp);
ffff800000803d9c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803da0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803da4:	48 89 d6             	mov    rsi,rdx
ffff800000803da7:	48 89 c7             	mov    rdi,rax
ffff800000803daa:	49 89 df             	mov    r15,rbx
ffff800000803dad:	48 b8 34 44 ef ff ff 	movabs rax,0xffffffffffef4434
ffff800000803db4:	ff ff ff 
ffff800000803db7:	48 01 d8             	add    rax,rbx
ffff800000803dba:	ff d0                	call   rax
ffff800000803dbc:	eb 57                	jmp    ffff800000803e15 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:116
    }else if(strcmp(name,"console")==0){
ffff800000803dbe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803dc2:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff800000803dc9:	ff ff ff 
ffff800000803dcc:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803dd0:	48 89 d6             	mov    rsi,rdx
ffff800000803dd3:	48 89 c7             	mov    rdi,rax
ffff800000803dd6:	49 89 df             	mov    r15,rbx
ffff800000803dd9:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff800000803de0:	ff ff ff 
ffff800000803de3:	48 01 d8             	add    rax,rbx
ffff800000803de6:	ff d0                	call   rax
ffff800000803de8:	85 c0                	test   eax,eax
ffff800000803dea:	75 22                	jne    ffff800000803e0e <open_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:117
        return open_framebuffer(inode,filp);
ffff800000803dec:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803df0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803df4:	48 89 d6             	mov    rsi,rdx
ffff800000803df7:	48 89 c7             	mov    rdi,rax
ffff800000803dfa:	49 89 df             	mov    r15,rbx
ffff800000803dfd:	48 b8 e4 d0 ee ff ff 	movabs rax,0xffffffffffeed0e4
ffff800000803e04:	ff ff ff 
ffff800000803e07:	48 01 d8             	add    rax,rbx
ffff800000803e0a:	ff d0                	call   rax
ffff800000803e0c:	eb 07                	jmp    ffff800000803e15 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:119
    }
    return -1;
ffff800000803e0e:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120
}
ffff800000803e15:	48 83 c4 20          	add    rsp,0x20
ffff800000803e19:	5b                   	pop    rbx
ffff800000803e1a:	41 5f                	pop    r15
ffff800000803e1c:	5d                   	pop    rbp
ffff800000803e1d:	c3                   	ret    

ffff800000803e1e <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:121
long close_dev(struct index_node * inode,struct file * filp){
ffff800000803e1e:	f3 0f 1e fa          	endbr64 
ffff800000803e22:	55                   	push   rbp
ffff800000803e23:	48 89 e5             	mov    rbp,rsp
ffff800000803e26:	41 57                	push   r15
ffff800000803e28:	53                   	push   rbx
ffff800000803e29:	48 83 ec 20          	sub    rsp,0x20
ffff800000803e2d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803e2d <close_dev+0xf>
ffff800000803e34:	49 bb 2b 9d 11 00 00 	movabs r11,0x119d2b
ffff800000803e3b:	00 00 00 
ffff800000803e3e:	4c 01 db             	add    rbx,r11
ffff800000803e41:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803e45:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:123
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803e49:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803e4d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803e51:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803e54:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124
    char* p=name+ strlen(name)-1;
ffff800000803e58:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803e5c:	48 89 c7             	mov    rdi,rax
ffff800000803e5f:	49 89 df             	mov    r15,rbx
ffff800000803e62:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff800000803e69:	ff ff ff 
ffff800000803e6c:	48 01 d8             	add    rax,rbx
ffff800000803e6f:	ff d0                	call   rax
ffff800000803e71:	48 98                	cdqe   
ffff800000803e73:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803e77:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803e7b:	48 01 d0             	add    rax,rdx
ffff800000803e7e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125
    for(;*p!='/'&&p>=name;p--);
ffff800000803e82:	eb 05                	jmp    ffff800000803e89 <close_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125 (discriminator 3)
ffff800000803e84:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125 (discriminator 1)
ffff800000803e89:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803e8d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803e90:	3c 2f                	cmp    al,0x2f
ffff800000803e92:	74 0a                	je     ffff800000803e9e <close_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125 (discriminator 2)
ffff800000803e94:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803e98:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803e9c:	73 e6                	jae    ffff800000803e84 <close_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:126
    if(p>=name)
ffff800000803e9e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803ea2:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803ea6:	72 0c                	jb     ffff800000803eb4 <close_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:127
        name=p+1;
ffff800000803ea8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803eac:	48 83 c0 01          	add    rax,0x1
ffff800000803eb0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:128
    if(memcmp(name,"tty",3)==0){
ffff800000803eb4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803eb8:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803ebd:	48 b9 9a d6 ff ff ff 	movabs rcx,0xffffffffffffd69a
ffff800000803ec4:	ff ff ff 
ffff800000803ec7:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803ecb:	48 89 ce             	mov    rsi,rcx
ffff800000803ece:	48 89 c7             	mov    rdi,rax
ffff800000803ed1:	49 89 df             	mov    r15,rbx
ffff800000803ed4:	48 b8 b6 50 ef ff ff 	movabs rax,0xffffffffffef50b6
ffff800000803edb:	ff ff ff 
ffff800000803ede:	48 01 d8             	add    rax,rbx
ffff800000803ee1:	ff d0                	call   rax
ffff800000803ee3:	85 c0                	test   eax,eax
ffff800000803ee5:	75 22                	jne    ffff800000803f09 <close_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:129
        return close_tty(inode,filp);
ffff800000803ee7:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803eeb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803eef:	48 89 d6             	mov    rsi,rdx
ffff800000803ef2:	48 89 c7             	mov    rdi,rax
ffff800000803ef5:	49 89 df             	mov    r15,rbx
ffff800000803ef8:	48 b8 67 43 ef ff ff 	movabs rax,0xffffffffffef4367
ffff800000803eff:	ff ff ff 
ffff800000803f02:	48 01 d8             	add    rax,rbx
ffff800000803f05:	ff d0                	call   rax
ffff800000803f07:	eb 57                	jmp    ffff800000803f60 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130
    }else if(strcmp(name,"console")==0){
ffff800000803f09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803f0d:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff800000803f14:	ff ff ff 
ffff800000803f17:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803f1b:	48 89 d6             	mov    rsi,rdx
ffff800000803f1e:	48 89 c7             	mov    rdi,rax
ffff800000803f21:	49 89 df             	mov    r15,rbx
ffff800000803f24:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff800000803f2b:	ff ff ff 
ffff800000803f2e:	48 01 d8             	add    rax,rbx
ffff800000803f31:	ff d0                	call   rax
ffff800000803f33:	85 c0                	test   eax,eax
ffff800000803f35:	75 22                	jne    ffff800000803f59 <close_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:131
        return close_framebuffer(inode,filp);
ffff800000803f37:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803f3b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803f3f:	48 89 d6             	mov    rsi,rdx
ffff800000803f42:	48 89 c7             	mov    rdi,rax
ffff800000803f45:	49 89 df             	mov    r15,rbx
ffff800000803f48:	48 b8 3b d1 ee ff ff 	movabs rax,0xffffffffffeed13b
ffff800000803f4f:	ff ff ff 
ffff800000803f52:	48 01 d8             	add    rax,rbx
ffff800000803f55:	ff d0                	call   rax
ffff800000803f57:	eb 07                	jmp    ffff800000803f60 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:133
    }
    return -1;
ffff800000803f59:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:135

}
ffff800000803f60:	48 83 c4 20          	add    rsp,0x20
ffff800000803f64:	5b                   	pop    rbx
ffff800000803f65:	41 5f                	pop    r15
ffff800000803f67:	5d                   	pop    rbp
ffff800000803f68:	c3                   	ret    

ffff800000803f69 <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:136
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000803f69:	f3 0f 1e fa          	endbr64 
ffff800000803f6d:	55                   	push   rbp
ffff800000803f6e:	48 89 e5             	mov    rbp,rsp
ffff800000803f71:	41 57                	push   r15
ffff800000803f73:	53                   	push   rbx
ffff800000803f74:	48 83 ec 40          	sub    rsp,0x40
ffff800000803f78:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803f78 <read_dev+0xf>
ffff800000803f7f:	49 bb e0 9b 11 00 00 	movabs r11,0x119be0
ffff800000803f86:	00 00 00 
ffff800000803f89:	4c 01 db             	add    rbx,r11
ffff800000803f8c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803f90:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000803f94:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000803f98:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:138
    //判断是不是块设备文件
    struct index_node* i_dev=filp->dentry->dir_inode;
ffff800000803f9c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803fa0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803fa4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803fa8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
        //这里需要调用缓冲区层的函数读取块设备
        return blkdev_read(i_dev->dev,*position,count,buf);
    }
    
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803fac:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803fb0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803fb4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803fb7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:146
    char* p=name+ strlen(name)-1;
ffff800000803fbb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803fbf:	48 89 c7             	mov    rdi,rax
ffff800000803fc2:	49 89 df             	mov    r15,rbx
ffff800000803fc5:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff800000803fcc:	ff ff ff 
ffff800000803fcf:	48 01 d8             	add    rax,rbx
ffff800000803fd2:	ff d0                	call   rax
ffff800000803fd4:	48 98                	cdqe   
ffff800000803fd6:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803fda:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803fde:	48 01 d0             	add    rax,rdx
ffff800000803fe1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147
    for(;*p!='/'&&p>=name;p--);
ffff800000803fe5:	eb 05                	jmp    ffff800000803fec <read_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147 (discriminator 3)
ffff800000803fe7:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147 (discriminator 1)
ffff800000803fec:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803ff0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803ff3:	3c 2f                	cmp    al,0x2f
ffff800000803ff5:	74 0a                	je     ffff800000804001 <read_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147 (discriminator 2)
ffff800000803ff7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803ffb:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803fff:	73 e6                	jae    ffff800000803fe7 <read_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:148
    if(p>=name)
ffff800000804001:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804005:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804009:	72 0c                	jb     ffff800000804017 <read_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:149
        name=p+1;
ffff80000080400b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080400f:	48 83 c0 01          	add    rax,0x1
ffff800000804013:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:150
    if(memcmp(name,"tty",3)==0){
ffff800000804017:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080401b:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804020:	48 b9 9a d6 ff ff ff 	movabs rcx,0xffffffffffffd69a
ffff800000804027:	ff ff ff 
ffff80000080402a:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff80000080402e:	48 89 ce             	mov    rsi,rcx
ffff800000804031:	48 89 c7             	mov    rdi,rax
ffff800000804034:	49 89 df             	mov    r15,rbx
ffff800000804037:	48 b8 b6 50 ef ff ff 	movabs rax,0xffffffffffef50b6
ffff80000080403e:	ff ff ff 
ffff800000804041:	48 01 d8             	add    rax,rbx
ffff800000804044:	ff d0                	call   rax
ffff800000804046:	85 c0                	test   eax,eax
ffff800000804048:	75 27                	jne    ffff800000804071 <read_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:151
        return read_tty(filp,buf,count,position);
ffff80000080404a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff80000080404e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804052:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804056:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080405a:	48 89 c7             	mov    rdi,rax
ffff80000080405d:	49 89 df             	mov    r15,rbx
ffff800000804060:	48 b8 88 45 ef ff ff 	movabs rax,0xffffffffffef4588
ffff800000804067:	ff ff ff 
ffff80000080406a:	48 01 d8             	add    rax,rbx
ffff80000080406d:	ff d0                	call   rax
ffff80000080406f:	eb 5c                	jmp    ffff8000008040cd <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152
    }else if(strcmp(name,"console")==0){
ffff800000804071:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804075:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff80000080407c:	ff ff ff 
ffff80000080407f:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804083:	48 89 d6             	mov    rsi,rdx
ffff800000804086:	48 89 c7             	mov    rdi,rax
ffff800000804089:	49 89 df             	mov    r15,rbx
ffff80000080408c:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff800000804093:	ff ff ff 
ffff800000804096:	48 01 d8             	add    rax,rbx
ffff800000804099:	ff d0                	call   rax
ffff80000080409b:	85 c0                	test   eax,eax
ffff80000080409d:	75 27                	jne    ffff8000008040c6 <read_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
        return read_framebuffer(filp,buf,count,position);
ffff80000080409f:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008040a3:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008040a7:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008040ab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008040af:	48 89 c7             	mov    rdi,rax
ffff8000008040b2:	49 89 df             	mov    r15,rbx
ffff8000008040b5:	48 b8 62 d1 ee ff ff 	movabs rax,0xffffffffffeed162
ffff8000008040bc:	ff ff ff 
ffff8000008040bf:	48 01 d8             	add    rax,rbx
ffff8000008040c2:	ff d0                	call   rax
ffff8000008040c4:	eb 07                	jmp    ffff8000008040cd <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    }
    return -1;
ffff8000008040c6:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:157

}
ffff8000008040cd:	48 83 c4 40          	add    rsp,0x40
ffff8000008040d1:	5b                   	pop    rbx
ffff8000008040d2:	41 5f                	pop    r15
ffff8000008040d4:	5d                   	pop    rbp
ffff8000008040d5:	c3                   	ret    

ffff8000008040d6 <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:158
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff8000008040d6:	f3 0f 1e fa          	endbr64 
ffff8000008040da:	55                   	push   rbp
ffff8000008040db:	48 89 e5             	mov    rbp,rsp
ffff8000008040de:	41 57                	push   r15
ffff8000008040e0:	53                   	push   rbx
ffff8000008040e1:	48 83 ec 40          	sub    rsp,0x40
ffff8000008040e5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008040e5 <write_dev+0xf>
ffff8000008040ec:	49 bb 73 9a 11 00 00 	movabs r11,0x119a73
ffff8000008040f3:	00 00 00 
ffff8000008040f6:	4c 01 db             	add    rbx,r11
ffff8000008040f9:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008040fd:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000804101:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000804105:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:160
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff800000804109:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080410d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804111:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804115:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
        //这里需要调用缓冲区层的函数写块设备
        return blkdev_write(idev->dev,*position,count,buf);
    }

    //查看文件名
    char* name=filp->dentry->name;
ffff800000804119:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080411d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804121:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804124:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
    char* p=name+ strlen(name)-1;
ffff800000804128:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080412c:	48 89 c7             	mov    rdi,rax
ffff80000080412f:	49 89 df             	mov    r15,rbx
ffff800000804132:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff800000804139:	ff ff ff 
ffff80000080413c:	48 01 d8             	add    rax,rbx
ffff80000080413f:	ff d0                	call   rax
ffff800000804141:	48 98                	cdqe   
ffff800000804143:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804147:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080414b:	48 01 d0             	add    rax,rdx
ffff80000080414e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
    for(;*p!='/'&&p>=name;p--);
ffff800000804152:	eb 05                	jmp    ffff800000804159 <write_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 3)
ffff800000804154:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 1)
ffff800000804159:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080415d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804160:	3c 2f                	cmp    al,0x2f
ffff800000804162:	74 0a                	je     ffff80000080416e <write_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 2)
ffff800000804164:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804168:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080416c:	73 e6                	jae    ffff800000804154 <write_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:170
    if(p>=name)
ffff80000080416e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804172:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804176:	72 0c                	jb     ffff800000804184 <write_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:171
        name=p+1;
ffff800000804178:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080417c:	48 83 c0 01          	add    rax,0x1
ffff800000804180:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
    if(memcmp(name,"tty",3)==0){
ffff800000804184:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804188:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080418d:	48 b9 9a d6 ff ff ff 	movabs rcx,0xffffffffffffd69a
ffff800000804194:	ff ff ff 
ffff800000804197:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff80000080419b:	48 89 ce             	mov    rsi,rcx
ffff80000080419e:	48 89 c7             	mov    rdi,rax
ffff8000008041a1:	49 89 df             	mov    r15,rbx
ffff8000008041a4:	48 b8 b6 50 ef ff ff 	movabs rax,0xffffffffffef50b6
ffff8000008041ab:	ff ff ff 
ffff8000008041ae:	48 01 d8             	add    rax,rbx
ffff8000008041b1:	ff d0                	call   rax
ffff8000008041b3:	85 c0                	test   eax,eax
ffff8000008041b5:	75 27                	jne    ffff8000008041de <write_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:173
        return write_tty(filp,buf,count,position);
ffff8000008041b7:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008041bb:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008041bf:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008041c3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008041c7:	48 89 c7             	mov    rdi,rax
ffff8000008041ca:	49 89 df             	mov    r15,rbx
ffff8000008041cd:	48 b8 49 46 ef ff ff 	movabs rax,0xffffffffffef4649
ffff8000008041d4:	ff ff ff 
ffff8000008041d7:	48 01 d8             	add    rax,rbx
ffff8000008041da:	ff d0                	call   rax
ffff8000008041dc:	eb 5c                	jmp    ffff80000080423a <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:174
    }else if(strcmp(name,"console")==0){
ffff8000008041de:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008041e2:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff8000008041e9:	ff ff ff 
ffff8000008041ec:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff8000008041f0:	48 89 d6             	mov    rsi,rdx
ffff8000008041f3:	48 89 c7             	mov    rdi,rax
ffff8000008041f6:	49 89 df             	mov    r15,rbx
ffff8000008041f9:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff800000804200:	ff ff ff 
ffff800000804203:	48 01 d8             	add    rax,rbx
ffff800000804206:	ff d0                	call   rax
ffff800000804208:	85 c0                	test   eax,eax
ffff80000080420a:	75 27                	jne    ffff800000804233 <write_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:175
        return write_framebuffer(filp,buf,count,position);
ffff80000080420c:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804210:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804214:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804218:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080421c:	48 89 c7             	mov    rdi,rax
ffff80000080421f:	49 89 df             	mov    r15,rbx
ffff800000804222:	48 b8 91 d1 ee ff ff 	movabs rax,0xffffffffffeed191
ffff800000804229:	ff ff ff 
ffff80000080422c:	48 01 d8             	add    rax,rbx
ffff80000080422f:	ff d0                	call   rax
ffff800000804231:	eb 07                	jmp    ffff80000080423a <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    }
    return -1;
ffff800000804233:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:179

}
ffff80000080423a:	48 83 c4 40          	add    rsp,0x40
ffff80000080423e:	5b                   	pop    rbx
ffff80000080423f:	41 5f                	pop    r15
ffff800000804241:	5d                   	pop    rbp
ffff800000804242:	c3                   	ret    

ffff800000804243 <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:180
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff800000804243:	f3 0f 1e fa          	endbr64 
ffff800000804247:	55                   	push   rbp
ffff800000804248:	48 89 e5             	mov    rbp,rsp
ffff80000080424b:	41 57                	push   r15
ffff80000080424d:	53                   	push   rbx
ffff80000080424e:	48 83 ec 40          	sub    rsp,0x40
ffff800000804252:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804252 <ioctl_dev+0xf>
ffff800000804259:	49 bb 06 99 11 00 00 	movabs r11,0x119906
ffff800000804260:	00 00 00 
ffff800000804263:	4c 01 db             	add    rbx,r11
ffff800000804266:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080426a:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080426e:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000804272:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:182
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff800000804276:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080427a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080427e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804282:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:188
    if(IS_BLKDEV(idev->dev)){
        //这里需要调用缓冲区层的函数ioctl块设备
        return 1;
    }
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804286:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080428a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080428e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804291:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:189
    char* p=name+ strlen(name)-1;
ffff800000804295:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804299:	48 89 c7             	mov    rdi,rax
ffff80000080429c:	49 89 df             	mov    r15,rbx
ffff80000080429f:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff8000008042a6:	ff ff ff 
ffff8000008042a9:	48 01 d8             	add    rax,rbx
ffff8000008042ac:	ff d0                	call   rax
ffff8000008042ae:	48 98                	cdqe   
ffff8000008042b0:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008042b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042b8:	48 01 d0             	add    rax,rdx
ffff8000008042bb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190
    for(;*p!='/'&&p>=name;p--);
ffff8000008042bf:	eb 05                	jmp    ffff8000008042c6 <ioctl_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190 (discriminator 3)
ffff8000008042c1:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190 (discriminator 1)
ffff8000008042c6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008042ca:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008042cd:	3c 2f                	cmp    al,0x2f
ffff8000008042cf:	74 0a                	je     ffff8000008042db <ioctl_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190 (discriminator 2)
ffff8000008042d1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008042d5:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008042d9:	73 e6                	jae    ffff8000008042c1 <ioctl_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    if(p>=name)
ffff8000008042db:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008042df:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008042e3:	72 0c                	jb     ffff8000008042f1 <ioctl_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:192
        name=p+1;
ffff8000008042e5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008042e9:	48 83 c0 01          	add    rax,0x1
ffff8000008042ed:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:193
    if(memcmp(name,"tty",3)==0){
ffff8000008042f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042f5:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008042fa:	48 b9 9a d6 ff ff ff 	movabs rcx,0xffffffffffffd69a
ffff800000804301:	ff ff ff 
ffff800000804304:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804308:	48 89 ce             	mov    rsi,rcx
ffff80000080430b:	48 89 c7             	mov    rdi,rax
ffff80000080430e:	49 89 df             	mov    r15,rbx
ffff800000804311:	48 b8 b6 50 ef ff ff 	movabs rax,0xffffffffffef50b6
ffff800000804318:	ff ff ff 
ffff80000080431b:	48 01 d8             	add    rax,rbx
ffff80000080431e:	ff d0                	call   rax
ffff800000804320:	85 c0                	test   eax,eax
ffff800000804322:	75 27                	jne    ffff80000080434b <ioctl_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:194
        return ioctl_tty(inode, filp, cmd, arg);
ffff800000804324:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804328:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080432c:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804330:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804334:	48 89 c7             	mov    rdi,rax
ffff800000804337:	49 89 df             	mov    r15,rbx
ffff80000080433a:	48 b8 39 47 ef ff ff 	movabs rax,0xffffffffffef4739
ffff800000804341:	ff ff ff 
ffff800000804344:	48 01 d8             	add    rax,rbx
ffff800000804347:	ff d0                	call   rax
ffff800000804349:	eb 5c                	jmp    ffff8000008043a7 <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:195
    }else if(strcmp(name,"console")==0){
ffff80000080434b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080434f:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff800000804356:	ff ff ff 
ffff800000804359:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080435d:	48 89 d6             	mov    rsi,rdx
ffff800000804360:	48 89 c7             	mov    rdi,rax
ffff800000804363:	49 89 df             	mov    r15,rbx
ffff800000804366:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff80000080436d:	ff ff ff 
ffff800000804370:	48 01 d8             	add    rax,rbx
ffff800000804373:	ff d0                	call   rax
ffff800000804375:	85 c0                	test   eax,eax
ffff800000804377:	75 27                	jne    ffff8000008043a0 <ioctl_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:196
        return ioctl_framebuffer(inode,filp,cmd,arg);
ffff800000804379:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff80000080437d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804381:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804385:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804389:	48 89 c7             	mov    rdi,rax
ffff80000080438c:	49 89 df             	mov    r15,rbx
ffff80000080438f:	48 b8 b2 d2 ee ff ff 	movabs rax,0xffffffffffeed2b2
ffff800000804396:	ff ff ff 
ffff800000804399:	48 01 d8             	add    rax,rbx
ffff80000080439c:	ff d0                	call   rax
ffff80000080439e:	eb 07                	jmp    ffff8000008043a7 <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:198
    }
    return -1;
ffff8000008043a0:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200

}
ffff8000008043a7:	48 83 c4 40          	add    rsp,0x40
ffff8000008043ab:	5b                   	pop    rbx
ffff8000008043ac:	41 5f                	pop    r15
ffff8000008043ae:	5d                   	pop    rbp
ffff8000008043af:	c3                   	ret    

ffff8000008043b0 <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:202
int load_driver(char *path)
{
ffff8000008043b0:	f3 0f 1e fa          	endbr64 
ffff8000008043b4:	55                   	push   rbp
ffff8000008043b5:	48 89 e5             	mov    rbp,rsp
ffff8000008043b8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008043b8 <load_driver+0x8>
ffff8000008043bf:	49 bb a0 97 11 00 00 	movabs r11,0x1197a0
ffff8000008043c6:	00 00 00 
ffff8000008043c9:	4c 01 d8             	add    rax,r11
ffff8000008043cc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:204
    
}
ffff8000008043d0:	90                   	nop
ffff8000008043d1:	5d                   	pop    rbp
ffff8000008043d2:	c3                   	ret    

ffff8000008043d3 <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:26
TSS *tss=0xffff800000108000ul;
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
void init_proc(){
ffff8000008043d3:	f3 0f 1e fa          	endbr64 
ffff8000008043d7:	55                   	push   rbp
ffff8000008043d8:	48 89 e5             	mov    rbp,rsp
ffff8000008043db:	41 57                	push   r15
ffff8000008043dd:	53                   	push   rbx
ffff8000008043de:	48 83 ec 10          	sub    rsp,0x10
ffff8000008043e2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008043e2 <init_proc+0xf>
ffff8000008043e9:	49 bb 76 97 11 00 00 	movabs r11,0x119776
ffff8000008043f0:	00 00 00 
ffff8000008043f3:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:28
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
ffff8000008043f6:	be 0d 00 00 00       	mov    esi,0xd
ffff8000008043fb:	bf 00 00 00 00       	mov    edi,0x0
ffff800000804400:	49 89 df             	mov    r15,rbx
ffff800000804403:	48 b8 18 45 ee ff ff 	movabs rax,0xffffffffffee4518
ffff80000080440a:	ff ff ff 
ffff80000080440d:	48 01 d8             	add    rax,rbx
ffff800000804410:	ff d0                	call   rax
ffff800000804412:	48 89 c2             	mov    rdx,rax
ffff800000804415:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080441c:	ff ff ff 
ffff80000080441f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804423:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff800000804426:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080442d:	eb 7b                	jmp    ffff8000008044aa <init_proc+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 3)
        task[i].pid=-1;
ffff80000080442f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804436:	ff ff ff 
ffff800000804439:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080443d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804440:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804443:	48 98                	cdqe   
ffff800000804445:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080444c:	48 01 d0             	add    rax,rdx
ffff80000080444f:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31 (discriminator 3)
        task[i].stat=TASK_EMPTY;
ffff800000804455:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080445c:	ff ff ff 
ffff80000080445f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804463:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804466:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804469:	48 98                	cdqe   
ffff80000080446b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804472:	48 01 d0             	add    rax,rdx
ffff800000804475:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
        task[i].parent_pid=-1;
ffff80000080447c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804483:	ff ff ff 
ffff800000804486:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080448a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080448d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804490:	48 98                	cdqe   
ffff800000804492:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804499:	48 01 d0             	add    rax,rdx
ffff80000080449c:	c7 80 bc 00 00 00 ff 	mov    DWORD PTR [rax+0xbc],0xffffffff
ffff8000008044a3:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff8000008044a6:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 1)
ffff8000008044aa:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff8000008044ae:	0f 8e 7b ff ff ff    	jle    ffff80000080442f <init_proc+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:34
    }
    cur_proc=0;//proc zero
ffff8000008044b4:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008044bb:	ff ff ff 
ffff8000008044be:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008044c2:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35
    current=task;
ffff8000008044c8:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008044cf:	ff ff ff 
ffff8000008044d2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008044d6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008044d9:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008044e0:	ff ff ff 
ffff8000008044e3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008044e7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:36
    pidd=1;
ffff8000008044ea:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff8000008044f1:	ff ff ff 
ffff8000008044f4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008044f8:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:41


    //asm volatile("lldt %0"::"m"(xi));
    //asm volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
ffff8000008044fe:	68 00 00 80 00       	push   0x800000
ffff800000804503:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff80000080450a:	ff 
ffff80000080450b:	68 00 00 80 00       	push   0x800000
ffff800000804510:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000804517:	ff 
ffff800000804518:	68 00 00 80 00       	push   0x800000
ffff80000080451d:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000804524:	ff 
ffff800000804525:	68 00 00 80 00       	push   0x800000
ffff80000080452a:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000804531:	ff 
ffff800000804532:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
ffff800000804539:	80 ff ff 
ffff80000080453c:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
ffff800000804543:	80 ff ff 
ffff800000804546:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
ffff80000080454d:	80 ff ff 
ffff800000804550:	48 89 c1             	mov    rcx,rax
ffff800000804553:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080455a:	80 ff ff 
ffff80000080455d:	48 89 c2             	mov    rdx,rax
ffff800000804560:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804567:	80 ff ff 
ffff80000080456a:	48 89 c6             	mov    rsi,rax
ffff80000080456d:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804574:	80 ff ff 
ffff800000804577:	48 89 c7             	mov    rdi,rax
ffff80000080457a:	49 89 df             	mov    r15,rbx
ffff80000080457d:	48 b8 72 88 ee ff ff 	movabs rax,0xffffffffffee8872
ffff800000804584:	ff ff ff 
ffff800000804587:	48 01 d8             	add    rax,rbx
ffff80000080458a:	ff d0                	call   rax
ffff80000080458c:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:46
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);

    //===============创建0号进程======================
    int zi= init_proc0();
ffff800000804590:	49 89 df             	mov    r15,rbx
ffff800000804593:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804598:	48 ba 0a 6e ee ff ff 	movabs rdx,0xffffffffffee6e0a
ffff80000080459f:	ff ff ff 
ffff8000008045a2:	48 01 da             	add    rdx,rbx
ffff8000008045a5:	ff d2                	call   rdx
ffff8000008045a7:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:47
    task[zi].stat=TASK_READY;
ffff8000008045aa:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008045b1:	ff ff ff 
ffff8000008045b4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008045b8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008045bb:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008045be:	48 98                	cdqe   
ffff8000008045c0:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008045c7:	48 01 d0             	add    rax,rdx
ffff8000008045ca:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:49
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
ffff8000008045d1:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff8000008045d8:	ff ff ff 
ffff8000008045db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008045df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008045e2:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
ffff8000008045e6:	48 89 c6             	mov    rsi,rax
ffff8000008045e9:	bf a8 06 00 00       	mov    edi,0x6a8
ffff8000008045ee:	49 89 df             	mov    r15,rbx
ffff8000008045f1:	48 b8 0f 33 ee ff ff 	movabs rax,0xffffffffffee330f
ffff8000008045f8:	ff ff ff 
ffff8000008045fb:	48 01 d8             	add    rax,rbx
ffff8000008045fe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:51
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
ffff800000804600:	be 08 00 00 00       	mov    esi,0x8
ffff800000804605:	bf 74 01 00 00       	mov    edi,0x174
ffff80000080460a:	49 89 df             	mov    r15,rbx
ffff80000080460d:	48 b8 0f 33 ee ff ff 	movabs rax,0xffffffffffee330f
ffff800000804614:	ff ff ff 
ffff800000804617:	48 01 d8             	add    rax,rbx
ffff80000080461a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:53
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
ffff80000080461c:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
ffff800000804623:	00 20 00 
ffff800000804626:	48 89 c6             	mov    rsi,rax
ffff800000804629:	b8 81 00 00 c0       	mov    eax,0xc0000081
ffff80000080462e:	48 89 c7             	mov    rdi,rax
ffff800000804631:	49 89 df             	mov    r15,rbx
ffff800000804634:	48 b8 0f 33 ee ff ff 	movabs rax,0xffffffffffee330f
ffff80000080463b:	ff ff ff 
ffff80000080463e:	48 01 d8             	add    rax,rbx
ffff800000804641:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:55

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
ffff800000804643:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff80000080464a:	ff ff ff 
ffff80000080464d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804651:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804654:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff800000804658:	48 89 c6             	mov    rsi,rax
ffff80000080465b:	48 b8 a8 d6 ff ff ff 	movabs rax,0xffffffffffffd6a8
ffff800000804662:	ff ff ff 
ffff800000804665:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000804669:	48 89 c7             	mov    rdi,rax
ffff80000080466c:	49 89 df             	mov    r15,rbx
ffff80000080466f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804674:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff80000080467b:	ff ff ff 
ffff80000080467e:	48 01 da             	add    rdx,rbx
ffff800000804681:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:58
    //创建一个测试进程
//    create_test_proc();
}
ffff800000804683:	90                   	nop
ffff800000804684:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000804688:	5b                   	pop    rbx
ffff800000804689:	41 5f                	pop    r15
ffff80000080468b:	5d                   	pop    rbp
ffff80000080468c:	c3                   	ret    

ffff80000080468d <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:59
void create_test_proc(){
ffff80000080468d:	f3 0f 1e fa          	endbr64 
ffff800000804691:	55                   	push   rbp
ffff800000804692:	48 89 e5             	mov    rbp,rsp
ffff800000804695:	41 57                	push   r15
ffff800000804697:	53                   	push   rbx
ffff800000804698:	48 83 ec 20          	sub    rsp,0x20
ffff80000080469c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080469c <create_test_proc+0xf>
ffff8000008046a3:	49 bb bc 94 11 00 00 	movabs r11,0x1194bc
ffff8000008046aa:	00 00 00 
ffff8000008046ad:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:61

    int index=req_proc();
ffff8000008046b0:	49 89 df             	mov    r15,rbx
ffff8000008046b3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008046b8:	48 ba 4c 70 ee ff ff 	movabs rdx,0xffffffffffee704c
ffff8000008046bf:	ff ff ff 
ffff8000008046c2:	48 01 da             	add    rdx,rbx
ffff8000008046c5:	ff d2                	call   rdx
ffff8000008046c7:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62
    task[index].stat=TASK_READY;
ffff8000008046ca:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008046d1:	ff ff ff 
ffff8000008046d4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046d8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008046db:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008046de:	48 98                	cdqe   
ffff8000008046e0:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008046e7:	48 01 d0             	add    rax,rdx
ffff8000008046ea:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:63
    int currsp=0x9fc00-1;
ffff8000008046f1:	c7 45 dc ff fb 09 00 	mov    DWORD PTR [rbp-0x24],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64
    asm volatile("mov %%rsp,%0":"=m"(currsp));
ffff8000008046f8:	48 89 65 dc          	mov    QWORD PTR [rbp-0x24],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:65
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff8000008046fc:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000804703:	ff ff ff 
ffff800000804706:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080470a:	48 89 c2             	mov    rdx,rax
ffff80000080470d:	48 83 ec 08          	sub    rsp,0x8
ffff800000804711:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804714:	50                   	push   rax
ffff800000804715:	6a 00                	push   0x0
ffff800000804717:	52                   	push   rdx
ffff800000804718:	6a 00                	push   0x0
ffff80000080471a:	6a 00                	push   0x0
ffff80000080471c:	6a 00                	push   0x0
ffff80000080471e:	68 58 7d 00 00       	push   0x7d58
ffff800000804723:	6a 10                	push   0x10
ffff800000804725:	6a 10                	push   0x10
ffff800000804727:	6a 10                	push   0x10
ffff800000804729:	6a 10                	push   0x10
ffff80000080472b:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff800000804731:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff800000804737:	b9 00 00 00 00       	mov    ecx,0x0
ffff80000080473c:	ba 00 00 00 00       	mov    edx,0x0
ffff800000804741:	be 00 00 00 00       	mov    esi,0x0
ffff800000804746:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080474b:	49 89 df             	mov    r15,rbx
ffff80000080474e:	48 b8 9d 71 ee ff ff 	movabs rax,0xffffffffffee719d
ffff800000804755:	ff ff ff 
ffff800000804758:	48 01 d8             	add    rax,rbx
ffff80000080475b:	ff d0                	call   rax
ffff80000080475d:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:67
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)_syscall_sysret, 0, index);
    task[index].tss.rsp0=0x400000;
ffff800000804761:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804768:	ff ff ff 
ffff80000080476b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080476f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804772:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804775:	48 98                	cdqe   
ffff800000804777:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080477e:	48 01 d0             	add    rax,rdx
ffff800000804781:	48 c7 80 fc 01 00 00 	mov    QWORD PTR [rax+0x1fc],0x400000
ffff800000804788:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
    task[index].mem_struct.stack_top=0x7e00;
ffff80000080478c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804793:	ff ff ff 
ffff800000804796:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080479a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080479d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008047a0:	48 98                	cdqe   
ffff8000008047a2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008047a9:	48 01 d0             	add    rax,rdx
ffff8000008047ac:	48 c7 40 40 00 7e 00 	mov    QWORD PTR [rax+0x40],0x7e00
ffff8000008047b3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:69
    task[index].mem_struct.stack_bottom=0x6e00;
ffff8000008047b4:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008047bb:	ff ff ff 
ffff8000008047be:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008047c2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008047c5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008047c8:	48 98                	cdqe   
ffff8000008047ca:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008047d1:	48 01 d0             	add    rax,rdx
ffff8000008047d4:	48 c7 40 38 00 6e 00 	mov    QWORD PTR [rax+0x38],0x6e00
ffff8000008047db:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
    task[index].mem_struct.heap_top=0x1101000;
ffff8000008047dc:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008047e3:	ff ff ff 
ffff8000008047e6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008047ea:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008047ed:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008047f0:	48 98                	cdqe   
ffff8000008047f2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008047f9:	48 01 d0             	add    rax,rdx
ffff8000008047fc:	48 c7 40 30 00 10 10 	mov    QWORD PTR [rax+0x30],0x1101000
ffff800000804803:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:71
    task[index].mem_struct.heap_base=0x1100000;
ffff800000804804:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080480b:	ff ff ff 
ffff80000080480e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804812:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804815:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804818:	48 98                	cdqe   
ffff80000080481a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804821:	48 01 d0             	add    rax,rdx
ffff800000804824:	48 c7 40 28 00 00 10 	mov    QWORD PTR [rax+0x28],0x1100000
ffff80000080482b:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:74

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
ffff80000080482c:	48 c7 45 e0 58 7d 00 	mov    QWORD PTR [rbp-0x20],0x7d58
ffff800000804833:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:75
    str->rax=0;
ffff800000804834:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804838:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff80000080483f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:76
    str->rbx=0;
ffff800000804840:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804844:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
ffff80000080484b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77
    str->rcx=proc_zero;//sysret采用的返回地址
ffff80000080484c:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff800000804853:	ff ff ff 
ffff800000804856:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080485a:	48 89 c2             	mov    rdx,rax
ffff80000080485d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804861:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rdx=0;
ffff800000804865:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804869:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffff800000804870:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rsi=0;
ffff800000804871:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804875:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff80000080487c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->rdi=0;
ffff80000080487d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804881:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffff800000804888:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->r15=0;
ffff800000804889:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080488d:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804894:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->r14=0;
ffff800000804895:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804899:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff8000008048a0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->r13=0;
ffff8000008048a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048a5:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff8000008048ac:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r12=0;
ffff8000008048ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048b1:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff8000008048b8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r11=0x200;
ffff8000008048b9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048bd:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
ffff8000008048c4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r10=0;
ffff8000008048c5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048c9:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff8000008048d0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r9=0;
ffff8000008048d1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048d5:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
ffff8000008048dc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->r8=0;
ffff8000008048dd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048e1:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
ffff8000008048e8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->rip=proc_zero;
ffff8000008048e9:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff8000008048f0:	ff ff ff 
ffff8000008048f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048f7:	48 89 c2             	mov    rdx,rax
ffff8000008048fa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048fe:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->cs=0x8;
ffff800000804905:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804909:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
ffff800000804910:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->rflags=0x00200206;
ffff800000804914:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804918:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
ffff80000080491f:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->rsp=0x7e00;
ffff800000804923:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804927:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
ffff80000080492e:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->ss=0x2b;
ffff800000804932:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804936:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
ffff80000080493d:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->ds=0x2b;
ffff800000804941:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804945:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:95
    str->es=0x2b;
ffff80000080494c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804950:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
ffff800000804957:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:97

}
ffff800000804958:	90                   	nop
ffff800000804959:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff80000080495d:	5b                   	pop    rbx
ffff80000080495e:	41 5f                	pop    r15
ffff800000804960:	5d                   	pop    rbp
ffff800000804961:	c3                   	ret    

ffff800000804962 <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:99
int init_proc0()
{
ffff800000804962:	f3 0f 1e fa          	endbr64 
ffff800000804966:	55                   	push   rbp
ffff800000804967:	48 89 e5             	mov    rbp,rsp
ffff80000080496a:	41 57                	push   r15
ffff80000080496c:	53                   	push   rbx
ffff80000080496d:	48 83 ec 10          	sub    rsp,0x10
ffff800000804971:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804971 <init_proc0+0xf>
ffff800000804978:	49 bb e7 91 11 00 00 	movabs r11,0x1191e7
ffff80000080497f:	00 00 00 
ffff800000804982:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:101

    task[0].pid=pidd++;
ffff800000804985:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff80000080498c:	ff ff ff 
ffff80000080498f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804993:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000804995:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000804998:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff80000080499f:	ff ff ff 
ffff8000008049a2:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008049a6:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff8000008049a8:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008049af:	ff ff ff 
ffff8000008049b2:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008049b6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008049b9:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102
    task[0].stat=TASK_RUNNING;
ffff8000008049bb:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008049c2:	ff ff ff 
ffff8000008049c5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049c9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049cc:	c7 40 18 01 00 00 00 	mov    DWORD PTR [rax+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:103
    task[0].utime=0;
ffff8000008049d3:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008049da:	ff ff ff 
ffff8000008049dd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049e1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049e4:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:104
    task[0].priority=0;
ffff8000008049eb:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008049f2:	ff ff ff 
ffff8000008049f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049fc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:106

    struct process *pz=task;
ffff800000804a03:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804a0a:	ff ff ff 
ffff800000804a0d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a11:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a14:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:115
//    task[index].tss.eip=(long)proc_zero;
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    pz->openf[0]=(struct file*)&ftty;
ffff800000804a18:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a1c:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804a23:	ff ff ff 
ffff800000804a26:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804a2a:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:116
    pz->openf[1]=(struct file*)&ftty;
ffff800000804a31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a35:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804a3c:	ff ff ff 
ffff800000804a3f:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804a43:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:117
    pz->openf[2]=(struct file*)&ftty;
ffff800000804a4a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a4e:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804a55:	ff ff ff 
ffff800000804a58:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804a5c:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:119

    pz->mem_struct.stack_top=STACK_TOP;
ffff800000804a63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a67:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000804a6e:	7f 00 00 
ffff800000804a71:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120
    pz->mem_struct.stack_bottom=STACK_TOP;
ffff800000804a75:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a79:	48 89 70 38          	mov    QWORD PTR [rax+0x38],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:121
    pz->mem_struct.heap_top=HEAP_BASE;
ffff800000804a7d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a81:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x1000000
ffff800000804a88:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122
    pz->mem_struct.heap_base=HEAP_BASE;
ffff800000804a89:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a8d:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000804a94:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    memcpy(&pz->tss,tss, sizeof(TSS));
ffff800000804a95:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000804a9c:	ff ff ff 
ffff800000804a9f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804aa3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804aa6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804aaa:	48 8d 8a f8 01 00 00 	lea    rcx,[rdx+0x1f8]
ffff800000804ab1:	ba 6c 00 00 00       	mov    edx,0x6c
ffff800000804ab6:	48 89 c6             	mov    rsi,rax
ffff800000804ab9:	48 89 cf             	mov    rdi,rcx
ffff800000804abc:	49 89 df             	mov    r15,rbx
ffff800000804abf:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000804ac6:	ff ff ff 
ffff800000804ac9:	48 01 d8             	add    rax,rbx
ffff800000804acc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:125

    pz->child_procs=NULL;
ffff800000804ace:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ad2:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000804ad9:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:128

    //这个是进程切换的时候要读取的值
    pz->regs.cr3=PML4_ADDR&~KNL_BASE;
ffff800000804add:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ae1:	48 c7 80 64 02 00 00 	mov    QWORD PTR [rax+0x264],0x101000
ffff800000804ae8:	00 10 10 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:129
    pz->pml4=PML4_ADDR;
ffff800000804aec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804af0:	48 bf 00 10 10 00 00 	movabs rdi,0xffff800000101000
ffff800000804af7:	80 ff ff 
ffff800000804afa:	48 89 b8 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:130
    pz->cwd=root_sb->root;
ffff800000804b01:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000804b08:	ff ff ff 
ffff800000804b0b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b0f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804b12:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804b15:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b19:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131
    pz->exef=NULL;
ffff800000804b20:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b24:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffff800000804b2b:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    list_init(&pz->node);
ffff800000804b2f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b33:	48 05 34 03 00 00    	add    rax,0x334
ffff800000804b39:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000804b3d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b41:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000804b48:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b4c:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804b53:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000804b54:	90                   	nop
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:133
    pz->node.data=pz;
ffff800000804b55:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b59:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804b5d:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:135
    
    pz->gpid=pz->pid;
ffff800000804b64:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b68:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804b6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b6e:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    pz->sid=pz->pid;
ffff800000804b71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b75:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804b77:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b7b:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:137
    pz->fg_pgid=pz->pid;
ffff800000804b7e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b82:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804b84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b88:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    pz->in_bgpg=0;
ffff800000804b8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b8f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    return 0;
ffff800000804b96:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
}
ffff800000804b9b:	48 83 c4 10          	add    rsp,0x10
ffff800000804b9f:	5b                   	pop    rbx
ffff800000804ba0:	41 5f                	pop    r15
ffff800000804ba2:	5d                   	pop    rbp
ffff800000804ba3:	c3                   	ret    

ffff800000804ba4 <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
int req_proc(){
ffff800000804ba4:	f3 0f 1e fa          	endbr64 
ffff800000804ba8:	55                   	push   rbp
ffff800000804ba9:	48 89 e5             	mov    rbp,rsp
ffff800000804bac:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804bac <req_proc+0x8>
ffff800000804bb3:	49 bb ac 8f 11 00 00 	movabs r11,0x118fac
ffff800000804bba:	00 00 00 
ffff800000804bbd:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
    int num=0;
ffff800000804bc0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000804bc7:	eb 04                	jmp    ffff800000804bcd <req_proc+0x29>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:145
    num<=MAX_PROC_COUNT){
        num++;
ffff800000804bc9:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000804bcd:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804bd4:	ff ff ff 
ffff800000804bd7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804bdb:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804bde:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804be1:	48 63 d2             	movsxd rdx,edx
ffff800000804be4:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804beb:	48 01 ca             	add    rdx,rcx
ffff800000804bee:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804bf0:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804bf3:	74 2e                	je     ffff800000804c23 <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 1)
ffff800000804bf5:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804bfc:	ff ff ff 
ffff800000804bff:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804c03:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804c06:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804c09:	48 63 d2             	movsxd rdx,edx
ffff800000804c0c:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804c13:	48 01 ca             	add    rdx,rcx
ffff800000804c16:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000804c19:	85 d2                	test   edx,edx
ffff800000804c1b:	74 06                	je     ffff800000804c23 <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 2)
ffff800000804c1d:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000804c21:	7e a6                	jle    ffff800000804bc9 <req_proc+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:147
    }
    if(num>=MAX_PROC_COUNT)
ffff800000804c23:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000804c27:	7e 0a                	jle    ffff800000804c33 <req_proc+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
        return -1;
ffff800000804c29:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000804c2e:	e9 c0 00 00 00       	jmp    ffff800000804cf3 <req_proc+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:149
    task[num].pid=pidd++;
ffff800000804c33:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff800000804c3a:	ff ff ff 
ffff800000804c3d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804c41:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804c43:	8d 72 01             	lea    esi,[rdx+0x1]
ffff800000804c46:	48 b9 70 fe ff ff ff 	movabs rcx,0xfffffffffffffe70
ffff800000804c4d:	ff ff ff 
ffff800000804c50:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000804c54:	89 31                	mov    DWORD PTR [rcx],esi
ffff800000804c56:	48 b9 b8 fe ff ff ff 	movabs rcx,0xfffffffffffffeb8
ffff800000804c5d:	ff ff ff 
ffff800000804c60:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000804c64:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff800000804c67:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000804c6a:	48 63 c9             	movsxd rcx,ecx
ffff800000804c6d:	48 69 c9 58 03 00 00 	imul   rcx,rcx,0x358
ffff800000804c74:	48 01 f1             	add    rcx,rsi
ffff800000804c77:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    task[num].stat=TASK_ZOMBIE;
ffff800000804c79:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804c80:	ff ff ff 
ffff800000804c83:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804c87:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804c8a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804c8d:	48 63 d2             	movsxd rdx,edx
ffff800000804c90:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804c97:	48 01 ca             	add    rdx,rcx
ffff800000804c9a:	c7 42 18 04 00 00 00 	mov    DWORD PTR [rdx+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
    task[num].utime=0;
ffff800000804ca1:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804ca8:	ff ff ff 
ffff800000804cab:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804caf:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804cb2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804cb5:	48 63 d2             	movsxd rdx,edx
ffff800000804cb8:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804cbf:	48 01 ca             	add    rdx,rcx
ffff800000804cc2:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    task[num].priority=0;
ffff800000804cc9:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804cd0:	ff ff ff 
ffff800000804cd3:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000804cd7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804cda:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000804cdd:	48 98                	cdqe   
ffff800000804cdf:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804ce6:	48 01 d0             	add    rax,rdx
ffff800000804ce9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    return num;
ffff800000804cf0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
}
ffff800000804cf3:	5d                   	pop    rbp
ffff800000804cf4:	c3                   	ret    

ffff800000804cf5 <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:156
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
ffff800000804cf5:	f3 0f 1e fa          	endbr64 
ffff800000804cf9:	55                   	push   rbp
ffff800000804cfa:	48 89 e5             	mov    rbp,rsp
ffff800000804cfd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804cfd <set_proc+0x8>
ffff800000804d04:	49 bb 5b 8e 11 00 00 	movabs r11,0x118e5b
ffff800000804d0b:	00 00 00 
ffff800000804d0e:	4c 01 d8             	add    rax,r11
ffff800000804d11:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000804d15:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000804d19:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000804d1d:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff800000804d21:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffff800000804d25:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
    struct process* proc=&task[proc_nr];
ffff800000804d29:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804d30:	ff ff ff 
ffff800000804d33:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000804d37:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804d3a:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
ffff800000804d3d:	48 98                	cdqe   
ffff800000804d3f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804d46:	48 01 d0             	add    rax,rdx
ffff800000804d49:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:158
    proc->regs.rax=rax;
ffff800000804d4d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d51:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804d55:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
    proc->regs.rbx=rbx;
ffff800000804d5c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d60:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804d64:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    proc->regs.rcx=rcx;
ffff800000804d6b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d6f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804d73:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rdx=rdx;
ffff800000804d7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d7e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804d82:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:162
    proc->regs.es=es;
ffff800000804d89:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d8d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804d91:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    proc->regs.cs=cs;
ffff800000804d98:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d9c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804da0:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:164
    proc->regs.ss=ss;
ffff800000804da7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dab:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
ffff800000804daf:	48 89 90 cc 02 00 00 	mov    QWORD PTR [rax+0x2cc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165
    proc->regs.ds=ds;
ffff800000804db6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dba:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000804dbe:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.fs=fs;
ffff800000804dc5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dc9:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
ffff800000804dcd:	48 89 90 dc 02 00 00 	mov    QWORD PTR [rax+0x2dc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.gs=gs;
ffff800000804dd4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dd8:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff800000804ddc:	48 89 90 e4 02 00 00 	mov    QWORD PTR [rax+0x2e4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.rsp=rsp;
ffff800000804de3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804de7:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff800000804deb:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->regs.rbp=rbp;
ffff800000804df2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804df6:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
ffff800000804dfa:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:170
    proc->regs.rsi=rsi;
ffff800000804e01:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e05:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
ffff800000804e09:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:171
    proc->regs.rdi=rdi;
ffff800000804e10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e14:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
ffff800000804e18:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
ffff800000804e1f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e23:	48 c7 80 74 02 00 00 	mov    QWORD PTR [rax+0x274],0x202
ffff800000804e2a:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:174
    //能接受中断
    proc->regs.rip=rip;
ffff800000804e2e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e32:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
ffff800000804e36:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:176

    proc->regs.cs=cs;
ffff800000804e3d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e41:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804e45:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:177
    proc->regs.ds=ds;
ffff800000804e4c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e50:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000804e54:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:178
    proc->regs.es=es;
ffff800000804e5b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e5f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804e63:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:179
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
ffff800000804e6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e6e:	48 b9 00 10 10 00 00 	movabs rcx,0xffff800000101000
ffff800000804e75:	80 ff ff 
ffff800000804e78:	48 89 88 64 02 00 00 	mov    QWORD PTR [rax+0x264],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:180
    proc->pml4=PML4_ADDR;
ffff800000804e7f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e83:	48 89 88 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:183


}
ffff800000804e8a:	90                   	nop
ffff800000804e8b:	5d                   	pop    rbp
ffff800000804e8c:	c3                   	ret    

ffff800000804e8d <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:185
void proc_zero()
{
ffff800000804e8d:	f3 0f 1e fa          	endbr64 
ffff800000804e91:	55                   	push   rbp
ffff800000804e92:	48 89 e5             	mov    rbp,rsp
ffff800000804e95:	41 57                	push   r15
ffff800000804e97:	53                   	push   rbx
ffff800000804e98:	48 83 ec 10          	sub    rsp,0x10
ffff800000804e9c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804e9c <proc_zero+0xf>
ffff800000804ea3:	49 bb bc 8c 11 00 00 	movabs r11,0x118cbc
ffff800000804eaa:	00 00 00 
ffff800000804ead:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:198 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
ffff800000804eb0:	49 89 df             	mov    r15,rbx
ffff800000804eb3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804eb8:	48 ba bc 08 ef ff ff 	movabs rdx,0xffffffffffef08bc
ffff800000804ebf:	ff ff ff 
ffff800000804ec2:	48 01 da             	add    rdx,rbx
ffff800000804ec5:	ff d2                	call   rdx
ffff800000804ec7:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 1)
        putchar(c);
ffff800000804eca:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff800000804ece:	89 c7                	mov    edi,eax
ffff800000804ed0:	49 89 df             	mov    r15,rbx
ffff800000804ed3:	48 b8 4a 3b ee ff ff 	movabs rax,0xffffffffffee3b4a
ffff800000804eda:	ff ff ff 
ffff800000804edd:	48 01 d8             	add    rax,rbx
ffff800000804ee0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:197 (discriminator 1)
    {
ffff800000804ee2:	eb cc                	jmp    ffff800000804eb0 <proc_zero+0x23>

ffff800000804ee4 <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:202
    }
}
void save_rsp(){
ffff800000804ee4:	f3 0f 1e fa          	endbr64 
ffff800000804ee8:	55                   	push   rbp
ffff800000804ee9:	48 89 e5             	mov    rbp,rsp
ffff800000804eec:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804eec <save_rsp+0x8>
ffff800000804ef3:	49 bb 6c 8c 11 00 00 	movabs r11,0x118c6c
ffff800000804efa:	00 00 00 
ffff800000804efd:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:204
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
ffff800000804f00:	48 be f0 ff 7f 00 00 	movabs rsi,0xffff8000007ffff0
ffff800000804f07:	80 ff ff 
ffff800000804f0a:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
    current->regs.rsp=*p;
ffff800000804f0e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000804f12:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000804f15:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000804f1c:	ff ff ff 
ffff800000804f1f:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000804f23:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804f26:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:206
}
ffff800000804f2d:	90                   	nop
ffff800000804f2e:	5d                   	pop    rbp
ffff800000804f2f:	c3                   	ret    

ffff800000804f30 <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
void manage_proc(){
ffff800000804f30:	f3 0f 1e fa          	endbr64 
ffff800000804f34:	55                   	push   rbp
ffff800000804f35:	48 89 e5             	mov    rbp,rsp
ffff800000804f38:	41 57                	push   r15
ffff800000804f3a:	48 83 ec 18          	sub    rsp,0x18
ffff800000804f3e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804f3e <manage_proc+0xe>
ffff800000804f45:	49 bb 1a 8c 11 00 00 	movabs r11,0x118c1a
ffff800000804f4c:	00 00 00 
ffff800000804f4f:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
    if(cur_proc!=-1)
ffff800000804f52:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804f59:	ff ff ff 
ffff800000804f5c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f60:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f62:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804f65:	74 37                	je     ffff800000804f9e <manage_proc+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
        task[cur_proc].utime++;
ffff800000804f67:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804f6e:	ff ff ff 
ffff800000804f71:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f75:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804f78:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804f7f:	ff ff ff 
ffff800000804f82:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f86:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f88:	48 63 d2             	movsxd rdx,edx
ffff800000804f8b:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804f92:	48 01 ca             	add    rdx,rcx
ffff800000804f95:	8b 4a 1c             	mov    ecx,DWORD PTR [rdx+0x1c]
ffff800000804f98:	83 c1 01             	add    ecx,0x1
ffff800000804f9b:	89 4a 1c             	mov    DWORD PTR [rdx+0x1c],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000804f9e:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804fa5:	ff ff ff 
ffff800000804fa8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fac:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804fae:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804fb1:	74 70                	je     ffff800000805023 <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 1)
ffff800000804fb3:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804fba:	ff ff ff 
ffff800000804fbd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fc1:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804fc4:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804fcb:	ff ff ff 
ffff800000804fce:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fd2:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804fd4:	48 63 d2             	movsxd rdx,edx
ffff800000804fd7:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804fde:	48 01 ca             	add    rdx,rcx
ffff800000804fe1:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff800000804fe4:	83 fa 0a             	cmp    edx,0xa
ffff800000804fe7:	77 3a                	ja     ffff800000805023 <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
ffff800000804fe9:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804ff0:	ff ff ff 
ffff800000804ff3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804ff7:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804ffa:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805001:	ff ff ff 
ffff800000805004:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805008:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080500a:	48 63 d2             	movsxd rdx,edx
ffff80000080500d:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805014:	48 01 ca             	add    rdx,rcx
ffff800000805017:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff80000080501a:	83 fa 02             	cmp    edx,0x2
ffff80000080501d:	0f 84 bf 01 00 00    	je     ffff8000008051e2 <manage_proc+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212
        if(cur_proc!=-1)
ffff800000805023:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080502a:	ff ff ff 
ffff80000080502d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805031:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805033:	83 fa ff             	cmp    edx,0xffffffff
ffff800000805036:	74 35                	je     ffff80000080506d <manage_proc+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
            task[cur_proc].utime=0;
ffff800000805038:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080503f:	ff ff ff 
ffff800000805042:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805046:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805049:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805050:	ff ff ff 
ffff800000805053:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805057:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805059:	48 63 d2             	movsxd rdx,edx
ffff80000080505c:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805063:	48 01 ca             	add    rdx,rcx
ffff800000805066:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:215
        //find
        int i=cur_proc+1;
ffff80000080506d:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805074:	ff ff ff 
ffff800000805077:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080507b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080507d:	83 c2 01             	add    edx,0x1
ffff800000805080:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:216
        int times=0;
ffff800000805083:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        //轮询，直到有一个符合条件
        while(times<10){
ffff80000080508a:	eb 7b                	jmp    ffff800000805107 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
ffff80000080508c:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805093:	ff ff ff 
ffff800000805096:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080509a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080509d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008050a0:	48 63 d2             	movsxd rdx,edx
ffff8000008050a3:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008050aa:	48 01 ca             	add    rdx,rcx
ffff8000008050ad:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008050af:	83 fa ff             	cmp    edx,0xffffffff
ffff8000008050b2:	74 3e                	je     ffff8000008050f2 <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 1)
ffff8000008050b4:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008050bb:	ff ff ff 
ffff8000008050be:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008050c2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008050c5:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008050c8:	48 63 d2             	movsxd rdx,edx
ffff8000008050cb:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008050d2:	48 01 ca             	add    rdx,rcx
ffff8000008050d5:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff8000008050d8:	83 fa 02             	cmp    edx,0x2
ffff8000008050db:	75 15                	jne    ffff8000008050f2 <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 2)
ffff8000008050dd:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008050e4:	ff ff ff 
ffff8000008050e7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008050eb:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008050ed:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff8000008050f0:	75 21                	jne    ffff800000805113 <manage_proc+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:222
                break;
            }
            i++;
ffff8000008050f2:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
            if(i>=MAX_TASKS){
ffff8000008050f6:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff8000008050fa:	7e 0b                	jle    ffff800000805107 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:224
                times++;
ffff8000008050fc:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:225
                i=0;
ffff800000805100:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        while(times<10){
ffff800000805107:	83 7d e8 09          	cmp    DWORD PTR [rbp-0x18],0x9
ffff80000080510b:	0f 8e 7b ff ff ff    	jle    ffff80000080508c <manage_proc+0x15c>
ffff800000805111:	eb 01                	jmp    ffff800000805114 <manage_proc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220
                break;
ffff800000805113:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff800000805114:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
ffff800000805118:	0f 84 c7 00 00 00    	je     ffff8000008051e5 <manage_proc+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:230
        //switch
        task[cur_proc].stat=TASK_READY;
ffff80000080511e:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805125:	ff ff ff 
ffff800000805128:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080512c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080512f:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805136:	ff ff ff 
ffff800000805139:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080513d:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080513f:	48 63 d2             	movsxd rdx,edx
ffff800000805142:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805149:	48 01 ca             	add    rdx,rcx
ffff80000080514c:	c7 42 18 02 00 00 00 	mov    DWORD PTR [rdx+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
        task[i].stat=TASK_RUNNING;
ffff800000805153:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080515a:	ff ff ff 
ffff80000080515d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805161:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805164:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805167:	48 63 d2             	movsxd rdx,edx
ffff80000080516a:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805171:	48 01 ca             	add    rdx,rcx
ffff800000805174:	c7 42 18 01 00 00 00 	mov    DWORD PTR [rdx+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:232
        switch_to(&task[cur_proc], &task[i]);
ffff80000080517b:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805182:	ff ff ff 
ffff800000805185:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805189:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080518c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080518f:	48 63 d2             	movsxd rdx,edx
ffff800000805192:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805199:	48 01 d1             	add    rcx,rdx
ffff80000080519c:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008051a3:	ff ff ff 
ffff8000008051a6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008051aa:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008051ad:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008051b4:	ff ff ff 
ffff8000008051b7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008051bb:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008051bd:	48 63 d2             	movsxd rdx,edx
ffff8000008051c0:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008051c7:	48 01 f2             	add    rdx,rsi
ffff8000008051ca:	48 89 ce             	mov    rsi,rcx
ffff8000008051cd:	48 89 d7             	mov    rdi,rdx
ffff8000008051d0:	49 89 c7             	mov    r15,rax
ffff8000008051d3:	48 ba 6a 86 ee ff ff 	movabs rdx,0xffffffffffee866a
ffff8000008051da:	ff ff ff 
ffff8000008051dd:	48 01 c2             	add    rdx,rax
ffff8000008051e0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:234
    }
    return;
ffff8000008051e2:	90                   	nop
ffff8000008051e3:	eb 01                	jmp    ffff8000008051e6 <manage_proc+0x2b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff8000008051e5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
}
ffff8000008051e6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008051ea:	c9                   	leave  
ffff8000008051eb:	c3                   	ret    

ffff8000008051ec <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:238

void switch_proc_tss(int pnr)
{
ffff8000008051ec:	f3 0f 1e fa          	endbr64 
ffff8000008051f0:	55                   	push   rbp
ffff8000008051f1:	48 89 e5             	mov    rbp,rsp
ffff8000008051f4:	41 57                	push   r15
ffff8000008051f6:	48 83 ec 28          	sub    rsp,0x28
ffff8000008051fa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008051fa <switch_proc_tss+0xe>
ffff800000805201:	49 bb 5e 89 11 00 00 	movabs r11,0x11895e
ffff800000805208:	00 00 00 
ffff80000080520b:	4c 01 d8             	add    rax,r11
ffff80000080520e:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:239
    int sel=_TSS_IND(pnr)*8;
ffff800000805211:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805214:	01 d2                	add    edx,edx
ffff800000805216:	83 c2 05             	add    edx,0x5
ffff800000805219:	c1 e2 03             	shl    edx,0x3
ffff80000080521c:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:240
    cur_proc=pnr;
ffff80000080521f:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805226:	ff ff ff 
ffff800000805229:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080522d:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff800000805230:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241
    switch_proc_asm(sel);
ffff800000805232:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805235:	89 d7                	mov    edi,edx
ffff800000805237:	49 89 c7             	mov    r15,rax
ffff80000080523a:	48 ba 8f 59 ef ff ff 	movabs rdx,0xffffffffffef598f
ffff800000805241:	ff ff ff 
ffff800000805244:	48 01 c2             	add    rdx,rax
ffff800000805247:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
}
ffff800000805249:	90                   	nop
ffff80000080524a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080524e:	c9                   	leave  
ffff80000080524f:	c3                   	ret    

ffff800000805250 <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
void switch_proc(int pnr){
ffff800000805250:	f3 0f 1e fa          	endbr64 
ffff800000805254:	55                   	push   rbp
ffff800000805255:	48 89 e5             	mov    rbp,rsp
ffff800000805258:	41 57                	push   r15
ffff80000080525a:	53                   	push   rbx
ffff80000080525b:	48 81 ec 70 03 00 00 	sub    rsp,0x370
ffff800000805262:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805262 <switch_proc+0x12>
ffff800000805269:	49 bb f6 88 11 00 00 	movabs r11,0x1188f6
ffff800000805270:	00 00 00 
ffff800000805273:	4c 01 db             	add    rbx,r11
ffff800000805276:	89 bd 8c fc ff ff    	mov    DWORD PTR [rbp-0x374],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:246
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
ffff80000080527c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805283:	ff ff ff 
ffff800000805286:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080528a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080528d:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff800000805293:	48 98                	cdqe   
ffff800000805295:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080529c:	48 01 c2             	add    rdx,rax
ffff80000080529f:	48 8d 85 90 fc ff ff 	lea    rax,[rbp-0x370]
ffff8000008052a6:	48 89 d6             	mov    rsi,rdx
ffff8000008052a9:	ba 6b 00 00 00       	mov    edx,0x6b
ffff8000008052ae:	48 89 c7             	mov    rdi,rax
ffff8000008052b1:	48 89 d1             	mov    rcx,rdx
ffff8000008052b4:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:247
    save_context(&task[cur_proc].tss);
ffff8000008052b7:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008052be:	ff ff ff 
ffff8000008052c1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008052c5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008052c8:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008052cf:	ff ff ff 
ffff8000008052d2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008052d6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008052d8:	48 98                	cdqe   
ffff8000008052da:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008052e1:	48 01 d0             	add    rax,rdx
ffff8000008052e4:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff8000008052ea:	48 89 c7             	mov    rdi,rax
ffff8000008052ed:	49 89 df             	mov    r15,rbx
ffff8000008052f0:	48 b8 1e 78 ee ff ff 	movabs rax,0xffffffffffee781e
ffff8000008052f7:	ff ff ff 
ffff8000008052fa:	48 01 d8             	add    rax,rbx
ffff8000008052fd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:252
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
ffff8000008052ff:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000805306:	ff ff ff 
ffff800000805309:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080530d:	8b 95 8c fc ff ff    	mov    edx,DWORD PTR [rbp-0x374]
ffff800000805313:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:253
    int sel=_TSS_IND(pnr)*8;
ffff800000805315:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff80000080531b:	01 c0                	add    eax,eax
ffff80000080531d:	83 c0 05             	add    eax,0x5
ffff800000805320:	c1 e0 03             	shl    eax,0x3
ffff800000805323:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:254
    switch_to(NULL, &task[pnr].tss);
ffff800000805326:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080532d:	ff ff ff 
ffff800000805330:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805334:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805337:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff80000080533d:	48 98                	cdqe   
ffff80000080533f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805346:	48 01 d0             	add    rax,rdx
ffff800000805349:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff80000080534f:	48 89 c6             	mov    rsi,rax
ffff800000805352:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805357:	49 89 df             	mov    r15,rbx
ffff80000080535a:	48 b8 6a 86 ee ff ff 	movabs rax,0xffffffffffee866a
ffff800000805361:	ff ff ff 
ffff800000805364:	48 01 d8             	add    rax,rbx
ffff800000805367:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:257
    //asm volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
ffff800000805369:	90                   	nop
ffff80000080536a:	48 81 c4 70 03 00 00 	add    rsp,0x370
ffff800000805371:	5b                   	pop    rbx
ffff800000805372:	41 5f                	pop    r15
ffff800000805374:	5d                   	pop    rbp
ffff800000805375:	c3                   	ret    

ffff800000805376 <save_context>:
save_context():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:259
void save_context(TSS *tss)
{
ffff800000805376:	f3 0f 1e fa          	endbr64 
ffff80000080537a:	55                   	push   rbp
ffff80000080537b:	48 89 e5             	mov    rbp,rsp
ffff80000080537e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080537e <save_context+0x8>
ffff800000805385:	49 bb da 87 11 00 00 	movabs r11,0x1187da
ffff80000080538c:	00 00 00 
ffff80000080538f:	4c 01 d8             	add    rax,r11
ffff800000805392:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:270
//    tss->esi=scene_saver.esi;
//    tss->edi=scene_saver.edi;
//    tss->eflags=scene_saver.eflags;
//    tss->esp=scene_saver.esp;
//    tss->ebp=scene_saver.ebp;
}
ffff800000805396:	90                   	nop
ffff800000805397:	5d                   	pop    rbp
ffff800000805398:	c3                   	ret    

ffff800000805399 <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:431
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
ffff800000805399:	f3 0f 1e fa          	endbr64 
ffff80000080539d:	55                   	push   rbp
ffff80000080539e:	48 89 e5             	mov    rbp,rsp
ffff8000008053a1:	41 57                	push   r15
ffff8000008053a3:	53                   	push   rbx
ffff8000008053a4:	48 83 ec 60          	sub    rsp,0x60
ffff8000008053a8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008053a8 <palloc+0xf>
ffff8000008053af:	49 bb b0 87 11 00 00 	movabs r11,0x1187b0
ffff8000008053b6:	00 00 00 
ffff8000008053b9:	4c 01 db             	add    rbx,r11
ffff8000008053bc:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff8000008053bf:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:432
    int page_c=size/4096+size%4096?1:0;
ffff8000008053c2:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff8000008053c5:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008053cb:	85 c0                	test   eax,eax
ffff8000008053cd:	0f 48 c2             	cmovs  eax,edx
ffff8000008053d0:	c1 f8 0c             	sar    eax,0xc
ffff8000008053d3:	89 c1                	mov    ecx,eax
ffff8000008053d5:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff8000008053d8:	99                   	cdq    
ffff8000008053d9:	c1 ea 14             	shr    edx,0x14
ffff8000008053dc:	01 d0                	add    eax,edx
ffff8000008053de:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008053e3:	29 d0                	sub    eax,edx
ffff8000008053e5:	01 c8                	add    eax,ecx
ffff8000008053e7:	85 c0                	test   eax,eax
ffff8000008053e9:	0f 95 c0             	setne  al
ffff8000008053ec:	0f b6 c0             	movzx  eax,al
ffff8000008053ef:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433
    int c=0;
ffff8000008053f2:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434
    void *ptr=NULL;
ffff8000008053f9:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff800000805400:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:435
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
ffff800000805401:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000805408:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436
    pgind++;
ffff800000805409:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437
    for(int i=1;i<1024;i++)
ffff80000080540e:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
ffff800000805415:	e9 07 03 00 00       	jmp    ffff800000805721 <palloc+0x388>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:439
    {
        page_item* tblp=*pgind&0xfffff000;
ffff80000080541a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080541e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805421:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000805426:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440
        for(int j=0;j<1024;j++)
ffff80000080542a:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000805431:	e9 d5 02 00 00       	jmp    ffff80000080570b <palloc+0x372>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:442
        {
            int v=*tblp&PAGE_PRESENT;
ffff800000805436:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080543a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080543d:	83 e0 01             	and    eax,0x1
ffff800000805440:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:443
            if(!v)
ffff800000805443:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff800000805447:	0f 85 b5 02 00 00    	jne    ffff800000805702 <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:445
            {
                int new_pg=req_a_page();
ffff80000080544d:	49 89 df             	mov    r15,rbx
ffff800000805450:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805455:	48 ba c9 4e ee ff ff 	movabs rdx,0xffffffffffee4ec9
ffff80000080545c:	ff ff ff 
ffff80000080545f:	48 01 da             	add    rdx,rbx
ffff800000805462:	ff d2                	call   rdx
ffff800000805464:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
                if(new_pg==-1)
ffff800000805467:	83 7d b8 ff          	cmp    DWORD PTR [rbp-0x48],0xffffffff
ffff80000080546b:	0f 85 0c 01 00 00    	jne    ffff80000080557d <palloc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:449
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff800000805471:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805478:	ff ff ff 
ffff80000080547b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080547f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805482:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805485:	48 98                	cdqe   
ffff800000805487:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080548e:	48 01 d0             	add    rax,rdx
ffff800000805491:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000805498:	0f b7 c0             	movzx  eax,ax
ffff80000080549b:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:450
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff80000080549e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008054a5:	ff ff ff 
ffff8000008054a8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008054ac:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008054af:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008054b2:	48 98                	cdqe   
ffff8000008054b4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008054bb:	48 01 d0             	add    rax,rdx
ffff8000008054be:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008054c5:	0f b7 c0             	movzx  eax,ax
ffff8000008054c8:	c1 e0 10             	shl    eax,0x10
ffff8000008054cb:	25 00 00 0f 00       	and    eax,0xf0000
ffff8000008054d0:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:451
                    size+=c;
ffff8000008054d3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008054d6:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:452
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff8000008054d9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008054e0:	ff ff ff 
ffff8000008054e3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008054e7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008054ea:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008054ed:	48 98                	cdqe   
ffff8000008054ef:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008054f6:	48 01 d0             	add    rax,rdx
ffff8000008054f9:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
ffff8000008054fc:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:453
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff800000805503:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080550a:	ff ff ff 
ffff80000080550d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805511:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805514:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805517:	48 98                	cdqe   
ffff800000805519:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805520:	48 01 d0             	add    rax,rdx
ffff800000805523:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff80000080552a:	0f b7 c0             	movzx  eax,ax
ffff80000080552d:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:454
                    tmp_attr&=0xfff0;
ffff800000805530:	81 65 a0 f0 ff 00 00 	and    DWORD PTR [rbp-0x60],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:455
                    tmp_attr+=(size>>16)&0xf;
ffff800000805537:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080553a:	c1 e8 10             	shr    eax,0x10
ffff80000080553d:	83 e0 0f             	and    eax,0xf
ffff800000805540:	89 c2                	mov    edx,eax
ffff800000805542:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffff800000805545:	01 d0                	add    eax,edx
ffff800000805547:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:456
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff80000080554a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805551:	ff ff ff 
ffff800000805554:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805558:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080555b:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080555e:	48 98                	cdqe   
ffff800000805560:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805567:	48 01 d0             	add    rax,rdx
ffff80000080556a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
ffff80000080556d:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:457
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
ffff800000805574:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000805578:	e9 b6 01 00 00       	jmp    ffff800000805733 <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:459
                }
                int addr=get_phyaddr(new_pg);
ffff80000080557d:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff800000805580:	89 c7                	mov    edi,eax
ffff800000805582:	49 89 df             	mov    r15,rbx
ffff800000805585:	48 b8 b6 52 ee ff ff 	movabs rax,0xffffffffffee52b6
ffff80000080558c:	ff ff ff 
ffff80000080558f:	48 01 d8             	add    rax,rbx
ffff800000805592:	ff d0                	call   rax
ffff800000805594:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:460
                set_page_item(tblp,addr,PAGE_PRESENT|\
ffff800000805597:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
ffff80000080559a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080559e:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008055a3:	89 ce                	mov    esi,ecx
ffff8000008055a5:	48 89 c7             	mov    rdi,rax
ffff8000008055a8:	49 89 df             	mov    r15,rbx
ffff8000008055ab:	48 b8 ea 52 ee ff ff 	movabs rax,0xffffffffffee52ea
ffff8000008055b2:	ff ff ff 
ffff8000008055b5:	48 01 d8             	add    rax,rbx
ffff8000008055b8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:462
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
ffff8000008055ba:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008055bd:	c1 e0 0a             	shl    eax,0xa
ffff8000008055c0:	89 c2                	mov    edx,eax
ffff8000008055c2:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008055c5:	01 d0                	add    eax,edx
ffff8000008055c7:	c1 e0 0c             	shl    eax,0xc
ffff8000008055ca:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:463
                if(ptr==NULL)
ffff8000008055cd:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff8000008055d2:	75 13                	jne    ffff8000008055e7 <palloc+0x24e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:466
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
ffff8000008055d4:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff8000008055db:	ff ff ff 
ffff8000008055de:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055e2:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
ffff8000008055e5:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:468
                }
                page_c--;
ffff8000008055e7:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                c++;
ffff8000008055eb:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                if(page_c==0)
ffff8000008055ef:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008055f3:	0f 85 09 01 00 00    	jne    ffff800000805702 <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:473
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff8000008055f9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805600:	ff ff ff 
ffff800000805603:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805607:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080560a:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080560d:	48 98                	cdqe   
ffff80000080560f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805616:	48 01 d0             	add    rax,rdx
ffff800000805619:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000805620:	0f b7 c0             	movzx  eax,ax
ffff800000805623:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:474
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff800000805626:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080562d:	ff ff ff 
ffff800000805630:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805634:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805637:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080563a:	48 98                	cdqe   
ffff80000080563c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805643:	48 01 d0             	add    rax,rdx
ffff800000805646:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff80000080564d:	0f b7 c0             	movzx  eax,ax
ffff800000805650:	c1 e0 10             	shl    eax,0x10
ffff800000805653:	25 00 00 0f 00       	and    eax,0xf0000
ffff800000805658:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:475
                    size+=c;
ffff80000080565b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080565e:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:476
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff800000805661:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805668:	ff ff ff 
ffff80000080566b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080566f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805672:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805675:	48 98                	cdqe   
ffff800000805677:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080567e:	48 01 d0             	add    rax,rdx
ffff800000805681:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000805684:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:477
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff80000080568b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805692:	ff ff ff 
ffff800000805695:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805699:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080569c:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080569f:	48 98                	cdqe   
ffff8000008056a1:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008056a8:	48 01 d0             	add    rax,rdx
ffff8000008056ab:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008056b2:	0f b7 c0             	movzx  eax,ax
ffff8000008056b5:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:478
                    tmp_attr&=0xfff0;
ffff8000008056b8:	81 65 a8 f0 ff 00 00 	and    DWORD PTR [rbp-0x58],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:479
                    tmp_attr+=(size>>16)&0xf;
ffff8000008056bf:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff8000008056c2:	c1 e8 10             	shr    eax,0x10
ffff8000008056c5:	83 e0 0f             	and    eax,0xf
ffff8000008056c8:	89 c2                	mov    edx,eax
ffff8000008056ca:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
ffff8000008056cd:	01 d0                	add    eax,edx
ffff8000008056cf:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:480
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff8000008056d2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008056d9:	ff ff ff 
ffff8000008056dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008056e0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008056e3:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008056e6:	48 98                	cdqe   
ffff8000008056e8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008056ef:	48 01 d0             	add    rax,rdx
ffff8000008056f2:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffff8000008056f5:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:481
                    return ptr;
ffff8000008056fc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000805700:	eb 31                	jmp    ffff800000805733 <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:484 (discriminator 2)
                }
            }
            tblp++;
ffff800000805702:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440 (discriminator 2)
        for(int j=0;j<1024;j++)
ffff800000805707:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440 (discriminator 1)
ffff80000080570b:	81 7d cc ff 03 00 00 	cmp    DWORD PTR [rbp-0x34],0x3ff
ffff800000805712:	0f 8e 1e fd ff ff    	jle    ffff800000805436 <palloc+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:486 (discriminator 2)
        }
        pgind++;
ffff800000805718:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437 (discriminator 2)
    for(int i=1;i<1024;i++)
ffff80000080571d:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437 (discriminator 1)
ffff800000805721:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
ffff800000805728:	0f 8e ec fc ff ff    	jle    ffff80000080541a <palloc+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:488
    }
    return NULL;
ffff80000080572e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:489
}
ffff800000805733:	48 83 c4 60          	add    rsp,0x60
ffff800000805737:	5b                   	pop    rbx
ffff800000805738:	41 5f                	pop    r15
ffff80000080573a:	5d                   	pop    rbp
ffff80000080573b:	c3                   	ret    

ffff80000080573c <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:492
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
ffff80000080573c:	f3 0f 1e fa          	endbr64 
ffff800000805740:	55                   	push   rbp
ffff800000805741:	48 89 e5             	mov    rbp,rsp
ffff800000805744:	41 57                	push   r15
ffff800000805746:	48 83 ec 18          	sub    rsp,0x18
ffff80000080574a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080574a <malloc+0xe>
ffff800000805751:	49 bb 0e 84 11 00 00 	movabs r11,0x11840e
ffff800000805758:	00 00 00 
ffff80000080575b:	4c 01 d8             	add    rax,r11
ffff80000080575e:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:493
    return palloc(cur_proc,size);
ffff800000805761:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805768:	ff ff ff 
ffff80000080576b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080576f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805771:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff800000805774:	89 ce                	mov    esi,ecx
ffff800000805776:	89 d7                	mov    edi,edx
ffff800000805778:	49 89 c7             	mov    r15,rax
ffff80000080577b:	48 ba 41 78 ee ff ff 	movabs rdx,0xffffffffffee7841
ffff800000805782:	ff ff ff 
ffff800000805785:	48 01 c2             	add    rdx,rax
ffff800000805788:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:494
}
ffff80000080578a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080578e:	c9                   	leave  
ffff80000080578f:	c3                   	ret    

ffff800000805790 <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:496
void proc_end()
{
ffff800000805790:	f3 0f 1e fa          	endbr64 
ffff800000805794:	55                   	push   rbp
ffff800000805795:	48 89 e5             	mov    rbp,rsp
ffff800000805798:	41 57                	push   r15
ffff80000080579a:	53                   	push   rbx
ffff80000080579b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080579f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080579f <proc_end+0xf>
ffff8000008057a6:	49 bb b9 83 11 00 00 	movabs r11,0x1183b9
ffff8000008057ad:	00 00 00 
ffff8000008057b0:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:498
    int ret;
    asm volatile("mov %%eax,%0":"=m"(ret));
ffff8000008057b3:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:502
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //asm volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
ffff8000008057b6:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008057bd:	ff ff ff 
ffff8000008057c0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057c4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008057c6:	89 c7                	mov    edi,eax
ffff8000008057c8:	49 89 df             	mov    r15,rbx
ffff8000008057cb:	48 b8 7f 7d ee ff ff 	movabs rax,0xffffffffffee7d7f
ffff8000008057d2:	ff ff ff 
ffff8000008057d5:	48 01 d8             	add    rax,rbx
ffff8000008057d8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:503
    if(task[cur_proc].parent_pid!=-1){
ffff8000008057da:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008057e1:	ff ff ff 
ffff8000008057e4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057e8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008057eb:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008057f2:	ff ff ff 
ffff8000008057f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057f9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008057fb:	48 98                	cdqe   
ffff8000008057fd:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805804:	48 01 d0             	add    rax,rdx
ffff800000805807:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff80000080580d:	83 f8 ff             	cmp    eax,0xffffffff
ffff800000805810:	0f 84 a0 00 00 00    	je     ffff8000008058b6 <proc_end+0x126>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:504
        task[task[cur_proc].parent_pid].stat=TASK_READY;
ffff800000805816:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080581d:	ff ff ff 
ffff800000805820:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805824:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805827:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080582e:	ff ff ff 
ffff800000805831:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805835:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805838:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080583f:	ff ff ff 
ffff800000805842:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805846:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805848:	48 98                	cdqe   
ffff80000080584a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805851:	48 01 c8             	add    rax,rcx
ffff800000805854:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff80000080585a:	89 c0                	mov    eax,eax
ffff80000080585c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805863:	48 01 d0             	add    rax,rdx
ffff800000805866:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:505
        switch_proc_tss(task[cur_proc].parent_pid);
ffff80000080586d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805874:	ff ff ff 
ffff800000805877:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080587b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080587e:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000805885:	ff ff ff 
ffff800000805888:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080588c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080588e:	48 98                	cdqe   
ffff800000805890:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805897:	48 01 d0             	add    rax,rdx
ffff80000080589a:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff8000008058a0:	89 c7                	mov    edi,eax
ffff8000008058a2:	49 89 df             	mov    r15,rbx
ffff8000008058a5:	48 b8 94 76 ee ff ff 	movabs rax,0xffffffffffee7694
ffff8000008058ac:	ff ff ff 
ffff8000008058af:	48 01 d8             	add    rax,rbx
ffff8000008058b2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
ffff8000008058b4:	eb 17                	jmp    ffff8000008058cd <proc_end+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:508
        switch_proc_tss(0);
ffff8000008058b6:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008058bb:	49 89 df             	mov    r15,rbx
ffff8000008058be:	48 b8 94 76 ee ff ff 	movabs rax,0xffffffffffee7694
ffff8000008058c5:	ff ff ff 
ffff8000008058c8:	48 01 d8             	add    rax,rbx
ffff8000008058cb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
}
ffff8000008058cd:	90                   	nop
ffff8000008058ce:	48 83 c4 10          	add    rsp,0x10
ffff8000008058d2:	5b                   	pop    rbx
ffff8000008058d3:	41 5f                	pop    r15
ffff8000008058d5:	5d                   	pop    rbp
ffff8000008058d6:	c3                   	ret    

ffff8000008058d7 <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:512
void del_proc(int pnr)
{
ffff8000008058d7:	f3 0f 1e fa          	endbr64 
ffff8000008058db:	55                   	push   rbp
ffff8000008058dc:	48 89 e5             	mov    rbp,rsp
ffff8000008058df:	41 57                	push   r15
ffff8000008058e1:	53                   	push   rbx
ffff8000008058e2:	48 83 ec 20          	sub    rsp,0x20
ffff8000008058e6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008058e6 <del_proc+0xf>
ffff8000008058ed:	49 bb 72 82 11 00 00 	movabs r11,0x118272
ffff8000008058f4:	00 00 00 
ffff8000008058f7:	4c 01 db             	add    rbx,r11
ffff8000008058fa:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:513
    task[pnr].stat=TASK_ZOMBIE;
ffff8000008058fd:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805904:	ff ff ff 
ffff800000805907:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080590b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080590e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805911:	48 98                	cdqe   
ffff800000805913:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080591a:	48 01 d0             	add    rax,rdx
ffff80000080591d:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:516
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
ffff800000805924:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080592b:	ff ff ff 
ffff80000080592e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805932:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805935:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805938:	48 98                	cdqe   
ffff80000080593a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805941:	48 01 d0             	add    rax,rdx
ffff800000805944:	48 89 c7             	mov    rdi,rax
ffff800000805947:	49 89 df             	mov    r15,rbx
ffff80000080594a:	48 b8 61 94 ee ff ff 	movabs rax,0xffffffffffee9461
ffff800000805951:	ff ff ff 
ffff800000805954:	48 01 d8             	add    rax,rbx
ffff800000805957:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:518
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
ffff800000805959:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805960:	ff ff ff 
ffff800000805963:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805967:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080596a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080596d:	48 98                	cdqe   
ffff80000080596f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805976:	48 01 d0             	add    rax,rdx
ffff800000805979:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000805980:	48 89 c7             	mov    rdi,rax
ffff800000805983:	49 89 df             	mov    r15,rbx
ffff800000805986:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080598d:	ff ff ff 
ffff800000805990:	48 01 d8             	add    rax,rbx
ffff800000805993:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000805995:	c7 45 ec 03 00 00 00 	mov    DWORD PTR [rbp-0x14],0x3
ffff80000080599c:	eb 4f                	jmp    ffff8000008059ed <del_proc+0x116>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521
        if(task[pnr].openf[i]){
ffff80000080599e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008059a5:	ff ff ff 
ffff8000008059a8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008059ac:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008059af:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008059b2:	48 98                	cdqe   
ffff8000008059b4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008059bb:	48 01 d0             	add    rax,rdx
ffff8000008059be:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008059c1:	48 63 d2             	movsxd rdx,edx
ffff8000008059c4:	48 83 c2 1e          	add    rdx,0x1e
ffff8000008059c8:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff8000008059cd:	48 85 c0             	test   rax,rax
ffff8000008059d0:	74 17                	je     ffff8000008059e9 <del_proc+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
            sys_close(i);
ffff8000008059d2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008059d5:	89 c7                	mov    edi,eax
ffff8000008059d7:	49 89 df             	mov    r15,rbx
ffff8000008059da:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff8000008059e1:	ff ff ff 
ffff8000008059e4:	48 01 d8             	add    rax,rbx
ffff8000008059e7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff8000008059e9:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520 (discriminator 1)
ffff8000008059ed:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff8000008059f1:	7e ab                	jle    ffff80000080599e <del_proc+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:526
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
ffff8000008059f3:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008059fa:	ff ff ff 
ffff8000008059fd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805a01:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805a04:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805a07:	48 98                	cdqe   
ffff800000805a09:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805a10:	48 01 d0             	add    rax,rdx
ffff800000805a13:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000805a16:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805a1d:	ff ff ff 
ffff800000805a20:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805a24:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805a27:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805a2a:	48 98                	cdqe   
ffff800000805a2c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805a33:	48 01 c8             	add    rax,rcx
ffff800000805a36:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805a38:	39 c2                	cmp    edx,eax
ffff800000805a3a:	75 79                	jne    ffff800000805ab5 <del_proc+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:528
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
ffff800000805a3c:	ba 00 00 00 00       	mov    edx,0x0
ffff800000805a41:	be 02 00 00 00       	mov    esi,0x2
ffff800000805a46:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805a4b:	49 89 df             	mov    r15,rbx
ffff800000805a4e:	48 b8 ee a1 ee ff ff 	movabs rax,0xffffffffffeea1ee
ffff800000805a55:	ff ff ff 
ffff800000805a58:	48 01 d8             	add    rax,rbx
ffff800000805a5b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:529
        sys_close(0);
ffff800000805a5d:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805a62:	49 89 df             	mov    r15,rbx
ffff800000805a65:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff800000805a6c:	ff ff ff 
ffff800000805a6f:	48 01 d8             	add    rax,rbx
ffff800000805a72:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:530
        sys_close(1);
ffff800000805a74:	bf 01 00 00 00       	mov    edi,0x1
ffff800000805a79:	49 89 df             	mov    r15,rbx
ffff800000805a7c:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff800000805a83:	ff ff ff 
ffff800000805a86:	48 01 d8             	add    rax,rbx
ffff800000805a89:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:531
        sys_close(2);
ffff800000805a8b:	bf 02 00 00 00       	mov    edi,0x2
ffff800000805a90:	49 89 df             	mov    r15,rbx
ffff800000805a93:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff800000805a9a:	ff ff ff 
ffff800000805a9d:	48 01 d8             	add    rax,rbx
ffff800000805aa0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
ffff800000805aa2:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000805aa9:	eb 04                	jmp    ffff800000805aaf <del_proc+0x1d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533 (discriminator 3)
ffff800000805aab:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533 (discriminator 1)
ffff800000805aaf:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000805ab3:	7e f6                	jle    ffff800000805aab <del_proc+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
ffff800000805ab5:	90                   	nop
ffff800000805ab6:	48 83 c4 20          	add    rsp,0x20
ffff800000805aba:	5b                   	pop    rbx
ffff800000805abb:	41 5f                	pop    r15
ffff800000805abd:	5d                   	pop    rbp
ffff800000805abe:	c3                   	ret    

ffff800000805abf <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:546

int set_proc_stat(int pid,int stat)
{
ffff800000805abf:	f3 0f 1e fa          	endbr64 
ffff800000805ac3:	55                   	push   rbp
ffff800000805ac4:	48 89 e5             	mov    rbp,rsp
ffff800000805ac7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805ac7 <set_proc_stat+0x8>
ffff800000805ace:	49 bb 91 80 11 00 00 	movabs r11,0x118091
ffff800000805ad5:	00 00 00 
ffff800000805ad8:	4c 01 d8             	add    rax,r11
ffff800000805adb:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000805ade:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547
    if(pid==-1)return -1;
ffff800000805ae1:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000805ae5:	75 0a                	jne    ffff800000805af1 <set_proc_stat+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547 (discriminator 1)
ffff800000805ae7:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805aec:	e9 b9 00 00 00       	jmp    ffff800000805baa <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:548
    int i=0;
ffff800000805af1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549
    for(;task[i].pid!=pid;i++);
ffff800000805af8:	eb 04                	jmp    ffff800000805afe <set_proc_stat+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549 (discriminator 2)
ffff800000805afa:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549 (discriminator 1)
ffff800000805afe:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805b05:	ff ff ff 
ffff800000805b08:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b0c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805b0f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805b12:	48 63 d2             	movsxd rdx,edx
ffff800000805b15:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805b1c:	48 01 ca             	add    rdx,rcx
ffff800000805b1f:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805b21:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805b24:	39 d1                	cmp    ecx,edx
ffff800000805b26:	75 d2                	jne    ffff800000805afa <set_proc_stat+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550
    if(i==MAX_PROC_COUNT)return -1;
ffff800000805b28:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000805b2c:	75 07                	jne    ffff800000805b35 <set_proc_stat+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550 (discriminator 1)
ffff800000805b2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805b33:	eb 75                	jmp    ffff800000805baa <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:551
    task[i].stat=stat;
ffff800000805b35:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805b3c:	ff ff ff 
ffff800000805b3f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b43:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805b46:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805b49:	48 63 d2             	movsxd rdx,edx
ffff800000805b4c:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805b53:	48 01 d1             	add    rcx,rdx
ffff800000805b56:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805b59:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:553
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
ffff800000805b5c:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805b63:	ff ff ff 
ffff800000805b66:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b6a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805b6c:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000805b6f:	75 34                	jne    ffff800000805ba5 <set_proc_stat+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:554
        task[cur_proc].utime=MAX_UTIME;
ffff800000805b71:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805b78:	ff ff ff 
ffff800000805b7b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b7f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805b82:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805b89:	ff ff ff 
ffff800000805b8c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805b90:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805b92:	48 98                	cdqe   
ffff800000805b94:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805b9b:	48 01 c8             	add    rax,rcx
ffff800000805b9e:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:555
    return 0;
ffff800000805ba5:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:556
}
ffff800000805baa:	5d                   	pop    rbp
ffff800000805bab:	c3                   	ret    

ffff800000805bac <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:588
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
ffff800000805bac:	f3 0f 1e fa          	endbr64 
ffff800000805bb0:	55                   	push   rbp
ffff800000805bb1:	48 89 e5             	mov    rbp,rsp
ffff800000805bb4:	41 57                	push   r15
ffff800000805bb6:	53                   	push   rbx
ffff800000805bb7:	48 83 ec 10          	sub    rsp,0x10
ffff800000805bbb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805bbb <sys_exit+0xf>
ffff800000805bc2:	49 bb 9d 7f 11 00 00 	movabs r11,0x117f9d
ffff800000805bc9:	00 00 00 
ffff800000805bcc:	4c 01 db             	add    rbx,r11
ffff800000805bcf:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:589
    current->exit_code=code;
ffff800000805bd2:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000805bd9:	ff ff ff 
ffff800000805bdc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805be0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805be3:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805be6:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:590
    del_proc(cur_proc);
ffff800000805be9:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000805bf0:	ff ff ff 
ffff800000805bf3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805bf7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805bf9:	89 c7                	mov    edi,eax
ffff800000805bfb:	49 89 df             	mov    r15,rbx
ffff800000805bfe:	48 b8 7f 7d ee ff ff 	movabs rax,0xffffffffffee7d7f
ffff800000805c05:	ff ff ff 
ffff800000805c08:	48 01 d8             	add    rax,rbx
ffff800000805c0b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:592 (discriminator 1)
    while(1)
        manage_proc();
ffff800000805c0d:	49 89 df             	mov    r15,rbx
ffff800000805c10:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805c15:	48 ba d8 73 ee ff ff 	movabs rdx,0xffffffffffee73d8
ffff800000805c1c:	ff ff ff 
ffff800000805c1f:	48 01 da             	add    rdx,rbx
ffff800000805c22:	ff d2                	call   rdx
ffff800000805c24:	eb e7                	jmp    ffff800000805c0d <sys_exit+0x61>

ffff800000805c26 <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:648
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
ffff800000805c26:	f3 0f 1e fa          	endbr64 
ffff800000805c2a:	55                   	push   rbp
ffff800000805c2b:	48 89 e5             	mov    rbp,rsp
ffff800000805c2e:	41 57                	push   r15
ffff800000805c30:	41 54                	push   r12
ffff800000805c32:	53                   	push   rbx
ffff800000805c33:	48 83 ec 48          	sub    rsp,0x48
ffff800000805c37:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805c37 <reg_proc+0x11>
ffff800000805c3e:	49 bb 21 7f 11 00 00 	movabs r11,0x117f21
ffff800000805c45:	00 00 00 
ffff800000805c48:	4c 01 db             	add    rbx,r11
ffff800000805c4b:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000805c4f:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff800000805c53:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:650
    
    int i=req_proc();
ffff800000805c57:	49 89 df             	mov    r15,rbx
ffff800000805c5a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805c5f:	48 ba 4c 70 ee ff ff 	movabs rdx,0xffffffffffee704c
ffff800000805c66:	ff ff ff 
ffff800000805c69:	48 01 da             	add    rdx,rbx
ffff800000805c6c:	ff d2                	call   rdx
ffff800000805c6e:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651
    if(i==-1)return -1;
ffff800000805c71:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000805c75:	75 0a                	jne    ffff800000805c81 <reg_proc+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651 (discriminator 1)
ffff800000805c77:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805c7c:	e9 7e 02 00 00       	jmp    ffff800000805eff <reg_proc+0x2d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:654

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
ffff800000805c81:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000805c85:	48 83 ec 08          	sub    rsp,0x8
ffff800000805c89:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805c8c:	52                   	push   rdx
ffff800000805c8d:	6a 00                	push   0x0
ffff800000805c8f:	50                   	push   rax
ffff800000805c90:	6a 00                	push   0x0
ffff800000805c92:	6a 00                	push   0x0
ffff800000805c94:	6a 00                	push   0x0
ffff800000805c96:	68 00 f0 ff ff       	push   0xfffffffffffff000
ffff800000805c9b:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
ffff800000805ca2:	00 
ffff800000805ca3:	6a 28                	push   0x28
ffff800000805ca5:	6a 28                	push   0x28
ffff800000805ca7:	6a 28                	push   0x28
ffff800000805ca9:	6a 28                	push   0x28
ffff800000805cab:	41 b9 30 00 00 00    	mov    r9d,0x30
ffff800000805cb1:	41 b8 28 00 00 00    	mov    r8d,0x28
ffff800000805cb7:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000805cbc:	ba 00 00 00 00       	mov    edx,0x0
ffff800000805cc1:	be 00 00 00 00       	mov    esi,0x0
ffff800000805cc6:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805ccb:	49 89 df             	mov    r15,rbx
ffff800000805cce:	48 b8 9d 71 ee ff ff 	movabs rax,0xffffffffffee719d
ffff800000805cd5:	ff ff ff 
ffff800000805cd8:	48 01 d8             	add    rax,rbx
ffff800000805cdb:	ff d0                	call   rax
ffff800000805cdd:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:656
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc();
ffff800000805ce1:	49 89 df             	mov    r15,rbx
ffff800000805ce4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805ce9:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000805cf0:	ff ff ff 
ffff800000805cf3:	48 01 da             	add    rdx,rbx
ffff800000805cf6:	ff d2                	call   rdx
ffff800000805cf8:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805cff:	ff ff ff 
ffff800000805d02:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000805d06:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805d09:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805d0c:	48 63 d2             	movsxd rdx,edx
ffff800000805d0f:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805d16:	48 01 ca             	add    rdx,rcx
ffff800000805d19:	48 89 82 e0 00 00 00 	mov    QWORD PTR [rdx+0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:657
    task[i].pml4[0]= kmalloc();
ffff800000805d20:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805d27:	ff ff ff 
ffff800000805d2a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805d2e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805d31:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805d34:	48 98                	cdqe   
ffff800000805d36:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805d3d:	48 01 d0             	add    rax,rdx
ffff800000805d40:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000805d47:	49 89 df             	mov    r15,rbx
ffff800000805d4a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805d4f:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000805d56:	ff ff ff 
ffff800000805d59:	48 01 da             	add    rdx,rbx
ffff800000805d5c:	ff d2                	call   rdx
ffff800000805d5e:	49 89 04 24          	mov    QWORD PTR [r12],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:658
    unsigned long *pdpt=task[i].pml4;
ffff800000805d62:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805d69:	ff ff ff 
ffff800000805d6c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805d70:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805d73:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805d76:	48 98                	cdqe   
ffff800000805d78:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805d7f:	48 01 d0             	add    rax,rdx
ffff800000805d82:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000805d89:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:660
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
ffff800000805d8d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805d91:	ba 03 00 00 00       	mov    edx,0x3
ffff800000805d96:	be 00 00 00 00       	mov    esi,0x0
ffff800000805d9b:	48 89 c7             	mov    rdi,rax
ffff800000805d9e:	49 89 df             	mov    r15,rbx
ffff800000805da1:	48 b8 4f 53 ee ff ff 	movabs rax,0xffffffffffee534f
ffff800000805da8:	ff ff ff 
ffff800000805dab:	48 01 d8             	add    rax,rbx
ffff800000805dae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:663

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc();
ffff800000805db0:	49 89 df             	mov    r15,rbx
ffff800000805db3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805db8:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000805dbf:	ff ff ff 
ffff800000805dc2:	48 01 da             	add    rdx,rbx
ffff800000805dc5:	ff d2                	call   rdx
ffff800000805dc7:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:664
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
ffff800000805dcb:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805dcf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805dd3:	48 83 c0 18          	add    rax,0x18
ffff800000805dd7:	48 83 ca 07          	or     rdx,0x7
ffff800000805ddb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:665
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
ffff800000805dde:	49 89 df             	mov    r15,rbx
ffff800000805de1:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805de6:	48 ba c9 4e ee ff ff 	movabs rdx,0xffffffffffee4ec9
ffff800000805ded:	ff ff ff 
ffff800000805df0:	48 01 da             	add    rdx,rbx
ffff800000805df3:	ff d2                	call   rdx
ffff800000805df5:	89 c7                	mov    edi,eax
ffff800000805df7:	49 89 df             	mov    r15,rbx
ffff800000805dfa:	48 b8 b6 52 ee ff ff 	movabs rax,0xffffffffffee52b6
ffff800000805e01:	ff ff ff 
ffff800000805e04:	48 01 d8             	add    rax,rbx
ffff800000805e07:	ff d0                	call   rax
ffff800000805e09:	89 c1                	mov    ecx,eax
ffff800000805e0b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805e0f:	48 05 f8 0f 00 00    	add    rax,0xff8
ffff800000805e15:	ba 06 00 00 00       	mov    edx,0x6
ffff800000805e1a:	89 ce                	mov    esi,ecx
ffff800000805e1c:	48 89 c7             	mov    rdi,rax
ffff800000805e1f:	49 89 df             	mov    r15,rbx
ffff800000805e22:	48 b8 ba 53 ee ff ff 	movabs rax,0xffffffffffee53ba
ffff800000805e29:	ff ff ff 
ffff800000805e2c:	48 01 d8             	add    rax,rbx
ffff800000805e2f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:666
    task[i].regs.cr3=task[i].pml4;
ffff800000805e31:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805e38:	ff ff ff 
ffff800000805e3b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e3f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e42:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e45:	48 98                	cdqe   
ffff800000805e47:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805e4e:	48 01 d0             	add    rax,rdx
ffff800000805e51:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000805e58:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805e5f:	ff ff ff 
ffff800000805e62:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e66:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805e69:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e6c:	48 98                	cdqe   
ffff800000805e6e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805e75:	48 01 c8             	add    rax,rcx
ffff800000805e78:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:668

    task[i].stat=TASK_READY;
ffff800000805e7f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805e86:	ff ff ff 
ffff800000805e89:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e8d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e90:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e93:	48 98                	cdqe   
ffff800000805e95:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805e9c:	48 01 d0             	add    rax,rdx
ffff800000805e9f:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:669
    task[i].cwd=cwd;
ffff800000805ea6:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805ead:	ff ff ff 
ffff800000805eb0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805eb4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805eb7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805eba:	48 98                	cdqe   
ffff800000805ebc:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805ec3:	48 01 c2             	add    rdx,rax
ffff800000805ec6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000805eca:	48 89 82 e8 00 00 00 	mov    QWORD PTR [rdx+0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:670
    task[i].exef=exef;
ffff800000805ed1:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805ed8:	ff ff ff 
ffff800000805edb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805edf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805ee2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805ee5:	48 98                	cdqe   
ffff800000805ee7:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805eee:	48 01 c2             	add    rdx,rax
ffff800000805ef1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000805ef5:	48 89 82 f0 00 00 00 	mov    QWORD PTR [rdx+0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:672

    return i;
ffff800000805efc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:727
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
ffff800000805eff:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff800000805f03:	5b                   	pop    rbx
ffff800000805f04:	41 5c                	pop    r12
ffff800000805f06:	41 5f                	pop    r15
ffff800000805f08:	5d                   	pop    rbp
ffff800000805f09:	c3                   	ret    

ffff800000805f0a <sys_malloc>:
sys_malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:730

void * sys_malloc(size_t size)
{
ffff800000805f0a:	f3 0f 1e fa          	endbr64 
ffff800000805f0e:	55                   	push   rbp
ffff800000805f0f:	48 89 e5             	mov    rbp,rsp
ffff800000805f12:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805f12 <sys_malloc+0x8>
ffff800000805f19:	49 bb 46 7c 11 00 00 	movabs r11,0x117c46
ffff800000805f20:	00 00 00 
ffff800000805f23:	4c 01 d8             	add    rax,r11
ffff800000805f26:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747
    void *data=current->mem_struct.heap_top;
    current->mem_struct.heap_top=new_heaptop;
    return data; */
    

    int n=size/CHUNK_SIZE+size%CHUNK_SIZE?1:0;
ffff800000805f2a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805f2e:	48 89 d1             	mov    rcx,rdx
ffff800000805f31:	48 c1 e9 0c          	shr    rcx,0xc
ffff800000805f35:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805f39:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff800000805f3f:	48 01 ca             	add    rdx,rcx
ffff800000805f42:	48 85 d2             	test   rdx,rdx
ffff800000805f45:	0f 95 c2             	setne  dl
ffff800000805f48:	0f b6 d2             	movzx  edx,dl
ffff800000805f4b:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:748
    chunk_header *hp=(chunk_header*)task[cur_proc].mem_struct.heap_base;
ffff800000805f4e:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805f55:	ff ff ff 
ffff800000805f58:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f5c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805f5f:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805f66:	ff ff ff 
ffff800000805f69:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f6d:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805f6f:	48 63 d2             	movsxd rdx,edx
ffff800000805f72:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805f79:	48 01 ca             	add    rdx,rcx
ffff800000805f7c:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000805f80:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000805f84:	eb 0c                	jmp    ffff800000805f92 <sys_malloc+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:750
        hp=hp->next;
ffff800000805f86:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f8a:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000805f8e:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000805f92:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f96:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000805f9a:	48 85 d2             	test   rdx,rdx
ffff800000805f9d:	74 16                	je     ffff800000805fb5 <sys_malloc+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749 (discriminator 1)
ffff800000805f9f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805fa3:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff800000805fa6:	85 d2                	test   edx,edx
ffff800000805fa8:	75 0b                	jne    ffff800000805fb5 <sys_malloc+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749 (discriminator 2)
ffff800000805faa:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805fae:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805fb0:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000805fb3:	7e d1                	jle    ffff800000805f86 <sys_malloc+0x7c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:751
    if(hp->pgn<n)
ffff800000805fb5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805fb9:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805fbb:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000805fbe:	0f 8e b8 00 00 00    	jle    ffff80000080607c <sys_malloc+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:754
    {
        //上抬heap top
        if(task[cur_proc].mem_struct.heap_top+CHUNK_SIZE*n>=HEAP_MAXTOP)
ffff800000805fc4:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805fcb:	ff ff ff 
ffff800000805fce:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805fd2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805fd5:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805fdc:	ff ff ff 
ffff800000805fdf:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805fe3:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805fe5:	48 63 d2             	movsxd rdx,edx
ffff800000805fe8:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805fef:	48 01 ca             	add    rdx,rcx
ffff800000805ff2:	48 8b 4a 30          	mov    rcx,QWORD PTR [rdx+0x30]
ffff800000805ff6:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805ff9:	c1 e2 0c             	shl    edx,0xc
ffff800000805ffc:	48 63 d2             	movsxd rdx,edx
ffff800000805fff:	48 01 ca             	add    rdx,rcx
ffff800000806002:	48 81 fa ff ff ef 01 	cmp    rdx,0x1efffff
ffff800000806009:	76 0a                	jbe    ffff800000806015 <sys_malloc+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:757
        {
            //超过顶部
            return NULL;
ffff80000080600b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806010:	e9 e0 00 00 00       	jmp    ffff8000008060f5 <sys_malloc+0x1eb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:759
        }
        int needed=n-hp->pgn;
ffff800000806015:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806019:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080601b:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080601e:	29 ca                	sub    edx,ecx
ffff800000806020:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:760
        char* p=task[cur_proc].mem_struct.heap_top;
ffff800000806023:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080602a:	ff ff ff 
ffff80000080602d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806031:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806034:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080603b:	ff ff ff 
ffff80000080603e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000806042:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806044:	48 98                	cdqe   
ffff800000806046:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080604d:	48 01 c8             	add    rax,rcx
ffff800000806050:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000806054:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000806058:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080605f:	eb 13                	jmp    ffff800000806074 <sys_malloc+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:763 (discriminator 3)
        {
            *p=0;//触发缺页中断
ffff800000806061:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806065:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:764 (discriminator 3)
            p+=PAGE_SIZE;
ffff800000806068:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
ffff80000080606f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761 (discriminator 3)
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000806070:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761 (discriminator 1)
ffff800000806074:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806077:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
ffff80000080607a:	7c e5                	jl     ffff800000806061 <sys_malloc+0x157>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:767
        }
    }
    if(hp->pgn>n)
ffff80000080607c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806080:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806082:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
ffff800000806085:	7d 59                	jge    ffff8000008060e0 <sys_malloc+0x1d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:770
    {
        //在后面新建一个头
        char *p=hp;
ffff800000806087:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080608b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:771
        p+=(n+1)*CHUNK_SIZE;//算上存储头一个
ffff80000080608f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000806092:	83 c0 01             	add    eax,0x1
ffff800000806095:	c1 e0 0c             	shl    eax,0xc
ffff800000806098:	48 98                	cdqe   
ffff80000080609a:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
        chunk_header *np=p;
ffff80000080609e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008060a2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:773
        np->pgn=hp->pgn-n-1;
ffff8000008060a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060aa:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008060ac:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff8000008060af:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008060b2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008060b6:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:774
        np->next=hp->next;
ffff8000008060b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060bc:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008060c0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008060c4:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:775
        np->prev=hp;
ffff8000008060c8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008060cc:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008060d0:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:776
        hp->next=np;
ffff8000008060d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060d8:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008060dc:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:778
    }
    hp->alloc=1;//分配完毕
ffff8000008060e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060e4:	c7 40 04 01 00 00 00 	mov    DWORD PTR [rax+0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:779
    return (char*)hp+CHUNK_SIZE;//返回后边的第一个数据块地址
ffff8000008060eb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060ef:	48 05 00 10 00 00    	add    rax,0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:780
}
ffff8000008060f5:	5d                   	pop    rbp
ffff8000008060f6:	c3                   	ret    

ffff8000008060f7 <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:782
int sys_free(int ptr)
{
ffff8000008060f7:	f3 0f 1e fa          	endbr64 
ffff8000008060fb:	55                   	push   rbp
ffff8000008060fc:	48 89 e5             	mov    rbp,rsp
ffff8000008060ff:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008060ff <sys_free+0x8>
ffff800000806106:	49 bb 59 7a 11 00 00 	movabs r11,0x117a59
ffff80000080610d:	00 00 00 
ffff800000806110:	4c 01 d8             	add    rax,r11
ffff800000806113:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:783
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
ffff800000806116:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806119:	2d 00 10 00 00       	sub    eax,0x1000
ffff80000080611e:	48 98                	cdqe   
ffff800000806120:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:784
    hp->alloc=0;    //合并
ffff800000806124:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806128:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:786
    //向后合并
    chunk_header *p=hp->next;
ffff80000080612f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806133:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000806137:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
    while(p!=NULL)
ffff80000080613b:	eb 2e                	jmp    ffff80000080616b <sys_free+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:789
    {
        if(p->alloc==0)
ffff80000080613d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806141:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000806144:	85 c0                	test   eax,eax
ffff800000806146:	75 2c                	jne    ffff800000806174 <sys_free+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:791
        {
            hp->pgn+=p->pgn+1;//把区域合并
ffff800000806148:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080614c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080614e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806152:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806154:	83 c0 01             	add    eax,0x1
ffff800000806157:	01 c2                	add    edx,eax
ffff800000806159:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080615d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:794
        }else
            break;
        p=p->next;
ffff80000080615f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806163:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000806167:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
    while(p!=NULL)
ffff80000080616b:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000806170:	75 cb                	jne    ffff80000080613d <sys_free+0x46>
ffff800000806172:	eb 01                	jmp    ffff800000806175 <sys_free+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:793
            break;
ffff800000806174:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:797
    }
    //向前合并
    p=hp->prev;
ffff800000806175:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806179:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080617d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    while(p!=NULL)
ffff800000806181:	eb 2e                	jmp    ffff8000008061b1 <sys_free+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:800
    {
        if(p->alloc==0)
ffff800000806183:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806187:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080618a:	85 c0                	test   eax,eax
ffff80000080618c:	75 2c                	jne    ffff8000008061ba <sys_free+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:802
        {
            p->pgn+=hp->pgn+1;//把区域合并
ffff80000080618e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806192:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000806194:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806198:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080619a:	83 c0 01             	add    eax,0x1
ffff80000080619d:	01 c2                	add    edx,eax
ffff80000080619f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008061a3:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:805
        }else
            break;
        p=p->prev;
ffff8000008061a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008061a9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008061ad:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    while(p!=NULL)
ffff8000008061b1:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008061b6:	75 cb                	jne    ffff800000806183 <sys_free+0x8c>
ffff8000008061b8:	eb 01                	jmp    ffff8000008061bb <sys_free+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:804
            break;
ffff8000008061ba:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
    }
    //合并完成
    return 0;
ffff8000008061bb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:809
}
ffff8000008061c0:	5d                   	pop    rbp
ffff8000008061c1:	c3                   	ret    

ffff8000008061c2 <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:811

void switch_to(struct process *from, struct process *to) {
ffff8000008061c2:	f3 0f 1e fa          	endbr64 
ffff8000008061c6:	55                   	push   rbp
ffff8000008061c7:	48 89 e5             	mov    rbp,rsp
ffff8000008061ca:	53                   	push   rbx
ffff8000008061cb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008061cb <switch_to+0x9>
ffff8000008061d2:	49 bb 8d 79 11 00 00 	movabs r11,0x11798d
ffff8000008061d9:	00 00 00 
ffff8000008061dc:	4c 01 d8             	add    rax,r11
ffff8000008061df:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffff8000008061e3:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:812
    cur_proc=to-task;
ffff8000008061e7:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008061ee:	ff ff ff 
ffff8000008061f1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061f5:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008061f8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008061fc:	48 29 ca             	sub    rdx,rcx
ffff8000008061ff:	48 89 d1             	mov    rcx,rdx
ffff800000806202:	48 c1 f9 03          	sar    rcx,0x3
ffff800000806206:	48 ba 43 ac 28 8d 8f 	movabs rdx,0x77a04c8f8d28ac43
ffff80000080620d:	4c a0 77 
ffff800000806210:	48 0f af d1          	imul   rdx,rcx
ffff800000806214:	89 d1                	mov    ecx,edx
ffff800000806216:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080621d:	ff ff ff 
ffff800000806220:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806224:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:813
    current=&task[cur_proc];
ffff800000806226:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080622d:	ff ff ff 
ffff800000806230:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806234:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806237:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080623e:	ff ff ff 
ffff800000806241:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806245:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806247:	48 63 d2             	movsxd rdx,edx
ffff80000080624a:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000806251:	48 01 ca             	add    rdx,rcx
ffff800000806254:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff80000080625b:	ff ff ff 
ffff80000080625e:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000806262:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:815
    //cr3需要物理地址,regs.cr3里面填的就是物理地址
    asm volatile("mov %0,%%rax\n"
ffff800000806265:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806269:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
ffff800000806270:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:817
                 "mov %%rax,%%cr3\n":"=m"(to->regs.cr3));
    asm volatile("mov %%rsp,%0\r\n"
ffff800000806273:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
ffff800000806277:	4c 8b 55 f0          	mov    r10,QWORD PTR [rbp-0x10]
ffff80000080627b:	4c 8b 5d f0          	mov    r11,QWORD PTR [rbp-0x10]
ffff80000080627f:	48 8b 5d f0          	mov    rbx,QWORD PTR [rbp-0x10]
ffff800000806283:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806287:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080628b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080628f:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
ffff800000806293:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffff800000806297:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080629b:	49 89 a1 9c 02 00 00 	mov    QWORD PTR [r9+0x29c],rsp
ffff8000008062a2:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # ffff8000008062cd <done>
ffff8000008062a9:	49 89 82 6c 02 00 00 	mov    QWORD PTR [r10+0x26c],rax
ffff8000008062b0:	41 8c a3 dc 02 00 00 	mov    WORD PTR [r11+0x2dc],fs
ffff8000008062b7:	8c ab e4 02 00 00    	mov    WORD PTR [rbx+0x2e4],gs
ffff8000008062bd:	48 8b a1 9c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x29c]
ffff8000008062c4:	41 ff b0 6c 02 00 00 	push   QWORD PTR [r8+0x26c]
ffff8000008062cb:	eb 08                	jmp    ffff8000008062d5 <__switch_to>

ffff8000008062cd <done>:
ffff8000008062cd:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:831
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
ffff8000008062ce:	90                   	nop
ffff8000008062cf:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff8000008062d3:	c9                   	leave  
ffff8000008062d4:	c3                   	ret    

ffff8000008062d5 <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:832
void __switch_to(struct process *from, struct process *to) {
ffff8000008062d5:	f3 0f 1e fa          	endbr64 
ffff8000008062d9:	55                   	push   rbp
ffff8000008062da:	48 89 e5             	mov    rbp,rsp
ffff8000008062dd:	41 57                	push   r15
ffff8000008062df:	41 54                	push   r12
ffff8000008062e1:	53                   	push   rbx
ffff8000008062e2:	48 83 ec 18          	sub    rsp,0x18
ffff8000008062e6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008062e6 <__switch_to+0x11>
ffff8000008062ed:	49 bb 72 78 11 00 00 	movabs r11,0x117872
ffff8000008062f4:	00 00 00 
ffff8000008062f7:	4c 01 d8             	add    rax,r11
ffff8000008062fa:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008062fe:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:833
    set_tss(to->tss.rsp0,to->tss.rsp1,to->tss.rsp2,to->tss.ists[0],to->tss.ists[1],
ffff800000806302:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806306:	4c 8b 9a 4c 02 00 00 	mov    r11,QWORD PTR [rdx+0x24c]
ffff80000080630d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806311:	4c 8b 92 44 02 00 00 	mov    r10,QWORD PTR [rdx+0x244]
ffff800000806318:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080631c:	4c 8b 8a 3c 02 00 00 	mov    r9,QWORD PTR [rdx+0x23c]
ffff800000806323:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806327:	4c 8b 82 34 02 00 00 	mov    r8,QWORD PTR [rdx+0x234]
ffff80000080632e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806332:	4c 8b a2 2c 02 00 00 	mov    r12,QWORD PTR [rdx+0x22c]
ffff800000806339:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080633d:	48 8b 9a 24 02 00 00 	mov    rbx,QWORD PTR [rdx+0x224]
ffff800000806344:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806348:	48 8b 8a 1c 02 00 00 	mov    rcx,QWORD PTR [rdx+0x21c]
ffff80000080634f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806353:	48 8b 92 0c 02 00 00 	mov    rdx,QWORD PTR [rdx+0x20c]
ffff80000080635a:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080635e:	48 8b b6 04 02 00 00 	mov    rsi,QWORD PTR [rsi+0x204]
ffff800000806365:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffff800000806369:	48 8b bf fc 01 00 00 	mov    rdi,QWORD PTR [rdi+0x1fc]
ffff800000806370:	41 53                	push   r11
ffff800000806372:	41 52                	push   r10
ffff800000806374:	41 51                	push   r9
ffff800000806376:	41 50                	push   r8
ffff800000806378:	4d 89 e1             	mov    r9,r12
ffff80000080637b:	49 89 d8             	mov    r8,rbx
ffff80000080637e:	49 89 c7             	mov    r15,rax
ffff800000806381:	49 ba 72 88 ee ff ff 	movabs r10,0xffffffffffee8872
ffff800000806388:	ff ff ff 
ffff80000080638b:	49 01 c2             	add    r10,rax
ffff80000080638e:	41 ff d2             	call   r10
ffff800000806391:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:835
            to->tss.ists[2],to->tss.ists[3],to->tss.ists[4],to->tss.ists[5],to->tss.ists[6]);
    asm volatile("mov %%fs,%0\r\n"
ffff800000806395:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806399:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080639d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008063a1:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008063a5:	8c a0 dc 02 00 00    	mov    WORD PTR [rax+0x2dc],fs
ffff8000008063ab:	8c ae e4 02 00 00    	mov    WORD PTR [rsi+0x2e4],gs
ffff8000008063b1:	8e a2 dc 02 00 00    	mov    fs,WORD PTR [rdx+0x2dc]
ffff8000008063b7:	8e a9 e4 02 00 00    	mov    gs,WORD PTR [rcx+0x2e4]
ffff8000008063bd:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:841
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
ffff8000008063be:	90                   	nop
ffff8000008063bf:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff8000008063c3:	5b                   	pop    rbx
ffff8000008063c4:	41 5c                	pop    r12
ffff8000008063c6:	41 5f                	pop    r15
ffff8000008063c8:	5d                   	pop    rbp
ffff8000008063c9:	c3                   	ret    

ffff8000008063ca <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:843

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
ffff8000008063ca:	f3 0f 1e fa          	endbr64 
ffff8000008063ce:	55                   	push   rbp
ffff8000008063cf:	48 89 e5             	mov    rbp,rsp
ffff8000008063d2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008063d2 <set_tss+0x8>
ffff8000008063d9:	49 bb 86 77 11 00 00 	movabs r11,0x117786
ffff8000008063e0:	00 00 00 
ffff8000008063e3:	4c 01 d8             	add    rax,r11
ffff8000008063e6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008063ea:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008063ee:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008063f2:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff8000008063f6:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffff8000008063fa:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:844
    tss->rsp0=rsp0;
ffff8000008063fe:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806405:	ff ff ff 
ffff800000806408:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080640c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080640f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000806413:	48 89 4a 04          	mov    QWORD PTR [rdx+0x4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:845
    tss->rsp1=rsp1;
ffff800000806417:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff80000080641e:	ff ff ff 
ffff800000806421:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806425:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806428:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080642c:	48 89 4a 0c          	mov    QWORD PTR [rdx+0xc],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:846
    tss->rsp2=rsp2;
ffff800000806430:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806437:	ff ff ff 
ffff80000080643a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080643e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806441:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000806445:	48 89 4a 14          	mov    QWORD PTR [rdx+0x14],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847
    tss->ists[0]=ist0;
ffff800000806449:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806450:	ff ff ff 
ffff800000806453:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806457:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080645a:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080645e:	48 89 4a 24          	mov    QWORD PTR [rdx+0x24],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:848
    tss->ists[1]=ist1;
ffff800000806462:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806469:	ff ff ff 
ffff80000080646c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806470:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806473:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000806477:	48 89 4a 2c          	mov    QWORD PTR [rdx+0x2c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849
    tss->ists[2]=ist2;
ffff80000080647b:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806482:	ff ff ff 
ffff800000806485:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806489:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080648c:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000806490:	48 89 4a 34          	mov    QWORD PTR [rdx+0x34],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850
    tss->ists[3]=ist3;
ffff800000806494:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff80000080649b:	ff ff ff 
ffff80000080649e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008064a2:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008064a5:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff8000008064a9:	48 89 4a 3c          	mov    QWORD PTR [rdx+0x3c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:851
    tss->ists[4]=ist4;
ffff8000008064ad:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008064b4:	ff ff ff 
ffff8000008064b7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008064bb:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008064be:	48 8b 4d 18          	mov    rcx,QWORD PTR [rbp+0x18]
ffff8000008064c2:	48 89 4a 44          	mov    QWORD PTR [rdx+0x44],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852
    tss->ists[5]=ist5;
ffff8000008064c6:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008064cd:	ff ff ff 
ffff8000008064d0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008064d4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008064d7:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff8000008064db:	48 89 4a 4c          	mov    QWORD PTR [rdx+0x4c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:853
    tss->ists[6]=ist6;
ffff8000008064df:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008064e6:	ff ff ff 
ffff8000008064e9:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008064ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008064f0:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff8000008064f4:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:854
}
ffff8000008064f8:	90                   	nop
ffff8000008064f9:	5d                   	pop    rbp
ffff8000008064fa:	c3                   	ret    

ffff8000008064fb <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:856

int fork_child_ret(){
ffff8000008064fb:	f3 0f 1e fa          	endbr64 
ffff8000008064ff:	55                   	push   rbp
ffff800000806500:	48 89 e5             	mov    rbp,rsp
ffff800000806503:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806503 <fork_child_ret+0x8>
ffff80000080650a:	49 bb 55 76 11 00 00 	movabs r11,0x117655
ffff800000806511:	00 00 00 
ffff800000806514:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:857
    return 0;
ffff800000806517:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:859

}
ffff80000080651c:	5d                   	pop    rbp
ffff80000080651d:	c3                   	ret    

ffff80000080651e <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:861

int sys_fork(void){
ffff80000080651e:	f3 0f 1e fa          	endbr64 
ffff800000806522:	55                   	push   rbp
ffff800000806523:	48 89 e5             	mov    rbp,rsp
ffff800000806526:	41 57                	push   r15
ffff800000806528:	53                   	push   rbx
ffff800000806529:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff800000806530:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806530 <sys_fork+0x12>
ffff800000806537:	49 bb 28 76 11 00 00 	movabs r11,0x117628
ffff80000080653e:	00 00 00 
ffff800000806541:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:862
    cli();
ffff800000806544:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863
    int pid=req_proc();
ffff800000806545:	49 89 df             	mov    r15,rbx
ffff800000806548:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080654d:	48 ba 4c 70 ee ff ff 	movabs rdx,0xffffffffffee704c
ffff800000806554:	ff ff ff 
ffff800000806557:	48 01 da             	add    rdx,rbx
ffff80000080655a:	ff d2                	call   rdx
ffff80000080655c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:864
    int pids=task[pid].pid;
ffff80000080655f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806566:	ff ff ff 
ffff800000806569:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080656d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806570:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806573:	48 98                	cdqe   
ffff800000806575:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080657c:	48 01 d0             	add    rax,rdx
ffff80000080657f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806581:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865
    if(pid==-1)return -1;
ffff800000806584:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000806588:	75 0a                	jne    ffff800000806594 <sys_fork+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865 (discriminator 1)
ffff80000080658a:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080658f:	e9 19 0a 00 00       	jmp    ffff800000806fad <sys_fork+0xa8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:867
    //首先完全复制
    task[pid]=*current;
ffff800000806594:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080659b:	ff ff ff 
ffff80000080659e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008065a2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008065a5:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008065ac:	ff ff ff 
ffff8000008065af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008065b3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008065b6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008065b9:	48 98                	cdqe   
ffff8000008065bb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008065c2:	48 01 d0             	add    rax,rdx
ffff8000008065c5:	48 89 c2             	mov    rdx,rax
ffff8000008065c8:	48 89 c8             	mov    rax,rcx
ffff8000008065cb:	b9 58 03 00 00       	mov    ecx,0x358
ffff8000008065d0:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008065d3:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff8000008065d6:	89 ce                	mov    esi,ecx
ffff8000008065d8:	48 01 d6             	add    rsi,rdx
ffff8000008065db:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
ffff8000008065df:	89 ce                	mov    esi,ecx
ffff8000008065e1:	48 01 c6             	add    rsi,rax
ffff8000008065e4:	48 83 c6 08          	add    rsi,0x8
ffff8000008065e8:	48 8b 76 f0          	mov    rsi,QWORD PTR [rsi-0x10]
ffff8000008065ec:	48 89 77 f0          	mov    QWORD PTR [rdi-0x10],rsi
ffff8000008065f0:	48 8d 7a 08          	lea    rdi,[rdx+0x8]
ffff8000008065f4:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
ffff8000008065f8:	48 29 fa             	sub    rdx,rdi
ffff8000008065fb:	48 29 d0             	sub    rax,rdx
ffff8000008065fe:	01 d1                	add    ecx,edx
ffff800000806600:	83 e1 f8             	and    ecx,0xfffffff8
ffff800000806603:	c1 e9 03             	shr    ecx,0x3
ffff800000806606:	89 ca                	mov    edx,ecx
ffff800000806608:	89 d2                	mov    edx,edx
ffff80000080660a:	48 89 c6             	mov    rsi,rax
ffff80000080660d:	48 89 d1             	mov    rcx,rdx
ffff800000806610:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:868
    task[pid].pid=pids;
ffff800000806613:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080661a:	ff ff ff 
ffff80000080661d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806621:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806624:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806627:	48 98                	cdqe   
ffff800000806629:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806630:	48 01 c2             	add    rdx,rax
ffff800000806633:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000806636:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:869
    task[pid].stat=TASK_ZOMBIE;
ffff800000806638:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080663f:	ff ff ff 
ffff800000806642:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806646:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806649:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080664c:	48 98                	cdqe   
ffff80000080664e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806655:	48 01 d0             	add    rax,rdx
ffff800000806658:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:876

//    asm volatile("mov %%r10,%0"::"m"(r->rip));
    // r->rip=current->regs.rip;

    // memcpy(&task[pid].tss,tss, sizeof(TSS));
    task[pid].parent_pid=current->pid;
ffff80000080665f:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806666:	ff ff ff 
ffff800000806669:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080666d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806670:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000806677:	ff ff ff 
ffff80000080667a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080667e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806681:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000806684:	48 63 d2             	movsxd rdx,edx
ffff800000806687:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080668e:	48 01 ca             	add    rdx,rcx
ffff800000806691:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806693:	89 82 bc 00 00 00    	mov    DWORD PTR [rdx+0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:878
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
ffff800000806699:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008066a0:	ff ff ff 
ffff8000008066a3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066a7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008066aa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008066ad:	48 98                	cdqe   
ffff8000008066af:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008066b6:	48 01 d0             	add    rax,rdx
ffff8000008066b9:	48 05 34 03 00 00    	add    rax,0x334
ffff8000008066bf:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008066c3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008066c7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008066ce:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008066d2:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008066d9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008066da:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:879
    task[pid].child_procs=NULL;
ffff8000008066db:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008066e2:	ff ff ff 
ffff8000008066e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066e9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008066ec:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008066ef:	48 98                	cdqe   
ffff8000008066f1:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008066f8:	48 01 d0             	add    rax,rdx
ffff8000008066fb:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000806702:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:880
    task[pid].node.data=&task[pid];
ffff800000806706:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080670d:	ff ff ff 
ffff800000806710:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806714:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806717:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080671a:	48 98                	cdqe   
ffff80000080671c:	48 69 d0 58 03 00 00 	imul   rdx,rax,0x358
ffff800000806723:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080672a:	ff ff ff 
ffff80000080672d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806731:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000806734:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806737:	48 98                	cdqe   
ffff800000806739:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806740:	48 01 f0             	add    rax,rsi
ffff800000806743:	48 01 ca             	add    rdx,rcx
ffff800000806746:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881
    if(!current->child_procs)
ffff80000080674d:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806754:	ff ff ff 
ffff800000806757:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080675b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080675e:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000806765:	48 85 c0             	test   rax,rax
ffff800000806768:	75 44                	jne    ffff8000008067ae <sys_fork+0x290>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:882
        current->child_procs=&task[pid].node;
ffff80000080676a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806771:	ff ff ff 
ffff800000806774:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806778:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080677b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080677e:	48 98                	cdqe   
ffff800000806780:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806787:	48 01 c2             	add    rdx,rax
ffff80000080678a:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806791:	ff ff ff 
ffff800000806794:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806798:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080679b:	48 81 c2 34 03 00 00 	add    rdx,0x334
ffff8000008067a2:	48 89 90 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],rdx
ffff8000008067a9:	e9 71 01 00 00       	jmp    ffff80000080691f <sys_fork+0x401>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:884
    else
        list_add(current->child_procs,&task[pid].node);
ffff8000008067ae:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008067b5:	ff ff ff 
ffff8000008067b8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008067bc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008067bf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008067c2:	48 98                	cdqe   
ffff8000008067c4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008067cb:	48 01 d0             	add    rax,rdx
ffff8000008067ce:	48 8d 90 34 03 00 00 	lea    rdx,[rax+0x334]
ffff8000008067d5:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008067dc:	ff ff ff 
ffff8000008067df:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008067e3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008067e6:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff8000008067ed:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff8000008067f1:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff8000008067f5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008067f9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008067fd:	48 85 c0             	test   rax,rax
ffff800000806800:	75 50                	jne    ffff800000806852 <sys_fork+0x334>
ffff800000806802:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000806806:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080680a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080680e:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000806812:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000806816:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080681a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080681e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000806822:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000806826:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080682a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080682d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000806831:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806835:	48 85 c0             	test   rax,rax
ffff800000806838:	0f 84 da 00 00 00    	je     ffff800000806918 <sys_fork+0x3fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080683e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000806842:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806846:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080684a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080684d:	e9 c6 00 00 00       	jmp    ffff800000806918 <sys_fork+0x3fa>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff800000806852:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000806856:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080685d:	eb 2e                	jmp    ffff80000080688d <sys_fork+0x36f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080685f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806866:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080686a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080686e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000806872:	48 39 c2             	cmp    rdx,rax
ffff800000806875:	0f 84 a0 00 00 00    	je     ffff80000080691b <sys_fork+0x3fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080687b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806882:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806886:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff80000080688d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806894:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806898:	48 85 c0             	test   rax,rax
ffff80000080689b:	74 14                	je     ffff8000008068b1 <sys_fork+0x393>
ffff80000080689d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008068a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008068a8:	48 39 85 78 ff ff ff 	cmp    QWORD PTR [rbp-0x88],rax
ffff8000008068af:	75 ae                	jne    ffff80000080685f <sys_fork+0x341>
ffff8000008068b1:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008068b8:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffff8000008068bf:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008068c3:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008068ca:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008068d1:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008068d5:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008068dc:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008068e0:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008068e7:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff8000008068ee:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008068f1:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008068f8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008068fc:	48 85 c0             	test   rax,rax
ffff8000008068ff:	74 1d                	je     ffff80000080691e <sys_fork+0x400>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000806901:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000806908:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080690c:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff800000806913:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000806916:	eb 06                	jmp    ffff80000080691e <sys_fork+0x400>
ffff800000806918:	90                   	nop
ffff800000806919:	eb 04                	jmp    ffff80000080691f <sys_fork+0x401>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080691b:	90                   	nop
ffff80000080691c:	eb 01                	jmp    ffff80000080691f <sys_fork+0x401>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080691e:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:886

    task[pid].utime=0;
ffff80000080691f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806926:	ff ff ff 
ffff800000806929:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080692d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806930:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806933:	48 98                	cdqe   
ffff800000806935:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080693c:	48 01 d0             	add    rax,rdx
ffff80000080693f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889

    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
ffff800000806946:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080694d:	ff ff ff 
ffff800000806950:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806954:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806957:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080695a:	48 98                	cdqe   
ffff80000080695c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806963:	48 01 c2             	add    rdx,rax
ffff800000806966:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080696d:	ff ff ff 
ffff800000806970:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806974:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806977:	48 89 d6             	mov    rsi,rdx
ffff80000080697a:	48 89 c7             	mov    rdi,rax
ffff80000080697d:	49 89 df             	mov    r15,rbx
ffff800000806980:	48 b8 03 98 ee ff ff 	movabs rax,0xffffffffffee9803
ffff800000806987:	ff ff ff 
ffff80000080698a:	48 01 d8             	add    rax,rbx
ffff80000080698d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:894
    
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff80000080698f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806996:	ff ff ff 
ffff800000806999:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080699d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008069a0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008069a3:	48 98                	cdqe   
ffff8000008069a5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008069ac:	48 01 d0             	add    rax,rdx
ffff8000008069af:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008069b3:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff8000008069b9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:895
    addr_t tmpla=KNL_BASE+0x80000000;
ffff8000008069bd:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff8000008069c4:	80 ff ff 
ffff8000008069c7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff8000008069cb:	e9 d1 00 00 00       	jmp    ffff800000806aa1 <sys_fork+0x583>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897 (discriminator 2)
        addr_t new_stkpg= pmalloc();
ffff8000008069d0:	49 89 df             	mov    r15,rbx
ffff8000008069d3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008069d8:	48 ba 8c 50 ee ff ff 	movabs rdx,0xffffffffffee508c
ffff8000008069df:	ff ff ff 
ffff8000008069e2:	48 01 da             	add    rdx,rbx
ffff8000008069e5:	ff d2                	call   rdx
ffff8000008069e7:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:898 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff8000008069eb:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008069f2:	ff ff ff 
ffff8000008069f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008069f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008069fc:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806a03:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806a07:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806a0b:	48 89 d1             	mov    rcx,rdx
ffff800000806a0e:	ba 03 00 00 00       	mov    edx,0x3
ffff800000806a13:	48 89 c7             	mov    rdi,rax
ffff800000806a16:	49 89 df             	mov    r15,rbx
ffff800000806a19:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff800000806a20:	ff ff ff 
ffff800000806a23:	48 01 d8             	add    rax,rbx
ffff800000806a26:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:899 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806a28:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000806a2c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806a30:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806a35:	48 89 ce             	mov    rsi,rcx
ffff800000806a38:	48 89 c7             	mov    rdi,rax
ffff800000806a3b:	49 89 df             	mov    r15,rbx
ffff800000806a3e:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000806a45:	ff ff ff 
ffff800000806a48:	48 01 d8             	add    rax,rbx
ffff800000806a4b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:902 (discriminator 2)
        
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806a4d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806a54:	ff ff ff 
ffff800000806a57:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a5b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a5e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a61:	48 98                	cdqe   
ffff800000806a63:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a6a:	48 01 d0             	add    rax,rdx
ffff800000806a6d:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806a74:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806a78:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806a7c:	48 89 d1             	mov    rcx,rdx
ffff800000806a7f:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806a84:	48 89 c7             	mov    rdi,rax
ffff800000806a87:	49 89 df             	mov    r15,rbx
ffff800000806a8a:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff800000806a91:	ff ff ff 
ffff800000806a94:	48 01 d8             	add    rax,rbx
ffff800000806a97:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000806a99:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
ffff800000806aa0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896 (discriminator 1)
ffff800000806aa1:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806aa8:	ff ff ff 
ffff800000806aab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806aaf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806ab2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ab5:	48 98                	cdqe   
ffff800000806ab7:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806abe:	48 01 d0             	add    rax,rdx
ffff800000806ac1:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000806ac5:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff800000806ac9:	0f 83 01 ff ff ff    	jae    ffff8000008069d0 <sys_fork+0x4b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:904
    }
    if(task[pid].mem_struct.stack_top<=task[pid].mem_struct.stack_bottom){
ffff800000806acf:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806ad6:	ff ff ff 
ffff800000806ad9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806add:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806ae0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ae3:	48 98                	cdqe   
ffff800000806ae5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806aec:	48 01 d0             	add    rax,rdx
ffff800000806aef:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff800000806af3:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806afa:	ff ff ff 
ffff800000806afd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b01:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806b04:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b07:	48 98                	cdqe   
ffff800000806b09:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806b10:	48 01 c8             	add    rax,rcx
ffff800000806b13:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000806b17:	48 39 c2             	cmp    rdx,rax
ffff800000806b1a:	0f 87 bd 00 00 00    	ja     ffff800000806bdd <sys_fork+0x6bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:907
        //父进程没有栈空间（一般是不可能的，这个几乎就是为了内核进程fork而写）
        //开辟一页空栈。
        addr_t new_stkpg= (addr_t) pmalloc();
ffff800000806b20:	49 89 df             	mov    r15,rbx
ffff800000806b23:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806b28:	48 ba 8c 50 ee ff ff 	movabs rdx,0xffffffffffee508c
ffff800000806b2f:	ff ff ff 
ffff800000806b32:	48 01 da             	add    rdx,rbx
ffff800000806b35:	ff d2                	call   rdx
ffff800000806b37:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:908
        stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000806b3b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806b42:	ff ff ff 
ffff800000806b45:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b49:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b4c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b4f:	48 98                	cdqe   
ffff800000806b51:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806b58:	48 01 d0             	add    rax,rdx
ffff800000806b5b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000806b5f:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806b65:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:910
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806b69:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806b70:	ff ff ff 
ffff800000806b73:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b77:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b7a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b7d:	48 98                	cdqe   
ffff800000806b7f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806b86:	48 01 d0             	add    rax,rdx
ffff800000806b89:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806b90:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806b94:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806b98:	48 89 d1             	mov    rcx,rdx
ffff800000806b9b:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806ba0:	48 89 c7             	mov    rdi,rax
ffff800000806ba3:	49 89 df             	mov    r15,rbx
ffff800000806ba6:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff800000806bad:	ff ff ff 
ffff800000806bb0:	48 01 d8             	add    rax,rbx
ffff800000806bb3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:912
        //给新进程分配一页栈
        task[pid].mem_struct.stack_bottom=stk;
ffff800000806bb5:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806bbc:	ff ff ff 
ffff800000806bbf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806bc3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806bc6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806bc9:	48 98                	cdqe   
ffff800000806bcb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806bd2:	48 01 c2             	add    rdx,rax
ffff800000806bd5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806bd9:	48 89 42 38          	mov    QWORD PTR [rdx+0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918
        //给这页新的栈填上恢复上下文需要的内容
        
    }
    //中断使用的栈空间
    //ist一页就够
    addr_t new_stkpg= kmalloc();
ffff800000806bdd:	49 89 df             	mov    r15,rbx
ffff800000806be0:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806be5:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000806bec:	ff ff ff 
ffff800000806bef:	48 01 da             	add    rdx,rbx
ffff800000806bf2:	ff d2                	call   rdx
ffff800000806bf4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919
    memcpy(new_stkpg,current->tss.ists[0]-PAGE_4K_SIZE,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806bf8:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806bff:	ff ff ff 
ffff800000806c02:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c06:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806c09:	48 8b 80 1c 02 00 00 	mov    rax,QWORD PTR [rax+0x21c]
ffff800000806c10:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806c16:	48 89 c1             	mov    rcx,rax
ffff800000806c19:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806c1d:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806c22:	48 89 ce             	mov    rsi,rcx
ffff800000806c25:	48 89 c7             	mov    rdi,rax
ffff800000806c28:	49 89 df             	mov    r15,rbx
ffff800000806c2b:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000806c32:	ff ff ff 
ffff800000806c35:	48 01 d8             	add    rax,rbx
ffff800000806c38:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920
    stack_store_regs* ctx_dup=new_stkpg+PAGE_4K_SIZE-sizeof(stack_store_regs);//拷贝的上下文
ffff800000806c3a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806c3e:	48 05 58 0f 00 00    	add    rax,0xf58
ffff800000806c44:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:921
    ctx_dup->rax=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
ffff800000806c48:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806c4c:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000806c53:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922
    task[pid].regs.rip=clock_ret;
ffff800000806c54:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806c5b:	ff ff ff 
ffff800000806c5e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c62:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c65:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c68:	48 98                	cdqe   
ffff800000806c6a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c71:	48 01 d0             	add    rax,rdx
ffff800000806c74:	48 ba c8 ff ff ff ff 	movabs rdx,0xffffffffffffffc8
ffff800000806c7b:	ff ff ff 
ffff800000806c7e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806c82:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:923
    task[pid].regs.rsp=ctx_dup;
ffff800000806c89:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806c90:	ff ff ff 
ffff800000806c93:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c97:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c9a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c9d:	48 98                	cdqe   
ffff800000806c9f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806ca6:	48 01 c2             	add    rdx,rax
ffff800000806ca9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806cad:	48 89 82 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:924
    task[pid].tss.ists[0]=new_stkpg+PAGE_4K_SIZE;
ffff800000806cb4:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806cbb:	ff ff ff 
ffff800000806cbe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806cc2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806cc5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806cc8:	48 98                	cdqe   
ffff800000806cca:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806cd1:	48 01 d0             	add    rax,rdx
ffff800000806cd4:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806cd8:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806cdf:	48 89 90 1c 02 00 00 	mov    QWORD PTR [rax+0x21c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:925
    task[pid].tss.ists[1]=new_stkpg+PAGE_4K_SIZE;
ffff800000806ce6:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806ced:	ff ff ff 
ffff800000806cf0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806cf4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806cf7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806cfa:	48 98                	cdqe   
ffff800000806cfc:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806d03:	48 01 d0             	add    rax,rdx
ffff800000806d06:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806d0a:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806d11:	48 89 90 24 02 00 00 	mov    QWORD PTR [rax+0x224],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:926
    task[pid].tss.ists[2]=new_stkpg+PAGE_4K_SIZE;
ffff800000806d18:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806d1f:	ff ff ff 
ffff800000806d22:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d26:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d29:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d2c:	48 98                	cdqe   
ffff800000806d2e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806d35:	48 01 d0             	add    rax,rdx
ffff800000806d38:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806d3c:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806d43:	48 89 90 2c 02 00 00 	mov    QWORD PTR [rax+0x22c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:927
    task[pid].tss.ists[3]=new_stkpg+PAGE_4K_SIZE;
ffff800000806d4a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806d51:	ff ff ff 
ffff800000806d54:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d58:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d5b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d5e:	48 98                	cdqe   
ffff800000806d60:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806d67:	48 01 d0             	add    rax,rdx
ffff800000806d6a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806d6e:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806d75:	48 89 90 34 02 00 00 	mov    QWORD PTR [rax+0x234],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:928
    task[pid].tss.ists[4]=new_stkpg+PAGE_4K_SIZE;
ffff800000806d7c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806d83:	ff ff ff 
ffff800000806d86:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d8a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d8d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d90:	48 98                	cdqe   
ffff800000806d92:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806d99:	48 01 d0             	add    rax,rdx
ffff800000806d9c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806da0:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806da7:	48 89 90 3c 02 00 00 	mov    QWORD PTR [rax+0x23c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929
    task[pid].tss.ists[5]=new_stkpg+PAGE_4K_SIZE;
ffff800000806dae:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806db5:	ff ff ff 
ffff800000806db8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806dbc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806dbf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806dc2:	48 98                	cdqe   
ffff800000806dc4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806dcb:	48 01 d0             	add    rax,rdx
ffff800000806dce:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806dd2:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806dd9:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:930
    task[pid].tss.ists[6]=new_stkpg+PAGE_4K_SIZE;
ffff800000806de0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806de7:	ff ff ff 
ffff800000806dea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806dee:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806df1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806df4:	48 98                	cdqe   
ffff800000806df6:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806dfd:	48 01 d0             	add    rax,rdx
ffff800000806e00:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806e04:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806e0b:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:933

    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
ffff800000806e12:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806e19:	ff ff ff 
ffff800000806e1c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e20:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806e23:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806e26:	48 98                	cdqe   
ffff800000806e28:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806e2f:	48 01 d0             	add    rax,rdx
ffff800000806e32:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000806e36:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806e3c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000806e40:	e9 d1 00 00 00       	jmp    ffff800000806f16 <sys_fork+0x9f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:935 (discriminator 2)
        addr_t new_hppg= pmalloc();
ffff800000806e45:	49 89 df             	mov    r15,rbx
ffff800000806e48:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806e4d:	48 ba 8c 50 ee ff ff 	movabs rdx,0xffffffffffee508c
ffff800000806e54:	ff ff ff 
ffff800000806e57:	48 01 da             	add    rdx,rbx
ffff800000806e5a:	ff d2                	call   rdx
ffff800000806e5c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000806e60:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806e67:	ff ff ff 
ffff800000806e6a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e6e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806e71:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806e78:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806e7c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806e80:	48 89 d1             	mov    rcx,rdx
ffff800000806e83:	ba 03 00 00 00       	mov    edx,0x3
ffff800000806e88:	48 89 c7             	mov    rdi,rax
ffff800000806e8b:	49 89 df             	mov    r15,rbx
ffff800000806e8e:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff800000806e95:	ff ff ff 
ffff800000806e98:	48 01 d8             	add    rax,rbx
ffff800000806e9b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:937 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806e9d:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff800000806ea1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806ea5:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806eaa:	48 89 ce             	mov    rsi,rcx
ffff800000806ead:	48 89 c7             	mov    rdi,rax
ffff800000806eb0:	49 89 df             	mov    r15,rbx
ffff800000806eb3:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000806eba:	ff ff ff 
ffff800000806ebd:	48 01 d8             	add    rax,rbx
ffff800000806ec0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806ec2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806ec9:	ff ff ff 
ffff800000806ecc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ed0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806ed3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ed6:	48 98                	cdqe   
ffff800000806ed8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806edf:	48 01 d0             	add    rax,rdx
ffff800000806ee2:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806ee9:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000806eed:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806ef1:	48 89 d1             	mov    rcx,rdx
ffff800000806ef4:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806ef9:	48 89 c7             	mov    rdi,rax
ffff800000806efc:	49 89 df             	mov    r15,rbx
ffff800000806eff:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff800000806f06:	ff ff ff 
ffff800000806f09:	48 01 d8             	add    rax,rbx
ffff800000806f0c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000806f0e:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
ffff800000806f15:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 1)
ffff800000806f16:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806f1d:	ff ff ff 
ffff800000806f20:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806f24:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806f27:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806f2a:	48 98                	cdqe   
ffff800000806f2c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806f33:	48 01 d0             	add    rax,rdx
ffff800000806f36:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000806f3a:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000806f3e:	0f 83 01 ff ff ff    	jae    ffff800000806e45 <sys_fork+0x927>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:941
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
ffff800000806f44:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806f4b:	ff ff ff 
ffff800000806f4e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806f52:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806f55:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806f5c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806f60:	48 89 d1             	mov    rcx,rdx
ffff800000806f63:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806f68:	48 89 c6             	mov    rsi,rax
ffff800000806f6b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806f70:	49 89 df             	mov    r15,rbx
ffff800000806f73:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff800000806f7a:	ff ff ff 
ffff800000806f7d:	48 01 d8             	add    rax,rbx
ffff800000806f80:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
    task[pid].stat=TASK_READY;
ffff800000806f82:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806f89:	ff ff ff 
ffff800000806f8c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806f90:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806f93:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806f96:	48 98                	cdqe   
ffff800000806f98:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806f9f:	48 01 d0             	add    rax,rdx
ffff800000806fa2:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:945
    

    sti();
ffff800000806fa9:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:948
    //如果父进程没有堆，不开辟。留给load_xx函数。
    //父进程运行到这里
    return pid;
ffff800000806faa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:949
}
ffff800000806fad:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff800000806fb4:	5b                   	pop    rbx
ffff800000806fb5:	41 5f                	pop    r15
ffff800000806fb7:	5d                   	pop    rbp
ffff800000806fb8:	c3                   	ret    

ffff800000806fb9 <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
ffff800000806fb9:	f3 0f 1e fa          	endbr64 
ffff800000806fbd:	55                   	push   rbp
ffff800000806fbe:	48 89 e5             	mov    rbp,rsp
ffff800000806fc1:	41 57                	push   r15
ffff800000806fc3:	53                   	push   rbx
ffff800000806fc4:	48 83 ec 50          	sub    rsp,0x50
ffff800000806fc8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806fc8 <release_mmap+0xf>
ffff800000806fcf:	49 bb 90 6b 11 00 00 	movabs r11,0x116b90
ffff800000806fd6:	00 00 00 
ffff800000806fd9:	4c 01 db             	add    rbx,r11
ffff800000806fdc:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952
    page_item * pml4p=p->pml4;
ffff800000806fe0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806fe4:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000806feb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:954
    //复制pdpt
    page_item *pml4e= pml4p;
ffff800000806fef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000806ff3:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff800000806ff7:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000806ffe:	e9 40 03 00 00       	jmp    ffff800000807343 <release_mmap+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:957
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff800000807003:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807006:	48 98                	cdqe   
ffff800000807008:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080700f:	00 
ffff800000807010:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807014:	48 01 d0             	add    rax,rdx
ffff800000807017:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080701a:	83 e0 01             	and    eax,0x1
ffff80000080701d:	48 85 c0             	test   rax,rax
ffff800000807020:	0f 84 19 03 00 00    	je     ffff80000080733f <release_mmap+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:958
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK|KNL_BASE;
ffff800000807026:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807029:	48 98                	cdqe   
ffff80000080702b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807032:	00 
ffff800000807033:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807037:	48 01 d0             	add    rax,rdx
ffff80000080703a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080703d:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807044:	7f 00 00 
ffff800000807047:	48 21 c2             	and    rdx,rax
ffff80000080704a:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000807051:	80 ff ff 
ffff800000807054:	48 09 d0             	or     rax,rdx
ffff800000807057:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959
            for(int j=0;j<512;j++)
ffff80000080705b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000807062:	e9 85 02 00 00       	jmp    ffff8000008072ec <release_mmap+0x333>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff800000807067:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080706a:	48 98                	cdqe   
ffff80000080706c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807073:	00 
ffff800000807074:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807078:	48 01 d0             	add    rax,rdx
ffff80000080707b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080707e:	83 e0 01             	and    eax,0x1
ffff800000807081:	48 85 c0             	test   rax,rax
ffff800000807084:	0f 84 5e 02 00 00    	je     ffff8000008072e8 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961 (discriminator 1)
ffff80000080708a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080708d:	48 98                	cdqe   
ffff80000080708f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807096:	00 
ffff800000807097:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080709b:	48 01 d0             	add    rax,rdx
ffff80000080709e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008070a1:	25 80 00 00 00       	and    eax,0x80
ffff8000008070a6:	48 85 c0             	test   rax,rax
ffff8000008070a9:	0f 85 39 02 00 00    	jne    ffff8000008072e8 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:962
                    page_item *pde=pdpte[j]&PAGE_4K_MASK|KNL_BASE;
ffff8000008070af:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008070b2:	48 98                	cdqe   
ffff8000008070b4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008070bb:	00 
ffff8000008070bc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008070c0:	48 01 d0             	add    rax,rdx
ffff8000008070c3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008070c6:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008070cd:	7f 00 00 
ffff8000008070d0:	48 21 c2             	and    rdx,rax
ffff8000008070d3:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008070da:	80 ff ff 
ffff8000008070dd:	48 09 d0             	or     rax,rdx
ffff8000008070e0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963
                    for(int k=0;k<512;k++)
ffff8000008070e4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008070eb:	e9 a5 01 00 00       	jmp    ffff800000807295 <release_mmap+0x2dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff8000008070f0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008070f3:	48 98                	cdqe   
ffff8000008070f5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008070fc:	00 
ffff8000008070fd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807101:	48 01 d0             	add    rax,rdx
ffff800000807104:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807107:	83 e0 01             	and    eax,0x1
ffff80000080710a:	48 85 c0             	test   rax,rax
ffff80000080710d:	0f 84 09 01 00 00    	je     ffff80000080721c <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965 (discriminator 1)
ffff800000807113:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807116:	48 98                	cdqe   
ffff800000807118:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080711f:	00 
ffff800000807120:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807124:	48 01 d0             	add    rax,rdx
ffff800000807127:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080712a:	25 80 00 00 00       	and    eax,0x80
ffff80000080712f:	48 85 c0             	test   rax,rax
ffff800000807132:	0f 85 e4 00 00 00    	jne    ffff80000080721c <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:966
                            page_item *pte=pde[k]&PAGE_4K_MASK|KNL_BASE;
ffff800000807138:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080713b:	48 98                	cdqe   
ffff80000080713d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807144:	00 
ffff800000807145:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807149:	48 01 d0             	add    rax,rdx
ffff80000080714c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080714f:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807156:	7f 00 00 
ffff800000807159:	48 21 c2             	and    rdx,rax
ffff80000080715c:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000807163:	80 ff ff 
ffff800000807166:	48 09 d0             	or     rax,rdx
ffff800000807169:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967
                            for(int l=0;l<512;l++){
ffff80000080716d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000807174:	eb 55                	jmp    ffff8000008071cb <release_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:968
                                if(pte[l]&PAGE_PRESENT){
ffff800000807176:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807179:	48 98                	cdqe   
ffff80000080717b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807182:	00 
ffff800000807183:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807187:	48 01 d0             	add    rax,rdx
ffff80000080718a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080718d:	83 e0 01             	and    eax,0x1
ffff800000807190:	48 85 c0             	test   rax,rax
ffff800000807193:	74 32                	je     ffff8000008071c7 <release_mmap+0x20e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:971
                                    //释放申请的物理内存
                                    //TODO:这里有一个问题：目前fork时候堆栈空间使用的是vmalloc内存，这样的话free_page是释放不了的。
                                    free_page(pte[l]&PAGE_4K_MASK);
ffff800000807195:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807198:	48 98                	cdqe   
ffff80000080719a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008071a1:	00 
ffff8000008071a2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008071a6:	48 01 d0             	add    rax,rdx
ffff8000008071a9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008071ac:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008071b2:	48 89 c7             	mov    rdi,rax
ffff8000008071b5:	49 89 df             	mov    r15,rbx
ffff8000008071b8:	48 b8 1c 51 ee ff ff 	movabs rax,0xffffffffffee511c
ffff8000008071bf:	ff ff ff 
ffff8000008071c2:	48 01 d8             	add    rax,rbx
ffff8000008071c5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967 (discriminator 2)
                            for(int l=0;l<512;l++){
ffff8000008071c7:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967 (discriminator 1)
ffff8000008071cb:	81 7d e0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x20],0x1ff
ffff8000008071d2:	7e a2                	jle    ffff800000807176 <release_mmap+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:975
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK|KNL_BASE);
ffff8000008071d4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008071d7:	48 98                	cdqe   
ffff8000008071d9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008071e0:	00 
ffff8000008071e1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008071e5:	48 01 d0             	add    rax,rdx
ffff8000008071e8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008071eb:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008071f2:	7f 00 00 
ffff8000008071f5:	48 21 c2             	and    rdx,rax
ffff8000008071f8:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008071ff:	80 ff ff 
ffff800000807202:	48 09 d0             	or     rax,rdx
ffff800000807205:	48 89 c7             	mov    rdi,rax
ffff800000807208:	49 89 df             	mov    r15,rbx
ffff80000080720b:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000807212:	ff ff ff 
ffff800000807215:	48 01 d8             	add    rax,rbx
ffff800000807218:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff80000080721a:	eb 75                	jmp    ffff800000807291 <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k] & PDE_2MB)){
ffff80000080721c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080721f:	48 98                	cdqe   
ffff800000807221:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807228:	00 
ffff800000807229:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080722d:	48 01 d0             	add    rax,rdx
ffff800000807230:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807233:	83 e0 01             	and    eax,0x1
ffff800000807236:	48 85 c0             	test   rax,rax
ffff800000807239:	74 56                	je     ffff800000807291 <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976 (discriminator 1)
ffff80000080723b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080723e:	48 98                	cdqe   
ffff800000807240:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807247:	00 
ffff800000807248:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080724c:	48 01 d0             	add    rax,rdx
ffff80000080724f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807252:	25 80 00 00 00       	and    eax,0x80
ffff800000807257:	48 85 c0             	test   rax,rax
ffff80000080725a:	74 35                	je     ffff800000807291 <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:978
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
ffff80000080725c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080725f:	48 98                	cdqe   
ffff800000807261:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807268:	00 
ffff800000807269:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080726d:	48 01 d0             	add    rax,rdx
ffff800000807270:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807273:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000807278:	be 00 02 00 00       	mov    esi,0x200
ffff80000080727d:	89 c7                	mov    edi,eax
ffff80000080727f:	49 89 df             	mov    r15,rbx
ffff800000807282:	48 b8 ce 51 ee ff ff 	movabs rax,0xffffffffffee51ce
ffff800000807289:	ff ff ff 
ffff80000080728c:	48 01 d8             	add    rax,rbx
ffff80000080728f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff800000807291:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963 (discriminator 1)
ffff800000807295:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff80000080729c:	0f 8e 4e fe ff ff    	jle    ffff8000008070f0 <release_mmap+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:982
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK|KNL_BASE);
ffff8000008072a2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008072a5:	48 98                	cdqe   
ffff8000008072a7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008072ae:	00 
ffff8000008072af:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008072b3:	48 01 d0             	add    rax,rdx
ffff8000008072b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008072b9:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008072c0:	7f 00 00 
ffff8000008072c3:	48 21 c2             	and    rdx,rax
ffff8000008072c6:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008072cd:	80 ff ff 
ffff8000008072d0:	48 09 d0             	or     rax,rdx
ffff8000008072d3:	48 89 c7             	mov    rdi,rax
ffff8000008072d6:	49 89 df             	mov    r15,rbx
ffff8000008072d9:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff8000008072e0:	ff ff ff 
ffff8000008072e3:	48 01 d8             	add    rax,rbx
ffff8000008072e6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959 (discriminator 2)
            for(int j=0;j<512;j++)
ffff8000008072e8:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959 (discriminator 1)
ffff8000008072ec:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff8000008072f3:	0f 8e 6e fd ff ff    	jle    ffff800000807067 <release_mmap+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:987
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK|KNL_BASE);
ffff8000008072f9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008072fc:	48 98                	cdqe   
ffff8000008072fe:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807305:	00 
ffff800000807306:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080730a:	48 01 d0             	add    rax,rdx
ffff80000080730d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807310:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807317:	7f 00 00 
ffff80000080731a:	48 21 c2             	and    rdx,rax
ffff80000080731d:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000807324:	80 ff ff 
ffff800000807327:	48 09 d0             	or     rax,rdx
ffff80000080732a:	48 89 c7             	mov    rdi,rax
ffff80000080732d:	49 89 df             	mov    r15,rbx
ffff800000807330:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000807337:	ff ff ff 
ffff80000080733a:	48 01 d8             	add    rax,rbx
ffff80000080733d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955 (discriminator 2)
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff80000080733f:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955 (discriminator 1)
ffff800000807343:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffff80000080734a:	0f 8e b3 fc ff ff    	jle    ffff800000807003 <release_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990
        }
    }
}
ffff800000807350:	90                   	nop
ffff800000807351:	90                   	nop
ffff800000807352:	48 83 c4 50          	add    rsp,0x50
ffff800000807356:	5b                   	pop    rbx
ffff800000807357:	41 5f                	pop    r15
ffff800000807359:	5d                   	pop    rbp
ffff80000080735a:	c3                   	ret    

ffff80000080735b <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
void copy_mmap(struct process* from, struct process *to){
ffff80000080735b:	f3 0f 1e fa          	endbr64 
ffff80000080735f:	55                   	push   rbp
ffff800000807360:	48 89 e5             	mov    rbp,rsp
ffff800000807363:	41 57                	push   r15
ffff800000807365:	53                   	push   rbx
ffff800000807366:	48 83 ec 70          	sub    rsp,0x70
ffff80000080736a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080736a <copy_mmap+0xf>
ffff800000807371:	49 bb ee 67 11 00 00 	movabs r11,0x1167ee
ffff800000807378:	00 00 00 
ffff80000080737b:	4c 01 db             	add    rbx,r11
ffff80000080737e:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000807382:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992
    page_item * pml4p= kmalloc();
ffff800000807386:	49 89 df             	mov    r15,rbx
ffff800000807389:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080738e:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000807395:	ff ff ff 
ffff800000807398:	48 01 da             	add    rdx,rbx
ffff80000080739b:	ff d2                	call   rdx
ffff80000080739d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:993
    memcpy(pml4p, (unsigned char *) from->pml4, PAGE_4K_SIZE);//复制pml4
ffff8000008073a1:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008073a5:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff8000008073ac:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008073b0:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008073b5:	48 89 ce             	mov    rsi,rcx
ffff8000008073b8:	48 89 c7             	mov    rdi,rax
ffff8000008073bb:	49 89 df             	mov    r15,rbx
ffff8000008073be:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff8000008073c5:	ff ff ff 
ffff8000008073c8:	48 01 d8             	add    rax,rbx
ffff8000008073cb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:994
    to->regs.cr3=(unsigned long)pml4p&~KNL_BASE;
ffff8000008073cd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008073d1:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff8000008073d8:	7f 00 00 
ffff8000008073db:	48 21 c2             	and    rdx,rax
ffff8000008073de:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008073e2:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:995
    to->pml4=pml4p;
ffff8000008073e9:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008073ed:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008073f1:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:998
    //复制pdpt

    page_item *pml4e= pml4p;
ffff8000008073f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008073fc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999
    for(int i=0;i<512;i++)
ffff800000807400:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000807407:	e9 0e 03 00 00       	jmp    ffff80000080771a <copy_mmap+0x3bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001
    {
        if((pml4e[i]&PAGE_PRESENT)==0)
ffff80000080740c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080740f:	48 98                	cdqe   
ffff800000807411:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807418:	00 
ffff800000807419:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080741d:	48 01 d0             	add    rax,rdx
ffff800000807420:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807423:	83 e0 01             	and    eax,0x1
ffff800000807426:	48 85 c0             	test   rax,rax
ffff800000807429:	0f 84 e6 02 00 00    	je     ffff800000807715 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003
            continue;
        addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080742f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807432:	48 98                	cdqe   
ffff800000807434:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080743b:	00 
ffff80000080743c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807440:	48 01 d0             	add    rax,rdx
ffff800000807443:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807446:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
        addr_t m4=kmalloc();
ffff80000080744a:	49 89 df             	mov    r15,rbx
ffff80000080744d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807452:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000807459:	ff ff ff 
ffff80000080745c:	48 01 da             	add    rdx,rbx
ffff80000080745f:	ff d2                	call   rdx
ffff800000807461:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005
        pml4e[i]= (m4&~KNL_BASE) | (old_data & ~PAGE_4K_MASK);
ffff800000807465:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff80000080746c:	7f 00 00 
ffff80000080746f:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000807473:	48 89 c2             	mov    rdx,rax
ffff800000807476:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080747a:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080747f:	48 89 c1             	mov    rcx,rax
ffff800000807482:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807485:	48 98                	cdqe   
ffff800000807487:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff80000080748e:	00 
ffff80000080748f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807493:	48 01 f0             	add    rax,rsi
ffff800000807496:	48 09 ca             	or     rdx,rcx
ffff800000807499:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1006
        memcpy((unsigned char *) m4, old_data & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff80000080749c:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008074a3:	7f 00 00 
ffff8000008074a6:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
ffff8000008074aa:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008074b1:	80 ff ff 
ffff8000008074b4:	48 09 d0             	or     rax,rdx
ffff8000008074b7:	48 89 c1             	mov    rcx,rax
ffff8000008074ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008074be:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008074c3:	48 89 ce             	mov    rsi,rcx
ffff8000008074c6:	48 89 c7             	mov    rdi,rax
ffff8000008074c9:	49 89 df             	mov    r15,rbx
ffff8000008074cc:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff8000008074d3:	ff ff ff 
ffff8000008074d6:	48 01 d8             	add    rax,rbx
ffff8000008074d9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
        page_item *pdpte= (page_item *) m4;
ffff8000008074db:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008074df:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008
        for(int j=0;j<512;j++)
ffff8000008074e3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008074ea:	e9 17 02 00 00       	jmp    ffff800000807706 <copy_mmap+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1010
        {
            if((pdpte[j]&PAGE_PRESENT)==0||(pdpte[j]&PDPTE_1GB)!=0)
ffff8000008074ef:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008074f2:	48 98                	cdqe   
ffff8000008074f4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008074fb:	00 
ffff8000008074fc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807500:	48 01 d0             	add    rax,rdx
ffff800000807503:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807506:	83 e0 01             	and    eax,0x1
ffff800000807509:	48 85 c0             	test   rax,rax
ffff80000080750c:	0f 84 ef 01 00 00    	je     ffff800000807701 <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1010 (discriminator 2)
ffff800000807512:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807515:	48 98                	cdqe   
ffff800000807517:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080751e:	00 
ffff80000080751f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807523:	48 01 d0             	add    rax,rdx
ffff800000807526:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807529:	25 80 00 00 00       	and    eax,0x80
ffff80000080752e:	48 85 c0             	test   rax,rax
ffff800000807531:	0f 85 ca 01 00 00    	jne    ffff800000807701 <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1012
                continue;
            addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000807537:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080753a:	48 98                	cdqe   
ffff80000080753c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807543:	00 
ffff800000807544:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807548:	48 01 d0             	add    rax,rdx
ffff80000080754b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080754e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1013
            addr_t m3=kmalloc();
ffff800000807552:	49 89 df             	mov    r15,rbx
ffff800000807555:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080755a:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000807561:	ff ff ff 
ffff800000807564:	48 01 da             	add    rdx,rbx
ffff800000807567:	ff d2                	call   rdx
ffff800000807569:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1014
            pdpte[j]= (m3&~KNL_BASE) | (old_data2 & ~PAGE_4K_MASK);
ffff80000080756d:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807574:	7f 00 00 
ffff800000807577:	48 23 45 a8          	and    rax,QWORD PTR [rbp-0x58]
ffff80000080757b:	48 89 c2             	mov    rdx,rax
ffff80000080757e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000807582:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000807587:	48 89 c1             	mov    rcx,rax
ffff80000080758a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080758d:	48 98                	cdqe   
ffff80000080758f:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000807596:	00 
ffff800000807597:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080759b:	48 01 f0             	add    rax,rsi
ffff80000080759e:	48 09 ca             	or     rdx,rcx
ffff8000008075a1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1015
            memcpy((unsigned char *) m3, old_data2 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008075a4:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008075ab:	7f 00 00 
ffff8000008075ae:	48 23 45 b0          	and    rax,QWORD PTR [rbp-0x50]
ffff8000008075b2:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008075b9:	80 ff ff 
ffff8000008075bc:	48 09 d0             	or     rax,rdx
ffff8000008075bf:	48 89 c1             	mov    rcx,rax
ffff8000008075c2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008075c6:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008075cb:	48 89 ce             	mov    rsi,rcx
ffff8000008075ce:	48 89 c7             	mov    rdi,rax
ffff8000008075d1:	49 89 df             	mov    r15,rbx
ffff8000008075d4:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff8000008075db:	ff ff ff 
ffff8000008075de:	48 01 d8             	add    rax,rbx
ffff8000008075e1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016
            page_item *pde= (page_item *) m3;
ffff8000008075e3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008075e7:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017
            for(int k=0;k<512;k++)
ffff8000008075eb:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008075f2:	e9 fb 00 00 00       	jmp    ffff8000008076f2 <copy_mmap+0x397>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019
            {
                if((pde[k]&PAGE_PRESENT)==0||(pde[k]&PDE_2MB)!=0)
ffff8000008075f7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008075fa:	48 98                	cdqe   
ffff8000008075fc:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807603:	00 
ffff800000807604:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000807608:	48 01 d0             	add    rax,rdx
ffff80000080760b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080760e:	83 e0 01             	and    eax,0x1
ffff800000807611:	48 85 c0             	test   rax,rax
ffff800000807614:	0f 84 d3 00 00 00    	je     ffff8000008076ed <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019 (discriminator 2)
ffff80000080761a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080761d:	48 98                	cdqe   
ffff80000080761f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807626:	00 
ffff800000807627:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080762b:	48 01 d0             	add    rax,rdx
ffff80000080762e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807631:	25 80 00 00 00       	and    eax,0x80
ffff800000807636:	48 85 c0             	test   rax,rax
ffff800000807639:	0f 85 ae 00 00 00    	jne    ffff8000008076ed <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021
                    continue;
                addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080763f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807642:	48 98                	cdqe   
ffff800000807644:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080764b:	00 
ffff80000080764c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000807650:	48 01 d0             	add    rax,rdx
ffff800000807653:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807656:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1022
                addr_t m2=kmalloc();
ffff80000080765a:	49 89 df             	mov    r15,rbx
ffff80000080765d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807662:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000807669:	ff ff ff 
ffff80000080766c:	48 01 da             	add    rdx,rbx
ffff80000080766f:	ff d2                	call   rdx
ffff800000807671:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023
                pde[k]= (m2&~KNL_BASE) | (old_data3 & ~PAGE_4K_MASK);
ffff800000807675:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff80000080767c:	7f 00 00 
ffff80000080767f:	48 23 45 90          	and    rax,QWORD PTR [rbp-0x70]
ffff800000807683:	48 89 c2             	mov    rdx,rax
ffff800000807686:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080768a:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080768f:	48 89 c1             	mov    rcx,rax
ffff800000807692:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807695:	48 98                	cdqe   
ffff800000807697:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff80000080769e:	00 
ffff80000080769f:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008076a3:	48 01 f0             	add    rax,rsi
ffff8000008076a6:	48 09 ca             	or     rdx,rcx
ffff8000008076a9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024
                memcpy((unsigned char *) m2, old_data3 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008076ac:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008076b3:	7f 00 00 
ffff8000008076b6:	48 23 45 98          	and    rax,QWORD PTR [rbp-0x68]
ffff8000008076ba:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008076c1:	80 ff ff 
ffff8000008076c4:	48 09 d0             	or     rax,rdx
ffff8000008076c7:	48 89 c1             	mov    rcx,rax
ffff8000008076ca:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008076ce:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008076d3:	48 89 ce             	mov    rsi,rcx
ffff8000008076d6:	48 89 c7             	mov    rdi,rax
ffff8000008076d9:	49 89 df             	mov    r15,rbx
ffff8000008076dc:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff8000008076e3:	ff ff ff 
ffff8000008076e6:	48 01 d8             	add    rax,rbx
ffff8000008076e9:	ff d0                	call   rax
ffff8000008076eb:	eb 01                	jmp    ffff8000008076ee <copy_mmap+0x393>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1020
                    continue;
ffff8000008076ed:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017 (discriminator 2)
            for(int k=0;k<512;k++)
ffff8000008076ee:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017 (discriminator 1)
ffff8000008076f2:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff8000008076f9:	0f 8e f8 fe ff ff    	jle    ffff8000008075f7 <copy_mmap+0x29c>
ffff8000008076ff:	eb 01                	jmp    ffff800000807702 <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1011
                continue;
ffff800000807701:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008 (discriminator 2)
        for(int j=0;j<512;j++)
ffff800000807702:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008 (discriminator 1)
ffff800000807706:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff80000080770d:	0f 8e dc fd ff ff    	jle    ffff8000008074ef <copy_mmap+0x194>
ffff800000807713:	eb 01                	jmp    ffff800000807716 <copy_mmap+0x3bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002
            continue;
ffff800000807715:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999 (discriminator 2)
    for(int i=0;i<512;i++)
ffff800000807716:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999 (discriminator 1)
ffff80000080771a:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff800000807721:	0f 8e e5 fc ff ff    	jle    ffff80000080740c <copy_mmap+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1031
            }

        }

    }
}
ffff800000807727:	90                   	nop
ffff800000807728:	90                   	nop
ffff800000807729:	48 83 c4 70          	add    rsp,0x70
ffff80000080772d:	5b                   	pop    rbx
ffff80000080772e:	41 5f                	pop    r15
ffff800000807730:	5d                   	pop    rbp
ffff800000807731:	c3                   	ret    

ffff800000807732 <chk_mmap>:
chk_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1033

int chk_mmap(off_t base, size_t mem_size){
ffff800000807732:	f3 0f 1e fa          	endbr64 
ffff800000807736:	55                   	push   rbp
ffff800000807737:	48 89 e5             	mov    rbp,rsp
ffff80000080773a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080773a <chk_mmap+0x8>
ffff800000807741:	49 bb 1e 64 11 00 00 	movabs r11,0x11641e
ffff800000807748:	00 00 00 
ffff80000080774b:	4c 01 d8             	add    rax,r11
ffff80000080774e:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff800000807751:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1035
    size_t nr_pte;
    size_t ndx_pml4=0,ndx_pdpt=0,ndx_pd=0,ndx_pt=0;
ffff800000807755:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080775c:	00 
ffff80000080775d:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000807764:	00 
ffff800000807765:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080776c:	00 
ffff80000080776d:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000807774:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
    page_item *pml4e= current->pml4;
ffff800000807775:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080777c:	ff ff ff 
ffff80000080777f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807783:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807786:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff80000080778d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1037
    nr_pte=  (mem_size-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff800000807791:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807795:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080779b:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080779f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038
    ndx_pt=  base/PAGE_4K_SIZE;
ffff8000008077a3:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008077a6:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008077ac:	85 c0                	test   eax,eax
ffff8000008077ae:	0f 48 c2             	cmovs  eax,edx
ffff8000008077b1:	c1 f8 0c             	sar    eax,0xc
ffff8000008077b4:	48 98                	cdqe   
ffff8000008077b6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1039
    ndx_pd=  ndx_pt/512%512;
ffff8000008077ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008077be:	48 c1 e8 09          	shr    rax,0x9
ffff8000008077c2:	25 ff 01 00 00       	and    eax,0x1ff
ffff8000008077c7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1040
    ndx_pdpt=ndx_pd/512%512;
ffff8000008077cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008077cf:	48 c1 e8 09          	shr    rax,0x9
ffff8000008077d3:	25 ff 01 00 00       	and    eax,0x1ff
ffff8000008077d8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041
    ndx_pml4=ndx_pdpt/512%512;
ffff8000008077dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008077e0:	48 c1 e8 09          	shr    rax,0x9
ffff8000008077e4:	25 ff 01 00 00       	and    eax,0x1ff
ffff8000008077e9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042
    while (nr_pte)
ffff8000008077ed:	eb 25                	jmp    ffff800000807814 <chk_mmap+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1044
    {
        if(ndx_pdpt==512){
ffff8000008077ef:	48 81 7d f8 00 02 00 	cmp    QWORD PTR [rbp-0x8],0x200
ffff8000008077f6:	00 
ffff8000008077f7:	75 0d                	jne    ffff800000807806 <chk_mmap+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1045
            ndx_pml4++;
ffff8000008077f9:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1046
            ndx_pdpt=0;
ffff8000008077fe:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000807805:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1049 (discriminator 1)
        }
        if(pml4e[ndx_pml4]%PAGE_PRESENT==0){
            ndx_pml4++;
ffff800000807806:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050 (discriminator 1)
            ndx_pdpt=0;
ffff80000080780b:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000807812:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1051 (discriminator 1)
            continue;
ffff800000807813:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042
    while (nr_pte)
ffff800000807814:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000807819:	75 d4                	jne    ffff8000008077ef <chk_mmap+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1081
        if(pt[ndx_pt]&PAGE_PRESENT)return 0;
        ndx_pt++;
        nr_pte--;
    }
    
    return 1;
ffff80000080781b:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1082
}
ffff800000807820:	5d                   	pop    rbp
ffff800000807821:	c3                   	ret    

ffff800000807822 <sys_getpgrp>:
sys_getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1083
pid_t sys_getpgrp(void){
ffff800000807822:	f3 0f 1e fa          	endbr64 
ffff800000807826:	55                   	push   rbp
ffff800000807827:	48 89 e5             	mov    rbp,rsp
ffff80000080782a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080782a <sys_getpgrp+0x8>
ffff800000807831:	49 bb 2e 63 11 00 00 	movabs r11,0x11632e
ffff800000807838:	00 00 00 
ffff80000080783b:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1084
    return current->gpid;
ffff80000080783e:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807845:	ff ff ff 
ffff800000807848:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080784c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080784f:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1085
}
ffff800000807852:	5d                   	pop    rbp
ffff800000807853:	c3                   	ret    

ffff800000807854 <sys_getpgid>:
sys_getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1087

int sys_getpgid(pid_t pid,gid_t gid){
ffff800000807854:	f3 0f 1e fa          	endbr64 
ffff800000807858:	55                   	push   rbp
ffff800000807859:	48 89 e5             	mov    rbp,rsp
ffff80000080785c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080785c <sys_getpgid+0x8>
ffff800000807863:	49 bb fc 62 11 00 00 	movabs r11,0x1162fc
ffff80000080786a:	00 00 00 
ffff80000080786d:	4c 01 d8             	add    rax,r11
ffff800000807870:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807873:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1088
    if(pid==0)
ffff800000807876:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080787a:	75 16                	jne    ffff800000807892 <sys_getpgid+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1089
        return current->gpid;
ffff80000080787c:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807883:	ff ff ff 
ffff800000807886:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080788a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080788d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000807890:	eb 67                	jmp    ffff8000008078f9 <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1090
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807892:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000807899:	eb 53                	jmp    ffff8000008078ee <sys_getpgid+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1091
        if(task[i].pid==pid)
ffff80000080789b:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008078a2:	ff ff ff 
ffff8000008078a5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008078a9:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008078ac:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008078af:	48 63 d2             	movsxd rdx,edx
ffff8000008078b2:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008078b9:	48 01 ca             	add    rdx,rcx
ffff8000008078bc:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff8000008078be:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008078c1:	39 d1                	cmp    ecx,edx
ffff8000008078c3:	75 25                	jne    ffff8000008078ea <sys_getpgid+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1092
            return task[i].gpid;
ffff8000008078c5:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008078cc:	ff ff ff 
ffff8000008078cf:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008078d3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008078d6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008078d9:	48 98                	cdqe   
ffff8000008078db:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008078e2:	48 01 d0             	add    rax,rdx
ffff8000008078e5:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008078e8:	eb 0f                	jmp    ffff8000008078f9 <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1090 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008078ea:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1090 (discriminator 1)
ffff8000008078ee:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff8000008078f2:	7e a7                	jle    ffff80000080789b <sys_getpgid+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1094
    }
    return -1;
ffff8000008078f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1095
}
ffff8000008078f9:	5d                   	pop    rbp
ffff8000008078fa:	c3                   	ret    

ffff8000008078fb <sys_setpgid>:
sys_setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1096
int sys_setpgid(pid_t pid,gid_t gid){
ffff8000008078fb:	f3 0f 1e fa          	endbr64 
ffff8000008078ff:	55                   	push   rbp
ffff800000807900:	48 89 e5             	mov    rbp,rsp
ffff800000807903:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807903 <sys_setpgid+0x8>
ffff80000080790a:	49 bb 55 62 11 00 00 	movabs r11,0x116255
ffff800000807911:	00 00 00 
ffff800000807914:	4c 01 d8             	add    rax,r11
ffff800000807917:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080791a:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1097
    if(pid==0)
ffff80000080791d:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000807921:	75 56                	jne    ffff800000807979 <sys_setpgid+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1099
    {
        if(current->sid==current->pid)
ffff800000807923:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080792a:	ff ff ff 
ffff80000080792d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807931:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807934:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000807937:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080793e:	ff ff ff 
ffff800000807941:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807945:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807948:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080794a:	39 d1                	cmp    ecx,edx
ffff80000080794c:	75 0a                	jne    ffff800000807958 <sys_setpgid+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1100
            return -1;
ffff80000080794e:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807953:	e9 e9 00 00 00       	jmp    ffff800000807a41 <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1101
        current->gpid=gid;
ffff800000807958:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080795f:	ff ff ff 
ffff800000807962:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807966:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807969:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080796c:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1102
        return 0;
ffff80000080796f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807974:	e9 c8 00 00 00       	jmp    ffff800000807a41 <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1104
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807979:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000807980:	e9 ad 00 00 00       	jmp    ffff800000807a32 <sys_setpgid+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1105
        if(task[i].pid==pid)
ffff800000807985:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080798c:	ff ff ff 
ffff80000080798f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807993:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807996:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807999:	48 63 d2             	movsxd rdx,edx
ffff80000080799c:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008079a3:	48 01 ca             	add    rdx,rcx
ffff8000008079a6:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff8000008079a8:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008079ab:	39 d1                	cmp    ecx,edx
ffff8000008079ad:	75 7f                	jne    ffff800000807a2e <sys_setpgid+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1107
        {
            if(task[i].sid==task[i].pid)
ffff8000008079af:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008079b6:	ff ff ff 
ffff8000008079b9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008079bd:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008079c0:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008079c3:	48 63 d2             	movsxd rdx,edx
ffff8000008079c6:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008079cd:	48 01 ca             	add    rdx,rcx
ffff8000008079d0:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008079d3:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008079da:	ff ff ff 
ffff8000008079dd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008079e1:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008079e4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008079e7:	48 63 d2             	movsxd rdx,edx
ffff8000008079ea:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008079f1:	48 01 f2             	add    rdx,rsi
ffff8000008079f4:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008079f6:	39 d1                	cmp    ecx,edx
ffff8000008079f8:	75 07                	jne    ffff800000807a01 <sys_setpgid+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1108
                return -1;
ffff8000008079fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008079ff:	eb 40                	jmp    ffff800000807a41 <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1109
            task[i].gpid=gid;
ffff800000807a01:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807a08:	ff ff ff 
ffff800000807a0b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807a0f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a12:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807a15:	48 98                	cdqe   
ffff800000807a17:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807a1e:	48 01 c2             	add    rdx,rax
ffff800000807a21:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807a24:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1110
            return 0;
ffff800000807a27:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807a2c:	eb 13                	jmp    ffff800000807a41 <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1104 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807a2e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1104 (discriminator 1)
ffff800000807a32:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807a36:	0f 8e 49 ff ff ff    	jle    ffff800000807985 <sys_setpgid+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1113
        }
    }
    return -1;
ffff800000807a3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1114
}
ffff800000807a41:	5d                   	pop    rbp
ffff800000807a42:	c3                   	ret    

ffff800000807a43 <sys_setsid>:
sys_setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1116

pid_t sys_setsid(void){
ffff800000807a43:	f3 0f 1e fa          	endbr64 
ffff800000807a47:	55                   	push   rbp
ffff800000807a48:	48 89 e5             	mov    rbp,rsp
ffff800000807a4b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807a4b <sys_setsid+0x8>
ffff800000807a52:	49 bb 0d 61 11 00 00 	movabs r11,0x11610d
ffff800000807a59:	00 00 00 
ffff800000807a5c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1117
    current->sid=current->pid;
ffff800000807a5f:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807a66:	ff ff ff 
ffff800000807a69:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807a6d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807a70:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000807a77:	ff ff ff 
ffff800000807a7a:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000807a7e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807a81:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807a83:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1118
}
ffff800000807a86:	90                   	nop
ffff800000807a87:	5d                   	pop    rbp
ffff800000807a88:	c3                   	ret    

ffff800000807a89 <sys_getsid>:
sys_getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1119
pid_t sys_getsid(pid_t pid){
ffff800000807a89:	f3 0f 1e fa          	endbr64 
ffff800000807a8d:	55                   	push   rbp
ffff800000807a8e:	48 89 e5             	mov    rbp,rsp
ffff800000807a91:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807a91 <sys_getsid+0x8>
ffff800000807a98:	49 bb c7 60 11 00 00 	movabs r11,0x1160c7
ffff800000807a9f:	00 00 00 
ffff800000807aa2:	4c 01 d8             	add    rax,r11
ffff800000807aa5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1120
    if(pid==0)
ffff800000807aa8:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000807aac:	75 16                	jne    ffff800000807ac4 <sys_getsid+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1121
        return current->sid;
ffff800000807aae:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807ab5:	ff ff ff 
ffff800000807ab8:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807abc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807abf:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000807ac2:	eb 67                	jmp    ffff800000807b2b <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807ac4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000807acb:	eb 53                	jmp    ffff800000807b20 <sys_getsid+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1123
        if(task[i].pid==pid)
ffff800000807acd:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807ad4:	ff ff ff 
ffff800000807ad7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807adb:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807ade:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807ae1:	48 63 d2             	movsxd rdx,edx
ffff800000807ae4:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000807aeb:	48 01 ca             	add    rdx,rcx
ffff800000807aee:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807af0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807af3:	39 d1                	cmp    ecx,edx
ffff800000807af5:	75 25                	jne    ffff800000807b1c <sys_getsid+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1124
            return task[i].sid;
ffff800000807af7:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807afe:	ff ff ff 
ffff800000807b01:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807b05:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807b08:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807b0b:	48 98                	cdqe   
ffff800000807b0d:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807b14:	48 01 d0             	add    rax,rdx
ffff800000807b17:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000807b1a:	eb 0f                	jmp    ffff800000807b2b <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807b1c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122 (discriminator 1)
ffff800000807b20:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807b24:	7e a7                	jle    ffff800000807acd <sys_getsid+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1126
    }
    return -1;
ffff800000807b26:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1127
}
ffff800000807b2b:	5d                   	pop    rbp
ffff800000807b2c:	c3                   	ret    

ffff800000807b2d <sys_tcsetpgrp>:
sys_tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1128
int sys_tcsetpgrp(int fildes,pid_t pgid_id){
ffff800000807b2d:	f3 0f 1e fa          	endbr64 
ffff800000807b31:	55                   	push   rbp
ffff800000807b32:	48 89 e5             	mov    rbp,rsp
ffff800000807b35:	41 57                	push   r15
ffff800000807b37:	53                   	push   rbx
ffff800000807b38:	48 83 ec 20          	sub    rsp,0x20
ffff800000807b3c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807b3c <sys_tcsetpgrp+0xf>
ffff800000807b43:	49 bb 1c 60 11 00 00 	movabs r11,0x11601c
ffff800000807b4a:	00 00 00 
ffff800000807b4d:	4c 01 db             	add    rbx,r11
ffff800000807b50:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000807b53:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1130
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
ffff800000807b56:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807b59:	ba 00 00 00 00       	mov    edx,0x0
ffff800000807b5e:	be 02 00 00 00       	mov    esi,0x2
ffff800000807b63:	89 c7                	mov    edi,eax
ffff800000807b65:	49 89 df             	mov    r15,rbx
ffff800000807b68:	48 b8 ee a1 ee ff ff 	movabs rax,0xffffffffffeea1ee
ffff800000807b6f:	ff ff ff 
ffff800000807b72:	48 01 d8             	add    rax,rbx
ffff800000807b75:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1131
    int sid= sys_getsid(0);//获取session id
ffff800000807b77:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807b7c:	49 89 df             	mov    r15,rbx
ffff800000807b7f:	48 b8 31 9f ee ff ff 	movabs rax,0xffffffffffee9f31
ffff800000807b86:	ff ff ff 
ffff800000807b89:	48 01 d8             	add    rax,rbx
ffff800000807b8c:	ff d0                	call   rax
ffff800000807b8e:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1132
    struct process* new_fgl=NULL;
ffff800000807b91:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000807b98:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807b99:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000807ba0:	e9 fb 00 00 00       	jmp    ffff800000807ca0 <sys_tcsetpgrp+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000807ba5:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807bac:	ff ff ff 
ffff800000807baf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807bb3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807bb6:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807bb9:	48 98                	cdqe   
ffff800000807bbb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807bc2:	48 01 d0             	add    rax,rdx
ffff800000807bc5:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000807bc8:	83 f8 04             	cmp    eax,0x4
ffff800000807bcb:	0f 84 ca 00 00 00    	je     ffff800000807c9b <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134 (discriminator 2)
ffff800000807bd1:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807bd8:	ff ff ff 
ffff800000807bdb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807bdf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807be2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807be5:	48 98                	cdqe   
ffff800000807be7:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807bee:	48 01 d0             	add    rax,rdx
ffff800000807bf1:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000807bf4:	85 c0                	test   eax,eax
ffff800000807bf6:	0f 84 9f 00 00 00    	je     ffff800000807c9b <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1135
        if(task[i].sid==sid){
ffff800000807bfc:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807c03:	ff ff ff 
ffff800000807c06:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c0a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807c0d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807c10:	48 98                	cdqe   
ffff800000807c12:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807c19:	48 01 d0             	add    rax,rdx
ffff800000807c1c:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000807c1f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807c22:	39 c2                	cmp    edx,eax
ffff800000807c24:	75 76                	jne    ffff800000807c9c <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1136
            task[i].fg_pgid=pgid_id;
ffff800000807c26:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807c2d:	ff ff ff 
ffff800000807c30:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c34:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807c37:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807c3a:	48 98                	cdqe   
ffff800000807c3c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807c43:	48 01 c2             	add    rdx,rax
ffff800000807c46:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000807c49:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1137
            if(task[i].pid==pgid_id){
ffff800000807c4c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807c53:	ff ff ff 
ffff800000807c56:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c5a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807c5d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807c60:	48 98                	cdqe   
ffff800000807c62:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807c69:	48 01 d0             	add    rax,rdx
ffff800000807c6c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000807c6e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000807c71:	39 c2                	cmp    edx,eax
ffff800000807c73:	75 27                	jne    ffff800000807c9c <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1139
                //这是新前台进程组的leader
                new_fgl=&task[i];
ffff800000807c75:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807c7c:	ff ff ff 
ffff800000807c7f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c83:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807c86:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807c89:	48 98                	cdqe   
ffff800000807c8b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807c92:	48 01 d0             	add    rax,rdx
ffff800000807c95:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000807c99:	eb 01                	jmp    ffff800000807c9c <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000807c9b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807c9c:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133 (discriminator 1)
ffff800000807ca0:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff800000807ca4:	0f 8e fb fe ff ff    	jle    ffff800000807ba5 <sys_tcsetpgrp+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1144
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
ffff800000807caa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807cae:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffff800000807cb1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807cb5:	48 63 d2             	movsxd rdx,edx
ffff800000807cb8:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807cbc:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807cc1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000807cc5:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
ffff800000807cc9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807ccd:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807cd0:	48 63 d2             	movsxd rdx,edx
ffff800000807cd3:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807cd7:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
ffff800000807cdc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807ce0:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807ce3:	48 63 d2             	movsxd rdx,edx
ffff800000807ce6:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807cea:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807cef:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807cf3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807cf7:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000807cfc:	ba 01 00 00 00       	mov    edx,0x1
ffff800000807d01:	48 89 c7             	mov    rdi,rax
ffff800000807d04:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1146
    ,TTY_CONNECT,0);
}
ffff800000807d07:	90                   	nop
ffff800000807d08:	48 83 c4 20          	add    rsp,0x20
ffff800000807d0c:	5b                   	pop    rbx
ffff800000807d0d:	41 5f                	pop    r15
ffff800000807d0f:	5d                   	pop    rbp
ffff800000807d10:	c3                   	ret    

ffff800000807d11 <sys_tcgetpgrp>:
sys_tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1147
pid_t sys_tcgetpgrp(int fildes){
ffff800000807d11:	f3 0f 1e fa          	endbr64 
ffff800000807d15:	55                   	push   rbp
ffff800000807d16:	48 89 e5             	mov    rbp,rsp
ffff800000807d19:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807d19 <sys_tcgetpgrp+0x8>
ffff800000807d20:	49 bb 3f 5e 11 00 00 	movabs r11,0x115e3f
ffff800000807d27:	00 00 00 
ffff800000807d2a:	4c 01 d8             	add    rax,r11
ffff800000807d2d:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1148
    return current->fg_pgid;
ffff800000807d30:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807d37:	ff ff ff 
ffff800000807d3a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807d3e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807d41:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1149
}
ffff800000807d44:	5d                   	pop    rbp
ffff800000807d45:	c3                   	ret    

ffff800000807d46 <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1152
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
ffff800000807d46:	f3 0f 1e fa          	endbr64 
ffff800000807d4a:	55                   	push   rbp
ffff800000807d4b:	48 89 e5             	mov    rbp,rsp
ffff800000807d4e:	48 83 ec 10          	sub    rsp,0x10
ffff800000807d52:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807d52 <sys_ioctl+0xc>
ffff800000807d59:	49 bb 06 5e 11 00 00 	movabs r11,0x115e06
ffff800000807d60:	00 00 00 
ffff800000807d63:	4c 01 d8             	add    rax,r11
ffff800000807d66:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000807d69:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000807d6c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1153
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
ffff800000807d70:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807d77:	ff ff ff 
ffff800000807d7a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807d7e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807d81:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807d84:	48 63 c9             	movsxd rcx,ecx
ffff800000807d87:	48 83 c1 1e          	add    rcx,0x1e
ffff800000807d8b:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff800000807d90:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff800000807d94:	4c 8b 42 28          	mov    r8,QWORD PTR [rdx+0x28]
ffff800000807d98:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000807d9b:	48 63 d2             	movsxd rdx,edx
ffff800000807d9e:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000807da5:	ff ff ff 
ffff800000807da8:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000807dac:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffff800000807daf:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff800000807db2:	48 63 f6             	movsxd rsi,esi
ffff800000807db5:	48 83 c6 1e          	add    rsi,0x1e
ffff800000807db9:	48 8b 74 f1 08       	mov    rsi,QWORD PTR [rcx+rsi*8+0x8]
ffff800000807dbe:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000807dc5:	ff ff ff 
ffff800000807dc8:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000807dcc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807dcf:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807dd2:	48 63 c9             	movsxd rcx,ecx
ffff800000807dd5:	48 83 c1 1e          	add    rcx,0x1e
ffff800000807dd9:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
ffff800000807dde:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807de2:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807de6:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807dea:	48 89 c7             	mov    rdi,rax
ffff800000807ded:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1155
    ,request,args);
}
ffff800000807df0:	90                   	nop
ffff800000807df1:	c9                   	leave  
ffff800000807df2:	c3                   	ret    

ffff800000807df3 <set_errno>:
set_errno():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1156
void set_errno(int errno){
ffff800000807df3:	f3 0f 1e fa          	endbr64 
ffff800000807df7:	55                   	push   rbp
ffff800000807df8:	48 89 e5             	mov    rbp,rsp
ffff800000807dfb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807dfb <set_errno+0x8>
ffff800000807e02:	49 bb 5d 5d 11 00 00 	movabs r11,0x115d5d
ffff800000807e09:	00 00 00 
ffff800000807e0c:	4c 01 d8             	add    rax,r11
ffff800000807e0f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1157
    current->regs.errcode=errno;
ffff800000807e12:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807e19:	ff ff ff 
ffff800000807e1c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807e20:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807e23:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807e26:	48 63 d2             	movsxd rdx,edx
ffff800000807e29:	48 89 90 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1158
ffff800000807e30:	90                   	nop
ffff800000807e31:	5d                   	pop    rbp
ffff800000807e32:	c3                   	ret    
ffff800000807e33:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000807e3a:	00 00 00 
ffff800000807e3d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff800000807e40 <outb>:
outb():
ffff800000807e40:	66 89 fa             	mov    dx,di
ffff800000807e43:	66 89 f0             	mov    ax,si
ffff800000807e46:	ee                   	out    dx,al
ffff800000807e47:	e8 29 00 00 00       	call   ffff800000807e75 <io_delay>
ffff800000807e4c:	c3                   	ret    

ffff800000807e4d <outw>:
outw():
ffff800000807e4d:	66 89 fa             	mov    dx,di
ffff800000807e50:	66 89 f0             	mov    ax,si
ffff800000807e53:	66 ef                	out    dx,ax
ffff800000807e55:	90                   	nop
ffff800000807e56:	90                   	nop
ffff800000807e57:	90                   	nop
ffff800000807e58:	c3                   	ret    

ffff800000807e59 <inb>:
inb():
ffff800000807e59:	31 c0                	xor    eax,eax
ffff800000807e5b:	66 89 fa             	mov    dx,di
ffff800000807e5e:	ec                   	in     al,dx
ffff800000807e5f:	90                   	nop
ffff800000807e60:	90                   	nop
ffff800000807e61:	90                   	nop
ffff800000807e62:	c3                   	ret    

ffff800000807e63 <inw>:
inw():
ffff800000807e63:	31 c0                	xor    eax,eax
ffff800000807e65:	66 89 fa             	mov    dx,di
ffff800000807e68:	66 ed                	in     ax,dx
ffff800000807e6a:	90                   	nop
ffff800000807e6b:	90                   	nop
ffff800000807e6c:	90                   	nop
ffff800000807e6d:	c3                   	ret    

ffff800000807e6e <eoi>:
eoi():
ffff800000807e6e:	b0 20                	mov    al,0x20
ffff800000807e70:	e6 a0                	out    0xa0,al
ffff800000807e72:	e6 20                	out    0x20,al
ffff800000807e74:	c3                   	ret    

ffff800000807e75 <io_delay>:
io_delay():
ffff800000807e75:	90                   	nop
ffff800000807e76:	90                   	nop
ffff800000807e77:	90                   	nop
ffff800000807e78:	90                   	nop
ffff800000807e79:	c3                   	ret    

ffff800000807e7a <turn_on_int>:
turn_on_int():
ffff800000807e7a:	b0 f8                	mov    al,0xf8
ffff800000807e7c:	e6 21                	out    0x21,al
ffff800000807e7e:	e8 f2 ff ff ff       	call   ffff800000807e75 <io_delay>
ffff800000807e83:	b0 af                	mov    al,0xaf
ffff800000807e85:	e6 a1                	out    0xa1,al
ffff800000807e87:	e8 e9 ff ff ff       	call   ffff800000807e75 <io_delay>
ffff800000807e8c:	48 b8 00 70 10 00 00 	movabs rax,0xffff800000107000
ffff800000807e93:	80 ff ff 
ffff800000807e96:	0f 01 18             	lidt   [rax]
ffff800000807e99:	90                   	nop
ffff800000807e9a:	90                   	nop
ffff800000807e9b:	90                   	nop
ffff800000807e9c:	90                   	nop
ffff800000807e9d:	c3                   	ret    

ffff800000807e9e <report_back_trace_of_err>:
report_back_trace_of_err():
ffff800000807e9e:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000807ea3:	50                   	push   rax
ffff800000807ea4:	83 c4 08             	add    esp,0x8
ffff800000807ea7:	c3                   	ret    

ffff800000807ea8 <bt_msg>:
bt_msg():
ffff800000807ea8:	65 72 72             	gs jb  ffff800000807f1d <fill_desc+0x3a>
ffff800000807eab:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff800000807eac:	72 20                	jb     ffff800000807ece <init_gdt+0x11>
ffff800000807eae:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff800000807eaf:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
ffff800000807eb2:	72 73                	jb     ffff800000807f27 <fill_desc+0x44>
ffff800000807eb4:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
ffff800000807eb7:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # ffff800000eedb35 <_knl_end+0x2edb35>

ffff800000807ebd <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:9
#include "proc.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
ffff800000807ebd:	f3 0f 1e fa          	endbr64 
ffff800000807ec1:	55                   	push   rbp
ffff800000807ec2:	48 89 e5             	mov    rbp,rsp
ffff800000807ec5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807ec5 <init_gdt+0x8>
ffff800000807ecc:	49 bb 93 5c 11 00 00 	movabs r11,0x115c93
ffff800000807ed3:	00 00 00 
ffff800000807ed6:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:11
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    asm volatile("mov $0x48,%ax\r\n"
ffff800000807ed9:	66 b8 48 00          	mov    ax,0x48
ffff800000807edd:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:13
                 "ltr %ax");  
}
ffff800000807ee0:	90                   	nop
ffff800000807ee1:	5d                   	pop    rbp
ffff800000807ee2:	c3                   	ret    

ffff800000807ee3 <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
ffff800000807ee3:	f3 0f 1e fa          	endbr64 
ffff800000807ee7:	55                   	push   rbp
ffff800000807ee8:	48 89 e5             	mov    rbp,rsp
ffff800000807eeb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807eeb <fill_desc+0x8>
ffff800000807ef2:	49 bb 6d 5c 11 00 00 	movabs r11,0x115c6d
ffff800000807ef9:	00 00 00 
ffff800000807efc:	4c 01 d8             	add    rax,r11
ffff800000807eff:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000807f03:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000807f07:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffff800000807f0a:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_12=base&0xffff;
ffff800000807f0e:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807f15:	ff ff ff 
ffff800000807f18:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f1c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807f1f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807f22:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807f26:	48 01 ca             	add    rdx,rcx
ffff800000807f29:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000807f2d:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_3=(base>>16)&0xff;
ffff800000807f31:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807f35:	48 89 d6             	mov    rsi,rdx
ffff800000807f38:	48 c1 ee 10          	shr    rsi,0x10
ffff800000807f3c:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807f43:	ff ff ff 
ffff800000807f46:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f4a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807f4d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807f50:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807f54:	48 01 ca             	add    rdx,rcx
ffff800000807f57:	89 f1                	mov    ecx,esi
ffff800000807f59:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_4=(base>>24)&0xff;
ffff800000807f5c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807f60:	48 89 d6             	mov    rsi,rdx
ffff800000807f63:	48 c1 ee 18          	shr    rsi,0x18
ffff800000807f67:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807f6e:	ff ff ff 
ffff800000807f71:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f75:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807f78:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807f7b:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807f7f:	48 01 ca             	add    rdx,rcx
ffff800000807f82:	89 f1                	mov    ecx,esi
ffff800000807f84:	88 4a 07             	mov    BYTE PTR [rdx+0x7],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].base_5678=(base>>32)&0xffffffff;
ffff800000807f87:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807f8b:	48 89 d1             	mov    rcx,rdx
ffff800000807f8e:	48 c1 e9 20          	shr    rcx,0x20
ffff800000807f92:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807f99:	ff ff ff 
ffff800000807f9c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807fa0:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000807fa3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807fa6:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807faa:	48 01 f2             	add    rdx,rsi
ffff800000807fad:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].limit_lo16=limit&0xffff;
ffff800000807fb0:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807fb7:	ff ff ff 
ffff800000807fba:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807fbe:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807fc1:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807fc4:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807fc8:	48 01 ca             	add    rdx,rcx
ffff800000807fcb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807fcf:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:21
    gdt[index].attr=attr|((limit>>8)&0xf0);
ffff800000807fd2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000807fd6:	48 c1 ea 08          	shr    rdx,0x8
ffff800000807fda:	89 d1                	mov    ecx,edx
ffff800000807fdc:	66 81 e1 f0 00       	and    cx,0xf0
ffff800000807fe1:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807fe8:	ff ff ff 
ffff800000807feb:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807fef:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807ff2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807ff5:	48 c1 e0 04          	shl    rax,0x4
ffff800000807ff9:	48 01 c2             	add    rdx,rax
ffff800000807ffc:	89 c8                	mov    eax,ecx
ffff800000807ffe:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
ffff800000808002:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:23

}
ffff800000808006:	90                   	nop
ffff800000808007:	5d                   	pop    rbp
ffff800000808008:	c3                   	ret    

ffff800000808009 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
ffff800000808009:	f3 0f 1e fa          	endbr64 
ffff80000080800d:	55                   	push   rbp
ffff80000080800e:	48 89 e5             	mov    rbp,rsp
ffff800000808011:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808011 <fill_gate+0x8>
ffff800000808018:	49 bb 47 5b 11 00 00 	movabs r11,0x115b47
ffff80000080801f:	00 00 00 
ffff800000808022:	4c 01 d8             	add    rax,r11
ffff800000808025:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000808028:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff80000080802b:	89 d6                	mov    esi,edx
ffff80000080802d:	89 ca                	mov    edx,ecx
ffff80000080802f:	89 f1                	mov    ecx,esi
ffff800000808031:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffff800000808035:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    gate* ptr=gdt;
ffff800000808039:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000808040:	ff ff ff 
ffff800000808043:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808047:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080804a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_low=offset&0xffff;
ffff80000080804e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808051:	48 c1 e0 04          	shl    rax,0x4
ffff800000808055:	48 89 c2             	mov    rdx,rax
ffff800000808058:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080805c:	48 01 d0             	add    rax,rdx
ffff80000080805f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808062:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].offset_high=(offset>>16)&0xffff;
ffff800000808065:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808068:	48 c1 e0 04          	shl    rax,0x4
ffff80000080806c:	48 89 c2             	mov    rdx,rax
ffff80000080806f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808073:	48 01 d0             	add    rax,rdx
ffff800000808076:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808079:	c1 ea 10             	shr    edx,0x10
ffff80000080807c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].selector=selector;
ffff80000080807f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808082:	48 c1 e0 04          	shl    rax,0x4
ffff800000808086:	48 89 c2             	mov    rdx,rax
ffff800000808089:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080808d:	48 01 c2             	add    rdx,rax
ffff800000808090:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffff800000808094:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
    ptr[index].attr=attr;
ffff800000808098:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080809b:	48 c1 e0 04          	shl    rax,0x4
ffff80000080809f:	48 89 c2             	mov    rdx,rax
ffff8000008080a2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008080a6:	48 01 c2             	add    rdx,rax
ffff8000008080a9:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
ffff8000008080ad:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:32
}
ffff8000008080b1:	90                   	nop
ffff8000008080b2:	5d                   	pop    rbp
ffff8000008080b3:	c3                   	ret    

ffff8000008080b4 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:35

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
ffff8000008080b4:	f3 0f 1e fa          	endbr64 
ffff8000008080b8:	55                   	push   rbp
ffff8000008080b9:	48 89 e5             	mov    rbp,rsp
ffff8000008080bc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008080bc <fill_ldt_desc+0x8>
ffff8000008080c3:	49 bb 9c 5a 11 00 00 	movabs r11,0x115a9c
ffff8000008080ca:	00 00 00 
ffff8000008080cd:	4c 01 d8             	add    rax,r11
ffff8000008080d0:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff8000008080d3:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff8000008080d6:	89 d0                	mov    eax,edx
ffff8000008080d8:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff8000008080dc:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:41
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
ffff8000008080e0:	90                   	nop
ffff8000008080e1:	5d                   	pop    rbp
ffff8000008080e2:	c3                   	ret    
ffff8000008080e3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff8000008080ea:	00 00 00 
ffff8000008080ed:	0f 1f 00             	nop    DWORD PTR [rax]

ffff8000008080f0 <fill_desc>:
fill_desc():
ffff8000008080f0:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff8000008080f5:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
ffff8000008080fa:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff8000008080ff:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
ffff800000808104:	be 00 60 00 00       	mov    esi,0x6000
ffff800000808109:	c1 e2 03             	shl    edx,0x3
ffff80000080810c:	01 d6                	add    esi,edx
ffff80000080810e:	66 67 89 1e          	mov    WORD PTR [esi],bx
ffff800000808112:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
ffff800000808117:	c1 e8 10             	shr    eax,0x10
ffff80000080811a:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
ffff80000080811e:	c1 eb 10             	shr    ebx,0x10
ffff800000808121:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
ffff800000808125:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
ffff800000808129:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
ffff80000080812d:	c3                   	ret    

ffff80000080812e <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
ffff80000080812e:	f3 0f 1e fa          	endbr64 
ffff800000808132:	55                   	push   rbp
ffff800000808133:	48 89 e5             	mov    rbp,rsp
ffff800000808136:	41 57                	push   r15
ffff800000808138:	48 83 ec 08          	sub    rsp,0x8
ffff80000080813c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080813c <clock_c+0xe>
ffff800000808143:	49 bb 1c 5a 11 00 00 	movabs r11,0x115a1c
ffff80000080814a:	00 00 00 
ffff80000080814d:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    if(!manage_proc_lock)
ffff800000808150:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff800000808157:	ff ff ff 
ffff80000080815a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080815e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808160:	85 c0                	test   eax,eax
ffff800000808162:	75 17                	jne    ffff80000080817b <clock_c+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    {
        manage_proc();
ffff800000808164:	49 89 d7             	mov    r15,rdx
ffff800000808167:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080816c:	48 b9 d8 73 ee ff ff 	movabs rcx,0xffffffffffee73d8
ffff800000808173:	ff ff ff 
ffff800000808176:	48 01 d1             	add    rcx,rdx
ffff800000808179:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:16
    }
    //puts("1 disk req executed.");
ffff80000080817b:	90                   	nop
ffff80000080817c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000808180:	c9                   	leave  
ffff800000808181:	c3                   	ret    
ffff800000808182:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000808189:	00 00 00 
ffff80000080818c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff800000808190 <clock>:
clock():
ffff800000808190:	50                   	push   rax
ffff800000808191:	53                   	push   rbx
ffff800000808192:	51                   	push   rcx
ffff800000808193:	52                   	push   rdx
ffff800000808194:	57                   	push   rdi
ffff800000808195:	56                   	push   rsi
ffff800000808196:	41 50                	push   r8
ffff800000808198:	41 51                	push   r9
ffff80000080819a:	41 52                	push   r10
ffff80000080819c:	41 53                	push   r11
ffff80000080819e:	41 54                	push   r12
ffff8000008081a0:	41 55                	push   r13
ffff8000008081a2:	41 56                	push   r14
ffff8000008081a4:	41 57                	push   r15
ffff8000008081a6:	e8 39 cd ff ff       	call   ffff800000804ee4 <save_rsp>
ffff8000008081ab:	66 8c c0             	mov    ax,es
ffff8000008081ae:	50                   	push   rax
ffff8000008081af:	66 8c d8             	mov    ax,ds
ffff8000008081b2:	50                   	push   rax
ffff8000008081b3:	66 b8 10 00          	mov    ax,0x10
ffff8000008081b7:	8e c0                	mov    es,eax
ffff8000008081b9:	8e d8                	mov    ds,eax

ffff8000008081bb <clock.normal_part>:
clock.normal_part():
ffff8000008081bb:	b0 20                	mov    al,0x20
ffff8000008081bd:	e6 a0                	out    0xa0,al
ffff8000008081bf:	e6 20                	out    0x20,al
ffff8000008081c1:	e8 68 ff ff ff       	call   ffff80000080812e <clock_c>

ffff8000008081c6 <clock_ret>:
clock_ret():
ffff8000008081c6:	58                   	pop    rax
ffff8000008081c7:	8e d8                	mov    ds,eax
ffff8000008081c9:	58                   	pop    rax
ffff8000008081ca:	8e c0                	mov    es,eax
ffff8000008081cc:	41 5f                	pop    r15
ffff8000008081ce:	41 5e                	pop    r14
ffff8000008081d0:	41 5d                	pop    r13
ffff8000008081d2:	41 5c                	pop    r12
ffff8000008081d4:	41 5b                	pop    r11
ffff8000008081d6:	41 5a                	pop    r10
ffff8000008081d8:	41 59                	pop    r9
ffff8000008081da:	41 58                	pop    r8
ffff8000008081dc:	5e                   	pop    rsi
ffff8000008081dd:	5f                   	pop    rdi
ffff8000008081de:	5a                   	pop    rdx
ffff8000008081df:	59                   	pop    rcx
ffff8000008081e0:	5b                   	pop    rbx
ffff8000008081e1:	58                   	pop    rax
ffff8000008081e2:	48 cf                	iretq  

ffff8000008081e4 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:118
    return ind;
}
*/

int execute(char *path, char **argv)
{
ffff8000008081e4:	f3 0f 1e fa          	endbr64 
ffff8000008081e8:	55                   	push   rbp
ffff8000008081e9:	48 89 e5             	mov    rbp,rsp
ffff8000008081ec:	41 57                	push   r15
ffff8000008081ee:	53                   	push   rbx
ffff8000008081ef:	48 83 ec 20          	sub    rsp,0x20
ffff8000008081f3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008081f3 <execute+0xf>
ffff8000008081fa:	49 bb 65 59 11 00 00 	movabs r11,0x115965
ffff800000808201:	00 00 00 
ffff800000808204:	4c 01 db             	add    rbx,r11
ffff800000808207:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080820b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:121
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
ffff80000080820f:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
ffff800000808216:	c7 45 e0 ff ff ff ff 	mov    DWORD PTR [rbp-0x20],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
ffff80000080821d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808221:	be 00 10 00 00       	mov    esi,0x1000
ffff800000808226:	48 89 c7             	mov    rdi,rax
ffff800000808229:	49 89 df             	mov    r15,rbx
ffff80000080822c:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff800000808233:	ff ff ff 
ffff800000808236:	48 01 d8             	add    rax,rbx
ffff800000808239:	ff d0                	call   rax
ffff80000080823b:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff80000080823e:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000808242:	79 0a                	jns    ffff80000080824e <execute+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122 (discriminator 1)
ffff800000808244:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808249:	e9 81 00 00 00       	jmp    ffff8000008082cf <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124
    //
    char *p=path;
ffff80000080824e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808252:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125
    for(;*p!='\0';p++);
ffff800000808256:	eb 05                	jmp    ffff80000080825d <execute+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 2)
ffff800000808258:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 1)
ffff80000080825d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808261:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000808264:	84 c0                	test   al,al
ffff800000808266:	75 f0                	jne    ffff800000808258 <execute+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126
    for(;*p!='/'&&p>path;p--);
ffff800000808268:	eb 05                	jmp    ffff80000080826f <execute+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 3)
ffff80000080826a:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 1)
ffff80000080826f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808273:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000808276:	3c 2f                	cmp    al,0x2f
ffff800000808278:	74 0a                	je     ffff800000808284 <execute+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 2)
ffff80000080827a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080827e:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff800000808282:	77 e6                	ja     ffff80000080826a <execute+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    if(p>path)
ffff800000808284:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808288:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff80000080828c:	76 3c                	jbe    ffff8000008082ca <execute+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
    {
        *p='\0';
ffff80000080828e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808292:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
ffff800000808295:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808299:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080829e:	48 89 c7             	mov    rdi,rax
ffff8000008082a1:	49 89 df             	mov    r15,rbx
ffff8000008082a4:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff8000008082ab:	ff ff ff 
ffff8000008082ae:	48 01 d8             	add    rax,rbx
ffff8000008082b1:	ff d0                	call   rax
ffff8000008082b3:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffff8000008082b6:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff8000008082ba:	79 07                	jns    ffff8000008082c3 <execute+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130 (discriminator 1)
ffff8000008082bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008082c1:	eb 0c                	jmp    ffff8000008082cf <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131
        *p='/';
ffff8000008082c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008082c7:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:136
    }
    // extern struct file opened[];
    extern struct process task[];
    // int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
    return 0;
ffff8000008082ca:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:137
}
ffff8000008082cf:	48 83 c4 20          	add    rsp,0x20
ffff8000008082d3:	5b                   	pop    rbx
ffff8000008082d4:	41 5f                	pop    r15
ffff8000008082d6:	5d                   	pop    rbp
ffff8000008082d7:	c3                   	ret    

ffff8000008082d8 <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139

int sys_execve(char *path, int argc, char **argv) {
ffff8000008082d8:	f3 0f 1e fa          	endbr64 
ffff8000008082dc:	55                   	push   rbp
ffff8000008082dd:	48 89 e5             	mov    rbp,rsp
ffff8000008082e0:	41 57                	push   r15
ffff8000008082e2:	53                   	push   rbx
ffff8000008082e3:	48 83 ec 60          	sub    rsp,0x60
ffff8000008082e7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008082e7 <sys_execve+0xf>
ffff8000008082ee:	49 bb 71 58 11 00 00 	movabs r11,0x115871
ffff8000008082f5:	00 00 00 
ffff8000008082f8:	4c 01 db             	add    rbx,r11
ffff8000008082fb:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff8000008082ff:	89 75 a4             	mov    DWORD PTR [rbp-0x5c],esi
ffff800000808302:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:140
    int fno=-1,cwd_fno=-1;
ffff800000808306:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [rbp-0x30],0xffffffff
ffff80000080830d:	c7 45 cc ff ff ff ff 	mov    DWORD PTR [rbp-0x34],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
ffff800000808314:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808318:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080831d:	48 89 c7             	mov    rdi,rax
ffff800000808320:	49 89 df             	mov    r15,rbx
ffff800000808323:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff80000080832a:	ff ff ff 
ffff80000080832d:	48 01 d8             	add    rax,rbx
ffff800000808330:	ff d0                	call   rax
ffff800000808332:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
ffff800000808335:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
ffff800000808339:	79 0a                	jns    ffff800000808345 <sys_execve+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141 (discriminator 1)
ffff80000080833b:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
ffff800000808340:	e9 99 02 00 00       	jmp    ffff8000008085de <sys_execve+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:145

    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
ffff800000808345:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080834c:	ff ff ff 
ffff80000080834f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808353:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808356:	48 89 c7             	mov    rdi,rax
ffff800000808359:	49 89 df             	mov    r15,rbx
ffff80000080835c:	48 b8 61 94 ee ff ff 	movabs rax,0xffffffffffee9461
ffff800000808363:	ff ff ff 
ffff800000808366:	48 01 d8             	add    rax,rbx
ffff800000808369:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:149
    // current->regs.rsp=STACK_TOP;//清空栈
    extern TSS* tss;

    current->exef=current->openf[fno];//改变执行文件
ffff80000080836b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808372:	ff ff ff 
ffff800000808375:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808379:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080837c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808383:	ff ff ff 
ffff800000808386:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080838a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080838d:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
ffff800000808390:	48 63 c9             	movsxd rcx,ecx
ffff800000808393:	48 83 c1 1e          	add    rcx,0x1e
ffff800000808397:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080839c:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:150
    off_t entry= load_elf(current->exef);
ffff8000008083a3:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008083aa:	ff ff ff 
ffff8000008083ad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008083b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008083b4:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff8000008083bb:	48 89 c7             	mov    rdi,rax
ffff8000008083be:	49 89 df             	mov    r15,rbx
ffff8000008083c1:	48 b8 de b5 ee ff ff 	movabs rax,0xffffffffffeeb5de
ffff8000008083c8:	ff ff ff 
ffff8000008083cb:	48 01 d8             	add    rax,rbx
ffff8000008083ce:	ff d0                	call   rax
ffff8000008083d0:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:151
    if(entry==-1)
ffff8000008083d3:	83 7d c8 ff          	cmp    DWORD PTR [rbp-0x38],0xffffffff
ffff8000008083d7:	75 4d                	jne    ffff800000808426 <sys_execve+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:153
    {
        comprintf("failed execve, errcode:%d\n",current->regs.errcode);
ffff8000008083d9:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008083e0:	ff ff ff 
ffff8000008083e3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008083e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008083ea:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
ffff8000008083f1:	48 89 c6             	mov    rsi,rax
ffff8000008083f4:	48 b8 c8 d6 ff ff ff 	movabs rax,0xffffffffffffd6c8
ffff8000008083fb:	ff ff ff 
ffff8000008083fe:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000808402:	48 89 c7             	mov    rdi,rax
ffff800000808405:	49 89 df             	mov    r15,rbx
ffff800000808408:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080840d:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff800000808414:	ff ff ff 
ffff800000808417:	48 01 da             	add    rdx,rbx
ffff80000080841a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:154
        return -1;
ffff80000080841c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808421:	e9 b8 01 00 00       	jmp    ffff8000008085de <sys_execve+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:156
    }
    if(sys_close(fno)<0)return -1;
ffff800000808426:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000808429:	89 c7                	mov    edi,eax
ffff80000080842b:	49 89 df             	mov    r15,rbx
ffff80000080842e:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff800000808435:	ff ff ff 
ffff800000808438:	48 01 d8             	add    rax,rbx
ffff80000080843b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:159

    //sysret直接返回到新程序的main
    void *retp= (void *) entry;
ffff80000080843d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000808440:	48 98                	cdqe   
ffff800000808442:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:160
    stack_store_regs *rs= (stack_store_regs *) (tss->ists[0] - sizeof(stack_store_regs));
ffff800000808446:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff80000080844d:	ff ff ff 
ffff800000808450:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808454:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808457:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff80000080845b:	48 2d a8 00 00 00    	sub    rax,0xa8
ffff800000808461:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:161
    rs->r10= (unsigned long) retp;//返回地址已经xchg到r10
ffff800000808465:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000808469:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080846d:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163
    //第二个参数argv需要把内容从内核空间拷贝到用户堆里面
    size_t arglen=0;
ffff800000808471:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000808478:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164
    for(int i=0;i<argc;i++){
ffff800000808479:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000808480:	eb 39                	jmp    ffff8000008084bb <sys_execve+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165 (discriminator 3)
        arglen+= strlen(argv[i])+1;
ffff800000808482:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808485:	48 98                	cdqe   
ffff800000808487:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080848e:	00 
ffff80000080848f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808493:	48 01 d0             	add    rax,rdx
ffff800000808496:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808499:	48 89 c7             	mov    rdi,rax
ffff80000080849c:	49 89 df             	mov    r15,rbx
ffff80000080849f:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff8000008084a6:	ff ff ff 
ffff8000008084a9:	48 01 d8             	add    rax,rbx
ffff8000008084ac:	ff d0                	call   rax
ffff8000008084ae:	83 c0 01             	add    eax,0x1
ffff8000008084b1:	48 98                	cdqe   
ffff8000008084b3:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff8000008084b7:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 1)
ffff8000008084bb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008084be:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
ffff8000008084c1:	7c bf                	jl     ffff800000808482 <sys_execve+0x1aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:167
    }
    char* p= sys_malloc(arglen),pp=p;
ffff8000008084c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008084c7:	48 89 c7             	mov    rdi,rax
ffff8000008084ca:	49 89 df             	mov    r15,rbx
ffff8000008084cd:	48 b8 b2 83 ee ff ff 	movabs rax,0xffffffffffee83b2
ffff8000008084d4:	ff ff ff 
ffff8000008084d7:	48 01 d8             	add    rax,rbx
ffff8000008084da:	ff d0                	call   rax
ffff8000008084dc:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff8000008084e0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008084e4:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168
    for(int i=0;i<argc;i++){
ffff8000008084e7:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008084ee:	eb 6c                	jmp    ffff80000080855c <sys_execve+0x284>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169 (discriminator 3)
        strcpy(p,argv[i]);
ffff8000008084f0:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008084f3:	48 98                	cdqe   
ffff8000008084f5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008084fc:	00 
ffff8000008084fd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808501:	48 01 d0             	add    rax,rdx
ffff800000808504:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808507:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080850b:	48 89 d6             	mov    rsi,rdx
ffff80000080850e:	48 89 c7             	mov    rdi,rax
ffff800000808511:	49 89 df             	mov    r15,rbx
ffff800000808514:	48 b8 70 51 ef ff ff 	movabs rax,0xffffffffffef5170
ffff80000080851b:	ff ff ff 
ffff80000080851e:	48 01 d8             	add    rax,rbx
ffff800000808521:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:170 (discriminator 3)
        p+=strlen(argv[i])+1;
ffff800000808523:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808526:	48 98                	cdqe   
ffff800000808528:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080852f:	00 
ffff800000808530:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808534:	48 01 d0             	add    rax,rdx
ffff800000808537:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080853a:	48 89 c7             	mov    rdi,rax
ffff80000080853d:	49 89 df             	mov    r15,rbx
ffff800000808540:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff800000808547:	ff ff ff 
ffff80000080854a:	48 01 d8             	add    rax,rbx
ffff80000080854d:	ff d0                	call   rax
ffff80000080854f:	83 c0 01             	add    eax,0x1
ffff800000808552:	48 98                	cdqe   
ffff800000808554:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff800000808558:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 1)
ffff80000080855c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080855f:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
ffff800000808562:	7c 8c                	jl     ffff8000008084f0 <sys_execve+0x218>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174
    }
    
    //第一个参数argc
    if(current->dl){
ffff800000808564:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080856b:	ff ff ff 
ffff80000080856e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808572:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808575:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff80000080857b:	85 c0                	test   eax,eax
ffff80000080857d:	74 3f                	je     ffff8000008085be <sys_execve+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175
        rs->rsi=current->dl;
ffff80000080857f:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808586:	ff ff ff 
ffff800000808589:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080858d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808590:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff800000808596:	48 63 d0             	movsxd rdx,eax
ffff800000808599:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080859d:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:176
        rs->rdi=argc;
ffff8000008085a1:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008085a4:	48 63 d0             	movsxd rdx,eax
ffff8000008085a7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008085ab:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177
        rs->rdx=pp;
ffff8000008085af:	48 0f be 55 b7       	movsx  rdx,BYTE PTR [rbp-0x49]
ffff8000008085b4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008085b8:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
ffff8000008085bc:	eb 1b                	jmp    ffff8000008085d9 <sys_execve+0x301>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:179
    }else{
        rs->rsi=argc;
ffff8000008085be:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008085c1:	48 63 d0             	movsxd rdx,eax
ffff8000008085c4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008085c8:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:180
        rs->rdi=pp;
ffff8000008085cc:	48 0f be 55 b7       	movsx  rdx,BYTE PTR [rbp-0x49]
ffff8000008085d1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008085d5:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:186
    }
    
    //以下部分是临时测试代码
//    int (*pmain)(int argc,char **argv)=(int (*)(int, char **)) entry;
//    pmain(argc, (char **) rs->rdi);
    return 0;
ffff8000008085d9:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:187
}
ffff8000008085de:	48 83 c4 60          	add    rsp,0x60
ffff8000008085e2:	5b                   	pop    rbx
ffff8000008085e3:	41 5f                	pop    r15
ffff8000008085e5:	5d                   	pop    rbp
ffff8000008085e6:	c3                   	ret    

ffff8000008085e7 <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:189
int exec_call(char *path)
{
ffff8000008085e7:	f3 0f 1e fa          	endbr64 
ffff8000008085eb:	55                   	push   rbp
ffff8000008085ec:	48 89 e5             	mov    rbp,rsp
ffff8000008085ef:	41 57                	push   r15
ffff8000008085f1:	53                   	push   rbx
ffff8000008085f2:	48 83 ec 20          	sub    rsp,0x20
ffff8000008085f6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008085f6 <exec_call+0xf>
ffff8000008085fd:	49 bb 62 55 11 00 00 	movabs r11,0x115562
ffff800000808604:	00 00 00 
ffff800000808607:	4c 01 db             	add    rbx,r11
ffff80000080860a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190
    int pi= execute(path, NULL);
ffff80000080860e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808612:	be 00 00 00 00       	mov    esi,0x0
ffff800000808617:	48 89 c7             	mov    rdi,rax
ffff80000080861a:	49 89 df             	mov    r15,rbx
ffff80000080861d:	48 b8 8c a6 ee ff ff 	movabs rax,0xffffffffffeea68c
ffff800000808624:	ff ff ff 
ffff800000808627:	48 01 d8             	add    rax,rbx
ffff80000080862a:	ff d0                	call   rax
ffff80000080862c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:191
    int tss= _TSS_IND(pi)*8;
ffff80000080862f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808632:	01 c0                	add    eax,eax
ffff800000808634:	83 c0 05             	add    eax,0x5
ffff800000808637:	c1 e0 03             	shl    eax,0x3
ffff80000080863a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:194
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
ffff80000080863d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808640:	89 c7                	mov    edi,eax
ffff800000808642:	49 89 df             	mov    r15,rbx
ffff800000808645:	48 b8 94 76 ee ff ff 	movabs rax,0xffffffffffee7694
ffff80000080864c:	ff ff ff 
ffff80000080864f:	48 01 d8             	add    rax,rbx
ffff800000808652:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195
    while(task[pi].stat != TASK_ZOMBIE);
ffff800000808654:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195 (discriminator 1)
ffff800000808655:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080865c:	ff ff ff 
ffff80000080865f:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000808663:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808666:	48 98                	cdqe   
ffff800000808668:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080866f:	48 01 d0             	add    rax,rdx
ffff800000808672:	48 83 c0 10          	add    rax,0x10
ffff800000808676:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000808679:	83 f8 04             	cmp    eax,0x4
ffff80000080867c:	75 d7                	jne    ffff800000808655 <exec_call+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196
    return task[pi].exit_code;
ffff80000080867e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000808685:	ff ff ff 
ffff800000808688:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080868c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080868f:	48 98                	cdqe   
ffff800000808691:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808698:	48 01 d0             	add    rax,rdx
ffff80000080869b:	48 83 c0 20          	add    rax,0x20
ffff80000080869f:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:197
}
ffff8000008086a2:	48 83 c4 20          	add    rsp,0x20
ffff8000008086a6:	5b                   	pop    rbx
ffff8000008086a7:	41 5f                	pop    r15
ffff8000008086a9:	5d                   	pop    rbp
ffff8000008086aa:	c3                   	ret    

ffff8000008086ab <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:199
int proc_start()
{
ffff8000008086ab:	f3 0f 1e fa          	endbr64 
ffff8000008086af:	55                   	push   rbp
ffff8000008086b0:	48 89 e5             	mov    rbp,rsp
ffff8000008086b3:	41 57                	push   r15
ffff8000008086b5:	53                   	push   rbx
ffff8000008086b6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008086b6 <proc_start+0xb>
ffff8000008086bd:	49 bb a2 54 11 00 00 	movabs r11,0x1154a2
ffff8000008086c4:	00 00 00 
ffff8000008086c7:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:202
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
ffff8000008086ca:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008086d1:	ff ff ff 
ffff8000008086d4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008086d8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008086da:	48 98                	cdqe   
ffff8000008086dc:	48 69 d0 58 03 00 00 	imul   rdx,rax,0x358
ffff8000008086e3:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008086ea:	ff ff ff 
ffff8000008086ed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008086f1:	48 01 d0             	add    rax,rdx
ffff8000008086f4:	48 89 c7             	mov    rdi,rax
ffff8000008086f7:	49 89 df             	mov    r15,rbx
ffff8000008086fa:	48 b8 ce ab ee ff ff 	movabs rax,0xffffffffffeeabce
ffff800000808701:	ff ff ff 
ffff800000808704:	48 01 d8             	add    rax,rbx
ffff800000808707:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:204
    //释放进程资源
    sys_exit(0);
ffff800000808709:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080870e:	49 89 df             	mov    r15,rbx
ffff800000808711:	48 b8 54 80 ee ff ff 	movabs rax,0xffffffffffee8054
ffff800000808718:	ff ff ff 
ffff80000080871b:	48 01 d8             	add    rax,rbx
ffff80000080871e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:205
}
ffff800000808720:	90                   	nop
ffff800000808721:	5b                   	pop    rbx
ffff800000808722:	41 5f                	pop    r15
ffff800000808724:	5d                   	pop    rbp
ffff800000808725:	c3                   	ret    

ffff800000808726 <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:208
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
ffff800000808726:	f3 0f 1e fa          	endbr64 
ffff80000080872a:	55                   	push   rbp
ffff80000080872b:	48 89 e5             	mov    rbp,rsp
ffff80000080872e:	41 57                	push   r15
ffff800000808730:	53                   	push   rbx
ffff800000808731:	48 81 ec 10 03 00 00 	sub    rsp,0x310
ffff800000808738:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808738 <load_pe+0x12>
ffff80000080873f:	49 bb 20 54 11 00 00 	movabs r11,0x115420
ffff800000808746:	00 00 00 
ffff800000808749:	4c 01 db             	add    rbx,r11
ffff80000080874c:	48 89 bd e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:210
    // 读取文件头
    struct file *f=proc->exef;
ffff800000808753:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff80000080875a:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff800000808761:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:211
    int exefno=-1;
ffff800000808765:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080876c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000808773:	eb 32                	jmp    ffff8000008087a7 <load_pe+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:213
        if(current->openf[i]==f)
ffff800000808775:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080877c:	ff ff ff 
ffff80000080877f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808783:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808786:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808789:	48 63 d2             	movsxd rdx,edx
ffff80000080878c:	48 83 c2 1e          	add    rdx,0x1e
ffff800000808790:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000808795:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff800000808799:	75 08                	jne    ffff8000008087a3 <load_pe+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:215
        {
            exefno=i;
ffff80000080879b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080879e:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:216
            break;
ffff8000008087a1:	eb 0a                	jmp    ffff8000008087ad <load_pe+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff8000008087a3:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212 (discriminator 1)
ffff8000008087a7:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff8000008087ab:	7e c8                	jle    ffff800000808775 <load_pe+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218
        }
    if(exefno==-1)return ERR;
ffff8000008087ad:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff8000008087b1:	75 0a                	jne    ffff8000008087bd <load_pe+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218 (discriminator 1)
ffff8000008087b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008087b8:	e9 64 08 00 00       	jmp    ffff800000809021 <load_pe+0x8fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:222

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
ffff8000008087bd:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
ffff8000008087c4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008087c7:	ba 44 00 00 00       	mov    edx,0x44
ffff8000008087cc:	48 89 ce             	mov    rsi,rcx
ffff8000008087cf:	89 c7                	mov    edi,eax
ffff8000008087d1:	49 89 df             	mov    r15,rbx
ffff8000008087d4:	48 b8 5a e4 ee ff ff 	movabs rax,0xffffffffffeee45a
ffff8000008087db:	ff ff ff 
ffff8000008087de:	48 01 d8             	add    rax,rbx
ffff8000008087e1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:223
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
ffff8000008087e3:	48 8b 85 6c fe ff ff 	mov    rax,QWORD PTR [rbp-0x194]
ffff8000008087ea:	48 89 c1             	mov    rcx,rax
ffff8000008087ed:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008087f0:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008087f5:	48 89 ce             	mov    rsi,rcx
ffff8000008087f8:	89 c7                	mov    edi,eax
ffff8000008087fa:	49 89 df             	mov    r15,rbx
ffff8000008087fd:	48 b8 f6 e5 ee ff ff 	movabs rax,0xffffffffffeee5f6
ffff800000808804:	ff ff ff 
ffff800000808807:	48 01 d8             	add    rax,rbx
ffff80000080880a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:224
    sys_read(exefno, &tnth, sizeof(tnth));
ffff80000080880c:	48 8d 8d 20 fd ff ff 	lea    rcx,[rbp-0x2e0]
ffff800000808813:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808816:	ba 0c 01 00 00       	mov    edx,0x10c
ffff80000080881b:	48 89 ce             	mov    rsi,rcx
ffff80000080881e:	89 c7                	mov    edi,eax
ffff800000808820:	49 89 df             	mov    r15,rbx
ffff800000808823:	48 b8 5a e4 ee ff ff 	movabs rax,0xffffffffffeee45a
ffff80000080882a:	ff ff ff 
ffff80000080882d:	48 01 d8             	add    rax,rbx
ffff800000808830:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:227

    //是否需要移动base(先不检查)
    off_t nbase=tnth.OptionalHeader.ImageBase;
ffff800000808832:	48 8b 85 54 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2ac]
ffff800000808839:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:228
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
ffff80000080883c:	8b 85 74 fd ff ff    	mov    eax,DWORD PTR [rbp-0x28c]
ffff800000808842:	c1 e8 0c             	shr    eax,0xc
ffff800000808845:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:253
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
ffff800000808848:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080884b:	ba 00 00 00 00       	mov    edx,0x0
ffff800000808850:	be 00 00 00 00       	mov    esi,0x0
ffff800000808855:	89 c7                	mov    edi,eax
ffff800000808857:	49 89 df             	mov    r15,rbx
ffff80000080885a:	48 b8 f6 e5 ee ff ff 	movabs rax,0xffffffffffeee5f6
ffff800000808861:	ff ff ff 
ffff800000808864:	48 01 d8             	add    rax,rbx
ffff800000808867:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:254
    sys_read(exefno, nbase, PAGE_SIZE);
ffff800000808869:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff80000080886c:	48 98                	cdqe   
ffff80000080886e:	48 89 c1             	mov    rcx,rax
ffff800000808871:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808874:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808879:	48 89 ce             	mov    rsi,rcx
ffff80000080887c:	89 c7                	mov    edi,eax
ffff80000080887e:	49 89 df             	mov    r15,rbx
ffff800000808881:	48 b8 5a e4 ee ff ff 	movabs rax,0xffffffffffeee45a
ffff800000808888:	ff ff ff 
ffff80000080888b:	48 01 d8             	add    rax,rbx
ffff80000080888e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:256
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
ffff800000808890:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808893:	48 98                	cdqe   
ffff800000808895:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:257
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
ffff80000080889c:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff80000080889f:	48 63 d0             	movsxd rdx,eax
ffff8000008088a2:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008088a9:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff8000008088ad:	48 01 d0             	add    rax,rdx
ffff8000008088b0:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
ffff8000008088b7:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008088be:	48 83 c0 04          	add    rax,0x4
ffff8000008088c2:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
ffff8000008088c9:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008088d0:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
ffff8000008088d3:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262
    int page_count=prog_size/4096;
ffff8000008088d9:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff8000008088df:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008088e5:	85 c0                	test   eax,eax
ffff8000008088e7:	0f 48 c2             	cmovs  eax,edx
ffff8000008088ea:	c1 f8 0c             	sar    eax,0xc
ffff8000008088ed:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:264

    off_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
ffff8000008088f3:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008088fa:	8b 50 28             	mov    edx,DWORD PTR [rax+0x28]
ffff8000008088fd:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808900:	01 d0                	add    eax,edx
ffff800000808902:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:265
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
ffff800000808908:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
ffff80000080890e:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
ffff800000808914:	85 c0                	test   eax,eax
ffff800000808916:	0f 48 c2             	cmovs  eax,edx
ffff800000808919:	c1 f8 0a             	sar    eax,0xa
ffff80000080891c:	89 c1                	mov    ecx,eax
ffff80000080891e:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
ffff800000808924:	99                   	cdq    
ffff800000808925:	c1 ea 16             	shr    edx,0x16
ffff800000808928:	01 d0                	add    eax,edx
ffff80000080892a:	25 ff 03 00 00       	and    eax,0x3ff
ffff80000080892f:	29 d0                	sub    eax,edx
ffff800000808931:	01 c8                	add    eax,ecx
ffff800000808933:	85 c0                	test   eax,eax
ffff800000808935:	0f 95 c0             	setne  al
ffff800000808938:	0f b6 c0             	movzx  eax,al
ffff80000080893b:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:266
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
ffff800000808941:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff800000808947:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff80000080894d:	85 c0                	test   eax,eax
ffff80000080894f:	0f 48 c2             	cmovs  eax,edx
ffff800000808952:	c1 f8 15             	sar    eax,0x15
ffff800000808955:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:269

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
ffff80000080895b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808962:	89 c0                	mov    eax,eax
ffff800000808964:	48 05 0c 01 00 00    	add    rax,0x10c
ffff80000080896a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:271
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
ffff80000080896e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808975:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff800000808979:	0f b7 d0             	movzx  edx,ax
ffff80000080897c:	89 d0                	mov    eax,edx
ffff80000080897e:	c1 e0 02             	shl    eax,0x2
ffff800000808981:	01 d0                	add    eax,edx
ffff800000808983:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:270
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
ffff800000808986:	05 50 01 00 00       	add    eax,0x150
ffff80000080898b:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:272
    int align=nth->OptionalHeader.FileAlignment;
ffff800000808991:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808998:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
ffff80000080899b:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273
    data_start=data_start%align?data_start-data_start%align+align:data_start;
ffff8000008089a1:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008089a7:	99                   	cdq    
ffff8000008089a8:	f7 bd 4c ff ff ff    	idiv   DWORD PTR [rbp-0xb4]
ffff8000008089ae:	89 d0                	mov    eax,edx
ffff8000008089b0:	85 c0                	test   eax,eax
ffff8000008089b2:	74 23                	je     ffff8000008089d7 <load_pe+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 1)
ffff8000008089b4:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008089ba:	99                   	cdq    
ffff8000008089bb:	f7 bd 4c ff ff ff    	idiv   DWORD PTR [rbp-0xb4]
ffff8000008089c1:	89 d1                	mov    ecx,edx
ffff8000008089c3:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008089c9:	29 c8                	sub    eax,ecx
ffff8000008089cb:	89 c2                	mov    edx,eax
ffff8000008089cd:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
ffff8000008089d3:	01 d0                	add    eax,edx
ffff8000008089d5:	eb 06                	jmp    ffff8000008089dd <load_pe+0x2b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 2)
ffff8000008089d7:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 4)
ffff8000008089dd:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff8000008089e3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff8000008089ea:	e9 83 00 00 00       	jmp    ffff800000808a72 <load_pe+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:276
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
ffff8000008089ef:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008089f3:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff8000008089f6:	25 00 00 00 02       	and    eax,0x2000000
ffff8000008089fb:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:277
        if(disca)
ffff800000808a01:	83 bd b8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x148],0x0
ffff800000808a08:	75 5e                	jne    ffff800000808a68 <load_pe+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
ffff800000808a0a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808a0e:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff800000808a11:	89 c1                	mov    ecx,eax
ffff800000808a13:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808a16:	ba 00 00 00 00       	mov    edx,0x0
ffff800000808a1b:	48 89 ce             	mov    rsi,rcx
ffff800000808a1e:	89 c7                	mov    edi,eax
ffff800000808a20:	49 89 df             	mov    r15,rbx
ffff800000808a23:	48 b8 f6 e5 ee ff ff 	movabs rax,0xffffffffffeee5f6
ffff800000808a2a:	ff ff ff 
ffff800000808a2d:	48 01 d8             	add    rax,rbx
ffff800000808a30:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:281
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
ffff800000808a32:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808a36:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808a39:	89 c2                	mov    edx,eax
ffff800000808a3b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808a3f:	8b 48 0c             	mov    ecx,DWORD PTR [rax+0xc]
ffff800000808a42:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808a45:	01 c8                	add    eax,ecx
ffff800000808a47:	89 c0                	mov    eax,eax
ffff800000808a49:	48 89 c1             	mov    rcx,rax
ffff800000808a4c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808a4f:	48 89 ce             	mov    rsi,rcx
ffff800000808a52:	89 c7                	mov    edi,eax
ffff800000808a54:	49 89 df             	mov    r15,rbx
ffff800000808a57:	48 b8 5a e4 ee ff ff 	movabs rax,0xffffffffffeee45a
ffff800000808a5e:	ff ff ff 
ffff800000808a61:	48 01 d8             	add    rax,rbx
ffff800000808a64:	ff d0                	call   rax
ffff800000808a66:	eb 01                	jmp    ffff800000808a69 <load_pe+0x343>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:278
            continue;
ffff800000808a68:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff800000808a69:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
ffff800000808a6d:	48 83 45 e0 28       	add    QWORD PTR [rbp-0x20],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 1)
ffff800000808a72:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808a79:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff800000808a7d:	0f b7 c0             	movzx  eax,ax
ffff800000808a80:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000808a83:	0f 8c 66 ff ff ff    	jl     ffff8000008089ef <load_pe+0x2c9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:286

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
ffff800000808a89:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808a90:	48 05 90 00 00 00    	add    rax,0x90
ffff800000808a96:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:287
    if(impd->Size>0)
ffff800000808a9d:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000808aa4:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808aa7:	85 c0                	test   eax,eax
ffff800000808aa9:	0f 84 b5 02 00 00    	je     ffff800000808d64 <load_pe+0x63e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:289
    {
        int tmpi=impd->VirtualAddress+nbase;
ffff800000808aaf:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000808ab6:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808ab8:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808abb:	01 d0                	add    eax,edx
ffff800000808abd:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:290
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
ffff800000808ac3:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
ffff800000808ac9:	48 98                	cdqe   
ffff800000808acb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
        int dllp;
        while (impdes->Characteristics)
ffff800000808acf:	e9 82 02 00 00       	jmp    ffff800000808d56 <load_pe+0x630>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:295
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
ffff800000808ad4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808ad8:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000808adb:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808ade:	01 d0                	add    eax,edx
ffff800000808ae0:	89 c0                	mov    eax,eax
ffff800000808ae2:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:298
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
ffff800000808ae9:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000808af0:	48 ba e3 d6 ff ff ff 	movabs rdx,0xffffffffffffd6e3
ffff800000808af7:	ff ff ff 
ffff800000808afa:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000808afe:	48 89 d6             	mov    rsi,rdx
ffff800000808b01:	48 89 c7             	mov    rdi,rax
ffff800000808b04:	49 89 df             	mov    r15,rbx
ffff800000808b07:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff800000808b0e:	ff ff ff 
ffff800000808b11:	48 01 d8             	add    rax,rbx
ffff800000808b14:	ff d0                	call   rax
ffff800000808b16:	85 c0                	test   eax,eax
ffff800000808b18:	75 09                	jne    ffff800000808b23 <load_pe+0x3fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:300
            {
                dllp=0x1c00000;
ffff800000808b1a:	c7 45 cc 00 00 c0 01 	mov    DWORD PTR [rbp-0x34],0x1c00000
ffff800000808b21:	eb 3d                	jmp    ffff800000808b60 <load_pe+0x43a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:303
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
ffff800000808b23:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff800000808b2a:	48 89 c7             	mov    rdi,rax
ffff800000808b2d:	48 b8 ce ab ee ff ff 	movabs rax,0xffffffffffeeabce
ffff800000808b34:	ff ff ff 
ffff800000808b37:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000808b3b:	ff d0                	call   rax
ffff800000808b3d:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:306
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
ffff800000808b43:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
ffff800000808b49:	89 c7                	mov    edi,eax
ffff800000808b4b:	49 89 df             	mov    r15,rbx
ffff800000808b4e:	48 b8 d5 b4 ee ff ff 	movabs rax,0xffffffffffeeb4d5
ffff800000808b55:	ff ff ff 
ffff800000808b58:	48 01 d8             	add    rax,rbx
ffff800000808b5b:	ff d0                	call   rax
ffff800000808b5d:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:309
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
ffff800000808b60:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b63:	48 98                	cdqe   
ffff800000808b65:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:310
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
ffff800000808b6c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b6f:	48 63 d0             	movsxd rdx,eax
ffff800000808b72:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffff800000808b79:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000808b7d:	48 01 d0             	add    rax,rdx
ffff800000808b80:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:311
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
ffff800000808b87:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000808b8e:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
ffff800000808b94:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b97:	01 d0                	add    eax,edx
ffff800000808b99:	89 c0                	mov    eax,eax
ffff800000808b9b:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:312
            int funcn=dllexp->NumberOfNames;
ffff800000808ba2:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808ba9:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000808bac:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
            char **fnames=dllexp->AddressOfNames+dllp;
ffff800000808bb2:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808bb9:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
ffff800000808bbc:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808bbf:	01 d0                	add    eax,edx
ffff800000808bc1:	89 c0                	mov    eax,eax
ffff800000808bc3:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:314
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
ffff800000808bca:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808bd1:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff800000808bd4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808bd7:	01 d0                	add    eax,edx
ffff800000808bd9:	89 c0                	mov    eax,eax
ffff800000808bdb:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:315
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
ffff800000808be2:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808be9:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff800000808bec:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808bef:	01 d0                	add    eax,edx
ffff800000808bf1:	89 c0                	mov    eax,eax
ffff800000808bf3:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:317
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
ffff800000808bfa:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808c01:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808c04:	89 85 ec fe ff ff    	mov    DWORD PTR [rbp-0x114],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:319
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
ffff800000808c0a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808c0e:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff800000808c11:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808c14:	01 d0                	add    eax,edx
ffff800000808c16:	89 c0                	mov    eax,eax
ffff800000808c18:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:320
            char **siataddrs=impdes->FirstThunk+nbase;
ffff800000808c1c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808c20:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff800000808c23:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808c26:	01 d0                	add    eax,edx
ffff800000808c28:	89 c0                	mov    eax,eax
ffff800000808c2a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            while (*iataddrs)
ffff800000808c2e:	e9 10 01 00 00       	jmp    ffff800000808d43 <load_pe+0x61d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:324
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
ffff800000808c33:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808c37:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808c39:	85 c0                	test   eax,eax
ffff800000808c3b:	79 43                	jns    ffff800000808c80 <load_pe+0x55a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:327
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
ffff800000808c3d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808c41:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808c43:	25 ff ff ff 7f       	and    eax,0x7fffffff
ffff800000808c48:	2b 85 ec fe ff ff    	sub    eax,DWORD PTR [rbp-0x114]
ffff800000808c4e:	89 85 d8 fe ff ff    	mov    DWORD PTR [rbp-0x128],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:328
                    *iataddrs=funcaddrs[ord]+dllp;
ffff800000808c54:	8b 85 d8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x128]
ffff800000808c5a:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808c61:	00 
ffff800000808c62:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000808c69:	48 01 d0             	add    rax,rdx
ffff800000808c6c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808c6e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808c71:	01 d0                	add    eax,edx
ffff800000808c73:	89 c2                	mov    edx,eax
ffff800000808c75:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808c79:	89 10                	mov    DWORD PTR [rax],edx
ffff800000808c7b:	e9 b9 00 00 00       	jmp    ffff800000808d39 <load_pe+0x613>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
ffff800000808c80:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808c84:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808c86:	89 c0                	mov    eax,eax
ffff800000808c88:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:333
                    import_by_name_p+=2;//跳过开头两字节序号
ffff800000808c8f:	48 83 85 e0 fe ff ff 	add    QWORD PTR [rbp-0x120],0x2
ffff800000808c96:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:334
                    int i=0;
ffff800000808c97:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
                    for(;i<funcn;i++)
ffff800000808c9e:	e9 87 00 00 00       	jmp    ffff800000808d2a <load_pe+0x604>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:337
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
ffff800000808ca3:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808ca6:	48 98                	cdqe   
ffff800000808ca8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808caf:	00 
ffff800000808cb0:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000808cb7:	48 01 d0             	add    rax,rdx
ffff800000808cba:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808cbd:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffff800000808cc4:	48 89 d6             	mov    rsi,rdx
ffff800000808cc7:	48 89 c7             	mov    rdi,rax
ffff800000808cca:	49 89 df             	mov    r15,rbx
ffff800000808ccd:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff800000808cd4:	ff ff ff 
ffff800000808cd7:	48 01 d8             	add    rax,rbx
ffff800000808cda:	ff d0                	call   rax
ffff800000808cdc:	85 c0                	test   eax,eax
ffff800000808cde:	75 46                	jne    ffff800000808d26 <load_pe+0x600>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:339
                        {
                            int ordi=funcords[i];
ffff800000808ce0:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808ce3:	48 98                	cdqe   
ffff800000808ce5:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffff800000808ce9:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000808cf0:	48 01 d0             	add    rax,rdx
ffff800000808cf3:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808cf6:	98                   	cwde   
ffff800000808cf7:	89 85 dc fe ff ff    	mov    DWORD PTR [rbp-0x124],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:340
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
ffff800000808cfd:	8b 85 dc fe ff ff    	mov    eax,DWORD PTR [rbp-0x124]
ffff800000808d03:	48 98                	cdqe   
ffff800000808d05:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808d0c:	00 
ffff800000808d0d:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000808d14:	48 01 d0             	add    rax,rdx
ffff800000808d17:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808d19:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808d1c:	01 d0                	add    eax,edx
ffff800000808d1e:	89 c2                	mov    edx,eax
ffff800000808d20:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808d24:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
                    for(;i<funcn;i++)
ffff800000808d26:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335 (discriminator 1)
ffff800000808d2a:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808d2d:	3b 85 0c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xf4]
ffff800000808d33:	0f 8c 6a ff ff ff    	jl     ffff800000808ca3 <load_pe+0x57d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
                        }
                    }
                }
                iataddrs++;
ffff800000808d39:	48 83 45 c0 04       	add    QWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
                siataddrs++;
ffff800000808d3e:	48 83 45 b8 08       	add    QWORD PTR [rbp-0x48],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            while (*iataddrs)
ffff800000808d43:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808d47:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808d49:	85 c0                	test   eax,eax
ffff800000808d4b:	0f 85 e2 fe ff ff    	jne    ffff800000808c33 <load_pe+0x50d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:347
            }
            impdes++;
ffff800000808d51:	48 83 45 d0 14       	add    QWORD PTR [rbp-0x30],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
        while (impdes->Characteristics)
ffff800000808d56:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808d5a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808d5c:	85 c0                	test   eax,eax
ffff800000808d5e:	0f 85 70 fd ff ff    	jne    ffff800000808ad4 <load_pe+0x3ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:354
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
ffff800000808d64:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000808d6b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:355
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
ffff800000808d6c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808d73:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
ffff800000808d79:	85 c0                	test   eax,eax
ffff800000808d7b:	0f 84 e7 00 00 00    	je     ffff800000808e68 <load_pe+0x742>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000808d81:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808d88:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358
                                +(u32)nbase);
ffff800000808d8e:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000808d91:	01 d0                	add    eax,edx
ffff800000808d93:	89 c0                	mov    eax,eax
ffff800000808d95:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:359
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
ffff800000808d99:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808d9d:	48 83 c0 40          	add    rax,0x40
ffff800000808da1:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:360
        u16 *rtype=reloc+1;
ffff800000808da5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808da9:	48 83 c0 02          	add    rax,0x2
ffff800000808dad:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:361
        int old_base=nth->OptionalHeader.ImageBase;
ffff800000808db1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808db8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000808dbc:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
        while(relp->VirtualAddress){
ffff800000808dc2:	e9 93 00 00 00       	jmp    ffff800000808e5a <load_pe+0x734>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:363
            int pgva=relp->VirtualAddress+nbase;
ffff800000808dc7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808dcb:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808dcd:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808dd0:	01 d0                	add    eax,edx
ffff800000808dd2:	89 85 d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff800000808dd8:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
ffff800000808ddf:	eb 57                	jmp    ffff800000808e38 <load_pe+0x712>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff800000808de1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808de5:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808de8:	66 85 c0             	test   ax,ax
ffff800000808deb:	74 46                	je     ffff800000808e33 <load_pe+0x70d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:367
                int *at=*reloc+pgva;//要重定位的数据的地址
ffff800000808ded:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808df1:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808df4:	0f b7 d0             	movzx  edx,ax
ffff800000808df7:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
ffff800000808dfd:	01 d0                	add    eax,edx
ffff800000808dff:	48 98                	cdqe   
ffff800000808e01:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:368
                *at=*at-old_base+nbase;
ffff800000808e08:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808e0f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808e11:	2b 85 d4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x12c]
ffff800000808e17:	89 c2                	mov    edx,eax
ffff800000808e19:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808e1c:	01 c2                	add    edx,eax
ffff800000808e1e:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808e25:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:370
                //下一个
                reloc+=2;
ffff800000808e27:	48 83 45 a0 04       	add    QWORD PTR [rbp-0x60],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:371
                rtype+=2;
ffff800000808e2c:	48 83 45 98 04       	add    QWORD PTR [rbp-0x68],0x4
ffff800000808e31:	eb 01                	jmp    ffff800000808e34 <load_pe+0x70e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff800000808e33:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff800000808e34:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364 (discriminator 1)
ffff800000808e38:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808e3c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808e3f:	c1 e8 02             	shr    eax,0x2
ffff800000808e42:	89 c2                	mov    edx,eax
ffff800000808e44:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000808e47:	39 c2                	cmp    edx,eax
ffff800000808e49:	77 96                	ja     ffff800000808de1 <load_pe+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:373
            }
            relp=(int)relp+0x1000;
ffff800000808e4b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808e4f:	05 00 10 00 00       	add    eax,0x1000
ffff800000808e54:	48 98                	cdqe   
ffff800000808e56:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
        while(relp->VirtualAddress){
ffff800000808e5a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808e5e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808e60:	85 c0                	test   eax,eax
ffff800000808e62:	0f 85 5f ff ff ff    	jne    ffff800000808dc7 <load_pe+0x6a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:379
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
ffff800000808e68:	c7 85 00 fd ff ff 00 	mov    DWORD PTR [rbp-0x300],0x0
ffff800000808e6f:	00 00 00 
ffff800000808e72:	c7 85 04 fd ff ff 00 	mov    DWORD PTR [rbp-0x2fc],0x0
ffff800000808e79:	00 00 00 
ffff800000808e7c:	48 c7 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],0x0
ffff800000808e83:	00 00 00 00 
ffff800000808e87:	48 c7 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],0x0
ffff800000808e8e:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:386
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff800000808e92:	48 8d 85 00 fd ff ff 	lea    rax,[rbp-0x300]
ffff800000808e99:	ba 18 00 00 00       	mov    edx,0x18
ffff800000808e9e:	48 89 c6             	mov    rsi,rax
ffff800000808ea1:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000808ea6:	49 89 df             	mov    r15,rbx
ffff800000808ea9:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000808eb0:	ff ff ff 
ffff800000808eb3:	48 01 d8             	add    rax,rbx
ffff800000808eb6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
ffff800000808eb8:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808ebf:	ff ff ff 
ffff800000808ec2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808ec6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808ec8:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808ecf:	ff ff ff 
ffff800000808ed2:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808ed6:	48 98                	cdqe   
ffff800000808ed8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808edf:	48 01 d0             	add    rax,rdx
ffff800000808ee2:	48 83 c0 20          	add    rax,0x20
ffff800000808ee6:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x1000000
ffff800000808eed:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:388
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff800000808eee:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808ef5:	ff ff ff 
ffff800000808ef8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808efc:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808efe:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808f05:	ff ff ff 
ffff800000808f08:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808f0c:	48 98                	cdqe   
ffff800000808f0e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808f15:	48 01 d0             	add    rax,rdx
ffff800000808f18:	48 83 c0 20          	add    rax,0x20
ffff800000808f1c:	48 c7 40 10 00 10 00 	mov    QWORD PTR [rax+0x10],0x1001000
ffff800000808f23:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
ffff800000808f24:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808f2b:	ff ff ff 
ffff800000808f2e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f32:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808f34:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808f3b:	ff ff ff 
ffff800000808f3e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808f42:	48 98                	cdqe   
ffff800000808f44:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808f4b:	48 01 d0             	add    rax,rdx
ffff800000808f4e:	48 83 c0 30          	add    rax,0x30
ffff800000808f52:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000808f59:	7f 00 00 
ffff800000808f5c:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
ffff800000808f60:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff800000808f66:	48 98                	cdqe   
ffff800000808f68:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:398
    int ecode=main(0,NULL);
ffff800000808f6f:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff800000808f76:	be 00 00 00 00       	mov    esi,0x0
ffff800000808f7b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808f80:	ff d0                	call   rax
ffff800000808f82:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:399
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
ffff800000808f88:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
ffff800000808f8e:	48 98                	cdqe   
ffff800000808f90:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0x14
ffff800000808f97:	14 00 00 00 
ffff800000808f9b:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffff800000808fa2:	48 c7 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],0x0
ffff800000808fa9:	00 00 00 00 
ffff800000808fad:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
ffff800000808fb4:	00 00 00 00 
ffff800000808fb8:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0x0
ffff800000808fbf:	00 00 00 00 
ffff800000808fc3:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffff800000808fca:	00 00 00 00 
ffff800000808fce:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0x0
ffff800000808fd5:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        asm volatile(".byte 0x48\n"
ffff800000808fd9:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffff800000808fe0:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffff800000808fe7:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
ffff800000808fee:	48 8b 95 98 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x168]
ffff800000808ff5:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
ffff800000808ffc:	4c 8b 85 88 fe ff ff 	mov    r8,QWORD PTR [rbp-0x178]
ffff800000809003:	4c 8b 8d 80 fe ff ff 	mov    r9,QWORD PTR [rbp-0x180]
ffff80000080900a:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff80000080900d:	48 c7 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],0x0
ffff800000809014:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff800000809018:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:402 (discriminator 1)
    //
    //不应该执行到这
    while(1);
ffff80000080901f:	eb fe                	jmp    ffff80000080901f <load_pe+0x8f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:404 (discriminator 2)
    return task[cur_proc].exit_code;
}
ffff800000809021:	48 81 c4 10 03 00 00 	add    rsp,0x310
ffff800000809028:	5b                   	pop    rbx
ffff800000809029:	41 5f                	pop    r15
ffff80000080902b:	5d                   	pop    rbp
ffff80000080902c:	c3                   	ret    

ffff80000080902d <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:407

int get_module_addr(int mi)
{
ffff80000080902d:	f3 0f 1e fa          	endbr64 
ffff800000809031:	55                   	push   rbp
ffff800000809032:	48 89 e5             	mov    rbp,rsp
ffff800000809035:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809035 <get_module_addr+0x8>
ffff80000080903c:	49 bb 23 4b 11 00 00 	movabs r11,0x114b23
ffff800000809043:	00 00 00 
ffff800000809046:	4c 01 d8             	add    rax,r11
ffff800000809049:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:408
    return modules[mi].base;
ffff80000080904c:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809053:	ff ff ff 
ffff800000809056:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080905a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080905d:	48 98                	cdqe   
ffff80000080905f:	48 c1 e0 05          	shl    rax,0x5
ffff800000809063:	48 01 d0             	add    rax,rdx
ffff800000809066:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:409
}
ffff800000809068:	5d                   	pop    rbp
ffff800000809069:	c3                   	ret    

ffff80000080906a <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:411
int dispose_library(int dlln)
{
ffff80000080906a:	f3 0f 1e fa          	endbr64 
ffff80000080906e:	55                   	push   rbp
ffff80000080906f:	48 89 e5             	mov    rbp,rsp
ffff800000809072:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809072 <dispose_library+0x8>
ffff800000809079:	49 bb e6 4a 11 00 00 	movabs r11,0x114ae6
ffff800000809080:	00 00 00 
ffff800000809083:	4c 01 d8             	add    rax,r11
ffff800000809086:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412
    if(dlln<0||dlln>=MAX_DLLS)return -1;
ffff800000809089:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000080908d:	78 09                	js     ffff800000809098 <dispose_library+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412 (discriminator 2)
ffff80000080908f:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffff800000809096:	7e 07                	jle    ffff80000080909f <dispose_library+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412 (discriminator 3)
ffff800000809098:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080909d:	eb 2c                	jmp    ffff8000008090cb <dispose_library+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:417
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
ffff80000080909f:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff8000008090a6:	ff ff ff 
ffff8000008090a9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008090ad:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008090b0:	48 98                	cdqe   
ffff8000008090b2:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
ffff8000008090b9:	48 01 d0             	add    rax,rdx
ffff8000008090bc:	48 83 c0 08          	add    rax,0x8
ffff8000008090c0:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:418
    return 0;
ffff8000008090c6:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:419
}
ffff8000008090cb:	5d                   	pop    rbp
ffff8000008090cc:	c3                   	ret    

ffff8000008090cd <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:467

    return 0;
} */

int sys_insmod(char *path)
{
ffff8000008090cd:	f3 0f 1e fa          	endbr64 
ffff8000008090d1:	55                   	push   rbp
ffff8000008090d2:	48 89 e5             	mov    rbp,rsp
ffff8000008090d5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008090d5 <sys_insmod+0x8>
ffff8000008090dc:	49 bb 83 4a 11 00 00 	movabs r11,0x114a83
ffff8000008090e3:	00 00 00 
ffff8000008090e6:	4c 01 d8             	add    rax,r11
ffff8000008090e9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:469

}
ffff8000008090ed:	90                   	nop
ffff8000008090ee:	5d                   	pop    rbp
ffff8000008090ef:	c3                   	ret    

ffff8000008090f0 <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:471
int sys_rmmod(char *name)
{
ffff8000008090f0:	f3 0f 1e fa          	endbr64 
ffff8000008090f4:	55                   	push   rbp
ffff8000008090f5:	48 89 e5             	mov    rbp,rsp
ffff8000008090f8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008090f8 <sys_rmmod+0x8>
ffff8000008090ff:	49 bb 60 4a 11 00 00 	movabs r11,0x114a60
ffff800000809106:	00 00 00 
ffff800000809109:	4c 01 d8             	add    rax,r11
ffff80000080910c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:473

}
ffff800000809110:	90                   	nop
ffff800000809111:	5d                   	pop    rbp
ffff800000809112:	c3                   	ret    

ffff800000809113 <new_load_elf>:
new_load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:474
off_t new_load_elf(struct file* elf){
ffff800000809113:	f3 0f 1e fa          	endbr64 
ffff800000809117:	55                   	push   rbp
ffff800000809118:	48 89 e5             	mov    rbp,rsp
ffff80000080911b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080911b <new_load_elf+0x8>
ffff800000809122:	49 bb 3d 4a 11 00 00 	movabs r11,0x114a3d
ffff800000809129:	00 00 00 
ffff80000080912c:	4c 01 d8             	add    rax,r11
ffff80000080912f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:480
    //读取文件头
    //if ET_DYN
    //load dl
    //else
    // load elf
}
ffff800000809133:	90                   	nop
ffff800000809134:	5d                   	pop    rbp
ffff800000809135:	c3                   	ret    

ffff800000809136 <load_elf>:
load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:482
//切换进程前,在execve系统调用中
off_t load_elf(struct file *elf) {
ffff800000809136:	f3 0f 1e fa          	endbr64 
ffff80000080913a:	55                   	push   rbp
ffff80000080913b:	48 89 e5             	mov    rbp,rsp
ffff80000080913e:	41 57                	push   r15
ffff800000809140:	53                   	push   rbx
ffff800000809141:	48 81 ec 30 01 00 00 	sub    rsp,0x130
ffff800000809148:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809148 <load_elf+0x12>
ffff80000080914f:	49 bb 10 4a 11 00 00 	movabs r11,0x114a10
ffff800000809156:	00 00 00 
ffff800000809159:	4c 01 db             	add    rbx,r11
ffff80000080915c:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:484
    // 读取文件头
    struct file* elf_storage=elf;
ffff800000809163:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080916a:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485
    off_t tmpla=kmalloc();
ffff80000080916e:	49 89 df             	mov    r15,rbx
ffff800000809171:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809176:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080917d:	ff ff ff 
ffff800000809180:	48 01 da             	add    rdx,rbx
ffff800000809183:	ff d2                	call   rdx
ffff800000809185:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:486
    off_t shla=kmalloc();
ffff80000080918b:	49 89 df             	mov    r15,rbx
ffff80000080918e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809193:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080919a:	ff ff ff 
ffff80000080919d:	48 01 da             	add    rdx,rbx
ffff8000008091a0:	ff d2                	call   rdx
ffff8000008091a2:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:487
    if(tmpla==-1)
ffff8000008091a8:	83 bd 7c ff ff ff ff 	cmp    DWORD PTR [rbp-0x84],0xffffffff
ffff8000008091af:	75 26                	jne    ffff8000008091d7 <load_elf+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:489
    {
        current->regs.errcode=-ENOMEM;
ffff8000008091b1:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008091b8:	ff ff ff 
ffff8000008091bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008091bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008091c2:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff8000008091c9:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:490
        return -1;
ffff8000008091cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008091d2:	e9 5f 0a 00 00       	jmp    ffff800000809c36 <load_elf+0xb00>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:492
    }
ready:
ffff8000008091d7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:493
    elf->position=0;
ffff8000008091d8:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008091df:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:495
    //读取文件头
    elf->f_ops->read(elf, (char *) tmpla, PAGE_4K_SIZE, &elf->position);
ffff8000008091e6:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008091ed:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008091f1:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff8000008091f5:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
ffff8000008091fc:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff800000809202:	48 98                	cdqe   
ffff800000809204:	48 89 c6             	mov    rsi,rax
ffff800000809207:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080920e:	48 89 d1             	mov    rcx,rdx
ffff800000809211:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809216:	48 89 c7             	mov    rdi,rax
ffff800000809219:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:497

    Elf64_Ehdr *ehdr=(Elf64_Phdr*)tmpla;
ffff80000080921c:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff800000809222:	48 98                	cdqe   
ffff800000809224:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:498
    u16 entn=ehdr->e_phnum;
ffff80000080922b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809232:	0f b7 40 38          	movzx  eax,WORD PTR [rax+0x38]
ffff800000809236:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:499
    u16 ents=ehdr->e_phentsize;
ffff80000080923d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809244:	0f b7 40 36          	movzx  eax,WORD PTR [rax+0x36]
ffff800000809248:	66 89 85 6c ff ff ff 	mov    WORD PTR [rbp-0x94],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:500
    elf->position=ehdr->e_shoff;
ffff80000080924f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809256:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080925a:	48 89 c2             	mov    rdx,rax
ffff80000080925d:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000809264:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:501
    elf->f_ops->read(elf,(char*)shla,ehdr->e_shnum*ehdr->e_shentsize,&elf->position);
ffff800000809267:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080926e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809272:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff800000809276:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffff80000080927d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809284:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff800000809288:	0f b7 d0             	movzx  edx,ax
ffff80000080928b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809292:	0f b7 40 3a          	movzx  eax,WORD PTR [rax+0x3a]
ffff800000809296:	0f b7 c0             	movzx  eax,ax
ffff800000809299:	0f af c2             	imul   eax,edx
ffff80000080929c:	48 63 d0             	movsxd rdx,eax
ffff80000080929f:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff8000008092a5:	48 98                	cdqe   
ffff8000008092a7:	48 89 c6             	mov    rsi,rax
ffff8000008092aa:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008092b1:	48 89 c7             	mov    rdi,rax
ffff8000008092b4:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:502
    struct Elf64_Shdr* sh= (struct Elf64_Shdr *) (shla);
ffff8000008092b7:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff8000008092bd:	48 98                	cdqe   
ffff8000008092bf:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:504
    //TODO  加载shdr表
    Elf64_Phdr *ph= (Elf64_Phdr *) (tmpla + ehdr->e_phoff);
ffff8000008092c6:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff8000008092cc:	48 63 d0             	movsxd rdx,eax
ffff8000008092cf:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008092d6:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008092da:	48 01 d0             	add    rax,rdx
ffff8000008092dd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:505
    size_t tot_sz=0;
ffff8000008092e1:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
ffff8000008092e8:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:506
    off_t base=ph->p_vaddr,offset=0;
ffff8000008092ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008092f0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008092f4:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
ffff8000008092fa:	c7 85 50 ff ff ff 00 	mov    DWORD PTR [rbp-0xb0],0x0
ffff800000809301:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:507
    int reloc_flag=0;
ffff800000809304:	c7 85 4c ff ff ff 00 	mov    DWORD PTR [rbp-0xb4],0x0
ffff80000080930b:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:531
            offset=new_base-base;
        }
    } */
    

    module* mod=0;
ffff80000080930e:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000809315:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533
    //module项设置
    for(int i=0;i<MAX_MODULES;i++){
ffff800000809316:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080931d:	e9 c3 00 00 00       	jmp    ffff8000008093e5 <load_elf+0x2af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:534
        if(modules[i].type==ET_NONE){
ffff800000809322:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000809329:	ff ff ff 
ffff80000080932c:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000809330:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809333:	48 98                	cdqe   
ffff800000809335:	48 c1 e0 05          	shl    rax,0x5
ffff800000809339:	48 01 d0             	add    rax,rdx
ffff80000080933c:	48 8b 40 0c          	mov    rax,QWORD PTR [rax+0xc]
ffff800000809340:	48 85 c0             	test   rax,rax
ffff800000809343:	0f 85 98 00 00 00    	jne    ffff8000008093e1 <load_elf+0x2ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:535
            modules[i].type=ehdr->e_type;
ffff800000809349:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809350:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000809354:	0f b7 c0             	movzx  eax,ax
ffff800000809357:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080935e:	ff ff ff 
ffff800000809361:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff800000809365:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809368:	48 63 d2             	movsxd rdx,edx
ffff80000080936b:	48 c1 e2 05          	shl    rdx,0x5
ffff80000080936f:	48 01 ca             	add    rdx,rcx
ffff800000809372:	48 89 42 0c          	mov    QWORD PTR [rdx+0xc],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:536
            modules[i].load_offset=offset;
ffff800000809376:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080937d:	ff ff ff 
ffff800000809380:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000809384:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809387:	48 98                	cdqe   
ffff800000809389:	48 c1 e0 05          	shl    rax,0x5
ffff80000080938d:	48 01 d0             	add    rax,rdx
ffff800000809390:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffff800000809394:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff80000080939a:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:537
            modules[i].base=base;
ffff80000080939c:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008093a3:	ff ff ff 
ffff8000008093a6:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff8000008093aa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008093ad:	48 98                	cdqe   
ffff8000008093af:	48 c1 e0 05          	shl    rax,0x5
ffff8000008093b3:	48 01 c2             	add    rdx,rax
ffff8000008093b6:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff8000008093bc:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:538
            mod=modules+i;
ffff8000008093be:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008093c1:	48 98                	cdqe   
ffff8000008093c3:	48 c1 e0 05          	shl    rax,0x5
ffff8000008093c7:	48 89 c2             	mov    rdx,rax
ffff8000008093ca:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008093d1:	ff ff ff 
ffff8000008093d4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008093d8:	48 01 d0             	add    rax,rdx
ffff8000008093db:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:539
            break;
ffff8000008093df:	eb 0e                	jmp    ffff8000008093ef <load_elf+0x2b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533 (discriminator 2)
    for(int i=0;i<MAX_MODULES;i++){
ffff8000008093e1:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533 (discriminator 1)
ffff8000008093e5:	83 7d dc 7f          	cmp    DWORD PTR [rbp-0x24],0x7f
ffff8000008093e9:	0f 8e 33 ff ff ff    	jle    ffff800000809322 <load_elf+0x1ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:542
        }
    }
    for(int i=0;i<entn;i++){
ffff8000008093ef:	c7 85 48 ff ff ff 00 	mov    DWORD PTR [rbp-0xb8],0x0
ffff8000008093f6:	00 00 00 
ffff8000008093f9:	90                   	nop
ffff8000008093fa:	0f b7 85 6e ff ff ff 	movzx  eax,WORD PTR [rbp-0x92]
ffff800000809401:	39 85 48 ff ff ff    	cmp    DWORD PTR [rbp-0xb8],eax
ffff800000809407:	0f 8d d4 00 00 00    	jge    ffff8000008094e1 <load_elf+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:547
        
        if((ph[i].p_type|PT_INTERP)!=0){
            //load dl
            //
            if(current->dl)break;
ffff80000080940d:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809414:	ff ff ff 
ffff800000809417:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080941b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080941e:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff800000809424:	85 c0                	test   eax,eax
ffff800000809426:	0f 85 b4 00 00 00    	jne    ffff8000008094e0 <load_elf+0x3aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:548
            int fd=sys_open("/mnt/dl.so",O_EXEC);
ffff80000080942c:	be 00 10 00 00       	mov    esi,0x1000
ffff800000809431:	48 b8 eb d6 ff ff ff 	movabs rax,0xffffffffffffd6eb
ffff800000809438:	ff ff ff 
ffff80000080943b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080943f:	48 89 c7             	mov    rdi,rax
ffff800000809442:	49 89 df             	mov    r15,rbx
ffff800000809445:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff80000080944c:	ff ff ff 
ffff80000080944f:	48 01 d8             	add    rax,rbx
ffff800000809452:	ff d0                	call   rax
ffff800000809454:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:549
            kmfree(tmpla);
ffff80000080945a:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff800000809460:	48 98                	cdqe   
ffff800000809462:	48 89 c7             	mov    rdi,rax
ffff800000809465:	49 89 df             	mov    r15,rbx
ffff800000809468:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080946f:	ff ff ff 
ffff800000809472:	48 01 d8             	add    rax,rbx
ffff800000809475:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:550
            kmfree(shla);
ffff800000809477:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff80000080947d:	48 98                	cdqe   
ffff80000080947f:	48 89 c7             	mov    rdi,rax
ffff800000809482:	49 89 df             	mov    r15,rbx
ffff800000809485:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080948c:	ff ff ff 
ffff80000080948f:	48 01 d8             	add    rax,rbx
ffff800000809492:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:551
            current->dl=fd;
ffff800000809494:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080949b:	ff ff ff 
ffff80000080949e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008094a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008094a5:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
ffff8000008094ab:	89 90 54 03 00 00    	mov    DWORD PTR [rax+0x354],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:552
            elf=current->openf[fd];
ffff8000008094b1:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008094b8:	ff ff ff 
ffff8000008094bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008094bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008094c2:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
ffff8000008094c8:	48 63 d2             	movsxd rdx,edx
ffff8000008094cb:	48 83 c2 1e          	add    rdx,0x1e
ffff8000008094cf:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff8000008094d4:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:553
            goto ready;
ffff8000008094db:	e9 f8 fc ff ff       	jmp    ffff8000008091d8 <load_elf+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:547
            if(current->dl)break;
ffff8000008094e0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:556
        }
    }
    for(int i=0;i<entn;i++){
ffff8000008094e1:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff8000008094e8:	e9 9d 01 00 00       	jmp    ffff80000080968a <load_elf+0x554>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:559
        //加载段
        if((ph->p_type|PT_LOAD)!=0){
            unsigned long off=ph->p_offset;
ffff8000008094ed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008094f1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008094f5:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:560
            unsigned long fs=ph->p_filesz;
ffff8000008094fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809500:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000809504:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:561
            size_t ms=ph->p_memsz;
ffff80000080950b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080950f:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000809513:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:562
            char* vptr= (char *) ph->p_vaddr+offset;
ffff80000080951a:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff800000809520:	48 63 d0             	movsxd rdx,eax
ffff800000809523:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809527:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080952b:	48 01 d0             	add    rax,rdx
ffff80000080952e:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:563
            elf->position=off;
ffff800000809535:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff80000080953c:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000809543:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:564
            if(off==0){
ffff800000809546:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
ffff80000080954d:	00 
ffff80000080954e:	75 10                	jne    ffff800000809560 <load_elf+0x42a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:565
                mod->header=vptr;
ffff800000809550:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000809557:	89 c2                	mov    edx,eax
ffff800000809559:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080955d:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:568
            }
            //先映射好内存
            int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff800000809560:	c7 85 f4 fe ff ff 05 	mov    DWORD PTR [rbp-0x10c],0x5
ffff800000809567:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:570
            if((ph->p_flags|PF_X)!=0||(ph->p_flags|PF_W)!=0)
                attr|=PAGE_RWX;
ffff80000080956a:	83 8d f4 fe ff ff 02 	or     DWORD PTR [rbp-0x10c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:571
            int pgc=(ms-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff800000809571:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000809578:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080957e:	48 c1 e8 0c          	shr    rax,0xc
ffff800000809582:	89 85 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572
            for(int j=0;j<pgc;j++){
ffff800000809588:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff80000080958f:	e9 ad 00 00 00       	jmp    ffff800000809641 <load_elf+0x50b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:573
                off_t dest=(off_t) (vptr + j * PAGE_4K_SIZE);
ffff800000809594:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000809597:	c1 e0 0c             	shl    eax,0xc
ffff80000080959a:	48 63 d0             	movsxd rdx,eax
ffff80000080959d:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008095a4:	48 01 d0             	add    rax,rdx
ffff8000008095a7:	89 85 ec fe ff ff    	mov    DWORD PTR [rbp-0x114],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:574
                off_t lma=pmalloc();
ffff8000008095ad:	49 89 df             	mov    r15,rbx
ffff8000008095b0:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008095b5:	48 ba 8c 50 ee ff ff 	movabs rdx,0xffffffffffee508c
ffff8000008095bc:	ff ff ff 
ffff8000008095bf:	48 01 da             	add    rdx,rbx
ffff8000008095c2:	ff d2                	call   rdx
ffff8000008095c4:	89 85 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:575
                if(lma==-1)
ffff8000008095ca:	83 bd e8 fe ff ff ff 	cmp    DWORD PTR [rbp-0x118],0xffffffff
ffff8000008095d1:	75 26                	jne    ffff8000008095f9 <load_elf+0x4c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:577
                {
                    current->regs.errcode=-ENOMEM;
ffff8000008095d3:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008095da:	ff ff ff 
ffff8000008095dd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008095e1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008095e4:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff8000008095eb:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:578
                    return -1;
ffff8000008095ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008095f4:	e9 3d 06 00 00       	jmp    ffff800000809c36 <load_elf+0xb00>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:580 (discriminator 2)
                }
                smmap(lma , dest, attr, current->pml4);
ffff8000008095f9:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809600:	ff ff ff 
ffff800000809603:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809607:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080960a:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff800000809611:	8b 95 f4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x10c]
ffff800000809617:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
ffff80000080961d:	48 63 f0             	movsxd rsi,eax
ffff800000809620:	8b 85 e8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x118]
ffff800000809626:	48 98                	cdqe   
ffff800000809628:	48 89 c7             	mov    rdi,rax
ffff80000080962b:	49 89 df             	mov    r15,rbx
ffff80000080962e:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff800000809635:	ff ff ff 
ffff800000809638:	48 01 d8             	add    rax,rbx
ffff80000080963b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572 (discriminator 2)
            for(int j=0;j<pgc;j++){
ffff80000080963d:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572 (discriminator 1)
ffff800000809641:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000809644:	3b 85 f0 fe ff ff    	cmp    eax,DWORD PTR [rbp-0x110]
ffff80000080964a:	0f 8c 44 ff ff ff    	jl     ffff800000809594 <load_elf+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:583
            }
            //读取
            elf->f_ops->read(elf,vptr,fs,&elf->position);
ffff800000809650:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000809657:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080965b:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080965f:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffff800000809666:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
ffff80000080966d:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
ffff800000809674:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080967b:	48 89 c7             	mov    rdi,rax
ffff80000080967e:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:586

        }
        ph++;
ffff800000809681:	48 83 45 e8 38       	add    QWORD PTR [rbp-0x18],0x38
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:556
    for(int i=0;i<entn;i++){
ffff800000809686:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:556 (discriminator 1)
ffff80000080968a:	0f b7 85 6e ff ff ff 	movzx  eax,WORD PTR [rbp-0x92]
ffff800000809691:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff800000809694:	0f 8c 53 fe ff ff    	jl     ffff8000008094ed <load_elf+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:589
    }
    //找dynamic段
    struct Elf64_Shdr *dynamic=NULL;
ffff80000080969a:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008096a1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:590
    off_t* got=NULL;
ffff8000008096a2:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff8000008096a9:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591
    for(int i=0;i<ehdr->e_shnum;i++){
ffff8000008096ad:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff8000008096b4:	eb 50                	jmp    ffff800000809706 <load_elf+0x5d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:592
        if(sh[i].sh_type==SHT_DYNAMIC)
ffff8000008096b6:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008096b9:	48 63 d0             	movsxd rdx,eax
ffff8000008096bc:	48 89 d0             	mov    rax,rdx
ffff8000008096bf:	48 01 c0             	add    rax,rax
ffff8000008096c2:	48 01 d0             	add    rax,rdx
ffff8000008096c5:	48 c1 e0 04          	shl    rax,0x4
ffff8000008096c9:	48 89 c2             	mov    rdx,rax
ffff8000008096cc:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008096d3:	48 01 d0             	add    rax,rdx
ffff8000008096d6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008096d9:	83 f8 06             	cmp    eax,0x6
ffff8000008096dc:	75 24                	jne    ffff800000809702 <load_elf+0x5cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:593
            dynamic=sh+i;
ffff8000008096de:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008096e1:	48 63 d0             	movsxd rdx,eax
ffff8000008096e4:	48 89 d0             	mov    rax,rdx
ffff8000008096e7:	48 01 c0             	add    rax,rax
ffff8000008096ea:	48 01 d0             	add    rax,rdx
ffff8000008096ed:	48 c1 e0 04          	shl    rax,0x4
ffff8000008096f1:	48 89 c2             	mov    rdx,rax
ffff8000008096f4:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008096fb:	48 01 d0             	add    rax,rdx
ffff8000008096fe:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591 (discriminator 2)
    for(int i=0;i<ehdr->e_shnum;i++){
ffff800000809702:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591 (discriminator 1)
ffff800000809706:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080970d:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff800000809711:	0f b7 c0             	movzx  eax,ax
ffff800000809714:	39 45 c4             	cmp    DWORD PTR [rbp-0x3c],eax
ffff800000809717:	7c 9d                	jl     ffff8000008096b6 <load_elf+0x580>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:595
    }
    if(dynamic){
ffff800000809719:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080971e:	0f 84 67 03 00 00    	je     ffff800000809a8b <load_elf+0x955>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:596
        char* dynstr=0;
ffff800000809724:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080972b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:597
        Elf64_Dyn *dyn=dynamic->sh_addr+offset;
ffff80000080972c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809730:	48 8b 50 0c          	mov    rdx,QWORD PTR [rax+0xc]
ffff800000809734:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff80000080973a:	48 98                	cdqe   
ffff80000080973c:	48 01 d0             	add    rax,rdx
ffff80000080973f:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:599

        mod->p_dynamic=dynamic;
ffff800000809746:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080974a:	89 c2                	mov    edx,eax
ffff80000080974c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809750:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603
        //这里一堆获取函数之后实现细节
        // dynstr=so_get_dynstr(dyn);
        //so_get_dynstr从so中获取.dynstr节
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809753:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080975a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff80000080975e:	eb 2b                	jmp    ffff80000080978b <load_elf+0x655>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:604
            if(p->d_tag==DT_STRTAB){
ffff800000809760:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809764:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809767:	48 83 f8 05          	cmp    rax,0x5
ffff80000080976b:	75 19                	jne    ffff800000809786 <load_elf+0x650>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:605
                dynstr=p->d_un.d_ptr+offset;
ffff80000080976d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809771:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000809775:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff80000080977b:	48 98                	cdqe   
ffff80000080977d:	48 01 d0             	add    rax,rdx
ffff800000809780:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:606
                break;
ffff800000809784:	eb 11                	jmp    ffff800000809797 <load_elf+0x661>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809786:	48 83 45 b0 10       	add    QWORD PTR [rbp-0x50],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603 (discriminator 1)
ffff80000080978b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080978f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809792:	48 85 c0             	test   rax,rax
ffff800000809795:	75 c9                	jne    ffff800000809760 <load_elf+0x62a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:609
            }
        }
        if(!dynstr){
ffff800000809797:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff80000080979c:	75 28                	jne    ffff8000008097c6 <load_elf+0x690>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:610
            comprintf("cannot find dynstr in .dynamic!\n");
ffff80000080979e:	48 b8 f8 d6 ff ff ff 	movabs rax,0xffffffffffffd6f8
ffff8000008097a5:	ff ff ff 
ffff8000008097a8:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008097ac:	48 89 c7             	mov    rdi,rax
ffff8000008097af:	49 89 df             	mov    r15,rbx
ffff8000008097b2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008097b7:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff8000008097be:	ff ff ff 
ffff8000008097c1:	48 01 da             	add    rdx,rbx
ffff8000008097c4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:619
        // so_load_sos(so_paths);
        //so_get_needed&so_load_sos
        //so_get_got
        // got=so_get_got(dyn);
        //intel架构上DT_PLTGOT存放的是got地址
        size_t relsz=0,relentsz=0;
ffff8000008097c6:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff8000008097cd:	00 
ffff8000008097ce:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff8000008097d5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620
        off_t relptr=0;
ffff8000008097d6:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff8000008097dd:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008097e4:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff8000008097e8:	e9 8e 02 00 00       	jmp    ffff800000809a7b <load_elf+0x945>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:622
            switch (p->d_tag)
ffff8000008097ed:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008097f1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008097f4:	48 83 f8 13          	cmp    rax,0x13
ffff8000008097f8:	0f 87 c4 01 00 00    	ja     ffff8000008099c2 <load_elf+0x88c>
ffff8000008097fe:	48 83 f8 07          	cmp    rax,0x7
ffff800000809802:	73 29                	jae    ffff80000080982d <load_elf+0x6f7>
ffff800000809804:	48 83 f8 06          	cmp    rax,0x6
ffff800000809808:	0f 84 78 01 00 00    	je     ffff800000809986 <load_elf+0x850>
ffff80000080980e:	48 83 f8 06          	cmp    rax,0x6
ffff800000809812:	0f 87 aa 01 00 00    	ja     ffff8000008099c2 <load_elf+0x88c>
ffff800000809818:	48 83 f8 01          	cmp    rax,0x1
ffff80000080981c:	74 62                	je     ffff800000809880 <load_elf+0x74a>
ffff80000080981e:	48 83 f8 03          	cmp    rax,0x3
ffff800000809822:	0f 84 ea 00 00 00    	je     ffff800000809912 <load_elf+0x7dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:657
                relentsz=p->d_un.d_val;
                goto is_rel_prepared;

            
            default:
                break;
ffff800000809828:	e9 95 01 00 00       	jmp    ffff8000008099c2 <load_elf+0x88c>
ffff80000080982d:	ba 01 00 00 00       	mov    edx,0x1
ffff800000809832:	89 c1                	mov    ecx,eax
ffff800000809834:	48 d3 e2             	shl    rdx,cl
ffff800000809837:	48 89 d0             	mov    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:622
            switch (p->d_tag)
ffff80000080983a:	48 89 c2             	mov    rdx,rax
ffff80000080983d:	81 e2 00 02 08 00    	and    edx,0x80200
ffff800000809843:	48 85 d2             	test   rdx,rdx
ffff800000809846:	0f 95 c2             	setne  dl
ffff800000809849:	84 d2                	test   dl,dl
ffff80000080984b:	0f 85 63 01 00 00    	jne    ffff8000008099b4 <load_elf+0x87e>
ffff800000809851:	48 89 c2             	mov    rdx,rax
ffff800000809854:	81 e2 80 00 02 00    	and    edx,0x20080
ffff80000080985a:	48 85 d2             	test   rdx,rdx
ffff80000080985d:	0f 95 c2             	setne  dl
ffff800000809860:	84 d2                	test   dl,dl
ffff800000809862:	0f 85 3f 01 00 00    	jne    ffff8000008099a7 <load_elf+0x871>
ffff800000809868:	25 00 01 04 00       	and    eax,0x40100
ffff80000080986d:	48 85 c0             	test   rax,rax
ffff800000809870:	0f 95 c0             	setne  al
ffff800000809873:	84 c0                	test   al,al
ffff800000809875:	0f 85 1e 01 00 00    	jne    ffff800000809999 <load_elf+0x863>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:657
                break;
ffff80000080987b:	e9 42 01 00 00       	jmp    ffff8000008099c2 <load_elf+0x88c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:625
                char* pathname=p->d_un.d_val+dynstr;
ffff800000809880:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809884:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000809888:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080988c:	48 01 d0             	add    rax,rdx
ffff80000080988f:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:626
                int so_fno=sys_open(pathname,O_EXEC);
ffff800000809896:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff80000080989d:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008098a2:	48 89 c7             	mov    rdi,rax
ffff8000008098a5:	49 89 df             	mov    r15,rbx
ffff8000008098a8:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff8000008098af:	ff ff ff 
ffff8000008098b2:	48 01 d8             	add    rax,rbx
ffff8000008098b5:	ff d0                	call   rax
ffff8000008098b7:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:628
                load_elf(current->openf[so_fno]);
ffff8000008098bd:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008098c4:	ff ff ff 
ffff8000008098c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008098cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008098ce:	8b 95 24 ff ff ff    	mov    edx,DWORD PTR [rbp-0xdc]
ffff8000008098d4:	48 63 d2             	movsxd rdx,edx
ffff8000008098d7:	48 83 c2 1e          	add    rdx,0x1e
ffff8000008098db:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff8000008098e0:	48 89 c7             	mov    rdi,rax
ffff8000008098e3:	48 b8 de b5 ee ff ff 	movabs rax,0xffffffffffeeb5de
ffff8000008098ea:	ff ff ff 
ffff8000008098ed:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008098f1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:629
                sys_close(so_fno);
ffff8000008098f3:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff8000008098f9:	89 c7                	mov    edi,eax
ffff8000008098fb:	49 89 df             	mov    r15,rbx
ffff8000008098fe:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff800000809905:	ff ff ff 
ffff800000809908:	48 01 d8             	add    rax,rbx
ffff80000080990b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:630
                break;
ffff80000080990d:	e9 b1 00 00 00       	jmp    ffff8000008099c3 <load_elf+0x88d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:632
                got=p->d_un.d_ptr+offset;
ffff800000809912:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809916:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080991a:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff800000809920:	48 98                	cdqe   
ffff800000809922:	48 01 d0             	add    rax,rdx
ffff800000809925:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:635
                got[2]=dl_runtime_resolve;
ffff80000080992c:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000809933:	ff ff ff 
ffff800000809936:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080993a:	48 89 c2             	mov    rdx,rax
ffff80000080993d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000809944:	48 83 c0 08          	add    rax,0x8
ffff800000809948:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:637
                got[1]=mod-modules;
ffff80000080994a:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000809951:	ff ff ff 
ffff800000809954:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809958:	48 89 c2             	mov    rdx,rax
ffff80000080995b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080995f:	48 29 d0             	sub    rax,rdx
ffff800000809962:	48 c1 f8 05          	sar    rax,0x5
ffff800000809966:	48 89 c2             	mov    rdx,rax
ffff800000809969:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000809970:	48 83 c0 04          	add    rax,0x4
ffff800000809974:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:638
                mod->p_got=got;
ffff800000809976:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080997d:	89 c2                	mov    edx,eax
ffff80000080997f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809983:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:640
                mod->p_symbol=p->d_un.d_ptr;
ffff800000809986:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080998a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080998e:	89 c2                	mov    edx,eax
ffff800000809990:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809994:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:641
                break;
ffff800000809997:	eb 2a                	jmp    ffff8000008099c3 <load_elf+0x88d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:644
                relsz=p->d_un.d_val;
ffff800000809999:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080999d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008099a1:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:645
                goto is_rel_prepared;
ffff8000008099a5:	eb 21                	jmp    ffff8000008099c8 <load_elf+0x892>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:648
                relptr=p->d_un.d_ptr;
ffff8000008099a7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008099ab:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008099af:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:649
                goto is_rel_prepared;
ffff8000008099b2:	eb 14                	jmp    ffff8000008099c8 <load_elf+0x892>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:652
                relentsz=p->d_un.d_val;
ffff8000008099b4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008099b8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008099bc:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:653
                goto is_rel_prepared;
ffff8000008099c0:	eb 06                	jmp    ffff8000008099c8 <load_elf+0x892>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:657
                break;
ffff8000008099c2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:659
            }
            continue;
ffff8000008099c3:	e9 ae 00 00 00       	jmp    ffff800000809a76 <load_elf+0x940>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661
is_rel_prepared:
            if(!(relsz&&relentsz&&relptr))continue;
ffff8000008099c8:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff8000008099cd:	0f 84 a2 00 00 00    	je     ffff800000809a75 <load_elf+0x93f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661 (discriminator 2)
ffff8000008099d3:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff8000008099d8:	0f 84 97 00 00 00    	je     ffff800000809a75 <load_elf+0x93f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661 (discriminator 4)
ffff8000008099de:	83 7d 9c 00          	cmp    DWORD PTR [rbp-0x64],0x0
ffff8000008099e2:	0f 84 8d 00 00 00    	je     ffff800000809a75 <load_elf+0x93f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662
            for(int j=0;j<relsz/relentsz;j++){
ffff8000008099e8:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
ffff8000008099ef:	eb 53                	jmp    ffff800000809a44 <load_elf+0x90e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:663 (discriminator 3)
                fill_reloc(relptr+j*relentsz,mod-modules);
ffff8000008099f1:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008099f8:	ff ff ff 
ffff8000008099fb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008099ff:	48 89 c2             	mov    rdx,rax
ffff800000809a02:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809a06:	48 29 d0             	sub    rax,rdx
ffff800000809a09:	48 c1 f8 05          	sar    rax,0x5
ffff800000809a0d:	48 89 c2             	mov    rdx,rax
ffff800000809a10:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000809a13:	48 63 c8             	movsxd rcx,eax
ffff800000809a16:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff800000809a19:	48 98                	cdqe   
ffff800000809a1b:	48 0f af 45 a0       	imul   rax,QWORD PTR [rbp-0x60]
ffff800000809a20:	48 01 c8             	add    rax,rcx
ffff800000809a23:	48 89 d6             	mov    rsi,rdx
ffff800000809a26:	48 89 c7             	mov    rdi,rax
ffff800000809a29:	49 89 df             	mov    r15,rbx
ffff800000809a2c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809a31:	48 ba 9e c4 ee ff ff 	movabs rdx,0xffffffffffeec49e
ffff800000809a38:	ff ff ff 
ffff800000809a3b:	48 01 da             	add    rdx,rbx
ffff800000809a3e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662 (discriminator 3)
            for(int j=0;j<relsz/relentsz;j++){
ffff800000809a40:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662 (discriminator 1)
ffff800000809a44:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff800000809a47:	48 63 c8             	movsxd rcx,eax
ffff800000809a4a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809a4e:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809a53:	48 f7 75 a0          	div    QWORD PTR [rbp-0x60]
ffff800000809a57:	48 39 c1             	cmp    rcx,rax
ffff800000809a5a:	72 95                	jb     ffff8000008099f1 <load_elf+0x8bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:665
            }
            relsz=relentsz=relptr=0;
ffff800000809a5c:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
ffff800000809a63:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff800000809a6a:	00 
ffff800000809a6b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000809a6f:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff800000809a73:	eb 01                	jmp    ffff800000809a76 <load_elf+0x940>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661
            if(!(relsz&&relentsz&&relptr))continue;
ffff800000809a75:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809a76:	48 83 45 90 10       	add    QWORD PTR [rbp-0x70],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621 (discriminator 3)
ffff800000809a7b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809a7f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a82:	48 85 c0             	test   rax,rax
ffff800000809a85:	0f 85 62 fd ff ff    	jne    ffff8000008097ed <load_elf+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:672
        }
        
    }
    
    //初始化堆
    chunk_header hdrtmp={
ffff800000809a8b:	c7 85 d0 fe ff ff 00 	mov    DWORD PTR [rbp-0x130],0x0
ffff800000809a92:	00 00 00 
ffff800000809a95:	c7 85 d4 fe ff ff 00 	mov    DWORD PTR [rbp-0x12c],0x0
ffff800000809a9c:	00 00 00 
ffff800000809a9f:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
ffff800000809aa6:	00 00 00 00 
ffff800000809aaa:	48 c7 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],0x0
ffff800000809ab1:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:680
            .pgn=0,
            .prev=NULL
    };
    //空堆
    //分配堆
    off_t lma=pmalloc();
ffff800000809ab5:	49 89 df             	mov    r15,rbx
ffff800000809ab8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809abd:	48 ba 8c 50 ee ff ff 	movabs rdx,0xffffffffffee508c
ffff800000809ac4:	ff ff ff 
ffff800000809ac7:	48 01 da             	add    rdx,rbx
ffff800000809aca:	ff d2                	call   rdx
ffff800000809acc:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:681
    if(lma==-1)
ffff800000809ad2:	83 bd 20 ff ff ff ff 	cmp    DWORD PTR [rbp-0xe0],0xffffffff
ffff800000809ad9:	75 26                	jne    ffff800000809b01 <load_elf+0x9cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:683
    {
        current->regs.errcode=-ENOMEM;
ffff800000809adb:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809ae2:	ff ff ff 
ffff800000809ae5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809ae9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809aec:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000809af3:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:684
        return -1;
ffff800000809af7:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809afc:	e9 35 01 00 00       	jmp    ffff800000809c36 <load_elf+0xb00>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:686
    }
    smmap(lma, HEAP_BASE, PAGE_PRESENT | PAGE_FOR_ALL | PAGE_RWX, current->pml4);
ffff800000809b01:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809b08:	ff ff ff 
ffff800000809b0b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809b0f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b12:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000809b19:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff800000809b1f:	48 98                	cdqe   
ffff800000809b21:	48 89 d1             	mov    rcx,rdx
ffff800000809b24:	ba 07 00 00 00       	mov    edx,0x7
ffff800000809b29:	be 00 00 00 01       	mov    esi,0x1000000
ffff800000809b2e:	48 89 c7             	mov    rdi,rax
ffff800000809b31:	49 89 df             	mov    r15,rbx
ffff800000809b34:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff800000809b3b:	ff ff ff 
ffff800000809b3e:	48 01 d8             	add    rax,rbx
ffff800000809b41:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:687
    memset((unsigned char *) HEAP_BASE, 0, CHUNK_SIZE);
ffff800000809b43:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809b48:	be 00 00 00 00       	mov    esi,0x0
ffff800000809b4d:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000809b52:	49 89 df             	mov    r15,rbx
ffff800000809b55:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000809b5c:	ff ff ff 
ffff800000809b5f:	48 01 d8             	add    rax,rbx
ffff800000809b62:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:688
    current->mem_struct.heap_base=HEAP_BASE;
ffff800000809b64:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809b6b:	ff ff ff 
ffff800000809b6e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809b72:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b75:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000809b7c:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:689
    current->mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff800000809b7d:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809b84:	ff ff ff 
ffff800000809b87:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809b8b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b8e:	48 c7 40 30 00 10 00 	mov    QWORD PTR [rax+0x30],0x1001000
ffff800000809b95:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:690
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff800000809b96:	48 8d 85 d0 fe ff ff 	lea    rax,[rbp-0x130]
ffff800000809b9d:	ba 18 00 00 00       	mov    edx,0x18
ffff800000809ba2:	48 89 c6             	mov    rsi,rax
ffff800000809ba5:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000809baa:	49 89 df             	mov    r15,rbx
ffff800000809bad:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000809bb4:	ff ff ff 
ffff800000809bb7:	48 01 d8             	add    rax,rbx
ffff800000809bba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:692
    //设置栈
    current->mem_struct.stack_top=STACK_TOP;
ffff800000809bbc:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809bc3:	ff ff ff 
ffff800000809bc6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809bca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809bcd:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000809bd4:	7f 00 00 
ffff800000809bd7:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:693
    off_t entry=0;
ffff800000809bdb:	c7 85 1c ff ff ff 00 	mov    DWORD PTR [rbp-0xe4],0x0
ffff800000809be2:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:694
    entry=ehdr->e_entry;
ffff800000809be5:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809bec:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809bf0:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:695
    kmfree(tmpla);
ffff800000809bf6:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff800000809bfc:	48 98                	cdqe   
ffff800000809bfe:	48 89 c7             	mov    rdi,rax
ffff800000809c01:	49 89 df             	mov    r15,rbx
ffff800000809c04:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000809c0b:	ff ff ff 
ffff800000809c0e:	48 01 d8             	add    rax,rbx
ffff800000809c11:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:696
    kmfree(shla);
ffff800000809c13:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff800000809c19:	48 98                	cdqe   
ffff800000809c1b:	48 89 c7             	mov    rdi,rax
ffff800000809c1e:	49 89 df             	mov    r15,rbx
ffff800000809c21:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000809c28:	ff ff ff 
ffff800000809c2b:	48 01 d8             	add    rax,rbx
ffff800000809c2e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:698
    //从系统调用返回
    return entry;
ffff800000809c30:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:699 (discriminator 1)
}
ffff800000809c36:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffff800000809c3d:	5b                   	pop    rbx
ffff800000809c3e:	41 5f                	pop    r15
ffff800000809c40:	5d                   	pop    rbp
ffff800000809c41:	c3                   	ret    

ffff800000809c42 <get_modid>:
get_modid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:700
id_t get_modid(void){
ffff800000809c42:	f3 0f 1e fa          	endbr64 
ffff800000809c46:	55                   	push   rbp
ffff800000809c47:	48 89 e5             	mov    rbp,rsp
ffff800000809c4a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809c4a <get_modid+0x8>
ffff800000809c51:	49 bb 0e 3f 11 00 00 	movabs r11,0x113f0e
ffff800000809c58:	00 00 00 
ffff800000809c5b:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:702
    static id_t modid_d=0;
    return modid_d++;
ffff800000809c5e:	48 ba 28 64 af ff ff 	movabs rdx,0xffffffffffaf6428
ffff800000809c65:	ff ff ff 
ffff800000809c68:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff800000809c6b:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000809c6e:	48 be 28 64 af ff ff 	movabs rsi,0xffffffffffaf6428
ffff800000809c75:	ff ff ff 
ffff800000809c78:	89 0c 30             	mov    DWORD PTR [rax+rsi*1],ecx
ffff800000809c7b:	89 d0                	mov    eax,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:703
}
ffff800000809c7d:	5d                   	pop    rbp
ffff800000809c7e:	c3                   	ret    

ffff800000809c7f <dl_runtime_resolve>:
dl_runtime_resolve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:704
void dl_runtime_resolve(){
ffff800000809c7f:	f3 0f 1e fa          	endbr64 
ffff800000809c83:	55                   	push   rbp
ffff800000809c84:	48 89 e5             	mov    rbp,rsp
ffff800000809c87:	41 57                	push   r15
ffff800000809c89:	53                   	push   rbx
ffff800000809c8a:	48 83 ec 30          	sub    rsp,0x30
ffff800000809c8e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809c8e <dl_runtime_resolve+0xf>
ffff800000809c95:	49 bb ca 3e 11 00 00 	movabs r11,0x113eca
ffff800000809c9c:	00 00 00 
ffff800000809c9f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:707
    //获取modid
    unsigned long modid,rel_offset;
    asm volatile("push %%rax\n mov 8(%%rsp),%%rax\n mov %%rax,%0":"=m"(modid));
ffff800000809ca2:	50                   	push   rax
ffff800000809ca3:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
ffff800000809ca8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:708
    asm volatile("push %%rax\n mov 16(%%rsp),%%rax\n mov %%rax,%0":"=m"(rel_offset));
ffff800000809cac:	50                   	push   rax
ffff800000809cad:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
ffff800000809cb2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:709
    Elf64_Rel* rel=rel_offset;
ffff800000809cb6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809cba:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:710
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff800000809cbe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809cc2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809cc5:	ba 20 00 00 00       	mov    edx,0x20
ffff800000809cca:	89 d1                	mov    ecx,edx
ffff800000809ccc:	d3 e8                	shr    eax,cl
ffff800000809cce:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff800000809cd1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809cd5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809cd8:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:711
    off_t sym_off=get_sym_addr(modid,symi);
ffff800000809cdb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809cde:	48 63 d0             	movsxd rdx,eax
ffff800000809ce1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809ce5:	48 89 d6             	mov    rsi,rdx
ffff800000809ce8:	48 89 c7             	mov    rdi,rax
ffff800000809ceb:	49 89 df             	mov    r15,rbx
ffff800000809cee:	48 b8 e2 c2 ee ff ff 	movabs rax,0xffffffffffeec2e2
ffff800000809cf5:	ff ff ff 
ffff800000809cf8:	48 01 d8             	add    rax,rbx
ffff800000809cfb:	ff d0                	call   rax
ffff800000809cfd:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:714
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff800000809d00:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809d04:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809d07:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:715
    switch (type)
ffff800000809d0b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809d0e:	83 e8 03             	sub    eax,0x3
ffff800000809d11:	83 f8 07             	cmp    eax,0x7
ffff800000809d14:	0f 87 0a 01 00 00    	ja     ffff800000809e24 <dl_runtime_resolve+0x1a5>
ffff800000809d1a:	89 c0                	mov    eax,eax
ffff800000809d1c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809d23:	00 
ffff800000809d24:	48 8d 05 4d 15 11 00 	lea    rax,[rip+0x11154d]        # ffff80000091b278 <.LC3+0x28>
ffff800000809d2b:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000809d2f:	48 8d 15 42 15 11 00 	lea    rdx,[rip+0x111542]        # ffff80000091b278 <.LC3+0x28>
ffff800000809d36:	48 01 d0             	add    rax,rdx
ffff800000809d39:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:719
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff800000809d3c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d40:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809d43:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:720
        break;
ffff800000809d45:	e9 db 00 00 00       	jmp    ffff800000809e25 <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:722
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff800000809d4a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809d4d:	48 63 d0             	movsxd rdx,eax
ffff800000809d50:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809d54:	48 89 d6             	mov    rsi,rdx
ffff800000809d57:	48 89 c7             	mov    rdi,rax
ffff800000809d5a:	49 89 df             	mov    r15,rbx
ffff800000809d5d:	48 b8 f9 c3 ee ff ff 	movabs rax,0xffffffffffeec3f9
ffff800000809d64:	ff ff ff 
ffff800000809d67:	48 01 d8             	add    rax,rbx
ffff800000809d6a:	ff d0                	call   rax
ffff800000809d6c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000809d70:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:723
        break;
ffff800000809d72:	e9 ae 00 00 00       	jmp    ffff800000809e25 <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:725
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff800000809d77:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809d7b:	48 89 c7             	mov    rdi,rax
ffff800000809d7e:	49 89 df             	mov    r15,rbx
ffff800000809d81:	48 b8 20 c4 ee ff ff 	movabs rax,0xffffffffffeec420
ffff800000809d88:	ff ff ff 
ffff800000809d8b:	48 01 d8             	add    rax,rbx
ffff800000809d8e:	ff d0                	call   rax
ffff800000809d90:	89 c2                	mov    edx,eax
ffff800000809d92:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d96:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809d98:	01 c2                	add    edx,eax
ffff800000809d9a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d9e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:726
        break;
ffff800000809da0:	e9 80 00 00 00       	jmp    ffff800000809e25 <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:728
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff800000809da5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809da9:	48 89 c7             	mov    rdi,rax
ffff800000809dac:	49 89 df             	mov    r15,rbx
ffff800000809daf:	48 b8 5d c4 ee ff ff 	movabs rax,0xffffffffffeec45d
ffff800000809db6:	ff ff ff 
ffff800000809db9:	48 01 d8             	add    rax,rbx
ffff800000809dbc:	ff d0                	call   rax
ffff800000809dbe:	89 c2                	mov    edx,eax
ffff800000809dc0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809dc3:	29 d0                	sub    eax,edx
ffff800000809dc5:	89 c1                	mov    ecx,eax
ffff800000809dc7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809dcb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809dcd:	8d 14 01             	lea    edx,[rcx+rax*1]
ffff800000809dd0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809dd4:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:729
        break;
ffff800000809dd6:	eb 4d                	jmp    ffff800000809e25 <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:731
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-rel_offset;
ffff800000809dd8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809ddc:	48 89 c7             	mov    rdi,rax
ffff800000809ddf:	49 89 df             	mov    r15,rbx
ffff800000809de2:	48 b8 5d c4 ee ff ff 	movabs rax,0xffffffffffeec45d
ffff800000809de9:	ff ff ff 
ffff800000809dec:	48 01 d8             	add    rax,rbx
ffff800000809def:	ff d0                	call   rax
ffff800000809df1:	48 98                	cdqe   
ffff800000809df3:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000809df7:	48 29 c8             	sub    rax,rcx
ffff800000809dfa:	48 89 c2             	mov    rdx,rax
ffff800000809dfd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809e01:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809e03:	89 c1                	mov    ecx,eax
ffff800000809e05:	89 d0                	mov    eax,edx
ffff800000809e07:	01 c8                	add    eax,ecx
ffff800000809e09:	89 c2                	mov    edx,eax
ffff800000809e0b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809e0f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:732
        break;
ffff800000809e11:	eb 12                	jmp    ffff800000809e25 <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:735
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff800000809e13:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809e17:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809e19:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809e1c:	01 c2                	add    edx,eax
ffff800000809e1e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809e22:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:737
    default:
        break;
ffff800000809e24:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:741
    }
    //重定位完毕，直接返回到目标地址

    asm volatile("mov %0,%%rax\n mov %%rax,0(%%rsp)"::"m"(*v_rel));
ffff800000809e25:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809e29:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809e2c:	48 89 04 24          	mov    QWORD PTR [rsp],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:742
}
ffff800000809e30:	90                   	nop
ffff800000809e31:	48 83 c4 30          	add    rsp,0x30
ffff800000809e35:	5b                   	pop    rbx
ffff800000809e36:	41 5f                	pop    r15
ffff800000809e38:	5d                   	pop    rbp
ffff800000809e39:	c3                   	ret    

ffff800000809e3a <get_sym_addr>:
get_sym_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:743
off_t get_sym_addr(unsigned long modid,unsigned long symi){
ffff800000809e3a:	f3 0f 1e fa          	endbr64 
ffff800000809e3e:	55                   	push   rbp
ffff800000809e3f:	48 89 e5             	mov    rbp,rsp
ffff800000809e42:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809e42 <get_sym_addr+0x8>
ffff800000809e49:	49 bb 16 3d 11 00 00 	movabs r11,0x113d16
ffff800000809e50:	00 00 00 
ffff800000809e53:	4c 01 d8             	add    rax,r11
ffff800000809e56:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000809e5a:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:744
    struct Elf64_Sym *sym=modules[modid].p_symbol;
ffff800000809e5e:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809e65:	ff ff ff 
ffff800000809e68:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809e6c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000809e70:	48 c1 e2 05          	shl    rdx,0x5
ffff800000809e74:	48 01 ca             	add    rdx,rcx
ffff800000809e77:	48 83 c2 18          	add    rdx,0x18
ffff800000809e7b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809e7d:	48 63 d2             	movsxd rdx,edx
ffff800000809e80:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:745
    sym+=symi;
ffff800000809e84:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000809e88:	48 89 ca             	mov    rdx,rcx
ffff800000809e8b:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809e8f:	48 01 ca             	add    rdx,rcx
ffff800000809e92:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809e96:	48 01 55 f0          	add    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:751
    if(sym->st_shndx==SHN_COMMON){
        //还没分配空间的符号，需要分配空间，st_value表示地址对齐约束

    }

    off_t symaddr=sym->st_value+modules[modid].load_offset;
ffff800000809e9a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000809e9e:	48 8b 52 04          	mov    rdx,QWORD PTR [rdx+0x4]
ffff800000809ea2:	89 d6                	mov    esi,edx
ffff800000809ea4:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809eab:	ff ff ff 
ffff800000809eae:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809eb2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000809eb6:	48 c1 e2 05          	shl    rdx,0x5
ffff800000809eba:	48 01 ca             	add    rdx,rcx
ffff800000809ebd:	48 83 c2 04          	add    rdx,0x4
ffff800000809ec1:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809ec3:	01 f2                	add    edx,esi
ffff800000809ec5:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:752
    if(modules[modid].type==ET_DYN){
ffff800000809ec8:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809ecf:	ff ff ff 
ffff800000809ed2:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809ed6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000809eda:	48 c1 e2 05          	shl    rdx,0x5
ffff800000809ede:	48 01 ca             	add    rdx,rcx
ffff800000809ee1:	48 8b 52 0c          	mov    rdx,QWORD PTR [rdx+0xc]
ffff800000809ee5:	48 83 fa 03          	cmp    rdx,0x3
ffff800000809ee9:	75 61                	jne    ffff800000809f4c <get_sym_addr+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:754
        //还要加上节地址
        Elf64_Ehdr* ehdr=modules[modid].header;
ffff800000809eeb:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809ef2:	ff ff ff 
ffff800000809ef5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809ef9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809efd:	48 c1 e0 05          	shl    rax,0x5
ffff800000809f01:	48 01 d0             	add    rax,rdx
ffff800000809f04:	48 83 c0 08          	add    rax,0x8
ffff800000809f08:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809f0a:	48 98                	cdqe   
ffff800000809f0c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:755
        struct Elf64_Shdr* shdr=ehdr->e_shoff;
ffff800000809f10:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809f14:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000809f18:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:756
        symaddr+=shdr[sym->st_shndx].sh_addr;
ffff800000809f1c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000809f20:	0f b7 40 12          	movzx  eax,WORD PTR [rax+0x12]
ffff800000809f24:	0f b7 d0             	movzx  edx,ax
ffff800000809f27:	48 89 d0             	mov    rax,rdx
ffff800000809f2a:	48 01 c0             	add    rax,rax
ffff800000809f2d:	48 01 d0             	add    rax,rdx
ffff800000809f30:	48 c1 e0 04          	shl    rax,0x4
ffff800000809f34:	48 89 c2             	mov    rdx,rax
ffff800000809f37:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809f3b:	48 01 d0             	add    rax,rdx
ffff800000809f3e:	48 8b 40 0c          	mov    rax,QWORD PTR [rax+0xc]
ffff800000809f42:	89 c2                	mov    edx,eax
ffff800000809f44:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809f47:	01 d0                	add    eax,edx
ffff800000809f49:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:758
    }
    return symaddr;
ffff800000809f4c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:759
}
ffff800000809f4f:	5d                   	pop    rbp
ffff800000809f50:	c3                   	ret    

ffff800000809f51 <get_sym_plt>:
get_sym_plt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:760
off_t get_sym_plt(unsigned long modid,unsigned long symi){
ffff800000809f51:	f3 0f 1e fa          	endbr64 
ffff800000809f55:	55                   	push   rbp
ffff800000809f56:	48 89 e5             	mov    rbp,rsp
ffff800000809f59:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809f59 <get_sym_plt+0x8>
ffff800000809f60:	49 bb ff 3b 11 00 00 	movabs r11,0x113bff
ffff800000809f67:	00 00 00 
ffff800000809f6a:	4c 01 d8             	add    rax,r11
ffff800000809f6d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000809f71:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:762

}
ffff800000809f75:	90                   	nop
ffff800000809f76:	5d                   	pop    rbp
ffff800000809f77:	c3                   	ret    

ffff800000809f78 <get_load_base>:
get_load_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:763
off_t get_load_base(unsigned long modid){
ffff800000809f78:	f3 0f 1e fa          	endbr64 
ffff800000809f7c:	55                   	push   rbp
ffff800000809f7d:	48 89 e5             	mov    rbp,rsp
ffff800000809f80:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809f80 <get_load_base+0x8>
ffff800000809f87:	49 bb d8 3b 11 00 00 	movabs r11,0x113bd8
ffff800000809f8e:	00 00 00 
ffff800000809f91:	4c 01 d8             	add    rax,r11
ffff800000809f94:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:764
    return modules[modid].base;
ffff800000809f98:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809f9f:	ff ff ff 
ffff800000809fa2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809fa6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000809faa:	48 c1 e0 05          	shl    rax,0x5
ffff800000809fae:	48 01 d0             	add    rax,rdx
ffff800000809fb1:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:765
}
ffff800000809fb3:	5d                   	pop    rbp
ffff800000809fb4:	c3                   	ret    

ffff800000809fb5 <get_got>:
get_got():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:766
off_t get_got(unsigned long modid){
ffff800000809fb5:	f3 0f 1e fa          	endbr64 
ffff800000809fb9:	55                   	push   rbp
ffff800000809fba:	48 89 e5             	mov    rbp,rsp
ffff800000809fbd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809fbd <get_got+0x8>
ffff800000809fc4:	49 bb 9b 3b 11 00 00 	movabs r11,0x113b9b
ffff800000809fcb:	00 00 00 
ffff800000809fce:	4c 01 d8             	add    rax,r11
ffff800000809fd1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:767
    return modules[modid].p_got;
ffff800000809fd5:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809fdc:	ff ff ff 
ffff800000809fdf:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809fe3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000809fe7:	48 c1 e0 05          	shl    rax,0x5
ffff800000809feb:	48 01 d0             	add    rax,rdx
ffff800000809fee:	48 83 c0 1c          	add    rax,0x1c
ffff800000809ff2:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:768
}
ffff800000809ff4:	5d                   	pop    rbp
ffff800000809ff5:	c3                   	ret    

ffff800000809ff6 <fill_reloc>:
fill_reloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:770

void fill_reloc(Elf64_Rel* rel,int modid){
ffff800000809ff6:	f3 0f 1e fa          	endbr64 
ffff800000809ffa:	55                   	push   rbp
ffff800000809ffb:	48 89 e5             	mov    rbp,rsp
ffff800000809ffe:	41 57                	push   r15
ffff80000080a000:	53                   	push   rbx
ffff80000080a001:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a005:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a005 <fill_reloc+0xf>
ffff80000080a00c:	49 bb 53 3b 11 00 00 	movabs r11,0x113b53
ffff80000080a013:	00 00 00 
ffff80000080a016:	4c 01 db             	add    rbx,r11
ffff80000080a019:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080a01d:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:771
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff80000080a020:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a024:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a027:	ba 20 00 00 00       	mov    edx,0x20
ffff80000080a02c:	89 d1                	mov    ecx,edx
ffff80000080a02e:	d3 e8                	shr    eax,cl
ffff80000080a030:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080a033:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a037:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a03a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:772
    off_t sym_off=get_sym_addr(modid,symi);
ffff80000080a03d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a040:	48 63 d0             	movsxd rdx,eax
ffff80000080a043:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a046:	48 98                	cdqe   
ffff80000080a048:	48 89 d6             	mov    rsi,rdx
ffff80000080a04b:	48 89 c7             	mov    rdi,rax
ffff80000080a04e:	49 89 df             	mov    r15,rbx
ffff80000080a051:	48 b8 e2 c2 ee ff ff 	movabs rax,0xffffffffffeec2e2
ffff80000080a058:	ff ff ff 
ffff80000080a05b:	48 01 d8             	add    rax,rbx
ffff80000080a05e:	ff d0                	call   rax
ffff80000080a060:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:775
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff80000080a063:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a067:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a06a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:776
    switch (type)
ffff80000080a06e:	83 7d e8 0b          	cmp    DWORD PTR [rbp-0x18],0xb
ffff80000080a072:	0f 87 37 01 00 00    	ja     ffff80000080a1af <fill_reloc+0x1b9>
ffff80000080a078:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080a07b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a082:	00 
ffff80000080a083:	48 8d 05 2e 12 11 00 	lea    rax,[rip+0x11122e]        # ffff80000091b2b8 <.LC3+0x68>
ffff80000080a08a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080a08e:	48 8d 15 23 12 11 00 	lea    rdx,[rip+0x111223]        # ffff80000091b2b8 <.LC3+0x68>
ffff80000080a095:	48 01 d0             	add    rax,rdx
ffff80000080a098:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:780
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff80000080a09b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a09f:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080a0a2:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:781
        break;
ffff80000080a0a4:	e9 07 01 00 00       	jmp    ffff80000080a1b0 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:783
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff80000080a0a9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a0ac:	48 63 d0             	movsxd rdx,eax
ffff80000080a0af:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a0b2:	48 98                	cdqe   
ffff80000080a0b4:	48 89 d6             	mov    rsi,rdx
ffff80000080a0b7:	48 89 c7             	mov    rdi,rax
ffff80000080a0ba:	49 89 df             	mov    r15,rbx
ffff80000080a0bd:	48 b8 f9 c3 ee ff ff 	movabs rax,0xffffffffffeec3f9
ffff80000080a0c4:	ff ff ff 
ffff80000080a0c7:	48 01 d8             	add    rax,rbx
ffff80000080a0ca:	ff d0                	call   rax
ffff80000080a0cc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a0d0:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:784
        break;
ffff80000080a0d2:	e9 d9 00 00 00       	jmp    ffff80000080a1b0 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:786
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff80000080a0d7:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a0da:	48 98                	cdqe   
ffff80000080a0dc:	48 89 c7             	mov    rdi,rax
ffff80000080a0df:	49 89 df             	mov    r15,rbx
ffff80000080a0e2:	48 b8 20 c4 ee ff ff 	movabs rax,0xffffffffffeec420
ffff80000080a0e9:	ff ff ff 
ffff80000080a0ec:	48 01 d8             	add    rax,rbx
ffff80000080a0ef:	ff d0                	call   rax
ffff80000080a0f1:	89 c2                	mov    edx,eax
ffff80000080a0f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a0f7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a0f9:	01 c2                	add    edx,eax
ffff80000080a0fb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a0ff:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:787
        break;
ffff80000080a101:	e9 aa 00 00 00       	jmp    ffff80000080a1b0 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:789
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff80000080a106:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a109:	48 98                	cdqe   
ffff80000080a10b:	48 89 c7             	mov    rdi,rax
ffff80000080a10e:	49 89 df             	mov    r15,rbx
ffff80000080a111:	48 b8 5d c4 ee ff ff 	movabs rax,0xffffffffffeec45d
ffff80000080a118:	ff ff ff 
ffff80000080a11b:	48 01 d8             	add    rax,rbx
ffff80000080a11e:	ff d0                	call   rax
ffff80000080a120:	89 c2                	mov    edx,eax
ffff80000080a122:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a125:	29 d0                	sub    eax,edx
ffff80000080a127:	89 c1                	mov    ecx,eax
ffff80000080a129:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a12d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a12f:	8d 14 01             	lea    edx,[rcx+rax*1]
ffff80000080a132:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a136:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:790
        break;
ffff80000080a138:	eb 76                	jmp    ffff80000080a1b0 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:792
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-(off_t)rel;
ffff80000080a13a:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a13d:	48 98                	cdqe   
ffff80000080a13f:	48 89 c7             	mov    rdi,rax
ffff80000080a142:	49 89 df             	mov    r15,rbx
ffff80000080a145:	48 b8 5d c4 ee ff ff 	movabs rax,0xffffffffffeec45d
ffff80000080a14c:	ff ff ff 
ffff80000080a14f:	48 01 d8             	add    rax,rbx
ffff80000080a152:	ff d0                	call   rax
ffff80000080a154:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080a158:	89 d1                	mov    ecx,edx
ffff80000080a15a:	29 c8                	sub    eax,ecx
ffff80000080a15c:	89 c2                	mov    edx,eax
ffff80000080a15e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a162:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a164:	01 c2                	add    edx,eax
ffff80000080a166:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a16a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:793
        break;
ffff80000080a16c:	eb 42                	jmp    ffff80000080a1b0 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:796
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff80000080a16e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a172:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a174:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a177:	01 c2                	add    edx,eax
ffff80000080a179:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a17d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:797
        break;
ffff80000080a17f:	eb 2f                	jmp    ffff80000080a1b0 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:800
    case R_X86_64_32S:
    case R_X86_64_64:
        *v_rel+=sym_off;
ffff80000080a181:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a185:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a187:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a18a:	01 c2                	add    edx,eax
ffff80000080a18c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a190:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:801
        break;
ffff80000080a192:	eb 1c                	jmp    ffff80000080a1b0 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:803
    case R_X86_64_PC32:
        *v_rel+=sym_off-(off_t)rel;
ffff80000080a194:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a198:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a19a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a19e:	89 c1                	mov    ecx,eax
ffff80000080a1a0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a1a3:	29 c8                	sub    eax,ecx
ffff80000080a1a5:	01 c2                	add    edx,eax
ffff80000080a1a7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a1ab:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:804
        break;
ffff80000080a1ad:	eb 01                	jmp    ffff80000080a1b0 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:806
    default:
        break;
ffff80000080a1af:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:808
    }
ffff80000080a1b0:	90                   	nop
ffff80000080a1b1:	48 83 c4 30          	add    rsp,0x30
ffff80000080a1b5:	5b                   	pop    rbx
ffff80000080a1b6:	41 5f                	pop    r15
ffff80000080a1b8:	5d                   	pop    rbp
ffff80000080a1b9:	c3                   	ret    
ffff80000080a1ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffff80000080a1c0 <_syscall>:
_syscall():
ffff80000080a1c0:	55                   	push   rbp
ffff80000080a1c1:	48 bd 00 80 10 00 00 	movabs rbp,0xffff800000108000
ffff80000080a1c8:	80 ff ff 
ffff80000080a1cb:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
ffff80000080a1cf:	48 8b 65 24          	mov    rsp,QWORD PTR [rbp+0x24]
ffff80000080a1d3:	6a 2b                	push   0x2b
ffff80000080a1d5:	54                   	push   rsp
ffff80000080a1d6:	9c                   	pushf  
ffff80000080a1d7:	6a 33                	push   0x33
ffff80000080a1d9:	51                   	push   rcx
ffff80000080a1da:	50                   	push   rax
ffff80000080a1db:	53                   	push   rbx
ffff80000080a1dc:	51                   	push   rcx
ffff80000080a1dd:	52                   	push   rdx
ffff80000080a1de:	57                   	push   rdi
ffff80000080a1df:	56                   	push   rsi
ffff80000080a1e0:	41 50                	push   r8
ffff80000080a1e2:	41 51                	push   r9
ffff80000080a1e4:	41 52                	push   r10
ffff80000080a1e6:	41 53                	push   r11
ffff80000080a1e8:	41 54                	push   r12
ffff80000080a1ea:	41 55                	push   r13
ffff80000080a1ec:	41 56                	push   r14
ffff80000080a1ee:	41 57                	push   r15
ffff80000080a1f0:	66 8c c0             	mov    ax,es
ffff80000080a1f3:	50                   	push   rax
ffff80000080a1f4:	66 8c d8             	mov    ax,ds
ffff80000080a1f7:	50                   	push   rax
ffff80000080a1f8:	66 b8 10 00          	mov    ax,0x10
ffff80000080a1fc:	8e c0                	mov    es,eax
ffff80000080a1fe:	8e d8                	mov    ds,eax
ffff80000080a200:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
ffff80000080a205:	41 53                	push   r11
ffff80000080a207:	51                   	push   rcx
ffff80000080a208:	49 87 ca             	xchg   r10,rcx
ffff80000080a20b:	57                   	push   rdi
ffff80000080a20c:	48 bf e8 02 40 00 00 	movabs rdi,0xffff8000004002e8
ffff80000080a213:	80 ff ff 
ffff80000080a216:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
ffff80000080a219:	4c 89 97 6c 02 00 00 	mov    QWORD PTR [rdi+0x26c],r10
ffff80000080a220:	5f                   	pop    rdi
ffff80000080a221:	e8 fb 68 ff ff       	call   ffff800000800b21 <syscall>

ffff80000080a226 <_syscall_sysret>:
_syscall_sysret():
ffff80000080a226:	4c 87 d1             	xchg   rcx,r10
ffff80000080a229:	59                   	pop    rcx
ffff80000080a22a:	41 5b                	pop    r11
ffff80000080a22c:	58                   	pop    rax
ffff80000080a22d:	8e d8                	mov    ds,eax
ffff80000080a22f:	58                   	pop    rax
ffff80000080a230:	8e c0                	mov    es,eax
ffff80000080a232:	41 5f                	pop    r15
ffff80000080a234:	41 5e                	pop    r14
ffff80000080a236:	41 5d                	pop    r13
ffff80000080a238:	41 5c                	pop    r12
ffff80000080a23a:	41 5b                	pop    r11
ffff80000080a23c:	41 5a                	pop    r10
ffff80000080a23e:	41 59                	pop    r9
ffff80000080a240:	41 58                	pop    r8
ffff80000080a242:	5e                   	pop    rsi
ffff80000080a243:	5f                   	pop    rdi
ffff80000080a244:	5a                   	pop    rdx
ffff80000080a245:	59                   	pop    rcx
ffff80000080a246:	5b                   	pop    rbx
ffff80000080a247:	48 83 c4 08          	add    rsp,0x8
ffff80000080a24b:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
ffff80000080a24f:	5d                   	pop    rbp
ffff80000080a250:	fb                   	sti    
ffff80000080a251:	48 0f 07             	sysretq 

ffff80000080a254 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:27
static u32 font_width_bytes;
static u8 *glyph_table;
static u32 bytes_per_glyph, glyph_nr;
int font_size=1;
void init_framebuffer()
{
ffff80000080a254:	f3 0f 1e fa          	endbr64 
ffff80000080a258:	55                   	push   rbp
ffff80000080a259:	48 89 e5             	mov    rbp,rsp
ffff80000080a25c:	41 57                	push   r15
ffff80000080a25e:	53                   	push   rbx
ffff80000080a25f:	48 83 ec 50          	sub    rsp,0x50
ffff80000080a263:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a263 <init_framebuffer+0xf>
ffff80000080a26a:	49 bb f5 38 11 00 00 	movabs r11,0x1138f5
ffff80000080a271:	00 00 00 
ffff80000080a274:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
ffff80000080a277:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a27e:	ff ff ff 
ffff80000080a281:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a285:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a288:	89 c0                	mov    eax,eax
ffff80000080a28a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:30
    size_t h=framebuffer.common.framebuffer_height;
ffff80000080a28e:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a295:	ff ff ff 
ffff80000080a298:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a29c:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a29f:	89 c0                	mov    eax,eax
ffff80000080a2a1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
ffff80000080a2a5:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a2ac:	ff ff ff 
ffff80000080a2af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a2b3:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080a2b7:	c0 e8 03             	shr    al,0x3
ffff80000080a2ba:	0f b6 c0             	movzx  eax,al
ffff80000080a2bd:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t inter=framebuffer.common.framebuffer_pitch;
ffff80000080a2c1:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a2c8:	ff ff ff 
ffff80000080a2cb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a2cf:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a2d2:	89 c0                	mov    eax,eax
ffff80000080a2d4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t pc=w*h;
ffff80000080a2d8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a2dc:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
ffff80000080a2e1:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t size=h*inter;
ffff80000080a2e5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a2e9:	48 0f af 45 b8       	imul   rax,QWORD PTR [rbp-0x48]
ffff80000080a2ee:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    int pgc=size/PAGE_SIZE;
ffff80000080a2f2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a2f6:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080a2fa:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    addr_t p=FRAMEBUFFER_ADDR;
ffff80000080a2fd:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a304:	80 ff ff 
ffff80000080a307:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    addr_t pp=framebuffer.common.framebuffer_addr;
ffff80000080a30b:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a312:	ff ff ff 
ffff80000080a315:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a319:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080a31d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    for (size_t i = 0; i < pgc; i++)
ffff80000080a321:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080a328:	00 
ffff80000080a329:	eb 44                	jmp    ffff80000080a36f <init_framebuffer+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
ffff80000080a32b:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080a32f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a333:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
ffff80000080a33a:	80 ff ff 
ffff80000080a33d:	48 89 d1             	mov    rcx,rdx
ffff80000080a340:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080a345:	48 89 c7             	mov    rdi,rax
ffff80000080a348:	49 89 df             	mov    r15,rbx
ffff80000080a34b:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff80000080a352:	ff ff ff 
ffff80000080a355:	48 01 d8             	add    rax,rbx
ffff80000080a358:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:41 (discriminator 3)
        pp+=PAGE_SIZE;
ffff80000080a35a:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080a361:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
        p+=PAGE_SIZE;
ffff80000080a362:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffff80000080a369:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
ffff80000080a36a:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 1)
ffff80000080a36f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080a372:	48 98                	cdqe   
ffff80000080a374:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080a378:	72 b1                	jb     ffff80000080a32b <init_framebuffer+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:46
    }
    
    
}
ffff80000080a37a:	90                   	nop
ffff80000080a37b:	90                   	nop
ffff80000080a37c:	48 83 c4 50          	add    rsp,0x50
ffff80000080a380:	5b                   	pop    rbx
ffff80000080a381:	41 5f                	pop    r15
ffff80000080a383:	5d                   	pop    rbp
ffff80000080a384:	c3                   	ret    

ffff80000080a385 <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
void init_font(){
ffff80000080a385:	f3 0f 1e fa          	endbr64 
ffff80000080a389:	55                   	push   rbp
ffff80000080a38a:	48 89 e5             	mov    rbp,rsp
ffff80000080a38d:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080a38d <init_font+0x8>
ffff80000080a394:	49 bb cb 37 11 00 00 	movabs r11,0x1137cb
ffff80000080a39b:	00 00 00 
ffff80000080a39e:	4c 01 d9             	add    rcx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
ffff80000080a3a1:	48 b8 88 64 af ff ff 	movabs rax,0xffffffffffaf6488
ffff80000080a3a8:	ff ff ff 
ffff80000080a3ab:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff80000080a3b2:	ff ff ff 
ffff80000080a3b5:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff80000080a3b9:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:50

    font_width_bytes = (boot_font->width + 7) / 8;
ffff80000080a3bd:	48 b8 88 64 af ff ff 	movabs rax,0xffffffffffaf6488
ffff80000080a3c4:	ff ff ff 
ffff80000080a3c7:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a3cb:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080a3ce:	83 c0 07             	add    eax,0x7
ffff80000080a3d1:	c1 e8 03             	shr    eax,0x3
ffff80000080a3d4:	89 c2                	mov    edx,eax
ffff80000080a3d6:	48 b8 98 64 af ff ff 	movabs rax,0xffffffffffaf6498
ffff80000080a3dd:	ff ff ff 
ffff80000080a3e0:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51
    font_width = font_width_bytes * 8;
ffff80000080a3e3:	48 b8 98 64 af ff ff 	movabs rax,0xffffffffffaf6498
ffff80000080a3ea:	ff ff ff 
ffff80000080a3ed:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080a3f0:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff80000080a3f7:	48 b8 90 64 af ff ff 	movabs rax,0xffffffffffaf6490
ffff80000080a3fe:	ff ff ff 
ffff80000080a401:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_height = boot_font->height;
ffff80000080a404:	48 b8 88 64 af ff ff 	movabs rax,0xffffffffffaf6488
ffff80000080a40b:	ff ff ff 
ffff80000080a40e:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a412:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a415:	48 ba 94 64 af ff ff 	movabs rdx,0xffffffffffaf6494
ffff80000080a41c:	ff ff ff 
ffff80000080a41f:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:54

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
ffff80000080a422:	48 b8 88 64 af ff ff 	movabs rax,0xffffffffffaf6488
ffff80000080a429:	ff ff ff 
ffff80000080a42c:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a430:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a433:	89 c2                	mov    edx,eax
ffff80000080a435:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff80000080a43c:	ff ff ff 
ffff80000080a43f:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a443:	48 01 c2             	add    rdx,rax
ffff80000080a446:	48 b8 a0 64 af ff ff 	movabs rax,0xffffffffffaf64a0
ffff80000080a44d:	ff ff ff 
ffff80000080a450:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55
    glyph_nr = boot_font->glyph_nr;
ffff80000080a454:	48 b8 88 64 af ff ff 	movabs rax,0xffffffffffaf6488
ffff80000080a45b:	ff ff ff 
ffff80000080a45e:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a462:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a465:	48 ba ac 64 af ff ff 	movabs rdx,0xffffffffffaf64ac
ffff80000080a46c:	ff ff ff 
ffff80000080a46f:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    bytes_per_glyph = boot_font->bytes_per_glyph;
ffff80000080a472:	48 b8 88 64 af ff ff 	movabs rax,0xffffffffffaf6488
ffff80000080a479:	ff ff ff 
ffff80000080a47c:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a480:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a483:	48 ba a8 64 af ff ff 	movabs rdx,0xffffffffffaf64a8
ffff80000080a48a:	ff ff ff 
ffff80000080a48d:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:58

    fb_cursor_x = fb_cursor_y = 0;
ffff80000080a490:	48 b8 78 64 af ff ff 	movabs rax,0xffffffffffaf6478
ffff80000080a497:	ff ff ff 
ffff80000080a49a:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
ffff80000080a4a1:	48 b8 78 64 af ff ff 	movabs rax,0xffffffffffaf6478
ffff80000080a4a8:	ff ff ff 
ffff80000080a4ab:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080a4ae:	48 ba 74 64 af ff ff 	movabs rdx,0xffffffffffaf6474
ffff80000080a4b5:	ff ff ff 
ffff80000080a4b8:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
ffff80000080a4bb:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a4c2:	ff ff ff 
ffff80000080a4c5:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a4c9:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a4cc:	48 ba 90 64 af ff ff 	movabs rdx,0xffffffffffaf6490
ffff80000080a4d3:	ff ff ff 
ffff80000080a4d6:	8b 34 11             	mov    esi,DWORD PTR [rcx+rdx*1]
ffff80000080a4d9:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a4de:	f7 f6                	div    esi
ffff80000080a4e0:	89 c2                	mov    edx,eax
ffff80000080a4e2:	48 b8 7c 64 af ff ff 	movabs rax,0xffffffffffaf647c
ffff80000080a4e9:	ff ff ff 
ffff80000080a4ec:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
ffff80000080a4ef:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a4f6:	ff ff ff 
ffff80000080a4f9:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a4fd:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a500:	48 ba 94 64 af ff ff 	movabs rdx,0xffffffffffaf6494
ffff80000080a507:	ff ff ff 
ffff80000080a50a:	8b 3c 11             	mov    edi,DWORD PTR [rcx+rdx*1]
ffff80000080a50d:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a512:	f7 f7                	div    edi
ffff80000080a514:	89 c2                	mov    edx,eax
ffff80000080a516:	48 b8 80 64 af ff ff 	movabs rax,0xffffffffffaf6480
ffff80000080a51d:	ff ff ff 
ffff80000080a520:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    font_size=1;
ffff80000080a523:	48 b8 38 fe ff ff ff 	movabs rax,0xfffffffffffffe38
ffff80000080a52a:	ff ff ff 
ffff80000080a52d:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a531:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
}
ffff80000080a537:	90                   	nop
ffff80000080a538:	5d                   	pop    rbp
ffff80000080a539:	c3                   	ret    

ffff80000080a53a <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
ffff80000080a53a:	f3 0f 1e fa          	endbr64 
ffff80000080a53e:	55                   	push   rbp
ffff80000080a53f:	48 89 e5             	mov    rbp,rsp
ffff80000080a542:	53                   	push   rbx
ffff80000080a543:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a543 <set_framebuffer+0x9>
ffff80000080a54a:	49 bb 15 36 11 00 00 	movabs r11,0x113615
ffff80000080a551:	00 00 00 
ffff80000080a554:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:65
    framebuffer=tag;
ffff80000080a557:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a55e:	ff ff ff 
ffff80000080a561:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a565:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff80000080a569:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
ffff80000080a56d:	48 89 08             	mov    QWORD PTR [rax],rcx
ffff80000080a570:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
ffff80000080a574:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff80000080a578:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
ffff80000080a57c:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffff80000080a580:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffff80000080a584:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff80000080a588:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
}
ffff80000080a58c:	90                   	nop
ffff80000080a58d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080a591:	c9                   	leave  
ffff80000080a592:	c3                   	ret    

ffff80000080a593 <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68

void fill_rect(int x,int y,int w,int h,unsigned int color){
ffff80000080a593:	f3 0f 1e fa          	endbr64 
ffff80000080a597:	55                   	push   rbp
ffff80000080a598:	48 89 e5             	mov    rbp,rsp
ffff80000080a59b:	4c 8d 0d f9 ff ff ff 	lea    r9,[rip+0xfffffffffffffff9]        # ffff80000080a59b <fill_rect+0x8>
ffff80000080a5a2:	49 bb bd 35 11 00 00 	movabs r11,0x1135bd
ffff80000080a5a9:	00 00 00 
ffff80000080a5ac:	4d 01 d9             	add    r9,r11
ffff80000080a5af:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080a5b2:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080a5b5:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080a5b8:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff80000080a5bb:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
ffff80000080a5bf:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a5c6:	80 ff ff 
ffff80000080a5c9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
ffff80000080a5cd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a5d0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffff80000080a5d3:	e9 82 00 00 00       	jmp    ffff80000080a65a <fill_rect+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72
        for(int px=y;px<w+y;px++){
ffff80000080a5d8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a5db:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffff80000080a5de:	eb 69                	jmp    ffff80000080a649 <fill_rect+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a5e0:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a5e7:	ff ff ff 
ffff80000080a5ea:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080a5ee:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff80000080a5f1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080a5f4:	0f af c2             	imul   eax,edx
ffff80000080a5f7:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:74 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080a5f9:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a600:	ff ff ff 
ffff80000080a603:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080a607:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080a60b:	0f b6 c0             	movzx  eax,al
ffff80000080a60e:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
ffff80000080a612:	8d 50 07             	lea    edx,[rax+0x7]
ffff80000080a615:	85 c0                	test   eax,eax
ffff80000080a617:	0f 48 c2             	cmovs  eax,edx
ffff80000080a61a:	c1 f8 03             	sar    eax,0x3
ffff80000080a61d:	48 98                	cdqe   
ffff80000080a61f:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a623:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a62a:	80 ff ff 
ffff80000080a62d:	48 01 d0             	add    rax,rdx
ffff80000080a630:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 3)
            fb=(unsigned int*)ptr;
ffff80000080a634:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a638:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
            *fb=color;
ffff80000080a63c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080a640:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080a643:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 3)
        for(int px=y;px<w+y;px++){
ffff80000080a645:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 1)
ffff80000080a649:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a64c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a64f:	01 d0                	add    eax,edx
ffff80000080a651:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
ffff80000080a654:	7c 8a                	jl     ffff80000080a5e0 <fill_rect+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 2)
    for(int py=x;py<h+x;py++){
ffff80000080a656:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 1)
ffff80000080a65a:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080a65d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a660:	01 d0                	add    eax,edx
ffff80000080a662:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffff80000080a665:	0f 8c 6d ff ff ff    	jl     ffff80000080a5d8 <fill_rect+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79
        }
    }
}
ffff80000080a66b:	90                   	nop
ffff80000080a66c:	90                   	nop
ffff80000080a66d:	5d                   	pop    rbp
ffff80000080a66e:	c3                   	ret    

ffff80000080a66f <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:82
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
ffff80000080a66f:	f3 0f 1e fa          	endbr64 
ffff80000080a673:	55                   	push   rbp
ffff80000080a674:	48 89 e5             	mov    rbp,rsp
ffff80000080a677:	41 57                	push   r15
ffff80000080a679:	53                   	push   rbx
ffff80000080a67a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a67e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a67e <draw_text+0xf>
ffff80000080a685:	49 bb da 34 11 00 00 	movabs r11,0x1134da
ffff80000080a68c:	00 00 00 
ffff80000080a68f:	4c 01 db             	add    rbx,r11
ffff80000080a692:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080a695:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080a698:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080a69b:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
    int tx=x;
ffff80000080a69f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a6a2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080a6a5:	eb 75                	jmp    ffff80000080a71c <draw_text+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
    {
        if(*str=='\n')
ffff80000080a6a7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a6ab:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a6ae:	3c 0a                	cmp    al,0xa
ffff80000080a6b0:	75 23                	jne    ffff80000080a6d5 <draw_text+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
        {
            y+=font_height*size;
ffff80000080a6b2:	48 b8 94 64 af ff ff 	movabs rax,0xffffffffffaf6494
ffff80000080a6b9:	ff ff ff 
ffff80000080a6bc:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080a6bf:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080a6c2:	0f af d0             	imul   edx,eax
ffff80000080a6c5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a6c8:	01 d0                	add    eax,edx
ffff80000080a6ca:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:89
            tx=x;
ffff80000080a6cd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a6d0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080a6d3:	eb 42                	jmp    ffff80000080a717 <draw_text+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
        }
        else
        {
            draw_letter(tx,y,size,*str);
ffff80000080a6d5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a6d9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a6dc:	0f be c8             	movsx  ecx,al
ffff80000080a6df:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a6e2:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
ffff80000080a6e5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a6e8:	89 c7                	mov    edi,eax
ffff80000080a6ea:	49 89 df             	mov    r15,rbx
ffff80000080a6ed:	48 b8 da cb ee ff ff 	movabs rax,0xffffffffffeecbda
ffff80000080a6f4:	ff ff ff 
ffff80000080a6f7:	48 01 d8             	add    rax,rbx
ffff80000080a6fa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:94
            tx+=size*font_width;
ffff80000080a6fc:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a6ff:	48 b8 90 64 af ff ff 	movabs rax,0xffffffffffaf6490
ffff80000080a706:	ff ff ff 
ffff80000080a709:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080a70c:	0f af d0             	imul   edx,eax
ffff80000080a70f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a712:	01 d0                	add    eax,edx
ffff80000080a714:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:96
        }
        str++;
ffff80000080a717:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080a71c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a720:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a723:	84 c0                	test   al,al
ffff80000080a725:	75 80                	jne    ffff80000080a6a7 <draw_text+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
    }
}
ffff80000080a727:	90                   	nop
ffff80000080a728:	90                   	nop
ffff80000080a729:	48 83 c4 30          	add    rsp,0x30
ffff80000080a72d:	5b                   	pop    rbx
ffff80000080a72e:	41 5f                	pop    r15
ffff80000080a730:	5d                   	pop    rbp
ffff80000080a731:	c3                   	ret    

ffff80000080a732 <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:99
void draw_letter(int x, volatile int y, int size, char c) {
ffff80000080a732:	f3 0f 1e fa          	endbr64 
ffff80000080a736:	55                   	push   rbp
ffff80000080a737:	48 89 e5             	mov    rbp,rsp
ffff80000080a73a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a73a <draw_letter+0x8>
ffff80000080a741:	49 bb 1e 34 11 00 00 	movabs r11,0x11341e
ffff80000080a748:	00 00 00 
ffff80000080a74b:	4c 01 d8             	add    rax,r11
ffff80000080a74e:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080a751:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
ffff80000080a754:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
ffff80000080a757:	89 ca                	mov    edx,ecx
ffff80000080a759:	88 55 c0             	mov    BYTE PTR [rbp-0x40],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
    u8 *glyph = glyph_table;
ffff80000080a75c:	48 ba a0 64 af ff ff 	movabs rdx,0xffffffffffaf64a0
ffff80000080a763:	ff ff ff 
ffff80000080a766:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a76a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:101
    if (c < glyph_nr) {
ffff80000080a76e:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080a772:	48 ba ac 64 af ff ff 	movabs rdx,0xffffffffffaf64ac
ffff80000080a779:	ff ff ff 
ffff80000080a77c:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a77f:	39 d1                	cmp    ecx,edx
ffff80000080a781:	73 1a                	jae    ffff80000080a79d <draw_letter+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
        glyph += c * bytes_per_glyph;
ffff80000080a783:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080a787:	48 ba a8 64 af ff ff 	movabs rdx,0xffffffffffaf64a8
ffff80000080a78e:	ff ff ff 
ffff80000080a791:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a794:	0f af d1             	imul   edx,ecx
ffff80000080a797:	89 d2                	mov    edx,edx
ffff80000080a799:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080a79d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080a7a4:	e9 f8 00 00 00       	jmp    ffff80000080a8a1 <draw_letter+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        u8 mask = 1 << 7;
ffff80000080a7a9:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080a7ad:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080a7b4:	e9 bb 00 00 00       	jmp    ffff80000080a874 <draw_letter+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
            int px=x+ch_x*size;
ffff80000080a7b9:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080a7bc:	89 d1                	mov    ecx,edx
ffff80000080a7be:	0f af 4d ec          	imul   ecx,DWORD PTR [rbp-0x14]
ffff80000080a7c2:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080a7c5:	01 ca                	add    edx,ecx
ffff80000080a7c7:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
            int py=y+ch_y*size;
ffff80000080a7ca:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080a7cd:	89 d1                	mov    ecx,edx
ffff80000080a7cf:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
ffff80000080a7d3:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff80000080a7d6:	01 ca                	add    edx,ecx
ffff80000080a7d8:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a7db:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a7e2:	ff ff ff 
ffff80000080a7e5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a7e9:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a7ec:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080a7ef:	0f af d1             	imul   edx,ecx
ffff80000080a7f2:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112
                     +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080a7f4:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a7fb:	ff ff ff 
ffff80000080a7fe:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a802:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080a806:	0f b6 d2             	movzx  edx,dl
ffff80000080a809:	0f af 55 e8          	imul   edx,DWORD PTR [rbp-0x18]
ffff80000080a80d:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080a810:	85 d2                	test   edx,edx
ffff80000080a812:	0f 48 d1             	cmovs  edx,ecx
ffff80000080a815:	c1 fa 03             	sar    edx,0x3
ffff80000080a818:	48 63 d2             	movsxd rdx,edx
ffff80000080a81b:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080a81f:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080a826:	80 ff ff 
ffff80000080a829:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a82c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            if ((*(glyph + ch_x / 8) & mask) != 0) {
ffff80000080a830:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080a833:	c1 ea 03             	shr    edx,0x3
ffff80000080a836:	89 d1                	mov    ecx,edx
ffff80000080a838:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a83c:	48 01 ca             	add    rdx,rcx
ffff80000080a83f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080a842:	22 55 f3             	and    dl,BYTE PTR [rbp-0xd]
ffff80000080a845:	84 d2                	test   dl,dl
ffff80000080a847:	74 0c                	je     ffff80000080a855 <draw_letter+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
                *ptr=-1;
ffff80000080a849:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a84d:	c7 02 ff ff ff ff    	mov    DWORD PTR [rdx],0xffffffff
ffff80000080a853:	eb 0a                	jmp    ffff80000080a85f <draw_letter+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
            } else {
                *ptr=0;
ffff80000080a855:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a859:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:119
            }

            mask >>= 1;
ffff80000080a85f:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            if (ch_x % 8 == 0) {
ffff80000080a862:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080a865:	83 e2 07             	and    edx,0x7
ffff80000080a868:	85 d2                	test   edx,edx
ffff80000080a86a:	75 04                	jne    ffff80000080a870 <draw_letter+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:121
                mask = 1 << 7;
ffff80000080a86c:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080a870:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 1)
ffff80000080a874:	48 ba 90 64 af ff ff 	movabs rdx,0xffffffffffaf6490
ffff80000080a87b:	ff ff ff 
ffff80000080a87e:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a881:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080a884:	0f 82 2f ff ff ff    	jb     ffff80000080a7b9 <draw_letter+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
ffff80000080a88a:	48 ba 98 64 af ff ff 	movabs rdx,0xffffffffffaf6498
ffff80000080a891:	ff ff ff 
ffff80000080a894:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a897:	89 d2                	mov    edx,edx
ffff80000080a899:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080a89d:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 1)
ffff80000080a8a1:	48 ba 94 64 af ff ff 	movabs rdx,0xffffffffffaf6494
ffff80000080a8a8:	ff ff ff 
ffff80000080a8ab:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a8ae:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080a8b1:	0f 82 f2 fe ff ff    	jb     ffff80000080a7a9 <draw_letter+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:127
    }
}
ffff80000080a8b7:	90                   	nop
ffff80000080a8b8:	90                   	nop
ffff80000080a8b9:	5d                   	pop    rbp
ffff80000080a8ba:	c3                   	ret    

ffff80000080a8bb <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129
//向上滚动一个像素
void scr_up(){
ffff80000080a8bb:	f3 0f 1e fa          	endbr64 
ffff80000080a8bf:	55                   	push   rbp
ffff80000080a8c0:	48 89 e5             	mov    rbp,rsp
ffff80000080a8c3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a8c3 <scr_up+0x8>
ffff80000080a8ca:	49 bb 95 32 11 00 00 	movabs r11,0x113295
ffff80000080a8d1:	00 00 00 
ffff80000080a8d4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080a8d7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080a8de:	e9 ad 00 00 00       	jmp    ffff80000080a990 <scr_up+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080a8e3:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080a8ea:	e9 81 00 00 00       	jmp    ffff80000080a970 <scr_up+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
                    dy*framebuffer.common.framebuffer_pitch
ffff80000080a8ef:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a8f6:	ff ff ff 
ffff80000080a8f9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a8fd:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a900:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a903:	0f af d1             	imul   edx,ecx
ffff80000080a906:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134 (discriminator 3)
                    +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080a908:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a90f:	ff ff ff 
ffff80000080a912:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a916:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080a91a:	0f b6 d2             	movzx  edx,dl
ffff80000080a91d:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080a921:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080a924:	85 d2                	test   edx,edx
ffff80000080a926:	0f 48 d1             	cmovs  edx,ecx
ffff80000080a929:	c1 fa 03             	sar    edx,0x3
ffff80000080a92c:	48 63 d2             	movsxd rdx,edx
ffff80000080a92f:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080a933:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080a93a:	80 ff ff 
ffff80000080a93d:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:132 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
ffff80000080a940:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135 (discriminator 3)
            *p=*(p+framebuffer.common.framebuffer_pitch);
ffff80000080a944:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a94b:	ff ff ff 
ffff80000080a94e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a952:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080a955:	89 d1                	mov    ecx,edx
ffff80000080a957:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a95b:	48 01 ca             	add    rdx,rcx
ffff80000080a95e:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080a961:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a965:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136 (discriminator 3)
            p++;
ffff80000080a967:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 3)
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080a96c:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 1)
ffff80000080a970:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a977:	ff ff ff 
ffff80000080a97a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a97e:	8b 4a 14             	mov    ecx,DWORD PTR [rdx+0x14]
ffff80000080a981:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080a984:	39 d1                	cmp    ecx,edx
ffff80000080a986:	0f 87 63 ff ff ff    	ja     ffff80000080a8ef <scr_up+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 2)
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080a98c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 1)
ffff80000080a990:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a997:	ff ff ff 
ffff80000080a99a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a99e:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080a9a1:	8d 4a ff             	lea    ecx,[rdx-0x1]
ffff80000080a9a4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a9a7:	39 d1                	cmp    ecx,edx
ffff80000080a9a9:	0f 87 34 ff ff ff    	ja     ffff80000080a8e3 <scr_up+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:142
        }

    }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
ffff80000080a9af:	90                   	nop
ffff80000080a9b0:	90                   	nop
ffff80000080a9b1:	5d                   	pop    rbp
ffff80000080a9b2:	c3                   	ret    

ffff80000080a9b3 <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:143
void scr_down(){
ffff80000080a9b3:	f3 0f 1e fa          	endbr64 
ffff80000080a9b7:	55                   	push   rbp
ffff80000080a9b8:	48 89 e5             	mov    rbp,rsp
ffff80000080a9bb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a9bb <scr_down+0x8>
ffff80000080a9c2:	49 bb 9d 31 11 00 00 	movabs r11,0x11319d
ffff80000080a9c9:	00 00 00 
ffff80000080a9cc:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080a9cf:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffff80000080a9d6:	e9 aa 00 00 00       	jmp    ffff80000080aa85 <scr_down+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080a9db:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080a9e2:	e9 82 00 00 00       	jmp    ffff80000080aa69 <scr_down+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080a9e7:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a9ee:	ff ff ff 
ffff80000080a9f1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a9f5:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a9f8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a9fb:	0f af d1             	imul   edx,ecx
ffff80000080a9fe:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:147 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080aa00:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080aa07:	ff ff ff 
ffff80000080aa0a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080aa0e:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080aa12:	0f b6 d2             	movzx  edx,dl
ffff80000080aa15:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080aa19:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080aa1c:	85 d2                	test   edx,edx
ffff80000080aa1e:	0f 48 d1             	cmovs  edx,ecx
ffff80000080aa21:	c1 fa 03             	sar    edx,0x3
ffff80000080aa24:	48 63 d2             	movsxd rdx,edx
ffff80000080aa27:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080aa2b:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080aa32:	80 ff ff 
ffff80000080aa35:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080aa38:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:148 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
ffff80000080aa3c:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080aa43:	ff ff ff 
ffff80000080aa46:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080aa4a:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080aa4d:	89 d2                	mov    edx,edx
ffff80000080aa4f:	48 89 d1             	mov    rcx,rdx
ffff80000080aa52:	48 f7 d9             	neg    rcx
ffff80000080aa55:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080aa59:	48 01 ca             	add    rdx,rcx
ffff80000080aa5c:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080aa5f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080aa63:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080aa65:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 1)
ffff80000080aa69:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080aa6c:	48 ba 7c 64 af ff ff 	movabs rdx,0xffffffffffaf647c
ffff80000080aa73:	ff ff ff 
ffff80000080aa76:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080aa79:	39 d1                	cmp    ecx,edx
ffff80000080aa7b:	0f 82 66 ff ff ff    	jb     ffff80000080a9e7 <scr_down+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080aa81:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 1)
ffff80000080aa85:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080aa88:	48 ba 80 64 af ff ff 	movabs rdx,0xffffffffffaf6480
ffff80000080aa8f:	ff ff ff 
ffff80000080aa92:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080aa95:	39 d1                	cmp    ecx,edx
ffff80000080aa97:	0f 82 3e ff ff ff    	jb     ffff80000080a9db <scr_down+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
        }

    }
}
ffff80000080aa9d:	90                   	nop
ffff80000080aa9e:	90                   	nop
ffff80000080aa9f:	5d                   	pop    rbp
ffff80000080aaa0:	c3                   	ret    

ffff80000080aaa1 <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
void print(char* s){
ffff80000080aaa1:	f3 0f 1e fa          	endbr64 
ffff80000080aaa5:	55                   	push   rbp
ffff80000080aaa6:	48 89 e5             	mov    rbp,rsp
ffff80000080aaa9:	41 57                	push   r15
ffff80000080aaab:	53                   	push   rbx
ffff80000080aaac:	48 83 ec 10          	sub    rsp,0x10
ffff80000080aab0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080aab0 <print+0xf>
ffff80000080aab7:	49 bb a8 30 11 00 00 	movabs r11,0x1130a8
ffff80000080aabe:	00 00 00 
ffff80000080aac1:	4c 01 db             	add    rbx,r11
ffff80000080aac4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080aac8:	e9 55 01 00 00       	jmp    ffff80000080ac22 <print+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
ffff80000080aacd:	48 b8 74 64 af ff ff 	movabs rax,0xffffffffffaf6474
ffff80000080aad4:	ff ff ff 
ffff80000080aad7:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080aada:	48 b8 7c 64 af ff ff 	movabs rax,0xffffffffffaf647c
ffff80000080aae1:	ff ff ff 
ffff80000080aae4:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080aae7:	39 c2                	cmp    edx,eax
ffff80000080aae9:	77 0b                	ja     ffff80000080aaf6 <print+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 1)
ffff80000080aaeb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aaef:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aaf2:	3c 0a                	cmp    al,0xa
ffff80000080aaf4:	75 2e                	jne    ffff80000080ab24 <print+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157
        {
            fb_cursor_y+=1;
ffff80000080aaf6:	48 b8 78 64 af ff ff 	movabs rax,0xffffffffffaf6478
ffff80000080aafd:	ff ff ff 
ffff80000080ab00:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080ab03:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080ab06:	48 b8 78 64 af ff ff 	movabs rax,0xffffffffffaf6478
ffff80000080ab0d:	ff ff ff 
ffff80000080ab10:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:158
            fb_cursor_x=0;
ffff80000080ab13:	48 b8 74 64 af ff ff 	movabs rax,0xffffffffffaf6474
ffff80000080ab1a:	ff ff ff 
ffff80000080ab1d:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        }
        if(*s=='\n')continue;
ffff80000080ab24:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ab28:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ab2b:	3c 0a                	cmp    al,0xa
ffff80000080ab2d:	0f 84 e9 00 00 00    	je     ffff80000080ac1c <print+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        if(fb_cursor_y>=max_ch_nr_y-1){
ffff80000080ab33:	48 b8 80 64 af ff ff 	movabs rax,0xffffffffffaf6480
ffff80000080ab3a:	ff ff ff 
ffff80000080ab3d:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080ab40:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080ab43:	48 b8 78 64 af ff ff 	movabs rax,0xffffffffffaf6478
ffff80000080ab4a:	ff ff ff 
ffff80000080ab4d:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080ab50:	39 c2                	cmp    edx,eax
ffff80000080ab52:	77 11                	ja     ffff80000080ab65 <print+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:165
//            for(int i=0;i<font_height*font_size;i++)
////                scr_up();
////            fb_cursor_y=max_ch_nr_y-1;
            fb_cursor_y=0;
ffff80000080ab54:	48 b8 78 64 af ff ff 	movabs rax,0xffffffffffaf6478
ffff80000080ab5b:	ff ff ff 
ffff80000080ab5e:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
ffff80000080ab65:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ab69:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ab6c:	0f be d0             	movsx  edx,al
ffff80000080ab6f:	48 b8 38 fe ff ff ff 	movabs rax,0xfffffffffffffe38
ffff80000080ab76:	ff ff ff 
ffff80000080ab79:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ab7d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ab7f:	48 b9 78 64 af ff ff 	movabs rcx,0xffffffffffaf6478
ffff80000080ab86:	ff ff ff 
ffff80000080ab89:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080ab8c:	48 b9 94 64 af ff ff 	movabs rcx,0xffffffffffaf6494
ffff80000080ab93:	ff ff ff 
ffff80000080ab96:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080ab99:	0f af f1             	imul   esi,ecx
ffff80000080ab9c:	48 b9 38 fe ff ff ff 	movabs rcx,0xfffffffffffffe38
ffff80000080aba3:	ff ff ff 
ffff80000080aba6:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080abaa:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080abac:	0f af ce             	imul   ecx,esi
ffff80000080abaf:	41 89 c8             	mov    r8d,ecx
ffff80000080abb2:	48 b9 74 64 af ff ff 	movabs rcx,0xffffffffffaf6474
ffff80000080abb9:	ff ff ff 
ffff80000080abbc:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080abbf:	48 b9 90 64 af ff ff 	movabs rcx,0xffffffffffaf6490
ffff80000080abc6:	ff ff ff 
ffff80000080abc9:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080abcc:	0f af f1             	imul   esi,ecx
ffff80000080abcf:	48 b9 38 fe ff ff ff 	movabs rcx,0xfffffffffffffe38
ffff80000080abd6:	ff ff ff 
ffff80000080abd9:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080abdd:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080abdf:	0f af ce             	imul   ecx,esi
ffff80000080abe2:	89 cf                	mov    edi,ecx
ffff80000080abe4:	89 d1                	mov    ecx,edx
ffff80000080abe6:	89 c2                	mov    edx,eax
ffff80000080abe8:	44 89 c6             	mov    esi,r8d
ffff80000080abeb:	49 89 df             	mov    r15,rbx
ffff80000080abee:	48 b8 da cb ee ff ff 	movabs rax,0xffffffffffeecbda
ffff80000080abf5:	ff ff ff 
ffff80000080abf8:	48 01 d8             	add    rax,rbx
ffff80000080abfb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:168
        fb_cursor_x+=1;
ffff80000080abfd:	48 b8 74 64 af ff ff 	movabs rax,0xffffffffffaf6474
ffff80000080ac04:	ff ff ff 
ffff80000080ac07:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080ac0a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080ac0d:	48 b8 74 64 af ff ff 	movabs rax,0xffffffffffaf6474
ffff80000080ac14:	ff ff ff 
ffff80000080ac17:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
ffff80000080ac1a:	eb 01                	jmp    ffff80000080ac1d <print+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        if(*s=='\n')continue;
ffff80000080ac1c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080ac1d:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
ffff80000080ac22:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ac26:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ac29:	84 c0                	test   al,al
ffff80000080ac2b:	0f 85 9c fe ff ff    	jne    ffff80000080aacd <print+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
    }
}
ffff80000080ac31:	90                   	nop
ffff80000080ac32:	90                   	nop
ffff80000080ac33:	48 83 c4 10          	add    rsp,0x10
ffff80000080ac37:	5b                   	pop    rbx
ffff80000080ac38:	41 5f                	pop    r15
ffff80000080ac3a:	5d                   	pop    rbp
ffff80000080ac3b:	c3                   	ret    

ffff80000080ac3c <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080ac3c:	f3 0f 1e fa          	endbr64 
ffff80000080ac40:	55                   	push   rbp
ffff80000080ac41:	48 89 e5             	mov    rbp,rsp
ffff80000080ac44:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ac44 <open_framebuffer+0x8>
ffff80000080ac4b:	49 bb 14 2f 11 00 00 	movabs r11,0x112f14
ffff80000080ac52:	00 00 00 
ffff80000080ac55:	4c 01 d8             	add    rax,r11
ffff80000080ac58:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ac5c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
    inode->f_ops=&framebuffer_fops;
ffff80000080ac60:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080ac64:	48 b9 50 fe ff ff ff 	movabs rcx,0xfffffffffffffe50
ffff80000080ac6b:	ff ff ff 
ffff80000080ac6e:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ac72:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
    filp->f_ops=&framebuffer_fops;
ffff80000080ac76:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080ac7a:	48 b9 50 fe ff ff ff 	movabs rcx,0xfffffffffffffe50
ffff80000080ac81:	ff ff ff 
ffff80000080ac84:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080ac88:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
    return 1;
ffff80000080ac8c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:179
}
ffff80000080ac91:	5d                   	pop    rbp
ffff80000080ac92:	c3                   	ret    

ffff80000080ac93 <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
long close_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080ac93:	f3 0f 1e fa          	endbr64 
ffff80000080ac97:	55                   	push   rbp
ffff80000080ac98:	48 89 e5             	mov    rbp,rsp
ffff80000080ac9b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ac9b <close_framebuffer+0x8>
ffff80000080aca2:	49 bb bd 2e 11 00 00 	movabs r11,0x112ebd
ffff80000080aca9:	00 00 00 
ffff80000080acac:	4c 01 d8             	add    rax,r11
ffff80000080acaf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080acb3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:182

}
ffff80000080acb7:	90                   	nop
ffff80000080acb8:	5d                   	pop    rbp
ffff80000080acb9:	c3                   	ret    

ffff80000080acba <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:183
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080acba:	f3 0f 1e fa          	endbr64 
ffff80000080acbe:	55                   	push   rbp
ffff80000080acbf:	48 89 e5             	mov    rbp,rsp
ffff80000080acc2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080acc2 <read_framebuffer+0x8>
ffff80000080acc9:	49 bb 96 2e 11 00 00 	movabs r11,0x112e96
ffff80000080acd0:	00 00 00 
ffff80000080acd3:	4c 01 d8             	add    rax,r11
ffff80000080acd6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080acda:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080acde:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080ace2:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185

}
ffff80000080ace6:	90                   	nop
ffff80000080ace7:	5d                   	pop    rbp
ffff80000080ace8:	c3                   	ret    

ffff80000080ace9 <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080ace9:	f3 0f 1e fa          	endbr64 
ffff80000080aced:	55                   	push   rbp
ffff80000080acee:	48 89 e5             	mov    rbp,rsp
ffff80000080acf1:	41 57                	push   r15
ffff80000080acf3:	53                   	push   rbx
ffff80000080acf4:	48 83 ec 40          	sub    rsp,0x40
ffff80000080acf8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080acf8 <write_framebuffer+0xf>
ffff80000080acff:	49 bb 60 2e 11 00 00 	movabs r11,0x112e60
ffff80000080ad06:	00 00 00 
ffff80000080ad09:	4c 01 db             	add    rbx,r11
ffff80000080ad0c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080ad10:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080ad14:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080ad18:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    char *tmp= (char*) kmalloc();
ffff80000080ad1c:	49 89 df             	mov    r15,rbx
ffff80000080ad1f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ad24:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080ad2b:	ff ff ff 
ffff80000080ad2e:	48 01 da             	add    rdx,rbx
ffff80000080ad31:	ff d2                	call   rdx
ffff80000080ad33:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    int c=count/(PAGE_4K_SIZE-1),p=0;
ffff80000080ad37:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080ad3b:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
ffff80000080ad42:	01 10 00 
ffff80000080ad45:	48 89 c8             	mov    rax,rcx
ffff80000080ad48:	48 f7 e2             	mul    rdx
ffff80000080ad4b:	48 89 c8             	mov    rax,rcx
ffff80000080ad4e:	48 29 d0             	sub    rax,rdx
ffff80000080ad51:	48 d1 e8             	shr    rax,1
ffff80000080ad54:	48 01 d0             	add    rax,rdx
ffff80000080ad57:	48 c1 e8 0b          	shr    rax,0xb
ffff80000080ad5b:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080ad5e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
ffff80000080ad65:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080ad6c:	eb 60                	jmp    ffff80000080adce <write_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:191 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
ffff80000080ad6e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ad71:	48 63 d0             	movsxd rdx,eax
ffff80000080ad74:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ad78:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080ad7c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad80:	ba ff 0f 00 00       	mov    edx,0xfff
ffff80000080ad85:	48 89 ce             	mov    rsi,rcx
ffff80000080ad88:	48 89 c7             	mov    rdi,rax
ffff80000080ad8b:	49 89 df             	mov    r15,rbx
ffff80000080ad8e:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080ad95:	ff ff ff 
ffff80000080ad98:	48 01 d8             	add    rax,rbx
ffff80000080ad9b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
ffff80000080ad9d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ada1:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ada7:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193 (discriminator 7)
        print(tmp);
ffff80000080adaa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080adae:	48 89 c7             	mov    rdi,rax
ffff80000080adb1:	49 89 df             	mov    r15,rbx
ffff80000080adb4:	48 b8 49 cf ee ff ff 	movabs rax,0xffffffffffeecf49
ffff80000080adbb:	ff ff ff 
ffff80000080adbe:	48 01 d8             	add    rax,rbx
ffff80000080adc1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:194 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
ffff80000080adc3:	81 45 ec ff 0f 00 00 	add    DWORD PTR [rbp-0x14],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
ffff80000080adca:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 1)
ffff80000080adce:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080add2:	74 05                	je     ffff80000080add9 <write_framebuffer+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 3)
ffff80000080add4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080add7:	eb 05                	jmp    ffff80000080adde <write_framebuffer+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 4)
ffff80000080add9:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 6)
ffff80000080adde:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
ffff80000080ade1:	7f 8b                	jg     ffff80000080ad6e <write_framebuffer+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
    }
    kmfree(tmp);
ffff80000080ade3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ade7:	48 89 c7             	mov    rdi,rax
ffff80000080adea:	49 89 df             	mov    r15,rbx
ffff80000080aded:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080adf4:	ff ff ff 
ffff80000080adf7:	48 01 d8             	add    rax,rbx
ffff80000080adfa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    return 0;
ffff80000080adfc:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
}
ffff80000080ae01:	48 83 c4 40          	add    rsp,0x40
ffff80000080ae05:	5b                   	pop    rbx
ffff80000080ae06:	41 5f                	pop    r15
ffff80000080ae08:	5d                   	pop    rbp
ffff80000080ae09:	c3                   	ret    

ffff80000080ae0a <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:199
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080ae0a:	f3 0f 1e fa          	endbr64 
ffff80000080ae0e:	55                   	push   rbp
ffff80000080ae0f:	48 89 e5             	mov    rbp,rsp
ffff80000080ae12:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ae12 <ioctl_framebuffer+0x8>
ffff80000080ae19:	49 bb 46 2d 11 00 00 	movabs r11,0x112d46
ffff80000080ae20:	00 00 00 
ffff80000080ae23:	4c 01 d8             	add    rax,r11
ffff80000080ae26:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ae2a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080ae2e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080ae32:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201

}
ffff80000080ae36:	90                   	nop
ffff80000080ae37:	5d                   	pop    rbp
ffff80000080ae38:	c3                   	ret    

ffff80000080ae39 <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:14
#include "mem.h"
#include "str.h"
#include <ramdisk.h>

struct dir_entry * path_walk(char * name,unsigned long flags)
{
ffff80000080ae39:	f3 0f 1e fa          	endbr64 
ffff80000080ae3d:	55                   	push   rbp
ffff80000080ae3e:	48 89 e5             	mov    rbp,rsp
ffff80000080ae41:	41 57                	push   r15
ffff80000080ae43:	53                   	push   rbx
ffff80000080ae44:	48 83 ec 70          	sub    rsp,0x70
ffff80000080ae48:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ae48 <path_walk+0xf>
ffff80000080ae4f:	49 bb 10 2d 11 00 00 	movabs r11,0x112d10
ffff80000080ae56:	00 00 00 
ffff80000080ae59:	4c 01 db             	add    rbx,r11
ffff80000080ae5c:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080ae60:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:15
    char * tmpname = NULL;
ffff80000080ae64:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080ae6b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:16
    int tmpnamelen = 0;
ffff80000080ae6c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:17
    struct dir_entry * parent = root_sb->root;
ffff80000080ae73:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080ae7a:	ff ff ff 
ffff80000080ae7d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ae81:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ae84:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ae87:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:18
    struct dir_entry * path = NULL;
ffff80000080ae8b:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080ae92:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20

    while(*name == '/')
ffff80000080ae93:	eb 05                	jmp    ffff80000080ae9a <path_walk+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:21
        name++;
ffff80000080ae95:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20
    while(*name == '/')
ffff80000080ae9a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ae9e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aea1:	3c 2f                	cmp    al,0x2f
ffff80000080aea3:	74 f0                	je     ffff80000080ae95 <path_walk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:23

    if(!*name)
ffff80000080aea5:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080aea9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aeac:	84 c0                	test   al,al
ffff80000080aeae:	75 09                	jne    ffff80000080aeb9 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:25
    {
        return parent;
ffff80000080aeb0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aeb4:	e9 f8 02 00 00       	jmp    ffff80000080b1b1 <path_walk+0x378>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
    }

    for(;;)
    {
        tmpname = name;
ffff80000080aeb9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080aebd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
        while(*name && (*name != '/'))
ffff80000080aec1:	eb 05                	jmp    ffff80000080aec8 <path_walk+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
            name++;
ffff80000080aec3:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
        while(*name && (*name != '/'))
ffff80000080aec8:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080aecc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aecf:	84 c0                	test   al,al
ffff80000080aed1:	74 0b                	je     ffff80000080aede <path_walk+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31 (discriminator 1)
ffff80000080aed3:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080aed7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aeda:	3c 2f                	cmp    al,0x2f
ffff80000080aedc:	75 e5                	jne    ffff80000080aec3 <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:33
        tmpnamelen = name - tmpname;
ffff80000080aede:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080aee2:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
ffff80000080aee6:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:35

        path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff80000080aee9:	be 00 00 00 00       	mov    esi,0x0
ffff80000080aeee:	bf 58 00 00 00       	mov    edi,0x58
ffff80000080aef3:	49 89 df             	mov    r15,rbx
ffff80000080aef6:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080aefb:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080af02:	ff ff ff 
ffff80000080af05:	48 01 da             	add    rdx,rbx
ffff80000080af08:	ff d2                	call   rdx
ffff80000080af0a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:36
        memset(path,0,sizeof(struct dir_entry));
ffff80000080af0e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af12:	ba 58 00 00 00       	mov    edx,0x58
ffff80000080af17:	be 00 00 00 00       	mov    esi,0x0
ffff80000080af1c:	48 89 c7             	mov    rdi,rax
ffff80000080af1f:	49 89 df             	mov    r15,rbx
ffff80000080af22:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080af29:	ff ff ff 
ffff80000080af2c:	48 01 d8             	add    rax,rbx
ffff80000080af2f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38

        path->name = kmalloc();
ffff80000080af31:	49 89 df             	mov    r15,rbx
ffff80000080af34:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080af39:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080af40:	ff ff ff 
ffff80000080af43:	48 01 da             	add    rdx,rbx
ffff80000080af46:	ff d2                	call   rdx
ffff80000080af48:	48 89 c2             	mov    rdx,rax
ffff80000080af4b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af4f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:39
        memset(path->name,0,tmpnamelen+1);
ffff80000080af52:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080af55:	83 c0 01             	add    eax,0x1
ffff80000080af58:	89 c2                	mov    edx,eax
ffff80000080af5a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af5e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af61:	be 00 00 00 00       	mov    esi,0x0
ffff80000080af66:	48 89 c7             	mov    rdi,rax
ffff80000080af69:	49 89 df             	mov    r15,rbx
ffff80000080af6c:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080af73:	ff ff ff 
ffff80000080af76:	48 01 d8             	add    rax,rbx
ffff80000080af79:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        memcpy(path->name,tmpname,tmpnamelen);
ffff80000080af7b:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080af7e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af82:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af85:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080af89:	48 89 ce             	mov    rsi,rcx
ffff80000080af8c:	48 89 c7             	mov    rdi,rax
ffff80000080af8f:	49 89 df             	mov    r15,rbx
ffff80000080af92:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080af99:	ff ff ff 
ffff80000080af9c:	48 01 d8             	add    rax,rbx
ffff80000080af9f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:41
        path->name_length = tmpnamelen;
ffff80000080afa1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080afa5:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080afa8:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:43

        path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
ffff80000080afab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080afaf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080afb3:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080afb7:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080afbb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080afbf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080afc3:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080afc7:	48 89 d6             	mov    rsi,rdx
ffff80000080afca:	48 89 c7             	mov    rdi,rax
ffff80000080afcd:	ff d1                	call   rcx
ffff80000080afcf:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:44
        if(path == NULL)
ffff80000080afd3:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffff80000080afd8:	75 71                	jne    ffff80000080b04b <path_walk+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:46
        {
            printf("can not find file or dir:%s\n",path->name);
ffff80000080afda:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080afde:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080afe1:	48 89 c6             	mov    rsi,rax
ffff80000080afe4:	48 b8 c0 d7 ff ff ff 	movabs rax,0xffffffffffffd7c0
ffff80000080afeb:	ff ff ff 
ffff80000080afee:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080aff2:	48 89 c7             	mov    rdi,rax
ffff80000080aff5:	49 89 df             	mov    r15,rbx
ffff80000080aff8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080affd:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080b004:	ff ff ff 
ffff80000080b007:	48 01 da             	add    rdx,rbx
ffff80000080b00a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:47
            kmfree(path->name);
ffff80000080b00c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b010:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b013:	48 89 c7             	mov    rdi,rax
ffff80000080b016:	49 89 df             	mov    r15,rbx
ffff80000080b019:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080b020:	ff ff ff 
ffff80000080b023:	48 01 d8             	add    rax,rbx
ffff80000080b026:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:48
            kmfree(path);
ffff80000080b028:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b02c:	48 89 c7             	mov    rdi,rax
ffff80000080b02f:	49 89 df             	mov    r15,rbx
ffff80000080b032:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080b039:	ff ff ff 
ffff80000080b03c:	48 01 d8             	add    rax,rbx
ffff80000080b03f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49
            return NULL;
ffff80000080b041:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b046:	e9 66 01 00 00       	jmp    ffff80000080b1b1 <path_walk+0x378>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:54
        }

//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
        path->parent = parent;
ffff80000080b04b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b04f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b053:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:57
        //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
        //对于/dev这样的文件夹，lookup返回的就是链表里的dentry，data会一样
        list_add(&parent->subdirs_list,&path->child_node);
ffff80000080b057:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b05b:	48 83 c0 10          	add    rax,0x10
ffff80000080b05f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b063:	48 83 c2 28          	add    rdx,0x28
ffff80000080b067:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080b06b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080b06f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b073:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b077:	48 85 c0             	test   rax,rax
ffff80000080b07a:	75 50                	jne    ffff80000080b0cc <path_walk+0x293>
ffff80000080b07c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b080:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff80000080b084:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b088:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080b08c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b090:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080b094:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b098:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080b09c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b0a0:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080b0a4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080b0a7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b0ab:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b0af:	48 85 c0             	test   rax,rax
ffff80000080b0b2:	0f 84 a3 00 00 00    	je     ffff80000080b15b <path_walk+0x322>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080b0b8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b0bc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b0c0:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080b0c4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080b0c7:	e9 8f 00 00 00       	jmp    ffff80000080b15b <path_walk+0x322>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080b0cc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b0d0:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080b0d4:	eb 21                	jmp    ffff80000080b0f7 <path_walk+0x2be>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080b0d6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b0da:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080b0de:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b0e2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b0e6:	48 39 c2             	cmp    rdx,rax
ffff80000080b0e9:	74 73                	je     ffff80000080b15e <path_walk+0x325>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080b0eb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b0ef:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b0f3:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080b0f7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b0fb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b0ff:	48 85 c0             	test   rax,rax
ffff80000080b102:	74 0e                	je     ffff80000080b112 <path_walk+0x2d9>
ffff80000080b104:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b108:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b10c:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080b110:	75 c4                	jne    ffff80000080b0d6 <path_walk+0x29d>
ffff80000080b112:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b116:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff80000080b11a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b11e:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080b122:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b126:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080b12a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b12e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080b132:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b136:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080b13a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080b13d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b141:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b145:	48 85 c0             	test   rax,rax
ffff80000080b148:	74 17                	je     ffff80000080b161 <path_walk+0x328>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080b14a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b14e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b152:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080b156:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080b159:	eb 06                	jmp    ffff80000080b161 <path_walk+0x328>
ffff80000080b15b:	90                   	nop
ffff80000080b15c:	eb 04                	jmp    ffff80000080b162 <path_walk+0x329>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080b15e:	90                   	nop
ffff80000080b15f:	eb 01                	jmp    ffff80000080b162 <path_walk+0x329>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080b161:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59

        if(!*name)
ffff80000080b162:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b166:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b169:	84 c0                	test   al,al
ffff80000080b16b:	74 2a                	je     ffff80000080b197 <path_walk+0x35e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
            goto last_component;
        while(*name == '/')
ffff80000080b16d:	eb 05                	jmp    ffff80000080b174 <path_walk+0x33b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62
            name++;
ffff80000080b16f:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
        while(*name == '/')
ffff80000080b174:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b178:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b17b:	3c 2f                	cmp    al,0x2f
ffff80000080b17d:	74 f0                	je     ffff80000080b16f <path_walk+0x336>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:63
        if(!*name)
ffff80000080b17f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b183:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b186:	84 c0                	test   al,al
ffff80000080b188:	74 10                	je     ffff80000080b19a <path_walk+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:66
            goto last_slash;

        parent = path;
ffff80000080b18a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b18e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        tmpname = name;
ffff80000080b192:	e9 22 fd ff ff       	jmp    ffff80000080aeb9 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
            goto last_component;
ffff80000080b197:	90                   	nop
ffff80000080b198:	eb 01                	jmp    ffff80000080b19b <path_walk+0x362>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:64
            goto last_slash;
ffff80000080b19a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:72
    }

    last_slash:
    last_component:

    if(flags & 1)
ffff80000080b19b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b19f:	83 e0 01             	and    eax,0x1
ffff80000080b1a2:	48 85 c0             	test   rax,rax
ffff80000080b1a5:	74 06                	je     ffff80000080b1ad <path_walk+0x374>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:74
    {
        return parent;
ffff80000080b1a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b1ab:	eb 04                	jmp    ffff80000080b1b1 <path_walk+0x378>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:77
    }

    return path;
ffff80000080b1ad:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:78
}
ffff80000080b1b1:	48 83 c4 70          	add    rsp,0x70
ffff80000080b1b5:	5b                   	pop    rbx
ffff80000080b1b6:	41 5f                	pop    r15
ffff80000080b1b8:	5d                   	pop    rbp
ffff80000080b1b9:	c3                   	ret    

ffff80000080b1ba <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:82


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
ffff80000080b1ba:	f3 0f 1e fa          	endbr64 
ffff80000080b1be:	55                   	push   rbp
ffff80000080b1bf:	48 89 e5             	mov    rbp,rsp
ffff80000080b1c2:	41 57                	push   r15
ffff80000080b1c4:	48 83 ec 48          	sub    rsp,0x48
ffff80000080b1c8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b1c8 <fill_dentry+0xe>
ffff80000080b1cf:	49 bb 90 29 11 00 00 	movabs r11,0x112990
ffff80000080b1d6:	00 00 00 
ffff80000080b1d9:	4c 01 d8             	add    rax,r11
ffff80000080b1dc:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080b1e0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080b1e4:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080b1e8:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff80000080b1ec:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:83
    struct dirent* dent = (struct dirent*)buf;
ffff80000080b1f0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b1f4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:85

    if((unsigned long)buf < PAGE_4K_SIZE)
ffff80000080b1f8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b1fc:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff80000080b203:	77 07                	ja     ffff80000080b20c <fill_dentry+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:86
        return -EFAULT;
ffff80000080b205:	b8 eb ff ff ff       	mov    eax,0xffffffeb
ffff80000080b20a:	eb 53                	jmp    ffff80000080b25f <fill_dentry+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:88

    memcpy(name,dent->d_name,namelen);
ffff80000080b20c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b210:	89 d7                	mov    edi,edx
ffff80000080b212:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b216:	48 8d 72 18          	lea    rsi,[rdx+0x18]
ffff80000080b21a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080b21e:	89 fa                	mov    edx,edi
ffff80000080b220:	48 89 cf             	mov    rdi,rcx
ffff80000080b223:	49 89 c7             	mov    r15,rax
ffff80000080b226:	48 b9 6c 50 ef ff ff 	movabs rcx,0xffffffffffef506c
ffff80000080b22d:	ff ff ff 
ffff80000080b230:	48 01 c1             	add    rcx,rax
ffff80000080b233:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
    dent->d_namelen = namelen;
ffff80000080b235:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b239:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b23d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:90
    dent->d_type = type;
ffff80000080b241:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b245:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080b249:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:91
    dent->d_offset = offset;
ffff80000080b24d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b251:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080b255:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:92
    return sizeof(struct dirent) + namelen;
ffff80000080b258:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b25c:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:93
}
ffff80000080b25f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080b263:	c9                   	leave  
ffff80000080b264:	c3                   	ret    

ffff80000080b265 <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000080b265:	f3 0f 1e fa          	endbr64 
ffff80000080b269:	55                   	push   rbp
ffff80000080b26a:	48 89 e5             	mov    rbp,rsp
ffff80000080b26d:	41 57                	push   r15
ffff80000080b26f:	53                   	push   rbx
ffff80000080b270:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b274:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b274 <mount_fs+0xf>
ffff80000080b27b:	49 bb e4 28 11 00 00 	movabs r11,0x1128e4
ffff80000080b282:	00 00 00 
ffff80000080b285:	4c 01 db             	add    rbx,r11
ffff80000080b288:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080b28c:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080b290:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:101
    struct file_system_type * p = NULL;
ffff80000080b294:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b29b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103

    for(p = &filesystem;p;p = p->next)
ffff80000080b29c:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b2a3:	ff ff ff 
ffff80000080b2a6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b2aa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080b2ae:	eb 4d                	jmp    ffff80000080b2fd <mount_fs+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:104
        if(!strcmp(p->name,name))
ffff80000080b2b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b2b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b2b7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b2bb:	48 89 d6             	mov    rsi,rdx
ffff80000080b2be:	48 89 c7             	mov    rdi,rax
ffff80000080b2c1:	49 89 df             	mov    r15,rbx
ffff80000080b2c4:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff80000080b2cb:	ff ff ff 
ffff80000080b2ce:	48 01 d8             	add    rax,rbx
ffff80000080b2d1:	ff d0                	call   rax
ffff80000080b2d3:	85 c0                	test   eax,eax
ffff80000080b2d5:	75 1a                	jne    ffff80000080b2f1 <mount_fs+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:106
        {
            return p->read_superblock(DPTE,buf);
ffff80000080b2d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b2db:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffff80000080b2df:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b2e3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b2e7:	48 89 d6             	mov    rsi,rdx
ffff80000080b2ea:	48 89 c7             	mov    rdi,rax
ffff80000080b2ed:	ff d1                	call   rcx
ffff80000080b2ef:	eb 18                	jmp    ffff80000080b309 <mount_fs+0xa4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080b2f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b2f5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b2f9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103 (discriminator 1)
ffff80000080b2fd:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b302:	75 ac                	jne    ffff80000080b2b0 <mount_fs+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108
        }
    return 0;
ffff80000080b304:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:109
}
ffff80000080b309:	48 83 c4 30          	add    rsp,0x30
ffff80000080b30d:	5b                   	pop    rbx
ffff80000080b30e:	41 5f                	pop    r15
ffff80000080b310:	5d                   	pop    rbp
ffff80000080b311:	c3                   	ret    

ffff80000080b312 <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112

unsigned long register_filesystem(struct file_system_type * fs)
{
ffff80000080b312:	f3 0f 1e fa          	endbr64 
ffff80000080b316:	55                   	push   rbp
ffff80000080b317:	48 89 e5             	mov    rbp,rsp
ffff80000080b31a:	41 57                	push   r15
ffff80000080b31c:	53                   	push   rbx
ffff80000080b31d:	48 83 ec 20          	sub    rsp,0x20
ffff80000080b321:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b321 <register_filesystem+0xf>
ffff80000080b328:	49 bb 37 28 11 00 00 	movabs r11,0x112837
ffff80000080b32f:	00 00 00 
ffff80000080b332:	4c 01 db             	add    rbx,r11
ffff80000080b335:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:113
    struct file_system_type * p = NULL;
ffff80000080b339:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b340:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115

    for(p = &filesystem;p;p = p->next)
ffff80000080b341:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b348:	ff ff ff 
ffff80000080b34b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b34f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080b353:	eb 3d                	jmp    ffff80000080b392 <register_filesystem+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116
        if(!strcmp(fs->name,p->name))
ffff80000080b355:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b359:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b35c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b360:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b363:	48 89 d6             	mov    rsi,rdx
ffff80000080b366:	48 89 c7             	mov    rdi,rax
ffff80000080b369:	49 89 df             	mov    r15,rbx
ffff80000080b36c:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff80000080b373:	ff ff ff 
ffff80000080b376:	48 01 d8             	add    rax,rbx
ffff80000080b379:	ff d0                	call   rax
ffff80000080b37b:	85 c0                	test   eax,eax
ffff80000080b37d:	75 07                	jne    ffff80000080b386 <register_filesystem+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:117
            return 0;
ffff80000080b37f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b384:	eb 48                	jmp    ffff80000080b3ce <register_filesystem+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080b386:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b38a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b38e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115 (discriminator 1)
ffff80000080b392:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b397:	75 bc                	jne    ffff80000080b355 <register_filesystem+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:119

    fs->next = filesystem.next;
ffff80000080b399:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b3a0:	ff ff ff 
ffff80000080b3a3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b3a7:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080b3ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b3af:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:120
    filesystem.next = fs;
ffff80000080b3b3:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b3ba:	ff ff ff 
ffff80000080b3bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b3c1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b3c5:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:122

    return 1;
ffff80000080b3c9:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:123
}
ffff80000080b3ce:	48 83 c4 20          	add    rsp,0x20
ffff80000080b3d2:	5b                   	pop    rbx
ffff80000080b3d3:	41 5f                	pop    r15
ffff80000080b3d5:	5d                   	pop    rbp
ffff80000080b3d6:	c3                   	ret    

ffff80000080b3d7 <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126

unsigned long unregister_filesystem(struct file_system_type * fs)
{
ffff80000080b3d7:	f3 0f 1e fa          	endbr64 
ffff80000080b3db:	55                   	push   rbp
ffff80000080b3dc:	48 89 e5             	mov    rbp,rsp
ffff80000080b3df:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b3df <unregister_filesystem+0x8>
ffff80000080b3e6:	49 bb 79 27 11 00 00 	movabs r11,0x112779
ffff80000080b3ed:	00 00 00 
ffff80000080b3f0:	4c 01 d8             	add    rax,r11
ffff80000080b3f3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:127
    struct file_system_type * p = &filesystem;
ffff80000080b3f7:	48 ba 50 ff ff ff ff 	movabs rdx,0xffffffffffffff50
ffff80000080b3fe:	ff ff ff 
ffff80000080b401:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b405:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129

    while(p->next)
ffff80000080b409:	eb 41                	jmp    ffff80000080b44c <unregister_filesystem+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:130
        if(p->next == fs)
ffff80000080b40b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b40f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b413:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080b417:	75 27                	jne    ffff80000080b440 <unregister_filesystem+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:132
        {
            p->next = p->next->next;
ffff80000080b419:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b41d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b421:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080b425:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b429:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:133
            fs->next = NULL;
ffff80000080b42d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b431:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080b438:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:134
            return 1;
ffff80000080b439:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080b43e:	eb 1e                	jmp    ffff80000080b45e <unregister_filesystem+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
        }
        else
            p = p->next;
ffff80000080b440:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b444:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b448:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129
    while(p->next)
ffff80000080b44c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b450:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b454:	48 85 c0             	test   rax,rax
ffff80000080b457:	75 b2                	jne    ffff80000080b40b <unregister_filesystem+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
    return 0;
ffff80000080b459:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:139
}
ffff80000080b45e:	5d                   	pop    rbp
ffff80000080b45f:	c3                   	ret    

ffff80000080b460 <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:141
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080b460:	f3 0f 1e fa          	endbr64 
ffff80000080b464:	55                   	push   rbp
ffff80000080b465:	48 89 e5             	mov    rbp,rsp
ffff80000080b468:	41 57                	push   r15
ffff80000080b46a:	53                   	push   rbx
ffff80000080b46b:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b46f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b46f <root_lookup+0xf>
ffff80000080b476:	49 bb e9 26 11 00 00 	movabs r11,0x1126e9
ffff80000080b47d:	00 00 00 
ffff80000080b480:	4c 01 db             	add    rbx,r11
ffff80000080b483:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080b487:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
ffff80000080b48b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b48f:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080b493:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    struct List* p= tmp->subdirs_list.next;
ffff80000080b497:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b49b:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080b49f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
    while (p){
ffff80000080b4a3:	eb 61                	jmp    ffff80000080b506 <root_lookup+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:145
        struct dir_entry* dp=p->data;
ffff80000080b4a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b4a9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b4ad:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:146
        if(strcmp(dp->name,dest_dentry->name)==0){
ffff80000080b4b1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b4b5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b4b8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b4bc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b4bf:	48 89 d6             	mov    rsi,rdx
ffff80000080b4c2:	48 89 c7             	mov    rdi,rax
ffff80000080b4c5:	49 89 df             	mov    r15,rbx
ffff80000080b4c8:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff80000080b4cf:	ff ff ff 
ffff80000080b4d2:	48 01 d8             	add    rax,rbx
ffff80000080b4d5:	ff d0                	call   rax
ffff80000080b4d7:	85 c0                	test   eax,eax
ffff80000080b4d9:	75 1f                	jne    ffff80000080b4fa <root_lookup+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:147
            kmfree(dest_dentry);
ffff80000080b4db:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b4df:	48 89 c7             	mov    rdi,rax
ffff80000080b4e2:	49 89 df             	mov    r15,rbx
ffff80000080b4e5:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080b4ec:	ff ff ff 
ffff80000080b4ef:	48 01 d8             	add    rax,rbx
ffff80000080b4f2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:148
            return dp;
ffff80000080b4f4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b4f8:	eb 31                	jmp    ffff80000080b52b <root_lookup+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:150
        }
        p=p->next;
ffff80000080b4fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b4fe:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b502:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
    while (p){
ffff80000080b506:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b50b:	75 98                	jne    ffff80000080b4a5 <root_lookup+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:152
    }
    kmfree(dest_dentry);
ffff80000080b50d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b511:	48 89 c7             	mov    rdi,rax
ffff80000080b514:	49 89 df             	mov    r15,rbx
ffff80000080b517:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080b51e:	ff ff ff 
ffff80000080b521:	48 01 d8             	add    rax,rbx
ffff80000080b524:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:153
    return NULL;
ffff80000080b526:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:154
}
ffff80000080b52b:	48 83 c4 30          	add    rsp,0x30
ffff80000080b52f:	5b                   	pop    rbx
ffff80000080b530:	41 5f                	pop    r15
ffff80000080b532:	5d                   	pop    rbp
ffff80000080b533:	c3                   	ret    

ffff80000080b534 <init_rootfs>:
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:158
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void init_rootfs(){
ffff80000080b534:	f3 0f 1e fa          	endbr64 
ffff80000080b538:	55                   	push   rbp
ffff80000080b539:	48 89 e5             	mov    rbp,rsp
ffff80000080b53c:	41 57                	push   r15
ffff80000080b53e:	53                   	push   rbx
ffff80000080b53f:	48 83 ec 20          	sub    rsp,0x20
ffff80000080b543:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b543 <init_rootfs+0xf>
ffff80000080b54a:	49 bb 15 26 11 00 00 	movabs r11,0x112615
ffff80000080b551:	00 00 00 
ffff80000080b554:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:159
    root_sb=(struct super_block*) kmalloc();
ffff80000080b557:	49 89 df             	mov    r15,rbx
ffff80000080b55a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b55f:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080b566:	ff ff ff 
ffff80000080b569:	48 01 da             	add    rdx,rbx
ffff80000080b56c:	ff d2                	call   rdx
ffff80000080b56e:	48 89 c2             	mov    rdx,rax
ffff80000080b571:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b578:	ff ff ff 
ffff80000080b57b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b57f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160
    root_sb->root=root_sb+1;//紧凑跟在后面
ffff80000080b582:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b589:	ff ff ff 
ffff80000080b58c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b590:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b593:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b59a:	ff ff ff 
ffff80000080b59d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5a1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5a4:	48 83 c2 28          	add    rdx,0x28
ffff80000080b5a8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:161
    root_sb->sb_ops=NULL;
ffff80000080b5ab:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b5b2:	ff ff ff 
ffff80000080b5b5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5bc:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080b5c3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163
    
    struct index_node* ir=root_sb->root+1;
ffff80000080b5c4:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b5cb:	ff ff ff 
ffff80000080b5ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5d5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5d8:	48 83 c0 58          	add    rax,0x58
ffff80000080b5dc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:164
    root_sb->root->dir_inode=ir;
ffff80000080b5e0:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b5e7:	ff ff ff 
ffff80000080b5ea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5f1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5f4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b5f8:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:165
    ir->sb=root_sb;
ffff80000080b5fc:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b603:	ff ff ff 
ffff80000080b606:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b60a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b60d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b611:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:166
    ir->attribute=FS_ATTR_DIR;
ffff80000080b615:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b619:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff80000080b620:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167
    ir->file_size=0;
ffff80000080b621:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b625:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    ir->inode_ops=&root_iops;//lookup函数是必要的
ffff80000080b62c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b630:	48 ba 50 fd ff ff ff 	movabs rdx,0xfffffffffffffd50
ffff80000080b637:	ff ff ff 
ffff80000080b63a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b63e:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:169
    ir->f_ops=NULL;
ffff80000080b642:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b646:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff80000080b64d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170
    ir->private_index_info=root_sb->root;
ffff80000080b64e:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b655:	ff ff ff 
ffff80000080b658:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b65c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b65f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b662:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b666:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:172

    root_sb->root->name=ir+1;//紧凑跟在后面
ffff80000080b66a:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b671:	ff ff ff 
ffff80000080b674:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b678:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b67b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b67e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b682:	48 83 c2 40          	add    rdx,0x40
ffff80000080b686:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:173
    strcpy(root_sb->root->name,"/");
ffff80000080b689:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b690:	ff ff ff 
ffff80000080b693:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b697:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b69a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b69d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6a0:	48 ba e8 d7 ff ff ff 	movabs rdx,0xffffffffffffd7e8
ffff80000080b6a7:	ff ff ff 
ffff80000080b6aa:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080b6ae:	48 89 d6             	mov    rsi,rdx
ffff80000080b6b1:	48 89 c7             	mov    rdi,rax
ffff80000080b6b4:	49 89 df             	mov    r15,rbx
ffff80000080b6b7:	48 b8 70 51 ef ff ff 	movabs rax,0xffffffffffef5170
ffff80000080b6be:	ff ff ff 
ffff80000080b6c1:	48 01 d8             	add    rax,rbx
ffff80000080b6c4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:174
    root_sb->root->name_length=1;
ffff80000080b6c6:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b6cd:	ff ff ff 
ffff80000080b6d0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b6d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6da:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:175
    root_sb->root->parent=root_sb->root;
ffff80000080b6e1:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b6e8:	ff ff ff 
ffff80000080b6eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b6ef:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b6f2:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b6f9:	ff ff ff 
ffff80000080b6fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b700:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b703:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b706:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b709:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:176
    list_init(&root_sb->root->subdirs_list);
ffff80000080b70d:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b714:	ff ff ff 
ffff80000080b717:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b71b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b71e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b721:	48 83 c0 28          	add    rax,0x28
ffff80000080b725:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080b729:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b72d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080b734:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b738:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080b73f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080b740:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:177
    list_init(&root_sb->root->child_node);
ffff80000080b741:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b748:	ff ff ff 
ffff80000080b74b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b74f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b752:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b755:	48 83 c0 10          	add    rax,0x10
ffff80000080b759:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080b75d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b761:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080b768:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b76c:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080b773:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080b774:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:179

    root_sb->dev=dev_ramdisk<<8;
ffff80000080b775:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff80000080b77c:	ff ff ff 
ffff80000080b77f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b783:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b785:	89 c2                	mov    edx,eax
ffff80000080b787:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b78e:	ff ff ff 
ffff80000080b791:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b795:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b798:	c1 e2 08             	shl    edx,0x8
ffff80000080b79b:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180
    root_sb->p_dev=&bd_ramdisk;
ffff80000080b79f:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b7a6:	ff ff ff 
ffff80000080b7a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b7ad:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b7b0:	48 ba a8 ff ff ff ff 	movabs rdx,0xffffffffffffffa8
ffff80000080b7b7:	ff ff ff 
ffff80000080b7ba:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b7be:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:181
}
ffff80000080b7c2:	90                   	nop
ffff80000080b7c3:	48 83 c4 20          	add    rsp,0x20
ffff80000080b7c7:	5b                   	pop    rbx
ffff80000080b7c8:	41 5f                	pop    r15
ffff80000080b7ca:	5d                   	pop    rbp
ffff80000080b7cb:	c3                   	ret    

ffff80000080b7cc <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:21
#include "int.h"
#include <sys/mman.h>


unsigned long sys_putstring(char *string)
{
ffff80000080b7cc:	f3 0f 1e fa          	endbr64 
ffff80000080b7d0:	55                   	push   rbp
ffff80000080b7d1:	48 89 e5             	mov    rbp,rsp
ffff80000080b7d4:	41 57                	push   r15
ffff80000080b7d6:	48 83 ec 18          	sub    rsp,0x18
ffff80000080b7da:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080b7da <sys_putstring+0xe>
ffff80000080b7e1:	49 bb 7e 23 11 00 00 	movabs r11,0x11237e
ffff80000080b7e8:	00 00 00 
ffff80000080b7eb:	4c 01 da             	add    rdx,r11
ffff80000080b7ee:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
    printf(string);
ffff80000080b7f2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b7f6:	48 89 c7             	mov    rdi,rax
ffff80000080b7f9:	49 89 d7             	mov    r15,rdx
ffff80000080b7fc:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b801:	48 b9 9b 3b ee ff ff 	movabs rcx,0xffffffffffee3b9b
ffff80000080b808:	ff ff ff 
ffff80000080b80b:	48 01 d1             	add    rcx,rdx
ffff80000080b80e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
    return 0;
ffff80000080b810:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:24
}
ffff80000080b815:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080b819:	c9                   	leave  
ffff80000080b81a:	c3                   	ret    

ffff80000080b81b <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:27

unsigned long sys_open(char *filename,int flags)
{
ffff80000080b81b:	f3 0f 1e fa          	endbr64 
ffff80000080b81f:	55                   	push   rbp
ffff80000080b820:	48 89 e5             	mov    rbp,rsp
ffff80000080b823:	41 57                	push   r15
ffff80000080b825:	53                   	push   rbx
ffff80000080b826:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffff80000080b82d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b82d <sys_open+0x12>
ffff80000080b834:	49 bb 2b 23 11 00 00 	movabs r11,0x11232b
ffff80000080b83b:	00 00 00 
ffff80000080b83e:	4c 01 db             	add    rbx,r11
ffff80000080b841:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
ffff80000080b848:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28
    char * path = NULL;
ffff80000080b84e:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080b855:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    long pathlen = 0;
ffff80000080b856:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080b85d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    long error = 0;
ffff80000080b85e:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b865:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    struct dir_entry * dentry = NULL;
ffff80000080b866:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080b86d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct file * filp = NULL;
ffff80000080b86e:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080b875:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    struct file ** f = NULL;
ffff80000080b876:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080b87d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:34
    int fd = -1;
ffff80000080b87e:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:38
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc();
ffff80000080b885:	49 89 df             	mov    r15,rbx
ffff80000080b888:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b88d:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080b894:	ff ff ff 
ffff80000080b897:	48 01 da             	add    rdx,rbx
ffff80000080b89a:	ff d2                	call   rdx
ffff80000080b89c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
    if(path == NULL)
ffff80000080b8a0:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080b8a5:	75 0c                	jne    ffff80000080b8b3 <sys_open+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
        return -ENOMEM;
ffff80000080b8a7:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080b8ae:	e9 fc 05 00 00       	jmp    ffff80000080beaf <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
    memset(path,0,PAGE_4K_SIZE);
ffff80000080b8b3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b8b7:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080b8bc:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b8c1:	48 89 c7             	mov    rdi,rax
ffff80000080b8c4:	49 89 df             	mov    r15,rbx
ffff80000080b8c7:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080b8ce:	ff ff ff 
ffff80000080b8d1:	48 01 d8             	add    rax,rbx
ffff80000080b8d4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    pathlen = strlen(filename);
ffff80000080b8d6:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080b8dd:	48 89 c7             	mov    rdi,rax
ffff80000080b8e0:	49 89 df             	mov    r15,rbx
ffff80000080b8e3:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff80000080b8ea:	ff ff ff 
ffff80000080b8ed:	48 01 d8             	add    rax,rbx
ffff80000080b8f0:	ff d0                	call   rax
ffff80000080b8f2:	48 98                	cdqe   
ffff80000080b8f4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:43
    if(pathlen <= 0)
ffff80000080b8f8:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080b8fd:	7f 25                	jg     ffff80000080b924 <sys_open+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:45
    {
        kmfree(path);
ffff80000080b8ff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b903:	48 89 c7             	mov    rdi,rax
ffff80000080b906:	49 89 df             	mov    r15,rbx
ffff80000080b909:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080b910:	ff ff ff 
ffff80000080b913:	48 01 d8             	add    rax,rbx
ffff80000080b916:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:46
        return -EFAULT;
ffff80000080b918:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080b91f:	e9 8b 05 00 00       	jmp    ffff80000080beaf <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:48
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080b924:	48 81 7d c0 ff 0f 00 	cmp    QWORD PTR [rbp-0x40],0xfff
ffff80000080b92b:	00 
ffff80000080b92c:	7e 25                	jle    ffff80000080b953 <sys_open+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:50
    {
        kmfree(path);
ffff80000080b92e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b932:	48 89 c7             	mov    rdi,rax
ffff80000080b935:	49 89 df             	mov    r15,rbx
ffff80000080b938:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080b93f:	ff ff ff 
ffff80000080b942:	48 01 d8             	add    rax,rbx
ffff80000080b945:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:51
        return -ENAMETOOLONG;
ffff80000080b947:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080b94e:	e9 5c 05 00 00       	jmp    ffff80000080beaf <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:53
    }
    strcpy(path,filename);
ffff80000080b953:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
ffff80000080b95a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b95e:	48 89 d6             	mov    rsi,rdx
ffff80000080b961:	48 89 c7             	mov    rdi,rax
ffff80000080b964:	49 89 df             	mov    r15,rbx
ffff80000080b967:	48 b8 70 51 ef ff ff 	movabs rax,0xffffffffffef5170
ffff80000080b96e:	ff ff ff 
ffff80000080b971:	48 01 d8             	add    rax,rbx
ffff80000080b974:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:55

    dentry = path_walk(path,0);
ffff80000080b976:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b97a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b97f:	48 89 c7             	mov    rdi,rax
ffff80000080b982:	49 89 df             	mov    r15,rbx
ffff80000080b985:	48 b8 e1 d2 ee ff ff 	movabs rax,0xffffffffffeed2e1
ffff80000080b98c:	ff ff ff 
ffff80000080b98f:	48 01 d8             	add    rax,rbx
ffff80000080b992:	ff d0                	call   rax
ffff80000080b994:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:57

    if(dentry == NULL){
ffff80000080b998:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080b99d:	0f 85 a8 02 00 00    	jne    ffff80000080bc4b <sys_open+0x430>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //找到上一级目录
        char* p=path+strlen(path)-1;
ffff80000080b9a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b9a7:	48 89 c7             	mov    rdi,rax
ffff80000080b9aa:	49 89 df             	mov    r15,rbx
ffff80000080b9ad:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff80000080b9b4:	ff ff ff 
ffff80000080b9b7:	48 01 d8             	add    rax,rbx
ffff80000080b9ba:	ff d0                	call   rax
ffff80000080b9bc:	48 98                	cdqe   
ffff80000080b9be:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080b9c2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b9c6:	48 01 d0             	add    rax,rdx
ffff80000080b9c9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63
        for(;*p!='/'&&p>path;p--);
ffff80000080b9cd:	eb 05                	jmp    ffff80000080b9d4 <sys_open+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 3)
ffff80000080b9cf:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 1)
ffff80000080b9d4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b9d8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b9db:	3c 2f                	cmp    al,0x2f
ffff80000080b9dd:	74 0a                	je     ffff80000080b9e9 <sys_open+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 2)
ffff80000080b9df:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b9e3:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080b9e7:	77 e6                	ja     ffff80000080b9cf <sys_open+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        *p='\0';
ffff80000080b9e9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b9ed:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
ffff80000080b9f0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b9f4:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080b9f9:	48 89 c7             	mov    rdi,rax
ffff80000080b9fc:	49 89 df             	mov    r15,rbx
ffff80000080b9ff:	48 b8 e1 d2 ee ff ff 	movabs rax,0xffffffffffeed2e1
ffff80000080ba06:	ff ff ff 
ffff80000080ba09:	48 01 d8             	add    rax,rbx
ffff80000080ba0c:	ff d0                	call   rax
ffff80000080ba0e:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
        if(parent==NULL)
ffff80000080ba12:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080ba17:	75 0c                	jne    ffff80000080ba25 <sys_open+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:67
            return -ENOENT;//上级目录也不在
ffff80000080ba19:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080ba20:	e9 8a 04 00 00       	jmp    ffff80000080beaf <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:69
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc();
ffff80000080ba25:	49 89 df             	mov    r15,rbx
ffff80000080ba28:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ba2d:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080ba34:	ff ff ff 
ffff80000080ba37:	48 01 da             	add    rdx,rbx
ffff80000080ba3a:	ff d2                	call   rdx
ffff80000080ba3c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:70
        list_init(&dentry->subdirs_list);
ffff80000080ba40:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ba44:	48 83 c0 28          	add    rax,0x28
ffff80000080ba48:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080ba4f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080ba56:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080ba5d:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080ba64:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080ba6b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080ba6c:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        list_init(&dentry->child_node);
ffff80000080ba6d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ba71:	48 83 c0 10          	add    rax,0x10
ffff80000080ba75:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080ba7c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ba83:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080ba8a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ba91:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080ba98:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080ba99:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        dentry->child_node.data=dentry;
ffff80000080ba9a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ba9e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080baa2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        list_add(&parent->subdirs_list,&dentry->child_node);
ffff80000080baa6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080baaa:	48 83 c0 10          	add    rax,0x10
ffff80000080baae:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080bab2:	48 83 c2 28          	add    rdx,0x28
ffff80000080bab6:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffff80000080baba:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080babe:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080bac2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bac6:	48 85 c0             	test   rax,rax
ffff80000080bac9:	75 50                	jne    ffff80000080bb1b <sys_open+0x300>
ffff80000080bacb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080bacf:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080bad3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080bad7:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080badb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080badf:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080bae3:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080bae7:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080baeb:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080baef:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080baf3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080baf6:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080bafa:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bafe:	48 85 c0             	test   rax,rax
ffff80000080bb01:	0f 84 c2 00 00 00    	je     ffff80000080bbc9 <sys_open+0x3ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080bb07:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080bb0b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bb0f:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080bb13:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080bb16:	e9 ae 00 00 00       	jmp    ffff80000080bbc9 <sys_open+0x3ae>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080bb1b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080bb1f:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080bb23:	eb 25                	jmp    ffff80000080bb4a <sys_open+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080bb25:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bb29:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080bb2d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080bb31:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bb35:	48 39 c2             	cmp    rdx,rax
ffff80000080bb38:	0f 84 8e 00 00 00    	je     ffff80000080bbcc <sys_open+0x3b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080bb3e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bb42:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bb46:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff80000080bb4a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bb4e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bb52:	48 85 c0             	test   rax,rax
ffff80000080bb55:	74 0e                	je     ffff80000080bb65 <sys_open+0x34a>
ffff80000080bb57:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bb5b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bb5f:	48 39 45 80          	cmp    QWORD PTR [rbp-0x80],rax
ffff80000080bb63:	75 c0                	jne    ffff80000080bb25 <sys_open+0x30a>
ffff80000080bb65:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bb69:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff80000080bb70:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080bb74:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080bb7b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080bb82:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080bb86:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bb8d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080bb91:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bb98:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080bb9f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080bba2:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bba9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bbad:	48 85 c0             	test   rax,rax
ffff80000080bbb0:	74 1d                	je     ffff80000080bbcf <sys_open+0x3b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080bbb2:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bbb9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bbbd:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff80000080bbc4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080bbc7:	eb 06                	jmp    ffff80000080bbcf <sys_open+0x3b4>
ffff80000080bbc9:	90                   	nop
ffff80000080bbca:	eb 04                	jmp    ffff80000080bbd0 <sys_open+0x3b5>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080bbcc:	90                   	nop
ffff80000080bbcd:	eb 01                	jmp    ffff80000080bbd0 <sys_open+0x3b5>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080bbcf:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        dentry->parent=parent;
ffff80000080bbd0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bbd4:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080bbd8:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        dentry->dir_inode=dentry+1;//放在后面
ffff80000080bbdc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bbe0:	48 8d 50 58          	lea    rdx,[rax+0x58]
ffff80000080bbe4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bbe8:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:76
        dentry->dir_inode->file_size=0;
ffff80000080bbec:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bbf0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bbf4:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:78
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
ffff80000080bbfb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080bbff:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080bc03:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc07:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bc0b:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080bc0f:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:79
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
ffff80000080bc13:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080bc17:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080bc1b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc1f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bc23:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080bc27:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:80
        dentry->dir_ops=parent->dir_ops;
ffff80000080bc2b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080bc2f:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
ffff80000080bc33:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc37:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:82
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
ffff80000080bc3b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc3f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bc43:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080bc4a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:84
    }
    kmfree(path);
ffff80000080bc4b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bc4f:	48 89 c7             	mov    rdi,rax
ffff80000080bc52:	49 89 df             	mov    r15,rbx
ffff80000080bc55:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080bc5c:	ff ff ff 
ffff80000080bc5f:	48 01 d8             	add    rax,rbx
ffff80000080bc62:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
ffff80000080bc64:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080bc6a:	25 00 40 00 00       	and    eax,0x4000
ffff80000080bc6f:	85 c0                	test   eax,eax
ffff80000080bc71:	74 1e                	je     ffff80000080bc91 <sys_open+0x476>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86 (discriminator 1)
ffff80000080bc73:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc77:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bc7b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bc7f:	48 83 f8 02          	cmp    rax,0x2
ffff80000080bc83:	74 0c                	je     ffff80000080bc91 <sys_open+0x476>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87
        return -ENOTDIR;
ffff80000080bc85:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080bc8c:	e9 1e 02 00 00       	jmp    ffff80000080beaf <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
ffff80000080bc91:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080bc97:	25 00 40 00 00       	and    eax,0x4000
ffff80000080bc9c:	85 c0                	test   eax,eax
ffff80000080bc9e:	75 1e                	jne    ffff80000080bcbe <sys_open+0x4a3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88 (discriminator 1)
ffff80000080bca0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bca4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bca8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bcac:	48 83 f8 02          	cmp    rax,0x2
ffff80000080bcb0:	75 0c                	jne    ffff80000080bcbe <sys_open+0x4a3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:89
        return -EISDIR;
ffff80000080bcb2:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
ffff80000080bcb9:	e9 f1 01 00 00       	jmp    ffff80000080beaf <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91

    filp = (struct file *) kmalloc();
ffff80000080bcbe:	49 89 df             	mov    r15,rbx
ffff80000080bcc1:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080bcc6:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080bccd:	ff ff ff 
ffff80000080bcd0:	48 01 da             	add    rdx,rbx
ffff80000080bcd3:	ff d2                	call   rdx
ffff80000080bcd5:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:92
    memset(filp,0,sizeof(struct file));
ffff80000080bcd9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bcdd:	ba 28 00 00 00       	mov    edx,0x28
ffff80000080bce2:	be 00 00 00 00       	mov    esi,0x0
ffff80000080bce7:	48 89 c7             	mov    rdi,rax
ffff80000080bcea:	49 89 df             	mov    r15,rbx
ffff80000080bced:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080bcf4:	ff ff ff 
ffff80000080bcf7:	48 01 d8             	add    rax,rbx
ffff80000080bcfa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:93
    filp->dentry = dentry;
ffff80000080bcfc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd00:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080bd04:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:94
    filp->mode = flags;
ffff80000080bd08:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080bd0e:	48 63 d0             	movsxd rdx,eax
ffff80000080bd11:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd15:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:96

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
ffff80000080bd19:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bd1d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bd21:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bd25:	83 e0 04             	and    eax,0x4
ffff80000080bd28:	48 85 c0             	test   rax,rax
ffff80000080bd2b:	74 18                	je     ffff80000080bd45 <sys_open+0x52a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:98
        extern struct file_operations devfs_fops;
        filp->f_ops = &devfs_fops;	//////	find device file operation function
ffff80000080bd2d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd31:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080bd38:	ff ff ff 
ffff80000080bd3b:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080bd3f:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffff80000080bd43:	eb 14                	jmp    ffff80000080bd59 <sys_open+0x53e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
ffff80000080bd45:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bd49:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bd4d:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080bd51:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd55:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102
    if(filp->f_ops && filp->f_ops->open)
ffff80000080bd59:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd5d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bd61:	48 85 c0             	test   rax,rax
ffff80000080bd64:	74 33                	je     ffff80000080bd99 <sys_open+0x57e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102 (discriminator 1)
ffff80000080bd66:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd6a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bd6e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bd71:	48 85 c0             	test   rax,rax
ffff80000080bd74:	74 23                	je     ffff80000080bd99 <sys_open+0x57e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:103
        error = filp->f_ops->open(dentry->dir_inode,filp);
ffff80000080bd76:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd7a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bd7e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080bd81:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bd85:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bd89:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080bd8d:	48 89 d6             	mov    rsi,rdx
ffff80000080bd90:	48 89 c7             	mov    rdi,rax
ffff80000080bd93:	ff d1                	call   rcx
ffff80000080bd95:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:104
    if(error != 1)
ffff80000080bd99:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080bd9e:	74 25                	je     ffff80000080bdc5 <sys_open+0x5aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
    {
        kmfree(filp);
ffff80000080bda0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bda4:	48 89 c7             	mov    rdi,rax
ffff80000080bda7:	49 89 df             	mov    r15,rbx
ffff80000080bdaa:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080bdb1:	ff ff ff 
ffff80000080bdb4:	48 01 d8             	add    rax,rbx
ffff80000080bdb7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:107
        return -EFAULT;
ffff80000080bdb9:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080bdc0:	e9 ea 00 00 00       	jmp    ffff80000080beaf <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:110
    }

    if(filp->mode & O_TRUNC)
ffff80000080bdc5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bdc9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bdcd:	25 00 02 00 00       	and    eax,0x200
ffff80000080bdd2:	48 85 c0             	test   rax,rax
ffff80000080bdd5:	74 13                	je     ffff80000080bdea <sys_open+0x5cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:112
    {
        filp->dentry->dir_inode->file_size = 0;
ffff80000080bdd7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bddb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bddf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bde3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:114
    }
    if(filp->mode & O_APPEND)
ffff80000080bdea:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bdee:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bdf2:	25 00 04 00 00       	and    eax,0x400
ffff80000080bdf7:	48 85 c0             	test   rax,rax
ffff80000080bdfa:	74 19                	je     ffff80000080be15 <sys_open+0x5fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:116
    {
        filp->position = filp->dentry->dir_inode->file_size;
ffff80000080bdfc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080be00:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080be04:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080be08:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080be0b:	48 89 c2             	mov    rdx,rax
ffff80000080be0e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080be12:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119
    }

    f = current->openf;
ffff80000080be15:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080be1c:	ff ff ff 
ffff80000080be1f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080be23:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080be26:	48 05 f8 00 00 00    	add    rax,0xf8
ffff80000080be2c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080be30:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080be37:	eb 28                	jmp    ffff80000080be61 <sys_open+0x646>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:121
        if(f[i] == NULL)
ffff80000080be39:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080be3c:	48 98                	cdqe   
ffff80000080be3e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080be45:	00 
ffff80000080be46:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080be4a:	48 01 d0             	add    rax,rdx
ffff80000080be4d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080be50:	48 85 c0             	test   rax,rax
ffff80000080be53:	75 08                	jne    ffff80000080be5d <sys_open+0x642>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
        {
            fd = i;
ffff80000080be55:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080be58:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:124
            break;
ffff80000080be5b:	eb 0a                	jmp    ffff80000080be67 <sys_open+0x64c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080be5d:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120 (discriminator 1)
ffff80000080be61:	83 7d d8 1f          	cmp    DWORD PTR [rbp-0x28],0x1f
ffff80000080be65:	7e d2                	jle    ffff80000080be39 <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:126
        }
    if(i == MAX_TASKS)
ffff80000080be67:	83 7d d8 20          	cmp    DWORD PTR [rbp-0x28],0x20
ffff80000080be6b:	75 22                	jne    ffff80000080be8f <sys_open+0x674>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:128
    {
        kmfree(filp);
ffff80000080be6d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080be71:	48 89 c7             	mov    rdi,rax
ffff80000080be74:	49 89 df             	mov    r15,rbx
ffff80000080be77:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080be7e:	ff ff ff 
ffff80000080be81:	48 01 d8             	add    rax,rbx
ffff80000080be84:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:130
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
ffff80000080be86:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
ffff80000080be8d:	eb 20                	jmp    ffff80000080beaf <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:132
    }
    f[fd] = filp;
ffff80000080be8f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080be92:	48 98                	cdqe   
ffff80000080be94:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080be9b:	00 
ffff80000080be9c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080bea0:	48 01 c2             	add    rdx,rax
ffff80000080bea3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bea7:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:134

    return fd;
ffff80000080beaa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bead:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:135
}
ffff80000080beaf:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffff80000080beb6:	5b                   	pop    rbx
ffff80000080beb7:	41 5f                	pop    r15
ffff80000080beb9:	5d                   	pop    rbp
ffff80000080beba:	c3                   	ret    

ffff80000080bebb <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:138

unsigned long sys_close(int fd)
{
ffff80000080bebb:	f3 0f 1e fa          	endbr64 
ffff80000080bebf:	55                   	push   rbp
ffff80000080bec0:	48 89 e5             	mov    rbp,rsp
ffff80000080bec3:	41 57                	push   r15
ffff80000080bec5:	53                   	push   rbx
ffff80000080bec6:	48 83 ec 20          	sub    rsp,0x20
ffff80000080beca:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080beca <sys_close+0xf>
ffff80000080bed1:	49 bb 8e 1c 11 00 00 	movabs r11,0x111c8e
ffff80000080bed8:	00 00 00 
ffff80000080bedb:	4c 01 db             	add    rbx,r11
ffff80000080bede:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:139
    struct file * filp = NULL;
ffff80000080bee1:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080bee8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080bee9:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080beed:	78 06                	js     ffff80000080bef5 <sys_close+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142 (discriminator 1)
ffff80000080beef:	83 7d dc 1f          	cmp    DWORD PTR [rbp-0x24],0x1f
ffff80000080bef3:	7e 0c                	jle    ffff80000080bf01 <sys_close+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:143
        return -EBADF;
ffff80000080bef5:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080befc:	e9 a8 00 00 00       	jmp    ffff80000080bfa9 <sys_close+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145

    filp = current->openf[fd];
ffff80000080bf01:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080bf08:	ff ff ff 
ffff80000080bf0b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bf0f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bf12:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080bf15:	48 63 d2             	movsxd rdx,edx
ffff80000080bf18:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080bf1c:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080bf21:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146
    if(filp->f_ops && filp->f_ops->close)
ffff80000080bf25:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bf29:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bf2d:	48 85 c0             	test   rax,rax
ffff80000080bf30:	74 35                	je     ffff80000080bf67 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146 (discriminator 1)
ffff80000080bf32:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bf36:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bf3a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bf3e:	48 85 c0             	test   rax,rax
ffff80000080bf41:	74 24                	je     ffff80000080bf67 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:147
        filp->f_ops->close(filp->dentry->dir_inode,filp);
ffff80000080bf43:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bf47:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bf4b:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080bf4f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bf53:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bf57:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bf5b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080bf5f:	48 89 d6             	mov    rsi,rdx
ffff80000080bf62:	48 89 c7             	mov    rdi,rax
ffff80000080bf65:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149

    kmfree(filp);
ffff80000080bf67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bf6b:	48 89 c7             	mov    rdi,rax
ffff80000080bf6e:	49 89 df             	mov    r15,rbx
ffff80000080bf71:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080bf78:	ff ff ff 
ffff80000080bf7b:	48 01 d8             	add    rax,rbx
ffff80000080bf7e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:150
    current->openf[fd] = NULL;
ffff80000080bf80:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080bf87:	ff ff ff 
ffff80000080bf8a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bf8e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bf91:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080bf94:	48 63 d2             	movsxd rdx,edx
ffff80000080bf97:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080bf9b:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
ffff80000080bfa2:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152

    return 0;
ffff80000080bfa4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:153
}
ffff80000080bfa9:	48 83 c4 20          	add    rsp,0x20
ffff80000080bfad:	5b                   	pop    rbx
ffff80000080bfae:	41 5f                	pop    r15
ffff80000080bfb0:	5d                   	pop    rbp
ffff80000080bfb1:	c3                   	ret    

ffff80000080bfb2 <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:156

unsigned long sys_read(int fd,void * buf,long count)
{
ffff80000080bfb2:	f3 0f 1e fa          	endbr64 
ffff80000080bfb6:	55                   	push   rbp
ffff80000080bfb7:	48 89 e5             	mov    rbp,rsp
ffff80000080bfba:	48 83 ec 30          	sub    rsp,0x30
ffff80000080bfbe:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bfbe <sys_read+0xc>
ffff80000080bfc5:	49 bb 9a 1b 11 00 00 	movabs r11,0x111b9a
ffff80000080bfcc:	00 00 00 
ffff80000080bfcf:	4c 01 d8             	add    rax,r11
ffff80000080bfd2:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080bfd5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080bfd9:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:157
    struct file * filp = NULL;
ffff80000080bfdd:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080bfe4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:158
    unsigned long ret = 0;
ffff80000080bfe5:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080bfec:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080bfed:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080bff1:	78 06                	js     ffff80000080bff9 <sys_read+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161 (discriminator 1)
ffff80000080bff3:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080bff7:	7e 09                	jle    ffff80000080c002 <sys_read+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:162
        return -EBADF;
ffff80000080bff9:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c000:	eb 7c                	jmp    ffff80000080c07e <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163
    if(count < 0)
ffff80000080c002:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c007:	79 09                	jns    ffff80000080c012 <sys_read+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:164
        return -EINVAL;
ffff80000080c009:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c010:	eb 6c                	jmp    ffff80000080c07e <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166

    filp = current->openf[fd];
ffff80000080c012:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c019:	ff ff ff 
ffff80000080c01c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c020:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c023:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c026:	48 63 d2             	movsxd rdx,edx
ffff80000080c029:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c02d:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c032:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167
    if(filp->f_ops && filp->f_ops->read)
ffff80000080c036:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c03a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c03e:	48 85 c0             	test   rax,rax
ffff80000080c041:	74 37                	je     ffff80000080c07a <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167 (discriminator 1)
ffff80000080c043:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c047:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c04b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c04f:	48 85 c0             	test   rax,rax
ffff80000080c052:	74 26                	je     ffff80000080c07a <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:168
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
ffff80000080c054:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c058:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c05c:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080c060:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080c064:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c068:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c06c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c070:	48 89 c7             	mov    rdi,rax
ffff80000080c073:	41 ff d0             	call   r8
ffff80000080c076:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169
    return ret;
ffff80000080c07a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:170
}
ffff80000080c07e:	c9                   	leave  
ffff80000080c07f:	c3                   	ret    

ffff80000080c080 <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:173

unsigned long sys_write(int fd,void * buf,long count)
{
ffff80000080c080:	f3 0f 1e fa          	endbr64 
ffff80000080c084:	55                   	push   rbp
ffff80000080c085:	48 89 e5             	mov    rbp,rsp
ffff80000080c088:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c08c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c08c <sys_write+0xc>
ffff80000080c093:	49 bb cc 1a 11 00 00 	movabs r11,0x111acc
ffff80000080c09a:	00 00 00 
ffff80000080c09d:	4c 01 d8             	add    rax,r11
ffff80000080c0a0:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c0a3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c0a7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:174
    struct file * filp = NULL;
ffff80000080c0ab:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c0b2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:175
    unsigned long ret = 0;
ffff80000080c0b3:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c0ba:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080c0bb:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c0bf:	78 06                	js     ffff80000080c0c7 <sys_write+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178 (discriminator 1)
ffff80000080c0c1:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080c0c5:	7e 09                	jle    ffff80000080c0d0 <sys_write+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:179
        return -EBADF;
ffff80000080c0c7:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c0ce:	eb 7c                	jmp    ffff80000080c14c <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180
    if(count < 0)
ffff80000080c0d0:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c0d5:	79 09                	jns    ffff80000080c0e0 <sys_write+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:181
        return -EINVAL;
ffff80000080c0d7:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c0de:	eb 6c                	jmp    ffff80000080c14c <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183

    filp = current->openf[fd];
ffff80000080c0e0:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c0e7:	ff ff ff 
ffff80000080c0ea:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c0ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c0f1:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c0f4:	48 63 d2             	movsxd rdx,edx
ffff80000080c0f7:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c0fb:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c100:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184
    if(filp->f_ops && filp->f_ops->write)
ffff80000080c104:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c108:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c10c:	48 85 c0             	test   rax,rax
ffff80000080c10f:	74 37                	je     ffff80000080c148 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184 (discriminator 1)
ffff80000080c111:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c115:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c119:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c11d:	48 85 c0             	test   rax,rax
ffff80000080c120:	74 26                	je     ffff80000080c148 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:185
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
ffff80000080c122:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c126:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c12a:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
ffff80000080c12e:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080c132:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c136:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c13a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c13e:	48 89 c7             	mov    rdi,rax
ffff80000080c141:	41 ff d0             	call   r8
ffff80000080c144:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186
    return ret;
ffff80000080c148:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:187
}
ffff80000080c14c:	c9                   	leave  
ffff80000080c14d:	c3                   	ret    

ffff80000080c14e <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:191


unsigned long sys_lseek(int filds,long offset,int whence)
{
ffff80000080c14e:	f3 0f 1e fa          	endbr64 
ffff80000080c152:	55                   	push   rbp
ffff80000080c153:	48 89 e5             	mov    rbp,rsp
ffff80000080c156:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c15a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c15a <sys_lseek+0xc>
ffff80000080c161:	49 bb fe 19 11 00 00 	movabs r11,0x1119fe
ffff80000080c168:	00 00 00 
ffff80000080c16b:	4c 01 d8             	add    rax,r11
ffff80000080c16e:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c171:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c175:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:192
    struct file * filp = NULL;
ffff80000080c178:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c17f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:193
    unsigned long ret = 0;
ffff80000080c180:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c187:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
ffff80000080c188:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c18c:	78 06                	js     ffff80000080c194 <sys_lseek+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196 (discriminator 1)
ffff80000080c18e:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080c192:	7e 0c                	jle    ffff80000080c1a0 <sys_lseek+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197
        return -EBADF;
ffff80000080c194:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c19b:	e9 82 00 00 00       	jmp    ffff80000080c222 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198
    if(whence < 0 || whence >= SEEK_MAX)
ffff80000080c1a0:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080c1a4:	78 06                	js     ffff80000080c1ac <sys_lseek+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198 (discriminator 1)
ffff80000080c1a6:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
ffff80000080c1aa:	7e 09                	jle    ffff80000080c1b5 <sys_lseek+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:199
        return -EINVAL;
ffff80000080c1ac:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c1b3:	eb 6d                	jmp    ffff80000080c222 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201

    filp = current->openf[filds];
ffff80000080c1b5:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c1bc:	ff ff ff 
ffff80000080c1bf:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c1c3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c1c6:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c1c9:	48 63 d2             	movsxd rdx,edx
ffff80000080c1cc:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c1d0:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c1d5:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202
    if(filp->f_ops && filp->f_ops->lseek)
ffff80000080c1d9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c1dd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c1e1:	48 85 c0             	test   rax,rax
ffff80000080c1e4:	74 38                	je     ffff80000080c21e <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202 (discriminator 1)
ffff80000080c1e6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c1ea:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c1ee:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080c1f2:	48 85 c0             	test   rax,rax
ffff80000080c1f5:	74 27                	je     ffff80000080c21e <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:203
        ret = filp->f_ops->lseek(filp,offset,whence);
ffff80000080c1f7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c1fb:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c1ff:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
ffff80000080c203:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080c206:	48 63 d0             	movsxd rdx,eax
ffff80000080c209:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080c20d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c211:	48 89 ce             	mov    rsi,rcx
ffff80000080c214:	48 89 c7             	mov    rdi,rax
ffff80000080c217:	41 ff d0             	call   r8
ffff80000080c21a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204
    return ret;
ffff80000080c21e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:205
}
ffff80000080c222:	c9                   	leave  
ffff80000080c223:	c3                   	ret    

ffff80000080c224 <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:215
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
ffff80000080c224:	f3 0f 1e fa          	endbr64 
ffff80000080c228:	55                   	push   rbp
ffff80000080c229:	48 89 e5             	mov    rbp,rsp
ffff80000080c22c:	41 57                	push   r15
ffff80000080c22e:	48 83 ec 18          	sub    rsp,0x18
ffff80000080c232:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080c232 <sys_vfork+0xe>
ffff80000080c239:	49 bb 26 19 11 00 00 	movabs r11,0x111926
ffff80000080c240:	00 00 00 
ffff80000080c243:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:216
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
ffff80000080c246:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080c24d:	ff ff ff 
ffff80000080c250:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080c254:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c257:	48 8b 80 fc 01 00 00 	mov    rax,QWORD PTR [rax+0x1fc]
ffff80000080c25e:	48 2d d0 00 00 00    	sub    rax,0xd0
ffff80000080c264:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:217
    printf("sys_vfork\n");
ffff80000080c268:	48 b8 f0 d7 ff ff ff 	movabs rax,0xffffffffffffd7f0
ffff80000080c26f:	ff ff ff 
ffff80000080c272:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080c276:	48 89 c7             	mov    rdi,rax
ffff80000080c279:	49 89 d7             	mov    r15,rdx
ffff80000080c27c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c281:	48 b9 9b 3b ee ff ff 	movabs rcx,0xffffffffffee3b9b
ffff80000080c288:	ff ff ff 
ffff80000080c28b:	48 01 d1             	add    rcx,rdx
ffff80000080c28e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:219
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
ffff80000080c290:	90                   	nop
ffff80000080c291:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c295:	c9                   	leave  
ffff80000080c296:	c3                   	ret    

ffff80000080c297 <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:262

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
ffff80000080c297:	f3 0f 1e fa          	endbr64 
ffff80000080c29b:	55                   	push   rbp
ffff80000080c29c:	48 89 e5             	mov    rbp,rsp
ffff80000080c29f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c29f <sys_wait+0x8>
ffff80000080c2a6:	49 bb b9 18 11 00 00 	movabs r11,0x1118b9
ffff80000080c2ad:	00 00 00 
ffff80000080c2b0:	4c 01 d8             	add    rax,r11
ffff80000080c2b3:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
ffff80000080c2b6:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000080c2ba:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:263
    struct process* waitee=NULL;
ffff80000080c2bd:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c2c4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:265
    extern struct process task[];
    if(!current->child_procs)
ffff80000080c2c5:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c2cc:	ff ff ff 
ffff80000080c2cf:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c2d3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c2d6:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c2dd:	48 85 d2             	test   rdx,rdx
ffff80000080c2e0:	75 0c                	jne    ffff80000080c2ee <sys_wait+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266
        return -ECHILD;//没有子进程可以等
ffff80000080c2e2:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080c2e9:	e9 ef 01 00 00       	jmp    ffff80000080c4dd <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:267
    if(pid==-1){
ffff80000080c2ee:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
ffff80000080c2f2:	75 58                	jne    ffff80000080c34c <sys_wait+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c2f4:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c2fb:	ff ff ff 
ffff80000080c2fe:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c302:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c305:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c30c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080c310:	eb 31                	jmp    ffff80000080c343 <sys_wait+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:271
                struct process* p=l->data;
ffff80000080c312:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c316:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080c31a:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:272
                if(p->stat == TASK_ZOMBIE) {
ffff80000080c31e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080c322:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080c325:	83 fa 04             	cmp    edx,0x4
ffff80000080c328:	75 0d                	jne    ffff80000080c337 <sys_wait+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
                    waitee=p;
ffff80000080c32a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c32e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:274
                    goto done;
ffff80000080c332:	e9 46 01 00 00       	jmp    ffff80000080c47d <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c337:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c33b:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c33f:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270 (discriminator 1)
ffff80000080c343:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff80000080c348:	75 c8                	jne    ffff80000080c312 <sys_wait+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
ffff80000080c34a:	eb a8                	jmp    ffff80000080c2f4 <sys_wait+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:279
                }
            }
        }

    }else if(pid==0) {
ffff80000080c34c:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080c350:	75 77                	jne    ffff80000080c3c9 <sys_wait+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c352:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c359:	ff ff ff 
ffff80000080c35c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c360:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c363:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c36a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c36e:	eb 50                	jmp    ffff80000080c3c0 <sys_wait+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283
                struct process* p=l->data;
ffff80000080c370:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c374:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080c378:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
ffff80000080c37c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c380:	8b 4a 04             	mov    ecx,DWORD PTR [rdx+0x4]
ffff80000080c383:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c38a:	ff ff ff 
ffff80000080c38d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c391:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c394:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080c397:	39 d1                	cmp    ecx,edx
ffff80000080c399:	75 19                	jne    ffff80000080c3b4 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284 (discriminator 1)
ffff80000080c39b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c39f:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080c3a2:	83 fa 04             	cmp    edx,0x4
ffff80000080c3a5:	75 0d                	jne    ffff80000080c3b4 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
                    waitee=p;
ffff80000080c3a7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c3ab:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:286
                    goto done;
ffff80000080c3af:	e9 c9 00 00 00       	jmp    ffff80000080c47d <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c3b4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c3b8:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c3bc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282 (discriminator 1)
ffff80000080c3c0:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c3c5:	75 a9                	jne    ffff80000080c370 <sys_wait+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
ffff80000080c3c7:	eb 89                	jmp    ffff80000080c352 <sys_wait+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:291
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
ffff80000080c3c9:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080c3cd:	79 03                	jns    ffff80000080c3d2 <sys_wait+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:291 (discriminator 1)
ffff80000080c3cf:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080c3d2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080c3d9:	eb 4f                	jmp    ffff80000080c42a <sys_wait+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294
            if(task[i].pid==pid){
ffff80000080c3db:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080c3e2:	ff ff ff 
ffff80000080c3e5:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080c3e9:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080c3ec:	48 63 d2             	movsxd rdx,edx
ffff80000080c3ef:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080c3f6:	48 01 ca             	add    rdx,rcx
ffff80000080c3f9:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080c3fb:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080c3fe:	39 d1                	cmp    ecx,edx
ffff80000080c400:	75 24                	jne    ffff80000080c426 <sys_wait+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295
                waitee=&task[i];
ffff80000080c402:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080c405:	48 63 d2             	movsxd rdx,edx
ffff80000080c408:	48 69 ca 58 03 00 00 	imul   rcx,rdx,0x358
ffff80000080c40f:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080c416:	ff ff ff 
ffff80000080c419:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c41d:	48 01 ca             	add    rdx,rcx
ffff80000080c420:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:296
                break;
ffff80000080c424:	eb 0a                	jmp    ffff80000080c430 <sys_wait+0x199>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080c426:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293 (discriminator 1)
ffff80000080c42a:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080c42e:	7e ab                	jle    ffff80000080c3db <sys_wait+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
ffff80000080c430:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080c435:	74 21                	je     ffff80000080c458 <sys_wait+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299 (discriminator 1)
ffff80000080c437:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c43b:	8b 92 bc 00 00 00    	mov    edx,DWORD PTR [rdx+0xbc]
ffff80000080c441:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff80000080c448:	ff ff ff 
ffff80000080c44b:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080c44f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c452:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c454:	39 c2                	cmp    edx,eax
ffff80000080c456:	74 09                	je     ffff80000080c461 <sys_wait+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:300
            return -ECHILD;//没有这个进程或者不是子进程
ffff80000080c458:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080c45f:	eb 7c                	jmp    ffff80000080c4dd <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
ffff80000080c461:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302 (discriminator 1)
ffff80000080c462:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c466:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080c469:	83 f8 04             	cmp    eax,0x4
ffff80000080c46c:	75 f4                	jne    ffff80000080c462 <sys_wait+0x1cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:303
        *stat_loc=waitee->exit_code;
ffff80000080c46e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c472:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080c475:	89 c2                	mov    edx,eax
ffff80000080c477:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c47b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:307
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
ffff80000080c47d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c481:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:309
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
ffff80000080c488:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c48c:	48 05 34 03 00 00    	add    rax,0x334
ffff80000080c492:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
    }
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
ffff80000080c496:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c49a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c49d:	48 85 c0             	test   rax,rax
ffff80000080c4a0:	74 13                	je     ffff80000080c4b5 <sys_wait+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:48
        entry->prev->next=entry->next;
ffff80000080c4a2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c4a6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c4a9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c4ad:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c4b1:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:49
    if(entry->next)
ffff80000080c4b5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c4b9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c4bd:	48 85 c0             	test   rax,rax
ffff80000080c4c0:	74 12                	je     ffff80000080c4d4 <sys_wait+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:50
        entry->next->prev=entry->prev;
ffff80000080c4c2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c4c6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c4ca:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c4ce:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c4d1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:51
}
ffff80000080c4d4:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:311
    //TODO 被信号中断时返回-1
    return waitee->pid;
ffff80000080c4d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c4d9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c4db:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:312
}
ffff80000080c4dd:	5d                   	pop    rbp
ffff80000080c4de:	c3                   	ret    

ffff80000080c4df <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:314
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
ffff80000080c4df:	f3 0f 1e fa          	endbr64 
ffff80000080c4e3:	55                   	push   rbp
ffff80000080c4e4:	48 89 e5             	mov    rbp,rsp
ffff80000080c4e7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c4e7 <sys_wait4+0x8>
ffff80000080c4ee:	49 bb 71 16 11 00 00 	movabs r11,0x111671
ffff80000080c4f5:	00 00 00 
ffff80000080c4f8:	4c 01 d8             	add    rax,r11
ffff80000080c4fb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c4ff:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c503:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080c506:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:350
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
ffff80000080c50a:	90                   	nop
ffff80000080c50b:	5d                   	pop    rbp
ffff80000080c50c:	c3                   	ret    

ffff80000080c50d <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:353

unsigned long sys_brk(unsigned long brk)
{
ffff80000080c50d:	f3 0f 1e fa          	endbr64 
ffff80000080c511:	55                   	push   rbp
ffff80000080c512:	48 89 e5             	mov    rbp,rsp
ffff80000080c515:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c515 <sys_brk+0x8>
ffff80000080c51c:	49 bb 43 16 11 00 00 	movabs r11,0x111643
ffff80000080c523:	00 00 00 
ffff80000080c526:	4c 01 d8             	add    rax,r11
ffff80000080c529:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:367
//
//    new_brk = do_brk(current->mm->end_brk,new_brk - current->mm->end_brk);	//expand brk space
//
//    current->mm->end_brk = new_brk;
//    return new_brk;
}
ffff80000080c52d:	90                   	nop
ffff80000080c52e:	5d                   	pop    rbp
ffff80000080c52f:	c3                   	ret    

ffff80000080c530 <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:370

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
ffff80000080c530:	f3 0f 1e fa          	endbr64 
ffff80000080c534:	55                   	push   rbp
ffff80000080c535:	48 89 e5             	mov    rbp,rsp
ffff80000080c538:	41 57                	push   r15
ffff80000080c53a:	53                   	push   rbx
ffff80000080c53b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080c53f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c53f <sys_reboot+0xf>
ffff80000080c546:	49 bb 19 16 11 00 00 	movabs r11,0x111619
ffff80000080c54d:	00 00 00 
ffff80000080c550:	4c 01 db             	add    rbx,r11
ffff80000080c553:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080c557:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:371
    printf("sys_reboot\n");
ffff80000080c55b:	48 b8 fb d7 ff ff ff 	movabs rax,0xffffffffffffd7fb
ffff80000080c562:	ff ff ff 
ffff80000080c565:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c569:	48 89 c7             	mov    rdi,rax
ffff80000080c56c:	49 89 df             	mov    r15,rbx
ffff80000080c56f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c574:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080c57b:	ff ff ff 
ffff80000080c57e:	48 01 da             	add    rdx,rbx
ffff80000080c581:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:372
    switch(cmd)
ffff80000080c583:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080c588:	74 09                	je     ffff80000080c593 <sys_reboot+0x63>
ffff80000080c58a:	48 83 7d e8 02       	cmp    QWORD PTR [rbp-0x18],0x2
ffff80000080c58f:	74 20                	je     ffff80000080c5b1 <sys_reboot+0x81>
ffff80000080c591:	eb 48                	jmp    ffff80000080c5db <sys_reboot+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:375
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
ffff80000080c593:	be fe 00 00 00       	mov    esi,0xfe
ffff80000080c598:	bf 64 00 00 00       	mov    edi,0x64
ffff80000080c59d:	49 89 df             	mov    r15,rbx
ffff80000080c5a0:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080c5a7:	ff ff ff 
ffff80000080c5aa:	48 01 d8             	add    rax,rbx
ffff80000080c5ad:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:376
            break;
ffff80000080c5af:	eb 53                	jmp    ffff80000080c604 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:379

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
ffff80000080c5b1:	48 b8 08 d8 ff ff ff 	movabs rax,0xffffffffffffd808
ffff80000080c5b8:	ff ff ff 
ffff80000080c5bb:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c5bf:	48 89 c7             	mov    rdi,rax
ffff80000080c5c2:	49 89 df             	mov    r15,rbx
ffff80000080c5c5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c5ca:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080c5d1:	ff ff ff 
ffff80000080c5d4:	48 01 da             	add    rdx,rbx
ffff80000080c5d7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:380
            break;
ffff80000080c5d9:	eb 29                	jmp    ffff80000080c604 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383

        default:
            printf("sys_reboot cmd ERROR!\n");
ffff80000080c5db:	48 b8 28 d8 ff ff ff 	movabs rax,0xffffffffffffd828
ffff80000080c5e2:	ff ff ff 
ffff80000080c5e5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c5e9:	48 89 c7             	mov    rdi,rax
ffff80000080c5ec:	49 89 df             	mov    r15,rbx
ffff80000080c5ef:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c5f4:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080c5fb:	ff ff ff 
ffff80000080c5fe:	48 01 da             	add    rdx,rbx
ffff80000080c601:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:384
            break;
ffff80000080c603:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386
    }
    return 0;
ffff80000080c604:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:387
}
ffff80000080c609:	48 83 c4 10          	add    rsp,0x10
ffff80000080c60d:	5b                   	pop    rbx
ffff80000080c60e:	41 5f                	pop    r15
ffff80000080c610:	5d                   	pop    rbp
ffff80000080c611:	c3                   	ret    

ffff80000080c612 <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:391


unsigned long sys_chdir(char *filename)
{
ffff80000080c612:	f3 0f 1e fa          	endbr64 
ffff80000080c616:	55                   	push   rbp
ffff80000080c617:	48 89 e5             	mov    rbp,rsp
ffff80000080c61a:	41 57                	push   r15
ffff80000080c61c:	53                   	push   rbx
ffff80000080c61d:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c621:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c621 <sys_chdir+0xf>
ffff80000080c628:	49 bb 37 15 11 00 00 	movabs r11,0x111537
ffff80000080c62f:	00 00 00 
ffff80000080c632:	4c 01 db             	add    rbx,r11
ffff80000080c635:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:392
    char * path = NULL;
ffff80000080c639:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c640:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:393
    long pathlen = 0;
ffff80000080c641:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080c648:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:394
    struct dir_entry * dentry = NULL;
ffff80000080c649:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080c650:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:396

    printf("sys_chdir\n");
ffff80000080c651:	48 b8 3f d8 ff ff ff 	movabs rax,0xffffffffffffd83f
ffff80000080c658:	ff ff ff 
ffff80000080c65b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c65f:	48 89 c7             	mov    rdi,rax
ffff80000080c662:	49 89 df             	mov    r15,rbx
ffff80000080c665:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c66a:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080c671:	ff ff ff 
ffff80000080c674:	48 01 da             	add    rdx,rbx
ffff80000080c677:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:397
    path = (char *) kmalloc();
ffff80000080c679:	49 89 df             	mov    r15,rbx
ffff80000080c67c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c681:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080c688:	ff ff ff 
ffff80000080c68b:	48 01 da             	add    rdx,rbx
ffff80000080c68e:	ff d2                	call   rdx
ffff80000080c690:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:399

    if(path == NULL)
ffff80000080c694:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c699:	75 0c                	jne    ffff80000080c6a7 <sys_chdir+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:400
        return -ENOMEM;
ffff80000080c69b:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080c6a2:	e9 28 01 00 00       	jmp    ffff80000080c7cf <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:401
    memset(path,0,PAGE_4K_SIZE);
ffff80000080c6a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c6ab:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080c6b0:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c6b5:	48 89 c7             	mov    rdi,rax
ffff80000080c6b8:	49 89 df             	mov    r15,rbx
ffff80000080c6bb:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080c6c2:	ff ff ff 
ffff80000080c6c5:	48 01 d8             	add    rax,rbx
ffff80000080c6c8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:402
    pathlen = strlen(filename);
ffff80000080c6ca:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c6ce:	48 89 c7             	mov    rdi,rax
ffff80000080c6d1:	49 89 df             	mov    r15,rbx
ffff80000080c6d4:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff80000080c6db:	ff ff ff 
ffff80000080c6de:	48 01 d8             	add    rax,rbx
ffff80000080c6e1:	ff d0                	call   rax
ffff80000080c6e3:	48 98                	cdqe   
ffff80000080c6e5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:403
    if(pathlen <= 0)
ffff80000080c6e9:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080c6ee:	7f 25                	jg     ffff80000080c715 <sys_chdir+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
    {
        kmfree(path);
ffff80000080c6f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c6f4:	48 89 c7             	mov    rdi,rax
ffff80000080c6f7:	49 89 df             	mov    r15,rbx
ffff80000080c6fa:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080c701:	ff ff ff 
ffff80000080c704:	48 01 d8             	add    rax,rbx
ffff80000080c707:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:406
        return -EFAULT;
ffff80000080c709:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080c710:	e9 ba 00 00 00       	jmp    ffff80000080c7cf <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:408
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080c715:	48 81 7d e0 ff 0f 00 	cmp    QWORD PTR [rbp-0x20],0xfff
ffff80000080c71c:	00 
ffff80000080c71d:	7e 25                	jle    ffff80000080c744 <sys_chdir+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:410
    {
        kmfree(path);
ffff80000080c71f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c723:	48 89 c7             	mov    rdi,rax
ffff80000080c726:	49 89 df             	mov    r15,rbx
ffff80000080c729:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080c730:	ff ff ff 
ffff80000080c733:	48 01 d8             	add    rax,rbx
ffff80000080c736:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:411
        return -ENAMETOOLONG;
ffff80000080c738:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080c73f:	e9 8b 00 00 00       	jmp    ffff80000080c7cf <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:413
    }
    strcpy(filename,path);
ffff80000080c744:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c748:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c74c:	48 89 d6             	mov    rsi,rdx
ffff80000080c74f:	48 89 c7             	mov    rdi,rax
ffff80000080c752:	49 89 df             	mov    r15,rbx
ffff80000080c755:	48 b8 70 51 ef ff ff 	movabs rax,0xffffffffffef5170
ffff80000080c75c:	ff ff ff 
ffff80000080c75f:	48 01 d8             	add    rax,rbx
ffff80000080c762:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:415

    dentry = path_walk(path,0);
ffff80000080c764:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c768:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c76d:	48 89 c7             	mov    rdi,rax
ffff80000080c770:	49 89 df             	mov    r15,rbx
ffff80000080c773:	48 b8 e1 d2 ee ff ff 	movabs rax,0xffffffffffeed2e1
ffff80000080c77a:	ff ff ff 
ffff80000080c77d:	48 01 d8             	add    rax,rbx
ffff80000080c780:	ff d0                	call   rax
ffff80000080c782:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:416
    kmfree(path);
ffff80000080c786:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c78a:	48 89 c7             	mov    rdi,rax
ffff80000080c78d:	49 89 df             	mov    r15,rbx
ffff80000080c790:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080c797:	ff ff ff 
ffff80000080c79a:	48 01 d8             	add    rax,rbx
ffff80000080c79d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:418

    if(dentry == NULL)
ffff80000080c79f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c7a4:	75 09                	jne    ffff80000080c7af <sys_chdir+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
        return -ENOENT;
ffff80000080c7a6:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080c7ad:	eb 20                	jmp    ffff80000080c7cf <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:420
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
ffff80000080c7af:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c7b3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c7b7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c7bb:	48 83 f8 02          	cmp    rax,0x2
ffff80000080c7bf:	74 09                	je     ffff80000080c7ca <sys_chdir+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421
        return -ENOTDIR;
ffff80000080c7c1:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080c7c8:	eb 05                	jmp    ffff80000080c7cf <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
    return 0;
ffff80000080c7ca:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:423
}
ffff80000080c7cf:	48 83 c4 30          	add    rsp,0x30
ffff80000080c7d3:	5b                   	pop    rbx
ffff80000080c7d4:	41 5f                	pop    r15
ffff80000080c7d6:	5d                   	pop    rbp
ffff80000080c7d7:	c3                   	ret    

ffff80000080c7d8 <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426

unsigned long sys_getdents(int fd, void * dirent, long count)
{
ffff80000080c7d8:	f3 0f 1e fa          	endbr64 
ffff80000080c7dc:	55                   	push   rbp
ffff80000080c7dd:	48 89 e5             	mov    rbp,rsp
ffff80000080c7e0:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c7e4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c7e4 <sys_getdents+0xc>
ffff80000080c7eb:	49 bb 74 13 11 00 00 	movabs r11,0x111374
ffff80000080c7f2:	00 00 00 
ffff80000080c7f5:	4c 01 d8             	add    rax,r11
ffff80000080c7f8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c7fb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c7ff:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:427
    struct file * filp = NULL;
ffff80000080c803:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c80a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:428
    unsigned long ret = 0;
ffff80000080c80b:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c812:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
ffff80000080c813:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c817:	78 06                	js     ffff80000080c81f <sys_getdents+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431 (discriminator 1)
ffff80000080c819:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
ffff80000080c81d:	7e 0c                	jle    ffff80000080c82b <sys_getdents+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:432
        return -EBADF;
ffff80000080c81f:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c826:	e9 85 00 00 00       	jmp    ffff80000080c8b0 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:433
    if(count < 0)
ffff80000080c82b:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c830:	79 09                	jns    ffff80000080c83b <sys_getdents+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:434
        return -EINVAL;
ffff80000080c832:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c839:	eb 75                	jmp    ffff80000080c8b0 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436

    filp = current->openf[fd];
ffff80000080c83b:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c842:	ff ff ff 
ffff80000080c845:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c849:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c84c:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080c84f:	48 63 c9             	movsxd rcx,ecx
ffff80000080c852:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080c856:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080c85b:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437
    if(filp->f_ops && filp->f_ops->readdir)
ffff80000080c85f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c863:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c867:	48 85 d2             	test   rdx,rdx
ffff80000080c86a:	74 40                	je     ffff80000080c8ac <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437 (discriminator 1)
ffff80000080c86c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c870:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c874:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080c878:	48 85 d2             	test   rdx,rdx
ffff80000080c87b:	74 2f                	je     ffff80000080c8ac <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:438
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
ffff80000080c87d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c881:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c885:	4c 8b 42 30          	mov    r8,QWORD PTR [rdx+0x30]
ffff80000080c889:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c88d:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080c891:	48 ba 80 ff ff ff ff 	movabs rdx,0xffffffffffffff80
ffff80000080c898:	ff ff ff 
ffff80000080c89b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c89f:	48 89 c2             	mov    rdx,rax
ffff80000080c8a2:	48 89 cf             	mov    rdi,rcx
ffff80000080c8a5:	41 ff d0             	call   r8
ffff80000080c8a8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439
    return ret;
ffff80000080c8ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:440
}
ffff80000080c8b0:	c9                   	leave  
ffff80000080c8b1:	c3                   	ret    

ffff80000080c8b2 <sys_mmap>:
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:442

void *sys_mmap(void *addr, size_t len, int prot, int flags,int fildes, off_t off){
ffff80000080c8b2:	f3 0f 1e fa          	endbr64 
ffff80000080c8b6:	55                   	push   rbp
ffff80000080c8b7:	48 89 e5             	mov    rbp,rsp
ffff80000080c8ba:	41 57                	push   r15
ffff80000080c8bc:	41 56                	push   r14
ffff80000080c8be:	41 55                	push   r13
ffff80000080c8c0:	41 54                	push   r12
ffff80000080c8c2:	53                   	push   rbx
ffff80000080c8c3:	48 83 ec 48          	sub    rsp,0x48
ffff80000080c8c7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c8c7 <sys_mmap+0x15>
ffff80000080c8ce:	49 bb 91 12 11 00 00 	movabs r11,0x111291
ffff80000080c8d5:	00 00 00 
ffff80000080c8d8:	4c 01 db             	add    rbx,r11
ffff80000080c8db:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff80000080c8df:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080c8e3:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
ffff80000080c8e6:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
ffff80000080c8e9:	44 89 45 94          	mov    DWORD PTR [rbp-0x6c],r8d
ffff80000080c8ed:	44 89 4d 90          	mov    DWORD PTR [rbp-0x70],r9d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:443
    int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080c8f1:	c7 45 c4 05 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x5
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:445
    if((prot|PROT_WRITE)||(prot|PROT_EXEC))
        attr|=PAGE_RWX;
ffff80000080c8f8:	83 4d c4 02          	or     DWORD PTR [rbp-0x3c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:446
    if(addr){
ffff80000080c8fc:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080c901:	0f 84 16 01 00 00    	je     ffff80000080ca1d <sys_mmap+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:447
        if(chk_mmap(addr,len)){
ffff80000080c907:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c90b:	89 c2                	mov    edx,eax
ffff80000080c90d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c911:	48 89 c6             	mov    rsi,rax
ffff80000080c914:	89 d7                	mov    edi,edx
ffff80000080c916:	49 89 df             	mov    r15,rbx
ffff80000080c919:	48 b8 da 9b ee ff ff 	movabs rax,0xffffffffffee9bda
ffff80000080c920:	ff ff ff 
ffff80000080c923:	48 01 d8             	add    rax,rbx
ffff80000080c926:	ff d0                	call   rax
ffff80000080c928:	85 c0                	test   eax,eax
ffff80000080c92a:	0f 84 8f 00 00 00    	je     ffff80000080c9bf <sys_mmap+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:448
            int pgc=(len-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080c930:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c934:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080c93a:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080c93e:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449
            for(int i=0;i<pgc;i++){
ffff80000080c941:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080c948:	eb 68                	jmp    ffff80000080c9b2 <sys_mmap+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:450 (discriminator 3)
                smmap(pmalloc(),addr+i*PAGE_4K_SIZE,attr,current->pml4);
ffff80000080c94a:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080c951:	ff ff ff 
ffff80000080c954:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c958:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c95b:	4c 8b a8 e0 00 00 00 	mov    r13,QWORD PTR [rax+0xe0]
ffff80000080c962:	44 8b 65 c4          	mov    r12d,DWORD PTR [rbp-0x3c]
ffff80000080c966:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080c969:	c1 e0 0c             	shl    eax,0xc
ffff80000080c96c:	48 63 d0             	movsxd rdx,eax
ffff80000080c96f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c973:	48 01 d0             	add    rax,rdx
ffff80000080c976:	49 89 c6             	mov    r14,rax
ffff80000080c979:	49 89 df             	mov    r15,rbx
ffff80000080c97c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c981:	48 ba 8c 50 ee ff ff 	movabs rdx,0xffffffffffee508c
ffff80000080c988:	ff ff ff 
ffff80000080c98b:	48 01 da             	add    rdx,rbx
ffff80000080c98e:	ff d2                	call   rdx
ffff80000080c990:	4c 89 e9             	mov    rcx,r13
ffff80000080c993:	44 89 e2             	mov    edx,r12d
ffff80000080c996:	4c 89 f6             	mov    rsi,r14
ffff80000080c999:	48 89 c7             	mov    rdi,rax
ffff80000080c99c:	49 89 df             	mov    r15,rbx
ffff80000080c99f:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff80000080c9a6:	ff ff ff 
ffff80000080c9a9:	48 01 d8             	add    rax,rbx
ffff80000080c9ac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449 (discriminator 3)
            for(int i=0;i<pgc;i++){
ffff80000080c9ae:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449 (discriminator 1)
ffff80000080c9b2:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080c9b5:	3b 45 bc             	cmp    eax,DWORD PTR [rbp-0x44]
ffff80000080c9b8:	7c 90                	jl     ffff80000080c94a <sys_mmap+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:453

            }
            goto sync_f;
ffff80000080c9ba:	e9 0e 01 00 00       	jmp    ffff80000080cacd <sys_mmap+0x21b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:456
        }
        if(flags|MAP_FIXED){
            set_errno(-ENOMEM);
ffff80000080c9bf:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080c9c4:	49 89 df             	mov    r15,rbx
ffff80000080c9c7:	48 b8 9b a2 ee ff ff 	movabs rax,0xffffffffffeea29b
ffff80000080c9ce:	ff ff ff 
ffff80000080c9d1:	48 01 d8             	add    rax,rbx
ffff80000080c9d4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:457
            return MAP_FAILED;
ffff80000080c9d6:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080c9dd:	e9 ef 00 00 00       	jmp    ffff80000080cad1 <sys_mmap+0x21f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:463
        }
    }
    //寻找一块空的虚拟内存
    while (!chk_mmap(addr,len))
    {
        addr+=PAGE_4K_SIZE;
ffff80000080c9e2:	48 81 45 a8 00 10 00 	add    QWORD PTR [rbp-0x58],0x1000
ffff80000080c9e9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:464
        if(addr>=KNL_BASE){
ffff80000080c9ea:	48 b8 ff ff ff ff ff 	movabs rax,0xffff7fffffffffff
ffff80000080c9f1:	7f ff ff 
ffff80000080c9f4:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080c9f8:	76 23                	jbe    ffff80000080ca1d <sys_mmap+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:465
            set_errno(-ENOMEM);
ffff80000080c9fa:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080c9ff:	49 89 df             	mov    r15,rbx
ffff80000080ca02:	48 b8 9b a2 ee ff ff 	movabs rax,0xffffffffffeea29b
ffff80000080ca09:	ff ff ff 
ffff80000080ca0c:	48 01 d8             	add    rax,rbx
ffff80000080ca0f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:466
            return MAP_FAILED;
ffff80000080ca11:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080ca18:	e9 b4 00 00 00       	jmp    ffff80000080cad1 <sys_mmap+0x21f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:461
    while (!chk_mmap(addr,len))
ffff80000080ca1d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ca21:	89 c2                	mov    edx,eax
ffff80000080ca23:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ca27:	48 89 c6             	mov    rsi,rax
ffff80000080ca2a:	89 d7                	mov    edi,edx
ffff80000080ca2c:	49 89 df             	mov    r15,rbx
ffff80000080ca2f:	48 b8 da 9b ee ff ff 	movabs rax,0xffffffffffee9bda
ffff80000080ca36:	ff ff ff 
ffff80000080ca39:	48 01 d8             	add    rax,rbx
ffff80000080ca3c:	ff d0                	call   rax
ffff80000080ca3e:	85 c0                	test   eax,eax
ffff80000080ca40:	74 a0                	je     ffff80000080c9e2 <sys_mmap+0x130>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:469
        }
    }
    int pgc=(len-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080ca42:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ca46:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ca4c:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080ca50:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470
    for(int i=0;i<pgc;i++){
ffff80000080ca53:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff80000080ca5a:	eb 68                	jmp    ffff80000080cac4 <sys_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:471 (discriminator 3)
        smmap(pmalloc(),addr+i*PAGE_4K_SIZE,attr,current->pml4);
ffff80000080ca5c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080ca63:	ff ff ff 
ffff80000080ca66:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ca6a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ca6d:	4c 8b a8 e0 00 00 00 	mov    r13,QWORD PTR [rax+0xe0]
ffff80000080ca74:	44 8b 65 c4          	mov    r12d,DWORD PTR [rbp-0x3c]
ffff80000080ca78:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff80000080ca7b:	c1 e0 0c             	shl    eax,0xc
ffff80000080ca7e:	48 63 d0             	movsxd rdx,eax
ffff80000080ca81:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ca85:	48 01 d0             	add    rax,rdx
ffff80000080ca88:	49 89 c6             	mov    r14,rax
ffff80000080ca8b:	49 89 df             	mov    r15,rbx
ffff80000080ca8e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ca93:	48 ba 8c 50 ee ff ff 	movabs rdx,0xffffffffffee508c
ffff80000080ca9a:	ff ff ff 
ffff80000080ca9d:	48 01 da             	add    rdx,rbx
ffff80000080caa0:	ff d2                	call   rdx
ffff80000080caa2:	4c 89 e9             	mov    rcx,r13
ffff80000080caa5:	44 89 e2             	mov    edx,r12d
ffff80000080caa8:	4c 89 f6             	mov    rsi,r14
ffff80000080caab:	48 89 c7             	mov    rdi,rax
ffff80000080caae:	49 89 df             	mov    r15,rbx
ffff80000080cab1:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff80000080cab8:	ff ff ff 
ffff80000080cabb:	48 01 d8             	add    rax,rbx
ffff80000080cabe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff80000080cac0:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470 (discriminator 1)
ffff80000080cac4:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff80000080cac7:	3b 45 c0             	cmp    eax,DWORD PTR [rbp-0x40]
ffff80000080caca:	7c 90                	jl     ffff80000080ca5c <sys_mmap+0x1aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:473
    }
sync_f:
ffff80000080cacc:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:476
    if(flags|MAP_ANNONYMOUS){
        //不需要映射到文件，匿名映射
        return addr;
ffff80000080cacd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:484
    //目前先一致读取
    sys_lseek(fildes,off,SEEK_SET);
    sys_read(fildes,addr,len);
    return addr;
    
}
ffff80000080cad1:	48 83 c4 48          	add    rsp,0x48
ffff80000080cad5:	5b                   	pop    rbx
ffff80000080cad6:	41 5c                	pop    r12
ffff80000080cad8:	41 5d                	pop    r13
ffff80000080cada:	41 5e                	pop    r14
ffff80000080cadc:	41 5f                	pop    r15
ffff80000080cade:	5d                   	pop    rbp
ffff80000080cadf:	c3                   	ret    

ffff80000080cae0 <init_ramfs>:
init_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:28
};
struct index_node_operations ramfs_iops={
        .lookup=lookup_inode_ramfs,.create=create_inode_ramfs
};
struct index_node* test;
void init_ramfs(){
ffff80000080cae0:	f3 0f 1e fa          	endbr64 
ffff80000080cae4:	55                   	push   rbp
ffff80000080cae5:	48 89 e5             	mov    rbp,rsp
ffff80000080cae8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cae8 <init_ramfs+0x8>
ffff80000080caef:	49 bb 70 10 11 00 00 	movabs r11,0x111070
ffff80000080caf6:	00 00 00 
ffff80000080caf9:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:31
    //挂载新文件系统到/mnt,设备为/dev/ram

    ramfs_sb.sb_ops=&ramfs_fops;
ffff80000080cafc:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080cb03:	ff ff ff 
ffff80000080cb06:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cb0a:	48 b9 40 fd ff ff ff 	movabs rcx,0xfffffffffffffd40
ffff80000080cb11:	ff ff ff 
ffff80000080cb14:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080cb18:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:32
    ramfs_sb.root=dmnt;
ffff80000080cb1c:	48 ba e0 fe ff ff ff 	movabs rdx,0xfffffffffffffee0
ffff80000080cb23:	ff ff ff 
ffff80000080cb26:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cb2a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080cb2d:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080cb34:	ff ff ff 
ffff80000080cb37:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cb3b:	48 89 0a             	mov    QWORD PTR [rdx],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:33
    ramfs_sb.p_dev=&bd_ramdisk;
ffff80000080cb3e:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080cb45:	ff ff ff 
ffff80000080cb48:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cb4c:	48 b9 a8 ff ff ff ff 	movabs rcx,0xffffffffffffffa8
ffff80000080cb53:	ff ff ff 
ffff80000080cb56:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080cb5a:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:34
    ramfs_sb.dev=dev_ramdisk;
ffff80000080cb5e:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080cb65:	ff ff ff 
ffff80000080cb68:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cb6c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080cb6e:	89 d1                	mov    ecx,edx
ffff80000080cb70:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080cb77:	ff ff ff 
ffff80000080cb7a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cb7e:	66 89 48 10          	mov    WORD PTR [rax+0x10],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:45
    // test->sb=&ramfs_sb;
    // test->attribute=FS_ATTR_FILE;
    // test->inode_ops=&ramfs_iops;
    //设置一下dmnt的inode的操作，查找的时候会用到
    // dmnt->dir_inode->inode_ops=&ramfs_iops;
}
ffff80000080cb82:	90                   	nop
ffff80000080cb83:	5d                   	pop    rbp
ffff80000080cb84:	c3                   	ret    

ffff80000080cb85 <create_inode_ramfs>:
create_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:47

long create_inode_ramfs(struct index_node * inode,struct dir_entry * dentry,int mode){}
ffff80000080cb85:	f3 0f 1e fa          	endbr64 
ffff80000080cb89:	55                   	push   rbp
ffff80000080cb8a:	48 89 e5             	mov    rbp,rsp
ffff80000080cb8d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cb8d <create_inode_ramfs+0x8>
ffff80000080cb94:	49 bb cb 0f 11 00 00 	movabs r11,0x110fcb
ffff80000080cb9b:	00 00 00 
ffff80000080cb9e:	4c 01 d8             	add    rax,r11
ffff80000080cba1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cba5:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080cba9:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080cbac:	90                   	nop
ffff80000080cbad:	5d                   	pop    rbp
ffff80000080cbae:	c3                   	ret    

ffff80000080cbaf <lookup_inode_ramfs>:
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:48
struct dir_entry* lookup_inode_ramfs(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080cbaf:	f3 0f 1e fa          	endbr64 
ffff80000080cbb3:	55                   	push   rbp
ffff80000080cbb4:	48 89 e5             	mov    rbp,rsp
ffff80000080cbb7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cbb7 <lookup_inode_ramfs+0x8>
ffff80000080cbbe:	49 bb a1 0f 11 00 00 	movabs r11,0x110fa1
ffff80000080cbc5:	00 00 00 
ffff80000080cbc8:	4c 01 d8             	add    rax,r11
ffff80000080cbcb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080cbcf:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:49
    list_init(&dest_dentry->subdirs_list);
ffff80000080cbd3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cbd7:	48 83 c2 28          	add    rdx,0x28
ffff80000080cbdb:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cbdf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080cbe3:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cbea:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080cbee:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080cbf5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cbf6:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:50
    list_init(&dest_dentry->child_node);
ffff80000080cbf7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cbfb:	48 83 c2 10          	add    rdx,0x10
ffff80000080cbff:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cc03:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080cc07:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cc0e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080cc12:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080cc19:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cc1a:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:51
    dest_dentry->dir_inode=test;
ffff80000080cc1b:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080cc22:	ff ff ff 
ffff80000080cc25:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cc29:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cc2c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cc30:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:52
    dest_dentry->child_node.data=dest_dentry;
ffff80000080cc34:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cc38:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cc3c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:53
    return dest_dentry;
ffff80000080cc40:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:54
}
ffff80000080cc44:	5d                   	pop    rbp
ffff80000080cc45:	c3                   	ret    

ffff80000080cc46 <open_ramfs>:
open_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:55
long open_ramfs(struct index_node * inode,struct file * filp){
ffff80000080cc46:	f3 0f 1e fa          	endbr64 
ffff80000080cc4a:	55                   	push   rbp
ffff80000080cc4b:	48 89 e5             	mov    rbp,rsp
ffff80000080cc4e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cc4e <open_ramfs+0x8>
ffff80000080cc55:	49 bb 0a 0f 11 00 00 	movabs r11,0x110f0a
ffff80000080cc5c:	00 00 00 
ffff80000080cc5f:	4c 01 d8             	add    rax,r11
ffff80000080cc62:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cc66:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:56
    filp->f_ops=inode->f_ops;
ffff80000080cc6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080cc6e:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080cc72:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080cc76:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:57
    filp->position=0;
ffff80000080cc7a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080cc7e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:58
    return 1;
ffff80000080cc85:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:59
}
ffff80000080cc8a:	5d                   	pop    rbp
ffff80000080cc8b:	c3                   	ret    

ffff80000080cc8c <close_ramfs>:
close_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:61

long close_ramfs(struct index_node * inode,struct file * filp){
ffff80000080cc8c:	f3 0f 1e fa          	endbr64 
ffff80000080cc90:	55                   	push   rbp
ffff80000080cc91:	48 89 e5             	mov    rbp,rsp
ffff80000080cc94:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cc94 <close_ramfs+0x8>
ffff80000080cc9b:	49 bb c4 0e 11 00 00 	movabs r11,0x110ec4
ffff80000080cca2:	00 00 00 
ffff80000080cca5:	4c 01 d8             	add    rax,r11
ffff80000080cca8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ccac:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:62
    return 0;
ffff80000080ccb0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:63
}
ffff80000080ccb5:	5d                   	pop    rbp
ffff80000080ccb6:	c3                   	ret    

ffff80000080ccb7 <read_ramfs>:
read_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:65
//注意一下:position是指针
long read_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080ccb7:	f3 0f 1e fa          	endbr64 
ffff80000080ccbb:	55                   	push   rbp
ffff80000080ccbc:	48 89 e5             	mov    rbp,rsp
ffff80000080ccbf:	41 57                	push   r15
ffff80000080ccc1:	48 83 ec 28          	sub    rsp,0x28
ffff80000080ccc5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ccc5 <read_ramfs+0xe>
ffff80000080cccc:	49 bb 93 0e 11 00 00 	movabs r11,0x110e93
ffff80000080ccd3:	00 00 00 
ffff80000080ccd6:	4c 01 d8             	add    rax,r11
ffff80000080ccd9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080ccdd:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080cce1:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080cce5:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:66
    blkdev_read(filp->dentry->dir_inode->dev,*position,count,buf);
ffff80000080cce9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080cced:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ccf0:	89 d6                	mov    esi,edx
ffff80000080ccf2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ccf6:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080ccfa:	48 8b 52 40          	mov    rdx,QWORD PTR [rdx+0x40]
ffff80000080ccfe:	0f b7 52 18          	movzx  edx,WORD PTR [rdx+0x18]
ffff80000080cd02:	0f b7 fa             	movzx  edi,dx
ffff80000080cd05:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080cd09:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cd0d:	49 89 c7             	mov    r15,rax
ffff80000080cd10:	49 b8 1a 00 ef ff ff 	movabs r8,0xffffffffffef001a
ffff80000080cd17:	ff ff ff 
ffff80000080cd1a:	49 01 c0             	add    r8,rax
ffff80000080cd1d:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:73
    if(len>count)len=count;
    for(int i=0;i<len;i++){
        buf[i]=_binary_bin_test_elf_start[i + *position];
    }
    *position+=len; */
    return 0;
ffff80000080cd20:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:74
}
ffff80000080cd25:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080cd29:	c9                   	leave  
ffff80000080cd2a:	c3                   	ret    

ffff80000080cd2b <write_ramfs>:
write_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:75
long write_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080cd2b:	f3 0f 1e fa          	endbr64 
ffff80000080cd2f:	55                   	push   rbp
ffff80000080cd30:	48 89 e5             	mov    rbp,rsp
ffff80000080cd33:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cd33 <write_ramfs+0x8>
ffff80000080cd3a:	49 bb 25 0e 11 00 00 	movabs r11,0x110e25
ffff80000080cd41:	00 00 00 
ffff80000080cd44:	4c 01 d8             	add    rax,r11
ffff80000080cd47:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cd4b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080cd4f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080cd53:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:76
    return 0;
ffff80000080cd57:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:77
}
ffff80000080cd5c:	5d                   	pop    rbp
ffff80000080cd5d:	c3                   	ret    

ffff80000080cd5e <ioctl_ramfs>:
ioctl_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:78
long ioctl_ramfs(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080cd5e:	f3 0f 1e fa          	endbr64 
ffff80000080cd62:	55                   	push   rbp
ffff80000080cd63:	48 89 e5             	mov    rbp,rsp
ffff80000080cd66:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cd66 <ioctl_ramfs+0x8>
ffff80000080cd6d:	49 bb f2 0d 11 00 00 	movabs r11,0x110df2
ffff80000080cd74:	00 00 00 
ffff80000080cd77:	4c 01 d8             	add    rax,r11
ffff80000080cd7a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cd7e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080cd82:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080cd86:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:79
    return 0;
ffff80000080cd8a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:80
ffff80000080cd8f:	5d                   	pop    rbp
ffff80000080cd90:	c3                   	ret    

ffff80000080cd91 <ramdisk_do_req>:
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:22
long ramdisk_size;
int dev_ramdisk=-1;
struct blk_dev bd_ramdisk={
    .do_request=ramdisk_do_req
};
void ramdisk_do_req(struct request* req){
ffff80000080cd91:	f3 0f 1e fa          	endbr64 
ffff80000080cd95:	55                   	push   rbp
ffff80000080cd96:	48 89 e5             	mov    rbp,rsp
ffff80000080cd99:	48 83 ec 40          	sub    rsp,0x40
ffff80000080cd9d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cd9d <ramdisk_do_req+0xc>
ffff80000080cda4:	49 bb bb 0d 11 00 00 	movabs r11,0x110dbb
ffff80000080cdab:	00 00 00 
ffff80000080cdae:	4c 01 d8             	add    rax,r11
ffff80000080cdb1:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:23
    if(!req)
ffff80000080cdb5:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080cdba:	0f 84 0c 02 00 00    	je     ffff80000080cfcc <ramdisk_do_req+0x23b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:25
        return;
    start_request(req->dev);
ffff80000080cdc0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cdc4:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080cdc7:	0f b7 d2             	movzx  edx,dx
ffff80000080cdca:	66 89 55 e6          	mov    WORD PTR [rbp-0x1a],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
    int major=BLKDEV_MAJOR(dev);
    blk_devs[major].current_request->dev=-1;
    blk_devs[major].current_request=blk_devs[major].current_request->next;
}
__attribute__((__always_inline__))inline void start_request(unsigned short dev){
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080cdce:	0f b7 55 e6          	movzx  edx,WORD PTR [rbp-0x1a]
ffff80000080cdd2:	c1 fa 04             	sar    edx,0x4
ffff80000080cdd5:	89 d1                	mov    ecx,edx
ffff80000080cdd7:	83 e1 0f             	and    ecx,0xf
ffff80000080cdda:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080cde1:	ff ff ff 
ffff80000080cde4:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080cde8:	48 63 d1             	movsxd rdx,ecx
ffff80000080cdeb:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cdef:	48 01 f2             	add    rdx,rsi
ffff80000080cdf2:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080cdf6:	48 8b 52 2a          	mov    rdx,QWORD PTR [rdx+0x2a]
ffff80000080cdfa:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:195
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline void wait_on_req(struct process* p){
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080cdfe:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ce02:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080ce05:	83 fa 02             	cmp    edx,0x2
ffff80000080ce08:	74 0c                	je     ffff80000080ce16 <ramdisk_do_req+0x85>
ffff80000080ce0a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ce0e:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080ce11:	83 fa 01             	cmp    edx,0x1
ffff80000080ce14:	75 0b                	jne    ffff80000080ce21 <ramdisk_do_req+0x90>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
            p->stat=TASK_SUSPENDED;
ffff80000080ce16:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ce1a:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
}
ffff80000080ce21:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
ffff80000080ce22:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:26
    switch (req->cmd)
ffff80000080ce23:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce27:	8b 52 02             	mov    edx,DWORD PTR [rdx+0x2]
ffff80000080ce2a:	85 d2                	test   edx,edx
ffff80000080ce2c:	74 0a                	je     ffff80000080ce38 <ramdisk_do_req+0xa7>
ffff80000080ce2e:	83 fa 01             	cmp    edx,0x1
ffff80000080ce31:	74 6e                	je     ffff80000080cea1 <ramdisk_do_req+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:43
        for(int i=0;i<lenw;i++){
            ramdisk_base[i + basew]=req->buffer[i];
        }
        break;
    default:
        break;
ffff80000080ce33:	e9 d1 00 00 00       	jmp    ffff80000080cf09 <ramdisk_do_req+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:29
        int len= req->nr_sectors*SECTOR_SIZE;
ffff80000080ce38:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce3c:	48 8b 52 12          	mov    rdx,QWORD PTR [rdx+0x12]
ffff80000080ce40:	c1 e2 09             	shl    edx,0x9
ffff80000080ce43:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:30
        int base=req->sector*SECTOR_SIZE;
ffff80000080ce46:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce4a:	48 8b 52 0a          	mov    rdx,QWORD PTR [rdx+0xa]
ffff80000080ce4e:	c1 e2 09             	shl    edx,0x9
ffff80000080ce51:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31
        for(int i=0;i<len;i++){
ffff80000080ce54:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080ce5b:	eb 3a                	jmp    ffff80000080ce97 <ramdisk_do_req+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:32 (discriminator 3)
            req->buffer[i]=ramdisk_base[i + base];
ffff80000080ce5d:	48 ba e8 ff ff ff ff 	movabs rdx,0xffffffffffffffe8
ffff80000080ce64:	ff ff ff 
ffff80000080ce67:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ce6b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080ce6e:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff80000080ce71:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080ce74:	01 f2                	add    edx,esi
ffff80000080ce76:	48 63 d2             	movsxd rdx,edx
ffff80000080ce79:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080ce7d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce81:	48 8b 4a 22          	mov    rcx,QWORD PTR [rdx+0x22]
ffff80000080ce85:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080ce88:	48 63 d2             	movsxd rdx,edx
ffff80000080ce8b:	48 01 d1             	add    rcx,rdx
ffff80000080ce8e:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080ce91:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 3)
        for(int i=0;i<len;i++){
ffff80000080ce93:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 1)
ffff80000080ce97:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080ce9a:	3b 55 ec             	cmp    edx,DWORD PTR [rbp-0x14]
ffff80000080ce9d:	7c be                	jl     ffff80000080ce5d <ramdisk_do_req+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:34
        break;
ffff80000080ce9f:	eb 68                	jmp    ffff80000080cf09 <ramdisk_do_req+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36
        int lenw= req->nr_sectors*BLOCK_SIZE;
ffff80000080cea1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cea5:	48 8b 52 12          	mov    rdx,QWORD PTR [rdx+0x12]
ffff80000080cea9:	c1 e2 0c             	shl    edx,0xc
ffff80000080ceac:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:37
        int basew=req->sector*BLOCK_SIZE;
ffff80000080ceaf:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ceb3:	48 8b 52 0a          	mov    rdx,QWORD PTR [rdx+0xa]
ffff80000080ceb7:	c1 e2 0c             	shl    edx,0xc
ffff80000080ceba:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38
        for(int i=0;i<lenw;i++){
ffff80000080cebd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080cec4:	eb 3a                	jmp    ffff80000080cf00 <ramdisk_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:39 (discriminator 3)
            ramdisk_base[i + basew]=req->buffer[i];
ffff80000080cec6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ceca:	48 8b 4a 22          	mov    rcx,QWORD PTR [rdx+0x22]
ffff80000080cece:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080ced1:	48 63 d2             	movsxd rdx,edx
ffff80000080ced4:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080ced8:	48 ba e8 ff ff ff ff 	movabs rdx,0xffffffffffffffe8
ffff80000080cedf:	ff ff ff 
ffff80000080cee2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cee6:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080cee9:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
ffff80000080ceec:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080ceef:	01 fa                	add    edx,edi
ffff80000080cef1:	48 63 d2             	movsxd rdx,edx
ffff80000080cef4:	48 01 d1             	add    rcx,rdx
ffff80000080cef7:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080cefa:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 3)
        for(int i=0;i<lenw;i++){
ffff80000080cefc:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 1)
ffff80000080cf00:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080cf03:	3b 55 f4             	cmp    edx,DWORD PTR [rbp-0xc]
ffff80000080cf06:	7c be                	jl     ffff80000080cec6 <ramdisk_do_req+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:41
        break;
ffff80000080cf08:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:45
    }
    end_request(req->dev);
ffff80000080cf09:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cf0d:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080cf10:	0f b7 d2             	movzx  edx,dx
ffff80000080cf13:	66 89 55 d6          	mov    WORD PTR [rbp-0x2a],dx
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:64
    int major=BLKDEV_MAJOR(dev);
ffff80000080cf17:	0f b7 55 d6          	movzx  edx,WORD PTR [rbp-0x2a]
ffff80000080cf1b:	c1 fa 04             	sar    edx,0x4
ffff80000080cf1e:	83 e2 0f             	and    edx,0xf
ffff80000080cf21:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    blk_devs[major].current_request->dev=-1;
ffff80000080cf24:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080cf2b:	ff ff ff 
ffff80000080cf2e:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080cf32:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080cf35:	48 63 d2             	movsxd rdx,edx
ffff80000080cf38:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cf3c:	48 01 ca             	add    rdx,rcx
ffff80000080cf3f:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080cf43:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080cf48:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080cf4f:	ff ff ff 
ffff80000080cf52:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080cf56:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080cf59:	48 63 d2             	movsxd rdx,edx
ffff80000080cf5c:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cf60:	48 01 ca             	add    rdx,rcx
ffff80000080cf63:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080cf67:	48 8b 52 32          	mov    rdx,QWORD PTR [rdx+0x32]
ffff80000080cf6b:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080cf72:	ff ff ff 
ffff80000080cf75:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080cf79:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
ffff80000080cf7c:	48 63 c9             	movsxd rcx,ecx
ffff80000080cf7f:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080cf83:	48 01 f1             	add    rcx,rsi
ffff80000080cf86:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
}
ffff80000080cf8a:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:46
    ramdisk_do_req(blk_devs[dev_ramdisk].current_request);
ffff80000080cf8b:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080cf92:	ff ff ff 
ffff80000080cf95:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cf99:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080cf9b:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080cfa2:	ff ff ff 
ffff80000080cfa5:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080cfa9:	48 63 d2             	movsxd rdx,edx
ffff80000080cfac:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cfb0:	48 01 ca             	add    rdx,rcx
ffff80000080cfb3:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080cfb7:	48 89 d7             	mov    rdi,rdx
ffff80000080cfba:	48 ba 39 f2 ee ff ff 	movabs rdx,0xffffffffffeef239
ffff80000080cfc1:	ff ff ff 
ffff80000080cfc4:	48 8d 04 10          	lea    rax,[rax+rdx*1]
ffff80000080cfc8:	ff d0                	call   rax
ffff80000080cfca:	eb 01                	jmp    ffff80000080cfcd <ramdisk_do_req+0x23c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:24
        return;
ffff80000080cfcc:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:47
}
ffff80000080cfcd:	c9                   	leave  
ffff80000080cfce:	c3                   	ret    

ffff80000080cfcf <init_ramdisk>:
init_ramdisk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:48
void init_ramdisk(){
ffff80000080cfcf:	f3 0f 1e fa          	endbr64 
ffff80000080cfd3:	55                   	push   rbp
ffff80000080cfd4:	48 89 e5             	mov    rbp,rsp
ffff80000080cfd7:	41 57                	push   r15
ffff80000080cfd9:	41 54                	push   r12
ffff80000080cfdb:	53                   	push   rbx
ffff80000080cfdc:	48 83 ec 18          	sub    rsp,0x18
ffff80000080cfe0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cfe0 <init_ramdisk+0x11>
ffff80000080cfe7:	49 bb 78 0b 11 00 00 	movabs r11,0x110b78
ffff80000080cfee:	00 00 00 
ffff80000080cff1:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:50
    //初始化ramdisk，在/dev下创建一个ram
    ramdisk_base= KNL_BASE+0x81000000;//(char *) kmallocat(0, 100);
ffff80000080cff4:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080cffb:	ff ff ff 
ffff80000080cffe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d002:	48 be 00 00 00 81 00 	movabs rsi,0xffff800081000000
ffff80000080d009:	80 ff ff 
ffff80000080d00c:	48 89 30             	mov    QWORD PTR [rax],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:51
    if(ramdisk_base==-1){
ffff80000080d00f:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080d016:	ff ff ff 
ffff80000080d019:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d01d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d020:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
ffff80000080d024:	75 2d                	jne    ffff80000080d053 <init_ramdisk+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:52
        comprintf("failed to init ramdisk.\n");
ffff80000080d026:	48 b8 4a d8 ff ff ff 	movabs rax,0xffffffffffffd84a
ffff80000080d02d:	ff ff ff 
ffff80000080d030:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d034:	48 89 c7             	mov    rdi,rax
ffff80000080d037:	49 89 df             	mov    r15,rbx
ffff80000080d03a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d03f:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff80000080d046:	ff ff ff 
ffff80000080d049:	48 01 da             	add    rdx,rbx
ffff80000080d04c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:53
        return;
ffff80000080d04e:	e9 a3 01 00 00       	jmp    ffff80000080d1f6 <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:55
    }
    ramdisk_size= (char*)_binary_rd_img_end - (char*)_binary_rd_img_start;//PAGE_4K_SIZE*100;
ffff80000080d053:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff80000080d05a:	ff ff ff 
ffff80000080d05d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d061:	48 89 c2             	mov    rdx,rax
ffff80000080d064:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080d06b:	ff ff ff 
ffff80000080d06e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d072:	48 29 c2             	sub    rdx,rax
ffff80000080d075:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff80000080d07c:	ff ff ff 
ffff80000080d07f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d083:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:56
    if((dev_ramdisk=reg_blkdev(&bd_ramdisk))<0){
ffff80000080d086:	48 b8 a8 ff ff ff ff 	movabs rax,0xffffffffffffffa8
ffff80000080d08d:	ff ff ff 
ffff80000080d090:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d094:	48 89 c7             	mov    rdi,rax
ffff80000080d097:	49 89 df             	mov    r15,rbx
ffff80000080d09a:	48 b8 a9 f6 ee ff ff 	movabs rax,0xffffffffffeef6a9
ffff80000080d0a1:	ff ff ff 
ffff80000080d0a4:	48 01 d8             	add    rax,rbx
ffff80000080d0a7:	ff d0                	call   rax
ffff80000080d0a9:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080d0b0:	ff ff ff 
ffff80000080d0b3:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d0b7:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080d0b9:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff80000080d0c0:	ff ff ff 
ffff80000080d0c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d0c7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d0c9:	85 c0                	test   eax,eax
ffff80000080d0cb:	79 2d                	jns    ffff80000080d0fa <init_ramdisk+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:57
        comprintf("no place for more blkdev.\n");
ffff80000080d0cd:	48 b8 63 d8 ff ff ff 	movabs rax,0xffffffffffffd863
ffff80000080d0d4:	ff ff ff 
ffff80000080d0d7:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d0db:	48 89 c7             	mov    rdi,rax
ffff80000080d0de:	49 89 df             	mov    r15,rbx
ffff80000080d0e1:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d0e6:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff80000080d0ed:	ff ff ff 
ffff80000080d0f0:	48 01 da             	add    rdx,rbx
ffff80000080d0f3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58
        return;
ffff80000080d0f5:	e9 fc 00 00 00       	jmp    ffff80000080d1f6 <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60
    }
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080d0fa:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080d101:	e9 b8 00 00 00       	jmp    ffff80000080d1be <init_ramdisk+0x1ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:61 (discriminator 3)
        smmap(pmalloc(),ramdisk_base+i*PAGE_4K_SIZE,PAGE_PRESENT|PAGE_RWX,PML4_ADDR);
ffff80000080d106:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080d10d:	ff ff ff 
ffff80000080d110:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d114:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d117:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d11a:	c1 e0 0c             	shl    eax,0xc
ffff80000080d11d:	48 98                	cdqe   
ffff80000080d11f:	48 01 d0             	add    rax,rdx
ffff80000080d122:	49 89 c4             	mov    r12,rax
ffff80000080d125:	49 89 df             	mov    r15,rbx
ffff80000080d128:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d12d:	48 ba 8c 50 ee ff ff 	movabs rdx,0xffffffffffee508c
ffff80000080d134:	ff ff ff 
ffff80000080d137:	48 01 da             	add    rdx,rbx
ffff80000080d13a:	ff d2                	call   rdx
ffff80000080d13c:	48 89 c7             	mov    rdi,rax
ffff80000080d13f:	48 b8 00 10 10 00 00 	movabs rax,0xffff800000101000
ffff80000080d146:	80 ff ff 
ffff80000080d149:	48 89 c1             	mov    rcx,rax
ffff80000080d14c:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080d151:	4c 89 e6             	mov    rsi,r12
ffff80000080d154:	49 89 df             	mov    r15,rbx
ffff80000080d157:	48 b8 a1 3f ee ff ff 	movabs rax,0xffffffffffee3fa1
ffff80000080d15e:	ff ff ff 
ffff80000080d161:	48 01 d8             	add    rax,rbx
ffff80000080d164:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:63 (discriminator 3)
        //解压img里面的test程序
        memcpy(ramdisk_base+i*PAGE_4K_SIZE, _binary_rd_img_start+i*PAGE_4K_SIZE,PAGE_4K_SIZE);
ffff80000080d166:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d169:	c1 e0 0c             	shl    eax,0xc
ffff80000080d16c:	48 63 d0             	movsxd rdx,eax
ffff80000080d16f:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080d176:	ff ff ff 
ffff80000080d179:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d17d:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080d181:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080d188:	ff ff ff 
ffff80000080d18b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d18f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d192:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d195:	c1 e0 0c             	shl    eax,0xc
ffff80000080d198:	48 98                	cdqe   
ffff80000080d19a:	48 01 d0             	add    rax,rdx
ffff80000080d19d:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d1a2:	48 89 ce             	mov    rsi,rcx
ffff80000080d1a5:	48 89 c7             	mov    rdi,rax
ffff80000080d1a8:	49 89 df             	mov    r15,rbx
ffff80000080d1ab:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080d1b2:	ff ff ff 
ffff80000080d1b5:	48 01 d8             	add    rax,rbx
ffff80000080d1b8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 3)
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080d1ba:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 1)
ffff80000080d1be:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d1c1:	48 63 d0             	movsxd rdx,eax
ffff80000080d1c4:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff80000080d1cb:	ff ff ff 
ffff80000080d1ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d1d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d1d5:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080d1db:	48 8d 88 ff 0f 00 00 	lea    rcx,[rax+0xfff]
ffff80000080d1e2:	48 85 c0             	test   rax,rax
ffff80000080d1e5:	48 0f 48 c1          	cmovs  rax,rcx
ffff80000080d1e9:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080d1ed:	48 39 c2             	cmp    rdx,rax
ffff80000080d1f0:	0f 8c 10 ff ff ff    	jl     ffff80000080d106 <init_ramdisk+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:68

    }

    
}
ffff80000080d1f6:	48 83 c4 18          	add    rsp,0x18
ffff80000080d1fa:	5b                   	pop    rbx
ffff80000080d1fb:	41 5c                	pop    r12
ffff80000080d1fd:	41 5f                	pop    r15
ffff80000080d1ff:	5d                   	pop    rbp
ffff80000080d200:	c3                   	ret    

ffff80000080d201 <reg_blkdev>:
reg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:5
#include <blk_dev.h>
#include <errno.h>
struct blk_dev blk_devs[MAX_BLKDEVS];
struct request requests[MAX_REQUESTS];
int reg_blkdev(struct blk_dev* dev){
ffff80000080d201:	f3 0f 1e fa          	endbr64 
ffff80000080d205:	55                   	push   rbp
ffff80000080d206:	48 89 e5             	mov    rbp,rsp
ffff80000080d209:	53                   	push   rbx
ffff80000080d20a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d20a <reg_blkdev+0x9>
ffff80000080d211:	49 bb 4e 09 11 00 00 	movabs r11,0x11094e
ffff80000080d218:	00 00 00 
ffff80000080d21b:	4c 01 d8             	add    rax,r11
ffff80000080d21e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080d222:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080d229:	e9 80 00 00 00       	jmp    ffff80000080d2ae <reg_blkdev+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080d22e:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d235:	ff ff ff 
ffff80000080d238:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d23c:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d23f:	48 63 d2             	movsxd rdx,edx
ffff80000080d242:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d246:	48 01 ca             	add    rdx,rcx
ffff80000080d249:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d24c:	48 85 d2             	test   rdx,rdx
ffff80000080d24f:	75 58                	jne    ffff80000080d2a9 <reg_blkdev+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:8
        blk_devs[i]=*dev;
ffff80000080d251:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d258:	ff ff ff 
ffff80000080d25b:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d25f:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d262:	48 63 d2             	movsxd rdx,edx
ffff80000080d265:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d269:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080d26d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d271:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080d274:	48 8b 5a 08          	mov    rbx,QWORD PTR [rdx+0x8]
ffff80000080d278:	48 89 0e             	mov    QWORD PTR [rsi],rcx
ffff80000080d27b:	48 89 5e 08          	mov    QWORD PTR [rsi+0x8],rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:9
        blk_devs[i].current_request=NULL;
ffff80000080d27f:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d286:	ff ff ff 
ffff80000080d289:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d28d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080d290:	48 98                	cdqe   
ffff80000080d292:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d296:	48 01 d0             	add    rax,rdx
ffff80000080d299:	48 83 c0 08          	add    rax,0x8
ffff80000080d29d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:10
        return i;
ffff80000080d2a4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080d2a7:	eb 14                	jmp    ffff80000080d2bd <reg_blkdev+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080d2a9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080d2aa:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6 (discriminator 1)
ffff80000080d2ae:	83 7d f4 0b          	cmp    DWORD PTR [rbp-0xc],0xb
ffff80000080d2b2:	0f 8e 76 ff ff ff    	jle    ffff80000080d22e <reg_blkdev+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:12
    }
    return -ENOMEM;
ffff80000080d2b8:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:13
}
ffff80000080d2bd:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080d2c1:	c9                   	leave  
ffff80000080d2c2:	c3                   	ret    

ffff80000080d2c3 <unreg_blkdev>:
unreg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:14
int unreg_blkdev(unsigned short dev){
ffff80000080d2c3:	f3 0f 1e fa          	endbr64 
ffff80000080d2c7:	55                   	push   rbp
ffff80000080d2c8:	48 89 e5             	mov    rbp,rsp
ffff80000080d2cb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d2cb <unreg_blkdev+0x8>
ffff80000080d2d2:	49 bb 8d 08 11 00 00 	movabs r11,0x11088d
ffff80000080d2d9:	00 00 00 
ffff80000080d2dc:	4c 01 d8             	add    rax,r11
ffff80000080d2df:	89 fa                	mov    edx,edi
ffff80000080d2e1:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:15
    if(blk_devs[dev].current_request)
ffff80000080d2e5:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080d2e9:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d2f0:	ff ff ff 
ffff80000080d2f3:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d2f7:	48 63 d2             	movsxd rdx,edx
ffff80000080d2fa:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d2fe:	48 01 ca             	add    rdx,rcx
ffff80000080d301:	48 83 c2 08          	add    rdx,0x8
ffff80000080d305:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d308:	48 85 d2             	test   rdx,rdx
ffff80000080d30b:	74 07                	je     ffff80000080d314 <unreg_blkdev+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:16
        return -EBUSY;//设备还有没完成的请求
ffff80000080d30d:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
ffff80000080d312:	eb 23                	jmp    ffff80000080d337 <unreg_blkdev+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:17
    blk_devs[dev].do_request=0;//清除
ffff80000080d314:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080d318:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d31f:	ff ff ff 
ffff80000080d322:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d326:	48 63 c2             	movsxd rax,edx
ffff80000080d329:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d32d:	48 01 c8             	add    rax,rcx
ffff80000080d330:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:18
}
ffff80000080d337:	5d                   	pop    rbp
ffff80000080d338:	c3                   	ret    

ffff80000080d339 <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:19
int make_request(unsigned short dev,int cmd,unsigned long sector, unsigned long count,char * buffer){
ffff80000080d339:	f3 0f 1e fa          	endbr64 
ffff80000080d33d:	55                   	push   rbp
ffff80000080d33e:	48 89 e5             	mov    rbp,rsp
ffff80000080d341:	48 83 ec 40          	sub    rsp,0x40
ffff80000080d345:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d345 <make_request+0xc>
ffff80000080d34c:	49 bb 13 08 11 00 00 	movabs r11,0x110813
ffff80000080d353:	00 00 00 
ffff80000080d356:	4c 01 d8             	add    rax,r11
ffff80000080d359:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d35c:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff80000080d360:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffff80000080d364:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
ffff80000080d368:	89 fa                	mov    edx,edi
ffff80000080d36a:	66 89 55 dc          	mov    WORD PTR [rbp-0x24],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:20
    struct blk_dev* d=&blk_devs[BLKDEV_MAJOR(dev)];
ffff80000080d36e:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d372:	c1 fa 04             	sar    edx,0x4
ffff80000080d375:	83 e2 0f             	and    edx,0xf
ffff80000080d378:	48 63 d2             	movsxd rdx,edx
ffff80000080d37b:	48 89 d1             	mov    rcx,rdx
ffff80000080d37e:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080d382:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d389:	ff ff ff 
ffff80000080d38c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d390:	48 01 ca             	add    rdx,rcx
ffff80000080d393:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:21
    if(!d->do_request)
ffff80000080d397:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d39b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d39e:	48 85 d2             	test   rdx,rdx
ffff80000080d3a1:	75 0a                	jne    ffff80000080d3ad <make_request+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:22
        return -ENODEV;//没有这个设备
ffff80000080d3a3:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080d3a8:	e9 5f 01 00 00       	jmp    ffff80000080d50c <make_request+0x1d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:24
    //找一个空的请求
    struct request* req=NULL;
ffff80000080d3ad:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d3b4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d3b5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080d3bc:	eb 49                	jmp    ffff80000080d407 <make_request+0xce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:26
        if(requests[i].dev==(unsigned short)-1){
ffff80000080d3be:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff80000080d3c5:	ff ff ff 
ffff80000080d3c8:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d3cc:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d3cf:	48 63 d2             	movsxd rdx,edx
ffff80000080d3d2:	48 6b d2 3a          	imul   rdx,rdx,0x3a
ffff80000080d3d6:	48 01 ca             	add    rdx,rcx
ffff80000080d3d9:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080d3dc:	66 83 fa ff          	cmp    dx,0xffff
ffff80000080d3e0:	75 21                	jne    ffff80000080d403 <make_request+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:27
            req=requests+i;
ffff80000080d3e2:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d3e5:	48 63 d2             	movsxd rdx,edx
ffff80000080d3e8:	48 6b ca 3a          	imul   rcx,rdx,0x3a
ffff80000080d3ec:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff80000080d3f3:	ff ff ff 
ffff80000080d3f6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d3fa:	48 01 ca             	add    rdx,rcx
ffff80000080d3fd:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:28
            break;
ffff80000080d401:	eb 0a                	jmp    ffff80000080d40d <make_request+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 2)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d403:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 1)
ffff80000080d407:	83 7d f4 3f          	cmp    DWORD PTR [rbp-0xc],0x3f
ffff80000080d40b:	7e b1                	jle    ffff80000080d3be <make_request+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:32
        }
    }
    //下面的处理不太好。感觉最好是等到有空位置为止。
    if(!req)
ffff80000080d40d:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080d412:	75 0a                	jne    ffff80000080d41e <make_request+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:33
        return -ENOMEM;//没有空的请求位置。
ffff80000080d414:	b8 cf ff ff ff       	mov    eax,0xffffffcf
ffff80000080d419:	e9 ee 00 00 00       	jmp    ffff80000080d50c <make_request+0x1d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:38
    /*
    检查有没有请求正在运行，有的话接到后面，没有的话直接接上去，前面请求完成之后顺着链表下一个，
    这样就能保证所有请求都可以被访问到。
    */
    req->dev=dev;
ffff80000080d41e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d422:	0f b7 4d dc          	movzx  ecx,WORD PTR [rbp-0x24]
ffff80000080d426:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:39
    req->cmd=cmd;
ffff80000080d429:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d42d:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080d430:	89 4a 02             	mov    DWORD PTR [rdx+0x2],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:40
    req->buffer=buffer;
ffff80000080d433:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d437:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080d43b:	48 89 4a 22          	mov    QWORD PTR [rdx+0x22],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:41
    req->count=count;
ffff80000080d43f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d443:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080d447:	48 89 4a 1a          	mov    QWORD PTR [rdx+0x1a],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:42
    req->next=NULL;
ffff80000080d44b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d44f:	48 c7 42 32 00 00 00 	mov    QWORD PTR [rdx+0x32],0x0
ffff80000080d456:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:43
    req->nr_sectors=TO_BLKN(count);
ffff80000080d457:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d45b:	48 89 d1             	mov    rcx,rdx
ffff80000080d45e:	48 c1 e9 0c          	shr    rcx,0xc
ffff80000080d462:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d466:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff80000080d46c:	48 01 ca             	add    rdx,rcx
ffff80000080d46f:	48 85 d2             	test   rdx,rdx
ffff80000080d472:	0f 95 c2             	setne  dl
ffff80000080d475:	0f b6 ca             	movzx  ecx,dl
ffff80000080d478:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d47c:	48 89 4a 12          	mov    QWORD PTR [rdx+0x12],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:44
    req->sector=sector;
ffff80000080d480:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d484:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080d488:	48 89 4a 0a          	mov    QWORD PTR [rdx+0xa],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:45
    req->waiting=current;
ffff80000080d48c:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080d493:	ff ff ff 
ffff80000080d496:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d49a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d49d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d4a1:	48 89 50 2a          	mov    QWORD PTR [rax+0x2a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:47
    //这里可能不需要阻塞进程，有的设备不需要阻塞。    
    if(!d->current_request)
ffff80000080d4a5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d4a9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d4ad:	48 85 c0             	test   rax,rax
ffff80000080d4b0:	75 22                	jne    ffff80000080d4d4 <make_request+0x19b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:49
    {
        d->current_request=req;
ffff80000080d4b2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d4b6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d4ba:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:50
        d->do_request(d->current_request);
ffff80000080d4be:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d4c2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d4c5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d4c9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d4cd:	48 89 c7             	mov    rdi,rax
ffff80000080d4d0:	ff d2                	call   rdx
ffff80000080d4d2:	eb 33                	jmp    ffff80000080d507 <make_request+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:52
    }else{
        struct request* rp=d->current_request;
ffff80000080d4d4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d4d8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d4dc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53
        for(;rp->next;rp=rp->next);
ffff80000080d4e0:	eb 0c                	jmp    ffff80000080d4ee <make_request+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 2)
ffff80000080d4e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d4e6:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080d4ea:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 1)
ffff80000080d4ee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d4f2:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080d4f6:	48 85 c0             	test   rax,rax
ffff80000080d4f9:	75 e7                	jne    ffff80000080d4e2 <make_request+0x1a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:54
        rp->next=req;
ffff80000080d4fb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d4ff:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d503:	48 89 50 32          	mov    QWORD PTR [rax+0x32],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:56
    }
    return 1;
ffff80000080d507:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:57
}
ffff80000080d50c:	c9                   	leave  
ffff80000080d50d:	c3                   	ret    

ffff80000080d50e <init_blkdev>:
init_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:58
void init_blkdev(void){
ffff80000080d50e:	f3 0f 1e fa          	endbr64 
ffff80000080d512:	55                   	push   rbp
ffff80000080d513:	48 89 e5             	mov    rbp,rsp
ffff80000080d516:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d516 <init_blkdev+0x8>
ffff80000080d51d:	49 bb 42 06 11 00 00 	movabs r11,0x110642
ffff80000080d524:	00 00 00 
ffff80000080d527:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d52a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080d531:	eb 24                	jmp    ffff80000080d557 <init_blkdev+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:60 (discriminator 3)
        requests[i].dev=-1;
ffff80000080d533:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff80000080d53a:	ff ff ff 
ffff80000080d53d:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d541:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d544:	48 63 d2             	movsxd rdx,edx
ffff80000080d547:	48 6b d2 3a          	imul   rdx,rdx,0x3a
ffff80000080d54b:	48 01 ca             	add    rdx,rcx
ffff80000080d54e:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 3)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d553:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 1)
ffff80000080d557:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff80000080d55b:	7e d6                	jle    ffff80000080d533 <init_blkdev+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:62
    }
ffff80000080d55d:	90                   	nop
ffff80000080d55e:	90                   	nop
ffff80000080d55f:	5d                   	pop    rbp
ffff80000080d560:	c3                   	ret    

ffff80000080d561 <init_blkbuf>:
init_blkbuf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:9
#include <errno.h>
#include <memory.h>
buffer_head l_buffer_heads[MAX_BUFFERHEADS];
//这个存储的是各个块设备映射的缓冲区链表中的头
buffer_head* l_blk_bh_heads[MAX_BLKDEVS];
void init_blkbuf(){
ffff80000080d561:	f3 0f 1e fa          	endbr64 
ffff80000080d565:	55                   	push   rbp
ffff80000080d566:	48 89 e5             	mov    rbp,rsp
ffff80000080d569:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d569 <init_blkbuf+0x8>
ffff80000080d570:	49 bb ef 05 11 00 00 	movabs r11,0x1105ef
ffff80000080d577:	00 00 00 
ffff80000080d57a:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d57d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080d584:	eb 44                	jmp    ffff80000080d5ca <init_blkbuf+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:11 (discriminator 3)
        l_buffer_heads[i].dev=-1;
ffff80000080d586:	48 ba e8 fd ff ff ff 	movabs rdx,0xfffffffffffffde8
ffff80000080d58d:	ff ff ff 
ffff80000080d590:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d594:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d597:	48 63 d2             	movsxd rdx,edx
ffff80000080d59a:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080d59e:	48 01 ca             	add    rdx,rcx
ffff80000080d5a1:	48 83 c2 10          	add    rdx,0x10
ffff80000080d5a5:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:12 (discriminator 3)
        l_blk_bh_heads[i]=NULL;
ffff80000080d5aa:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080d5b1:	ff ff ff 
ffff80000080d5b4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d5b8:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080d5bb:	48 63 c9             	movsxd rcx,ecx
ffff80000080d5be:	48 c7 04 ca 00 00 00 	mov    QWORD PTR [rdx+rcx*8],0x0
ffff80000080d5c5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 3)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d5c6:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 1)
ffff80000080d5ca:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff80000080d5ce:	7e b6                	jle    ffff80000080d586 <init_blkbuf+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:14
    }
}
ffff80000080d5d0:	90                   	nop
ffff80000080d5d1:	90                   	nop
ffff80000080d5d2:	5d                   	pop    rbp
ffff80000080d5d3:	c3                   	ret    

ffff80000080d5d4 <bget>:
bget():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:15
buffer_head *bget(){
ffff80000080d5d4:	f3 0f 1e fa          	endbr64 
ffff80000080d5d8:	55                   	push   rbp
ffff80000080d5d9:	48 89 e5             	mov    rbp,rsp
ffff80000080d5dc:	41 57                	push   r15
ffff80000080d5de:	53                   	push   rbx
ffff80000080d5df:	48 83 ec 10          	sub    rsp,0x10
ffff80000080d5e3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d5e3 <bget+0xf>
ffff80000080d5ea:	49 bb 75 05 11 00 00 	movabs r11,0x110575
ffff80000080d5f1:	00 00 00 
ffff80000080d5f4:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d5f7:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080d5fe:	e9 a2 00 00 00       	jmp    ffff80000080d6a5 <bget+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:17
        if(l_buffer_heads[i].dev==(unsigned short)-1)
ffff80000080d603:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d60a:	ff ff ff 
ffff80000080d60d:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080d611:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d614:	48 98                	cdqe   
ffff80000080d616:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d61a:	48 01 d0             	add    rax,rdx
ffff80000080d61d:	48 83 c0 10          	add    rax,0x10
ffff80000080d621:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080d624:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080d628:	75 77                	jne    ffff80000080d6a1 <bget+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:19
        {
            l_buffer_heads[i].data=kmalloc();
ffff80000080d62a:	49 89 df             	mov    r15,rbx
ffff80000080d62d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d632:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080d639:	ff ff ff 
ffff80000080d63c:	48 01 da             	add    rdx,rbx
ffff80000080d63f:	ff d2                	call   rdx
ffff80000080d641:	48 89 c2             	mov    rdx,rax
ffff80000080d644:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d64b:	ff ff ff 
ffff80000080d64e:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080d652:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d655:	48 98                	cdqe   
ffff80000080d657:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d65b:	48 01 c8             	add    rax,rcx
ffff80000080d65e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:20
            l_buffer_heads[i].count=0;
ffff80000080d661:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d668:	ff ff ff 
ffff80000080d66b:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080d66f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d672:	48 98                	cdqe   
ffff80000080d674:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d678:	48 01 d0             	add    rax,rdx
ffff80000080d67b:	48 83 c0 14          	add    rax,0x14
ffff80000080d67f:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:21
            return l_buffer_heads+i;
ffff80000080d682:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d685:	48 98                	cdqe   
ffff80000080d687:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d68b:	48 89 c2             	mov    rdx,rax
ffff80000080d68e:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d695:	ff ff ff 
ffff80000080d698:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d69c:	48 01 d0             	add    rax,rdx
ffff80000080d69f:	eb 13                	jmp    ffff80000080d6b4 <bget+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 2)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d6a1:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 1)
ffff80000080d6a5:	83 7d ec 7f          	cmp    DWORD PTR [rbp-0x14],0x7f
ffff80000080d6a9:	0f 8e 54 ff ff ff    	jle    ffff80000080d603 <bget+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:25
        }
    }
    //errno = -ENOBUF
    return NULL;
ffff80000080d6af:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:26
}
ffff80000080d6b4:	48 83 c4 10          	add    rsp,0x10
ffff80000080d6b8:	5b                   	pop    rbx
ffff80000080d6b9:	41 5f                	pop    r15
ffff80000080d6bb:	5d                   	pop    rbp
ffff80000080d6bc:	c3                   	ret    

ffff80000080d6bd <get_block>:
get_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:28

buffer_head *get_block(unsigned short dev,int blocknr){
ffff80000080d6bd:	f3 0f 1e fa          	endbr64 
ffff80000080d6c1:	55                   	push   rbp
ffff80000080d6c2:	48 89 e5             	mov    rbp,rsp
ffff80000080d6c5:	41 57                	push   r15
ffff80000080d6c7:	53                   	push   rbx
ffff80000080d6c8:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d6cc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d6cc <get_block+0xf>
ffff80000080d6d3:	49 bb 8c 04 11 00 00 	movabs r11,0x11048c
ffff80000080d6da:	00 00 00 
ffff80000080d6dd:	4c 01 db             	add    rbx,r11
ffff80000080d6e0:	89 f8                	mov    eax,edi
ffff80000080d6e2:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d6e5:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:29
    buffer_head *bh=l_blk_bh_heads[BLKDEV_MAJOR(dev)];
ffff80000080d6e9:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d6ed:	c1 f8 04             	sar    eax,0x4
ffff80000080d6f0:	83 e0 0f             	and    eax,0xf
ffff80000080d6f3:	89 c2                	mov    edx,eax
ffff80000080d6f5:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080d6fc:	ff ff ff 
ffff80000080d6ff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d703:	48 63 d2             	movsxd rdx,edx
ffff80000080d706:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080d70a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:30
    if(!bh){
ffff80000080d70e:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d713:	75 7c                	jne    ffff80000080d791 <get_block+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:32
        //这个设备没有任何的缓冲区
        bh=bget();
ffff80000080d715:	49 89 df             	mov    r15,rbx
ffff80000080d718:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d71d:	48 ba 7c fa ee ff ff 	movabs rdx,0xffffffffffeefa7c
ffff80000080d724:	ff ff ff 
ffff80000080d727:	48 01 da             	add    rdx,rbx
ffff80000080d72a:	ff d2                	call   rdx
ffff80000080d72c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:33
        if(!bh){
ffff80000080d730:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d735:	75 0a                	jne    ffff80000080d741 <get_block+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:35
            //errno=-ENOBUFS
            return NULL;
ffff80000080d737:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d73c:	e9 f0 00 00 00       	jmp    ffff80000080d831 <get_block+0x174>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:37
        }
        bh->dev=dev;
ffff80000080d741:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d745:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d749:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:38
        bh->blocknr=blocknr;
ffff80000080d74d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d750:	48 63 d0             	movsxd rdx,eax
ffff80000080d753:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d757:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:39
        l_blk_bh_heads[BLKDEV_MAJOR(dev)]=bh;
ffff80000080d75b:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d75f:	c1 f8 04             	sar    eax,0x4
ffff80000080d762:	83 e0 0f             	and    eax,0xf
ffff80000080d765:	89 c2                	mov    edx,eax
ffff80000080d767:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080d76e:	ff ff ff 
ffff80000080d771:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d775:	48 63 d2             	movsxd rdx,edx
ffff80000080d778:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d77c:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffff80000080d780:	e9 96 00 00 00       	jmp    ffff80000080d81b <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 3)
    }else{
        for(;bh->next&&bh->blocknr!=blocknr;bh=bh->next);
ffff80000080d785:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d789:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d78d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 1)
ffff80000080d791:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d795:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d799:	48 85 c0             	test   rax,rax
ffff80000080d79c:	74 12                	je     ffff80000080d7b0 <get_block+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 2)
ffff80000080d79e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7a2:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080d7a6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d7a9:	48 98                	cdqe   
ffff80000080d7ab:	48 39 c2             	cmp    rdx,rax
ffff80000080d7ae:	75 d5                	jne    ffff80000080d785 <get_block+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:42
        if(bh->blocknr!=blocknr)
ffff80000080d7b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7b4:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080d7b8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d7bb:	48 98                	cdqe   
ffff80000080d7bd:	48 39 c2             	cmp    rdx,rax
ffff80000080d7c0:	74 59                	je     ffff80000080d81b <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:46
        {
            //这块数据没有缓冲
            //这个时候肯定处于链表最后一个了
            bh->next=bget();
ffff80000080d7c2:	49 89 df             	mov    r15,rbx
ffff80000080d7c5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d7ca:	48 ba 7c fa ee ff ff 	movabs rdx,0xffffffffffeefa7c
ffff80000080d7d1:	ff ff ff 
ffff80000080d7d4:	48 01 da             	add    rdx,rbx
ffff80000080d7d7:	ff d2                	call   rdx
ffff80000080d7d9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d7dd:	48 89 42 28          	mov    QWORD PTR [rdx+0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:47
            buffer_head *bhn=bh->next;
ffff80000080d7e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7e5:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d7e9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:48
            bhn->prev=bh;
ffff80000080d7ed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d7f1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d7f5:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:49
            bh=bhn;
ffff80000080d7f9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d7fd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:50
            bh->dev=dev;
ffff80000080d801:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d805:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d809:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:51
            bh->blocknr=blocknr;
ffff80000080d80d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d810:	48 63 d0             	movsxd rdx,eax
ffff80000080d813:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d817:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:55
        }
    }
    //TODO 等待缓冲解锁
    bh->count++;
ffff80000080d81b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d81f:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080d823:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080d826:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d82a:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:56
    return bh;
ffff80000080d82d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:57
}
ffff80000080d831:	48 83 c4 20          	add    rsp,0x20
ffff80000080d835:	5b                   	pop    rbx
ffff80000080d836:	41 5f                	pop    r15
ffff80000080d838:	5d                   	pop    rbp
ffff80000080d839:	c3                   	ret    

ffff80000080d83a <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:59
//从指定的块设备中读取一块数据，然后返回这块数据。
buffer_head* bread(unsigned short dev,int blkn){
ffff80000080d83a:	f3 0f 1e fa          	endbr64 
ffff80000080d83e:	55                   	push   rbp
ffff80000080d83f:	48 89 e5             	mov    rbp,rsp
ffff80000080d842:	41 57                	push   r15
ffff80000080d844:	53                   	push   rbx
ffff80000080d845:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d849:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d849 <bread+0xf>
ffff80000080d850:	49 bb 0f 03 11 00 00 	movabs r11,0x11030f
ffff80000080d857:	00 00 00 
ffff80000080d85a:	4c 01 db             	add    rbx,r11
ffff80000080d85d:	89 f8                	mov    eax,edi
ffff80000080d85f:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d862:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:60
    if(!blk_devs[BLKDEV_MAJOR(dev)].do_request)
ffff80000080d866:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d86a:	c1 f8 04             	sar    eax,0x4
ffff80000080d86d:	83 e0 0f             	and    eax,0xf
ffff80000080d870:	89 c2                	mov    edx,eax
ffff80000080d872:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080d879:	ff ff ff 
ffff80000080d87c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080d880:	48 63 c2             	movsxd rax,edx
ffff80000080d883:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d887:	48 01 c8             	add    rax,rcx
ffff80000080d88a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d88d:	48 85 c0             	test   rax,rax
ffff80000080d890:	75 07                	jne    ffff80000080d899 <bread+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:61
        return NULL;
ffff80000080d892:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d897:	eb 7a                	jmp    ffff80000080d913 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:62
    buffer_head *bh=get_block(dev,blkn);
ffff80000080d899:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d89d:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080d8a0:	89 d6                	mov    esi,edx
ffff80000080d8a2:	89 c7                	mov    edi,eax
ffff80000080d8a4:	49 89 df             	mov    r15,rbx
ffff80000080d8a7:	48 b8 65 fb ee ff ff 	movabs rax,0xffffffffffeefb65
ffff80000080d8ae:	ff ff ff 
ffff80000080d8b1:	48 01 d8             	add    rax,rbx
ffff80000080d8b4:	ff d0                	call   rax
ffff80000080d8b6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:63
    if(!bh)
ffff80000080d8ba:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d8bf:	75 07                	jne    ffff80000080d8c8 <bread+0x8e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:64
        return NULL;
ffff80000080d8c1:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d8c6:	eb 4b                	jmp    ffff80000080d913 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:65
    if(bh->uptodate)
ffff80000080d8c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d8cc:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
ffff80000080d8d0:	84 c0                	test   al,al
ffff80000080d8d2:	74 06                	je     ffff80000080d8da <bread+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:66
        return bh;//数据没变，可以直接返回
ffff80000080d8d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d8d8:	eb 39                	jmp    ffff80000080d913 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:69
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(dev,BLKDEV_REQ_READ,blkn*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080d8da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d8de:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080d8e1:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d8e4:	c1 e0 03             	shl    eax,0x3
ffff80000080d8e7:	48 63 d0             	movsxd rdx,eax
ffff80000080d8ea:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d8ee:	49 89 c8             	mov    r8,rcx
ffff80000080d8f1:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080d8f6:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d8fb:	89 c7                	mov    edi,eax
ffff80000080d8fd:	49 89 df             	mov    r15,rbx
ffff80000080d900:	48 b8 e1 f7 ee ff ff 	movabs rax,0xffffffffffeef7e1
ffff80000080d907:	ff ff ff 
ffff80000080d90a:	48 01 d8             	add    rax,rbx
ffff80000080d90d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:71
    //TODO 等待读取完成
    return bh;
ffff80000080d90f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:72
}
ffff80000080d913:	48 83 c4 20          	add    rsp,0x20
ffff80000080d917:	5b                   	pop    rbx
ffff80000080d918:	41 5f                	pop    r15
ffff80000080d91a:	5d                   	pop    rbp
ffff80000080d91b:	c3                   	ret    

ffff80000080d91c <bwrite>:
bwrite():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:77
/*
向缓冲区写入数据。注意缓冲区的大小固定BLOCK_SIZE。
这会使得dirty置位。
*/
int bwrite(buffer_head* bh,char* src,int pos,int count){
ffff80000080d91c:	f3 0f 1e fa          	endbr64 
ffff80000080d920:	55                   	push   rbp
ffff80000080d921:	48 89 e5             	mov    rbp,rsp
ffff80000080d924:	41 57                	push   r15
ffff80000080d926:	48 83 ec 28          	sub    rsp,0x28
ffff80000080d92a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d92a <bwrite+0xe>
ffff80000080d931:	49 bb 2e 02 11 00 00 	movabs r11,0x11022e
ffff80000080d938:	00 00 00 
ffff80000080d93b:	4c 01 d8             	add    rax,r11
ffff80000080d93e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080d942:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d946:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080d949:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:78
    if(!bh)
ffff80000080d94c:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d951:	75 07                	jne    ffff80000080d95a <bwrite+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:79
        return -ENOBUFS;
ffff80000080d953:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080d958:	eb 5d                	jmp    ffff80000080d9b7 <bwrite+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:80
    if (count+pos>BLOCK_SIZE)
ffff80000080d95a:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080d95d:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d960:	01 ca                	add    edx,ecx
ffff80000080d962:	81 fa 00 10 00 00    	cmp    edx,0x1000
ffff80000080d968:	7e 0b                	jle    ffff80000080d975 <bwrite+0x59>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:81
        count=BLOCK_SIZE-pos;//truncate
ffff80000080d96a:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d96f:	2b 55 dc             	sub    edx,DWORD PTR [rbp-0x24]
ffff80000080d972:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:82
    memcpy(bh->data+pos,src,count);
ffff80000080d975:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080d978:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d97c:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff80000080d97f:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff80000080d982:	48 63 c9             	movsxd rcx,ecx
ffff80000080d985:	48 8d 3c 0e          	lea    rdi,[rsi+rcx*1]
ffff80000080d989:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080d98d:	48 89 ce             	mov    rsi,rcx
ffff80000080d990:	49 89 c7             	mov    r15,rax
ffff80000080d993:	48 b9 6c 50 ef ff ff 	movabs rcx,0xffffffffffef506c
ffff80000080d99a:	ff ff ff 
ffff80000080d99d:	48 01 c1             	add    rcx,rax
ffff80000080d9a0:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:83
    bh->dirt=1;
ffff80000080d9a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d9a6:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:84
    bh->uptodate=0;
ffff80000080d9aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d9ae:	c6 40 12 00          	mov    BYTE PTR [rax+0x12],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:85
    return 1;
ffff80000080d9b2:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:86
}
ffff80000080d9b7:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d9bb:	c9                   	leave  
ffff80000080d9bc:	c3                   	ret    

ffff80000080d9bd <bflush>:
bflush():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:90
/*
立即把缓冲区里面的更新应用到块设备上。
*/
int bflush(buffer_head* bh){
ffff80000080d9bd:	f3 0f 1e fa          	endbr64 
ffff80000080d9c1:	55                   	push   rbp
ffff80000080d9c2:	48 89 e5             	mov    rbp,rsp
ffff80000080d9c5:	41 57                	push   r15
ffff80000080d9c7:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d9cb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d9cb <bflush+0xe>
ffff80000080d9d2:	49 bb 8d 01 11 00 00 	movabs r11,0x11018d
ffff80000080d9d9:	00 00 00 
ffff80000080d9dc:	4c 01 d8             	add    rax,r11
ffff80000080d9df:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:91
    if(!blk_devs[bh->dev].do_request)
ffff80000080d9e3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d9e7:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080d9eb:	0f b7 d2             	movzx  edx,dx
ffff80000080d9ee:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d9f5:	ff ff ff 
ffff80000080d9f8:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d9fc:	48 63 d2             	movsxd rdx,edx
ffff80000080d9ff:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080da03:	48 01 ca             	add    rdx,rcx
ffff80000080da06:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080da09:	48 85 d2             	test   rdx,rdx
ffff80000080da0c:	75 07                	jne    ffff80000080da15 <bflush+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:92
        return -ENODEV;
ffff80000080da0e:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080da13:	eb 5a                	jmp    ffff80000080da6f <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:93
    if(!bh->dirt)
ffff80000080da15:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da19:	0f b6 52 13          	movzx  edx,BYTE PTR [rdx+0x13]
ffff80000080da1d:	84 d2                	test   dl,dl
ffff80000080da1f:	75 07                	jne    ffff80000080da28 <bflush+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:94
        return 1;
ffff80000080da21:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080da26:	eb 47                	jmp    ffff80000080da6f <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:95
    make_request(bh->dev,BLKDEV_REQ_WRITE,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080da28:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da2c:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080da2f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da33:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080da37:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080da3b:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080da3f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080da43:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080da47:	0f b7 f9             	movzx  edi,cx
ffff80000080da4a:	49 89 f0             	mov    r8,rsi
ffff80000080da4d:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080da52:	be 01 00 00 00       	mov    esi,0x1
ffff80000080da57:	49 89 c7             	mov    r15,rax
ffff80000080da5a:	49 b9 e1 f7 ee ff ff 	movabs r9,0xffffffffffeef7e1
ffff80000080da61:	ff ff ff 
ffff80000080da64:	49 01 c1             	add    r9,rax
ffff80000080da67:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:97
    //这个不用等
    return 1;
ffff80000080da6a:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:98
}
ffff80000080da6f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080da73:	c9                   	leave  
ffff80000080da74:	c3                   	ret    

ffff80000080da75 <bdiscard>:
bdiscard():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:100
//丢弃更改。
int bdiscard(buffer_head *bh){
ffff80000080da75:	f3 0f 1e fa          	endbr64 
ffff80000080da79:	55                   	push   rbp
ffff80000080da7a:	48 89 e5             	mov    rbp,rsp
ffff80000080da7d:	41 57                	push   r15
ffff80000080da7f:	48 83 ec 18          	sub    rsp,0x18
ffff80000080da83:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080da83 <bdiscard+0xe>
ffff80000080da8a:	49 bb d5 00 11 00 00 	movabs r11,0x1100d5
ffff80000080da91:	00 00 00 
ffff80000080da94:	4c 01 d8             	add    rax,r11
ffff80000080da97:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:101
    if(bh->dev==-1||!blk_devs[bh->dev].do_request)
ffff80000080da9b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da9f:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080daa3:	0f b7 d2             	movzx  edx,dx
ffff80000080daa6:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080daad:	ff ff ff 
ffff80000080dab0:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080dab4:	48 63 d2             	movsxd rdx,edx
ffff80000080dab7:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080dabb:	48 01 ca             	add    rdx,rcx
ffff80000080dabe:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080dac1:	48 85 d2             	test   rdx,rdx
ffff80000080dac4:	75 07                	jne    ffff80000080dacd <bdiscard+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:102
        return -ENODEV;
ffff80000080dac6:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080dacb:	eb 5a                	jmp    ffff80000080db27 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:104
    
    if(bh->uptodate)
ffff80000080dacd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dad1:	0f b6 52 12          	movzx  edx,BYTE PTR [rdx+0x12]
ffff80000080dad5:	84 d2                	test   dl,dl
ffff80000080dad7:	74 07                	je     ffff80000080dae0 <bdiscard+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:105
        return 1;//数据没变，可以直接返回
ffff80000080dad9:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080dade:	eb 47                	jmp    ffff80000080db27 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:108
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(bh->dev,BLKDEV_REQ_READ,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080dae0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dae4:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080dae7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080daeb:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080daef:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080daf3:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080daf7:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080dafb:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080daff:	0f b7 f9             	movzx  edi,cx
ffff80000080db02:	49 89 f0             	mov    r8,rsi
ffff80000080db05:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080db0a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080db0f:	49 89 c7             	mov    r15,rax
ffff80000080db12:	49 b9 e1 f7 ee ff ff 	movabs r9,0xffffffffffeef7e1
ffff80000080db19:	ff ff ff 
ffff80000080db1c:	49 01 c1             	add    r9,rax
ffff80000080db1f:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:110
    //TODO 等待读取完成
    return 1;
ffff80000080db22:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:111
}
ffff80000080db27:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080db2b:	c9                   	leave  
ffff80000080db2c:	c3                   	ret    

ffff80000080db2d <bupdate>:
bupdate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:113

int bupdate(buffer_head *bh){
ffff80000080db2d:	f3 0f 1e fa          	endbr64 
ffff80000080db31:	55                   	push   rbp
ffff80000080db32:	48 89 e5             	mov    rbp,rsp
ffff80000080db35:	41 57                	push   r15
ffff80000080db37:	48 83 ec 18          	sub    rsp,0x18
ffff80000080db3b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080db3b <bupdate+0xe>
ffff80000080db42:	49 bb 1d 00 11 00 00 	movabs r11,0x11001d
ffff80000080db49:	00 00 00 
ffff80000080db4c:	4c 01 d8             	add    rax,r11
ffff80000080db4f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:114
    return bdiscard(bh);
ffff80000080db53:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080db57:	48 89 d7             	mov    rdi,rdx
ffff80000080db5a:	49 89 c7             	mov    r15,rax
ffff80000080db5d:	48 ba 1d ff ee ff ff 	movabs rdx,0xffffffffffeeff1d
ffff80000080db64:	ff ff ff 
ffff80000080db67:	48 01 c2             	add    rdx,rax
ffff80000080db6a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:115
}
ffff80000080db6c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080db70:	c9                   	leave  
ffff80000080db71:	c3                   	ret    

ffff80000080db72 <blkdev_read>:
blkdev_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:119
/*
bread的更高级封装，可以不以块为单位读取到buf。
*/
int blkdev_read(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080db72:	f3 0f 1e fa          	endbr64 
ffff80000080db76:	55                   	push   rbp
ffff80000080db77:	48 89 e5             	mov    rbp,rsp
ffff80000080db7a:	41 57                	push   r15
ffff80000080db7c:	53                   	push   rbx
ffff80000080db7d:	48 83 ec 50          	sub    rsp,0x50
ffff80000080db81:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080db81 <blkdev_read+0xf>
ffff80000080db88:	49 bb d7 ff 10 00 00 	movabs r11,0x10ffd7
ffff80000080db8f:	00 00 00 
ffff80000080db92:	4c 01 db             	add    rbx,r11
ffff80000080db95:	89 f8                	mov    eax,edi
ffff80000080db97:	89 75 b8             	mov    DWORD PTR [rbp-0x48],esi
ffff80000080db9a:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffff80000080db9e:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffff80000080dba2:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:120
    int n=TO_BLKN(count);
ffff80000080dba6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dbaa:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080dbae:	48 89 c2             	mov    rdx,rax
ffff80000080dbb1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dbb5:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dbba:	48 01 d0             	add    rax,rdx
ffff80000080dbbd:	48 85 c0             	test   rax,rax
ffff80000080dbc0:	0f 95 c0             	setne  al
ffff80000080dbc3:	0f b6 c0             	movzx  eax,al
ffff80000080dbc6:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:121
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080dbc9:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dbcc:	99                   	cdq    
ffff80000080dbcd:	c1 ea 14             	shr    edx,0x14
ffff80000080dbd0:	01 d0                	add    eax,edx
ffff80000080dbd2:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dbd7:	29 d0                	sub    eax,edx
ffff80000080dbd9:	89 c2                	mov    edx,eax
ffff80000080dbdb:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dbde:	29 d0                	sub    eax,edx
ffff80000080dbe0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:122
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080dbe3:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dbe6:	99                   	cdq    
ffff80000080dbe7:	c1 ea 14             	shr    edx,0x14
ffff80000080dbea:	01 d0                	add    eax,edx
ffff80000080dbec:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dbf1:	29 d0                	sub    eax,edx
ffff80000080dbf3:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:123
    char* p=buf;
ffff80000080dbf6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080dbfa:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:124
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080dbfe:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dc02:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dc07:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:125
    int len=BLOCK_SIZE-first_off;
ffff80000080dc0b:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080dc10:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080dc13:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126
    for(int i=0;i<n;i++){
ffff80000080dc16:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080dc1d:	e9 b1 00 00 00       	jmp    ffff80000080dcd3 <blkdev_read+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:127
        buffer_head *bh=bread(dev,blkn);
ffff80000080dc22:	0f b7 45 bc          	movzx  eax,WORD PTR [rbp-0x44]
ffff80000080dc26:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080dc29:	89 d6                	mov    esi,edx
ffff80000080dc2b:	89 c7                	mov    edi,eax
ffff80000080dc2d:	49 89 df             	mov    r15,rbx
ffff80000080dc30:	48 b8 e2 fc ee ff ff 	movabs rax,0xffffffffffeefce2
ffff80000080dc37:	ff ff ff 
ffff80000080dc3a:	48 01 d8             	add    rax,rbx
ffff80000080dc3d:	ff d0                	call   rax
ffff80000080dc3f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128
        if(!bh)
ffff80000080dc43:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080dc48:	75 0a                	jne    ffff80000080dc54 <blkdev_read+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:129
            return -ENOBUFS;//buffer不够了
ffff80000080dc4a:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080dc4f:	e9 90 00 00 00       	jmp    ffff80000080dce4 <blkdev_read+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:130
        if(i==n-1)
ffff80000080dc54:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080dc57:	83 e8 01             	sub    eax,0x1
ffff80000080dc5a:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff80000080dc5d:	75 09                	jne    ffff80000080dc68 <blkdev_read+0xf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:131
            len=mod_count;
ffff80000080dc5f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080dc63:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080dc66:	eb 0d                	jmp    ffff80000080dc75 <blkdev_read+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:132
        else if(i==2)
ffff80000080dc68:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
ffff80000080dc6c:	75 07                	jne    ffff80000080dc75 <blkdev_read+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:133
            len=BLOCK_SIZE;
ffff80000080dc6e:	c7 45 dc 00 10 00 00 	mov    DWORD PTR [rbp-0x24],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:134 (discriminator 2)
        memcpy(p,bh->data+first_off,len);
ffff80000080dc75:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080dc78:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080dc7c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080dc7f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080dc82:	48 98                	cdqe   
ffff80000080dc84:	48 01 c1             	add    rcx,rax
ffff80000080dc87:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dc8b:	48 89 ce             	mov    rsi,rcx
ffff80000080dc8e:	48 89 c7             	mov    rdi,rax
ffff80000080dc91:	49 89 df             	mov    r15,rbx
ffff80000080dc94:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080dc9b:	ff ff ff 
ffff80000080dc9e:	48 01 d8             	add    rax,rbx
ffff80000080dca1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:135 (discriminator 2)
        brelse(bh);
ffff80000080dca3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080dca7:	48 89 c7             	mov    rdi,rax
ffff80000080dcaa:	49 89 df             	mov    r15,rbx
ffff80000080dcad:	48 b8 10 03 ef ff ff 	movabs rax,0xffffffffffef0310
ffff80000080dcb4:	ff ff ff 
ffff80000080dcb7:	48 01 d8             	add    rax,rbx
ffff80000080dcba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:136 (discriminator 2)
        blkn++;
ffff80000080dcbc:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:137 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080dcc0:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080dcc7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:138 (discriminator 2)
        first_off=0;
ffff80000080dcc8:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080dccf:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 1)
ffff80000080dcd3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dcd6:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080dcd9:	0f 8c 43 ff ff ff    	jl     ffff80000080dc22 <blkdev_read+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:140
    }
    return 1;
ffff80000080dcdf:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:141
}
ffff80000080dce4:	48 83 c4 50          	add    rsp,0x50
ffff80000080dce8:	5b                   	pop    rbx
ffff80000080dce9:	41 5f                	pop    r15
ffff80000080dceb:	5d                   	pop    rbp
ffff80000080dcec:	c3                   	ret    

ffff80000080dced <blkdev_write>:
blkdev_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:143

int blkdev_write(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080dced:	f3 0f 1e fa          	endbr64 
ffff80000080dcf1:	55                   	push   rbp
ffff80000080dcf2:	48 89 e5             	mov    rbp,rsp
ffff80000080dcf5:	41 57                	push   r15
ffff80000080dcf7:	53                   	push   rbx
ffff80000080dcf8:	48 83 ec 50          	sub    rsp,0x50
ffff80000080dcfc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dcfc <blkdev_write+0xf>
ffff80000080dd03:	49 bb 5c fe 10 00 00 	movabs r11,0x10fe5c
ffff80000080dd0a:	00 00 00 
ffff80000080dd0d:	4c 01 db             	add    rbx,r11
ffff80000080dd10:	89 f8                	mov    eax,edi
ffff80000080dd12:	89 75 b8             	mov    DWORD PTR [rbp-0x48],esi
ffff80000080dd15:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffff80000080dd19:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffff80000080dd1d:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:144
    int n=TO_BLKN(count);
ffff80000080dd21:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dd25:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080dd29:	48 89 c2             	mov    rdx,rax
ffff80000080dd2c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dd30:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dd35:	48 01 d0             	add    rax,rdx
ffff80000080dd38:	48 85 c0             	test   rax,rax
ffff80000080dd3b:	0f 95 c0             	setne  al
ffff80000080dd3e:	0f b6 c0             	movzx  eax,al
ffff80000080dd41:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:145
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080dd44:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dd47:	99                   	cdq    
ffff80000080dd48:	c1 ea 14             	shr    edx,0x14
ffff80000080dd4b:	01 d0                	add    eax,edx
ffff80000080dd4d:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dd52:	29 d0                	sub    eax,edx
ffff80000080dd54:	89 c2                	mov    edx,eax
ffff80000080dd56:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dd59:	29 d0                	sub    eax,edx
ffff80000080dd5b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:146
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080dd5e:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dd61:	99                   	cdq    
ffff80000080dd62:	c1 ea 14             	shr    edx,0x14
ffff80000080dd65:	01 d0                	add    eax,edx
ffff80000080dd67:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dd6c:	29 d0                	sub    eax,edx
ffff80000080dd6e:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:147
    char* p=buf;
ffff80000080dd71:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080dd75:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:148
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080dd79:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dd7d:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dd82:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:149
    int len=BLOCK_SIZE-first_off;
ffff80000080dd86:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080dd8b:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080dd8e:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150
    for(int i=0;i<n;i++){
ffff80000080dd91:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080dd98:	e9 b1 00 00 00       	jmp    ffff80000080de4e <blkdev_write+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:151
        buffer_head *bh=get_block(dev,blkn);
ffff80000080dd9d:	0f b7 45 bc          	movzx  eax,WORD PTR [rbp-0x44]
ffff80000080dda1:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080dda4:	89 d6                	mov    esi,edx
ffff80000080dda6:	89 c7                	mov    edi,eax
ffff80000080dda8:	49 89 df             	mov    r15,rbx
ffff80000080ddab:	48 b8 65 fb ee ff ff 	movabs rax,0xffffffffffeefb65
ffff80000080ddb2:	ff ff ff 
ffff80000080ddb5:	48 01 d8             	add    rax,rbx
ffff80000080ddb8:	ff d0                	call   rax
ffff80000080ddba:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152
        if(!bh)
ffff80000080ddbe:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080ddc3:	75 0a                	jne    ffff80000080ddcf <blkdev_write+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:153
            return -ENOBUFS;//buffer不够了
ffff80000080ddc5:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080ddca:	e9 90 00 00 00       	jmp    ffff80000080de5f <blkdev_write+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:154
        if(i==n-1)
ffff80000080ddcf:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080ddd2:	83 e8 01             	sub    eax,0x1
ffff80000080ddd5:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff80000080ddd8:	75 09                	jne    ffff80000080dde3 <blkdev_write+0xf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:155
            len=mod_count;
ffff80000080ddda:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ddde:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080dde1:	eb 0d                	jmp    ffff80000080ddf0 <blkdev_write+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:156
        else if(i==2)
ffff80000080dde3:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
ffff80000080dde7:	75 07                	jne    ffff80000080ddf0 <blkdev_write+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:157
            len=BLOCK_SIZE;
ffff80000080dde9:	c7 45 dc 00 10 00 00 	mov    DWORD PTR [rbp-0x24],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:158 (discriminator 2)
        memcpy(bh->data+first_off,p,len);
ffff80000080ddf0:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080ddf3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ddf7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080ddfa:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080ddfd:	48 98                	cdqe   
ffff80000080ddff:	48 01 c1             	add    rcx,rax
ffff80000080de02:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080de06:	48 89 c6             	mov    rsi,rax
ffff80000080de09:	48 89 cf             	mov    rdi,rcx
ffff80000080de0c:	49 89 df             	mov    r15,rbx
ffff80000080de0f:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080de16:	ff ff ff 
ffff80000080de19:	48 01 d8             	add    rax,rbx
ffff80000080de1c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:159 (discriminator 2)
        brelse(bh);
ffff80000080de1e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080de22:	48 89 c7             	mov    rdi,rax
ffff80000080de25:	49 89 df             	mov    r15,rbx
ffff80000080de28:	48 b8 10 03 ef ff ff 	movabs rax,0xffffffffffef0310
ffff80000080de2f:	ff ff ff 
ffff80000080de32:	48 01 d8             	add    rax,rbx
ffff80000080de35:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:160 (discriminator 2)
        blkn++;
ffff80000080de37:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:161 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080de3b:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080de42:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:162 (discriminator 2)
        first_off=0;
ffff80000080de43:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080de4a:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 1)
ffff80000080de4e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080de51:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080de54:	0f 8c 43 ff ff ff    	jl     ffff80000080dd9d <blkdev_write+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:164
    }
    return 1;
ffff80000080de5a:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:166

}
ffff80000080de5f:	48 83 c4 50          	add    rsp,0x50
ffff80000080de63:	5b                   	pop    rbx
ffff80000080de64:	41 5f                	pop    r15
ffff80000080de66:	5d                   	pop    rbp
ffff80000080de67:	c3                   	ret    

ffff80000080de68 <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:167
int brelse(buffer_head *bh){
ffff80000080de68:	f3 0f 1e fa          	endbr64 
ffff80000080de6c:	55                   	push   rbp
ffff80000080de6d:	48 89 e5             	mov    rbp,rsp
ffff80000080de70:	41 57                	push   r15
ffff80000080de72:	53                   	push   rbx
ffff80000080de73:	48 83 ec 10          	sub    rsp,0x10
ffff80000080de77:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080de77 <brelse+0xf>
ffff80000080de7e:	49 bb e1 fc 10 00 00 	movabs r11,0x10fce1
ffff80000080de85:	00 00 00 
ffff80000080de88:	4c 01 db             	add    rbx,r11
ffff80000080de8b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168
    if(bh->dev==(unsigned short)-1||!blk_devs[BLKDEV_MAJOR(bh->dev)].do_request)
ffff80000080de8f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de93:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080de97:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080de9b:	74 33                	je     ffff80000080ded0 <brelse+0x68>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168 (discriminator 1)
ffff80000080de9d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dea1:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080dea5:	0f b7 c0             	movzx  eax,ax
ffff80000080dea8:	c1 f8 04             	sar    eax,0x4
ffff80000080deab:	83 e0 0f             	and    eax,0xf
ffff80000080deae:	89 c2                	mov    edx,eax
ffff80000080deb0:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080deb7:	ff ff ff 
ffff80000080deba:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080debe:	48 63 c2             	movsxd rax,edx
ffff80000080dec1:	48 c1 e0 04          	shl    rax,0x4
ffff80000080dec5:	48 01 c8             	add    rax,rcx
ffff80000080dec8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080decb:	48 85 c0             	test   rax,rax
ffff80000080dece:	75 0a                	jne    ffff80000080deda <brelse+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:169
        return -ENODEV;
ffff80000080ded0:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080ded5:	e9 96 00 00 00       	jmp    ffff80000080df70 <brelse+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:170
    if(bh->dirt)
ffff80000080deda:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dede:	0f b6 40 13          	movzx  eax,BYTE PTR [rax+0x13]
ffff80000080dee2:	84 c0                	test   al,al
ffff80000080dee4:	74 19                	je     ffff80000080deff <brelse+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:171
        bflush(bh);
ffff80000080dee6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080deea:	48 89 c7             	mov    rdi,rax
ffff80000080deed:	49 89 df             	mov    r15,rbx
ffff80000080def0:	48 b8 65 fe ee ff ff 	movabs rax,0xffffffffffeefe65
ffff80000080def7:	ff ff ff 
ffff80000080defa:	48 01 d8             	add    rax,rbx
ffff80000080defd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:172
    bh->count--;
ffff80000080deff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df03:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080df07:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080df0a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df0e:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:173
    if(bh->count==0)
ffff80000080df11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df15:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080df19:	84 c0                	test   al,al
ffff80000080df1b:	75 4e                	jne    ffff80000080df6b <brelse+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:175
    {
        bh->prev->next=bh->next;
ffff80000080df1d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df21:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080df25:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080df29:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080df2d:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:176
        bh->next->prev=bh->prev;
ffff80000080df31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df35:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080df39:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080df3d:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000080df41:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:177
        bh->dev=-1;
ffff80000080df45:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df49:	66 c7 40 10 ff ff    	mov    WORD PTR [rax+0x10],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:178
        kmfree(bh->data);
ffff80000080df4f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df53:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080df56:	48 89 c7             	mov    rdi,rax
ffff80000080df59:	49 89 df             	mov    r15,rbx
ffff80000080df5c:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080df63:	ff ff ff 
ffff80000080df66:	48 01 d8             	add    rax,rbx
ffff80000080df69:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:180
    }
    return 1;
ffff80000080df6b:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:181
ffff80000080df70:	48 83 c4 10          	add    rsp,0x10
ffff80000080df74:	5b                   	pop    rbx
ffff80000080df75:	41 5f                	pop    r15
ffff80000080df77:	5d                   	pop    rbp
ffff80000080df78:	c3                   	ret    

ffff80000080df79 <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:123
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
ffff80000080df79:	f3 0f 1e fa          	endbr64 
ffff80000080df7d:	55                   	push   rbp
ffff80000080df7e:	48 89 e5             	mov    rbp,rsp
ffff80000080df81:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080df81 <shift+0x8>
ffff80000080df88:	49 bb d7 fb 10 00 00 	movabs r11,0x10fbd7
ffff80000080df8f:	00 00 00 
ffff80000080df92:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:124
    k_shift=!k_shift;
ffff80000080df95:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080df9c:	ff ff ff 
ffff80000080df9f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dfa3:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080dfa6:	84 d2                	test   dl,dl
ffff80000080dfa8:	0f 94 c2             	sete   dl
ffff80000080dfab:	89 d1                	mov    ecx,edx
ffff80000080dfad:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080dfb4:	ff ff ff 
ffff80000080dfb7:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080dfbb:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:125
}
ffff80000080dfbd:	90                   	nop
ffff80000080dfbe:	5d                   	pop    rbp
ffff80000080dfbf:	c3                   	ret    

ffff80000080dfc0 <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:127
void ctrl()
{
ffff80000080dfc0:	f3 0f 1e fa          	endbr64 
ffff80000080dfc4:	55                   	push   rbp
ffff80000080dfc5:	48 89 e5             	mov    rbp,rsp
ffff80000080dfc8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dfc8 <ctrl+0x8>
ffff80000080dfcf:	49 bb 90 fb 10 00 00 	movabs r11,0x10fb90
ffff80000080dfd6:	00 00 00 
ffff80000080dfd9:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:128
    k_ctrl=!k_ctrl;
ffff80000080dfdc:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff80000080dfe3:	ff ff ff 
ffff80000080dfe6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dfea:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080dfed:	84 d2                	test   dl,dl
ffff80000080dfef:	0f 94 c2             	sete   dl
ffff80000080dff2:	89 d1                	mov    ecx,edx
ffff80000080dff4:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff80000080dffb:	ff ff ff 
ffff80000080dffe:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e002:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:129
}
ffff80000080e004:	90                   	nop
ffff80000080e005:	5d                   	pop    rbp
ffff80000080e006:	c3                   	ret    

ffff80000080e007 <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:131
void capslock()
{
ffff80000080e007:	f3 0f 1e fa          	endbr64 
ffff80000080e00b:	55                   	push   rbp
ffff80000080e00c:	48 89 e5             	mov    rbp,rsp
ffff80000080e00f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e00f <capslock+0x8>
ffff80000080e016:	49 bb 49 fb 10 00 00 	movabs r11,0x10fb49
ffff80000080e01d:	00 00 00 
ffff80000080e020:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:132
    k_capslock=k_capslock==0?1:0;
ffff80000080e023:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080e02a:	ff ff ff 
ffff80000080e02d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e031:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e034:	84 d2                	test   dl,dl
ffff80000080e036:	0f 94 c2             	sete   dl
ffff80000080e039:	89 d1                	mov    ecx,edx
ffff80000080e03b:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080e042:	ff ff ff 
ffff80000080e045:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e049:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
}
ffff80000080e04b:	90                   	nop
ffff80000080e04c:	5d                   	pop    rbp
ffff80000080e04d:	c3                   	ret    

ffff80000080e04e <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
char to_ascii(char scan_code)
{
ffff80000080e04e:	f3 0f 1e fa          	endbr64 
ffff80000080e052:	55                   	push   rbp
ffff80000080e053:	48 89 e5             	mov    rbp,rsp
ffff80000080e056:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e056 <to_ascii+0x8>
ffff80000080e05d:	49 bb 02 fb 10 00 00 	movabs r11,0x10fb02
ffff80000080e064:	00 00 00 
ffff80000080e067:	4c 01 d8             	add    rax,r11
ffff80000080e06a:	89 fa                	mov    edx,edi
ffff80000080e06c:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e06f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080e076:	e9 25 01 00 00       	jmp    ffff80000080e1a0 <to_ascii+0x152>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
        if(key_map[i].scan_code==scan_code)
ffff80000080e07b:	48 be 88 d8 ff ff ff 	movabs rsi,0xffffffffffffd888
ffff80000080e082:	ff ff ff 
ffff80000080e085:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e088:	48 63 ca             	movsxd rcx,edx
ffff80000080e08b:	48 89 ca             	mov    rdx,rcx
ffff80000080e08e:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e092:	48 01 ca             	add    rdx,rcx
ffff80000080e095:	48 01 c2             	add    rdx,rax
ffff80000080e098:	48 01 f2             	add    rdx,rsi
ffff80000080e09b:	48 83 c2 02          	add    rdx,0x2
ffff80000080e09f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e0a2:	38 55 ec             	cmp    BYTE PTR [rbp-0x14],dl
ffff80000080e0a5:	0f 85 f1 00 00 00    	jne    ffff80000080e19c <to_ascii+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
ffff80000080e0ab:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080e0b2:	ff ff ff 
ffff80000080e0b5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e0b9:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e0bc:	84 d2                	test   dl,dl
ffff80000080e0be:	74 79                	je     ffff80000080e139 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 1)
ffff80000080e0c0:	48 be 88 d8 ff ff ff 	movabs rsi,0xffffffffffffd888
ffff80000080e0c7:	ff ff ff 
ffff80000080e0ca:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e0cd:	48 63 ca             	movsxd rcx,edx
ffff80000080e0d0:	48 01 c6             	add    rsi,rax
ffff80000080e0d3:	48 89 ca             	mov    rdx,rcx
ffff80000080e0d6:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e0da:	48 01 ca             	add    rdx,rcx
ffff80000080e0dd:	48 01 f2             	add    rdx,rsi
ffff80000080e0e0:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e0e3:	80 fa 60             	cmp    dl,0x60
ffff80000080e0e6:	7e 51                	jle    ffff80000080e139 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 2)
ffff80000080e0e8:	48 be 88 d8 ff ff ff 	movabs rsi,0xffffffffffffd888
ffff80000080e0ef:	ff ff ff 
ffff80000080e0f2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e0f5:	48 63 ca             	movsxd rcx,edx
ffff80000080e0f8:	48 01 c6             	add    rsi,rax
ffff80000080e0fb:	48 89 ca             	mov    rdx,rcx
ffff80000080e0fe:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e102:	48 01 ca             	add    rdx,rcx
ffff80000080e105:	48 01 f2             	add    rdx,rsi
ffff80000080e108:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e10b:	80 fa 7a             	cmp    dl,0x7a
ffff80000080e10e:	7f 29                	jg     ffff80000080e139 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 3)
ffff80000080e110:	48 be 88 d8 ff ff ff 	movabs rsi,0xffffffffffffd888
ffff80000080e117:	ff ff ff 
ffff80000080e11a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e11d:	48 63 ca             	movsxd rcx,edx
ffff80000080e120:	48 89 ca             	mov    rdx,rcx
ffff80000080e123:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e127:	48 01 ca             	add    rdx,rcx
ffff80000080e12a:	48 01 d0             	add    rax,rdx
ffff80000080e12d:	48 01 f0             	add    rax,rsi
ffff80000080e130:	48 83 c0 01          	add    rax,0x1
ffff80000080e134:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e137:	eb 76                	jmp    ffff80000080e1af <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140
            else if(k_shift)return key_map[i].ascii_shift;
ffff80000080e139:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080e140:	ff ff ff 
ffff80000080e143:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e147:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e14a:	84 d2                	test   dl,dl
ffff80000080e14c:	74 29                	je     ffff80000080e177 <to_ascii+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140 (discriminator 1)
ffff80000080e14e:	48 be 88 d8 ff ff ff 	movabs rsi,0xffffffffffffd888
ffff80000080e155:	ff ff ff 
ffff80000080e158:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e15b:	48 63 ca             	movsxd rcx,edx
ffff80000080e15e:	48 89 ca             	mov    rdx,rcx
ffff80000080e161:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e165:	48 01 ca             	add    rdx,rcx
ffff80000080e168:	48 01 d0             	add    rax,rdx
ffff80000080e16b:	48 01 f0             	add    rax,rsi
ffff80000080e16e:	48 83 c0 01          	add    rax,0x1
ffff80000080e172:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e175:	eb 38                	jmp    ffff80000080e1af <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
            else return key_map[i].ascii;
ffff80000080e177:	48 b9 88 d8 ff ff ff 	movabs rcx,0xffffffffffffd888
ffff80000080e17e:	ff ff ff 
ffff80000080e181:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e184:	48 63 d2             	movsxd rdx,edx
ffff80000080e187:	48 01 c1             	add    rcx,rax
ffff80000080e18a:	48 89 d0             	mov    rax,rdx
ffff80000080e18d:	48 c1 e0 02          	shl    rax,0x2
ffff80000080e191:	48 01 d0             	add    rax,rdx
ffff80000080e194:	48 01 c8             	add    rax,rcx
ffff80000080e197:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e19a:	eb 13                	jmp    ffff80000080e1af <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e19c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 1)
ffff80000080e1a0:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
ffff80000080e1a4:	0f 8e d1 fe ff ff    	jle    ffff80000080e07b <to_ascii+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:144
        }

    return '\0';
ffff80000080e1aa:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
}
ffff80000080e1af:	5d                   	pop    rbp
ffff80000080e1b0:	c3                   	ret    

ffff80000080e1b1 <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
int init_kb()
{
ffff80000080e1b1:	f3 0f 1e fa          	endbr64 
ffff80000080e1b5:	55                   	push   rbp
ffff80000080e1b6:	48 89 e5             	mov    rbp,rsp
ffff80000080e1b9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e1b9 <init_kb+0x8>
ffff80000080e1c0:	49 bb 9f f9 10 00 00 	movabs r11,0x10f99f
ffff80000080e1c7:	00 00 00 
ffff80000080e1ca:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:148
}
ffff80000080e1cd:	90                   	nop
ffff80000080e1ce:	5d                   	pop    rbp
ffff80000080e1cf:	c3                   	ret    

ffff80000080e1d0 <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
int key_proc()
{
ffff80000080e1d0:	f3 0f 1e fa          	endbr64 
ffff80000080e1d4:	55                   	push   rbp
ffff80000080e1d5:	48 89 e5             	mov    rbp,rsp
ffff80000080e1d8:	41 57                	push   r15
ffff80000080e1da:	53                   	push   rbx
ffff80000080e1db:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e1df:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e1df <key_proc+0xf>
ffff80000080e1e6:	49 bb 79 f9 10 00 00 	movabs r11,0x10f979
ffff80000080e1ed:	00 00 00 
ffff80000080e1f0:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
    asm volatile("cli");
ffff80000080e1f3:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:153
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
ffff80000080e1f4:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffff80000080e1f8:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
ffff80000080e1fc:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
    key_code tmpc;
    scan1=inb(0x60);
ffff80000080e200:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080e205:	49 89 df             	mov    r15,rbx
ffff80000080e208:	48 b8 01 a3 ee ff ff 	movabs rax,0xffffffffffeea301
ffff80000080e20f:	ff ff ff 
ffff80000080e212:	48 01 d8             	add    rax,rbx
ffff80000080e215:	ff d0                	call   rax
ffff80000080e217:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
ffff80000080e21a:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e221:	ff ff ff 
ffff80000080e224:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e228:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e22b:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e22e:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e235:	ff ff ff 
ffff80000080e238:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e23c:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e23f:	89 d0                	mov    eax,edx
ffff80000080e241:	99                   	cdq    
ffff80000080e242:	f7 f9                	idiv   ecx
ffff80000080e244:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e24b:	ff ff ff 
ffff80000080e24e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e252:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e255:	39 c2                	cmp    edx,eax
ffff80000080e257:	74 68                	je     ffff80000080e2c1 <key_proc+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:169
    {
        key_bufq.data[key_bufq.tail]=scan1;
ffff80000080e259:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e260:	ff ff ff 
ffff80000080e263:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e267:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e26a:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e271:	ff ff ff 
ffff80000080e274:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e278:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e27b:	48 98                	cdqe   
ffff80000080e27d:	48 01 c2             	add    rdx,rax
ffff80000080e280:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e284:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:170
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
ffff80000080e286:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e28d:	ff ff ff 
ffff80000080e290:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e294:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e297:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e29a:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e2a1:	ff ff ff 
ffff80000080e2a4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e2a8:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e2ab:	89 d0                	mov    eax,edx
ffff80000080e2ad:	99                   	cdq    
ffff80000080e2ae:	f7 f9                	idiv   ecx
ffff80000080e2b0:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e2b7:	ff ff ff 
ffff80000080e2ba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e2be:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:173
    }

    if(scan1==0x48)
ffff80000080e2c1:	80 7d ef 48          	cmp    BYTE PTR [rbp-0x11],0x48
ffff80000080e2c5:	75 17                	jne    ffff80000080e2de <key_proc+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:174
        scr_up();
ffff80000080e2c7:	49 89 df             	mov    r15,rbx
ffff80000080e2ca:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e2cf:	48 ba 63 cd ee ff ff 	movabs rdx,0xffffffffffeecd63
ffff80000080e2d6:	ff ff ff 
ffff80000080e2d9:	48 01 da             	add    rdx,rbx
ffff80000080e2dc:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:175
    if(scan1==0x50)
ffff80000080e2de:	80 7d ef 50          	cmp    BYTE PTR [rbp-0x11],0x50
ffff80000080e2e2:	75 17                	jne    ffff80000080e2fb <key_proc+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:176
        scr_down();
ffff80000080e2e4:	49 89 df             	mov    r15,rbx
ffff80000080e2e7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e2ec:	48 ba 5b ce ee ff ff 	movabs rdx,0xffffffffffeece5b
ffff80000080e2f3:	ff ff ff 
ffff80000080e2f6:	48 01 da             	add    rdx,rbx
ffff80000080e2f9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:177
    switch (scan1)
ffff80000080e2fb:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e2ff:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e304:	74 45                	je     ffff80000080e34b <key_proc+0x17b>
ffff80000080e306:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e30b:	0f 8f 85 00 00 00    	jg     ffff80000080e396 <key_proc+0x1c6>
ffff80000080e311:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e316:	74 33                	je     ffff80000080e34b <key_proc+0x17b>
ffff80000080e318:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e31d:	7f 77                	jg     ffff80000080e396 <key_proc+0x1c6>
ffff80000080e31f:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e324:	74 3e                	je     ffff80000080e364 <key_proc+0x194>
ffff80000080e326:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e32b:	7f 69                	jg     ffff80000080e396 <key_proc+0x1c6>
ffff80000080e32d:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e330:	74 4b                	je     ffff80000080e37d <key_proc+0x1ad>
ffff80000080e332:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e335:	7f 5f                	jg     ffff80000080e396 <key_proc+0x1c6>
ffff80000080e337:	83 f8 36             	cmp    eax,0x36
ffff80000080e33a:	74 0f                	je     ffff80000080e34b <key_proc+0x17b>
ffff80000080e33c:	83 f8 36             	cmp    eax,0x36
ffff80000080e33f:	7f 55                	jg     ffff80000080e396 <key_proc+0x1c6>
ffff80000080e341:	83 f8 1d             	cmp    eax,0x1d
ffff80000080e344:	74 1e                	je     ffff80000080e364 <key_proc+0x194>
ffff80000080e346:	83 f8 2a             	cmp    eax,0x2a
ffff80000080e349:	75 4b                	jne    ffff80000080e396 <key_proc+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:183
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
ffff80000080e34b:	49 89 df             	mov    r15,rbx
ffff80000080e34e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e353:	48 ba 21 04 ef ff ff 	movabs rdx,0xffffffffffef0421
ffff80000080e35a:	ff ff ff 
ffff80000080e35d:	48 01 da             	add    rdx,rbx
ffff80000080e360:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:184
            break;
ffff80000080e362:	eb 33                	jmp    ffff80000080e397 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
        case 0x1d:
        case 0x9d:
            ctrl();
ffff80000080e364:	49 89 df             	mov    r15,rbx
ffff80000080e367:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e36c:	48 ba 68 04 ef ff ff 	movabs rdx,0xffffffffffef0468
ffff80000080e373:	ff ff ff 
ffff80000080e376:	48 01 da             	add    rdx,rbx
ffff80000080e379:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
            break;
ffff80000080e37b:	eb 1a                	jmp    ffff80000080e397 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:190
        case 0x3a:
            capslock();
ffff80000080e37d:	49 89 df             	mov    r15,rbx
ffff80000080e380:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e385:	48 ba af 04 ef ff ff 	movabs rdx,0xffffffffffef04af
ffff80000080e38c:	ff ff ff 
ffff80000080e38f:	48 01 da             	add    rdx,rbx
ffff80000080e392:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:191
            break;
ffff80000080e394:	eb 01                	jmp    ffff80000080e397 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:193
        default:
            break;
ffff80000080e396:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
ffff80000080e397:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e39b:	84 c0                	test   al,al
ffff80000080e39d:	78 51                	js     ffff80000080e3f0 <key_proc+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:197
        char ch= to_ascii(scan1);
ffff80000080e39f:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e3a3:	0f be c0             	movsx  eax,al
ffff80000080e3a6:	89 c7                	mov    edi,eax
ffff80000080e3a8:	49 89 df             	mov    r15,rbx
ffff80000080e3ab:	48 b8 f6 04 ef ff ff 	movabs rax,0xffffffffffef04f6
ffff80000080e3b2:	ff ff ff 
ffff80000080e3b5:	48 01 d8             	add    rax,rbx
ffff80000080e3b8:	ff d0                	call   rax
ffff80000080e3ba:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:198
        unsigned long args[]={(unsigned long) &ch, 1};
ffff80000080e3bd:	48 8d 45 e7          	lea    rax,[rbp-0x19]
ffff80000080e3c1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000080e3c5:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffff80000080e3cc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
ffff80000080e3cd:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffff80000080e3d1:	48 89 c2             	mov    rdx,rax
ffff80000080e3d4:	be 03 00 00 00       	mov    esi,0x3
ffff80000080e3d9:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e3de:	49 89 df             	mov    r15,rbx
ffff80000080e3e1:	48 b8 ee a1 ee ff ff 	movabs rax,0xffffffffffeea1ee
ffff80000080e3e8:	ff ff ff 
ffff80000080e3eb:	48 01 d8             	add    rax,rbx
ffff80000080e3ee:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:219
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
ffff80000080e3f0:	49 89 df             	mov    r15,rbx
ffff80000080e3f3:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e3f8:	48 ba 16 a3 ee ff ff 	movabs rdx,0xffffffffffeea316
ffff80000080e3ff:	ff ff ff 
ffff80000080e402:	48 01 da             	add    rdx,rbx
ffff80000080e405:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:220
    asm volatile("leave\r\n iretq");
ffff80000080e407:	c9                   	leave  
ffff80000080e408:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:221
}
ffff80000080e40a:	90                   	nop
ffff80000080e40b:	48 83 c4 20          	add    rsp,0x20
ffff80000080e40f:	5b                   	pop    rbx
ffff80000080e410:	41 5f                	pop    r15
ffff80000080e412:	5d                   	pop    rbp
ffff80000080e413:	c3                   	ret    

ffff80000080e414 <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:224

char sys_analyse_key()
{
ffff80000080e414:	f3 0f 1e fa          	endbr64 
ffff80000080e418:	55                   	push   rbp
ffff80000080e419:	48 89 e5             	mov    rbp,rsp
ffff80000080e41c:	41 57                	push   r15
ffff80000080e41e:	53                   	push   rbx
ffff80000080e41f:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e423:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e423 <sys_analyse_key+0xf>
ffff80000080e42a:	49 bb 35 f7 10 00 00 	movabs r11,0x10f735
ffff80000080e431:	00 00 00 
ffff80000080e434:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225
    if(key_bufq.tail==key_bufq.head)return -1;
ffff80000080e437:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e43e:	ff ff ff 
ffff80000080e441:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e445:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000080e448:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e44f:	ff ff ff 
ffff80000080e452:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e456:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e459:	39 c2                	cmp    edx,eax
ffff80000080e45b:	75 0a                	jne    ffff80000080e467 <sys_analyse_key+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225 (discriminator 1)
ffff80000080e45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e462:	e9 b1 01 00 00       	jmp    ffff80000080e618 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:226
    char c=key_buf[key_bufq.head];
ffff80000080e467:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e46e:	ff ff ff 
ffff80000080e471:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e475:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e478:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff80000080e47f:	ff ff ff 
ffff80000080e482:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e486:	48 98                	cdqe   
ffff80000080e488:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080e48c:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:227
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
ffff80000080e48f:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e496:	ff ff ff 
ffff80000080e499:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e49d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e4a0:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e4a3:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e4aa:	ff ff ff 
ffff80000080e4ad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e4b1:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e4b4:	89 d0                	mov    eax,edx
ffff80000080e4b6:	99                   	cdq    
ffff80000080e4b7:	f7 f9                	idiv   ecx
ffff80000080e4b9:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e4c0:	ff ff ff 
ffff80000080e4c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e4c7:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:229
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
ffff80000080e4ca:	48 b8 5e da ff ff ff 	movabs rax,0xffffffffffffda5e
ffff80000080e4d1:	ff ff ff 
ffff80000080e4d4:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e4d8:	48 89 c7             	mov    rdi,rax
ffff80000080e4db:	49 89 df             	mov    r15,rbx
ffff80000080e4de:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e4e3:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080e4ea:	ff ff ff 
ffff80000080e4ed:	48 01 da             	add    rdx,rbx
ffff80000080e4f0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:230
    char res[33]={0};
ffff80000080e4f2:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080e4f9:	00 
ffff80000080e4fa:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080e501:	00 
ffff80000080e502:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080e509:	00 
ffff80000080e50a:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080e511:	00 
ffff80000080e512:	c6 45 e0 00          	mov    BYTE PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
    itoa(res,16,c);
ffff80000080e516:	0f be 55 ef          	movsx  edx,BYTE PTR [rbp-0x11]
ffff80000080e51a:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e51e:	be 10 00 00 00       	mov    esi,0x10
ffff80000080e523:	48 89 c7             	mov    rdi,rax
ffff80000080e526:	49 89 df             	mov    r15,rbx
ffff80000080e529:	48 b8 21 3a ee ff ff 	movabs rax,0xffffffffffee3a21
ffff80000080e530:	ff ff ff 
ffff80000080e533:	48 01 d8             	add    rax,rbx
ffff80000080e536:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    printf(res);
ffff80000080e538:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e53c:	48 89 c7             	mov    rdi,rax
ffff80000080e53f:	49 89 df             	mov    r15,rbx
ffff80000080e542:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e547:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080e54e:	ff ff ff 
ffff80000080e551:	48 01 da             	add    rdx,rbx
ffff80000080e554:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
    if(c&FLAG_BREAK){
ffff80000080e556:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff80000080e55a:	79 32                	jns    ffff80000080e58e <sys_analyse_key+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:234
        printf("\n");
ffff80000080e55c:	48 b8 69 da ff ff ff 	movabs rax,0xffffffffffffda69
ffff80000080e563:	ff ff ff 
ffff80000080e566:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e56a:	48 89 c7             	mov    rdi,rax
ffff80000080e56d:	49 89 df             	mov    r15,rbx
ffff80000080e570:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e575:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080e57c:	ff ff ff 
ffff80000080e57f:	48 01 da             	add    rdx,rbx
ffff80000080e582:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:235
        return -1;
ffff80000080e584:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e589:	e9 8a 00 00 00       	jmp    ffff80000080e618 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    }
    c= to_ascii(c&0x7f);
ffff80000080e58e:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e592:	83 e0 7f             	and    eax,0x7f
ffff80000080e595:	89 c7                	mov    edi,eax
ffff80000080e597:	49 89 df             	mov    r15,rbx
ffff80000080e59a:	48 b8 f6 04 ef ff ff 	movabs rax,0xffffffffffef04f6
ffff80000080e5a1:	ff ff ff 
ffff80000080e5a4:	48 01 d8             	add    rax,rbx
ffff80000080e5a7:	ff d0                	call   rax
ffff80000080e5a9:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    printf(" char:");
ffff80000080e5ac:	48 b8 6b da ff ff ff 	movabs rax,0xffffffffffffda6b
ffff80000080e5b3:	ff ff ff 
ffff80000080e5b6:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e5ba:	48 89 c7             	mov    rdi,rax
ffff80000080e5bd:	49 89 df             	mov    r15,rbx
ffff80000080e5c0:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e5c5:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080e5cc:	ff ff ff 
ffff80000080e5cf:	48 01 da             	add    rdx,rbx
ffff80000080e5d2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    putchar(c);
ffff80000080e5d4:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e5d8:	89 c7                	mov    edi,eax
ffff80000080e5da:	49 89 df             	mov    r15,rbx
ffff80000080e5dd:	48 b8 4a 3b ee ff ff 	movabs rax,0xffffffffffee3b4a
ffff80000080e5e4:	ff ff ff 
ffff80000080e5e7:	48 01 d8             	add    rax,rbx
ffff80000080e5ea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:240
    printf("\n");
ffff80000080e5ec:	48 b8 69 da ff ff ff 	movabs rax,0xffffffffffffda69
ffff80000080e5f3:	ff ff ff 
ffff80000080e5f6:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e5fa:	48 89 c7             	mov    rdi,rax
ffff80000080e5fd:	49 89 df             	mov    r15,rbx
ffff80000080e600:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e605:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080e60c:	ff ff ff 
ffff80000080e60f:	48 01 da             	add    rdx,rbx
ffff80000080e612:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
    return c;
ffff80000080e614:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242 (discriminator 1)
ffff80000080e618:	48 83 c4 30          	add    rsp,0x30
ffff80000080e61c:	5b                   	pop    rbx
ffff80000080e61d:	41 5f                	pop    r15
ffff80000080e61f:	5d                   	pop    rbp
ffff80000080e620:	c3                   	ret    

ffff80000080e621 <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:20
struct blk_dev bd_hd={
    .do_request=hd_do_req
};
int dev_hd=-1,last_chk_res=0;
int init_disk()
{
ffff80000080e621:	f3 0f 1e fa          	endbr64 
ffff80000080e625:	55                   	push   rbp
ffff80000080e626:	48 89 e5             	mov    rbp,rsp
ffff80000080e629:	41 57                	push   r15
ffff80000080e62b:	53                   	push   rbx
ffff80000080e62c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e62c <init_disk+0xb>
ffff80000080e633:	49 bb 2c f5 10 00 00 	movabs r11,0x10f52c
ffff80000080e63a:	00 00 00 
ffff80000080e63d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:21
    if((dev_hd= reg_blkdev(&bd_hd))<0)
ffff80000080e640:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff80000080e647:	ff ff ff 
ffff80000080e64a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e64e:	48 89 c7             	mov    rdi,rax
ffff80000080e651:	49 89 df             	mov    r15,rbx
ffff80000080e654:	48 b8 a9 f6 ee ff ff 	movabs rax,0xffffffffffeef6a9
ffff80000080e65b:	ff ff ff 
ffff80000080e65e:	48 01 d8             	add    rax,rbx
ffff80000080e661:	ff d0                	call   rax
ffff80000080e663:	48 ba 10 ff ff ff ff 	movabs rdx,0xffffffffffffff10
ffff80000080e66a:	ff ff ff 
ffff80000080e66d:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e671:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080e673:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e67a:	ff ff ff 
ffff80000080e67d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e681:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e683:	85 c0                	test   eax,eax
ffff80000080e685:	79 07                	jns    ffff80000080e68e <init_disk+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:22
        return -1;
ffff80000080e687:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e68c:	eb 05                	jmp    ffff80000080e693 <init_disk+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    // hd_iterate();
    return 0;
ffff80000080e68e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:28
}
ffff80000080e693:	5b                   	pop    rbx
ffff80000080e694:	41 5f                	pop    r15
ffff80000080e696:	5d                   	pop    rbp
ffff80000080e697:	c3                   	ret    

ffff80000080e698 <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31

int disk_int_handler_c()
{
ffff80000080e698:	f3 0f 1e fa          	endbr64 
ffff80000080e69c:	55                   	push   rbp
ffff80000080e69d:	48 89 e5             	mov    rbp,rsp
ffff80000080e6a0:	41 57                	push   r15
ffff80000080e6a2:	53                   	push   rbx
ffff80000080e6a3:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e6a7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e6a7 <disk_int_handler_c+0xf>
ffff80000080e6ae:	49 bb b1 f4 10 00 00 	movabs r11,0x10f4b1
ffff80000080e6b5:	00 00 00 
ffff80000080e6b8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    if(r_running==NULL)
ffff80000080e6bb:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e6c2:	ff ff ff 
ffff80000080e6c5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6c9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e6cc:	48 85 c0             	test   rax,rax
ffff80000080e6cf:	75 32                	jne    ffff80000080e703 <disk_int_handler_c+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:34
    {
        comprintf("err:null running dreq\n");
ffff80000080e6d1:	48 b8 72 da ff ff ff 	movabs rax,0xffffffffffffda72
ffff80000080e6d8:	ff ff ff 
ffff80000080e6db:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e6df:	48 89 c7             	mov    rdi,rax
ffff80000080e6e2:	49 89 df             	mov    r15,rbx
ffff80000080e6e5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e6ea:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff80000080e6f1:	ff ff ff 
ffff80000080e6f4:	48 01 da             	add    rdx,rbx
ffff80000080e6f7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:35
        return 1;//同步读写硬盘
ffff80000080e6f9:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080e6fe:	e9 14 03 00 00       	jmp    ffff80000080ea17 <disk_int_handler_c+0x37f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    }
    short *p=r_running->buffer;
ffff80000080e703:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e70a:	ff ff ff 
ffff80000080e70d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e711:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e714:	48 8b 40 22          	mov    rax,QWORD PTR [rax+0x22]
ffff80000080e718:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:38
    int port=PORT_DISK_MAJOR;
ffff80000080e71c:	c7 45 e4 f0 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080e723:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e72a:	ff ff ff 
ffff80000080e72d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e731:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e734:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e737:	0f b7 c0             	movzx  eax,ax
ffff80000080e73a:	83 e0 0f             	and    eax,0xf
ffff80000080e73d:	83 f8 02             	cmp    eax,0x2
ffff80000080e740:	74 1f                	je     ffff80000080e761 <disk_int_handler_c+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40 (discriminator 1)
    BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_SLAVE)
ffff80000080e742:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e749:	ff ff ff 
ffff80000080e74c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e750:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e753:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e756:	0f b7 c0             	movzx  eax,ax
ffff80000080e759:	83 e0 0f             	and    eax,0xf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39 (discriminator 1)
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080e75c:	83 f8 03             	cmp    eax,0x3
ffff80000080e75f:	75 07                	jne    ffff80000080e768 <disk_int_handler_c+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:41
        port=PORT_DISK_SLAVE;
ffff80000080e761:	c7 45 e4 70 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    if(r_running->cmd==BLKDEV_REQ_READ)
ffff80000080e768:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e76f:	ff ff ff 
ffff80000080e772:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e776:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e779:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080e77c:	85 c0                	test   eax,eax
ffff80000080e77e:	75 61                	jne    ffff80000080e7e1 <disk_int_handler_c+0x149>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e780:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080e787:	eb 2f                	jmp    ffff80000080e7b8 <disk_int_handler_c+0x120>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:48 (discriminator 3)
        {
            *p++=inw(port);
ffff80000080e789:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e78c:	0f b7 c0             	movzx  eax,ax
ffff80000080e78f:	89 c7                	mov    edi,eax
ffff80000080e791:	49 89 df             	mov    r15,rbx
ffff80000080e794:	48 b8 0b a3 ee ff ff 	movabs rax,0xffffffffffeea30b
ffff80000080e79b:	ff ff ff 
ffff80000080e79e:	48 01 d8             	add    rax,rbx
ffff80000080e7a1:	ff d0                	call   rax
ffff80000080e7a3:	89 c2                	mov    edx,eax
ffff80000080e7a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e7a9:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffff80000080e7ad:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080e7b1:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e7b4:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 1)
ffff80000080e7b8:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080e7bb:	48 63 d0             	movsxd rdx,eax
ffff80000080e7be:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e7c5:	ff ff ff 
ffff80000080e7c8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e7cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e7cf:	48 8b 40 12          	mov    rax,QWORD PTR [rax+0x12]
ffff80000080e7d3:	48 c1 e0 08          	shl    rax,0x8
ffff80000080e7d7:	48 39 c2             	cmp    rdx,rax
ffff80000080e7da:	72 ad                	jb     ffff80000080e789 <disk_int_handler_c+0xf1>
ffff80000080e7dc:	e9 53 01 00 00       	jmp    ffff80000080e934 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:50
        }
    }else if(r_running->cmd==BLKDEV_REQ_WRITE)
ffff80000080e7e1:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e7e8:	ff ff ff 
ffff80000080e7eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e7ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e7f2:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080e7f5:	83 f8 01             	cmp    eax,0x1
ffff80000080e7f8:	75 64                	jne    ffff80000080e85e <disk_int_handler_c+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52
    {
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e7fa:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080e801:	eb 32                	jmp    ffff80000080e835 <disk_int_handler_c+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
            outw(port,*p++);
ffff80000080e803:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e807:	48 8d 50 02          	lea    rdx,[rax+0x2]
ffff80000080e80b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080e80f:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e812:	0f b7 d0             	movzx  edx,ax
ffff80000080e815:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e818:	0f b7 c0             	movzx  eax,ax
ffff80000080e81b:	89 d6                	mov    esi,edx
ffff80000080e81d:	89 c7                	mov    edi,eax
ffff80000080e81f:	49 89 df             	mov    r15,rbx
ffff80000080e822:	48 b8 f5 a2 ee ff ff 	movabs rax,0xffffffffffeea2f5
ffff80000080e829:	ff ff ff 
ffff80000080e82c:	48 01 d8             	add    rax,rbx
ffff80000080e82f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e831:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 1)
ffff80000080e835:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080e838:	48 63 d0             	movsxd rdx,eax
ffff80000080e83b:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e842:	ff ff ff 
ffff80000080e845:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e849:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e84c:	48 8b 40 12          	mov    rax,QWORD PTR [rax+0x12]
ffff80000080e850:	48 c1 e0 08          	shl    rax,0x8
ffff80000080e854:	48 39 c2             	cmp    rdx,rax
ffff80000080e857:	72 aa                	jb     ffff80000080e803 <disk_int_handler_c+0x16b>
ffff80000080e859:	e9 d6 00 00 00       	jmp    ffff80000080e934 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:54
    }else if(r_running->cmd==DISKREQ_CHECK)
ffff80000080e85e:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e865:	ff ff ff 
ffff80000080e868:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e86c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e86f:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080e872:	83 f8 02             	cmp    eax,0x2
ffff80000080e875:	75 54                	jne    ffff80000080e8cb <disk_int_handler_c+0x233>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    {
        char stat=inb(port+7);
ffff80000080e877:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e87a:	83 c0 07             	add    eax,0x7
ffff80000080e87d:	0f b6 c0             	movzx  eax,al
ffff80000080e880:	89 c7                	mov    edi,eax
ffff80000080e882:	49 89 df             	mov    r15,rbx
ffff80000080e885:	48 b8 01 a3 ee ff ff 	movabs rax,0xffffffffffeea301
ffff80000080e88c:	ff ff ff 
ffff80000080e88f:	48 01 d8             	add    rax,rbx
ffff80000080e892:	ff d0                	call   rax
ffff80000080e894:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:57
        short dat=inw(port);
ffff80000080e897:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e89a:	0f b7 c0             	movzx  eax,ax
ffff80000080e89d:	89 c7                	mov    edi,eax
ffff80000080e89f:	49 89 df             	mov    r15,rbx
ffff80000080e8a2:	48 b8 0b a3 ee ff ff 	movabs rax,0xffffffffffeea30b
ffff80000080e8a9:	ff ff ff 
ffff80000080e8ac:	48 01 d8             	add    rax,rbx
ffff80000080e8af:	ff d0                	call   rax
ffff80000080e8b1:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        if(1)
        {
            last_chk_res=DISK_CHK_OK;
ffff80000080e8b5:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff80000080e8bc:	ff ff ff 
ffff80000080e8bf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e8c3:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
ffff80000080e8c9:	eb 69                	jmp    ffff80000080e934 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        {
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            last_chk_res=DISK_CHK_ERR;
        }
    }else if(r_running->cmd==DISKREQ_RESET)
ffff80000080e8cb:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e8d2:	ff ff ff 
ffff80000080e8d5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e8d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e8dc:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080e8df:	83 f8 03             	cmp    eax,0x3
ffff80000080e8e2:	75 50                	jne    ffff80000080e934 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:69
    {
        int stat=inb(port+7);
ffff80000080e8e4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e8e7:	83 c0 07             	add    eax,0x7
ffff80000080e8ea:	0f b6 c0             	movzx  eax,al
ffff80000080e8ed:	89 c7                	mov    edi,eax
ffff80000080e8ef:	49 89 df             	mov    r15,rbx
ffff80000080e8f2:	48 b8 01 a3 ee ff ff 	movabs rax,0xffffffffffeea301
ffff80000080e8f9:	ff ff ff 
ffff80000080e8fc:	48 01 d8             	add    rax,rbx
ffff80000080e8ff:	ff d0                	call   rax
ffff80000080e901:	0f b6 c0             	movzx  eax,al
ffff80000080e904:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:70
        printf("reset disk done.\nstat now:%x\n",stat);
ffff80000080e907:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080e90a:	89 c6                	mov    esi,eax
ffff80000080e90c:	48 b8 89 da ff ff ff 	movabs rax,0xffffffffffffda89
ffff80000080e913:	ff ff ff 
ffff80000080e916:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e91a:	48 89 c7             	mov    rdi,rax
ffff80000080e91d:	49 89 df             	mov    r15,rbx
ffff80000080e920:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e925:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080e92c:	ff ff ff 
ffff80000080e92f:	48 01 da             	add    rdx,rbx
ffff80000080e932:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:73
    }
    
    r_running=NULL;
ffff80000080e934:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e93b:	ff ff ff 
ffff80000080e93e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e942:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:74
    end_request(dev_hd);
ffff80000080e949:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e950:	ff ff ff 
ffff80000080e953:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e957:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e959:	0f b7 c0             	movzx  eax,ax
ffff80000080e95c:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:64
    int major=BLKDEV_MAJOR(dev);
ffff80000080e960:	0f b7 45 d2          	movzx  eax,WORD PTR [rbp-0x2e]
ffff80000080e964:	c1 f8 04             	sar    eax,0x4
ffff80000080e967:	83 e0 0f             	and    eax,0xf
ffff80000080e96a:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    blk_devs[major].current_request->dev=-1;
ffff80000080e96d:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e974:	ff ff ff 
ffff80000080e977:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080e97b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080e97e:	48 98                	cdqe   
ffff80000080e980:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e984:	48 01 d0             	add    rax,rdx
ffff80000080e987:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080e98b:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080e990:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e997:	ff ff ff 
ffff80000080e99a:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080e99e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080e9a1:	48 98                	cdqe   
ffff80000080e9a3:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e9a7:	48 01 d0             	add    rax,rdx
ffff80000080e9aa:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080e9ae:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080e9b2:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080e9b9:	ff ff ff 
ffff80000080e9bc:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080e9c0:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080e9c3:	48 63 d2             	movsxd rdx,edx
ffff80000080e9c6:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080e9ca:	48 01 ca             	add    rdx,rcx
ffff80000080e9cd:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
}
ffff80000080e9d1:	90                   	nop
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:76
    //执行下一个请求
    hd_do_req(blk_devs[dev_hd].current_request);
ffff80000080e9d2:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e9d9:	ff ff ff 
ffff80000080e9dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e9e0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e9e2:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080e9e9:	ff ff ff 
ffff80000080e9ec:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e9f0:	48 98                	cdqe   
ffff80000080e9f2:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e9f6:	48 01 d0             	add    rax,rdx
ffff80000080e9f9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080e9fd:	48 89 c7             	mov    rdi,rax
ffff80000080ea00:	49 89 df             	mov    r15,rbx
ffff80000080ea03:	48 b8 7c 14 ef ff ff 	movabs rax,0xffffffffffef147c
ffff80000080ea0a:	ff ff ff 
ffff80000080ea0d:	48 01 d8             	add    rax,rbx
ffff80000080ea10:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    return 0;
ffff80000080ea12:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
}
ffff80000080ea17:	48 83 c4 30          	add    rsp,0x30
ffff80000080ea1b:	5b                   	pop    rbx
ffff80000080ea1c:	41 5f                	pop    r15
ffff80000080ea1e:	5d                   	pop    rbp
ffff80000080ea1f:	c3                   	ret    

ffff80000080ea20 <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
int async_reset_disk(int disk)
{
ffff80000080ea20:	f3 0f 1e fa          	endbr64 
ffff80000080ea24:	55                   	push   rbp
ffff80000080ea25:	48 89 e5             	mov    rbp,rsp
ffff80000080ea28:	41 57                	push   r15
ffff80000080ea2a:	48 83 ec 18          	sub    rsp,0x18
ffff80000080ea2e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ea2e <async_reset_disk+0xe>
ffff80000080ea35:	49 bb 2a f1 10 00 00 	movabs r11,0x10f12a
ffff80000080ea3c:	00 00 00 
ffff80000080ea3f:	4c 01 d8             	add    rax,r11
ffff80000080ea42:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
ffff80000080ea45:	be 0c 00 00 00       	mov    esi,0xc
ffff80000080ea4a:	bf f6 03 00 00       	mov    edi,0x3f6
ffff80000080ea4f:	49 89 c7             	mov    r15,rax
ffff80000080ea52:	48 ba e8 a2 ee ff ff 	movabs rdx,0xffffffffffeea2e8
ffff80000080ea59:	ff ff ff 
ffff80000080ea5c:	48 01 c2             	add    rdx,rax
ffff80000080ea5f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    return 0;
ffff80000080ea61:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
}
ffff80000080ea66:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ea6a:	c9                   	leave  
ffff80000080ea6b:	c3                   	ret    

ffff80000080ea6c <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
ffff80000080ea6c:	f3 0f 1e fa          	endbr64 
ffff80000080ea70:	55                   	push   rbp
ffff80000080ea71:	48 89 e5             	mov    rbp,rsp
ffff80000080ea74:	41 57                	push   r15
ffff80000080ea76:	53                   	push   rbx
ffff80000080ea77:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ea7b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ea7b <async_read_disk+0xf>
ffff80000080ea82:	49 bb dd f0 10 00 00 	movabs r11,0x10f0dd
ffff80000080ea89:	00 00 00 
ffff80000080ea8c:	4c 01 db             	add    rbx,r11
ffff80000080ea8f:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ea92:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ea95:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ea98:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080ea9c:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
    int slave_disk=0;
ffff80000080eaa2:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080eaa9:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080eaad:	74 06                	je     ffff80000080eab5 <async_read_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88 (discriminator 1)
ffff80000080eaaf:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080eab3:	75 06                	jne    ffff80000080eabb <async_read_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
        port=PORT_DISK_SLAVE;
ffff80000080eab5:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080eabb:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080eabf:	74 06                	je     ffff80000080eac7 <async_read_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90 (discriminator 1)
ffff80000080eac1:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080eac5:	75 07                	jne    ffff80000080eace <async_read_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
        slave_disk=1;
ffff80000080eac7:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
    outb(port+2,sec_n);
ffff80000080eace:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080ead1:	0f b6 d0             	movzx  edx,al
ffff80000080ead4:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ead8:	83 c0 02             	add    eax,0x2
ffff80000080eadb:	0f b7 c0             	movzx  eax,ax
ffff80000080eade:	89 d6                	mov    esi,edx
ffff80000080eae0:	89 c7                	mov    edi,eax
ffff80000080eae2:	49 89 df             	mov    r15,rbx
ffff80000080eae5:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eaec:	ff ff ff 
ffff80000080eaef:	48 01 d8             	add    rax,rbx
ffff80000080eaf2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    outb(port+3,lba&0xff);
ffff80000080eaf4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eaf7:	0f b6 d0             	movzx  edx,al
ffff80000080eafa:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eafe:	83 c0 03             	add    eax,0x3
ffff80000080eb01:	0f b7 c0             	movzx  eax,ax
ffff80000080eb04:	89 d6                	mov    esi,edx
ffff80000080eb06:	89 c7                	mov    edi,eax
ffff80000080eb08:	49 89 df             	mov    r15,rbx
ffff80000080eb0b:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eb12:	ff ff ff 
ffff80000080eb15:	48 01 d8             	add    rax,rbx
ffff80000080eb18:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:94
    outb(port+4,(lba>>8)&0xff);
ffff80000080eb1a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eb1d:	c1 e8 08             	shr    eax,0x8
ffff80000080eb20:	0f b6 d0             	movzx  edx,al
ffff80000080eb23:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb27:	83 c0 04             	add    eax,0x4
ffff80000080eb2a:	0f b7 c0             	movzx  eax,ax
ffff80000080eb2d:	89 d6                	mov    esi,edx
ffff80000080eb2f:	89 c7                	mov    edi,eax
ffff80000080eb31:	49 89 df             	mov    r15,rbx
ffff80000080eb34:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eb3b:	ff ff ff 
ffff80000080eb3e:	48 01 d8             	add    rax,rbx
ffff80000080eb41:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    outb(port+5,(lba>>16)&0xff);
ffff80000080eb43:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eb46:	c1 e8 10             	shr    eax,0x10
ffff80000080eb49:	0f b6 d0             	movzx  edx,al
ffff80000080eb4c:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb50:	83 c0 05             	add    eax,0x5
ffff80000080eb53:	0f b7 c0             	movzx  eax,ax
ffff80000080eb56:	89 d6                	mov    esi,edx
ffff80000080eb58:	89 c7                	mov    edi,eax
ffff80000080eb5a:	49 89 df             	mov    r15,rbx
ffff80000080eb5d:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eb64:	ff ff ff 
ffff80000080eb67:	48 01 d8             	add    rax,rbx
ffff80000080eb6a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96
    char drv=slave_disk?0x10:0;
ffff80000080eb6c:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080eb70:	74 07                	je     ffff80000080eb79 <async_read_disk+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 1)
ffff80000080eb72:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080eb77:	eb 05                	jmp    ffff80000080eb7e <async_read_disk+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 2)
ffff80000080eb79:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 4)
ffff80000080eb7e:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080eb81:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eb84:	c1 e8 18             	shr    eax,0x18
ffff80000080eb87:	83 e0 0f             	and    eax,0xf
ffff80000080eb8a:	89 c2                	mov    edx,eax
ffff80000080eb8c:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080eb90:	09 d0                	or     eax,edx
ffff80000080eb92:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080eb95:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080eb98:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffff80000080eb9c:	0f b6 d0             	movzx  edx,al
ffff80000080eb9f:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eba3:	83 c0 06             	add    eax,0x6
ffff80000080eba6:	0f b7 c0             	movzx  eax,ax
ffff80000080eba9:	89 d6                	mov    esi,edx
ffff80000080ebab:	89 c7                	mov    edi,eax
ffff80000080ebad:	49 89 df             	mov    r15,rbx
ffff80000080ebb0:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ebb7:	ff ff ff 
ffff80000080ebba:	48 01 d8             	add    rax,rbx
ffff80000080ebbd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
ffff80000080ebbf:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ebc3:	83 c0 07             	add    eax,0x7
ffff80000080ebc6:	0f b7 c0             	movzx  eax,ax
ffff80000080ebc9:	be 20 00 00 00       	mov    esi,0x20
ffff80000080ebce:	89 c7                	mov    edi,eax
ffff80000080ebd0:	49 89 df             	mov    r15,rbx
ffff80000080ebd3:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ebda:	ff ff ff 
ffff80000080ebdd:	48 01 d8             	add    rax,rbx
ffff80000080ebe0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
ffff80000080ebe2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:120 (discriminator 4)
}
ffff80000080ebe7:	48 83 c4 30          	add    rsp,0x30
ffff80000080ebeb:	5b                   	pop    rbx
ffff80000080ebec:	41 5f                	pop    r15
ffff80000080ebee:	5d                   	pop    rbp
ffff80000080ebef:	c3                   	ret    

ffff80000080ebf0 <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:122
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
ffff80000080ebf0:	f3 0f 1e fa          	endbr64 
ffff80000080ebf4:	55                   	push   rbp
ffff80000080ebf5:	48 89 e5             	mov    rbp,rsp
ffff80000080ebf8:	41 57                	push   r15
ffff80000080ebfa:	53                   	push   rbx
ffff80000080ebfb:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ebff:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ebff <async_write_disk+0xf>
ffff80000080ec06:	49 bb 59 ef 10 00 00 	movabs r11,0x10ef59
ffff80000080ec0d:	00 00 00 
ffff80000080ec10:	4c 01 db             	add    rbx,r11
ffff80000080ec13:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ec16:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ec19:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ec1c:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080ec20:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:124
    int slave_disk=0;
ffff80000080ec26:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ec2d:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080ec31:	74 06                	je     ffff80000080ec39 <async_write_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125 (discriminator 1)
ffff80000080ec33:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ec37:	75 06                	jne    ffff80000080ec3f <async_write_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        port=PORT_DISK_SLAVE;
ffff80000080ec39:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080ec3f:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ec43:	74 06                	je     ffff80000080ec4b <async_write_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127 (discriminator 1)
ffff80000080ec45:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080ec49:	75 07                	jne    ffff80000080ec52 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
        slave_disk=1;
ffff80000080ec4b:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    while (1)
    {
        byte t=inb(0x1f7);
ffff80000080ec52:	bf f7 00 00 00       	mov    edi,0xf7
ffff80000080ec57:	49 89 df             	mov    r15,rbx
ffff80000080ec5a:	48 b8 01 a3 ee ff ff 	movabs rax,0xffffffffffeea301
ffff80000080ec61:	ff ff ff 
ffff80000080ec64:	48 01 d8             	add    rax,rbx
ffff80000080ec67:	ff d0                	call   rax
ffff80000080ec69:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:133
        //logf("istat:%x",t);
        byte err=t&1;
ffff80000080ec6c:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080ec70:	83 e0 01             	and    eax,0x1
ffff80000080ec73:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:134
        if(err!=0)
ffff80000080ec76:	80 7d e6 00          	cmp    BYTE PTR [rbp-0x1a],0x0
ffff80000080ec7a:	74 0a                	je     ffff80000080ec86 <async_write_disk+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        {
            //printf("ERR iwriting disk\n");
            return -1;
ffff80000080ec7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080ec81:	e9 23 01 00 00       	jmp    ffff80000080eda9 <async_write_disk+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        }
        t&=0x88;
ffff80000080ec86:	80 65 e7 88          	and    BYTE PTR [rbp-0x19],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080ec8a:	80 7d e7 08          	cmp    BYTE PTR [rbp-0x19],0x8
ffff80000080ec8e:	74 02                	je     ffff80000080ec92 <async_write_disk+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:130
    {
ffff80000080ec90:	eb c0                	jmp    ffff80000080ec52 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080ec92:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
    }
    outb(port+2,sec_n);
ffff80000080ec93:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080ec96:	0f b6 d0             	movzx  edx,al
ffff80000080ec99:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ec9d:	83 c0 02             	add    eax,0x2
ffff80000080eca0:	0f b7 c0             	movzx  eax,ax
ffff80000080eca3:	89 d6                	mov    esi,edx
ffff80000080eca5:	89 c7                	mov    edi,eax
ffff80000080eca7:	49 89 df             	mov    r15,rbx
ffff80000080ecaa:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ecb1:	ff ff ff 
ffff80000080ecb4:	48 01 d8             	add    rax,rbx
ffff80000080ecb7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:143
    outb(port+3,lba&0xff);
ffff80000080ecb9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ecbc:	0f b6 d0             	movzx  edx,al
ffff80000080ecbf:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ecc3:	83 c0 03             	add    eax,0x3
ffff80000080ecc6:	0f b7 c0             	movzx  eax,ax
ffff80000080ecc9:	89 d6                	mov    esi,edx
ffff80000080eccb:	89 c7                	mov    edi,eax
ffff80000080eccd:	49 89 df             	mov    r15,rbx
ffff80000080ecd0:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ecd7:	ff ff ff 
ffff80000080ecda:	48 01 d8             	add    rax,rbx
ffff80000080ecdd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
    outb(port+4,(lba>>8)&0xff);
ffff80000080ecdf:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ece2:	c1 e8 08             	shr    eax,0x8
ffff80000080ece5:	0f b6 d0             	movzx  edx,al
ffff80000080ece8:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ecec:	83 c0 04             	add    eax,0x4
ffff80000080ecef:	0f b7 c0             	movzx  eax,ax
ffff80000080ecf2:	89 d6                	mov    esi,edx
ffff80000080ecf4:	89 c7                	mov    edi,eax
ffff80000080ecf6:	49 89 df             	mov    r15,rbx
ffff80000080ecf9:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ed00:	ff ff ff 
ffff80000080ed03:	48 01 d8             	add    rax,rbx
ffff80000080ed06:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
    outb(port+5,(lba>>16)&0xff);
ffff80000080ed08:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ed0b:	c1 e8 10             	shr    eax,0x10
ffff80000080ed0e:	0f b6 d0             	movzx  edx,al
ffff80000080ed11:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ed15:	83 c0 05             	add    eax,0x5
ffff80000080ed18:	0f b7 c0             	movzx  eax,ax
ffff80000080ed1b:	89 d6                	mov    esi,edx
ffff80000080ed1d:	89 c7                	mov    edi,eax
ffff80000080ed1f:	49 89 df             	mov    r15,rbx
ffff80000080ed22:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ed29:	ff ff ff 
ffff80000080ed2c:	48 01 d8             	add    rax,rbx
ffff80000080ed2f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146
    char drv=slave_disk?0x10:0;
ffff80000080ed31:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080ed35:	74 07                	je     ffff80000080ed3e <async_write_disk+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 1)
ffff80000080ed37:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080ed3c:	eb 05                	jmp    ffff80000080ed43 <async_write_disk+0x153>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 2)
ffff80000080ed3e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 4)
ffff80000080ed43:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080ed46:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ed49:	c1 e8 18             	shr    eax,0x18
ffff80000080ed4c:	83 e0 0f             	and    eax,0xf
ffff80000080ed4f:	89 c2                	mov    edx,eax
ffff80000080ed51:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffff80000080ed55:	09 d0                	or     eax,edx
ffff80000080ed57:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080ed5a:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080ed5d:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000080ed61:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ed65:	83 c0 06             	add    eax,0x6
ffff80000080ed68:	0f b7 c0             	movzx  eax,ax
ffff80000080ed6b:	89 d6                	mov    esi,edx
ffff80000080ed6d:	89 c7                	mov    edi,eax
ffff80000080ed6f:	49 89 df             	mov    r15,rbx
ffff80000080ed72:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ed79:	ff ff ff 
ffff80000080ed7c:	48 01 d8             	add    rax,rbx
ffff80000080ed7f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:149 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
ffff80000080ed81:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ed85:	83 c0 07             	add    eax,0x7
ffff80000080ed88:	0f b7 c0             	movzx  eax,ax
ffff80000080ed8b:	be 30 00 00 00       	mov    esi,0x30
ffff80000080ed90:	89 c7                	mov    edi,eax
ffff80000080ed92:	49 89 df             	mov    r15,rbx
ffff80000080ed95:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ed9c:	ff ff ff 
ffff80000080ed9f:	48 01 d8             	add    rax,rbx
ffff80000080eda2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
ffff80000080eda4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
}
ffff80000080eda9:	48 83 c4 30          	add    rsp,0x30
ffff80000080edad:	5b                   	pop    rbx
ffff80000080edae:	41 5f                	pop    r15
ffff80000080edb0:	5d                   	pop    rbp
ffff80000080edb1:	c3                   	ret    

ffff80000080edb2 <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
int read_disk(int disk, int lba, int secn, char *dest)
{
ffff80000080edb2:	f3 0f 1e fa          	endbr64 
ffff80000080edb6:	55                   	push   rbp
ffff80000080edb7:	48 89 e5             	mov    rbp,rsp
ffff80000080edba:	41 57                	push   r15
ffff80000080edbc:	53                   	push   rbx
ffff80000080edbd:	48 83 ec 30          	sub    rsp,0x30
ffff80000080edc1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080edc1 <read_disk+0xf>
ffff80000080edc8:	49 bb 97 ed 10 00 00 	movabs r11,0x10ed97
ffff80000080edcf:	00 00 00 
ffff80000080edd2:	4c 01 db             	add    rbx,r11
ffff80000080edd5:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080edd8:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080eddb:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080edde:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    // request(disk,DISKREQ_READ,lba,secn,dest);
    int ret=read_disk_asm(lba,secn,dest);
ffff80000080ede2:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ede6:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080ede9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080edec:	89 ce                	mov    esi,ecx
ffff80000080edee:	89 c7                	mov    edi,eax
ffff80000080edf0:	49 89 df             	mov    r15,rbx
ffff80000080edf3:	48 b8 04 16 ef ff ff 	movabs rax,0xffffffffffef1604
ffff80000080edfa:	ff ff ff 
ffff80000080edfd:	48 01 d8             	add    rax,rbx
ffff80000080ee00:	ff d0                	call   rax
ffff80000080ee02:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:179

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080ee05:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080ee0c:	ff ff ff 
ffff80000080ee0f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee13:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:180
    return ret;
ffff80000080ee1a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:181
}
ffff80000080ee1d:	48 83 c4 30          	add    rsp,0x30
ffff80000080ee21:	5b                   	pop    rbx
ffff80000080ee22:	41 5f                	pop    r15
ffff80000080ee24:	5d                   	pop    rbp
ffff80000080ee25:	c3                   	ret    

ffff80000080ee26 <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:183
int write_disk(int disk, int lba, int secn, char *src)
{
ffff80000080ee26:	f3 0f 1e fa          	endbr64 
ffff80000080ee2a:	55                   	push   rbp
ffff80000080ee2b:	48 89 e5             	mov    rbp,rsp
ffff80000080ee2e:	41 57                	push   r15
ffff80000080ee30:	53                   	push   rbx
ffff80000080ee31:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ee35:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ee35 <write_disk+0xf>
ffff80000080ee3c:	49 bb 23 ed 10 00 00 	movabs r11,0x10ed23
ffff80000080ee43:	00 00 00 
ffff80000080ee46:	4c 01 db             	add    rbx,r11
ffff80000080ee49:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ee4c:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ee4f:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ee52:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:185
    // request(disk,DISKREQ_WRITE,lba,secn,src);
    int ret=write_disk_asm(lba,secn,src);
ffff80000080ee56:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ee5a:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080ee5d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ee60:	89 ce                	mov    esi,ecx
ffff80000080ee62:	89 c7                	mov    edi,eax
ffff80000080ee64:	49 89 df             	mov    r15,rbx
ffff80000080ee67:	48 b8 78 16 ef ff ff 	movabs rax,0xffffffffffef1678
ffff80000080ee6e:	ff ff ff 
ffff80000080ee71:	48 01 d8             	add    rax,rbx
ffff80000080ee74:	ff d0                	call   rax
ffff80000080ee76:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:192
    if(running_req){

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    running_req=NULL;
ffff80000080ee79:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080ee80:	ff ff ff 
ffff80000080ee83:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee87:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:193
    return ret;
ffff80000080ee8e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:194
}
ffff80000080ee91:	48 83 c4 30          	add    rsp,0x30
ffff80000080ee95:	5b                   	pop    rbx
ffff80000080ee96:	41 5f                	pop    r15
ffff80000080ee98:	5d                   	pop    rbp
ffff80000080ee99:	c3                   	ret    

ffff80000080ee9a <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198


int async_check_disk(int disk)
{
ffff80000080ee9a:	f3 0f 1e fa          	endbr64 
ffff80000080ee9e:	55                   	push   rbp
ffff80000080ee9f:	48 89 e5             	mov    rbp,rsp
ffff80000080eea2:	41 57                	push   r15
ffff80000080eea4:	53                   	push   rbx
ffff80000080eea5:	48 83 ec 20          	sub    rsp,0x20
ffff80000080eea9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080eea9 <async_check_disk+0xf>
ffff80000080eeb0:	49 bb af ec 10 00 00 	movabs r11,0x10ecaf
ffff80000080eeb7:	00 00 00 
ffff80000080eeba:	4c 01 db             	add    rbx,r11
ffff80000080eebd:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short disknr=PORT_DISK_MAJOR;
ffff80000080eec0:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    unsigned short chkcmd=0xe0;
ffff80000080eec6:	66 c7 45 ec e0 00    	mov    WORD PTR [rbp-0x14],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080eecc:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080eed0:	74 06                	je     ffff80000080eed8 <async_check_disk+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
ffff80000080eed2:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080eed6:	75 06                	jne    ffff80000080eede <async_check_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        disknr=PORT_DISK_SLAVE;
ffff80000080eed8:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
ffff80000080eede:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080eee2:	74 06                	je     ffff80000080eeea <async_check_disk+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
ffff80000080eee4:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080eee8:	75 06                	jne    ffff80000080eef0 <async_check_disk+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        chkcmd=0xf0;
ffff80000080eeea:	66 c7 45 ec f0 00    	mov    WORD PTR [rbp-0x14],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:205
    outb(disknr+2,1);
ffff80000080eef0:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eef4:	83 c0 02             	add    eax,0x2
ffff80000080eef7:	0f b7 c0             	movzx  eax,ax
ffff80000080eefa:	be 01 00 00 00       	mov    esi,0x1
ffff80000080eeff:	89 c7                	mov    edi,eax
ffff80000080ef01:	49 89 df             	mov    r15,rbx
ffff80000080ef04:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ef0b:	ff ff ff 
ffff80000080ef0e:	48 01 d8             	add    rax,rbx
ffff80000080ef11:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    outb(disknr+3,0);
ffff80000080ef13:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ef17:	83 c0 03             	add    eax,0x3
ffff80000080ef1a:	0f b7 c0             	movzx  eax,ax
ffff80000080ef1d:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ef22:	89 c7                	mov    edi,eax
ffff80000080ef24:	49 89 df             	mov    r15,rbx
ffff80000080ef27:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ef2e:	ff ff ff 
ffff80000080ef31:	48 01 d8             	add    rax,rbx
ffff80000080ef34:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    outb(disknr+4,0);
ffff80000080ef36:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ef3a:	83 c0 04             	add    eax,0x4
ffff80000080ef3d:	0f b7 c0             	movzx  eax,ax
ffff80000080ef40:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ef45:	89 c7                	mov    edi,eax
ffff80000080ef47:	49 89 df             	mov    r15,rbx
ffff80000080ef4a:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ef51:	ff ff ff 
ffff80000080ef54:	48 01 d8             	add    rax,rbx
ffff80000080ef57:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:208
    outb(disknr+5,0);
ffff80000080ef59:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ef5d:	83 c0 05             	add    eax,0x5
ffff80000080ef60:	0f b7 c0             	movzx  eax,ax
ffff80000080ef63:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ef68:	89 c7                	mov    edi,eax
ffff80000080ef6a:	49 89 df             	mov    r15,rbx
ffff80000080ef6d:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ef74:	ff ff ff 
ffff80000080ef77:	48 01 d8             	add    rax,rbx
ffff80000080ef7a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
    outb(disknr+6,chkcmd);//主硬盘
ffff80000080ef7c:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffff80000080ef80:	0f b6 d0             	movzx  edx,al
ffff80000080ef83:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ef87:	83 c0 06             	add    eax,0x6
ffff80000080ef8a:	0f b7 c0             	movzx  eax,ax
ffff80000080ef8d:	89 d6                	mov    esi,edx
ffff80000080ef8f:	89 c7                	mov    edi,eax
ffff80000080ef91:	49 89 df             	mov    r15,rbx
ffff80000080ef94:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ef9b:	ff ff ff 
ffff80000080ef9e:	48 01 d8             	add    rax,rbx
ffff80000080efa1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
    outb(disknr+7,DISK_CMD_CHECK);
ffff80000080efa3:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080efa7:	83 c0 07             	add    eax,0x7
ffff80000080efaa:	0f b7 c0             	movzx  eax,ax
ffff80000080efad:	be 90 00 00 00       	mov    esi,0x90
ffff80000080efb2:	89 c7                	mov    edi,eax
ffff80000080efb4:	49 89 df             	mov    r15,rbx
ffff80000080efb7:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080efbe:	ff ff ff 
ffff80000080efc1:	48 01 d8             	add    rax,rbx
ffff80000080efc4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
ffff80000080efc6:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
}
ffff80000080efcb:	48 83 c4 20          	add    rsp,0x20
ffff80000080efcf:	5b                   	pop    rbx
ffff80000080efd0:	41 5f                	pop    r15
ffff80000080efd2:	5d                   	pop    rbp
ffff80000080efd3:	c3                   	ret    

ffff80000080efd4 <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:226

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(struct request* req)
{
ffff80000080efd4:	f3 0f 1e fa          	endbr64 
ffff80000080efd8:	55                   	push   rbp
ffff80000080efd9:	48 89 e5             	mov    rbp,rsp
ffff80000080efdc:	41 57                	push   r15
ffff80000080efde:	48 83 ec 28          	sub    rsp,0x28
ffff80000080efe2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080efe2 <hd_do_req+0xe>
ffff80000080efe9:	49 bb 76 eb 10 00 00 	movabs r11,0x10eb76
ffff80000080eff0:	00 00 00 
ffff80000080eff3:	4c 01 d8             	add    rax,r11
ffff80000080eff6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:227
    if(!req)
ffff80000080effa:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080efff:	75 0a                	jne    ffff80000080f00b <hd_do_req+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:228
        return -1;
ffff80000080f001:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f006:	e9 35 01 00 00       	jmp    ffff80000080f140 <hd_do_req+0x16c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:229
    start_request(req->dev);
ffff80000080f00b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f00f:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080f012:	0f b7 d2             	movzx  edx,dx
ffff80000080f015:	66 89 55 ea          	mov    WORD PTR [rbp-0x16],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080f019:	0f b7 55 ea          	movzx  edx,WORD PTR [rbp-0x16]
ffff80000080f01d:	c1 fa 04             	sar    edx,0x4
ffff80000080f020:	89 d1                	mov    ecx,edx
ffff80000080f022:	83 e1 0f             	and    ecx,0xf
ffff80000080f025:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080f02c:	ff ff ff 
ffff80000080f02f:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080f033:	48 63 d1             	movsxd rdx,ecx
ffff80000080f036:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f03a:	48 01 f2             	add    rdx,rsi
ffff80000080f03d:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080f041:	48 8b 52 2a          	mov    rdx,QWORD PTR [rdx+0x2a]
ffff80000080f045:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:195
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080f049:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f04d:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080f050:	83 fa 02             	cmp    edx,0x2
ffff80000080f053:	74 0c                	je     ffff80000080f061 <hd_do_req+0x8d>
ffff80000080f055:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f059:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080f05c:	83 fa 01             	cmp    edx,0x1
ffff80000080f05f:	75 0b                	jne    ffff80000080f06c <hd_do_req+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
            p->stat=TASK_SUSPENDED;
ffff80000080f061:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f065:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
}
ffff80000080f06c:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
ffff80000080f06d:	90                   	nop
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:230
    int diski=BLKDEV_MINOR(req->dev);
ffff80000080f06e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f072:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080f075:	0f b7 d2             	movzx  edx,dx
ffff80000080f078:	83 e2 0f             	and    edx,0xf
ffff80000080f07b:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:233
    // for(;disks[diski]!=args->dev;diski++);

    switch (req->cmd)
ffff80000080f07e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f082:	8b 52 02             	mov    edx,DWORD PTR [rdx+0x2]
ffff80000080f085:	83 fa 04             	cmp    edx,0x4
ffff80000080f088:	0f 84 8d 00 00 00    	je     ffff80000080f11b <hd_do_req+0x147>
ffff80000080f08e:	83 fa 04             	cmp    edx,0x4
ffff80000080f091:	0f 8f 9d 00 00 00    	jg     ffff80000080f134 <hd_do_req+0x160>
ffff80000080f097:	85 d2                	test   edx,edx
ffff80000080f099:	74 0a                	je     ffff80000080f0a5 <hd_do_req+0xd1>
ffff80000080f09b:	83 fa 01             	cmp    edx,0x1
ffff80000080f09e:	74 40                	je     ffff80000080f0e0 <hd_do_req+0x10c>
ffff80000080f0a0:	e9 8f 00 00 00       	jmp    ffff80000080f134 <hd_do_req+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:236
    {
    case BLKDEV_REQ_READ:
        async_read_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080f0a5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f0a9:	48 8b 52 22          	mov    rdx,QWORD PTR [rdx+0x22]
ffff80000080f0ad:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f0b1:	48 8b 49 12          	mov    rcx,QWORD PTR [rcx+0x12]
ffff80000080f0b5:	41 89 c8             	mov    r8d,ecx
ffff80000080f0b8:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f0bc:	48 8b 49 0a          	mov    rcx,QWORD PTR [rcx+0xa]
ffff80000080f0c0:	89 ce                	mov    esi,ecx
ffff80000080f0c2:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080f0c5:	48 89 d1             	mov    rcx,rdx
ffff80000080f0c8:	44 89 c2             	mov    edx,r8d
ffff80000080f0cb:	49 89 c7             	mov    r15,rax
ffff80000080f0ce:	49 b8 14 0f ef ff ff 	movabs r8,0xffffffffffef0f14
ffff80000080f0d5:	ff ff ff 
ffff80000080f0d8:	49 01 c0             	add    r8,rax
ffff80000080f0db:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:237
        break;
ffff80000080f0de:	eb 5b                	jmp    ffff80000080f13b <hd_do_req+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:239
    case BLKDEV_REQ_WRITE:
        async_write_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080f0e0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f0e4:	48 8b 52 22          	mov    rdx,QWORD PTR [rdx+0x22]
ffff80000080f0e8:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f0ec:	48 8b 49 12          	mov    rcx,QWORD PTR [rcx+0x12]
ffff80000080f0f0:	41 89 c8             	mov    r8d,ecx
ffff80000080f0f3:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f0f7:	48 8b 49 0a          	mov    rcx,QWORD PTR [rcx+0xa]
ffff80000080f0fb:	89 ce                	mov    esi,ecx
ffff80000080f0fd:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080f100:	48 89 d1             	mov    rcx,rdx
ffff80000080f103:	44 89 c2             	mov    edx,r8d
ffff80000080f106:	49 89 c7             	mov    r15,rax
ffff80000080f109:	49 b8 98 10 ef ff ff 	movabs r8,0xffffffffffef1098
ffff80000080f110:	ff ff ff 
ffff80000080f113:	49 01 c0             	add    r8,rax
ffff80000080f116:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:240
        break;
ffff80000080f119:	eb 20                	jmp    ffff80000080f13b <hd_do_req+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242
    case DRVF_CHK:
        async_check_disk(diski);
ffff80000080f11b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080f11e:	89 d7                	mov    edi,edx
ffff80000080f120:	49 89 c7             	mov    r15,rax
ffff80000080f123:	48 ba 42 13 ef ff ff 	movabs rdx,0xffffffffffef1342
ffff80000080f12a:	ff ff ff 
ffff80000080f12d:	48 01 c2             	add    rdx,rax
ffff80000080f130:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
        break;
ffff80000080f132:	eb 07                	jmp    ffff80000080f13b <hd_do_req+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:244
    default:return -1;
ffff80000080f134:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f139:	eb 05                	jmp    ffff80000080f140 <hd_do_req+0x16c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    }
    return 0;
ffff80000080f13b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:247
ffff80000080f140:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f144:	c9                   	leave  
ffff80000080f145:	c3                   	ret    
ffff80000080f146:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080f14d:	00 00 00 

ffff80000080f150 <disk_int_handler>:
disk_int_handler():
ffff80000080f150:	e8 19 8d ff ff       	call   ffff800000807e6e <eoi>
ffff80000080f155:	e8 3e f5 ff ff       	call   ffff80000080e698 <disk_int_handler_c>
ffff80000080f15a:	48 cf                	iretq  

ffff80000080f15c <read_disk_asm>:
read_disk_asm():
ffff80000080f15c:	55                   	push   rbp
ffff80000080f15d:	48 89 e5             	mov    rbp,rsp
ffff80000080f160:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f164:	31 c9                	xor    ecx,ecx
ffff80000080f166:	48 89 f8             	mov    rax,rdi
ffff80000080f169:	48 89 f1             	mov    rcx,rsi
ffff80000080f16c:	48 89 d3             	mov    rbx,rdx
ffff80000080f16f:	48 89 c6             	mov    rsi,rax
ffff80000080f172:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f176:	88 c8                	mov    al,cl
ffff80000080f178:	ee                   	out    dx,al
ffff80000080f179:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f17d:	89 f0                	mov    eax,esi
ffff80000080f17f:	ee                   	out    dx,al
ffff80000080f180:	66 ff c2             	inc    dx
ffff80000080f183:	c1 e8 08             	shr    eax,0x8
ffff80000080f186:	ee                   	out    dx,al
ffff80000080f187:	66 ff c2             	inc    dx
ffff80000080f18a:	c1 e8 08             	shr    eax,0x8
ffff80000080f18d:	ee                   	out    dx,al
ffff80000080f18e:	66 ff c2             	inc    dx
ffff80000080f191:	66 c1 e8 08          	shr    ax,0x8
ffff80000080f195:	24 0f                	and    al,0xf
ffff80000080f197:	0c e0                	or     al,0xe0
ffff80000080f199:	ee                   	out    dx,al
ffff80000080f19a:	66 ff c2             	inc    dx
ffff80000080f19d:	b0 20                	mov    al,0x20
ffff80000080f19f:	ee                   	out    dx,al

ffff80000080f1a0 <read_disk_asm.wait>:
read_disk_asm.wait():
ffff80000080f1a0:	90                   	nop
ffff80000080f1a1:	ec                   	in     al,dx
ffff80000080f1a2:	24 88                	and    al,0x88
ffff80000080f1a4:	3c 08                	cmp    al,0x8
ffff80000080f1a6:	75 f8                	jne    ffff80000080f1a0 <read_disk_asm.wait>
ffff80000080f1a8:	66 89 d7             	mov    di,dx
ffff80000080f1ab:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080f1af:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f1b3 <read_disk_asm.read>:
read_disk_asm.read():
ffff80000080f1b3:	66 ed                	in     ax,dx
ffff80000080f1b5:	66 89 03             	mov    WORD PTR [rbx],ax
ffff80000080f1b8:	48 83 c3 02          	add    rbx,0x2
ffff80000080f1bc:	e2 f5                	loop   ffff80000080f1b3 <read_disk_asm.read>
ffff80000080f1be:	c9                   	leave  
ffff80000080f1bf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f1c4:	c3                   	ret    

ffff80000080f1c5 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
ffff80000080f1c5:	66 ba f1 01          	mov    dx,0x1f1
ffff80000080f1c9:	48 31 c0             	xor    rax,rax
ffff80000080f1cc:	66 ed                	in     ax,dx
ffff80000080f1ce:	c9                   	leave  
ffff80000080f1cf:	c3                   	ret    

ffff80000080f1d0 <write_disk_asm>:
write_disk_asm():
ffff80000080f1d0:	55                   	push   rbp
ffff80000080f1d1:	48 89 e5             	mov    rbp,rsp
ffff80000080f1d4:	48 89 f8             	mov    rax,rdi
ffff80000080f1d7:	48 89 f1             	mov    rcx,rsi
ffff80000080f1da:	48 89 d3             	mov    rbx,rdx
ffff80000080f1dd:	50                   	push   rax
ffff80000080f1de:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f1e2:	88 c8                	mov    al,cl
ffff80000080f1e4:	ee                   	out    dx,al
ffff80000080f1e5:	58                   	pop    rax
ffff80000080f1e6:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f1ea:	ee                   	out    dx,al
ffff80000080f1eb:	c1 e8 08             	shr    eax,0x8
ffff80000080f1ee:	66 ba f4 01          	mov    dx,0x1f4
ffff80000080f1f2:	ee                   	out    dx,al
ffff80000080f1f3:	c1 e8 08             	shr    eax,0x8
ffff80000080f1f6:	66 ba f5 01          	mov    dx,0x1f5
ffff80000080f1fa:	ee                   	out    dx,al
ffff80000080f1fb:	c1 e8 08             	shr    eax,0x8
ffff80000080f1fe:	24 0f                	and    al,0xf
ffff80000080f200:	0c e0                	or     al,0xe0
ffff80000080f202:	66 ba f6 01          	mov    dx,0x1f6
ffff80000080f206:	ee                   	out    dx,al
ffff80000080f207:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f20b:	b0 30                	mov    al,0x30
ffff80000080f20d:	ee                   	out    dx,al

ffff80000080f20e <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
ffff80000080f20e:	90                   	nop
ffff80000080f20f:	ec                   	in     al,dx
ffff80000080f210:	24 88                	and    al,0x88
ffff80000080f212:	3c 08                	cmp    al,0x8
ffff80000080f214:	75 f8                	jne    ffff80000080f20e <write_disk_asm.not_ready2>
ffff80000080f216:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080f21a:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f21e <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
ffff80000080f21e:	66 8b 03             	mov    ax,WORD PTR [rbx]
ffff80000080f221:	66 ef                	out    dx,ax
ffff80000080f223:	83 c3 02             	add    ebx,0x2
ffff80000080f226:	e2 f6                	loop   ffff80000080f21e <write_disk_asm.go_on_write>
ffff80000080f228:	c9                   	leave  
ffff80000080f229:	c3                   	ret    

ffff80000080f22a <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:15
#include "proc.h"
#include "devman.h"
#include <sys/unistd.h>

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
ffff80000080f22a:	f3 0f 1e fa          	endbr64 
ffff80000080f22e:	55                   	push   rbp
ffff80000080f22f:	48 89 e5             	mov    rbp,rsp
ffff80000080f232:	41 57                	push   r15
ffff80000080f234:	53                   	push   rbx
ffff80000080f235:	48 83 ec 20          	sub    rsp,0x20
ffff80000080f239:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f239 <DISK1_FAT32_read_FAT_Entry+0xf>
ffff80000080f240:	49 bb 1f e9 10 00 00 	movabs r11,0x10e91f
ffff80000080f247:	00 00 00 
ffff80000080f24a:	4c 01 db             	add    rbx,r11
ffff80000080f24d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080f251:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
	unsigned int *buf;
	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080f254:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f258:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f25c:	89 c2                	mov    edx,eax
ffff80000080f25e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f261:	c1 e8 07             	shr    eax,0x7
ffff80000080f264:	01 d0                	add    eax,edx
ffff80000080f266:	89 c2                	mov    edx,eax
ffff80000080f268:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f26f:	ff ff ff 
ffff80000080f272:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f276:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f279:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f27d:	0f b7 c0             	movzx  eax,ax
ffff80000080f280:	89 d6                	mov    esi,edx
ffff80000080f282:	89 c7                	mov    edi,eax
ffff80000080f284:	49 89 df             	mov    r15,rbx
ffff80000080f287:	48 b8 e2 fc ee ff ff 	movabs rax,0xffffffffffeefce2
ffff80000080f28e:	ff ff ff 
ffff80000080f291:	48 01 d8             	add    rax,rbx
ffff80000080f294:	ff d0                	call   rax
ffff80000080f296:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:18
	buf=bh->data;
ffff80000080f29a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f29e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f2a1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%#010x\n",fat_entry,buf[fat_entry & 0x7f]);
ffff80000080f2a5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f2a8:	83 e0 7f             	and    eax,0x7f
ffff80000080f2ab:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f2b2:	00 
ffff80000080f2b3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f2b7:	48 01 d0             	add    rax,rdx
ffff80000080f2ba:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080f2bc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f2bf:	89 c6                	mov    esi,eax
ffff80000080f2c1:	48 b8 a8 da ff ff ff 	movabs rax,0xffffffffffffdaa8
ffff80000080f2c8:	ff ff ff 
ffff80000080f2cb:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f2cf:	48 89 c7             	mov    rdi,rax
ffff80000080f2d2:	49 89 df             	mov    r15,rbx
ffff80000080f2d5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f2da:	48 b9 9b 3b ee ff ff 	movabs rcx,0xffffffffffee3b9b
ffff80000080f2e1:	ff ff ff 
ffff80000080f2e4:	48 01 d9             	add    rcx,rbx
ffff80000080f2e7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:20
	brelse(bh);
ffff80000080f2e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f2ed:	48 89 c7             	mov    rdi,rax
ffff80000080f2f0:	49 89 df             	mov    r15,rbx
ffff80000080f2f3:	48 b8 10 03 ef ff ff 	movabs rax,0xffffffffffef0310
ffff80000080f2fa:	ff ff ff 
ffff80000080f2fd:	48 01 d8             	add    rax,rbx
ffff80000080f300:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21
	return buf[fat_entry & 0x7f] & 0x0fffffff;
ffff80000080f302:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f305:	83 e0 7f             	and    eax,0x7f
ffff80000080f308:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f30f:	00 
ffff80000080f310:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f314:	48 01 d0             	add    rax,rdx
ffff80000080f317:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f319:	25 ff ff ff 0f       	and    eax,0xfffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:22
}
ffff80000080f31e:	48 83 c4 20          	add    rsp,0x20
ffff80000080f322:	5b                   	pop    rbx
ffff80000080f323:	41 5f                	pop    r15
ffff80000080f325:	5d                   	pop    rbp
ffff80000080f326:	c3                   	ret    

ffff80000080f327 <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:26


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
ffff80000080f327:	f3 0f 1e fa          	endbr64 
ffff80000080f32b:	55                   	push   rbp
ffff80000080f32c:	48 89 e5             	mov    rbp,rsp
ffff80000080f32f:	41 57                	push   r15
ffff80000080f331:	53                   	push   rbx
ffff80000080f332:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f336:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f336 <DISK1_FAT32_write_FAT_Entry+0xf>
ffff80000080f33d:	49 bb 22 e8 10 00 00 	movabs r11,0x10e822
ffff80000080f344:	00 00 00 
ffff80000080f347:	4c 01 db             	add    rbx,r11
ffff80000080f34a:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080f34e:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080f351:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30
	unsigned int *buf;
	int i;

	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080f354:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f358:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f35c:	89 c2                	mov    edx,eax
ffff80000080f35e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f361:	c1 e8 07             	shr    eax,0x7
ffff80000080f364:	01 d0                	add    eax,edx
ffff80000080f366:	89 c2                	mov    edx,eax
ffff80000080f368:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f36f:	ff ff ff 
ffff80000080f372:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f376:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f379:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f37d:	0f b7 c0             	movzx  eax,ax
ffff80000080f380:	89 d6                	mov    esi,edx
ffff80000080f382:	89 c7                	mov    edi,eax
ffff80000080f384:	49 89 df             	mov    r15,rbx
ffff80000080f387:	48 b8 e2 fc ee ff ff 	movabs rax,0xffffffffffeefce2
ffff80000080f38e:	ff ff ff 
ffff80000080f391:	48 01 d8             	add    rax,rbx
ffff80000080f394:	ff d0                	call   rax
ffff80000080f396:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:31
	buf=bh->data;
ffff80000080f39a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f39e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f3a1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
ffff80000080f3a5:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f3a8:	83 e0 7f             	and    eax,0x7f
ffff80000080f3ab:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f3b2:	00 
ffff80000080f3b3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f3b7:	48 01 d0             	add    rax,rdx
ffff80000080f3ba:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f3bc:	25 00 00 00 f0       	and    eax,0xf0000000
ffff80000080f3c1:	89 c1                	mov    ecx,eax
ffff80000080f3c3:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff80000080f3c6:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080f3cb:	89 c2                	mov    edx,eax
ffff80000080f3cd:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f3d0:	83 e0 7f             	and    eax,0x7f
ffff80000080f3d3:	48 8d 34 85 00 00 00 	lea    rsi,[rax*4+0x0]
ffff80000080f3da:	00 
ffff80000080f3db:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f3df:	48 01 f0             	add    rax,rsi
ffff80000080f3e2:	09 ca                	or     edx,ecx
ffff80000080f3e4:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34

	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080f3e6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080f3ed:	eb 6d                	jmp    ffff80000080f45c <DISK1_FAT32_write_FAT_Entry+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:35 (discriminator 3)
		off_t off=(fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7))*SECTOR_SIZE;
ffff80000080f3ef:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f3f3:	48 8b 48 30          	mov    rcx,QWORD PTR [rax+0x30]
ffff80000080f3f7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f3fb:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
ffff80000080f3ff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f402:	48 98                	cdqe   
ffff80000080f404:	48 0f af c2          	imul   rax,rdx
ffff80000080f408:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080f40c:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f40f:	c1 e8 07             	shr    eax,0x7
ffff80000080f412:	89 c0                	mov    eax,eax
ffff80000080f414:	48 01 d0             	add    rax,rdx
ffff80000080f417:	c1 e0 09             	shl    eax,0x9
ffff80000080f41a:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:36 (discriminator 3)
		blkdev_write(root_sb->dev,off,SECTOR_SIZE,buf);
ffff80000080f41d:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f424:	ff ff ff 
ffff80000080f427:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f42b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f42e:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f432:	0f b7 c0             	movzx  eax,ax
ffff80000080f435:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f439:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
ffff80000080f43c:	48 89 d1             	mov    rcx,rdx
ffff80000080f43f:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f444:	89 c7                	mov    edi,eax
ffff80000080f446:	49 89 df             	mov    r15,rbx
ffff80000080f449:	48 b8 95 01 ef ff ff 	movabs rax,0xffffffffffef0195
ffff80000080f450:	ff ff ff 
ffff80000080f453:	48 01 d8             	add    rax,rbx
ffff80000080f456:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080f458:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 1)
ffff80000080f45c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f45f:	48 63 d0             	movsxd rdx,eax
ffff80000080f462:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f466:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f46a:	48 39 c2             	cmp    rdx,rax
ffff80000080f46d:	72 80                	jb     ffff80000080f3ef <DISK1_FAT32_write_FAT_Entry+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38
    }
	brelse(bh);
ffff80000080f46f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f473:	48 89 c7             	mov    rdi,rax
ffff80000080f476:	49 89 df             	mov    r15,rbx
ffff80000080f479:	48 b8 10 03 ef ff ff 	movabs rax,0xffffffffffef0310
ffff80000080f480:	ff ff ff 
ffff80000080f483:	48 01 d8             	add    rax,rbx
ffff80000080f486:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:39
	return 1;
ffff80000080f488:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:40
}
ffff80000080f48d:	48 83 c4 30          	add    rsp,0x30
ffff80000080f491:	5b                   	pop    rbx
ffff80000080f492:	41 5f                	pop    r15
ffff80000080f494:	5d                   	pop    rbp
ffff80000080f495:	c3                   	ret    

ffff80000080f496 <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:44


long FAT32_open(struct index_node * inode,struct file * filp)
{
ffff80000080f496:	f3 0f 1e fa          	endbr64 
ffff80000080f49a:	55                   	push   rbp
ffff80000080f49b:	48 89 e5             	mov    rbp,rsp
ffff80000080f49e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f49e <FAT32_open+0x8>
ffff80000080f4a5:	49 bb ba e6 10 00 00 	movabs r11,0x10e6ba
ffff80000080f4ac:	00 00 00 
ffff80000080f4af:	4c 01 d8             	add    rax,r11
ffff80000080f4b2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f4b6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:45
	return 1;
ffff80000080f4ba:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:46
}
ffff80000080f4bf:	5d                   	pop    rbp
ffff80000080f4c0:	c3                   	ret    

ffff80000080f4c1 <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:50


long FAT32_close(struct index_node * inode,struct file * filp)
{
ffff80000080f4c1:	f3 0f 1e fa          	endbr64 
ffff80000080f4c5:	55                   	push   rbp
ffff80000080f4c6:	48 89 e5             	mov    rbp,rsp
ffff80000080f4c9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f4c9 <FAT32_close+0x8>
ffff80000080f4d0:	49 bb 8f e6 10 00 00 	movabs r11,0x10e68f
ffff80000080f4d7:	00 00 00 
ffff80000080f4da:	4c 01 d8             	add    rax,r11
ffff80000080f4dd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f4e1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:51
	return 1;
ffff80000080f4e5:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:52
}
ffff80000080f4ea:	5d                   	pop    rbp
ffff80000080f4eb:	c3                   	ret    

ffff80000080f4ec <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:56


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080f4ec:	f3 0f 1e fa          	endbr64 
ffff80000080f4f0:	55                   	push   rbp
ffff80000080f4f1:	48 89 e5             	mov    rbp,rsp
ffff80000080f4f4:	41 57                	push   r15
ffff80000080f4f6:	53                   	push   rbx
ffff80000080f4f7:	48 83 ec 70          	sub    rsp,0x70
ffff80000080f4fb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f4fb <FAT32_read+0xf>
ffff80000080f502:	49 bb 5d e6 10 00 00 	movabs r11,0x10e65d
ffff80000080f509:	00 00 00 
ffff80000080f50c:	4c 01 db             	add    rbx,r11
ffff80000080f50f:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080f513:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff80000080f517:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff80000080f51b:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:57
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080f51f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f523:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f527:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f52b:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080f52f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:58
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080f533:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f537:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f53b:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f53f:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080f543:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080f547:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60

	unsigned long cluster = finode->first_cluster;
ffff80000080f54b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f54f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f552:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	unsigned long sector = 0;
ffff80000080f556:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080f55d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	int i,length = 0;
ffff80000080f55e:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:63
	long retval = 0;
ffff80000080f565:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080f56c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:64
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080f56d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f571:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f574:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080f578:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080f57c:	48 99                	cqo    
ffff80000080f57e:	48 f7 fe             	idiv   rsi
ffff80000080f581:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080f584:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f588:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f58b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080f58f:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080f593:	48 99                	cqo    
ffff80000080f595:	48 f7 f9             	idiv   rcx
ffff80000080f598:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:66
	char * buffer = (char *) kmallocat(0,(fsbi->bytes_per_cluster+PAGE_4K_SIZE-1)/PAGE_4K_SIZE);
ffff80000080f59c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f5a0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f5a4:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080f5aa:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080f5b1:	48 85 c0             	test   rax,rax
ffff80000080f5b4:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080f5b8:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080f5bc:	89 c6                	mov    esi,eax
ffff80000080f5be:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080f5c3:	49 89 df             	mov    r15,rbx
ffff80000080f5c6:	48 b8 18 45 ee ff ff 	movabs rax,0xffffffffffee4518
ffff80000080f5cd:	ff ff ff 
ffff80000080f5d0:	48 01 d8             	add    rax,rbx
ffff80000080f5d3:	ff d0                	call   rax
ffff80000080f5d5:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68

	if(!cluster)
ffff80000080f5d9:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f5de:	75 0c                	jne    ffff80000080f5ec <FAT32_read+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69
		return -EFAULT;
ffff80000080f5e0:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080f5e7:	e9 6d 02 00 00       	jmp    ffff80000080f859 <FAT32_read+0x36d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70
	for(i = 0;i < index;i++)
ffff80000080f5ec:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080f5f3:	eb 2b                	jmp    ffff80000080f620 <FAT32_read+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:71 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080f5f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f5f9:	89 c2                	mov    edx,eax
ffff80000080f5fb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f5ff:	89 d6                	mov    esi,edx
ffff80000080f601:	48 89 c7             	mov    rdi,rax
ffff80000080f604:	49 89 df             	mov    r15,rbx
ffff80000080f607:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff80000080f60e:	ff ff ff 
ffff80000080f611:	48 01 d8             	add    rax,rbx
ffff80000080f614:	ff d0                	call   rax
ffff80000080f616:	89 c0                	mov    eax,eax
ffff80000080f618:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70 (discriminator 3)
	for(i = 0;i < index;i++)
ffff80000080f61c:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70 (discriminator 1)
ffff80000080f620:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080f623:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080f626:	7c cd                	jl     ffff80000080f5f5 <FAT32_read+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73

	if(*position + count > filp->dentry->dir_inode->file_size)
ffff80000080f628:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f62c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f62f:	48 89 c2             	mov    rdx,rax
ffff80000080f632:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f636:	48 01 c2             	add    rdx,rax
ffff80000080f639:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f63d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f641:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f645:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f648:	48 39 c2             	cmp    rdx,rax
ffff80000080f64b:	76 2c                	jbe    ffff80000080f679 <FAT32_read+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:74
		index = count = filp->dentry->dir_inode->file_size - *position;
ffff80000080f64d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f651:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f655:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f659:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f65c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f660:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f663:	48 89 c1             	mov    rcx,rax
ffff80000080f666:	48 89 d0             	mov    rax,rdx
ffff80000080f669:	48 29 c8             	sub    rax,rcx
ffff80000080f66c:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080f670:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f674:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000080f677:	eb 07                	jmp    ffff80000080f680 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:76
	else
		index = count;
ffff80000080f679:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f67d:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:82

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080f680:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f684:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f688:	89 c2                	mov    edx,eax
ffff80000080f68a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f68e:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f693:	48 89 c7             	mov    rdi,rax
ffff80000080f696:	49 89 df             	mov    r15,rbx
ffff80000080f699:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080f6a0:	ff ff ff 
ffff80000080f6a3:	48 01 d8             	add    rax,rbx
ffff80000080f6a6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:83
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080f6a8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f6ac:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080f6b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f6b4:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080f6b8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f6bc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f6c0:	48 0f af c2          	imul   rax,rdx
ffff80000080f6c4:	48 01 c8             	add    rax,rcx
ffff80000080f6c7:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:84
		if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080f6cb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f6cf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f6d3:	48 c1 e0 09          	shl    rax,0x9
ffff80000080f6d7:	48 89 c7             	mov    rdi,rax
ffff80000080f6da:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f6de:	c1 e0 09             	shl    eax,0x9
ffff80000080f6e1:	89 c6                	mov    esi,eax
ffff80000080f6e3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f6e7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f6eb:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f6ef:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080f6f3:	0f b7 c0             	movzx  eax,ax
ffff80000080f6f6:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080f6fa:	48 89 d1             	mov    rcx,rdx
ffff80000080f6fd:	48 89 fa             	mov    rdx,rdi
ffff80000080f700:	89 c7                	mov    edi,eax
ffff80000080f702:	49 89 df             	mov    r15,rbx
ffff80000080f705:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff80000080f70c:	ff ff ff 
ffff80000080f70f:	48 01 d8             	add    rax,rbx
ffff80000080f712:	ff d0                	call   rax
ffff80000080f714:	85 c0                	test   eax,eax
ffff80000080f716:	79 35                	jns    ffff80000080f74d <FAT32_read+0x261>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
ffff80000080f718:	48 b8 d8 da ff ff ff 	movabs rax,0xffffffffffffdad8
ffff80000080f71f:	ff ff ff 
ffff80000080f722:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f726:	48 89 c7             	mov    rdi,rax
ffff80000080f729:	49 89 df             	mov    r15,rbx
ffff80000080f72c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f731:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080f738:	ff ff ff 
ffff80000080f73b:	48 01 da             	add    rdx,rbx
ffff80000080f73e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:87
			retval = -EIO;
ffff80000080f740:	48 c7 45 d8 e3 ff ff 	mov    QWORD PTR [rbp-0x28],0xffffffffffffffe3
ffff80000080f747:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:88
			break;
ffff80000080f748:	e9 e1 00 00 00       	jmp    ffff80000080f82e <FAT32_read+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:91
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080f74d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f750:	48 63 d0             	movsxd rdx,eax
ffff80000080f753:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f757:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f75b:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff80000080f75f:	48 39 c2             	cmp    rdx,rax
ffff80000080f762:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080f766:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:93

		if((unsigned long)buf < MAX_TASKS)
ffff80000080f769:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f76d:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080f771:	77 2c                	ja     ffff80000080f79f <FAT32_read+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:94
			memcpy(buffer + offset,buf,length);
ffff80000080f773:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080f776:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080f77a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f77e:	48 01 c1             	add    rcx,rax
ffff80000080f781:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f785:	48 89 c6             	mov    rsi,rax
ffff80000080f788:	48 89 cf             	mov    rdi,rcx
ffff80000080f78b:	49 89 df             	mov    r15,rbx
ffff80000080f78e:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080f795:	ff ff ff 
ffff80000080f798:	48 01 d8             	add    rax,rbx
ffff80000080f79b:	ff d0                	call   rax
ffff80000080f79d:	eb 2a                	jmp    ffff80000080f7c9 <FAT32_read+0x2dd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:96
		else
			memcpy(buffer + offset,buf,length);
ffff80000080f79f:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080f7a2:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080f7a6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f7aa:	48 01 c1             	add    rcx,rax
ffff80000080f7ad:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f7b1:	48 89 c6             	mov    rsi,rax
ffff80000080f7b4:	48 89 cf             	mov    rdi,rcx
ffff80000080f7b7:	49 89 df             	mov    r15,rbx
ffff80000080f7ba:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080f7c1:	ff ff ff 
ffff80000080f7c4:	48 01 d8             	add    rax,rbx
ffff80000080f7c7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98

		index -= length;
ffff80000080f7c9:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f7cc:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:99
		buf += length;
ffff80000080f7cf:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f7d2:	48 98                	cdqe   
ffff80000080f7d4:	48 01 45 90          	add    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
		offset -= offset;
ffff80000080f7d8:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080f7df:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:101
		*position += length;
ffff80000080f7e0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f7e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f7e7:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f7ea:	48 98                	cdqe   
ffff80000080f7ec:	48 01 c2             	add    rdx,rax
ffff80000080f7ef:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f7f3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
ffff80000080f7f6:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080f7fa:	74 32                	je     ffff80000080f82e <FAT32_read+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102 (discriminator 1)
ffff80000080f7fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f800:	89 c2                	mov    edx,eax
ffff80000080f802:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f806:	89 d6                	mov    esi,edx
ffff80000080f808:	48 89 c7             	mov    rdi,rax
ffff80000080f80b:	49 89 df             	mov    r15,rbx
ffff80000080f80e:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff80000080f815:	ff ff ff 
ffff80000080f818:	48 01 d8             	add    rax,rbx
ffff80000080f81b:	ff d0                	call   rax
ffff80000080f81d:	89 c0                	mov    eax,eax
ffff80000080f81f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080f823:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f828:	0f 85 52 fe ff ff    	jne    ffff80000080f680 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104

    kmfree(buffer);
ffff80000080f82e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f832:	48 89 c7             	mov    rdi,rax
ffff80000080f835:	49 89 df             	mov    r15,rbx
ffff80000080f838:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080f83f:	ff ff ff 
ffff80000080f842:	48 01 d8             	add    rax,rbx
ffff80000080f845:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
	if(!index)
ffff80000080f847:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080f84b:	75 08                	jne    ffff80000080f855 <FAT32_read+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
		retval = count;
ffff80000080f84d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f851:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:107
	return retval;
ffff80000080f855:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:108
}
ffff80000080f859:	48 83 c4 70          	add    rsp,0x70
ffff80000080f85d:	5b                   	pop    rbx
ffff80000080f85e:	41 5f                	pop    r15
ffff80000080f860:	5d                   	pop    rbp
ffff80000080f861:	c3                   	ret    

ffff80000080f862 <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:112


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
ffff80000080f862:	f3 0f 1e fa          	endbr64 
ffff80000080f866:	55                   	push   rbp
ffff80000080f867:	48 89 e5             	mov    rbp,rsp
ffff80000080f86a:	41 57                	push   r15
ffff80000080f86c:	53                   	push   rbx
ffff80000080f86d:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff80000080f874:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f874 <FAT32_find_available_cluster+0x12>
ffff80000080f87b:	49 bb e4 e2 10 00 00 	movabs r11,0x10e2e4
ffff80000080f882:	00 00 00 
ffff80000080f885:	4c 01 db             	add    rbx,r11
ffff80000080f888:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:115
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
ffff80000080f88f:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f896:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f89a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
ffff80000080f89e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080f8a5:	e9 b6 00 00 00       	jmp    ffff80000080f960 <FAT32_find_available_cluster+0xfe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:122
	{
		memset(buf,0,512);
ffff80000080f8aa:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000080f8b1:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f8b6:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f8bb:	48 89 c7             	mov    rdi,rax
ffff80000080f8be:	49 89 df             	mov    r15,rbx
ffff80000080f8c1:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080f8c8:	ff ff ff 
ffff80000080f8cb:	48 01 d8             	add    rax,rbx
ffff80000080f8ce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123
		blkdev_read(root_sb->dev,(fsbi->FAT1_firstsector + i)*SECTOR_SIZE,SECTOR_SIZE,buf);
ffff80000080f8d0:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f8d7:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffff80000080f8db:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f8de:	48 98                	cdqe   
ffff80000080f8e0:	48 01 d0             	add    rax,rdx
ffff80000080f8e3:	c1 e0 09             	shl    eax,0x9
ffff80000080f8e6:	89 c6                	mov    esi,eax
ffff80000080f8e8:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f8ef:	ff ff ff 
ffff80000080f8f2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f8f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f8f9:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f8fd:	0f b7 c0             	movzx  eax,ax
ffff80000080f900:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff80000080f907:	48 89 d1             	mov    rcx,rdx
ffff80000080f90a:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f90f:	89 c7                	mov    edi,eax
ffff80000080f911:	49 89 df             	mov    r15,rbx
ffff80000080f914:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff80000080f91b:	ff ff ff 
ffff80000080f91e:	48 01 d8             	add    rax,rbx
ffff80000080f921:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125

		for(j = 0;j < 128;j++)
ffff80000080f923:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080f92a:	eb 2a                	jmp    ffff80000080f956 <FAT32_find_available_cluster+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:127
		{
			if((buf[j] & 0x0fffffff) == 0)
ffff80000080f92c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080f92f:	48 98                	cdqe   
ffff80000080f931:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff80000080f938:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080f93d:	85 c0                	test   eax,eax
ffff80000080f93f:	75 11                	jne    ffff80000080f952 <FAT32_find_available_cluster+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:128
				return (i << 7) + j;
ffff80000080f941:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f944:	c1 e0 07             	shl    eax,0x7
ffff80000080f947:	89 c2                	mov    edx,eax
ffff80000080f949:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080f94c:	01 d0                	add    eax,edx
ffff80000080f94e:	48 98                	cdqe   
ffff80000080f950:	eb 22                	jmp    ffff80000080f974 <FAT32_find_available_cluster+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125 (discriminator 2)
		for(j = 0;j < 128;j++)
ffff80000080f952:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125 (discriminator 1)
ffff80000080f956:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
ffff80000080f95a:	7e d0                	jle    ffff80000080f92c <FAT32_find_available_cluster+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
ffff80000080f95c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120 (discriminator 1)
ffff80000080f960:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f963:	48 98                	cdqe   
ffff80000080f965:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080f969:	0f 87 3b ff ff ff    	ja     ffff80000080f8aa <FAT32_find_available_cluster+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:131
		}
	}
	return 0;
ffff80000080f96f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:132 (discriminator 1)
}
ffff80000080f974:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff80000080f97b:	5b                   	pop    rbx
ffff80000080f97c:	41 5f                	pop    r15
ffff80000080f97e:	5d                   	pop    rbp
ffff80000080f97f:	c3                   	ret    

ffff80000080f980 <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080f980:	f3 0f 1e fa          	endbr64 
ffff80000080f984:	55                   	push   rbp
ffff80000080f985:	48 89 e5             	mov    rbp,rsp
ffff80000080f988:	41 57                	push   r15
ffff80000080f98a:	53                   	push   rbx
ffff80000080f98b:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff80000080f98f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f98f <FAT32_write+0xf>
ffff80000080f996:	49 bb c9 e1 10 00 00 	movabs r11,0x10e1c9
ffff80000080f99d:	00 00 00 
ffff80000080f9a0:	4c 01 db             	add    rbx,r11
ffff80000080f9a3:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080f9a7:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000080f9ab:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffff80000080f9b2:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:137
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080f9b9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f9bd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f9c1:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f9c5:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080f9c9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:138
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080f9cd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f9d1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f9d5:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f9d9:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080f9dd:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080f9e1:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140

	unsigned long cluster = finode->first_cluster;
ffff80000080f9e5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f9e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f9ec:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	unsigned long next_cluster = 0;
ffff80000080f9f0:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080f9f7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	unsigned long sector = 0;
ffff80000080f9f8:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080f9ff:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:143
	int i,length = 0;
ffff80000080fa00:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144
	long retval = 0;
ffff80000080fa07:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080fa0e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	long flags = 0;
ffff80000080fa0f:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080fa16:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080fa17:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fa1e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fa21:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080fa25:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080fa29:	48 99                	cqo    
ffff80000080fa2b:	48 f7 fe             	idiv   rsi
ffff80000080fa2e:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:147
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080fa31:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fa38:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fa3b:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080fa3f:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080fa43:	48 99                	cqo    
ffff80000080fa45:	48 f7 f9             	idiv   rcx
ffff80000080fa48:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:148
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff80000080fa4c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fa50:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fa54:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fa59:	48 89 c7             	mov    rdi,rax
ffff80000080fa5c:	49 89 df             	mov    r15,rbx
ffff80000080fa5f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fa64:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000080fa6b:	ff ff ff 
ffff80000080fa6e:	48 01 da             	add    rdx,rbx
ffff80000080fa71:	ff d2                	call   rdx
ffff80000080fa73:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:150

	if(!cluster)
ffff80000080fa77:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fa7c:	75 27                	jne    ffff80000080faa5 <FAT32_write+0x125>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:152
	{
		cluster = FAT32_find_available_cluster(fsbi);
ffff80000080fa7e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fa82:	48 89 c7             	mov    rdi,rax
ffff80000080fa85:	49 89 df             	mov    r15,rbx
ffff80000080fa88:	48 b8 0a 1d ef ff ff 	movabs rax,0xffffffffffef1d0a
ffff80000080fa8f:	ff ff ff 
ffff80000080fa92:	48 01 d8             	add    rax,rbx
ffff80000080fa95:	ff d0                	call   rax
ffff80000080fa97:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:153
		flags = 1;
ffff80000080fa9b:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000080faa2:	00 
ffff80000080faa3:	eb 3c                	jmp    ffff80000080fae1 <FAT32_write+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156
	}
	else
		for(i = 0;i < index;i++)
ffff80000080faa5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080faac:	eb 2b                	jmp    ffff80000080fad9 <FAT32_write+0x159>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:157 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080faae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fab2:	89 c2                	mov    edx,eax
ffff80000080fab4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fab8:	89 d6                	mov    esi,edx
ffff80000080faba:	48 89 c7             	mov    rdi,rax
ffff80000080fabd:	49 89 df             	mov    r15,rbx
ffff80000080fac0:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff80000080fac7:	ff ff ff 
ffff80000080faca:	48 01 d8             	add    rax,rbx
ffff80000080facd:	ff d0                	call   rax
ffff80000080facf:	89 c0                	mov    eax,eax
ffff80000080fad1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156 (discriminator 3)
		for(i = 0;i < index;i++)
ffff80000080fad5:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156 (discriminator 1)
ffff80000080fad9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080fadc:	3b 45 c4             	cmp    eax,DWORD PTR [rbp-0x3c]
ffff80000080fadf:	7c cd                	jl     ffff80000080faae <FAT32_write+0x12e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:159

	if(!cluster)
ffff80000080fae1:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fae6:	75 25                	jne    ffff80000080fb0d <FAT32_write+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:161
	{
        kmfree(buffer);
ffff80000080fae8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080faec:	48 89 c7             	mov    rdi,rax
ffff80000080faef:	49 89 df             	mov    r15,rbx
ffff80000080faf2:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080faf9:	ff ff ff 
ffff80000080fafc:	48 01 d8             	add    rax,rbx
ffff80000080faff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:162
		return -ENOSPC;
ffff80000080fb01:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000080fb08:	e9 f7 03 00 00       	jmp    ffff80000080ff04 <FAT32_write+0x584>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:165
	}

	if(flags)
ffff80000080fb0d:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080fb12:	74 5a                	je     ffff80000080fb6e <FAT32_write+0x1ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:167
	{
		finode->first_cluster = cluster;
ffff80000080fb14:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080fb18:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080fb1c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:168
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000080fb1f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fb23:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fb27:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fb2b:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080fb2f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080fb33:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080fb37:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fb3b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fb3f:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fb43:	48 89 c7             	mov    rdi,rax
ffff80000080fb46:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:169
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
ffff80000080fb48:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fb4c:	89 c1                	mov    ecx,eax
ffff80000080fb4e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fb52:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000080fb57:	89 ce                	mov    esi,ecx
ffff80000080fb59:	48 89 c7             	mov    rdi,rax
ffff80000080fb5c:	49 89 df             	mov    r15,rbx
ffff80000080fb5f:	48 b8 cf 17 ef ff ff 	movabs rax,0xffffffffffef17cf
ffff80000080fb66:	ff ff ff 
ffff80000080fb69:	48 01 d8             	add    rax,rbx
ffff80000080fb6c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:172
	}

	index = count;
ffff80000080fb6e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fb75:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:176

	do
	{
		if(!flags)
ffff80000080fb78:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080fb7d:	0f 85 cd 00 00 00    	jne    ffff80000080fc50 <FAT32_write+0x2d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:178
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080fb83:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fb87:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fb8b:	89 c2                	mov    edx,eax
ffff80000080fb8d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fb91:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fb96:	48 89 c7             	mov    rdi,rax
ffff80000080fb99:	49 89 df             	mov    r15,rbx
ffff80000080fb9c:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080fba3:	ff ff ff 
ffff80000080fba6:	48 01 d8             	add    rax,rbx
ffff80000080fba9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:179
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080fbab:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fbaf:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080fbb3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fbb7:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080fbbb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fbbf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fbc3:	48 0f af c2          	imul   rax,rdx
ffff80000080fbc7:	48 01 c8             	add    rax,rcx
ffff80000080fbca:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:181
			
			if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080fbce:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fbd2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fbd6:	48 c1 e0 09          	shl    rax,0x9
ffff80000080fbda:	48 89 c7             	mov    rdi,rax
ffff80000080fbdd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fbe1:	c1 e0 09             	shl    eax,0x9
ffff80000080fbe4:	89 c6                	mov    esi,eax
ffff80000080fbe6:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fbea:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fbee:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fbf2:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080fbf6:	0f b7 c0             	movzx  eax,ax
ffff80000080fbf9:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080fbfd:	48 89 d1             	mov    rcx,rdx
ffff80000080fc00:	48 89 fa             	mov    rdx,rdi
ffff80000080fc03:	89 c7                	mov    edi,eax
ffff80000080fc05:	49 89 df             	mov    r15,rbx
ffff80000080fc08:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff80000080fc0f:	ff ff ff 
ffff80000080fc12:	48 01 d8             	add    rax,rbx
ffff80000080fc15:	ff d0                	call   rax
ffff80000080fc17:	85 c0                	test   eax,eax
ffff80000080fc19:	79 35                	jns    ffff80000080fc50 <FAT32_write+0x2d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
ffff80000080fc1b:	48 b8 08 db ff ff ff 	movabs rax,0xffffffffffffdb08
ffff80000080fc22:	ff ff ff 
ffff80000080fc25:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fc29:	48 89 c7             	mov    rdi,rax
ffff80000080fc2c:	49 89 df             	mov    r15,rbx
ffff80000080fc2f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fc34:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080fc3b:	ff ff ff 
ffff80000080fc3e:	48 01 da             	add    rdx,rbx
ffff80000080fc41:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:184
				retval = -EIO;
ffff80000080fc43:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000080fc4a:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:185
				break;
ffff80000080fc4b:	e9 23 02 00 00       	jmp    ffff80000080fe73 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:189
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080fc50:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080fc53:	48 63 d0             	movsxd rdx,eax
ffff80000080fc56:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fc5a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fc5e:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffff80000080fc62:	48 39 c2             	cmp    rdx,rax
ffff80000080fc65:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080fc69:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:191

		if((unsigned long)buf < MAX_TASKS)
ffff80000080fc6c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fc70:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080fc74:	77 2c                	ja     ffff80000080fca2 <FAT32_write+0x322>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:192
			memcpy(buf,buffer + offset,length);
ffff80000080fc76:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000080fc79:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080fc7d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc81:	48 01 c1             	add    rcx,rax
ffff80000080fc84:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fc88:	48 89 ce             	mov    rsi,rcx
ffff80000080fc8b:	48 89 c7             	mov    rdi,rax
ffff80000080fc8e:	49 89 df             	mov    r15,rbx
ffff80000080fc91:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080fc98:	ff ff ff 
ffff80000080fc9b:	48 01 d8             	add    rax,rbx
ffff80000080fc9e:	ff d0                	call   rax
ffff80000080fca0:	eb 2a                	jmp    ffff80000080fccc <FAT32_write+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:194
		else
			memcpy(buf,buffer + offset,length);
ffff80000080fca2:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000080fca5:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080fca9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fcad:	48 01 c1             	add    rcx,rax
ffff80000080fcb0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fcb4:	48 89 ce             	mov    rsi,rcx
ffff80000080fcb7:	48 89 c7             	mov    rdi,rax
ffff80000080fcba:	49 89 df             	mov    r15,rbx
ffff80000080fcbd:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080fcc4:	ff ff ff 
ffff80000080fcc7:	48 01 d8             	add    rax,rbx
ffff80000080fcca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:195
        if(blkdev_write(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080fccc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fcd0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fcd4:	48 c1 e0 09          	shl    rax,0x9
ffff80000080fcd8:	48 89 c7             	mov    rdi,rax
ffff80000080fcdb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fcdf:	c1 e0 09             	shl    eax,0x9
ffff80000080fce2:	89 c6                	mov    esi,eax
ffff80000080fce4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fce8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fcec:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fcf0:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080fcf4:	0f b7 c0             	movzx  eax,ax
ffff80000080fcf7:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080fcfb:	48 89 d1             	mov    rcx,rdx
ffff80000080fcfe:	48 89 fa             	mov    rdx,rdi
ffff80000080fd01:	89 c7                	mov    edi,eax
ffff80000080fd03:	49 89 df             	mov    r15,rbx
ffff80000080fd06:	48 b8 95 01 ef ff ff 	movabs rax,0xffffffffffef0195
ffff80000080fd0d:	ff ff ff 
ffff80000080fd10:	48 01 d8             	add    rax,rbx
ffff80000080fd13:	ff d0                	call   rax
ffff80000080fd15:	85 c0                	test   eax,eax
ffff80000080fd17:	79 35                	jns    ffff80000080fd4e <FAT32_write+0x3ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:197
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
ffff80000080fd19:	48 b8 38 db ff ff ff 	movabs rax,0xffffffffffffdb38
ffff80000080fd20:	ff ff ff 
ffff80000080fd23:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fd27:	48 89 c7             	mov    rdi,rax
ffff80000080fd2a:	49 89 df             	mov    r15,rbx
ffff80000080fd2d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fd32:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff80000080fd39:	ff ff ff 
ffff80000080fd3c:	48 01 da             	add    rdx,rbx
ffff80000080fd3f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
			retval = -EIO;
ffff80000080fd41:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000080fd48:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:199
			break;
ffff80000080fd49:	e9 25 01 00 00       	jmp    ffff80000080fe73 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:202
		}

		index -= length;
ffff80000080fd4e:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fd51:	29 45 c4             	sub    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
		buf += length;
ffff80000080fd54:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fd57:	48 98                	cdqe   
ffff80000080fd59:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:204
		offset -= offset;
ffff80000080fd5d:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080fd64:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:205
		*position += length;
ffff80000080fd65:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fd6c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fd6f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fd72:	48 98                	cdqe   
ffff80000080fd74:	48 01 c2             	add    rdx,rax
ffff80000080fd77:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fd7e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:207

		if(index)
ffff80000080fd81:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fd85:	0f 84 e7 00 00 00    	je     ffff80000080fe72 <FAT32_write+0x4f2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:208
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080fd8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fd8f:	89 c2                	mov    edx,eax
ffff80000080fd91:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fd95:	89 d6                	mov    esi,edx
ffff80000080fd97:	48 89 c7             	mov    rdi,rax
ffff80000080fd9a:	49 89 df             	mov    r15,rbx
ffff80000080fd9d:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff80000080fda4:	ff ff ff 
ffff80000080fda7:	48 01 d8             	add    rax,rbx
ffff80000080fdaa:	ff d0                	call   rax
ffff80000080fdac:	89 c0                	mov    eax,eax
ffff80000080fdae:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:212
		else
			break;

		if(next_cluster >= 0x0ffffff8)
ffff80000080fdb2:	48 81 7d a0 f7 ff ff 	cmp    QWORD PTR [rbp-0x60],0xffffff7
ffff80000080fdb9:	0f 
ffff80000080fdba:	0f 86 a6 00 00 00    	jbe    ffff80000080fe66 <FAT32_write+0x4e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:214
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
ffff80000080fdc0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fdc4:	48 89 c7             	mov    rdi,rax
ffff80000080fdc7:	49 89 df             	mov    r15,rbx
ffff80000080fdca:	48 b8 0a 1d ef ff ff 	movabs rax,0xffffffffffef1d0a
ffff80000080fdd1:	ff ff ff 
ffff80000080fdd4:	48 01 d8             	add    rax,rbx
ffff80000080fdd7:	ff d0                	call   rax
ffff80000080fdd9:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:215
			if(!next_cluster)
ffff80000080fddd:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff80000080fde2:	75 25                	jne    ffff80000080fe09 <FAT32_write+0x489>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:217
			{
                kmfree(buffer);
ffff80000080fde4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fde8:	48 89 c7             	mov    rdi,rax
ffff80000080fdeb:	49 89 df             	mov    r15,rbx
ffff80000080fdee:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080fdf5:	ff ff ff 
ffff80000080fdf8:	48 01 d8             	add    rax,rbx
ffff80000080fdfb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:218
				return -ENOSPC;
ffff80000080fdfd:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000080fe04:	e9 fb 00 00 00       	jmp    ffff80000080ff04 <FAT32_write+0x584>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:221
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
ffff80000080fe09:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fe0d:	89 c2                	mov    edx,eax
ffff80000080fe0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fe13:	89 c1                	mov    ecx,eax
ffff80000080fe15:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fe19:	89 ce                	mov    esi,ecx
ffff80000080fe1b:	48 89 c7             	mov    rdi,rax
ffff80000080fe1e:	49 89 df             	mov    r15,rbx
ffff80000080fe21:	48 b8 cf 17 ef ff ff 	movabs rax,0xffffffffffef17cf
ffff80000080fe28:	ff ff ff 
ffff80000080fe2b:	48 01 d8             	add    rax,rbx
ffff80000080fe2e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
ffff80000080fe30:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fe34:	89 c1                	mov    ecx,eax
ffff80000080fe36:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fe3a:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000080fe3f:	89 ce                	mov    esi,ecx
ffff80000080fe41:	48 89 c7             	mov    rdi,rax
ffff80000080fe44:	49 89 df             	mov    r15,rbx
ffff80000080fe47:	48 b8 cf 17 ef ff ff 	movabs rax,0xffffffffffef17cf
ffff80000080fe4e:	ff ff ff 
ffff80000080fe51:	48 01 d8             	add    rax,rbx
ffff80000080fe54:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:223
			cluster = next_cluster;
ffff80000080fe56:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fe5a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:224
			flags = 1;
ffff80000080fe5e:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000080fe65:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:227
		}

	}while(index);
ffff80000080fe66:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fe6a:	0f 85 08 fd ff ff    	jne    ffff80000080fb78 <FAT32_write+0x1f8>
ffff80000080fe70:	eb 01                	jmp    ffff80000080fe73 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:210
			break;
ffff80000080fe72:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:229

	if(*position > filp->dentry->dir_inode->file_size)
ffff80000080fe73:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fe7a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fe7d:	48 89 c2             	mov    rdx,rax
ffff80000080fe80:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fe84:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe88:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fe8c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fe8f:	48 39 c2             	cmp    rdx,rax
ffff80000080fe92:	76 42                	jbe    ffff80000080fed6 <FAT32_write+0x556>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:231
	{
		filp->dentry->dir_inode->file_size = *position;
ffff80000080fe94:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fe9b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fe9e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fea2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fea6:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080feaa:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:232
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000080fead:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080feb1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080feb5:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080feb9:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080febd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080fec1:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080fec5:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fec9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fecd:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fed1:	48 89 c7             	mov    rdi,rax
ffff80000080fed4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:235
	}

    kmfree(buffer);
ffff80000080fed6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080feda:	48 89 c7             	mov    rdi,rax
ffff80000080fedd:	49 89 df             	mov    r15,rbx
ffff80000080fee0:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000080fee7:	ff ff ff 
ffff80000080feea:	48 01 d8             	add    rax,rbx
ffff80000080feed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
	if(!index)
ffff80000080feef:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fef3:	75 0b                	jne    ffff80000080ff00 <FAT32_write+0x580>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:237
		retval = count;
ffff80000080fef5:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fefc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:238
	return retval;
ffff80000080ff00:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:239
}
ffff80000080ff04:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000080ff08:	5b                   	pop    rbx
ffff80000080ff09:	41 5f                	pop    r15
ffff80000080ff0b:	5d                   	pop    rbp
ffff80000080ff0c:	c3                   	ret    

ffff80000080ff0d <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:243


long FAT32_lseek(struct file * filp,long offset,long origin)
{
ffff80000080ff0d:	f3 0f 1e fa          	endbr64 
ffff80000080ff11:	55                   	push   rbp
ffff80000080ff12:	48 89 e5             	mov    rbp,rsp
ffff80000080ff15:	41 57                	push   r15
ffff80000080ff17:	48 83 ec 38          	sub    rsp,0x38
ffff80000080ff1b:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080ff1b <FAT32_lseek+0xe>
ffff80000080ff22:	49 bb 3d dc 10 00 00 	movabs r11,0x10dc3d
ffff80000080ff29:	00 00 00 
ffff80000080ff2c:	4c 01 d9             	add    rcx,r11
ffff80000080ff2f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080ff33:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080ff37:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:244
	struct index_node *inode = filp->dentry->dir_inode;
ffff80000080ff3b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff3f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff43:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ff47:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:245
	long pos = 0;
ffff80000080ff4b:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080ff52:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:247

	switch(origin)
ffff80000080ff53:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000080ff58:	74 21                	je     ffff80000080ff7b <FAT32_lseek+0x6e>
ffff80000080ff5a:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000080ff5f:	7f 4a                	jg     ffff80000080ffab <FAT32_lseek+0x9e>
ffff80000080ff61:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080ff66:	74 09                	je     ffff80000080ff71 <FAT32_lseek+0x64>
ffff80000080ff68:	48 83 7d c8 01       	cmp    QWORD PTR [rbp-0x38],0x1
ffff80000080ff6d:	74 20                	je     ffff80000080ff8f <FAT32_lseek+0x82>
ffff80000080ff6f:	eb 3a                	jmp    ffff80000080ffab <FAT32_lseek+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:250
	{
		case SEEK_SET:
				pos = offset;
ffff80000080ff71:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ff75:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:251
			break;
ffff80000080ff79:	eb 39                	jmp    ffff80000080ffb4 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:254

		case SEEK_CUR:
				pos =  filp->position + offset;
ffff80000080ff7b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff7f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ff82:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ff86:	48 01 d0             	add    rax,rdx
ffff80000080ff89:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:255
			break;
ffff80000080ff8d:	eb 25                	jmp    ffff80000080ffb4 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:258

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
ffff80000080ff8f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff93:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff97:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ff9b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ff9e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ffa2:	48 01 d0             	add    rax,rdx
ffff80000080ffa5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:259
			break;
ffff80000080ffa9:	eb 09                	jmp    ffff80000080ffb4 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:262

		default:
			return -EINVAL;
ffff80000080ffab:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080ffb2:	eb 69                	jmp    ffff80000081001d <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:266
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
ffff80000080ffb4:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080ffb9:	78 18                	js     ffff80000080ffd3 <FAT32_lseek+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:266 (discriminator 1)
ffff80000080ffbb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ffbf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ffc3:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ffc7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ffca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ffce:	48 39 c2             	cmp    rdx,rax
ffff80000080ffd1:	73 09                	jae    ffff80000080ffdc <FAT32_lseek+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:267
		return -EOVERFLOW;
ffff80000080ffd3:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
ffff80000080ffda:	eb 41                	jmp    ffff80000081001d <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:269

	filp->position = pos;
ffff80000080ffdc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ffe0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ffe4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:270
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
ffff80000080ffe7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ffeb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ffee:	48 89 c6             	mov    rsi,rax
ffff80000080fff1:	48 b8 68 db ff ff ff 	movabs rax,0xffffffffffffdb68
ffff80000080fff8:	ff ff ff 
ffff80000080fffb:	48 8d 04 01          	lea    rax,[rcx+rax*1]
ffff80000080ffff:	48 89 c7             	mov    rdi,rax
ffff800000810002:	49 89 cf             	mov    r15,rcx
ffff800000810005:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081000a:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff800000810011:	ff ff ff 
ffff800000810014:	48 01 ca             	add    rdx,rcx
ffff800000810017:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:272

	return pos;
ffff800000810019:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:273
}
ffff80000081001d:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000810021:	c9                   	leave  
ffff800000810022:	c3                   	ret    

ffff800000810023 <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:277


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
ffff800000810023:	f3 0f 1e fa          	endbr64 
ffff800000810027:	55                   	push   rbp
ffff800000810028:	48 89 e5             	mov    rbp,rsp
ffff80000081002b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081002b <FAT32_ioctl+0x8>
ffff800000810032:	49 bb 2d db 10 00 00 	movabs r11,0x10db2d
ffff800000810039:	00 00 00 
ffff80000081003c:	4c 01 d8             	add    rax,r11
ffff80000081003f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810043:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000810047:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081004b:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000081004f:	90                   	nop
ffff800000810050:	5d                   	pop    rbp
ffff800000810051:	c3                   	ret    

ffff800000810052 <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:280

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
ffff800000810052:	f3 0f 1e fa          	endbr64 
ffff800000810056:	55                   	push   rbp
ffff800000810057:	48 89 e5             	mov    rbp,rsp
ffff80000081005a:	41 57                	push   r15
ffff80000081005c:	53                   	push   rbx
ffff80000081005d:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000810061:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810061 <FAT32_readdir+0xf>
ffff800000810068:	49 bb f7 da 10 00 00 	movabs r11,0x10daf7
ffff80000081006f:	00 00 00 
ffff800000810072:	4c 01 db             	add    rbx,r11
ffff800000810075:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000810079:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000081007d:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff800000810084:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810088:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081008c:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810090:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000810094:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:282
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff800000810098:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081009c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008100a0:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff8000008100a4:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff8000008100a8:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff8000008100ac:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:284

	unsigned int cluster = 0;
ffff8000008100b0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285
	unsigned long sector = 0;
ffff8000008100b7:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff8000008100be:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	unsigned char * buf =NULL; 
ffff8000008100bf:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff8000008100c6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:287
	char *name = NULL;
ffff8000008100c7:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008100ce:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288
	int namelen = 0;
ffff8000008100cf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	int i = 0,j = 0,x = 0,y = 0;
ffff8000008100d6:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff8000008100dd:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008100e4:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008100eb:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	struct FAT32_Directory * tmpdentry = NULL;
ffff8000008100f2:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008100f9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:291
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff8000008100fa:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000810101:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:293

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000810102:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810106:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081010a:	be 00 00 00 00       	mov    esi,0x0
ffff80000081010f:	48 89 c7             	mov    rdi,rax
ffff800000810112:	49 89 df             	mov    r15,rbx
ffff800000810115:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081011a:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000810121:	ff ff ff 
ffff800000810124:	48 01 da             	add    rdx,rbx
ffff800000810127:	ff d2                	call   rdx
ffff800000810129:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:295

	cluster = finode->first_cluster;
ffff80000081012d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810131:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810134:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:297

	j = filp->position/fsbi->bytes_per_cluster;
ffff800000810137:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081013b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081013e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810142:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff800000810146:	48 99                	cqo    
ffff800000810148:	48 f7 fe             	idiv   rsi
ffff80000081014b:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:299
	
	for(i = 0;i<j;i++)
ffff80000081014e:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000810155:	eb 60                	jmp    ffff8000008101b7 <FAT32_readdir+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:301
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810157:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081015a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081015e:	89 d6                	mov    esi,edx
ffff800000810160:	48 89 c7             	mov    rdi,rax
ffff800000810163:	49 89 df             	mov    r15,rbx
ffff800000810166:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff80000081016d:	ff ff ff 
ffff800000810170:	48 01 d8             	add    rax,rbx
ffff800000810173:	ff d0                	call   rax
ffff800000810175:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:302
		if(cluster > 0x0ffffff7)
ffff800000810178:	81 7d ec f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff7
ffff80000081017f:	76 32                	jbe    ffff8000008101b3 <FAT32_readdir+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:304
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
ffff800000810181:	48 b8 90 db ff ff ff 	movabs rax,0xffffffffffffdb90
ffff800000810188:	ff ff ff 
ffff80000081018b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081018f:	48 89 c7             	mov    rdi,rax
ffff800000810192:	49 89 df             	mov    r15,rbx
ffff800000810195:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081019a:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff8000008101a1:	ff ff ff 
ffff8000008101a4:	48 01 da             	add    rdx,rbx
ffff8000008101a7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:305
			return NULL;
ffff8000008101a9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008101ae:	e9 16 06 00 00       	jmp    ffff8000008107c9 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:299 (discriminator 2)
	for(i = 0;i<j;i++)
ffff8000008101b3:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:299 (discriminator 1)
ffff8000008101b7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008101ba:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008101bd:	7c 98                	jl     ffff800000810157 <FAT32_readdir+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:309
		}
	}

next_cluster:
ffff8000008101bf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:310
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff8000008101c0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008101c4:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008101c8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008101cb:	83 e8 02             	sub    eax,0x2
ffff8000008101ce:	89 c1                	mov    ecx,eax
ffff8000008101d0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008101d4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008101d8:	48 0f af c1          	imul   rax,rcx
ffff8000008101dc:	48 01 d0             	add    rax,rdx
ffff8000008101df:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:311
    if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff8000008101e3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008101e7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008101eb:	48 c1 e0 09          	shl    rax,0x9
ffff8000008101ef:	48 89 c7             	mov    rdi,rax
ffff8000008101f2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008101f6:	c1 e0 09             	shl    eax,0x9
ffff8000008101f9:	89 c6                	mov    esi,eax
ffff8000008101fb:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008101ff:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810203:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810207:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000081020b:	0f b7 c0             	movzx  eax,ax
ffff80000081020e:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff800000810212:	48 89 d1             	mov    rcx,rdx
ffff800000810215:	48 89 fa             	mov    rdx,rdi
ffff800000810218:	89 c7                	mov    edi,eax
ffff80000081021a:	49 89 df             	mov    r15,rbx
ffff80000081021d:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff800000810224:	ff ff ff 
ffff800000810227:	48 01 d8             	add    rax,rbx
ffff80000081022a:	ff d0                	call   rax
ffff80000081022c:	85 c0                	test   eax,eax
ffff80000081022e:	79 4b                	jns    ffff80000081027b <FAT32_readdir+0x229>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
ffff800000810230:	48 b8 b8 db ff ff ff 	movabs rax,0xffffffffffffdbb8
ffff800000810237:	ff ff ff 
ffff80000081023a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081023e:	48 89 c7             	mov    rdi,rax
ffff800000810241:	49 89 df             	mov    r15,rbx
ffff800000810244:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810249:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff800000810250:	ff ff ff 
ffff800000810253:	48 01 da             	add    rdx,rbx
ffff800000810256:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:314
        kmfree(buf);
ffff800000810258:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081025c:	48 89 c7             	mov    rdi,rax
ffff80000081025f:	49 89 df             	mov    r15,rbx
ffff800000810262:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000810269:	ff ff ff 
ffff80000081026c:	48 01 d8             	add    rax,rbx
ffff80000081026f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:315
		return NULL;
ffff800000810271:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810276:	e9 4e 05 00 00       	jmp    ffff8000008107c9 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:318
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
ffff80000081027b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081027f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810282:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810286:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081028a:	48 99                	cqo    
ffff80000081028c:	48 f7 f9             	idiv   rcx
ffff80000081028f:	48 89 d0             	mov    rax,rdx
ffff800000810292:	48 89 c2             	mov    rdx,rax
ffff800000810295:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810299:	48 01 d0             	add    rax,rdx
ffff80000081029c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff8000008102a0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008102a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008102a7:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008102ab:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff8000008102af:	48 99                	cqo    
ffff8000008102b1:	48 f7 f9             	idiv   rcx
ffff8000008102b4:	48 89 d0             	mov    rax,rdx
ffff8000008102b7:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffff8000008102ba:	e9 66 04 00 00       	jmp    ffff800000810725 <FAT32_readdir+0x6d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff8000008102bf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008102c3:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008102c7:	3c 0f                	cmp    al,0xf
ffff8000008102c9:	0f 84 37 04 00 00    	je     ffff800000810706 <FAT32_readdir+0x6b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff8000008102cf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008102d3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008102d6:	3c e5                	cmp    al,0xe5
ffff8000008102d8:	0f 84 2b 04 00 00    	je     ffff800000810709 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324 (discriminator 2)
ffff8000008102de:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008102e2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008102e5:	84 c0                	test   al,al
ffff8000008102e7:	0f 84 1c 04 00 00    	je     ffff800000810709 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324 (discriminator 4)
ffff8000008102ed:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008102f1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008102f4:	3c 05                	cmp    al,0x5
ffff8000008102f6:	0f 84 0d 04 00 00    	je     ffff800000810709 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
			continue;

		namelen = 0;
ffff8000008102fc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:328
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff800000810303:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810307:	48 83 e8 20          	sub    rax,0x20
ffff80000081030b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081030f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810313:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810317:	3c 0f                	cmp    al,0xf
ffff800000810319:	0f 85 44 02 00 00    	jne    ffff800000810563 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330 (discriminator 1)
ffff80000081031f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810323:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810326:	3c e5                	cmp    al,0xe5
ffff800000810328:	0f 84 35 02 00 00    	je     ffff800000810563 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330 (discriminator 2)
ffff80000081032e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810332:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810335:	84 c0                	test   al,al
ffff800000810337:	0f 84 26 02 00 00    	je     ffff800000810563 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330 (discriminator 3)
ffff80000081033d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810341:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810344:	3c 05                	cmp    al,0x5
ffff800000810346:	0f 84 17 02 00 00    	je     ffff800000810563 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332
		{
			j = 0;
ffff80000081034c:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff800000810353:	eb 1a                	jmp    ffff80000081036f <FAT32_readdir+0x31d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
			{
				j++;
ffff800000810355:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:337
				if(tmpldentry->LDIR_Ord & 0x40)
ffff800000810359:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081035d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810360:	0f b6 c0             	movzx  eax,al
ffff800000810363:	83 e0 40             	and    eax,0x40
ffff800000810366:	85 c0                	test   eax,eax
ffff800000810368:	75 34                	jne    ffff80000081039e <FAT32_readdir+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:339
					break;
				tmpldentry --;
ffff80000081036a:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081036f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810373:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810377:	3c 0f                	cmp    al,0xf
ffff800000810379:	75 24                	jne    ffff80000081039f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 1)
ffff80000081037b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081037f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810382:	3c e5                	cmp    al,0xe5
ffff800000810384:	74 19                	je     ffff80000081039f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 2)
ffff800000810386:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081038a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081038d:	84 c0                	test   al,al
ffff80000081038f:	74 0e                	je     ffff80000081039f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 3)
ffff800000810391:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810395:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810398:	3c 05                	cmp    al,0x5
ffff80000081039a:	75 b9                	jne    ffff800000810355 <FAT32_readdir+0x303>
ffff80000081039c:	eb 01                	jmp    ffff80000081039f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
					break;
ffff80000081039e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:342
			}

			name = kmalloc(j * 13 + 1, 0);
ffff80000081039f:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008103a2:	89 d0                	mov    eax,edx
ffff8000008103a4:	01 c0                	add    eax,eax
ffff8000008103a6:	01 d0                	add    eax,edx
ffff8000008103a8:	c1 e0 02             	shl    eax,0x2
ffff8000008103ab:	01 d0                	add    eax,edx
ffff8000008103ad:	83 c0 01             	add    eax,0x1
ffff8000008103b0:	be 00 00 00 00       	mov    esi,0x0
ffff8000008103b5:	89 c7                	mov    edi,eax
ffff8000008103b7:	49 89 df             	mov    r15,rbx
ffff8000008103ba:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008103bf:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff8000008103c6:	ff ff ff 
ffff8000008103c9:	48 01 da             	add    rdx,rbx
ffff8000008103cc:	ff d2                	call   rdx
ffff8000008103ce:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:343
			memset(name,0,j*13+1);
ffff8000008103d2:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008103d5:	89 d0                	mov    eax,edx
ffff8000008103d7:	01 c0                	add    eax,eax
ffff8000008103d9:	01 d0                	add    eax,edx
ffff8000008103db:	c1 e0 02             	shl    eax,0x2
ffff8000008103de:	01 d0                	add    eax,edx
ffff8000008103e0:	83 c0 01             	add    eax,0x1
ffff8000008103e3:	89 c2                	mov    edx,eax
ffff8000008103e5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008103e9:	be 00 00 00 00       	mov    esi,0x0
ffff8000008103ee:	48 89 c7             	mov    rdi,rax
ffff8000008103f1:	49 89 df             	mov    r15,rbx
ffff8000008103f4:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff8000008103fb:	ff ff ff 
ffff8000008103fe:	48 01 d8             	add    rax,rbx
ffff800000810401:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:344
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff800000810403:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810407:	48 83 e8 20          	sub    rax,0x20
ffff80000081040b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346

			for(x = 0;x<j;x++,tmpldentry --)
ffff80000081040f:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000810416:	e9 37 01 00 00       	jmp    ffff800000810552 <FAT32_readdir+0x500>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348
			{
				for(y = 0;y<5;y++)
ffff80000081041b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810422:	eb 53                	jmp    ffff800000810477 <FAT32_readdir+0x425>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:349
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810424:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810428:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081042b:	48 63 d2             	movsxd rdx,edx
ffff80000081042e:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810433:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810437:	74 3a                	je     ffff800000810473 <FAT32_readdir+0x421>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:349 (discriminator 1)
ffff800000810439:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081043d:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810440:	48 63 d2             	movsxd rdx,edx
ffff800000810443:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810448:	66 85 c0             	test   ax,ax
ffff80000081044b:	74 26                	je     ffff800000810473 <FAT32_readdir+0x421>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
ffff80000081044d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810451:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810454:	48 63 d2             	movsxd rdx,edx
ffff800000810457:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff80000081045c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081045f:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810462:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810465:	48 63 d0             	movsxd rdx,eax
ffff800000810468:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081046c:	48 01 d0             	add    rax,rdx
ffff80000081046f:	89 ca                	mov    edx,ecx
ffff800000810471:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 2)
				for(y = 0;y<5;y++)
ffff800000810473:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 1)
ffff800000810477:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
ffff80000081047b:	7e a7                	jle    ffff800000810424 <FAT32_readdir+0x3d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352

				for(y = 0;y<6;y++)
ffff80000081047d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810484:	eb 53                	jmp    ffff8000008104d9 <FAT32_readdir+0x487>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810486:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081048a:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081048d:	48 63 d2             	movsxd rdx,edx
ffff800000810490:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000810495:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810499:	74 3a                	je     ffff8000008104d5 <FAT32_readdir+0x483>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353 (discriminator 1)
ffff80000081049b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081049f:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008104a2:	48 63 d2             	movsxd rdx,edx
ffff8000008104a5:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008104aa:	66 85 c0             	test   ax,ax
ffff8000008104ad:	74 26                	je     ffff8000008104d5 <FAT32_readdir+0x483>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
ffff8000008104af:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008104b3:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008104b6:	48 63 d2             	movsxd rdx,edx
ffff8000008104b9:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff8000008104be:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008104c1:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008104c4:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008104c7:	48 63 d0             	movsxd rdx,eax
ffff8000008104ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008104ce:	48 01 d0             	add    rax,rdx
ffff8000008104d1:	89 ca                	mov    edx,ecx
ffff8000008104d3:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 2)
				for(y = 0;y<6;y++)
ffff8000008104d5:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 1)
ffff8000008104d9:	83 7d cc 05          	cmp    DWORD PTR [rbp-0x34],0x5
ffff8000008104dd:	7e a7                	jle    ffff800000810486 <FAT32_readdir+0x434>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356

				for(y = 0;y<2;y++)
ffff8000008104df:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008104e6:	eb 5b                	jmp    ffff800000810543 <FAT32_readdir+0x4f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff8000008104e8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008104ec:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008104ef:	48 63 d2             	movsxd rdx,edx
ffff8000008104f2:	48 83 c2 08          	add    rdx,0x8
ffff8000008104f6:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff8000008104fb:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008104ff:	74 3e                	je     ffff80000081053f <FAT32_readdir+0x4ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357 (discriminator 1)
ffff800000810501:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810505:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810508:	48 63 d2             	movsxd rdx,edx
ffff80000081050b:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810510:	66 85 c0             	test   ax,ax
ffff800000810513:	74 2a                	je     ffff80000081053f <FAT32_readdir+0x4ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
ffff800000810515:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810519:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081051c:	48 63 d2             	movsxd rdx,edx
ffff80000081051f:	48 83 c2 08          	add    rdx,0x8
ffff800000810523:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000810528:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081052b:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081052e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810531:	48 63 d0             	movsxd rdx,eax
ffff800000810534:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810538:	48 01 d0             	add    rax,rdx
ffff80000081053b:	89 ca                	mov    edx,ecx
ffff80000081053d:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 2)
				for(y = 0;y<2;y++)
ffff80000081053f:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 1)
ffff800000810543:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
ffff800000810547:	7e 9f                	jle    ffff8000008104e8 <FAT32_readdir+0x496>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
ffff800000810549:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
ffff80000081054d:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346 (discriminator 1)
ffff800000810552:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810555:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000810558:	0f 8c bd fe ff ff    	jl     ffff80000081041b <FAT32_readdir+0x3c9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360
			}
			goto find_lookup_success;
ffff80000081055e:	e9 2c 02 00 00       	jmp    ffff80000081078f <FAT32_readdir+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:363
		}

		name = kmalloc(15, 0);
ffff800000810563:	be 00 00 00 00       	mov    esi,0x0
ffff800000810568:	bf 0f 00 00 00       	mov    edi,0xf
ffff80000081056d:	49 89 df             	mov    r15,rbx
ffff800000810570:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810575:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000081057c:	ff ff ff 
ffff80000081057f:	48 01 da             	add    rdx,rbx
ffff800000810582:	ff d2                	call   rdx
ffff800000810584:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:364
		memset(name,0,15);
ffff800000810588:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081058c:	ba 0f 00 00 00       	mov    edx,0xf
ffff800000810591:	be 00 00 00 00       	mov    esi,0x0
ffff800000810596:	48 89 c7             	mov    rdi,rax
ffff800000810599:	49 89 df             	mov    r15,rbx
ffff80000081059c:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff8000008105a3:	ff ff ff 
ffff8000008105a6:	48 01 d8             	add    rax,rbx
ffff8000008105a9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366
		//short file/dir base name compare
		for(x=0;x<8;x++)
ffff8000008105ab:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008105b2:	eb 74                	jmp    ffff800000810628 <FAT32_readdir+0x5d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff8000008105b4:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008105b8:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008105bb:	48 98                	cdqe   
ffff8000008105bd:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008105c1:	3c 20                	cmp    al,0x20
ffff8000008105c3:	74 6b                	je     ffff800000810630 <FAT32_readdir+0x5de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff8000008105c5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008105c9:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff8000008105cd:	0f b6 c0             	movzx  eax,al
ffff8000008105d0:	83 e0 08             	and    eax,0x8
ffff8000008105d3:	85 c0                	test   eax,eax
ffff8000008105d5:	74 29                	je     ffff800000810600 <FAT32_readdir+0x5ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:371
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff8000008105d7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008105db:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008105de:	48 98                	cdqe   
ffff8000008105e0:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008105e4:	8d 48 20             	lea    ecx,[rax+0x20]
ffff8000008105e7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008105ea:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008105ed:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008105f0:	48 63 d0             	movsxd rdx,eax
ffff8000008105f3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008105f7:	48 01 d0             	add    rax,rdx
ffff8000008105fa:	89 ca                	mov    edx,ecx
ffff8000008105fc:	88 10                	mov    BYTE PTR [rax],dl
ffff8000008105fe:	eb 24                	jmp    ffff800000810624 <FAT32_readdir+0x5d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:373
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000810600:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810604:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810607:	48 98                	cdqe   
ffff800000810609:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff80000081060d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810610:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810613:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810616:	48 63 d0             	movsxd rdx,eax
ffff800000810619:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081061d:	48 01 d0             	add    rax,rdx
ffff800000810620:	89 ca                	mov    edx,ecx
ffff800000810622:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000810624:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366 (discriminator 1)
ffff800000810628:	83 7d d0 07          	cmp    DWORD PTR [rbp-0x30],0x7
ffff80000081062c:	7e 86                	jle    ffff8000008105b4 <FAT32_readdir+0x562>
ffff80000081062e:	eb 01                	jmp    ffff800000810631 <FAT32_readdir+0x5df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:369
				break;
ffff800000810630:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:376
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
ffff800000810631:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810635:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810639:	0f b6 c0             	movzx  eax,al
ffff80000081063c:	83 e0 10             	and    eax,0x10
ffff80000081063f:	85 c0                	test   eax,eax
ffff800000810641:	0f 85 44 01 00 00    	jne    ffff80000081078b <FAT32_readdir+0x739>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:379
			goto find_lookup_success;

		name[namelen++] = '.';
ffff800000810647:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081064a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081064d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810650:	48 63 d0             	movsxd rdx,eax
ffff800000810653:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810657:	48 01 d0             	add    rax,rdx
ffff80000081065a:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:382

		//short file ext name compare
		for(x=8;x<11;x++)
ffff80000081065d:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
ffff800000810664:	eb 74                	jmp    ffff8000008106da <FAT32_readdir+0x688>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000810666:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081066a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081066d:	48 98                	cdqe   
ffff80000081066f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810673:	3c 20                	cmp    al,0x20
ffff800000810675:	74 6b                	je     ffff8000008106e2 <FAT32_readdir+0x690>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000810677:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081067b:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000081067f:	0f b6 c0             	movzx  eax,al
ffff800000810682:	83 e0 10             	and    eax,0x10
ffff800000810685:	85 c0                	test   eax,eax
ffff800000810687:	74 29                	je     ffff8000008106b2 <FAT32_readdir+0x660>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:387
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000810689:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081068d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810690:	48 98                	cdqe   
ffff800000810692:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810696:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000810699:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081069c:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081069f:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008106a2:	48 63 d0             	movsxd rdx,eax
ffff8000008106a5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008106a9:	48 01 d0             	add    rax,rdx
ffff8000008106ac:	89 ca                	mov    edx,ecx
ffff8000008106ae:	88 10                	mov    BYTE PTR [rax],dl
ffff8000008106b0:	eb 24                	jmp    ffff8000008106d6 <FAT32_readdir+0x684>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:389
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff8000008106b2:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008106b6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008106b9:	48 98                	cdqe   
ffff8000008106bb:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff8000008106bf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008106c2:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008106c5:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008106c8:	48 63 d0             	movsxd rdx,eax
ffff8000008106cb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008106cf:	48 01 d0             	add    rax,rdx
ffff8000008106d2:	89 ca                	mov    edx,ecx
ffff8000008106d4:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:382 (discriminator 2)
		for(x=8;x<11;x++)
ffff8000008106d6:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:382 (discriminator 1)
ffff8000008106da:	83 7d d0 0a          	cmp    DWORD PTR [rbp-0x30],0xa
ffff8000008106de:	7e 86                	jle    ffff800000810666 <FAT32_readdir+0x614>
ffff8000008106e0:	eb 01                	jmp    ffff8000008106e3 <FAT32_readdir+0x691>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:385
				break;
ffff8000008106e2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
		}
		if(x == 8)
ffff8000008106e3:	83 7d d0 08          	cmp    DWORD PTR [rbp-0x30],0x8
ffff8000008106e7:	0f 85 a1 00 00 00    	jne    ffff80000081078e <FAT32_readdir+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:392
			name[--namelen] = 0;
ffff8000008106ed:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffff8000008106f1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008106f4:	48 63 d0             	movsxd rdx,eax
ffff8000008106f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008106fb:	48 01 d0             	add    rax,rdx
ffff8000008106fe:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
		goto find_lookup_success;
ffff800000810701:	e9 88 00 00 00       	jmp    ffff80000081078e <FAT32_readdir+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323
			continue;
ffff800000810706:	90                   	nop
ffff800000810707:	eb 01                	jmp    ffff80000081070a <FAT32_readdir+0x6b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:325
			continue;
ffff800000810709:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff80000081070a:	83 45 d8 20          	add    DWORD PTR [rbp-0x28],0x20
ffff80000081070e:	48 83 45 c0 20       	add    QWORD PTR [rbp-0x40],0x20
ffff800000810713:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810717:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081071a:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff80000081071e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810722:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320 (discriminator 1)
ffff800000810725:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000810728:	48 63 d0             	movsxd rdx,eax
ffff80000081072b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081072f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810733:	48 39 c2             	cmp    rdx,rax
ffff800000810736:	0f 8c 83 fb ff ff    	jl     ffff8000008102bf <FAT32_readdir+0x26d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:396
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000081073c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081073f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810743:	89 d6                	mov    esi,edx
ffff800000810745:	48 89 c7             	mov    rdi,rax
ffff800000810748:	49 89 df             	mov    r15,rbx
ffff80000081074b:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff800000810752:	ff ff ff 
ffff800000810755:	48 01 d8             	add    rax,rbx
ffff800000810758:	ff d0                	call   rax
ffff80000081075a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:397
	if(cluster < 0x0ffffff7)
ffff80000081075d:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000810764:	77 05                	ja     ffff80000081076b <FAT32_readdir+0x719>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:398
		goto next_cluster;
ffff800000810766:	e9 55 fa ff ff       	jmp    ffff8000008101c0 <FAT32_readdir+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400

    kmfree(buf);
ffff80000081076b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081076f:	48 89 c7             	mov    rdi,rax
ffff800000810772:	49 89 df             	mov    r15,rbx
ffff800000810775:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000081077c:	ff ff ff 
ffff80000081077f:	48 01 d8             	add    rax,rbx
ffff800000810782:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:401
	return NULL;
ffff800000810784:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810789:	eb 3e                	jmp    ffff8000008107c9 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:377
			goto find_lookup_success;
ffff80000081078b:	90                   	nop
ffff80000081078c:	eb 01                	jmp    ffff80000081078f <FAT32_readdir+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
		goto find_lookup_success;
ffff80000081078e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:405

find_lookup_success:

	filp->position += 32;
ffff80000081078f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810793:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810796:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff80000081079a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081079e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:406
	return filler(dirent,name,namelen,0,0);
ffff8000008107a1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008107a4:	48 63 d0             	movsxd rdx,eax
ffff8000008107a7:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff8000008107ab:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008107af:	4c 8b 8d 78 ff ff ff 	mov    r9,QWORD PTR [rbp-0x88]
ffff8000008107b6:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff8000008107bc:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008107c1:	48 89 c7             	mov    rdi,rax
ffff8000008107c4:	41 ff d1             	call   r9
ffff8000008107c7:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:407
}
ffff8000008107c9:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff8000008107cd:	5b                   	pop    rbx
ffff8000008107ce:	41 5f                	pop    r15
ffff8000008107d0:	5d                   	pop    rbp
ffff8000008107d1:	c3                   	ret    

ffff8000008107d2 <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:424
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff8000008107d2:	f3 0f 1e fa          	endbr64 
ffff8000008107d6:	55                   	push   rbp
ffff8000008107d7:	48 89 e5             	mov    rbp,rsp
ffff8000008107da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008107da <FAT32_create+0x8>
ffff8000008107e1:	49 bb 7e d3 10 00 00 	movabs r11,0x10d37e
ffff8000008107e8:	00 00 00 
ffff8000008107eb:	4c 01 d8             	add    rax,r11
ffff8000008107ee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008107f2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008107f6:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff8000008107f9:	90                   	nop
ffff8000008107fa:	5d                   	pop    rbp
ffff8000008107fb:	c3                   	ret    

ffff8000008107fc <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:428


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
ffff8000008107fc:	f3 0f 1e fa          	endbr64 
ffff800000810800:	55                   	push   rbp
ffff800000810801:	48 89 e5             	mov    rbp,rsp
ffff800000810804:	41 57                	push   r15
ffff800000810806:	53                   	push   rbx
ffff800000810807:	48 83 ec 60          	sub    rsp,0x60
ffff80000081080b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081080b <FAT32_lookup+0xf>
ffff800000810812:	49 bb 4d d3 10 00 00 	movabs r11,0x10d34d
ffff800000810819:	00 00 00 
ffff80000081081c:	4c 01 db             	add    rbx,r11
ffff80000081081f:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000810823:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:429
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
ffff800000810827:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081082b:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000081082f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:430
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
ffff800000810833:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810837:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000081083b:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000081083f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432

	unsigned int cluster = 0;
ffff800000810843:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:433
	unsigned long sector = 0;
ffff80000081084a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000810851:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434
	unsigned char * buf =NULL; 
ffff800000810852:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff800000810859:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:435
	int i = 0,j = 0,x = 0;
ffff80000081085a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000810861:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000810868:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436
	struct FAT32_Directory * tmpdentry = NULL;
ffff80000081086f:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000810876:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000810877:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000081087e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:438
	struct index_node * p = NULL;
ffff80000081087f:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000810886:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:440

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000810887:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081088b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081088f:	be 00 00 00 00       	mov    esi,0x0
ffff800000810894:	48 89 c7             	mov    rdi,rax
ffff800000810897:	49 89 df             	mov    r15,rbx
ffff80000081089a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081089f:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff8000008108a6:	ff ff ff 
ffff8000008108a9:	48 01 da             	add    rdx,rbx
ffff8000008108ac:	ff d2                	call   rdx
ffff8000008108ae:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:442

	cluster = finode->first_cluster;
ffff8000008108b2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008108b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008108b9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:445

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff8000008108bc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008108c0:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008108c4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008108c7:	83 e8 02             	sub    eax,0x2
ffff8000008108ca:	89 c1                	mov    ecx,eax
ffff8000008108cc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008108d0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008108d4:	48 0f af c1          	imul   rax,rcx
ffff8000008108d8:	48 01 d0             	add    rax,rdx
ffff8000008108db:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:446
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
ffff8000008108df:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008108e3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008108e6:	89 c6                	mov    esi,eax
ffff8000008108e8:	48 b8 e8 db ff ff ff 	movabs rax,0xffffffffffffdbe8
ffff8000008108ef:	ff ff ff 
ffff8000008108f2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008108f6:	48 89 c7             	mov    rdi,rax
ffff8000008108f9:	49 89 df             	mov    r15,rbx
ffff8000008108fc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810901:	48 b9 9b 3b ee ff ff 	movabs rcx,0xffffffffffee3b9b
ffff800000810908:	ff ff ff 
ffff80000081090b:	48 01 d9             	add    rcx,rbx
ffff80000081090e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:447
    if(blkdev_read(root_sb->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff800000810910:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810914:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810918:	48 c1 e0 09          	shl    rax,0x9
ffff80000081091c:	48 89 c7             	mov    rdi,rax
ffff80000081091f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810923:	c1 e0 09             	shl    eax,0x9
ffff800000810926:	89 c6                	mov    esi,eax
ffff800000810928:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000081092f:	ff ff ff 
ffff800000810932:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810936:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810939:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000081093d:	0f b7 c0             	movzx  eax,ax
ffff800000810940:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000810944:	48 89 d1             	mov    rcx,rdx
ffff800000810947:	48 89 fa             	mov    rdx,rdi
ffff80000081094a:	89 c7                	mov    edi,eax
ffff80000081094c:	49 89 df             	mov    r15,rbx
ffff80000081094f:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff800000810956:	ff ff ff 
ffff800000810959:	48 01 d8             	add    rax,rbx
ffff80000081095c:	ff d0                	call   rax
ffff80000081095e:	85 c0                	test   eax,eax
ffff800000810960:	79 4b                	jns    ffff8000008109ad <FAT32_lookup+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
ffff800000810962:	48 b8 10 dc ff ff ff 	movabs rax,0xffffffffffffdc10
ffff800000810969:	ff ff ff 
ffff80000081096c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810970:	48 89 c7             	mov    rdi,rax
ffff800000810973:	49 89 df             	mov    r15,rbx
ffff800000810976:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081097b:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff800000810982:	ff ff ff 
ffff800000810985:	48 01 da             	add    rdx,rbx
ffff800000810988:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
        kmfree(buf);
ffff80000081098a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081098e:	48 89 c7             	mov    rdi,rax
ffff800000810991:	49 89 df             	mov    r15,rbx
ffff800000810994:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000081099b:	ff ff ff 
ffff80000081099e:	48 01 d8             	add    rax,rbx
ffff8000008109a1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:451
		return NULL;
ffff8000008109a3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008109a8:	e9 5f 08 00 00       	jmp    ffff80000081120c <FAT32_lookup+0xa10>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:454
	}

	tmpdentry = (struct FAT32_Directory *)buf;
ffff8000008109ad:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008109b1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:456

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff8000008109b5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008109bc:	e9 9d 05 00 00       	jmp    ffff800000810f5e <FAT32_lookup+0x762>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:458
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff8000008109c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008109c5:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008109c9:	3c 0f                	cmp    al,0xf
ffff8000008109cb:	0f 84 59 05 00 00    	je     ffff800000810f2a <FAT32_lookup+0x72e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff8000008109d1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008109d5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008109d8:	3c e5                	cmp    al,0xe5
ffff8000008109da:	0f 84 4d 05 00 00    	je     ffff800000810f2d <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460 (discriminator 2)
ffff8000008109e0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008109e4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008109e7:	84 c0                	test   al,al
ffff8000008109e9:	0f 84 3e 05 00 00    	je     ffff800000810f2d <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460 (discriminator 4)
ffff8000008109ef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008109f3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008109f6:	3c 05                	cmp    al,0x5
ffff8000008109f8:	0f 84 2f 05 00 00    	je     ffff800000810f2d <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008109fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810a02:	48 83 e8 20          	sub    rax,0x20
ffff800000810a06:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464
		j = 0;
ffff800000810a0a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000810a11:	e9 88 01 00 00       	jmp    ffff800000810b9e <FAT32_lookup+0x3a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:469
		{
			for(x=0;x<5;x++)
ffff800000810a16:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810a1d:	eb 6a                	jmp    ffff800000810a89 <FAT32_lookup+0x28d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
ffff800000810a1f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a23:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810a26:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810a29:	7e 15                	jle    ffff800000810a40 <FAT32_lookup+0x244>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471 (discriminator 1)
ffff800000810a2b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810a2f:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810a32:	48 63 d2             	movsxd rdx,edx
ffff800000810a35:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810a3a:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810a3e:	74 44                	je     ffff800000810a84 <FAT32_lookup+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000810a40:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a44:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810a47:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810a4a:	0f 8f e0 04 00 00    	jg     ffff800000810f30 <FAT32_lookup+0x734>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473 (discriminator 1)
ffff800000810a50:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810a54:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810a57:	48 63 d2             	movsxd rdx,edx
ffff800000810a5a:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff800000810a5f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a63:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810a66:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810a69:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810a6c:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810a6f:	48 98                	cdqe   
ffff800000810a71:	48 01 f0             	add    rax,rsi
ffff800000810a74:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810a77:	66 98                	cbw    
ffff800000810a79:	66 39 c1             	cmp    cx,ax
ffff800000810a7c:	0f 85 ae 04 00 00    	jne    ffff800000810f30 <FAT32_lookup+0x734>
ffff800000810a82:	eb 01                	jmp    ffff800000810a85 <FAT32_lookup+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472
					continue;
ffff800000810a84:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:469 (discriminator 2)
			for(x=0;x<5;x++)
ffff800000810a85:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:469 (discriminator 1)
ffff800000810a89:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
ffff800000810a8d:	7e 90                	jle    ffff800000810a1f <FAT32_lookup+0x223>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
ffff800000810a8f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810a96:	eb 6a                	jmp    ffff800000810b02 <FAT32_lookup+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:478
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
ffff800000810a98:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a9c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810a9f:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810aa2:	7e 15                	jle    ffff800000810ab9 <FAT32_lookup+0x2bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:478 (discriminator 1)
ffff800000810aa4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810aa8:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810aab:	48 63 d2             	movsxd rdx,edx
ffff800000810aae:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000810ab3:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810ab7:	74 44                	je     ffff800000810afd <FAT32_lookup+0x301>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000810ab9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810abd:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810ac0:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810ac3:	0f 8f 6a 04 00 00    	jg     ffff800000810f33 <FAT32_lookup+0x737>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480 (discriminator 1)
ffff800000810ac9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810acd:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810ad0:	48 63 d2             	movsxd rdx,edx
ffff800000810ad3:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff800000810ad8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810adc:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810adf:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810ae2:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810ae5:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810ae8:	48 98                	cdqe   
ffff800000810aea:	48 01 f0             	add    rax,rsi
ffff800000810aed:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810af0:	66 98                	cbw    
ffff800000810af2:	66 39 c1             	cmp    cx,ax
ffff800000810af5:	0f 85 38 04 00 00    	jne    ffff800000810f33 <FAT32_lookup+0x737>
ffff800000810afb:	eb 01                	jmp    ffff800000810afe <FAT32_lookup+0x302>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479
					continue;
ffff800000810afd:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476 (discriminator 2)
			for(x=0;x<6;x++)
ffff800000810afe:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476 (discriminator 1)
ffff800000810b02:	83 7d e0 05          	cmp    DWORD PTR [rbp-0x20],0x5
ffff800000810b06:	7e 90                	jle    ffff800000810a98 <FAT32_lookup+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
ffff800000810b08:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810b0f:	eb 72                	jmp    ffff800000810b83 <FAT32_lookup+0x387>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:485
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
ffff800000810b11:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b15:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810b18:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810b1b:	7e 19                	jle    ffff800000810b36 <FAT32_lookup+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:485 (discriminator 1)
ffff800000810b1d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810b21:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810b24:	48 63 d2             	movsxd rdx,edx
ffff800000810b27:	48 83 c2 08          	add    rdx,0x8
ffff800000810b2b:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff800000810b30:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810b34:	74 48                	je     ffff800000810b7e <FAT32_lookup+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000810b36:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b3a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810b3d:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810b40:	0f 8f f0 03 00 00    	jg     ffff800000810f36 <FAT32_lookup+0x73a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487 (discriminator 1)
ffff800000810b46:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810b4a:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810b4d:	48 63 d2             	movsxd rdx,edx
ffff800000810b50:	48 83 c2 08          	add    rdx,0x8
ffff800000810b54:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000810b59:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b5d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810b60:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810b63:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810b66:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810b69:	48 98                	cdqe   
ffff800000810b6b:	48 01 f0             	add    rax,rsi
ffff800000810b6e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810b71:	66 98                	cbw    
ffff800000810b73:	66 39 c1             	cmp    cx,ax
ffff800000810b76:	0f 85 ba 03 00 00    	jne    ffff800000810f36 <FAT32_lookup+0x73a>
ffff800000810b7c:	eb 01                	jmp    ffff800000810b7f <FAT32_lookup+0x383>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486
					continue;
ffff800000810b7e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483 (discriminator 2)
			for(x=0;x<2;x++)
ffff800000810b7f:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483 (discriminator 1)
ffff800000810b83:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffff800000810b87:	7e 88                	jle    ffff800000810b11 <FAT32_lookup+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:491
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
ffff800000810b89:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b8d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810b90:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810b93:	0f 8d 2e 04 00 00    	jge    ffff800000810fc7 <FAT32_lookup+0x7cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:496
			{
				goto find_lookup_success;
			}

			tmpldentry --;
ffff800000810b99:	48 83 6d d0 20       	sub    QWORD PTR [rbp-0x30],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000810b9e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810ba2:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810ba6:	3c 0f                	cmp    al,0xf
ffff800000810ba8:	75 0f                	jne    ffff800000810bb9 <FAT32_lookup+0x3bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467 (discriminator 1)
ffff800000810baa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810bae:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810bb1:	3c e5                	cmp    al,0xe5
ffff800000810bb3:	0f 85 5d fe ff ff    	jne    ffff800000810a16 <FAT32_lookup+0x21a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500
		}

		//short file/dir base name compare
		j = 0;
ffff800000810bb9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:501
		for(x=0;x<8;x++)
ffff800000810bc0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810bc7:	e9 f4 01 00 00       	jmp    ffff800000810dc0 <FAT32_lookup+0x5c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:503
		{
			switch(tmpdentry->DIR_Name[x])
ffff800000810bcc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810bd0:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810bd3:	48 98                	cdqe   
ffff800000810bd5:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810bd9:	0f b6 c0             	movzx  eax,al
ffff800000810bdc:	83 f8 7a             	cmp    eax,0x7a
ffff800000810bdf:	0f 8f d0 01 00 00    	jg     ffff800000810db5 <FAT32_lookup+0x5b9>
ffff800000810be5:	83 f8 61             	cmp    eax,0x61
ffff800000810be8:	0f 8d e6 00 00 00    	jge    ffff800000810cd4 <FAT32_lookup+0x4d8>
ffff800000810bee:	83 f8 5a             	cmp    eax,0x5a
ffff800000810bf1:	0f 8f be 01 00 00    	jg     ffff800000810db5 <FAT32_lookup+0x5b9>
ffff800000810bf7:	83 f8 41             	cmp    eax,0x41
ffff800000810bfa:	0f 8d d4 00 00 00    	jge    ffff800000810cd4 <FAT32_lookup+0x4d8>
ffff800000810c00:	83 f8 20             	cmp    eax,0x20
ffff800000810c03:	74 1a                	je     ffff800000810c1f <FAT32_lookup+0x423>
ffff800000810c05:	83 f8 20             	cmp    eax,0x20
ffff800000810c08:	0f 8c a7 01 00 00    	jl     ffff800000810db5 <FAT32_lookup+0x5b9>
ffff800000810c0e:	83 e8 30             	sub    eax,0x30
ffff800000810c11:	83 f8 09             	cmp    eax,0x9
ffff800000810c14:	0f 87 9b 01 00 00    	ja     ffff800000810db5 <FAT32_lookup+0x5b9>
ffff800000810c1a:	e9 53 01 00 00       	jmp    ffff800000810d72 <FAT32_lookup+0x576>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:506
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000810c1f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810c23:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810c27:	0f b6 c0             	movzx  eax,al
ffff800000810c2a:	83 e0 10             	and    eax,0x10
ffff800000810c2d:	85 c0                	test   eax,eax
ffff800000810c2f:	75 50                	jne    ffff800000810c81 <FAT32_lookup+0x485>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:508
					{
						if(dest_dentry->name[j]=='.')
ffff800000810c31:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c35:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810c38:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810c3b:	48 98                	cdqe   
ffff800000810c3d:	48 01 d0             	add    rax,rdx
ffff800000810c40:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810c43:	3c 2e                	cmp    al,0x2e
ffff800000810c45:	0f 84 70 01 00 00    	je     ffff800000810dbb <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:510
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810c4b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810c4f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810c52:	48 98                	cdqe   
ffff800000810c54:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810c58:	0f b6 d0             	movzx  edx,al
ffff800000810c5b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c5f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810c62:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810c65:	48 98                	cdqe   
ffff800000810c67:	48 01 c8             	add    rax,rcx
ffff800000810c6a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810c6d:	0f be c0             	movsx  eax,al
ffff800000810c70:	39 c2                	cmp    edx,eax
ffff800000810c72:	0f 85 c1 02 00 00    	jne    ffff800000810f39 <FAT32_lookup+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
						{
							j++;
ffff800000810c78:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:513
							break;
ffff800000810c7c:	e9 3b 01 00 00       	jmp    ffff800000810dbc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:520
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810c81:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c85:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810c88:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810c8b:	7d 32                	jge    ffff800000810cbf <FAT32_lookup+0x4c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:520 (discriminator 1)
ffff800000810c8d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810c91:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810c94:	48 98                	cdqe   
ffff800000810c96:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810c9a:	0f b6 d0             	movzx  edx,al
ffff800000810c9d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810ca1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810ca4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810ca7:	48 98                	cdqe   
ffff800000810ca9:	48 01 c8             	add    rax,rcx
ffff800000810cac:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810caf:	0f be c0             	movsx  eax,al
ffff800000810cb2:	39 c2                	cmp    edx,eax
ffff800000810cb4:	75 09                	jne    ffff800000810cbf <FAT32_lookup+0x4c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:522
						{
							j++;
ffff800000810cb6:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:523
							break;
ffff800000810cba:	e9 fd 00 00 00       	jmp    ffff800000810dbc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:525
						}
						else if(j == dest_dentry->name_length)
ffff800000810cbf:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810cc3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810cc6:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810cc9:	0f 85 6d 02 00 00    	jne    ffff800000810f3c <FAT32_lookup+0x740>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:526
							continue;
ffff800000810ccf:	e9 e8 00 00 00       	jmp    ffff800000810dbc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:533
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000810cd4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810cd8:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810cdc:	0f b6 c0             	movzx  eax,al
ffff800000810cdf:	83 e0 08             	and    eax,0x8
ffff800000810ce2:	85 c0                	test   eax,eax
ffff800000810ce4:	74 49                	je     ffff800000810d2f <FAT32_lookup+0x533>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:534
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000810ce6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810cea:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810ced:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810cf0:	0f 8d 49 02 00 00    	jge    ffff800000810f3f <FAT32_lookup+0x743>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:534 (discriminator 1)
ffff800000810cf6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810cfa:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810cfd:	48 98                	cdqe   
ffff800000810cff:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810d03:	0f b6 c0             	movzx  eax,al
ffff800000810d06:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000810d09:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d0d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810d10:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810d13:	48 98                	cdqe   
ffff800000810d15:	48 01 c8             	add    rax,rcx
ffff800000810d18:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810d1b:	0f be c0             	movsx  eax,al
ffff800000810d1e:	39 c2                	cmp    edx,eax
ffff800000810d20:	0f 85 19 02 00 00    	jne    ffff800000810f3f <FAT32_lookup+0x743>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:536
						{
							j++;
ffff800000810d26:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537
							break;
ffff800000810d2a:	e9 8d 00 00 00       	jmp    ffff800000810dbc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:543
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810d2f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d33:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810d36:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810d39:	0f 8d 03 02 00 00    	jge    ffff800000810f42 <FAT32_lookup+0x746>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:543 (discriminator 1)
ffff800000810d3f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810d43:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810d46:	48 98                	cdqe   
ffff800000810d48:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810d4c:	0f b6 d0             	movzx  edx,al
ffff800000810d4f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d53:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810d56:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810d59:	48 98                	cdqe   
ffff800000810d5b:	48 01 c8             	add    rax,rcx
ffff800000810d5e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810d61:	0f be c0             	movsx  eax,al
ffff800000810d64:	39 c2                	cmp    edx,eax
ffff800000810d66:	0f 85 d6 01 00 00    	jne    ffff800000810f42 <FAT32_lookup+0x746>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:545
						{
							j++;
ffff800000810d6c:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:546
							break;
ffff800000810d70:	eb 4a                	jmp    ffff800000810dbc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:553
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810d72:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d76:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810d79:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810d7c:	0f 8d c3 01 00 00    	jge    ffff800000810f45 <FAT32_lookup+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:553 (discriminator 1)
ffff800000810d82:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810d86:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810d89:	48 98                	cdqe   
ffff800000810d8b:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810d8f:	0f b6 d0             	movzx  edx,al
ffff800000810d92:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d96:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810d99:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810d9c:	48 98                	cdqe   
ffff800000810d9e:	48 01 c8             	add    rax,rcx
ffff800000810da1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810da4:	0f be c0             	movsx  eax,al
ffff800000810da7:	39 c2                	cmp    edx,eax
ffff800000810da9:	0f 85 96 01 00 00    	jne    ffff800000810f45 <FAT32_lookup+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:555
					{
						j++;
ffff800000810daf:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:556
						break;
ffff800000810db3:	eb 07                	jmp    ffff800000810dbc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:562
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
ffff800000810db5:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:563
					break;
ffff800000810db9:	eb 01                	jmp    ffff800000810dbc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:509
							continue;
ffff800000810dbb:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:501 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000810dbc:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:501 (discriminator 1)
ffff800000810dc0:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
ffff800000810dc4:	0f 8e 02 fe ff ff    	jle    ffff800000810bcc <FAT32_lookup+0x3d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:567
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000810dca:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810dce:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810dd2:	0f b6 c0             	movzx  eax,al
ffff800000810dd5:	83 e0 10             	and    eax,0x10
ffff800000810dd8:	85 c0                	test   eax,eax
ffff800000810dda:	0f 85 ea 01 00 00    	jne    ffff800000810fca <FAT32_lookup+0x7ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569
		{
			j++;
ffff800000810de0:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570
			for(x=8;x<11;x++)
ffff800000810de4:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
ffff800000810deb:	e9 2b 01 00 00       	jmp    ffff800000810f1b <FAT32_lookup+0x71f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:572
			{
				switch(tmpdentry->DIR_Name[x])
ffff800000810df0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810df4:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810df7:	48 98                	cdqe   
ffff800000810df9:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810dfd:	0f b6 c0             	movzx  eax,al
ffff800000810e00:	83 f8 7a             	cmp    eax,0x7a
ffff800000810e03:	0f 8f 3f 01 00 00    	jg     ffff800000810f48 <FAT32_lookup+0x74c>
ffff800000810e09:	83 f8 61             	cmp    eax,0x61
ffff800000810e0c:	7d 2e                	jge    ffff800000810e3c <FAT32_lookup+0x640>
ffff800000810e0e:	83 f8 5a             	cmp    eax,0x5a
ffff800000810e11:	0f 8f 31 01 00 00    	jg     ffff800000810f48 <FAT32_lookup+0x74c>
ffff800000810e17:	83 f8 41             	cmp    eax,0x41
ffff800000810e1a:	7d 20                	jge    ffff800000810e3c <FAT32_lookup+0x640>
ffff800000810e1c:	83 f8 20             	cmp    eax,0x20
ffff800000810e1f:	0f 84 c4 00 00 00    	je     ffff800000810ee9 <FAT32_lookup+0x6ed>
ffff800000810e25:	83 f8 20             	cmp    eax,0x20
ffff800000810e28:	0f 8c 1a 01 00 00    	jl     ffff800000810f48 <FAT32_lookup+0x74c>
ffff800000810e2e:	83 e8 30             	sub    eax,0x30
ffff800000810e31:	83 f8 09             	cmp    eax,0x9
ffff800000810e34:	0f 87 0e 01 00 00    	ja     ffff800000810f48 <FAT32_lookup+0x74c>
ffff800000810e3a:	eb 7e                	jmp    ffff800000810eba <FAT32_lookup+0x6be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:576
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000810e3c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810e40:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810e44:	0f b6 c0             	movzx  eax,al
ffff800000810e47:	83 e0 10             	and    eax,0x10
ffff800000810e4a:	85 c0                	test   eax,eax
ffff800000810e4c:	74 39                	je     ffff800000810e87 <FAT32_lookup+0x68b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:577
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000810e4e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810e52:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810e55:	48 98                	cdqe   
ffff800000810e57:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810e5b:	0f b6 c0             	movzx  eax,al
ffff800000810e5e:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000810e61:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810e65:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810e68:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810e6b:	48 98                	cdqe   
ffff800000810e6d:	48 01 c8             	add    rax,rcx
ffff800000810e70:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810e73:	0f be c0             	movsx  eax,al
ffff800000810e76:	39 c2                	cmp    edx,eax
ffff800000810e78:	0f 85 cd 00 00 00    	jne    ffff800000810f4b <FAT32_lookup+0x74f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:579
							{
								j++;
ffff800000810e7e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:580
								break;
ffff800000810e82:	e9 90 00 00 00       	jmp    ffff800000810f17 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:586
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810e87:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810e8b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810e8e:	48 98                	cdqe   
ffff800000810e90:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810e94:	0f b6 d0             	movzx  edx,al
ffff800000810e97:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810e9b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810e9e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810ea1:	48 98                	cdqe   
ffff800000810ea3:	48 01 c8             	add    rax,rcx
ffff800000810ea6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810ea9:	0f be c0             	movsx  eax,al
ffff800000810eac:	39 c2                	cmp    edx,eax
ffff800000810eae:	0f 85 9a 00 00 00    	jne    ffff800000810f4e <FAT32_lookup+0x752>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:588
							{
								j++;
ffff800000810eb4:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:589
								break;
ffff800000810eb8:	eb 5d                	jmp    ffff800000810f17 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:596
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810eba:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810ebe:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810ec1:	48 98                	cdqe   
ffff800000810ec3:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810ec7:	0f b6 d0             	movzx  edx,al
ffff800000810eca:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810ece:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810ed1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810ed4:	48 98                	cdqe   
ffff800000810ed6:	48 01 c8             	add    rax,rcx
ffff800000810ed9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810edc:	0f be c0             	movsx  eax,al
ffff800000810edf:	39 c2                	cmp    edx,eax
ffff800000810ee1:	75 6e                	jne    ffff800000810f51 <FAT32_lookup+0x755>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:598
						{
							j++;
ffff800000810ee3:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:599
							break;
ffff800000810ee7:	eb 2e                	jmp    ffff800000810f17 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:605
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810ee9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810eed:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810ef0:	48 98                	cdqe   
ffff800000810ef2:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810ef6:	0f b6 d0             	movzx  edx,al
ffff800000810ef9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810efd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810f00:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810f03:	48 98                	cdqe   
ffff800000810f05:	48 01 c8             	add    rax,rcx
ffff800000810f08:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810f0b:	0f be c0             	movsx  eax,al
ffff800000810f0e:	39 c2                	cmp    edx,eax
ffff800000810f10:	75 42                	jne    ffff800000810f54 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:607
						{
							j++;
ffff800000810f12:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:608
							break;
ffff800000810f16:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570 (discriminator 2)
			for(x=8;x<11;x++)
ffff800000810f17:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570 (discriminator 1)
ffff800000810f1b:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
ffff800000810f1f:	0f 8e cb fe ff ff    	jle    ffff800000810df0 <FAT32_lookup+0x5f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:618
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
ffff800000810f25:	e9 a0 00 00 00       	jmp    ffff800000810fca <FAT32_lookup+0x7ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459
			continue;
ffff800000810f2a:	90                   	nop
ffff800000810f2b:	eb 28                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:461
			continue;
ffff800000810f2d:	90                   	nop
ffff800000810f2e:	eb 25                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:474
					goto continue_cmp_fail;
ffff800000810f30:	90                   	nop
ffff800000810f31:	eb 22                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:481
					goto continue_cmp_fail;
ffff800000810f33:	90                   	nop
ffff800000810f34:	eb 1f                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:488
					goto continue_cmp_fail;
ffff800000810f36:	90                   	nop
ffff800000810f37:	eb 1c                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:516
							goto continue_cmp_fail;
ffff800000810f39:	90                   	nop
ffff800000810f3a:	eb 19                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:528
							goto continue_cmp_fail;
ffff800000810f3c:	90                   	nop
ffff800000810f3d:	eb 16                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:540
							goto continue_cmp_fail;
ffff800000810f3f:	90                   	nop
ffff800000810f40:	eb 13                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:549
							goto continue_cmp_fail;
ffff800000810f42:	90                   	nop
ffff800000810f43:	eb 10                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:559
						goto continue_cmp_fail;
ffff800000810f45:	90                   	nop
ffff800000810f46:	eb 0d                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:614
						goto continue_cmp_fail;
ffff800000810f48:	90                   	nop
ffff800000810f49:	eb 0a                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:583
								goto continue_cmp_fail;
ffff800000810f4b:	90                   	nop
ffff800000810f4c:	eb 07                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:592
								goto continue_cmp_fail;
ffff800000810f4e:	90                   	nop
ffff800000810f4f:	eb 04                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:602
							goto continue_cmp_fail;
ffff800000810f51:	90                   	nop
ffff800000810f52:	eb 01                	jmp    ffff800000810f55 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:611
							goto continue_cmp_fail;
ffff800000810f54:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:456 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000810f55:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
ffff800000810f59:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:456 (discriminator 1)
ffff800000810f5e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000810f61:	48 63 d0             	movsxd rdx,eax
ffff800000810f64:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810f68:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810f6c:	48 39 c2             	cmp    rdx,rax
ffff800000810f6f:	0f 8c 4c fa ff ff    	jl     ffff8000008109c1 <FAT32_lookup+0x1c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:623

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810f75:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000810f78:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810f7c:	89 d6                	mov    esi,edx
ffff800000810f7e:	48 89 c7             	mov    rdi,rax
ffff800000810f81:	49 89 df             	mov    r15,rbx
ffff800000810f84:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff800000810f8b:	ff ff ff 
ffff800000810f8e:	48 01 d8             	add    rax,rbx
ffff800000810f91:	ff d0                	call   rax
ffff800000810f93:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:624
	if(cluster < 0x0ffffff7)
ffff800000810f96:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000810f9d:	77 05                	ja     ffff800000810fa4 <FAT32_lookup+0x7a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:625
		goto next_cluster;
ffff800000810f9f:	e9 18 f9 ff ff       	jmp    ffff8000008108bc <FAT32_lookup+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627

    kmfree(buf);
ffff800000810fa4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810fa8:	48 89 c7             	mov    rdi,rax
ffff800000810fab:	49 89 df             	mov    r15,rbx
ffff800000810fae:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000810fb5:	ff ff ff 
ffff800000810fb8:	48 01 d8             	add    rax,rbx
ffff800000810fbb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:628
	return NULL;
ffff800000810fbd:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810fc2:	e9 45 02 00 00       	jmp    ffff80000081120c <FAT32_lookup+0xa10>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:493
				goto find_lookup_success;
ffff800000810fc7:	90                   	nop
ffff800000810fc8:	eb 01                	jmp    ffff800000810fcb <FAT32_lookup+0x7cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:618
		goto find_lookup_success;
ffff800000810fca:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631

find_lookup_success:
	p = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff800000810fcb:	be 00 00 00 00       	mov    esi,0x0
ffff800000810fd0:	bf 3a 00 00 00       	mov    edi,0x3a
ffff800000810fd5:	49 89 df             	mov    r15,rbx
ffff800000810fd8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810fdd:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000810fe4:	ff ff ff 
ffff800000810fe7:	48 01 da             	add    rdx,rbx
ffff800000810fea:	ff d2                	call   rdx
ffff800000810fec:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:632
	memset(p,0,sizeof(struct index_node));
ffff800000810ff0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810ff4:	ba 3a 00 00 00       	mov    edx,0x3a
ffff800000810ff9:	be 00 00 00 00       	mov    esi,0x0
ffff800000810ffe:	48 89 c7             	mov    rdi,rax
ffff800000811001:	49 89 df             	mov    r15,rbx
ffff800000811004:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000081100b:	ff ff ff 
ffff80000081100e:	48 01 d8             	add    rax,rbx
ffff800000811011:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:633
	p->file_size = tmpdentry->DIR_FileSize;
ffff800000811013:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811017:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000081101a:	89 c2                	mov    edx,eax
ffff80000081101c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811020:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000811023:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811027:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081102a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081102e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811032:	48 01 d0             	add    rax,rdx
ffff800000811035:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000811039:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081103d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811041:	48 89 c1             	mov    rcx,rax
ffff800000811044:	48 89 d0             	mov    rax,rdx
ffff800000811047:	ba 00 00 00 00       	mov    edx,0x0
ffff80000081104c:	48 f7 f1             	div    rcx
ffff80000081104f:	48 89 c2             	mov    rdx,rax
ffff800000811052:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811056:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
ffff80000081105a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081105e:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811062:	0f b6 c0             	movzx  eax,al
ffff800000811065:	83 e0 10             	and    eax,0x10
ffff800000811068:	85 c0                	test   eax,eax
ffff80000081106a:	74 07                	je     ffff800000811073 <FAT32_lookup+0x877>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 1)
ffff80000081106c:	ba 02 00 00 00       	mov    edx,0x2
ffff800000811071:	eb 05                	jmp    ffff800000811078 <FAT32_lookup+0x87c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 2)
ffff800000811073:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 4)
ffff800000811078:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081107c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636 (discriminator 4)
	p->sb = parent_inode->sb;
ffff800000811080:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811084:	48 8b 50 1a          	mov    rdx,QWORD PTR [rax+0x1a]
ffff800000811088:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081108c:	48 89 50 1a          	mov    QWORD PTR [rax+0x1a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
ffff800000811090:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811094:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000081109b:	ff ff ff 
ffff80000081109e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008110a2:	48 89 50 22          	mov    QWORD PTR [rax+0x22],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
ffff8000008110a6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008110aa:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff8000008110b1:	ff ff ff 
ffff8000008110b4:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008110b8:	48 89 50 2a          	mov    QWORD PTR [rax+0x2a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff8000008110bc:	be 00 00 00 00       	mov    esi,0x0
ffff8000008110c1:	bf 20 00 00 00       	mov    edi,0x20
ffff8000008110c6:	49 89 df             	mov    r15,rbx
ffff8000008110c9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008110ce:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff8000008110d5:	ff ff ff 
ffff8000008110d8:	48 01 da             	add    rdx,rbx
ffff8000008110db:	ff d2                	call   rdx
ffff8000008110dd:	48 89 c2             	mov    rdx,rax
ffff8000008110e0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008110e4:	48 89 50 32          	mov    QWORD PTR [rax+0x32],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff8000008110e8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008110ec:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff8000008110f0:	ba 20 00 00 00       	mov    edx,0x20
ffff8000008110f5:	be 00 00 00 00       	mov    esi,0x0
ffff8000008110fa:	48 89 c7             	mov    rdi,rax
ffff8000008110fd:	49 89 df             	mov    r15,rbx
ffff800000811100:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811107:	ff ff ff 
ffff80000081110a:	48 01 d8             	add    rax,rbx
ffff80000081110d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:642 (discriminator 4)
	finode = p->private_index_info;
ffff80000081110f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811113:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000811117:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
ffff80000081111b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081111f:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000811123:	0f b7 c0             	movzx  eax,ax
ffff800000811126:	c1 e0 10             	shl    eax,0x10
ffff800000811129:	89 c2                	mov    edx,eax
ffff80000081112b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081112f:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
ffff800000811133:	0f b7 c0             	movzx  eax,ax
ffff800000811136:	09 d0                	or     eax,edx
ffff800000811138:	48 98                	cdqe   
ffff80000081113a:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000081113f:	48 89 c2             	mov    rdx,rax
ffff800000811142:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811146:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	finode->dentry_location = cluster;
ffff800000811149:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081114c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811150:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:646 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
ffff800000811154:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811158:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffff80000081115c:	48 c1 f8 05          	sar    rax,0x5
ffff800000811160:	48 89 c2             	mov    rdx,rax
ffff800000811163:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811167:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:647 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
ffff80000081116b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081116f:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
ffff800000811173:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811177:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
ffff80000081117b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081117f:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
ffff800000811183:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811187:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
ffff80000081118b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081118f:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
ffff800000811193:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811197:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:650 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
ffff80000081119b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081119f:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff8000008111a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008111a7:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
ffff8000008111ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008111af:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008111b3:	66 c1 e8 0c          	shr    ax,0xc
ffff8000008111b7:	66 85 c0             	test   ax,ax
ffff8000008111ba:	74 27                	je     ffff8000008111e3 <FAT32_lookup+0x9e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 1)
ffff8000008111bc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008111c0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008111c4:	83 e0 01             	and    eax,0x1
ffff8000008111c7:	48 85 c0             	test   rax,rax
ffff8000008111ca:	74 17                	je     ffff8000008111e3 <FAT32_lookup+0x9e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:654
	{
		p->attribute |= FS_ATTR_DEVICE;
ffff8000008111cc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008111d0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008111d4:	48 83 c8 04          	or     rax,0x4
ffff8000008111d8:	48 89 c2             	mov    rdx,rax
ffff8000008111db:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008111df:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:657
	}

	dest_dentry->dir_inode = p;
ffff8000008111e3:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008111e7:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008111eb:	48 89 50 3c          	mov    QWORD PTR [rax+0x3c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:658
    kmfree(buf);
ffff8000008111ef:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008111f3:	48 89 c7             	mov    rdi,rax
ffff8000008111f6:	49 89 df             	mov    r15,rbx
ffff8000008111f9:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000811200:	ff ff ff 
ffff800000811203:	48 01 d8             	add    rax,rbx
ffff800000811206:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:659
	return dest_dentry;	
ffff800000811208:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:660
}
ffff80000081120c:	48 83 c4 60          	add    rsp,0x60
ffff800000811210:	5b                   	pop    rbx
ffff800000811211:	41 5f                	pop    r15
ffff800000811213:	5d                   	pop    rbp
ffff800000811214:	c3                   	ret    

ffff800000811215 <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:664


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff800000811215:	f3 0f 1e fa          	endbr64 
ffff800000811219:	55                   	push   rbp
ffff80000081121a:	48 89 e5             	mov    rbp,rsp
ffff80000081121d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081121d <FAT32_mkdir+0x8>
ffff800000811224:	49 bb 3b c9 10 00 00 	movabs r11,0x10c93b
ffff80000081122b:	00 00 00 
ffff80000081122e:	4c 01 d8             	add    rax,r11
ffff800000811231:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811235:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811239:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000081123c:	90                   	nop
ffff80000081123d:	5d                   	pop    rbp
ffff80000081123e:	c3                   	ret    

ffff80000081123f <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:668


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
ffff80000081123f:	f3 0f 1e fa          	endbr64 
ffff800000811243:	55                   	push   rbp
ffff800000811244:	48 89 e5             	mov    rbp,rsp
ffff800000811247:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811247 <FAT32_rmdir+0x8>
ffff80000081124e:	49 bb 11 c9 10 00 00 	movabs r11,0x10c911
ffff800000811255:	00 00 00 
ffff800000811258:	4c 01 d8             	add    rax,r11
ffff80000081125b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081125f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811263:	90                   	nop
ffff800000811264:	5d                   	pop    rbp
ffff800000811265:	c3                   	ret    

ffff800000811266 <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:671

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
ffff800000811266:	f3 0f 1e fa          	endbr64 
ffff80000081126a:	55                   	push   rbp
ffff80000081126b:	48 89 e5             	mov    rbp,rsp
ffff80000081126e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081126e <FAT32_rename+0x8>
ffff800000811275:	49 bb ea c8 10 00 00 	movabs r11,0x10c8ea
ffff80000081127c:	00 00 00 
ffff80000081127f:	4c 01 d8             	add    rax,r11
ffff800000811282:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811286:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081128a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081128e:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000811292:	90                   	nop
ffff800000811293:	5d                   	pop    rbp
ffff800000811294:	c3                   	ret    

ffff800000811295 <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:674

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff800000811295:	f3 0f 1e fa          	endbr64 
ffff800000811299:	55                   	push   rbp
ffff80000081129a:	48 89 e5             	mov    rbp,rsp
ffff80000081129d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081129d <FAT32_getattr+0x8>
ffff8000008112a4:	49 bb bb c8 10 00 00 	movabs r11,0x10c8bb
ffff8000008112ab:	00 00 00 
ffff8000008112ae:	4c 01 d8             	add    rax,r11
ffff8000008112b1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008112b5:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008112b9:	90                   	nop
ffff8000008112ba:	5d                   	pop    rbp
ffff8000008112bb:	c3                   	ret    

ffff8000008112bc <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:677

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff8000008112bc:	f3 0f 1e fa          	endbr64 
ffff8000008112c0:	55                   	push   rbp
ffff8000008112c1:	48 89 e5             	mov    rbp,rsp
ffff8000008112c4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008112c4 <FAT32_setattr+0x8>
ffff8000008112cb:	49 bb 94 c8 10 00 00 	movabs r11,0x10c894
ffff8000008112d2:	00 00 00 
ffff8000008112d5:	4c 01 d8             	add    rax,r11
ffff8000008112d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008112dc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008112e0:	90                   	nop
ffff8000008112e1:	5d                   	pop    rbp
ffff8000008112e2:	c3                   	ret    

ffff8000008112e3 <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:692
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
ffff8000008112e3:	f3 0f 1e fa          	endbr64 
ffff8000008112e7:	55                   	push   rbp
ffff8000008112e8:	48 89 e5             	mov    rbp,rsp
ffff8000008112eb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008112eb <FAT32_compare+0x8>
ffff8000008112f2:	49 bb 6d c8 10 00 00 	movabs r11,0x10c86d
ffff8000008112f9:	00 00 00 
ffff8000008112fc:	4c 01 d8             	add    rax,r11
ffff8000008112ff:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811303:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811307:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081130b:	90                   	nop
ffff80000081130c:	5d                   	pop    rbp
ffff80000081130d:	c3                   	ret    

ffff80000081130e <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:693
long FAT32_hash(struct dir_entry * dentry,char * filename){}
ffff80000081130e:	f3 0f 1e fa          	endbr64 
ffff800000811312:	55                   	push   rbp
ffff800000811313:	48 89 e5             	mov    rbp,rsp
ffff800000811316:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811316 <FAT32_hash+0x8>
ffff80000081131d:	49 bb 42 c8 10 00 00 	movabs r11,0x10c842
ffff800000811324:	00 00 00 
ffff800000811327:	4c 01 d8             	add    rax,r11
ffff80000081132a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081132e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811332:	90                   	nop
ffff800000811333:	5d                   	pop    rbp
ffff800000811334:	c3                   	ret    

ffff800000811335 <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:694
long FAT32_release(struct dir_entry * dentry){}
ffff800000811335:	f3 0f 1e fa          	endbr64 
ffff800000811339:	55                   	push   rbp
ffff80000081133a:	48 89 e5             	mov    rbp,rsp
ffff80000081133d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081133d <FAT32_release+0x8>
ffff800000811344:	49 bb 1b c8 10 00 00 	movabs r11,0x10c81b
ffff80000081134b:	00 00 00 
ffff80000081134e:	4c 01 d8             	add    rax,r11
ffff800000811351:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811355:	90                   	nop
ffff800000811356:	5d                   	pop    rbp
ffff800000811357:	c3                   	ret    

ffff800000811358 <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:695
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
ffff800000811358:	f3 0f 1e fa          	endbr64 
ffff80000081135c:	55                   	push   rbp
ffff80000081135d:	48 89 e5             	mov    rbp,rsp
ffff800000811360:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811360 <FAT32_iput+0x8>
ffff800000811367:	49 bb f8 c7 10 00 00 	movabs r11,0x10c7f8
ffff80000081136e:	00 00 00 
ffff800000811371:	4c 01 d8             	add    rax,r11
ffff800000811374:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811378:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081137c:	90                   	nop
ffff80000081137d:	5d                   	pop    rbp
ffff80000081137e:	c3                   	ret    

ffff80000081137f <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:707
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
ffff80000081137f:	f3 0f 1e fa          	endbr64 
ffff800000811383:	55                   	push   rbp
ffff800000811384:	48 89 e5             	mov    rbp,rsp
ffff800000811387:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811387 <fat32_write_superblock+0x8>
ffff80000081138e:	49 bb d1 c7 10 00 00 	movabs r11,0x10c7d1
ffff800000811395:	00 00 00 
ffff800000811398:	4c 01 d8             	add    rax,r11
ffff80000081139b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081139f:	90                   	nop
ffff8000008113a0:	5d                   	pop    rbp
ffff8000008113a1:	c3                   	ret    

ffff8000008113a2 <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:710

void fat32_put_superblock(struct super_block * sb)
{
ffff8000008113a2:	f3 0f 1e fa          	endbr64 
ffff8000008113a6:	55                   	push   rbp
ffff8000008113a7:	48 89 e5             	mov    rbp,rsp
ffff8000008113aa:	41 57                	push   r15
ffff8000008113ac:	53                   	push   rbx
ffff8000008113ad:	48 83 ec 10          	sub    rsp,0x10
ffff8000008113b1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008113b1 <fat32_put_superblock+0xf>
ffff8000008113b8:	49 bb a7 c7 10 00 00 	movabs r11,0x10c7a7
ffff8000008113bf:	00 00 00 
ffff8000008113c2:	4c 01 db             	add    rbx,r11
ffff8000008113c5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:711
    kmfree(sb->private_sb_info);
ffff8000008113c9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008113cd:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff8000008113d1:	48 89 c7             	mov    rdi,rax
ffff8000008113d4:	49 89 df             	mov    r15,rbx
ffff8000008113d7:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff8000008113de:	ff ff ff 
ffff8000008113e1:	48 01 d8             	add    rax,rbx
ffff8000008113e4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:712
    kmfree(sb->root->dir_inode->private_index_info);
ffff8000008113e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008113ea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008113ed:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff8000008113f1:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff8000008113f5:	48 89 c7             	mov    rdi,rax
ffff8000008113f8:	49 89 df             	mov    r15,rbx
ffff8000008113fb:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000811402:	ff ff ff 
ffff800000811405:	48 01 d8             	add    rax,rbx
ffff800000811408:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:713
    kmfree(sb->root->dir_inode);
ffff80000081140a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081140e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811411:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811415:	48 89 c7             	mov    rdi,rax
ffff800000811418:	49 89 df             	mov    r15,rbx
ffff80000081141b:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000811422:	ff ff ff 
ffff800000811425:	48 01 d8             	add    rax,rbx
ffff800000811428:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714
    kmfree(sb->root);
ffff80000081142a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081142e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811431:	48 89 c7             	mov    rdi,rax
ffff800000811434:	49 89 df             	mov    r15,rbx
ffff800000811437:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff80000081143e:	ff ff ff 
ffff800000811441:	48 01 d8             	add    rax,rbx
ffff800000811444:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
    kmfree(sb);
ffff800000811446:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081144a:	48 89 c7             	mov    rdi,rax
ffff80000081144d:	49 89 df             	mov    r15,rbx
ffff800000811450:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000811457:	ff ff ff 
ffff80000081145a:	48 01 d8             	add    rax,rbx
ffff80000081145d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:716
}
ffff80000081145f:	90                   	nop
ffff800000811460:	48 83 c4 10          	add    rsp,0x10
ffff800000811464:	5b                   	pop    rbx
ffff800000811465:	41 5f                	pop    r15
ffff800000811467:	5d                   	pop    rbp
ffff800000811468:	c3                   	ret    

ffff800000811469 <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719

void fat32_write_inode(struct index_node * inode)
{
ffff800000811469:	f3 0f 1e fa          	endbr64 
ffff80000081146d:	55                   	push   rbp
ffff80000081146e:	48 89 e5             	mov    rbp,rsp
ffff800000811471:	41 57                	push   r15
ffff800000811473:	53                   	push   rbx
ffff800000811474:	48 83 ec 40          	sub    rsp,0x40
ffff800000811478:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811478 <fat32_write_inode+0xf>
ffff80000081147f:	49 bb e0 c6 10 00 00 	movabs r11,0x10c6e0
ffff800000811486:	00 00 00 
ffff800000811489:	4c 01 db             	add    rbx,r11
ffff80000081148c:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:720
	struct FAT32_Directory * fdentry = NULL;
ffff800000811490:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000811497:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:721
	struct FAT32_Directory * buf = NULL;
ffff800000811498:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000081149f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:722
	struct FAT32_inode_info * finode = inode->private_index_info;
ffff8000008114a0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008114a4:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff8000008114a8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
ffff8000008114ac:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008114b0:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff8000008114b4:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff8000008114b8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:724
	unsigned long sector = 0;
ffff8000008114bc:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008114c3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:726

	if(finode->dentry_location == 0)
ffff8000008114c4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008114c8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008114cc:	48 85 c0             	test   rax,rax
ffff8000008114cf:	75 2d                	jne    ffff8000008114fe <fat32_write_inode+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:728
	{
		printf("FS ERROR:write root inode!\n");	
ffff8000008114d1:	48 b8 3c dc ff ff ff 	movabs rax,0xffffffffffffdc3c
ffff8000008114d8:	ff ff ff 
ffff8000008114db:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008114df:	48 89 c7             	mov    rdi,rax
ffff8000008114e2:	49 89 df             	mov    r15,rbx
ffff8000008114e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008114ea:	48 ba 9b 3b ee ff ff 	movabs rdx,0xffffffffffee3b9b
ffff8000008114f1:	ff ff ff 
ffff8000008114f4:	48 01 da             	add    rdx,rbx
ffff8000008114f7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:729
		return ;
ffff8000008114f9:	e9 73 01 00 00       	jmp    ffff800000811671 <fat32_write_inode+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
ffff8000008114fe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811502:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000811506:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081150a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000081150e:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000811512:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811516:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081151a:	48 0f af c2          	imul   rax,rdx
ffff80000081151e:	48 01 c8             	add    rax,rcx
ffff800000811521:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:733
	buf = (struct FAT32_Directory *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000811525:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811529:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081152d:	be 00 00 00 00       	mov    esi,0x0
ffff800000811532:	48 89 c7             	mov    rdi,rax
ffff800000811535:	49 89 df             	mov    r15,rbx
ffff800000811538:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081153d:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000811544:	ff ff ff 
ffff800000811547:	48 01 da             	add    rdx,rbx
ffff80000081154a:	ff d2                	call   rdx
ffff80000081154c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:734
	memset(buf,0,fsbi->bytes_per_cluster);
ffff800000811550:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811554:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811558:	89 c2                	mov    edx,eax
ffff80000081155a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081155e:	be 00 00 00 00       	mov    esi,0x0
ffff800000811563:	48 89 c7             	mov    rdi,rax
ffff800000811566:	49 89 df             	mov    r15,rbx
ffff800000811569:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811570:	ff ff ff 
ffff800000811573:	48 01 d8             	add    rax,rbx
ffff800000811576:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:735
	blkdev_read(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff800000811578:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081157c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811580:	48 c1 e0 09          	shl    rax,0x9
ffff800000811584:	48 89 c7             	mov    rdi,rax
ffff800000811587:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081158b:	c1 e0 09             	shl    eax,0x9
ffff80000081158e:	89 c6                	mov    esi,eax
ffff800000811590:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811594:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000811598:	0f b7 c0             	movzx  eax,ax
ffff80000081159b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081159f:	48 89 d1             	mov    rcx,rdx
ffff8000008115a2:	48 89 fa             	mov    rdx,rdi
ffff8000008115a5:	89 c7                	mov    edi,eax
ffff8000008115a7:	49 89 df             	mov    r15,rbx
ffff8000008115aa:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff8000008115b1:	ff ff ff 
ffff8000008115b4:	48 01 d8             	add    rax,rbx
ffff8000008115b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:736
    fdentry = buf+finode->dentry_position;
ffff8000008115b9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008115bd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008115c1:	48 c1 e0 05          	shl    rax,0x5
ffff8000008115c5:	48 89 c2             	mov    rdx,rax
ffff8000008115c8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008115cc:	48 01 d0             	add    rax,rdx
ffff8000008115cf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
ffff8000008115d3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008115d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008115da:	89 c2                	mov    edx,eax
ffff8000008115dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008115e0:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
ffff8000008115e3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008115e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008115ea:	89 c2                	mov    edx,eax
ffff8000008115ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008115f0:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:741
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
ffff8000008115f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008115f8:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008115fc:	66 25 00 f0          	and    ax,0xf000
ffff800000811600:	89 c2                	mov    edx,eax
ffff800000811602:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811606:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811609:	48 c1 e8 10          	shr    rax,0x10
ffff80000081160d:	09 c2                	or     edx,eax
ffff80000081160f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811613:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743
	
	blkdev_write(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff800000811617:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081161b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081161f:	48 c1 e0 09          	shl    rax,0x9
ffff800000811623:	48 89 c7             	mov    rdi,rax
ffff800000811626:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081162a:	c1 e0 09             	shl    eax,0x9
ffff80000081162d:	89 c6                	mov    esi,eax
ffff80000081162f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811633:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000811637:	0f b7 c0             	movzx  eax,ax
ffff80000081163a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081163e:	48 89 d1             	mov    rcx,rdx
ffff800000811641:	48 89 fa             	mov    rdx,rdi
ffff800000811644:	89 c7                	mov    edi,eax
ffff800000811646:	49 89 df             	mov    r15,rbx
ffff800000811649:	48 b8 95 01 ef ff ff 	movabs rax,0xffffffffffef0195
ffff800000811650:	ff ff ff 
ffff800000811653:	48 01 d8             	add    rax,rbx
ffff800000811656:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
    kmfree(buf);
ffff800000811658:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081165c:	48 89 c7             	mov    rdi,rax
ffff80000081165f:	49 89 df             	mov    r15,rbx
ffff800000811662:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000811669:	ff ff ff 
ffff80000081166c:	48 01 d8             	add    rax,rbx
ffff80000081166f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:745
}
ffff800000811671:	48 83 c4 40          	add    rsp,0x40
ffff800000811675:	5b                   	pop    rbx
ffff800000811676:	41 5f                	pop    r15
ffff800000811678:	5d                   	pop    rbp
ffff800000811679:	c3                   	ret    

ffff80000081167a <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:756

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000081167a:	f3 0f 1e fa          	endbr64 
ffff80000081167e:	55                   	push   rbp
ffff80000081167f:	48 89 e5             	mov    rbp,rsp
ffff800000811682:	41 57                	push   r15
ffff800000811684:	53                   	push   rbx
ffff800000811685:	48 83 ec 40          	sub    rsp,0x40
ffff800000811689:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811689 <fat32_read_superblock+0xf>
ffff800000811690:	49 bb cf c4 10 00 00 	movabs r11,0x10c4cf
ffff800000811697:	00 00 00 
ffff80000081169a:	4c 01 db             	add    rbx,r11
ffff80000081169d:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff8000008116a1:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:757
	struct super_block * sbp = NULL;
ffff8000008116a5:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008116ac:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:758
	struct FAT32_inode_info * finode = NULL;
ffff8000008116ad:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008116b4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:759
	struct FAT32_BootSector * fbs = NULL;
ffff8000008116b5:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff8000008116bc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:760
	struct FAT32_sb_info * fsbi = NULL;
ffff8000008116bd:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008116c4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763

	////super block
	sbp = (struct super_block *) kmalloc(sizeof(struct super_block), 0);
ffff8000008116c5:	be 00 00 00 00       	mov    esi,0x0
ffff8000008116ca:	bf 22 00 00 00       	mov    edi,0x22
ffff8000008116cf:	49 89 df             	mov    r15,rbx
ffff8000008116d2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008116d7:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff8000008116de:	ff ff ff 
ffff8000008116e1:	48 01 da             	add    rdx,rbx
ffff8000008116e4:	ff d2                	call   rdx
ffff8000008116e6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:764
	memset(sbp,0,sizeof(struct super_block));
ffff8000008116ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008116ee:	ba 22 00 00 00       	mov    edx,0x22
ffff8000008116f3:	be 00 00 00 00       	mov    esi,0x0
ffff8000008116f8:	48 89 c7             	mov    rdi,rax
ffff8000008116fb:	49 89 df             	mov    r15,rbx
ffff8000008116fe:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811705:	ff ff ff 
ffff800000811708:	48 01 d8             	add    rax,rbx
ffff80000081170b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:766

	sbp->sb_ops = &FAT32_sb_ops;
ffff80000081170d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811711:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff800000811718:	ff ff ff 
ffff80000081171b:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000081171f:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:767
	sbp->private_sb_info = (struct FAT32_sb_info *) kmalloc(sizeof(struct FAT32_sb_info), 0);
ffff800000811723:	be 00 00 00 00       	mov    esi,0x0
ffff800000811728:	bf 60 00 00 00       	mov    edi,0x60
ffff80000081172d:	49 89 df             	mov    r15,rbx
ffff800000811730:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811735:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff80000081173c:	ff ff ff 
ffff80000081173f:	48 01 da             	add    rdx,rbx
ffff800000811742:	ff d2                	call   rdx
ffff800000811744:	48 89 c2             	mov    rdx,rax
ffff800000811747:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081174b:	48 89 50 1a          	mov    QWORD PTR [rax+0x1a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:768
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
ffff80000081174f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811753:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff800000811757:	ba 60 00 00 00       	mov    edx,0x60
ffff80000081175c:	be 00 00 00 00       	mov    esi,0x0
ffff800000811761:	48 89 c7             	mov    rdi,rax
ffff800000811764:	49 89 df             	mov    r15,rbx
ffff800000811767:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000081176e:	ff ff ff 
ffff800000811771:	48 01 d8             	add    rax,rbx
ffff800000811774:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
ffff800000811776:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081177a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
 	fsbi = sbp->private_sb_info;
ffff80000081177e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811782:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff800000811786:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:773
	fsbi->start_sector = DPTE->start_LBA;
ffff80000081178a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081178e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811791:	89 c2                	mov    edx,eax
ffff800000811793:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811797:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:774
	fsbi->sector_count = DPTE->sectors_limit;
ffff80000081179a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081179e:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff8000008117a1:	89 c2                	mov    edx,eax
ffff8000008117a3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117a7:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:775
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
ffff8000008117ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117af:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff8000008117b3:	0f b6 d0             	movzx  edx,al
ffff8000008117b6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117ba:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
ffff8000008117be:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117c2:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff8000008117c6:	0f b6 d0             	movzx  edx,al
ffff8000008117c9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117cd:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff8000008117d1:	0f b7 c0             	movzx  eax,ax
ffff8000008117d4:	0f af c2             	imul   eax,edx
ffff8000008117d7:	48 63 d0             	movsxd rdx,eax
ffff8000008117da:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117de:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
ffff8000008117e2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117e6:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff8000008117ea:	0f b7 d0             	movzx  edx,ax
ffff8000008117ed:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117f1:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
ffff8000008117f5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008117f9:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff8000008117fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811800:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff800000811804:	0f b7 c0             	movzx  eax,ax
ffff800000811807:	8d 0c 02             	lea    ecx,[rdx+rax*1]
ffff80000081180a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081180e:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff800000811811:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811815:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000811819:	0f b6 c0             	movzx  eax,al
ffff80000081181c:	0f af c2             	imul   eax,edx
ffff80000081181f:	01 c8                	add    eax,ecx
ffff800000811821:	89 c2                	mov    edx,eax
ffff800000811823:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811827:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
ffff80000081182b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081182f:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000811832:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811836:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff80000081183a:	0f b7 c0             	movzx  eax,ax
ffff80000081183d:	01 d0                	add    eax,edx
ffff80000081183f:	89 c2                	mov    edx,eax
ffff800000811841:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811845:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
ffff800000811849:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081184d:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000811850:	89 c2                	mov    edx,eax
ffff800000811852:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811856:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->NumFATs = fbs->BPB_NumFATs;
ffff80000081185a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081185e:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000811862:	0f b6 d0             	movzx  edx,al
ffff800000811865:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811869:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
ffff80000081186d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811871:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811875:	0f b7 d0             	movzx  edx,ax
ffff800000811878:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081187c:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:783
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
ffff800000811880:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811884:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000811888:	0f b7 d0             	movzx  edx,ax
ffff80000081188b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081188f:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:785
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
ffff800000811893:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811897:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
ffff80000081189a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081189e:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff8000008118a2:	0f b7 d0             	movzx  edx,ax
ffff8000008118a5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008118a9:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff8000008118ad:	0f b7 c0             	movzx  eax,ax
ffff8000008118b0:	89 c6                	mov    esi,eax
ffff8000008118b2:	48 b8 58 dc ff ff ff 	movabs rax,0xffffffffffffdc58
ffff8000008118b9:	ff ff ff 
ffff8000008118bc:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008118c0:	48 89 c7             	mov    rdi,rax
ffff8000008118c3:	49 89 df             	mov    r15,rbx
ffff8000008118c6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008118cb:	49 b8 9b 3b ee ff ff 	movabs r8,0xffffffffffee3b9b
ffff8000008118d2:	ff ff ff 
ffff8000008118d5:	49 01 d8             	add    r8,rbx
ffff8000008118d8:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:788
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmalloc(sizeof(struct FAT32_FSInfo), 0);
ffff8000008118db:	be 00 00 00 00       	mov    esi,0x0
ffff8000008118e0:	bf 00 02 00 00       	mov    edi,0x200
ffff8000008118e5:	49 89 df             	mov    r15,rbx
ffff8000008118e8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008118ed:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff8000008118f4:	ff ff ff 
ffff8000008118f7:	48 01 da             	add    rdx,rbx
ffff8000008118fa:	ff d2                	call   rdx
ffff8000008118fc:	48 89 c2             	mov    rdx,rax
ffff8000008118ff:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811903:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:789
	memset(fsbi->fat_fsinfo,0,512);
ffff800000811907:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081190b:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000081190f:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811914:	be 00 00 00 00       	mov    esi,0x0
ffff800000811919:	48 89 c7             	mov    rdi,rax
ffff80000081191c:	49 89 df             	mov    r15,rbx
ffff80000081191f:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811926:	ff ff ff 
ffff800000811929:	48 01 d8             	add    rax,rbx
ffff80000081192c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:790
	blkdev_read(root_sb->dev,(DPTE->start_LBA + fbs->BPB_FSInfo)*SECTOR_SIZE,SECTOR_SIZE,(unsigned char *)fsbi->fat_fsinfo);
ffff80000081192e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811932:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff800000811936:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081193a:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff80000081193d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811941:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811945:	0f b7 c0             	movzx  eax,ax
ffff800000811948:	01 c8                	add    eax,ecx
ffff80000081194a:	c1 e0 09             	shl    eax,0x9
ffff80000081194d:	89 c6                	mov    esi,eax
ffff80000081194f:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000811956:	ff ff ff 
ffff800000811959:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081195d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811960:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811964:	0f b7 c0             	movzx  eax,ax
ffff800000811967:	48 89 d1             	mov    rcx,rdx
ffff80000081196a:	ba 00 02 00 00       	mov    edx,0x200
ffff80000081196f:	89 c7                	mov    edi,eax
ffff800000811971:	49 89 df             	mov    r15,rbx
ffff800000811974:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff80000081197b:	ff ff ff 
ffff80000081197e:	48 01 d8             	add    rax,rbx
ffff800000811981:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:791
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
ffff800000811983:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811987:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000081198b:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
ffff800000811991:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811995:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811999:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
ffff80000081199f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008119a3:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff8000008119a7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008119a9:	89 c6                	mov    esi,eax
ffff8000008119ab:	48 b8 a0 dc ff ff ff 	movabs rax,0xffffffffffffdca0
ffff8000008119b2:	ff ff ff 
ffff8000008119b5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008119b9:	48 89 c7             	mov    rdi,rax
ffff8000008119bc:	49 89 df             	mov    r15,rbx
ffff8000008119bf:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008119c4:	49 b8 9b 3b ee ff ff 	movabs r8,0xffffffffffee3b9b
ffff8000008119cb:	ff ff ff 
ffff8000008119ce:	49 01 d8             	add    r8,rbx
ffff8000008119d1:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	
	////directory entry
	sbp->root = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff8000008119d4:	be 00 00 00 00       	mov    esi,0x0
ffff8000008119d9:	bf 54 00 00 00       	mov    edi,0x54
ffff8000008119de:	49 89 df             	mov    r15,rbx
ffff8000008119e1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008119e6:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff8000008119ed:	ff ff ff 
ffff8000008119f0:	48 01 da             	add    rdx,rbx
ffff8000008119f3:	ff d2                	call   rdx
ffff8000008119f5:	48 89 c2             	mov    rdx,rax
ffff8000008119f8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119fc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:795
	memset(sbp->root,0,sizeof(struct dir_entry));
ffff8000008119ff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a03:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a06:	ba 54 00 00 00       	mov    edx,0x54
ffff800000811a0b:	be 00 00 00 00       	mov    esi,0x0
ffff800000811a10:	48 89 c7             	mov    rdi,rax
ffff800000811a13:	49 89 df             	mov    r15,rbx
ffff800000811a16:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811a1d:	ff ff ff 
ffff800000811a20:	48 01 d8             	add    rax,rbx
ffff800000811a23:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:797

	list_init(&sbp->root->child_node);
ffff800000811a25:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a29:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a2c:	48 83 c0 0c          	add    rax,0xc
ffff800000811a30:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000811a34:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811a38:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000811a3f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811a43:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811a4a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000811a4b:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:798
	list_init(&sbp->root->subdirs_list);
ffff800000811a4c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a50:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a53:	48 83 c0 24          	add    rax,0x24
ffff800000811a57:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000811a5b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811a5f:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000811a66:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811a6a:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811a71:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000811a72:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:799
	sbp->root->parent = sbp->root;
ffff800000811a73:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a77:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a7a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000811a7e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000811a81:	48 89 50 44          	mov    QWORD PTR [rax+0x44],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:800
	sbp->root->dir_ops = &FAT32_dentry_ops;
ffff800000811a85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a89:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a8c:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff800000811a93:	ff ff ff 
ffff800000811a96:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811a9a:	48 89 50 4c          	mov    QWORD PTR [rax+0x4c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801
	sbp->root->name = (char *) kmalloc(2, 0);
ffff800000811a9e:	be 00 00 00 00       	mov    esi,0x0
ffff800000811aa3:	bf 02 00 00 00       	mov    edi,0x2
ffff800000811aa8:	49 89 df             	mov    r15,rbx
ffff800000811aab:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ab0:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000811ab7:	ff ff ff 
ffff800000811aba:	48 01 da             	add    rdx,rbx
ffff800000811abd:	ff d2                	call   rdx
ffff800000811abf:	48 89 c2             	mov    rdx,rax
ffff800000811ac2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ac6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ac9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:802
	sbp->root->name[0] = '/';
ffff800000811acc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ad0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ad3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ad6:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:803
	sbp->root->name_length = 1;
ffff800000811ad9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811add:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ae0:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806

	////index node
	sbp->root->dir_inode = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff800000811ae7:	be 00 00 00 00       	mov    esi,0x0
ffff800000811aec:	bf 3a 00 00 00       	mov    edi,0x3a
ffff800000811af1:	49 89 df             	mov    r15,rbx
ffff800000811af4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811af9:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000811b00:	ff ff ff 
ffff800000811b03:	48 01 da             	add    rdx,rbx
ffff800000811b06:	ff d2                	call   rdx
ffff800000811b08:	48 89 c2             	mov    rdx,rax
ffff800000811b0b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b0f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b12:	48 89 50 3c          	mov    QWORD PTR [rax+0x3c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
ffff800000811b16:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b1d:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811b21:	ba 3a 00 00 00       	mov    edx,0x3a
ffff800000811b26:	be 00 00 00 00       	mov    esi,0x0
ffff800000811b2b:	48 89 c7             	mov    rdi,rax
ffff800000811b2e:	49 89 df             	mov    r15,rbx
ffff800000811b31:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811b38:	ff ff ff 
ffff800000811b3b:	48 01 d8             	add    rax,rbx
ffff800000811b3e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:808
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
ffff800000811b40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b44:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b47:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811b4b:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff800000811b52:	ff ff ff 
ffff800000811b55:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811b59:	48 89 50 2a          	mov    QWORD PTR [rax+0x2a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:809
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
ffff800000811b5d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b61:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b64:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811b68:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff800000811b6f:	ff ff ff 
ffff800000811b72:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811b76:	48 89 50 22          	mov    QWORD PTR [rax+0x22],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:810
	sbp->root->dir_inode->file_size = 0;
ffff800000811b7a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b7e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b81:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811b85:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:811
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000811b8c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b90:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b93:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811b97:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811b9a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b9e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811ba2:	48 01 d0             	add    rax,rdx
ffff800000811ba5:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000811ba9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811bad:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811bb1:	48 89 c6             	mov    rsi,rax
ffff800000811bb4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bb8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811bbb:	48 8b 48 3c          	mov    rcx,QWORD PTR [rax+0x3c]
ffff800000811bbf:	48 89 d0             	mov    rax,rdx
ffff800000811bc2:	ba 00 00 00 00       	mov    edx,0x0
ffff800000811bc7:	48 f7 f6             	div    rsi
ffff800000811bca:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
ffff800000811bce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bd2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811bd5:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811bd9:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff800000811be0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:813
	sbp->root->dir_inode->sb = sbp;
ffff800000811be1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811be5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811be8:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811bec:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000811bf0:	48 89 50 1a          	mov    QWORD PTR [rax+0x1a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff800000811bf4:	be 00 00 00 00       	mov    esi,0x0
ffff800000811bf9:	bf 20 00 00 00       	mov    edi,0x20
ffff800000811bfe:	49 89 df             	mov    r15,rbx
ffff800000811c01:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811c06:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000811c0d:	ff ff ff 
ffff800000811c10:	48 01 da             	add    rdx,rbx
ffff800000811c13:	ff d2                	call   rdx
ffff800000811c15:	48 89 c2             	mov    rdx,rax
ffff800000811c18:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811c1c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811c1f:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811c23:	48 89 50 32          	mov    QWORD PTR [rax+0x32],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000811c27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811c2b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811c2e:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811c32:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000811c36:	ba 20 00 00 00       	mov    edx,0x20
ffff800000811c3b:	be 00 00 00 00       	mov    esi,0x0
ffff800000811c40:	48 89 c7             	mov    rdi,rax
ffff800000811c43:	49 89 df             	mov    r15,rbx
ffff800000811c46:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811c4d:	ff ff ff 
ffff800000811c50:	48 01 d8             	add    rax,rbx
ffff800000811c53:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:818
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
ffff800000811c55:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811c59:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811c5c:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811c60:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000811c64:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:819
	finode->first_cluster = fbs->BPB_RootClus;
ffff800000811c68:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811c6c:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff800000811c6f:	89 c2                	mov    edx,eax
ffff800000811c71:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c75:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:820
	finode->dentry_location = 0;
ffff800000811c78:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c7c:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff800000811c83:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:821
	finode->dentry_position = 0; 
ffff800000811c84:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c88:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811c8f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822
	finode->create_date = 0;
ffff800000811c90:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c94:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	finode->create_time = 0;
ffff800000811c9a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c9e:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode->write_date = 0;
ffff800000811ca4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811ca8:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:825
	finode->write_time = 0;
ffff800000811cae:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811cb2:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827

	return sbp;
ffff800000811cb8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:828
}
ffff800000811cbc:	48 83 c4 40          	add    rsp,0x40
ffff800000811cc0:	5b                   	pop    rbx
ffff800000811cc1:	41 5f                	pop    r15
ffff800000811cc3:	5d                   	pop    rbp
ffff800000811cc4:	c3                   	ret    

ffff800000811cc5 <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:840
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};

void DISK1_FAT32_FS_init()
{
ffff800000811cc5:	f3 0f 1e fa          	endbr64 
ffff800000811cc9:	55                   	push   rbp
ffff800000811cca:	48 89 e5             	mov    rbp,rsp
ffff800000811ccd:	41 57                	push   r15
ffff800000811ccf:	53                   	push   rbx
ffff800000811cd0:	48 81 ec 10 04 00 00 	sub    rsp,0x410
ffff800000811cd7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811cd7 <DISK1_FAT32_FS_init+0x12>
ffff800000811cde:	49 bb 81 be 10 00 00 	movabs r11,0x10be81
ffff800000811ce5:	00 00 00 
ffff800000811ce8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:843
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
ffff800000811ceb:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000811cf2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:844
	struct Disk_Partition_Table DPT = {0};
ffff800000811cf3:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000811cfa:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811cff:	b9 40 00 00 00       	mov    ecx,0x40
ffff800000811d04:	48 89 d7             	mov    rdi,rdx
ffff800000811d07:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:846

	register_filesystem(&FAT32_fs_type);
ffff800000811d0a:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000811d11:	ff ff ff 
ffff800000811d14:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811d18:	48 89 c7             	mov    rdi,rax
ffff800000811d1b:	49 89 df             	mov    r15,rbx
ffff800000811d1e:	48 b8 ba d7 ee ff ff 	movabs rax,0xffffffffffeed7ba
ffff800000811d25:	ff ff ff 
ffff800000811d28:	48 01 d8             	add    rax,rbx
ffff800000811d2b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:848
	
	memset(buf,0,512);
ffff800000811d2d:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811d34:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811d39:	be 00 00 00 00       	mov    esi,0x0
ffff800000811d3e:	48 89 c7             	mov    rdi,rax
ffff800000811d41:	49 89 df             	mov    r15,rbx
ffff800000811d44:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811d4b:	ff ff ff 
ffff800000811d4e:	48 01 d8             	add    rax,rbx
ffff800000811d51:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:850

	blkdev_read(root_sb->dev,0,512,buf);
ffff800000811d53:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000811d5a:	ff ff ff 
ffff800000811d5d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811d61:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811d64:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811d68:	0f b7 c0             	movzx  eax,ax
ffff800000811d6b:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811d72:	48 89 d1             	mov    rcx,rdx
ffff800000811d75:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811d7a:	be 00 00 00 00       	mov    esi,0x0
ffff800000811d7f:	89 c7                	mov    edi,eax
ffff800000811d81:	49 89 df             	mov    r15,rbx
ffff800000811d84:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff800000811d8b:	ff ff ff 
ffff800000811d8e:	48 01 d8             	add    rax,rbx
ffff800000811d91:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:853
    // read_disk(DISK_MAJOR_MAJOR, 0, 1, buf);/*rint r= equest(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
    // chk_result(r);
    DPT = *(struct Disk_Partition_Table *)buf;
ffff800000811d93:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811d9a:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
ffff800000811da1:	48 89 d6             	mov    rsi,rdx
ffff800000811da4:	ba 40 00 00 00       	mov    edx,0x40
ffff800000811da9:	48 89 c7             	mov    rdi,rax
ffff800000811dac:	48 89 d1             	mov    rcx,rdx
ffff800000811daf:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:854
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
ffff800000811db2:	0f b6 85 a2 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x25e]
ffff800000811db9:	0f b6 d0             	movzx  edx,al
ffff800000811dbc:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000811dc2:	89 c6                	mov    esi,eax
ffff800000811dc4:	48 b8 e8 dc ff ff ff 	movabs rax,0xffffffffffffdce8
ffff800000811dcb:	ff ff ff 
ffff800000811dce:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811dd2:	48 89 c7             	mov    rdi,rax
ffff800000811dd5:	49 89 df             	mov    r15,rbx
ffff800000811dd8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ddd:	48 b9 9b 3b ee ff ff 	movabs rcx,0xffffffffffee3b9b
ffff800000811de4:	ff ff ff 
ffff800000811de7:	48 01 d9             	add    rcx,rbx
ffff800000811dea:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:856

	memset(buf,0,512);
ffff800000811dec:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811df3:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811df8:	be 00 00 00 00       	mov    esi,0x0
ffff800000811dfd:	48 89 c7             	mov    rdi,rax
ffff800000811e00:	49 89 df             	mov    r15,rbx
ffff800000811e03:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811e0a:	ff ff ff 
ffff800000811e0d:	48 01 d8             	add    rax,rbx
ffff800000811e10:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:857
	blkdev_read(root_sb->dev,DPT.DPTE[0].start_LBA*512,512,buf);
ffff800000811e12:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000811e18:	c1 e0 09             	shl    eax,0x9
ffff800000811e1b:	89 c6                	mov    esi,eax
ffff800000811e1d:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000811e24:	ff ff ff 
ffff800000811e27:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811e2b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811e2e:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811e32:	0f b7 c0             	movzx  eax,ax
ffff800000811e35:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811e3c:	48 89 d1             	mov    rcx,rdx
ffff800000811e3f:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811e44:	89 c7                	mov    edi,eax
ffff800000811e46:	49 89 df             	mov    r15,rbx
ffff800000811e49:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff800000811e50:	ff ff ff 
ffff800000811e53:	48 01 d8             	add    rax,rbx
ffff800000811e56:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:860

    //挂载新文件系统到/mnt
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
ffff800000811e58:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811e5f:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000811e66:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
ffff800000811e6d:	48 89 c2             	mov    rdx,rax
ffff800000811e70:	48 89 ce             	mov    rsi,rcx
ffff800000811e73:	48 b8 e2 dc ff ff ff 	movabs rax,0xffffffffffffdce2
ffff800000811e7a:	ff ff ff 
ffff800000811e7d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811e81:	48 89 c7             	mov    rdi,rax
ffff800000811e84:	49 89 df             	mov    r15,rbx
ffff800000811e87:	48 b8 0d d7 ee ff ff 	movabs rax,0xffffffffffeed70d
ffff800000811e8e:	ff ff ff 
ffff800000811e91:	48 01 d8             	add    rax,rbx
ffff800000811e94:	ff d0                	call   rax
ffff800000811e96:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:861
    fat32_sb->root=dmnt;
ffff800000811e9a:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000811ea1:	ff ff ff 
ffff800000811ea4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811ea8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811eab:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811eaf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:863
//    list_add_to_behind(&root_sb->root->subdirs_list,ddev);//把dev文件夹挂到新的rfs下
}
ffff800000811eb2:	90                   	nop
ffff800000811eb3:	48 81 c4 10 04 00 00 	add    rsp,0x410
ffff800000811eba:	5b                   	pop    rbx
ffff800000811ebb:	41 5f                	pop    r15
ffff800000811ebd:	5d                   	pop    rbp
ffff800000811ebe:	c3                   	ret    

ffff800000811ebf <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
ffff800000811ebf:	f3 0f 1e fa          	endbr64 
ffff800000811ec3:	55                   	push   rbp
ffff800000811ec4:	48 89 e5             	mov    rbp,rsp
ffff800000811ec7:	41 57                	push   r15
ffff800000811ec9:	53                   	push   rbx
ffff800000811eca:	48 83 ec 30          	sub    rsp,0x30
ffff800000811ece:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811ece <close_tty+0xf>
ffff800000811ed5:	49 bb 8a bc 10 00 00 	movabs r11,0x10bc8a
ffff800000811edc:	00 00 00 
ffff800000811edf:	4c 01 db             	add    rbx,r11
ffff800000811ee2:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000811ee6:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000811eea:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811eee:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811ef2:	48 83 c0 18          	add    rax,0x18
ffff800000811ef6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000811efa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811efe:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811f02:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000811f06:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811f0a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811f0e:	48 83 c0 30          	add    rax,0x30
ffff800000811f12:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
ffff800000811f16:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f1a:	48 89 c7             	mov    rdi,rax
ffff800000811f1d:	49 89 df             	mov    r15,rbx
ffff800000811f20:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000811f27:	ff ff ff 
ffff800000811f2a:	48 01 d8             	add    rax,rbx
ffff800000811f2d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
ffff800000811f2f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811f33:	48 89 c7             	mov    rdi,rax
ffff800000811f36:	49 89 df             	mov    r15,rbx
ffff800000811f39:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000811f40:	ff ff ff 
ffff800000811f43:	48 01 d8             	add    rax,rbx
ffff800000811f46:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
ffff800000811f48:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811f4c:	48 89 c7             	mov    rdi,rax
ffff800000811f4f:	49 89 df             	mov    r15,rbx
ffff800000811f52:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000811f59:	ff ff ff 
ffff800000811f5c:	48 01 d8             	add    rax,rbx
ffff800000811f5f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
ffff800000811f61:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811f65:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811f69:	48 89 c7             	mov    rdi,rax
ffff800000811f6c:	49 89 df             	mov    r15,rbx
ffff800000811f6f:	48 b8 8d 47 ee ff ff 	movabs rax,0xffffffffffee478d
ffff800000811f76:	ff ff ff 
ffff800000811f79:	48 01 d8             	add    rax,rbx
ffff800000811f7c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
ffff800000811f7e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
ffff800000811f83:	48 83 c4 30          	add    rsp,0x30
ffff800000811f87:	5b                   	pop    rbx
ffff800000811f88:	41 5f                	pop    r15
ffff800000811f8a:	5d                   	pop    rbp
ffff800000811f8b:	c3                   	ret    

ffff800000811f8c <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
ffff800000811f8c:	f3 0f 1e fa          	endbr64 
ffff800000811f90:	55                   	push   rbp
ffff800000811f91:	48 89 e5             	mov    rbp,rsp
ffff800000811f94:	41 57                	push   r15
ffff800000811f96:	53                   	push   rbx
ffff800000811f97:	48 83 ec 20          	sub    rsp,0x20
ffff800000811f9b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811f9b <init_tty+0xf>
ffff800000811fa2:	49 bb bd bb 10 00 00 	movabs r11,0x10bbbd
ffff800000811fa9:	00 00 00 
ffff800000811fac:	4c 01 db             	add    rbx,r11
ffff800000811faf:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000811fb3:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc();
ffff800000811fb7:	49 89 df             	mov    r15,rbx
ffff800000811fba:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811fbf:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000811fc6:	ff ff ff 
ffff800000811fc9:	48 01 da             	add    rdx,rbx
ffff800000811fcc:	ff d2                	call   rdx
ffff800000811fce:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc();
ffff800000811fd2:	49 89 df             	mov    r15,rbx
ffff800000811fd5:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811fda:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000811fe1:	ff ff ff 
ffff800000811fe4:	48 01 da             	add    rdx,rbx
ffff800000811fe7:	ff d2                	call   rdx
ffff800000811fe9:	48 89 c2             	mov    rdx,rax
ffff800000811fec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ff0:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc();
ffff800000811ff4:	49 89 df             	mov    r15,rbx
ffff800000811ff7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ffc:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000812003:	ff ff ff 
ffff800000812006:	48 01 da             	add    rdx,rbx
ffff800000812009:	ff d2                	call   rdx
ffff80000081200b:	48 89 c2             	mov    rdx,rax
ffff80000081200e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812012:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc();
ffff800000812015:	49 89 df             	mov    r15,rbx
ffff800000812018:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081201d:	48 ba 1e 44 ee ff ff 	movabs rdx,0xffffffffffee441e
ffff800000812024:	ff ff ff 
ffff800000812027:	48 01 da             	add    rdx,rbx
ffff80000081202a:	ff d2                	call   rdx
ffff80000081202c:	48 89 c2             	mov    rdx,rax
ffff80000081202f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812033:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
ffff800000812037:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081203b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
ffff800000812042:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812046:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
ffff80000081204d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812051:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
ffff800000812058:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081205c:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
ffff800000812063:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812067:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
ffff80000081206e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812072:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
ffff800000812079:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081207d:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
ffff800000812084:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812088:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
ffff80000081208f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812093:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
ffff80000081209a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081209e:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008120a5:	ff ff ff 
ffff8000008120a8:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008120ac:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
ffff8000008120b0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008120b4:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008120bb:	ff ff ff 
ffff8000008120be:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008120c2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
ffff8000008120c6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008120ca:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008120ce:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
ffff8000008120d2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
ffff8000008120d7:	48 83 c4 20          	add    rsp,0x20
ffff8000008120db:	5b                   	pop    rbx
ffff8000008120dc:	41 5f                	pop    r15
ffff8000008120de:	5d                   	pop    rbp
ffff8000008120df:	c3                   	ret    

ffff8000008120e0 <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff8000008120e0:	f3 0f 1e fa          	endbr64 
ffff8000008120e4:	55                   	push   rbp
ffff8000008120e5:	48 89 e5             	mov    rbp,rsp
ffff8000008120e8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008120e8 <read_tty+0x8>
ffff8000008120ef:	49 bb 70 ba 10 00 00 	movabs r11,0x10ba70
ffff8000008120f6:	00 00 00 
ffff8000008120f9:	4c 01 d8             	add    rax,r11
ffff8000008120fc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812100:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000812104:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000812108:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
ffff80000081210c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812110:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812114:	48 83 c0 18          	add    rax,0x18
ffff800000812118:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
ffff80000081211c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000812123:	eb 6e                	jmp    ffff800000812193 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
ffff800000812125:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812129:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000081212c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812130:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000812133:	39 c2                	cmp    edx,eax
ffff800000812135:	75 0b                	jne    ffff800000812142 <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
ffff800000812137:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081213b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
ffff800000812142:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812146:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000812149:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081214d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812150:	39 c2                	cmp    edx,eax
ffff800000812152:	75 02                	jne    ffff800000812156 <read_tty+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
ffff800000812154:	eb 3d                	jmp    ffff800000812193 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
ffff800000812156:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081215a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081215d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812161:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000812164:	48 98                	cdqe   
ffff800000812166:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000081216a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081216d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812170:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000812173:	48 63 d0             	movsxd rdx,eax
ffff800000812176:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081217a:	48 01 c2             	add    rdx,rax
ffff80000081217d:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000812180:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
ffff800000812182:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812186:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000812189:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081218c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812190:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000812193:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812196:	48 98                	cdqe   
ffff800000812198:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000081219c:	77 87                	ja     ffff800000812125 <read_tty+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
ffff80000081219e:	90                   	nop
ffff80000081219f:	5d                   	pop    rbp
ffff8000008121a0:	c3                   	ret    

ffff8000008121a1 <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff8000008121a1:	f3 0f 1e fa          	endbr64 
ffff8000008121a5:	55                   	push   rbp
ffff8000008121a6:	48 89 e5             	mov    rbp,rsp
ffff8000008121a9:	41 57                	push   r15
ffff8000008121ab:	48 83 ec 48          	sub    rsp,0x48
ffff8000008121af:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008121af <write_tty+0xe>
ffff8000008121b6:	49 bb a9 b9 10 00 00 	movabs r11,0x10b9a9
ffff8000008121bd:	00 00 00 
ffff8000008121c0:	4c 01 d8             	add    rax,r11
ffff8000008121c3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008121c7:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff8000008121cb:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff8000008121cf:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
ffff8000008121d3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008121d7:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008121db:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
ffff8000008121df:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
ffff8000008121e6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121ea:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008121ed:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff8000008121f0:	eb 5b                	jmp    ffff80000081224d <write_tty+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
ffff8000008121f2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121f6:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008121f9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121fd:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000812200:	39 d1                	cmp    ecx,edx
ffff800000812202:	75 0b                	jne    ffff80000081220f <write_tty+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
ffff800000812204:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812208:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
ffff80000081220f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812212:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000812215:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff800000812218:	48 63 ca             	movsxd rcx,edx
ffff80000081221b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081221f:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000812223:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812227:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000081222a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081222e:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812231:	48 63 d2             	movsxd rdx,edx
ffff800000812234:	48 01 d1             	add    rcx,rdx
ffff800000812237:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000081223a:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
ffff80000081223c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812240:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812243:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000812246:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081224a:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff80000081224d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812250:	48 63 d2             	movsxd rdx,edx
ffff800000812253:	48 39 55 b8          	cmp    QWORD PTR [rbp-0x48],rdx
ffff800000812257:	77 99                	ja     ffff8000008121f2 <write_tty+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff800000812259:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081225d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812260:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000812263:	48 63 d2             	movsxd rdx,edx
ffff800000812266:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000081226a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000081226e:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffff800000812272:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000812277:	49 89 c7             	mov    r15,rax
ffff80000081227a:	49 b8 91 d1 ee ff ff 	movabs r8,0xffffffffffeed191
ffff800000812281:	ff ff ff 
ffff800000812284:	49 01 c0             	add    r8,rax
ffff800000812287:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
ffff80000081228a:	90                   	nop
ffff80000081228b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000081228f:	c9                   	leave  
ffff800000812290:	c3                   	ret    

ffff800000812291 <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
ffff800000812291:	f3 0f 1e fa          	endbr64 
ffff800000812295:	55                   	push   rbp
ffff800000812296:	48 89 e5             	mov    rbp,rsp
ffff800000812299:	41 57                	push   r15
ffff80000081229b:	48 83 ec 58          	sub    rsp,0x58
ffff80000081229f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081229f <ioctl_tty+0xe>
ffff8000008122a6:	49 bb b9 b8 10 00 00 	movabs r11,0x10b8b9
ffff8000008122ad:	00 00 00 
ffff8000008122b0:	4c 01 d8             	add    rax,r11
ffff8000008122b3:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff8000008122b7:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff8000008122bb:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffff8000008122bf:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
ffff8000008122c3:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008122c7:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008122cb:	48 83 c2 30          	add    rdx,0x30
ffff8000008122cf:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008122d3:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008122d7:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008122db:	48 83 c2 18          	add    rdx,0x18
ffff8000008122df:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
ffff8000008122e3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
ffff8000008122ea:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008122ee:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008122f1:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
ffff8000008122f5:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008122f9:	48 83 c2 08          	add    rdx,0x8
ffff8000008122fd:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000812300:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
ffff800000812304:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812308:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081230b:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
ffff80000081230e:	c7 45 c0 ff ff ff ff 	mov    DWORD PTR [rbp-0x40],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
ffff800000812315:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff80000081231a:	0f 84 b8 01 00 00    	je     ffff8000008124d8 <ioctl_tty+0x247>
ffff800000812320:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff800000812325:	0f 87 b8 01 00 00    	ja     ffff8000008124e3 <ioctl_tty+0x252>
ffff80000081232b:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff800000812330:	0f 84 0f 01 00 00    	je     ffff800000812445 <ioctl_tty+0x1b4>
ffff800000812336:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff80000081233b:	0f 87 a2 01 00 00    	ja     ffff8000008124e3 <ioctl_tty+0x252>
ffff800000812341:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff800000812346:	74 6b                	je     ffff8000008123b3 <ioctl_tty+0x122>
ffff800000812348:	48 83 7d a8 01       	cmp    QWORD PTR [rbp-0x58],0x1
ffff80000081234d:	0f 84 a2 00 00 00    	je     ffff8000008123f5 <ioctl_tty+0x164>
ffff800000812353:	e9 8b 01 00 00       	jmp    ffff8000008124e3 <ioctl_tty+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
ffff800000812358:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081235c:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff80000081235f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812363:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000812366:	39 d1                	cmp    ecx,edx
ffff800000812368:	75 0b                	jne    ffff800000812375 <ioctl_tty+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
ffff80000081236a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081236e:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
ffff800000812375:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812378:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081237b:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff80000081237e:	48 63 ca             	movsxd rcx,edx
ffff800000812381:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000812385:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000812389:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081238d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812390:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812394:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812397:	48 63 d2             	movsxd rdx,edx
ffff80000081239a:	48 01 d1             	add    rcx,rdx
ffff80000081239d:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff8000008123a0:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
ffff8000008123a2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008123a6:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008123a9:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008123ac:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008123b0:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
ffff8000008123b3:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008123b6:	48 63 d2             	movsxd rdx,edx
ffff8000008123b9:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff8000008123bd:	77 99                	ja     ffff800000812358 <ioctl_tty+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff8000008123bf:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008123c3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008123c6:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff8000008123c9:	48 63 d2             	movsxd rdx,edx
ffff8000008123cc:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008123d0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008123d4:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffff8000008123d8:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008123dd:	49 89 c7             	mov    r15,rax
ffff8000008123e0:	49 b8 91 d1 ee ff ff 	movabs r8,0xffffffffffeed191
ffff8000008123e7:	ff ff ff 
ffff8000008123ea:	49 01 c0             	add    r8,rax
ffff8000008123ed:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
ffff8000008123f0:	e9 f7 00 00 00       	jmp    ffff8000008124ec <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
ffff8000008123f5:	be c1 00 00 00       	mov    esi,0xc1
ffff8000008123fa:	48 ba 06 dd ff ff ff 	movabs rdx,0xffffffffffffdd06
ffff800000812401:	ff ff ff 
ffff800000812404:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff800000812408:	48 89 d7             	mov    rdi,rdx
ffff80000081240b:	49 89 c7             	mov    r15,rax
ffff80000081240e:	48 ba c3 dc ee ff ff 	movabs rdx,0xffffffffffeedcc3
ffff800000812415:	ff ff ff 
ffff800000812418:	48 01 c2             	add    rdx,rax
ffff80000081241b:	ff d2                	call   rdx
ffff80000081241d:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
ffff800000812420:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000812424:	75 0c                	jne    ffff800000812432 <ioctl_tty+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
ffff800000812426:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000081242d:	e9 bf 00 00 00       	jmp    ffff8000008124f1 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
ffff800000812432:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000812436:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081243a:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff80000081243d:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
ffff800000812440:	e9 a7 00 00 00       	jmp    ffff8000008124ec <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
ffff800000812445:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000812449:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081244d:	8b 52 48             	mov    edx,DWORD PTR [rdx+0x48]
ffff800000812450:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
ffff800000812453:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000812457:	75 0c                	jne    ffff800000812465 <ioctl_tty+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
ffff800000812459:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000812460:	e9 8c 00 00 00       	jmp    ffff8000008124f1 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
ffff800000812465:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000812468:	89 d7                	mov    edi,edx
ffff80000081246a:	49 89 c7             	mov    r15,rax
ffff80000081246d:	48 ba 63 e3 ee ff ff 	movabs rdx,0xffffffffffeee363
ffff800000812474:	ff ff ff 
ffff800000812477:	48 01 c2             	add    rdx,rax
ffff80000081247a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
ffff80000081247c:	eb 5a                	jmp    ffff8000008124d8 <ioctl_tty+0x247>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
ffff80000081247e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812482:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000812485:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812489:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000081248c:	39 c2                	cmp    edx,eax
ffff80000081248e:	75 0b                	jne    ffff80000081249b <ioctl_tty+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
ffff800000812490:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812494:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
ffff80000081249b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081249e:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008124a1:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff8000008124a4:	48 63 d0             	movsxd rdx,eax
ffff8000008124a7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008124ab:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff8000008124af:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008124b3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008124b6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008124ba:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008124bd:	48 98                	cdqe   
ffff8000008124bf:	48 01 c2             	add    rdx,rax
ffff8000008124c2:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff8000008124c5:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
ffff8000008124c7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008124cb:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008124ce:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008124d1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008124d5:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
ffff8000008124d8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008124db:	48 98                	cdqe   
ffff8000008124dd:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff8000008124e1:	77 9b                	ja     ffff80000081247e <ioctl_tty+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
ffff8000008124e3:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008124ea:	eb 05                	jmp    ffff8000008124f1 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
ffff8000008124ec:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
ffff8000008124f1:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008124f5:	c9                   	leave  
ffff8000008124f6:	c3                   	ret    

ffff8000008124f7 <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
ffff8000008124f7:	f3 0f 1e fa          	endbr64 
ffff8000008124fb:	55                   	push   rbp
ffff8000008124fc:	48 89 e5             	mov    rbp,rsp
ffff8000008124ff:	41 57                	push   r15
ffff800000812501:	53                   	push   rbx
ffff800000812502:	48 83 ec 10          	sub    rsp,0x10
ffff800000812506:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812506 <init_com+0xf>
ffff80000081250d:	49 bb 52 b6 10 00 00 	movabs r11,0x10b652
ffff800000812514:	00 00 00 
ffff800000812517:	4c 01 db             	add    rbx,r11
ffff80000081251a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
ffff80000081251d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812520:	83 c0 01             	add    eax,0x1
ffff800000812523:	0f b7 c0             	movzx  eax,ax
ffff800000812526:	be 00 00 00 00       	mov    esi,0x0
ffff80000081252b:	89 c7                	mov    edi,eax
ffff80000081252d:	49 89 df             	mov    r15,rbx
ffff800000812530:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000812537:	ff ff ff 
ffff80000081253a:	48 01 d8             	add    rax,rbx
ffff80000081253d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
ffff80000081253f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812542:	83 c0 03             	add    eax,0x3
ffff800000812545:	0f b7 c0             	movzx  eax,ax
ffff800000812548:	be 80 00 00 00       	mov    esi,0x80
ffff80000081254d:	89 c7                	mov    edi,eax
ffff80000081254f:	49 89 df             	mov    r15,rbx
ffff800000812552:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000812559:	ff ff ff 
ffff80000081255c:	48 01 d8             	add    rax,rbx
ffff80000081255f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
ffff800000812561:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812564:	0f b7 c0             	movzx  eax,ax
ffff800000812567:	be 03 00 00 00       	mov    esi,0x3
ffff80000081256c:	89 c7                	mov    edi,eax
ffff80000081256e:	49 89 df             	mov    r15,rbx
ffff800000812571:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000812578:	ff ff ff 
ffff80000081257b:	48 01 d8             	add    rax,rbx
ffff80000081257e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
ffff800000812580:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812583:	83 c0 01             	add    eax,0x1
ffff800000812586:	0f b7 c0             	movzx  eax,ax
ffff800000812589:	be 00 00 00 00       	mov    esi,0x0
ffff80000081258e:	89 c7                	mov    edi,eax
ffff800000812590:	49 89 df             	mov    r15,rbx
ffff800000812593:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000081259a:	ff ff ff 
ffff80000081259d:	48 01 d8             	add    rax,rbx
ffff8000008125a0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
ffff8000008125a2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008125a5:	83 c0 03             	add    eax,0x3
ffff8000008125a8:	0f b7 c0             	movzx  eax,ax
ffff8000008125ab:	be 03 00 00 00       	mov    esi,0x3
ffff8000008125b0:	89 c7                	mov    edi,eax
ffff8000008125b2:	49 89 df             	mov    r15,rbx
ffff8000008125b5:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008125bc:	ff ff ff 
ffff8000008125bf:	48 01 d8             	add    rax,rbx
ffff8000008125c2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
ffff8000008125c4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008125c7:	83 c0 02             	add    eax,0x2
ffff8000008125ca:	0f b7 c0             	movzx  eax,ax
ffff8000008125cd:	be 87 00 00 00       	mov    esi,0x87
ffff8000008125d2:	89 c7                	mov    edi,eax
ffff8000008125d4:	49 89 df             	mov    r15,rbx
ffff8000008125d7:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008125de:	ff ff ff 
ffff8000008125e1:	48 01 d8             	add    rax,rbx
ffff8000008125e4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
ffff8000008125e6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008125e9:	83 c0 04             	add    eax,0x4
ffff8000008125ec:	0f b7 c0             	movzx  eax,ax
ffff8000008125ef:	be 0b 00 00 00       	mov    esi,0xb
ffff8000008125f4:	89 c7                	mov    edi,eax
ffff8000008125f6:	49 89 df             	mov    r15,rbx
ffff8000008125f9:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000812600:	ff ff ff 
ffff800000812603:	48 01 d8             	add    rax,rbx
ffff800000812606:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
ffff800000812608:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081260b:	83 c0 04             	add    eax,0x4
ffff80000081260e:	0f b7 c0             	movzx  eax,ax
ffff800000812611:	be 0f 00 00 00       	mov    esi,0xf
ffff800000812616:	89 c7                	mov    edi,eax
ffff800000812618:	49 89 df             	mov    r15,rbx
ffff80000081261b:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000812622:	ff ff ff 
ffff800000812625:	48 01 d8             	add    rax,rbx
ffff800000812628:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
ffff80000081262a:	90                   	nop
ffff80000081262b:	48 83 c4 10          	add    rsp,0x10
ffff80000081262f:	5b                   	pop    rbx
ffff800000812630:	41 5f                	pop    r15
ffff800000812632:	5d                   	pop    rbp
ffff800000812633:	c3                   	ret    

ffff800000812634 <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
ffff800000812634:	f3 0f 1e fa          	endbr64 
ffff800000812638:	55                   	push   rbp
ffff800000812639:	48 89 e5             	mov    rbp,rsp
ffff80000081263c:	41 57                	push   r15
ffff80000081263e:	53                   	push   rbx
ffff80000081263f:	48 83 ec 20          	sub    rsp,0x20
ffff800000812643:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812643 <com_putchar+0xf>
ffff80000081264a:	49 bb 15 b5 10 00 00 	movabs r11,0x10b515
ffff800000812651:	00 00 00 
ffff800000812654:	4c 01 db             	add    rbx,r11
ffff800000812657:	89 f8                	mov    eax,edi
ffff800000812659:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000081265c:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
ffff800000812660:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000812663:	83 c0 05             	add    eax,0x5
ffff800000812666:	0f b6 c0             	movzx  eax,al
ffff800000812669:	89 c7                	mov    edi,eax
ffff80000081266b:	49 89 df             	mov    r15,rbx
ffff80000081266e:	48 b8 01 a3 ee ff ff 	movabs rax,0xffffffffffeea301
ffff800000812675:	ff ff ff 
ffff800000812678:	48 01 d8             	add    rax,rbx
ffff80000081267b:	ff d0                	call   rax
ffff80000081267d:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
ffff800000812680:	80 65 ef 20          	and    BYTE PTR [rbp-0x11],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
ffff800000812684:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000812688:	74 d6                	je     ffff800000812660 <com_putchar+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
ffff80000081268a:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000081268e:	0f b6 d0             	movzx  edx,al
ffff800000812691:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000812694:	0f b7 c0             	movzx  eax,ax
ffff800000812697:	89 d6                	mov    esi,edx
ffff800000812699:	89 c7                	mov    edi,eax
ffff80000081269b:	49 89 df             	mov    r15,rbx
ffff80000081269e:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008126a5:	ff ff ff 
ffff8000008126a8:	48 01 d8             	add    rax,rbx
ffff8000008126ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
ffff8000008126ad:	90                   	nop
ffff8000008126ae:	48 83 c4 20          	add    rsp,0x20
ffff8000008126b2:	5b                   	pop    rbx
ffff8000008126b3:	41 5f                	pop    r15
ffff8000008126b5:	5d                   	pop    rbp
ffff8000008126b6:	c3                   	ret    

ffff8000008126b7 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
ffff8000008126b7:	f3 0f 1e fa          	endbr64 
ffff8000008126bb:	55                   	push   rbp
ffff8000008126bc:	48 89 e5             	mov    rbp,rsp
ffff8000008126bf:	41 57                	push   r15
ffff8000008126c1:	53                   	push   rbx
ffff8000008126c2:	48 83 ec 10          	sub    rsp,0x10
ffff8000008126c6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008126c6 <com_puts+0xf>
ffff8000008126cd:	49 bb 92 b4 10 00 00 	movabs r11,0x10b492
ffff8000008126d4:	00 00 00 
ffff8000008126d7:	4c 01 db             	add    rbx,r11
ffff8000008126da:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008126de:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
ffff8000008126e1:	eb 2a                	jmp    ffff80000081270d <com_puts+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
ffff8000008126e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008126e7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008126ea:	66 98                	cbw    
ffff8000008126ec:	0f b7 c0             	movzx  eax,ax
ffff8000008126ef:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff8000008126f2:	89 d6                	mov    esi,edx
ffff8000008126f4:	89 c7                	mov    edi,eax
ffff8000008126f6:	49 89 df             	mov    r15,rbx
ffff8000008126f9:	48 b8 dc 4a ef ff ff 	movabs rax,0xffffffffffef4adc
ffff800000812700:	ff ff ff 
ffff800000812703:	48 01 d8             	add    rax,rbx
ffff800000812706:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
ffff800000812708:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
ffff80000081270d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812711:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812714:	84 c0                	test   al,al
ffff800000812716:	75 cb                	jne    ffff8000008126e3 <com_puts+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
ffff800000812718:	90                   	nop
ffff800000812719:	90                   	nop
ffff80000081271a:	48 83 c4 10          	add    rsp,0x10
ffff80000081271e:	5b                   	pop    rbx
ffff80000081271f:	41 5f                	pop    r15
ffff800000812721:	5d                   	pop    rbp
ffff800000812722:	c3                   	ret    

ffff800000812723 <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
ffff800000812723:	f3 0f 1e fa          	endbr64 
ffff800000812727:	55                   	push   rbp
ffff800000812728:	48 89 e5             	mov    rbp,rsp
ffff80000081272b:	41 57                	push   r15
ffff80000081272d:	53                   	push   rbx
ffff80000081272e:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000812735:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812735 <comprintf+0x12>
ffff80000081273c:	49 bb 23 b4 10 00 00 	movabs r11,0x10b423
ffff800000812743:	00 00 00 
ffff800000812746:	4c 01 db             	add    rbx,r11
ffff800000812749:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
ffff800000812750:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000812757:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff80000081275e:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000812765:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff80000081276c:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000812773:	84 c0                	test   al,al
ffff800000812775:	74 23                	je     ffff80000081279a <comprintf+0x77>
ffff800000812777:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff80000081277e:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000812782:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000812786:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff80000081278a:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff80000081278e:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000812792:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000812796:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
ffff80000081279a:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008127a1:	48 89 c7             	mov    rdi,rax
ffff8000008127a4:	49 89 df             	mov    r15,rbx
ffff8000008127a7:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff8000008127ae:	ff ff ff 
ffff8000008127b1:	48 01 d8             	add    rax,rbx
ffff8000008127b4:	ff d0                	call   rax
ffff8000008127b6:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff8000008127bb:	0f 8f f6 03 00 00    	jg     ffff800000812bb7 <comprintf+0x494>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
ffff8000008127c1:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff8000008127c8:	ff ff ff 
ffff8000008127cb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008127cf:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
ffff8000008127d6:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008127dd:	ba 00 04 00 00       	mov    edx,0x400
ffff8000008127e2:	be 00 00 00 00       	mov    esi,0x0
ffff8000008127e7:	48 89 c7             	mov    rdi,rax
ffff8000008127ea:	49 89 df             	mov    r15,rbx
ffff8000008127ed:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff8000008127f4:	ff ff ff 
ffff8000008127f7:	48 01 d8             	add    rax,rbx
ffff8000008127fa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
ffff8000008127fc:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812803:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
ffff80000081280a:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812811:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
ffff800000812818:	c7 85 f0 fe ff ff 08 	mov    DWORD PTR [rbp-0x110],0x8
ffff80000081281f:	00 00 00 
ffff800000812822:	c7 85 f4 fe ff ff 30 	mov    DWORD PTR [rbp-0x10c],0x30
ffff800000812829:	00 00 00 
ffff80000081282c:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000812830:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffff800000812837:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff80000081283e:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
ffff800000812845:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000081284c:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000812853:	e9 2a 03 00 00       	jmp    ffff800000812b82 <comprintf+0x45f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000812858:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081285f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812862:	3c 25                	cmp    al,0x25
ffff800000812864:	0f 85 e5 02 00 00    	jne    ffff800000812b4f <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
ffff80000081286a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812871:	48 83 c0 01          	add    rax,0x1
ffff800000812875:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812878:	84 c0                	test   al,al
ffff80000081287a:	0f 84 cf 02 00 00    	je     ffff800000812b4f <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
ffff800000812880:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000812887:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000812888:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081288f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812892:	3c 78                	cmp    al,0x78
ffff800000812894:	75 70                	jne    ffff800000812906 <comprintf+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
ffff800000812896:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081289c:	83 f8 2f             	cmp    eax,0x2f
ffff80000081289f:	77 23                	ja     ffff8000008128c4 <comprintf+0x1a1>
ffff8000008128a1:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008128a8:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008128ae:	89 d2                	mov    edx,edx
ffff8000008128b0:	48 01 d0             	add    rax,rdx
ffff8000008128b3:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008128b9:	83 c2 08             	add    edx,0x8
ffff8000008128bc:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008128c2:	eb 12                	jmp    ffff8000008128d6 <comprintf+0x1b3>
ffff8000008128c4:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008128cb:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008128cf:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008128d6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008128d8:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
ffff8000008128de:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff8000008128e4:	48 63 d0             	movsxd rdx,eax
ffff8000008128e7:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008128ee:	48 89 d6             	mov    rsi,rdx
ffff8000008128f1:	48 89 c7             	mov    rdi,rax
ffff8000008128f4:	49 89 df             	mov    r15,rbx
ffff8000008128f7:	48 b8 90 58 ef ff ff 	movabs rax,0xffffffffffef5890
ffff8000008128fe:	ff ff ff 
ffff800000812901:	48 01 d8             	add    rax,rbx
ffff800000812904:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812906:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081290d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812910:	3c 6c                	cmp    al,0x6c
ffff800000812912:	75 76                	jne    ffff80000081298a <comprintf+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                int v=va_arg(vargs,unsigned long);
ffff800000812914:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081291a:	83 f8 2f             	cmp    eax,0x2f
ffff80000081291d:	77 23                	ja     ffff800000812942 <comprintf+0x21f>
ffff80000081291f:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812926:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081292c:	89 d2                	mov    edx,edx
ffff80000081292e:	48 01 d0             	add    rax,rdx
ffff800000812931:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812937:	83 c2 08             	add    edx,0x8
ffff80000081293a:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812940:	eb 12                	jmp    ffff800000812954 <comprintf+0x231>
ffff800000812942:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812949:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081294d:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812954:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812957:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprint_hex(tmp,v);
ffff80000081295d:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
ffff800000812963:	48 63 d0             	movsxd rdx,eax
ffff800000812966:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081296d:	48 89 d6             	mov    rsi,rdx
ffff800000812970:	48 89 c7             	mov    rdi,rax
ffff800000812973:	49 89 df             	mov    r15,rbx
ffff800000812976:	48 b8 90 58 ef ff ff 	movabs rax,0xffffffffffef5890
ffff80000081297d:	ff ff ff 
ffff800000812980:	48 01 d8             	add    rax,rbx
ffff800000812983:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812985:	e9 f0 01 00 00       	jmp    ffff800000812b7a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='s'){
ffff80000081298a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812991:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812994:	3c 73                	cmp    al,0x73
ffff800000812996:	75 75                	jne    ffff800000812a0d <comprintf+0x2ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
ffff800000812998:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081299e:	83 f8 2f             	cmp    eax,0x2f
ffff8000008129a1:	77 23                	ja     ffff8000008129c6 <comprintf+0x2a3>
ffff8000008129a3:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008129aa:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008129b0:	89 d2                	mov    edx,edx
ffff8000008129b2:	48 01 d0             	add    rax,rdx
ffff8000008129b5:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008129bb:	83 c2 08             	add    edx,0x8
ffff8000008129be:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008129c4:	eb 12                	jmp    ffff8000008129d8 <comprintf+0x2b5>
ffff8000008129c6:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008129cd:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008129d1:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008129d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008129db:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprintn(tmp,v);
ffff8000008129e2:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff8000008129e9:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008129f0:	48 89 d6             	mov    rsi,rdx
ffff8000008129f3:	48 89 c7             	mov    rdi,rax
ffff8000008129f6:	49 89 df             	mov    r15,rbx
ffff8000008129f9:	48 b8 1e 59 ef ff ff 	movabs rax,0xffffffffffef591e
ffff800000812a00:	ff ff ff 
ffff800000812a03:	48 01 d8             	add    rax,rbx
ffff800000812a06:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812a08:	e9 6d 01 00 00       	jmp    ffff800000812b7a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='d'){
ffff800000812a0d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812a14:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812a17:	3c 64                	cmp    al,0x64
ffff800000812a19:	75 76                	jne    ffff800000812a91 <comprintf+0x36e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char* v=va_arg(vargs,char*);
ffff800000812a1b:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812a21:	83 f8 2f             	cmp    eax,0x2f
ffff800000812a24:	77 23                	ja     ffff800000812a49 <comprintf+0x326>
ffff800000812a26:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812a2d:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812a33:	89 d2                	mov    edx,edx
ffff800000812a35:	48 01 d0             	add    rax,rdx
ffff800000812a38:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812a3e:	83 c2 08             	add    edx,0x8
ffff800000812a41:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812a47:	eb 12                	jmp    ffff800000812a5b <comprintf+0x338>
ffff800000812a49:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812a50:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812a54:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812a5b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812a5e:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:90
                sprint_decimal(tmp,v);
ffff800000812a65:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000812a6c:	89 c2                	mov    edx,eax
ffff800000812a6e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812a75:	89 d6                	mov    esi,edx
ffff800000812a77:	48 89 c7             	mov    rdi,rax
ffff800000812a7a:	49 89 df             	mov    r15,rbx
ffff800000812a7d:	48 b8 d5 57 ef ff ff 	movabs rax,0xffffffffffef57d5
ffff800000812a84:	ff ff ff 
ffff800000812a87:	48 01 d8             	add    rax,rbx
ffff800000812a8a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812a8c:	e9 e9 00 00 00       	jmp    ffff800000812b7a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
            }else if(*pstr=='c'){
ffff800000812a91:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812a98:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812a9b:	3c 63                	cmp    al,0x63
ffff800000812a9d:	75 02                	jne    ffff800000812aa1 <comprintf+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                char v=va_arg(vargs,char);
ffff800000812a9f:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:94
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
ffff800000812aa1:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812aa8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812aab:	3c 70                	cmp    al,0x70
ffff800000812aad:	75 73                	jne    ffff800000812b22 <comprintf+0x3ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
                int v=va_arg(vargs,addr_t);
ffff800000812aaf:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812ab5:	83 f8 2f             	cmp    eax,0x2f
ffff800000812ab8:	77 23                	ja     ffff800000812add <comprintf+0x3ba>
ffff800000812aba:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812ac1:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812ac7:	89 d2                	mov    edx,edx
ffff800000812ac9:	48 01 d0             	add    rax,rdx
ffff800000812acc:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812ad2:	83 c2 08             	add    edx,0x8
ffff800000812ad5:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812adb:	eb 12                	jmp    ffff800000812aef <comprintf+0x3cc>
ffff800000812add:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812ae4:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812ae8:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812aef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812af2:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:96
                sprint_hex(tmp,v);
ffff800000812af8:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff800000812afe:	48 63 d0             	movsxd rdx,eax
ffff800000812b01:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812b08:	48 89 d6             	mov    rsi,rdx
ffff800000812b0b:	48 89 c7             	mov    rdi,rax
ffff800000812b0e:	49 89 df             	mov    r15,rbx
ffff800000812b11:	48 b8 90 58 ef ff ff 	movabs rax,0xffffffffffef5890
ffff800000812b18:	ff ff ff 
ffff800000812b1b:	48 01 d8             	add    rax,rbx
ffff800000812b1e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812b20:	eb 58                	jmp    ffff800000812b7a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
            }else{
                    sprintchar(tmp,*pstr);
ffff800000812b22:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812b29:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812b2c:	0f be d0             	movsx  edx,al
ffff800000812b2f:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812b36:	89 d6                	mov    esi,edx
ffff800000812b38:	48 89 c7             	mov    rdi,rax
ffff800000812b3b:	49 89 df             	mov    r15,rbx
ffff800000812b3e:	48 b8 96 57 ef ff ff 	movabs rax,0xffffffffffef5796
ffff800000812b45:	ff ff ff 
ffff800000812b48:	48 01 d8             	add    rax,rbx
ffff800000812b4b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812b4d:	eb 2b                	jmp    ffff800000812b7a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:101
                }
        }else{
            sprintchar(tmp,*pstr);
ffff800000812b4f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812b56:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812b59:	0f be d0             	movsx  edx,al
ffff800000812b5c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812b63:	89 d6                	mov    esi,edx
ffff800000812b65:	48 89 c7             	mov    rdi,rax
ffff800000812b68:	49 89 df             	mov    r15,rbx
ffff800000812b6b:	48 b8 96 57 ef ff ff 	movabs rax,0xffffffffffef5796
ffff800000812b72:	ff ff ff 
ffff800000812b75:	48 01 d8             	add    rax,rbx
ffff800000812b78:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000812b7a:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000812b81:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
ffff800000812b82:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812b89:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812b8c:	84 c0                	test   al,al
ffff800000812b8e:	0f 85 c4 fc ff ff    	jne    ffff800000812858 <comprintf+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:105
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
ffff800000812b94:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812b9b:	be f8 03 00 00       	mov    esi,0x3f8
ffff800000812ba0:	48 89 c7             	mov    rdi,rax
ffff800000812ba3:	49 89 df             	mov    r15,rbx
ffff800000812ba6:	48 b8 5f 4b ef ff ff 	movabs rax,0xffffffffffef4b5f
ffff800000812bad:	ff ff ff 
ffff800000812bb0:	48 01 d8             	add    rax,rbx
ffff800000812bb3:	ff d0                	call   rax
ffff800000812bb5:	eb 01                	jmp    ffff800000812bb8 <comprintf+0x495>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
ffff800000812bb7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:106
ffff800000812bb8:	48 81 c4 10 01 00 00 	add    rsp,0x110
ffff800000812bbf:	5b                   	pop    rbx
ffff800000812bc0:	41 5f                	pop    r15
ffff800000812bc2:	5d                   	pop    rbp
ffff800000812bc3:	c3                   	ret    

ffff800000812bc4 <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
ffff800000812bc4:	f3 0f 1e fa          	endbr64 
ffff800000812bc8:	55                   	push   rbp
ffff800000812bc9:	48 89 e5             	mov    rbp,rsp
ffff800000812bcc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812bd0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000812bd4:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
ffff800000812bd7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812bdb:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
ffff800000812bde:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812be5:	eb 1b                	jmp    ffff800000812c02 <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
ffff800000812be7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812beb:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812bee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812bf2:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
ffff800000812bf4:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
ffff800000812bf9:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
ffff800000812bfe:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
ffff800000812c02:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812c05:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000812c08:	77 dd                	ja     ffff800000812be7 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
ffff800000812c0a:	90                   	nop
ffff800000812c0b:	90                   	nop
ffff800000812c0c:	5d                   	pop    rbp
ffff800000812c0d:	c3                   	ret    

ffff800000812c0e <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
ffff800000812c0e:	f3 0f 1e fa          	endbr64 
ffff800000812c12:	55                   	push   rbp
ffff800000812c13:	48 89 e5             	mov    rbp,rsp
ffff800000812c16:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812c1a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000812c1e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
ffff800000812c21:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812c28:	eb 3a                	jmp    ffff800000812c64 <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
ffff800000812c2a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812c2e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812c31:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812c35:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812c38:	38 c2                	cmp    dl,al
ffff800000812c3a:	74 1a                	je     ffff800000812c56 <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
ffff800000812c3c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812c40:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812c43:	0f b6 d0             	movzx  edx,al
ffff800000812c46:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812c4a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812c4d:	0f b6 c8             	movzx  ecx,al
ffff800000812c50:	89 d0                	mov    eax,edx
ffff800000812c52:	29 c8                	sub    eax,ecx
ffff800000812c54:	eb 1b                	jmp    ffff800000812c71 <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
ffff800000812c56:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
ffff800000812c5b:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
ffff800000812c60:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
ffff800000812c64:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812c67:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffff800000812c6a:	7c be                	jl     ffff800000812c2a <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
ffff800000812c6c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
ffff800000812c71:	5d                   	pop    rbp
ffff800000812c72:	c3                   	ret    

ffff800000812c73 <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
ffff800000812c73:	f3 0f 1e fa          	endbr64 
ffff800000812c77:	55                   	push   rbp
ffff800000812c78:	48 89 e5             	mov    rbp,rsp
ffff800000812c7b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812c7f:	89 f0                	mov    eax,esi
ffff800000812c81:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffff800000812c84:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
ffff800000812c87:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812c8e:	eb 16                	jmp    ffff800000812ca6 <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
ffff800000812c90:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812c94:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000812c98:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000812c9c:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff800000812ca0:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
ffff800000812ca2:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
ffff800000812ca6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812ca9:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff800000812cac:	72 e2                	jb     ffff800000812c90 <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
ffff800000812cae:	90                   	nop
ffff800000812caf:	90                   	nop
ffff800000812cb0:	5d                   	pop    rbp
ffff800000812cb1:	c3                   	ret    

ffff800000812cb2 <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
ffff800000812cb2:	f3 0f 1e fa          	endbr64 
ffff800000812cb6:	55                   	push   rbp
ffff800000812cb7:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
ffff800000812cba:	48 b8 40 9c 41 00 00 	movabs rax,0xffff800000419c40
ffff800000812cc1:	80 ff ff 
ffff800000812cc4:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
ffff800000812cc6:	5d                   	pop    rbp
ffff800000812cc7:	c3                   	ret    

ffff800000812cc8 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
ffff800000812cc8:	f3 0f 1e fa          	endbr64 
ffff800000812ccc:	55                   	push   rbp
ffff800000812ccd:	48 89 e5             	mov    rbp,rsp
ffff800000812cd0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812cd4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000812cd8:	eb 1d                	jmp    ffff800000812cf7 <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
ffff800000812cda:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000812cde:	48 8d 42 01          	lea    rax,[rdx+0x1]
ffff800000812ce2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff800000812ce6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812cea:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffff800000812cee:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffff800000812cf2:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000812cf5:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000812cf7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812cfb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812cfe:	84 c0                	test   al,al
ffff800000812d00:	75 d8                	jne    ffff800000812cda <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
ffff800000812d02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812d06:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
ffff800000812d09:	90                   	nop
ffff800000812d0a:	5d                   	pop    rbp
ffff800000812d0b:	c3                   	ret    

ffff800000812d0c <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
ffff800000812d0c:	f3 0f 1e fa          	endbr64 
ffff800000812d10:	55                   	push   rbp
ffff800000812d11:	48 89 e5             	mov    rbp,rsp
ffff800000812d14:	48 83 ec 30          	sub    rsp,0x30
ffff800000812d18:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000812d1c:	89 f0                	mov    eax,esi
ffff800000812d1e:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
ffff800000812d21:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000812d26:	0f 84 fa 00 00 00    	je     ffff800000812e26 <strtok+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
ffff800000812d2c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812d30:	48 89 c6             	mov    rsi,rax
ffff800000812d33:	48 b8 60 9c 41 00 00 	movabs rax,0xffff800000419c60
ffff800000812d3a:	80 ff ff 
ffff800000812d3d:	48 89 c7             	mov    rdi,rax
ffff800000812d40:	48 b8 c8 2c 81 00 00 	movabs rax,0xffff800000812cc8
ffff800000812d47:	80 ff ff 
ffff800000812d4a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
ffff800000812d4c:	48 b8 60 9c 41 00 00 	movabs rax,0xffff800000419c60
ffff800000812d53:	80 ff ff 
ffff800000812d56:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
ffff800000812d5a:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812d61:	80 ff ff 
ffff800000812d64:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffff800000812d6a:	eb 2a                	jmp    ffff800000812d96 <strtok+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
ffff800000812d6c:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812d73:	80 ff ff 
ffff800000812d76:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d78:	83 c0 01             	add    eax,0x1
ffff800000812d7b:	99                   	cdq    
ffff800000812d7c:	c1 ea 17             	shr    edx,0x17
ffff800000812d7f:	01 d0                	add    eax,edx
ffff800000812d81:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812d86:	29 d0                	sub    eax,edx
ffff800000812d88:	89 c2                	mov    edx,eax
ffff800000812d8a:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812d91:	80 ff ff 
ffff800000812d94:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
ffff800000812d96:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812d9d:	80 ff ff 
ffff800000812da0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812da2:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812da9:	80 ff ff 
ffff800000812dac:	48 98                	cdqe   
ffff800000812dae:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812db2:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000812db5:	74 20                	je     ffff800000812dd7 <strtok+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
ffff800000812db7:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812dbe:	80 ff ff 
ffff800000812dc1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812dc3:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812dca:	80 ff ff 
ffff800000812dcd:	48 98                	cdqe   
ffff800000812dcf:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812dd3:	84 c0                	test   al,al
ffff800000812dd5:	75 95                	jne    ffff800000812d6c <strtok+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
ffff800000812dd7:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812dde:	80 ff ff 
ffff800000812de1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812de3:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812dea:	80 ff ff 
ffff800000812ded:	48 98                	cdqe   
ffff800000812def:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
ffff800000812df3:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812dfa:	80 ff ff 
ffff800000812dfd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812dff:	83 c0 01             	add    eax,0x1
ffff800000812e02:	99                   	cdq    
ffff800000812e03:	c1 ea 17             	shr    edx,0x17
ffff800000812e06:	01 d0                	add    eax,edx
ffff800000812e08:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812e0d:	29 d0                	sub    eax,edx
ffff800000812e0f:	89 c2                	mov    edx,eax
ffff800000812e11:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812e18:	80 ff ff 
ffff800000812e1b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
ffff800000812e1d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812e21:	e9 ee 00 00 00       	jmp    ffff800000812f14 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
ffff800000812e26:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
ffff800000812e2d:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812e34:	80 ff ff 
ffff800000812e37:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e39:	48 98                	cdqe   
ffff800000812e3b:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812e42:	80 ff ff 
ffff800000812e45:	48 01 d0             	add    rax,rdx
ffff800000812e48:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
ffff800000812e4c:	eb 2e                	jmp    ffff800000812e7c <strtok+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
ffff800000812e4e:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812e55:	80 ff ff 
ffff800000812e58:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e5a:	83 c0 01             	add    eax,0x1
ffff800000812e5d:	99                   	cdq    
ffff800000812e5e:	c1 ea 17             	shr    edx,0x17
ffff800000812e61:	01 d0                	add    eax,edx
ffff800000812e63:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812e68:	29 d0                	sub    eax,edx
ffff800000812e6a:	89 c2                	mov    edx,eax
ffff800000812e6c:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812e73:	80 ff ff 
ffff800000812e76:	89 10                	mov    DWORD PTR [rax],edx
ffff800000812e78:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
ffff800000812e7c:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812e83:	80 ff ff 
ffff800000812e86:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e88:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812e8f:	80 ff ff 
ffff800000812e92:	48 98                	cdqe   
ffff800000812e94:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812e98:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000812e9b:	74 20                	je     ffff800000812ebd <strtok+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
ffff800000812e9d:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812ea4:	80 ff ff 
ffff800000812ea7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812ea9:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812eb0:	80 ff ff 
ffff800000812eb3:	48 98                	cdqe   
ffff800000812eb5:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812eb9:	84 c0                	test   al,al
ffff800000812ebb:	75 91                	jne    ffff800000812e4e <strtok+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
ffff800000812ebd:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812ec4:	80 ff ff 
ffff800000812ec7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812ec9:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812ed0:	80 ff ff 
ffff800000812ed3:	48 98                	cdqe   
ffff800000812ed5:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
ffff800000812ed9:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812ee0:	80 ff ff 
ffff800000812ee3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812ee5:	83 c0 01             	add    eax,0x1
ffff800000812ee8:	99                   	cdq    
ffff800000812ee9:	c1 ea 17             	shr    edx,0x17
ffff800000812eec:	01 d0                	add    eax,edx
ffff800000812eee:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812ef3:	29 d0                	sub    eax,edx
ffff800000812ef5:	89 c2                	mov    edx,eax
ffff800000812ef7:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812efe:	80 ff ff 
ffff800000812f01:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
ffff800000812f03:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000812f07:	74 06                	je     ffff800000812f0f <strtok+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
ffff800000812f09:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812f0d:	eb 05                	jmp    ffff800000812f14 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
ffff800000812f0f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
ffff800000812f14:	c9                   	leave  
ffff800000812f15:	c3                   	ret    

ffff800000812f16 <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
ffff800000812f16:	f3 0f 1e fa          	endbr64 
ffff800000812f1a:	55                   	push   rbp
ffff800000812f1b:	48 89 e5             	mov    rbp,rsp
ffff800000812f1e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812f22:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000812f26:	eb 3c                	jmp    ffff800000812f64 <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
ffff800000812f28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812f2c:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812f2f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812f33:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f36:	38 c2                	cmp    dl,al
ffff800000812f38:	7e 07                	jle    ffff800000812f41 <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
ffff800000812f3a:	b8 01 00 00 00       	mov    eax,0x1
ffff800000812f3f:	eb 52                	jmp    ffff800000812f93 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
ffff800000812f41:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812f45:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812f48:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812f4c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f4f:	38 c2                	cmp    dl,al
ffff800000812f51:	7d 07                	jge    ffff800000812f5a <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
ffff800000812f53:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000812f58:	eb 39                	jmp    ffff800000812f93 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
ffff800000812f5a:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
ffff800000812f5f:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000812f64:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812f68:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f6b:	84 c0                	test   al,al
ffff800000812f6d:	74 0b                	je     ffff800000812f7a <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
ffff800000812f6f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812f73:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f76:	84 c0                	test   al,al
ffff800000812f78:	75 ae                	jne    ffff800000812f28 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
ffff800000812f7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812f7e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812f81:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812f85:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f88:	38 c2                	cmp    dl,al
ffff800000812f8a:	75 07                	jne    ffff800000812f93 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
ffff800000812f8c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812f91:	eb 00                	jmp    ffff800000812f93 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
ffff800000812f93:	5d                   	pop    rbp
ffff800000812f94:	c3                   	ret    

ffff800000812f95 <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
ffff800000812f95:	f3 0f 1e fa          	endbr64 
ffff800000812f99:	55                   	push   rbp
ffff800000812f9a:	48 89 e5             	mov    rbp,rsp
ffff800000812f9d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
ffff800000812fa1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
ffff800000812fa8:	eb 09                	jmp    ffff800000812fb3 <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
ffff800000812faa:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffff800000812faf:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
ffff800000812fb3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812fb7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812fba:	84 c0                	test   al,al
ffff800000812fbc:	75 ec                	jne    ffff800000812faa <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
ffff800000812fbe:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
ffff800000812fc1:	5d                   	pop    rbp
ffff800000812fc2:	c3                   	ret    

ffff800000812fc3 <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
ffff800000812fc3:	f3 0f 1e fa          	endbr64 
ffff800000812fc7:	55                   	push   rbp
ffff800000812fc8:	48 89 e5             	mov    rbp,rsp
ffff800000812fcb:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000812fd2:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000812fd9:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffff800000812fe0:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffff800000812fe7:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffff800000812fee:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffff800000812ff5:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffff800000812ffc:	84 c0                	test   al,al
ffff800000812ffe:	74 20                	je     ffff800000813020 <sprintf+0x5d>
ffff800000813000:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffff800000813004:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffff800000813008:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffff80000081300c:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffff800000813010:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffff800000813014:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffff800000813018:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffff80000081301c:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
ffff800000813020:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000813027:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
ffff80000081302e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000813035:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
ffff80000081303c:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff800000813043:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000813046:	eb 39                	jmp    ffff800000813081 <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
ffff800000813048:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081304f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813052:	3c 25                	cmp    al,0x25
ffff800000813054:	75 15                	jne    ffff80000081306b <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
ffff800000813056:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff80000081305d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813060:	3c 25                	cmp    al,0x25
ffff800000813062:	74 07                	je     ffff80000081306b <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
ffff800000813064:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
ffff80000081306b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813072:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
ffff800000813079:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000813080:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000813081:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813088:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081308b:	3c 0a                	cmp    al,0xa
ffff80000081308d:	75 b9                	jne    ffff800000813048 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
ffff80000081308f:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
ffff800000813096:	00 00 00 
ffff800000813099:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
ffff8000008130a0:	00 00 00 
ffff8000008130a3:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff8000008130a7:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff8000008130ae:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffff8000008130b5:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
ffff8000008130bc:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff8000008130c3:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff8000008130ca:	e9 09 02 00 00       	jmp    ffff8000008132d8 <sprintf+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008130cf:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008130d6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008130d9:	3c 25                	cmp    al,0x25
ffff8000008130db:	0f 85 ca 01 00 00    	jne    ffff8000008132ab <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
ffff8000008130e1:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008130e8:	48 83 c0 01          	add    rax,0x1
ffff8000008130ec:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008130ef:	84 c0                	test   al,al
ffff8000008130f1:	0f 84 b4 01 00 00    	je     ffff8000008132ab <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
ffff8000008130f7:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008130fe:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008130ff:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813106:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813109:	3c 78                	cmp    al,0x78
ffff80000081310b:	75 6f                	jne    ffff80000081317c <sprintf+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
ffff80000081310d:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000813113:	83 f8 2f             	cmp    eax,0x2f
ffff800000813116:	77 23                	ja     ffff80000081313b <sprintf+0x178>
ffff800000813118:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081311f:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813125:	89 d2                	mov    edx,edx
ffff800000813127:	48 01 d0             	add    rax,rdx
ffff80000081312a:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813130:	83 c2 08             	add    edx,0x8
ffff800000813133:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813139:	eb 12                	jmp    ffff80000081314d <sprintf+0x18a>
ffff80000081313b:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000813142:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813146:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff80000081314d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000081314f:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
ffff800000813155:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff80000081315b:	48 63 d0             	movsxd rdx,eax
ffff80000081315e:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813165:	48 89 d6             	mov    rsi,rdx
ffff800000813168:	48 89 c7             	mov    rdi,rax
ffff80000081316b:	48 b8 e8 33 81 00 00 	movabs rax,0xffff8000008133e8
ffff800000813172:	80 ff ff 
ffff800000813175:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813177:	e9 54 01 00 00       	jmp    ffff8000008132d0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
ffff80000081317c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813183:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813186:	3c 73                	cmp    al,0x73
ffff800000813188:	75 6f                	jne    ffff8000008131f9 <sprintf+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
ffff80000081318a:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000813190:	83 f8 2f             	cmp    eax,0x2f
ffff800000813193:	77 23                	ja     ffff8000008131b8 <sprintf+0x1f5>
ffff800000813195:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081319c:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008131a2:	89 d2                	mov    edx,edx
ffff8000008131a4:	48 01 d0             	add    rax,rdx
ffff8000008131a7:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008131ad:	83 c2 08             	add    edx,0x8
ffff8000008131b0:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff8000008131b6:	eb 12                	jmp    ffff8000008131ca <sprintf+0x207>
ffff8000008131b8:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008131bf:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008131c3:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008131ca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008131cd:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
ffff8000008131d4:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff8000008131db:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008131e2:	48 89 d6             	mov    rsi,rdx
ffff8000008131e5:	48 89 c7             	mov    rdi,rax
ffff8000008131e8:	48 b8 76 34 81 00 00 	movabs rax,0xffff800000813476
ffff8000008131ef:	80 ff ff 
ffff8000008131f2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008131f4:	e9 d7 00 00 00       	jmp    ffff8000008132d0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
ffff8000008131f9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813200:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813203:	3c 64                	cmp    al,0x64
ffff800000813205:	75 6d                	jne    ffff800000813274 <sprintf+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
ffff800000813207:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff80000081320d:	83 f8 2f             	cmp    eax,0x2f
ffff800000813210:	77 23                	ja     ffff800000813235 <sprintf+0x272>
ffff800000813212:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000813219:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081321f:	89 d2                	mov    edx,edx
ffff800000813221:	48 01 d0             	add    rax,rdx
ffff800000813224:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081322a:	83 c2 08             	add    edx,0x8
ffff80000081322d:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813233:	eb 12                	jmp    ffff800000813247 <sprintf+0x284>
ffff800000813235:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081323c:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813240:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000813247:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081324a:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
ffff800000813251:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813258:	89 c2                	mov    edx,eax
ffff80000081325a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813261:	89 d6                	mov    esi,edx
ffff800000813263:	48 89 c7             	mov    rdi,rax
ffff800000813266:	48 b8 2d 33 81 00 00 	movabs rax,0xffff80000081332d
ffff80000081326d:	80 ff ff 
ffff800000813270:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813272:	eb 5c                	jmp    ffff8000008132d0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
ffff800000813274:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081327b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081327e:	3c 63                	cmp    al,0x63
ffff800000813280:	75 02                	jne    ffff800000813284 <sprintf+0x2c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
ffff800000813282:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
ffff800000813284:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081328b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081328e:	0f be d0             	movsx  edx,al
ffff800000813291:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813298:	89 d6                	mov    esi,edx
ffff80000081329a:	48 89 c7             	mov    rdi,rax
ffff80000081329d:	48 b8 ee 32 81 00 00 	movabs rax,0xffff8000008132ee
ffff8000008132a4:	80 ff ff 
ffff8000008132a7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008132a9:	eb 25                	jmp    ffff8000008132d0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
ffff8000008132ab:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008132b2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008132b5:	0f be d0             	movsx  edx,al
ffff8000008132b8:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008132bf:	89 d6                	mov    esi,edx
ffff8000008132c1:	48 89 c7             	mov    rdi,rax
ffff8000008132c4:	48 b8 ee 32 81 00 00 	movabs rax,0xffff8000008132ee
ffff8000008132cb:	80 ff ff 
ffff8000008132ce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff8000008132d0:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008132d7:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
ffff8000008132d8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008132df:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008132e2:	84 c0                	test   al,al
ffff8000008132e4:	0f 85 e5 fd ff ff    	jne    ffff8000008130cf <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
ffff8000008132ea:	90                   	nop
ffff8000008132eb:	90                   	nop
ffff8000008132ec:	c9                   	leave  
ffff8000008132ed:	c3                   	ret    

ffff8000008132ee <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
ffff8000008132ee:	f3 0f 1e fa          	endbr64 
ffff8000008132f2:	55                   	push   rbp
ffff8000008132f3:	48 89 e5             	mov    rbp,rsp
ffff8000008132f6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008132fa:	89 f0                	mov    eax,esi
ffff8000008132fc:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff8000008132ff:	eb 05                	jmp    ffff800000813306 <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
ffff800000813301:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff800000813306:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000081330a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081330d:	84 c0                	test   al,al
ffff80000081330f:	75 f0                	jne    ffff800000813301 <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
ffff800000813311:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813315:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000813319:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000081331d:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
ffff800000813321:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
ffff800000813323:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813327:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
ffff80000081332a:	90                   	nop
ffff80000081332b:	5d                   	pop    rbp
ffff80000081332c:	c3                   	ret    

ffff80000081332d <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
ffff80000081332d:	f3 0f 1e fa          	endbr64 
ffff800000813331:	55                   	push   rbp
ffff800000813332:	48 89 e5             	mov    rbp,rsp
ffff800000813335:	48 83 ec 30          	sub    rsp,0x30
ffff800000813339:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000081333d:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
ffff800000813340:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff800000813347:	eb 65                	jmp    ffff8000008133ae <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
ffff800000813349:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000081334c:	48 63 c2             	movsxd rax,edx
ffff80000081334f:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
ffff800000813356:	48 c1 e8 20          	shr    rax,0x20
ffff80000081335a:	c1 f8 02             	sar    eax,0x2
ffff80000081335d:	89 d6                	mov    esi,edx
ffff80000081335f:	c1 fe 1f             	sar    esi,0x1f
ffff800000813362:	29 f0                	sub    eax,esi
ffff800000813364:	89 c1                	mov    ecx,eax
ffff800000813366:	89 c8                	mov    eax,ecx
ffff800000813368:	c1 e0 02             	shl    eax,0x2
ffff80000081336b:	01 c8                	add    eax,ecx
ffff80000081336d:	01 c0                	add    eax,eax
ffff80000081336f:	89 d1                	mov    ecx,edx
ffff800000813371:	29 c1                	sub    ecx,eax
ffff800000813373:	89 c8                	mov    eax,ecx
ffff800000813375:	83 c0 30             	add    eax,0x30
ffff800000813378:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
ffff80000081337b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081337e:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813381:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000813384:	48 98                	cdqe   
ffff800000813386:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff80000081338a:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
ffff80000081338e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000813391:	48 63 d0             	movsxd rdx,eax
ffff800000813394:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
ffff80000081339b:	48 c1 ea 20          	shr    rdx,0x20
ffff80000081339f:	c1 fa 02             	sar    edx,0x2
ffff8000008133a2:	c1 f8 1f             	sar    eax,0x1f
ffff8000008133a5:	89 c1                	mov    ecx,eax
ffff8000008133a7:	89 d0                	mov    eax,edx
ffff8000008133a9:	29 c8                	sub    eax,ecx
ffff8000008133ab:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff8000008133ae:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008133b1:	83 f8 0f             	cmp    eax,0xf
ffff8000008133b4:	76 93                	jbe    ffff800000813349 <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
ffff8000008133b6:	eb 26                	jmp    ffff8000008133de <sprint_decimal+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
ffff8000008133b8:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff8000008133bc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008133bf:	48 98                	cdqe   
ffff8000008133c1:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff8000008133c6:	0f be d0             	movsx  edx,al
ffff8000008133c9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008133cd:	89 d6                	mov    esi,edx
ffff8000008133cf:	48 89 c7             	mov    rdi,rax
ffff8000008133d2:	48 b8 ee 32 81 00 00 	movabs rax,0xffff8000008132ee
ffff8000008133d9:	80 ff ff 
ffff8000008133dc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
ffff8000008133de:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008133e2:	7f d4                	jg     ffff8000008133b8 <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
ffff8000008133e4:	90                   	nop
ffff8000008133e5:	90                   	nop
ffff8000008133e6:	c9                   	leave  
ffff8000008133e7:	c3                   	ret    

ffff8000008133e8 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long c)
{
ffff8000008133e8:	f3 0f 1e fa          	endbr64 
ffff8000008133ec:	55                   	push   rbp
ffff8000008133ed:	48 89 e5             	mov    rbp,rsp
ffff8000008133f0:	48 83 ec 30          	sub    rsp,0x30
ffff8000008133f4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008133f8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[22];
    int p=0;
ffff8000008133fc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff800000813403:	eb 39                	jmp    ffff80000081343e <sprint_hex+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
ffff800000813405:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813409:	83 e0 0f             	and    eax,0xf
ffff80000081340c:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
ffff80000081340f:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
ffff800000813413:	76 06                	jbe    ffff80000081341b <sprint_hex+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
ffff800000813415:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
ffff800000813419:	eb 04                	jmp    ffff80000081341f <sprint_hex+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
ffff80000081341b:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
ffff80000081341f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813422:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813425:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000813428:	48 98                	cdqe   
ffff80000081342a:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff80000081342e:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
ffff800000813432:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813436:	48 c1 e8 04          	shr    rax,0x4
ffff80000081343a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff80000081343e:	83 7d fc 15          	cmp    DWORD PTR [rbp-0x4],0x15
ffff800000813442:	7e c1                	jle    ffff800000813405 <sprint_hex+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
ffff800000813444:	eb 26                	jmp    ffff80000081346c <sprint_hex+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
ffff800000813446:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff80000081344a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081344d:	48 98                	cdqe   
ffff80000081344f:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000813454:	0f be d0             	movsx  edx,al
ffff800000813457:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081345b:	89 d6                	mov    esi,edx
ffff80000081345d:	48 89 c7             	mov    rdi,rax
ffff800000813460:	48 b8 ee 32 81 00 00 	movabs rax,0xffff8000008132ee
ffff800000813467:	80 ff ff 
ffff80000081346a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
ffff80000081346c:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000813470:	7f d4                	jg     ffff800000813446 <sprint_hex+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
ffff800000813472:	90                   	nop
ffff800000813473:	90                   	nop
ffff800000813474:	c9                   	leave  
ffff800000813475:	c3                   	ret    

ffff800000813476 <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
ffff800000813476:	f3 0f 1e fa          	endbr64 
ffff80000081347a:	55                   	push   rbp
ffff80000081347b:	48 89 e5             	mov    rbp,rsp
ffff80000081347e:	48 83 ec 10          	sub    rsp,0x10
ffff800000813482:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813486:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff80000081348a:	eb 27                	jmp    ffff8000008134b3 <sprintn+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
ffff80000081348c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813490:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000813494:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000813498:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081349b:	0f be d0             	movsx  edx,al
ffff80000081349e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008134a2:	89 d6                	mov    esi,edx
ffff8000008134a4:	48 89 c7             	mov    rdi,rax
ffff8000008134a7:	48 b8 ee 32 81 00 00 	movabs rax,0xffff8000008132ee
ffff8000008134ae:	80 ff ff 
ffff8000008134b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff8000008134b3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008134b7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008134ba:	84 c0                	test   al,al
ffff8000008134bc:	75 ce                	jne    ffff80000081348c <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
ffff8000008134be:	90                   	nop
ffff8000008134bf:	90                   	nop
ffff8000008134c0:	c9                   	leave  
ffff8000008134c1:	c3                   	ret    
ffff8000008134c2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff8000008134c9:	00 00 00 
ffff8000008134cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff8000008134d0 <create_zero>:
create_zero():
ffff8000008134d0:	e8 cf 16 ff ff       	call   ffff800000804ba4 <req_proc>
ffff8000008134d5:	83 f8 ff             	cmp    eax,0xffffffff
ffff8000008134d8:	74 0c                	je     ffff8000008134e6 <create_zero.retu>
ffff8000008134da:	e8 16 18 ff ff       	call   ffff800000804cf5 <set_proc>
ffff8000008134df:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
ffff8000008134e3:	83 c4 40             	add    esp,0x40

ffff8000008134e6 <create_zero.retu>:
create_zero.retu():
ffff8000008134e6:	c3                   	ret    

ffff8000008134e7 <switch_proc_asm>:
save_context():
ffff8000008134e7:	67 8b 44 24 24       	mov    eax,DWORD PTR [esp+0x24]
ffff8000008134ec:	83 c0 44             	add    eax,0x44
ffff8000008134ef:	b9 08 00 00 00       	mov    ecx,0x8
ffff8000008134f4:	89 e7                	mov    edi,esp

ffff8000008134f6 <save_context.loops>:
save_context.loops():
ffff8000008134f6:	67 8b 17             	mov    edx,DWORD PTR [edi]
ffff8000008134f9:	67 89 10             	mov    DWORD PTR [eax],edx
ffff8000008134fc:	83 c7 04             	add    edi,0x4
ffff8000008134ff:	83 e8 04             	sub    eax,0x4
ffff800000813502:	e2 f2                	loop   ffff8000008134f6 <save_context.loops>
ffff800000813504:	5b                   	pop    rbx
ffff800000813505:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff80000081350a:	67 89 58 24          	mov    DWORD PTR [eax+0x24],ebx
ffff80000081350e:	67 48 8b 1c 24       	mov    rbx,QWORD PTR [esp]
ffff800000813513:	67 89 58 20          	mov    DWORD PTR [eax+0x20],ebx
ffff800000813517:	c3                   	ret    

ffff800000813518 <desc>:
	...

ffff800000813520 <ret_sys_call>:
ret_sys_call():
ffff800000813520:	58                   	pop    rax
ffff800000813521:	8e d8                	mov    ds,eax
ffff800000813523:	58                   	pop    rax
ffff800000813524:	8e c0                	mov    es,eax
ffff800000813526:	41 5f                	pop    r15
ffff800000813528:	41 5e                	pop    r14
ffff80000081352a:	41 5d                	pop    r13
ffff80000081352c:	41 5c                	pop    r12
ffff80000081352e:	41 5b                	pop    r11
ffff800000813530:	41 5a                	pop    r10
ffff800000813532:	41 59                	pop    r9
ffff800000813534:	41 58                	pop    r8
ffff800000813536:	5e                   	pop    rsi
ffff800000813537:	5f                   	pop    rdi
ffff800000813538:	5a                   	pop    rdx
ffff800000813539:	59                   	pop    rcx
ffff80000081353a:	5b                   	pop    rbx
ffff80000081353b:	58                   	pop    rax

ffff80000081353c <tmp>:
tmp():
ffff80000081353c:	48 0f 07             	sysretq 

ffff80000081353f <ret_normal_proc>:
ret_normal_proc():
ffff80000081353f:	58                   	pop    rax
ffff800000813540:	8e d8                	mov    ds,eax
ffff800000813542:	58                   	pop    rax
ffff800000813543:	8e c0                	mov    es,eax
ffff800000813545:	41 5f                	pop    r15
ffff800000813547:	41 5e                	pop    r14
ffff800000813549:	41 5d                	pop    r13
ffff80000081354b:	41 5c                	pop    r12
ffff80000081354d:	41 5b                	pop    r11
ffff80000081354f:	41 5a                	pop    r10
ffff800000813551:	41 59                	pop    r9
ffff800000813553:	41 58                	pop    r8
ffff800000813555:	5e                   	pop    rsi
ffff800000813556:	5f                   	pop    rdi
ffff800000813557:	5a                   	pop    rdx
ffff800000813558:	59                   	pop    rcx
ffff800000813559:	5b                   	pop    rbx
ffff80000081355a:	58                   	pop    rax
ffff80000081355b:	c3                   	ret    

ffff80000081355c <move_to_user_mode>:
move_to_user_mode():
ffff80000081355c:	48 b9 6c 35 81 00 00 	movabs rcx,0xffff80000081356c
ffff800000813563:	80 ff ff 
ffff800000813566:	9c                   	pushf  
ffff800000813567:	41 5b                	pop    r11
ffff800000813569:	48 0f 07             	sysretq 

ffff80000081356c <move_to_user_mode.result>:
move_to_user_mode.result():
ffff80000081356c:	b8 2b 00 00 00       	mov    eax,0x2b
ffff800000813571:	8e c0                	mov    es,eax
ffff800000813573:	8e d8                	mov    ds,eax
ffff800000813575:	8e e0                	mov    fs,eax
ffff800000813577:	8e e8                	mov    gs,eax
ffff800000813579:	c3                   	ret    
