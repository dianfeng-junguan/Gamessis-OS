
bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

ffff800000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:14
#include "kb.h"
#include "framebuffer.h"

gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
ffff800000800000:	f3 0f 1e fa          	endbr64 
ffff800000800004:	55                   	push   rbp
ffff800000800005:	48 89 e5             	mov    rbp,rsp
ffff800000800008:	41 57                	push   r15
ffff80000080000a:	53                   	push   rbx
ffff80000080000b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080000f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080000f <init_int+0xf>
ffff800000800016:	49 bb 19 29 02 00 00 	movabs r11,0x22919
ffff80000080001d:	00 00 00 
ffff800000800020:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    //asm volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800023:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff80000080002a:	ff ff ff 
ffff80000080002d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800031:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800036:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080003b:	48 89 c6             	mov    rsi,rax
ffff80000080003e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000800043:	49 89 df             	mov    r15,rbx
ffff800000800046:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff80000080004d:	ff ff ff 
ffff800000800050:	48 01 d8             	add    rax,rbx
ffff800000800053:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800055:	48 b8 c0 fd ff ff ff 	movabs rax,0xfffffffffffffdc0
ffff80000080005c:	ff ff ff 
ffff80000080005f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800063:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800068:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080006d:	48 89 c6             	mov    rsi,rax
ffff800000800070:	bf 01 00 00 00       	mov    edi,0x1
ffff800000800075:	49 89 df             	mov    r15,rbx
ffff800000800078:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff80000080007f:	ff ff ff 
ffff800000800082:	48 01 d8             	add    rax,rbx
ffff800000800085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800087:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff80000080008e:	ff ff ff 
ffff800000800091:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800095:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080009a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080009f:	48 89 c6             	mov    rsi,rax
ffff8000008000a2:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008000a7:	49 89 df             	mov    r15,rbx
ffff8000008000aa:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff8000008000b1:	ff ff ff 
ffff8000008000b4:	48 01 d8             	add    rax,rbx
ffff8000008000b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000b9:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff8000008000c0:	ff ff ff 
ffff8000008000c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000c7:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000cc:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008000d1:	48 89 c6             	mov    rsi,rax
ffff8000008000d4:	bf 03 00 00 00       	mov    edi,0x3
ffff8000008000d9:	49 89 df             	mov    r15,rbx
ffff8000008000dc:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff8000008000e3:	ff ff ff 
ffff8000008000e6:	48 01 d8             	add    rax,rbx
ffff8000008000e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000eb:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff8000008000f2:	ff ff ff 
ffff8000008000f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000f9:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000fe:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800103:	48 89 c6             	mov    rsi,rax
ffff800000800106:	bf 04 00 00 00       	mov    edi,0x4
ffff80000080010b:	49 89 df             	mov    r15,rbx
ffff80000080010e:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff800000800115:	ff ff ff 
ffff800000800118:	48 01 d8             	add    rax,rbx
ffff80000080011b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080011d:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff800000800124:	ff ff ff 
ffff800000800127:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080012b:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800130:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800135:	48 89 c6             	mov    rsi,rax
ffff800000800138:	bf 05 00 00 00       	mov    edi,0x5
ffff80000080013d:	49 89 df             	mov    r15,rbx
ffff800000800140:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff800000800147:	ff ff ff 
ffff80000080014a:	48 01 d8             	add    rax,rbx
ffff80000080014d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080014f:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff800000800156:	ff ff ff 
ffff800000800159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080015d:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800162:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800167:	48 89 c6             	mov    rsi,rax
ffff80000080016a:	bf 06 00 00 00       	mov    edi,0x6
ffff80000080016f:	49 89 df             	mov    r15,rbx
ffff800000800172:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff800000800179:	ff ff ff 
ffff80000080017c:	48 01 d8             	add    rax,rbx
ffff80000080017f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800181:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000800188:	ff ff ff 
ffff80000080018b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080018f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800194:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800199:	48 89 c6             	mov    rsi,rax
ffff80000080019c:	bf 07 00 00 00       	mov    edi,0x7
ffff8000008001a1:	49 89 df             	mov    r15,rbx
ffff8000008001a4:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff8000008001ab:	ff ff ff 
ffff8000008001ae:	48 01 d8             	add    rax,rbx
ffff8000008001b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
ffff8000008001b3:	48 b8 38 fe ff ff ff 	movabs rax,0xfffffffffffffe38
ffff8000008001ba:	ff ff ff 
ffff8000008001bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001c1:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001c6:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001cb:	48 89 c6             	mov    rsi,rax
ffff8000008001ce:	bf 08 00 00 00       	mov    edi,0x8
ffff8000008001d3:	49 89 df             	mov    r15,rbx
ffff8000008001d6:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff8000008001dd:	ff ff ff 
ffff8000008001e0:	48 01 d8             	add    rax,rbx
ffff8000008001e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008001e5:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff8000008001ec:	ff ff ff 
ffff8000008001ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001f3:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001f8:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001fd:	48 89 c6             	mov    rsi,rax
ffff800000800200:	bf 09 00 00 00       	mov    edi,0x9
ffff800000800205:	49 89 df             	mov    r15,rbx
ffff800000800208:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff80000080020f:	ff ff ff 
ffff800000800212:	48 01 d8             	add    rax,rbx
ffff800000800215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800217:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080021e:	ff ff ff 
ffff800000800221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800225:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080022a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080022f:	48 89 c6             	mov    rsi,rax
ffff800000800232:	bf 0a 00 00 00       	mov    edi,0xa
ffff800000800237:	49 89 df             	mov    r15,rbx
ffff80000080023a:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff800000800241:	ff ff ff 
ffff800000800244:	48 01 d8             	add    rax,rbx
ffff800000800247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800249:	48 b8 d0 ff ff ff ff 	movabs rax,0xffffffffffffffd0
ffff800000800250:	ff ff ff 
ffff800000800253:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800257:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080025c:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800261:	48 89 c6             	mov    rsi,rax
ffff800000800264:	bf 0b 00 00 00       	mov    edi,0xb
ffff800000800269:	49 89 df             	mov    r15,rbx
ffff80000080026c:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff800000800273:	ff ff ff 
ffff800000800276:	48 01 d8             	add    rax,rbx
ffff800000800279:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
ffff80000080027b:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff800000800282:	ff ff ff 
ffff800000800285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800289:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080028e:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800293:	48 89 c6             	mov    rsi,rax
ffff800000800296:	bf 0c 00 00 00       	mov    edi,0xc
ffff80000080029b:	49 89 df             	mov    r15,rbx
ffff80000080029e:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff8000008002a5:	ff ff ff 
ffff8000008002a8:	48 01 d8             	add    rax,rbx
ffff8000008002ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002ad:	48 b8 68 ff ff ff ff 	movabs rax,0xffffffffffffff68
ffff8000008002b4:	ff ff ff 
ffff8000008002b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002bb:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002c0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002c5:	48 89 c6             	mov    rsi,rax
ffff8000008002c8:	bf 0d 00 00 00       	mov    edi,0xd
ffff8000008002cd:	49 89 df             	mov    r15,rbx
ffff8000008002d0:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff8000008002d7:	ff ff ff 
ffff8000008002da:	48 01 d8             	add    rax,rbx
ffff8000008002dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002df:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff8000008002e6:	ff ff ff 
ffff8000008002e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002ed:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002f2:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002f7:	48 89 c6             	mov    rsi,rax
ffff8000008002fa:	bf 0e 00 00 00       	mov    edi,0xe
ffff8000008002ff:	49 89 df             	mov    r15,rbx
ffff800000800302:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff800000800309:	ff ff ff 
ffff80000080030c:	48 01 d8             	add    rax,rbx
ffff80000080030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800311:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff800000800318:	ff ff ff 
ffff80000080031b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080031f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800324:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800329:	48 89 c6             	mov    rsi,rax
ffff80000080032c:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000800331:	49 89 df             	mov    r15,rbx
ffff800000800334:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff80000080033b:	ff ff ff 
ffff80000080033e:	48 01 d8             	add    rax,rbx
ffff800000800341:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800343:	48 b8 58 ff ff ff ff 	movabs rax,0xffffffffffffff58
ffff80000080034a:	ff ff ff 
ffff80000080034d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800351:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800356:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080035b:	48 89 c6             	mov    rsi,rax
ffff80000080035e:	bf 10 00 00 00       	mov    edi,0x10
ffff800000800363:	49 89 df             	mov    r15,rbx
ffff800000800366:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff80000080036d:	ff ff ff 
ffff800000800370:	48 01 d8             	add    rax,rbx
ffff800000800373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33
    for (int i=17;i<48;i++)
ffff800000800375:	c7 45 ec 11 00 00 00 	mov    DWORD PTR [rbp-0x14],0x11
ffff80000080037c:	eb 39                	jmp    ffff8000008003b7 <init_int+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff80000080037e:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff800000800385:	ff ff ff 
ffff800000800388:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080038c:	48 89 c6             	mov    rsi,rax
ffff80000080038f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000800392:	0f b6 c0             	movzx  eax,al
ffff800000800395:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff80000080039a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080039f:	89 c7                	mov    edi,eax
ffff8000008003a1:	49 89 df             	mov    r15,rbx
ffff8000008003a4:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff8000008003ab:	ff ff ff 
ffff8000008003ae:	48 01 d8             	add    rax,rbx
ffff8000008003b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 3)
    for (int i=17;i<48;i++)
ffff8000008003b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 1)
ffff8000008003b7:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff8000008003bb:	7e c1                	jle    ffff80000080037e <init_int+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003bd:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff8000008003c4:	ff ff ff 
ffff8000008003c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003cb:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff8000008003d0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008003d5:	48 89 c6             	mov    rsi,rax
ffff8000008003d8:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008003dd:	49 89 df             	mov    r15,rbx
ffff8000008003e0:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff8000008003e7:	ff ff ff 
ffff8000008003ea:	48 01 d8             	add    rax,rbx
ffff8000008003ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003ef:	48 b8 c8 ff ff ff ff 	movabs rax,0xffffffffffffffc8
ffff8000008003f6:	ff ff ff 
ffff8000008003f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003fd:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800402:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800407:	48 89 c6             	mov    rsi,rax
ffff80000080040a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080040f:	49 89 df             	mov    r15,rbx
ffff800000800412:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff800000800419:	ff ff ff 
ffff80000080041c:	48 01 d8             	add    rax,rbx
ffff80000080041f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:37
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff800000800421:	48 b8 f8 ff ff ff ff 	movabs rax,0xfffffffffffffff8
ffff800000800428:	ff ff ff 
ffff80000080042b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080042f:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800434:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800439:	48 89 c6             	mov    rsi,rax
ffff80000080043c:	bf 2e 00 00 00       	mov    edi,0x2e
ffff800000800441:	49 89 df             	mov    r15,rbx
ffff800000800444:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff80000080044b:	ff ff ff 
ffff80000080044e:	48 01 d8             	add    rax,rbx
ffff800000800451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:38
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
ffff800000800453:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080045a:	ff ff ff 
ffff80000080045d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800461:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800466:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080046b:	48 89 c6             	mov    rsi,rax
ffff80000080046e:	bf 80 00 00 00       	mov    edi,0x80
ffff800000800473:	49 89 df             	mov    r15,rbx
ffff800000800476:	48 b8 aa dc fd ff ff 	movabs rax,0xfffffffffffddcaa
ffff80000080047d:	ff ff ff 
ffff800000800480:	48 01 d8             	add    rax,rbx
ffff800000800483:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:43
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
ffff800000800485:	be 11 00 00 00       	mov    esi,0x11
ffff80000080048a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080048f:	49 89 df             	mov    r15,rbx
ffff800000800492:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff800000800499:	ff ff ff 
ffff80000080049c:	48 01 d8             	add    rax,rbx
ffff80000080049f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:44
	outb(0xA0,0x11);
ffff8000008004a1:	be 11 00 00 00       	mov    esi,0x11
ffff8000008004a6:	bf a0 00 00 00       	mov    edi,0xa0
ffff8000008004ab:	49 89 df             	mov    r15,rbx
ffff8000008004ae:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff8000008004b5:	ff ff ff 
ffff8000008004b8:	48 01 d8             	add    rax,rbx
ffff8000008004bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:46
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
ffff8000008004bd:	be 20 00 00 00       	mov    esi,0x20
ffff8000008004c2:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004c7:	49 89 df             	mov    r15,rbx
ffff8000008004ca:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff8000008004d1:	ff ff ff 
ffff8000008004d4:	48 01 d8             	add    rax,rbx
ffff8000008004d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:47
	outb(0xA1,0x28);
ffff8000008004d9:	be 28 00 00 00       	mov    esi,0x28
ffff8000008004de:	bf a1 00 00 00       	mov    edi,0xa1
ffff8000008004e3:	49 89 df             	mov    r15,rbx
ffff8000008004e6:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff8000008004ed:	ff ff ff 
ffff8000008004f0:	48 01 d8             	add    rax,rbx
ffff8000008004f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:49
	//ICW3
	outb(0x21,0x04);
ffff8000008004f5:	be 04 00 00 00       	mov    esi,0x4
ffff8000008004fa:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004ff:	49 89 df             	mov    r15,rbx
ffff800000800502:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff800000800509:	ff ff ff 
ffff80000080050c:	48 01 d8             	add    rax,rbx
ffff80000080050f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:50
	outb(0xA1,0x02);
ffff800000800511:	be 02 00 00 00       	mov    esi,0x2
ffff800000800516:	bf a1 00 00 00       	mov    edi,0xa1
ffff80000080051b:	49 89 df             	mov    r15,rbx
ffff80000080051e:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff800000800525:	ff ff ff 
ffff800000800528:	48 01 d8             	add    rax,rbx
ffff80000080052b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:52
	//ICW4
	outb(0x21,0x01);
ffff80000080052d:	be 01 00 00 00       	mov    esi,0x1
ffff800000800532:	bf 21 00 00 00       	mov    edi,0x21
ffff800000800537:	49 89 df             	mov    r15,rbx
ffff80000080053a:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff800000800541:	ff ff ff 
ffff800000800544:	48 01 d8             	add    rax,rbx
ffff800000800547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:53
	outb(0xA1,0x01);
ffff800000800549:	be 01 00 00 00       	mov    esi,0x1
ffff80000080054e:	bf a1 00 00 00       	mov    edi,0xa1
ffff800000800553:	49 89 df             	mov    r15,rbx
ffff800000800556:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080055d:	ff ff ff 
ffff800000800560:	48 01 d8             	add    rax,rbx
ffff800000800563:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:55

    turn_on_int();
ffff800000800565:	49 89 df             	mov    r15,rbx
ffff800000800568:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080056d:	48 ba 52 77 fe ff ff 	movabs rdx,0xfffffffffffe7752
ffff800000800574:	ff ff ff 
ffff800000800577:	48 01 da             	add    rdx,rbx
ffff80000080057a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:59


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
ffff80000080057c:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff800000800583:	ff ff ff 
ffff800000800586:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080058a:	48 89 c6             	mov    rsi,rax
ffff80000080058d:	b8 82 00 00 c0       	mov    eax,0xc0000082
ffff800000800592:	48 89 c7             	mov    rdi,rax
ffff800000800595:	49 89 df             	mov    r15,rbx
ffff800000800598:	48 b8 62 e6 fd ff ff 	movabs rax,0xfffffffffffde662
ffff80000080059f:	ff ff ff 
ffff8000008005a2:	48 01 d8             	add    rax,rbx
ffff8000008005a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:61
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
ffff8000008005a7:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
ffff8000008005ae:	b8 84 00 00 c0       	mov    eax,0xc0000084
ffff8000008005b3:	48 89 c7             	mov    rdi,rax
ffff8000008005b6:	49 89 df             	mov    r15,rbx
ffff8000008005b9:	48 b8 62 e6 fd ff ff 	movabs rax,0xfffffffffffde662
ffff8000008005c0:	ff ff ff 
ffff8000008005c3:	48 01 d8             	add    rax,rbx
ffff8000008005c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:62
}
ffff8000008005c8:	90                   	nop
ffff8000008005c9:	48 83 c4 10          	add    rsp,0x10
ffff8000008005cd:	5b                   	pop    rbx
ffff8000008005ce:	41 5f                	pop    r15
ffff8000008005d0:	5d                   	pop    rbp
ffff8000008005d1:	c3                   	ret    

ffff8000008005d2 <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:64
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
ffff8000008005d2:	f3 0f 1e fa          	endbr64 
ffff8000008005d6:	55                   	push   rbp
ffff8000008005d7:	48 89 e5             	mov    rbp,rsp
ffff8000008005da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008005da <set_gate+0x8>
ffff8000008005e1:	49 bb 4e 23 02 00 00 	movabs r11,0x2234e
ffff8000008005e8:	00 00 00 
ffff8000008005eb:	4c 01 d8             	add    rax,r11
ffff8000008005ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008005f2:	89 d6                	mov    esi,edx
ffff8000008005f4:	89 ca                	mov    edx,ecx
ffff8000008005f6:	89 f9                	mov    ecx,edi
ffff8000008005f8:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
ffff8000008005fb:	89 f1                	mov    ecx,esi
ffff8000008005fd:	66 89 4d f8          	mov    WORD PTR [rbp-0x8],cx
ffff800000800601:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector;
#else
    offset|=KNL_BASE;//中断必须在内核空间
ffff800000800605:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080060c:	80 ff ff 
ffff80000080060f:	48 09 55 f0          	or     QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_low=offset&0xffff;
ffff800000800613:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff80000080061a:	ff ff ff 
ffff80000080061d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000800624:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800628:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080062c:	48 01 ca             	add    rdx,rcx
ffff80000080062f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000800633:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].offset_mid=(offset>>16)&0xffff;
ffff800000800636:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080063a:	48 89 d1             	mov    rcx,rdx
ffff80000080063d:	48 c1 e9 10          	shr    rcx,0x10
ffff800000800641:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff800000800648:	ff ff ff 
ffff80000080064b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080064f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000800652:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800656:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080065a:	48 01 f2             	add    rdx,rsi
ffff80000080065d:	66 89 4a 06          	mov    WORD PTR [rdx+0x6],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].offset_high=(offset>>32);//0x0000ffff;
ffff800000800661:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000800665:	48 89 d1             	mov    rcx,rdx
ffff800000800668:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080066c:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff800000800673:	ff ff ff 
ffff800000800676:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080067a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080067d:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800681:	48 c1 e2 04          	shl    rdx,0x4
ffff800000800685:	48 01 f2             	add    rdx,rsi
ffff800000800688:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].attr=attr|1;//1是ist索引
ffff80000080068b:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff800000800692:	ff ff ff 
ffff800000800695:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800699:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080069c:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006a0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006a4:	48 01 ca             	add    rdx,rcx
ffff8000008006a7:	0f b7 4d ec          	movzx  ecx,WORD PTR [rbp-0x14]
ffff8000008006ab:	83 c9 01             	or     ecx,0x1
ffff8000008006ae:	66 89 4a 04          	mov    WORD PTR [rdx+0x4],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:76
    idt[index].selector=selector;
ffff8000008006b2:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff8000008006b9:	ff ff ff 
ffff8000008006bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008006c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008006c3:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006c7:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006cb:	48 01 d1             	add    rcx,rdx
ffff8000008006ce:	0f b7 55 f8          	movzx  edx,WORD PTR [rbp-0x8]
ffff8000008006d2:	66 89 51 02          	mov    WORD PTR [rcx+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:77
    idt[index].rsvd=0;
ffff8000008006d6:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff8000008006dd:	ff ff ff 
ffff8000008006e0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008006e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008006e7:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffff8000008006eb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008006ef:	48 01 d0             	add    rax,rdx
ffff8000008006f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:79
#endif
}
ffff8000008006f9:	90                   	nop
ffff8000008006fa:	5d                   	pop    rbp
ffff8000008006fb:	c3                   	ret    

ffff8000008006fc <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:81

void divide_err(){
ffff8000008006fc:	f3 0f 1e fa          	endbr64 
ffff800000800700:	55                   	push   rbp
ffff800000800701:	48 89 e5             	mov    rbp,rsp
ffff800000800704:	41 57                	push   r15
ffff800000800706:	48 83 ec 08          	sub    rsp,0x8
ffff80000080070a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080070a <divide_err+0xe>
ffff800000800711:	49 bb 1e 22 02 00 00 	movabs r11,0x2221e
ffff800000800718:	00 00 00 
ffff80000080071b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:82
    asm("cli");
ffff80000080071e:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
    //puts("divide err");
    eoi();
ffff80000080071f:	49 89 d7             	mov    r15,rdx
ffff800000800722:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800727:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff80000080072e:	ff ff ff 
ffff800000800731:	48 01 d1             	add    rcx,rdx
ffff800000800734:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:85
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800736:	fb                   	sti    
ffff800000800737:	c9                   	leave  
ffff800000800738:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:86
}
ffff80000080073a:	90                   	nop
ffff80000080073b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080073f:	c9                   	leave  
ffff800000800740:	c3                   	ret    

ffff800000800741 <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:88

void debug(){
ffff800000800741:	f3 0f 1e fa          	endbr64 
ffff800000800745:	55                   	push   rbp
ffff800000800746:	48 89 e5             	mov    rbp,rsp
ffff800000800749:	41 57                	push   r15
ffff80000080074b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080074f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080074f <debug+0xe>
ffff800000800756:	49 bb d9 21 02 00 00 	movabs r11,0x221d9
ffff80000080075d:	00 00 00 
ffff800000800760:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:89
    asm("cli");
ffff800000800763:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
    //puts("debug");
    eoi();
ffff800000800764:	49 89 d7             	mov    r15,rdx
ffff800000800767:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080076c:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff800000800773:	ff ff ff 
ffff800000800776:	48 01 d1             	add    rcx,rdx
ffff800000800779:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080077b:	fb                   	sti    
ffff80000080077c:	c9                   	leave  
ffff80000080077d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
}
ffff80000080077f:	90                   	nop
ffff800000800780:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800784:	c9                   	leave  
ffff800000800785:	c3                   	ret    

ffff800000800786 <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:94
void default_int_proc(){
ffff800000800786:	f3 0f 1e fa          	endbr64 
ffff80000080078a:	55                   	push   rbp
ffff80000080078b:	48 89 e5             	mov    rbp,rsp
ffff80000080078e:	41 57                	push   r15
ffff800000800790:	48 83 ec 08          	sub    rsp,0x8
ffff800000800794:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800794 <default_int_proc+0xe>
ffff80000080079b:	49 bb 94 21 02 00 00 	movabs r11,0x22194
ffff8000008007a2:	00 00 00 
ffff8000008007a5:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:95
    asm("cli");
ffff8000008007a8:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
    //puts("default_int_proc");
    eoi();
ffff8000008007a9:	49 89 d7             	mov    r15,rdx
ffff8000008007ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007b1:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff8000008007b8:	ff ff ff 
ffff8000008007bb:	48 01 d1             	add    rcx,rdx
ffff8000008007be:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008007c0:	fb                   	sti    
ffff8000008007c1:	c9                   	leave  
ffff8000008007c2:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
}
ffff8000008007c4:	90                   	nop
ffff8000008007c5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008007c9:	c9                   	leave  
ffff8000008007ca:	c3                   	ret    

ffff8000008007cb <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:100
void breakpoint(){
ffff8000008007cb:	f3 0f 1e fa          	endbr64 
ffff8000008007cf:	55                   	push   rbp
ffff8000008007d0:	48 89 e5             	mov    rbp,rsp
ffff8000008007d3:	41 57                	push   r15
ffff8000008007d5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008007d9:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008007d9 <breakpoint+0xe>
ffff8000008007e0:	49 bb 4f 21 02 00 00 	movabs r11,0x2214f
ffff8000008007e7:	00 00 00 
ffff8000008007ea:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:101
    asm("cli");
ffff8000008007ed:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
    //puts("breakpoint");
    eoi();
ffff8000008007ee:	49 89 d7             	mov    r15,rdx
ffff8000008007f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007f6:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff8000008007fd:	ff ff ff 
ffff800000800800:	48 01 d1             	add    rcx,rdx
ffff800000800803:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800805:	fb                   	sti    
ffff800000800806:	c9                   	leave  
ffff800000800807:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
}
ffff800000800809:	90                   	nop
ffff80000080080a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080080e:	c9                   	leave  
ffff80000080080f:	c3                   	ret    

ffff800000800810 <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:106
void overflow(){
ffff800000800810:	f3 0f 1e fa          	endbr64 
ffff800000800814:	55                   	push   rbp
ffff800000800815:	48 89 e5             	mov    rbp,rsp
ffff800000800818:	41 57                	push   r15
ffff80000080081a:	48 83 ec 08          	sub    rsp,0x8
ffff80000080081e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080081e <overflow+0xe>
ffff800000800825:	49 bb 0a 21 02 00 00 	movabs r11,0x2210a
ffff80000080082c:	00 00 00 
ffff80000080082f:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:107
    asm("cli");
ffff800000800832:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
    //puts("overflow");
    eoi();
ffff800000800833:	49 89 d7             	mov    r15,rdx
ffff800000800836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080083b:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff800000800842:	ff ff ff 
ffff800000800845:	48 01 d1             	add    rcx,rdx
ffff800000800848:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080084a:	fb                   	sti    
ffff80000080084b:	c9                   	leave  
ffff80000080084c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
}
ffff80000080084e:	90                   	nop
ffff80000080084f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800853:	c9                   	leave  
ffff800000800854:	c3                   	ret    

ffff800000800855 <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:112
void bounds(){
ffff800000800855:	f3 0f 1e fa          	endbr64 
ffff800000800859:	55                   	push   rbp
ffff80000080085a:	48 89 e5             	mov    rbp,rsp
ffff80000080085d:	41 57                	push   r15
ffff80000080085f:	48 83 ec 08          	sub    rsp,0x8
ffff800000800863:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800863 <bounds+0xe>
ffff80000080086a:	49 bb c5 20 02 00 00 	movabs r11,0x220c5
ffff800000800871:	00 00 00 
ffff800000800874:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:113
    asm("cli");
ffff800000800877:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
    //puts("bounds");
    eoi();
ffff800000800878:	49 89 d7             	mov    r15,rdx
ffff80000080087b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800880:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff800000800887:	ff ff ff 
ffff80000080088a:	48 01 d1             	add    rcx,rdx
ffff80000080088d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080088f:	fb                   	sti    
ffff800000800890:	c9                   	leave  
ffff800000800891:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:117
}
ffff800000800893:	90                   	nop
ffff800000800894:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800898:	c9                   	leave  
ffff800000800899:	c3                   	ret    

ffff80000080089a <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:118
void undefined_operator(){
ffff80000080089a:	f3 0f 1e fa          	endbr64 
ffff80000080089e:	55                   	push   rbp
ffff80000080089f:	48 89 e5             	mov    rbp,rsp
ffff8000008008a2:	41 57                	push   r15
ffff8000008008a4:	53                   	push   rbx
ffff8000008008a5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008008a5 <undefined_operator+0xb>
ffff8000008008ac:	49 bb 83 20 02 00 00 	movabs r11,0x22083
ffff8000008008b3:	00 00 00 
ffff8000008008b6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    //puts("undef operator");
    eoi();
ffff8000008008b9:	49 89 df             	mov    r15,rbx
ffff8000008008bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008c1:	48 ba 46 77 fe ff ff 	movabs rdx,0xfffffffffffe7746
ffff8000008008c8:	ff ff ff 
ffff8000008008cb:	48 01 da             	add    rdx,rbx
ffff8000008008ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
    report_back_trace_of_err();
ffff8000008008d0:	49 89 df             	mov    r15,rbx
ffff8000008008d3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008d8:	48 ba 76 77 fe ff ff 	movabs rdx,0xfffffffffffe7776
ffff8000008008df:	ff ff ff 
ffff8000008008e2:	48 01 da             	add    rdx,rbx
ffff8000008008e5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
ffff8000008008e7:	eb fe                	jmp    ffff8000008008e7 <undefined_operator+0x4d>
ffff8000008008e9:	c9                   	leave  
ffff8000008008ea:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
}
ffff8000008008ec:	90                   	nop
ffff8000008008ed:	5b                   	pop    rbx
ffff8000008008ee:	41 5f                	pop    r15
ffff8000008008f0:	5d                   	pop    rbp
ffff8000008008f1:	c3                   	ret    

ffff8000008008f2 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:124
void coprocessor_notexist(){
ffff8000008008f2:	f3 0f 1e fa          	endbr64 
ffff8000008008f6:	55                   	push   rbp
ffff8000008008f7:	48 89 e5             	mov    rbp,rsp
ffff8000008008fa:	41 57                	push   r15
ffff8000008008fc:	48 83 ec 08          	sub    rsp,0x8
ffff800000800900:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800900 <coprocessor_notexist+0xe>
ffff800000800907:	49 bb 28 20 02 00 00 	movabs r11,0x22028
ffff80000080090e:	00 00 00 
ffff800000800911:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:125
    asm("cli");
ffff800000800914:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
    //puts("coprocessor doesnt exist");
    eoi();
ffff800000800915:	49 89 d7             	mov    r15,rdx
ffff800000800918:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080091d:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff800000800924:	ff ff ff 
ffff800000800927:	48 01 d1             	add    rcx,rdx
ffff80000080092a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:128
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080092c:	fb                   	sti    
ffff80000080092d:	c9                   	leave  
ffff80000080092e:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
}
ffff800000800930:	90                   	nop
ffff800000800931:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800935:	c9                   	leave  
ffff800000800936:	c3                   	ret    

ffff800000800937 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:130
void double_ints(){
ffff800000800937:	f3 0f 1e fa          	endbr64 
ffff80000080093b:	55                   	push   rbp
ffff80000080093c:	48 89 e5             	mov    rbp,rsp
ffff80000080093f:	41 57                	push   r15
ffff800000800941:	48 83 ec 08          	sub    rsp,0x8
ffff800000800945:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800945 <double_ints+0xe>
ffff80000080094c:	49 bb e3 1f 02 00 00 	movabs r11,0x21fe3
ffff800000800953:	00 00 00 
ffff800000800956:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:131
    asm("cli");
ffff800000800959:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
    //puts("double interrupts");
    eoi();
ffff80000080095a:	49 89 d7             	mov    r15,rdx
ffff80000080095d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800962:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff800000800969:	ff ff ff 
ffff80000080096c:	48 01 d1             	add    rcx,rdx
ffff80000080096f:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:134
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800971:	fb                   	sti    
ffff800000800972:	c9                   	leave  
ffff800000800973:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:135
}
ffff800000800975:	90                   	nop
ffff800000800976:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080097a:	c9                   	leave  
ffff80000080097b:	c3                   	ret    

ffff80000080097c <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:136
void coprocessor_seg_overbound(){
ffff80000080097c:	f3 0f 1e fa          	endbr64 
ffff800000800980:	55                   	push   rbp
ffff800000800981:	48 89 e5             	mov    rbp,rsp
ffff800000800984:	41 57                	push   r15
ffff800000800986:	48 83 ec 08          	sub    rsp,0x8
ffff80000080098a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080098a <coprocessor_seg_overbound+0xe>
ffff800000800991:	49 bb 9e 1f 02 00 00 	movabs r11,0x21f9e
ffff800000800998:	00 00 00 
ffff80000080099b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
    //puts("coprocessfor seg overdound");
    eoi();
ffff80000080099e:	49 89 d7             	mov    r15,rdx
ffff8000008009a1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009a6:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff8000008009ad:	ff ff ff 
ffff8000008009b0:	48 01 d1             	add    rcx,rdx
ffff8000008009b3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:139
    __asm__ volatile ("leave \r\n iretq");
ffff8000008009b5:	c9                   	leave  
ffff8000008009b6:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
}
ffff8000008009b8:	90                   	nop
ffff8000008009b9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008009bd:	c9                   	leave  
ffff8000008009be:	c3                   	ret    

ffff8000008009bf <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:141
void invalid_tss(){
ffff8000008009bf:	f3 0f 1e fa          	endbr64 
ffff8000008009c3:	55                   	push   rbp
ffff8000008009c4:	48 89 e5             	mov    rbp,rsp
ffff8000008009c7:	41 57                	push   r15
ffff8000008009c9:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009cd:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009cd <invalid_tss+0xe>
ffff8000008009d4:	49 bb 5b 1f 02 00 00 	movabs r11,0x21f5b
ffff8000008009db:	00 00 00 
ffff8000008009de:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:142
    asm("cli");
ffff8000008009e1:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
    //puts("invalid tss");
    eoi();
ffff8000008009e2:	49 89 d7             	mov    r15,rdx
ffff8000008009e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009ea:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff8000008009f1:	ff ff ff 
ffff8000008009f4:	48 01 d1             	add    rcx,rdx
ffff8000008009f7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:145
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008009f9:	fb                   	sti    
ffff8000008009fa:	c9                   	leave  
ffff8000008009fb:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
}
ffff8000008009fd:	90                   	nop
ffff8000008009fe:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a02:	c9                   	leave  
ffff800000800a03:	c3                   	ret    

ffff800000800a04 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:147
void segment_notexist(){
ffff800000800a04:	f3 0f 1e fa          	endbr64 
ffff800000800a08:	55                   	push   rbp
ffff800000800a09:	48 89 e5             	mov    rbp,rsp
ffff800000800a0c:	41 57                	push   r15
ffff800000800a0e:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a12:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a12 <segment_notexist+0xe>
ffff800000800a19:	49 bb 16 1f 02 00 00 	movabs r11,0x21f16
ffff800000800a20:	00 00 00 
ffff800000800a23:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:148
    asm("cli");
ffff800000800a26:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
    //puts("seg nonexistent");
    eoi();
ffff800000800a27:	49 89 d7             	mov    r15,rdx
ffff800000800a2a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a2f:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff800000800a36:	ff ff ff 
ffff800000800a39:	48 01 d1             	add    rcx,rdx
ffff800000800a3c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:151
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a3e:	fb                   	sti    
ffff800000800a3f:	c9                   	leave  
ffff800000800a40:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
}
ffff800000800a42:	90                   	nop
ffff800000800a43:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a47:	c9                   	leave  
ffff800000800a48:	c3                   	ret    

ffff800000800a49 <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:153
void stackseg_overbound(){
ffff800000800a49:	f3 0f 1e fa          	endbr64 
ffff800000800a4d:	55                   	push   rbp
ffff800000800a4e:	48 89 e5             	mov    rbp,rsp
ffff800000800a51:	41 57                	push   r15
ffff800000800a53:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a57:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a57 <stackseg_overbound+0xe>
ffff800000800a5e:	49 bb d1 1e 02 00 00 	movabs r11,0x21ed1
ffff800000800a65:	00 00 00 
ffff800000800a68:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:154
    asm("cli");
ffff800000800a6b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
    //puts("stack seg overbound");
    eoi();
ffff800000800a6c:	49 89 d7             	mov    r15,rdx
ffff800000800a6f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a74:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff800000800a7b:	ff ff ff 
ffff800000800a7e:	48 01 d1             	add    rcx,rdx
ffff800000800a81:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:157
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a83:	fb                   	sti    
ffff800000800a84:	c9                   	leave  
ffff800000800a85:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:158
}
ffff800000800a87:	90                   	nop
ffff800000800a88:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a8c:	c9                   	leave  
ffff800000800a8d:	c3                   	ret    

ffff800000800a8e <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:159
void general_protect(){
ffff800000800a8e:	f3 0f 1e fa          	endbr64 
ffff800000800a92:	55                   	push   rbp
ffff800000800a93:	48 89 e5             	mov    rbp,rsp
ffff800000800a96:	41 57                	push   r15
ffff800000800a98:	48 83 ec 18          	sub    rsp,0x18
ffff800000800a9c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a9c <general_protect+0xe>
ffff800000800aa3:	49 bb 8c 1e 02 00 00 	movabs r11,0x21e8c
ffff800000800aaa:	00 00 00 
ffff800000800aad:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:161
    //print("general protect.");
    int err_code=0;
ffff800000800ab0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:179
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
ffff800000800ab7:	49 89 d7             	mov    r15,rdx
ffff800000800aba:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800abf:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff800000800ac6:	ff ff ff 
ffff800000800ac9:	48 01 d1             	add    rcx,rdx
ffff800000800acc:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:180
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
ffff800000800ace:	c9                   	leave  
ffff800000800acf:	48 83 c4 08          	add    rsp,0x8
ffff800000800ad3:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:181
}
ffff800000800ad5:	90                   	nop
ffff800000800ad6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800ada:	c9                   	leave  
ffff800000800adb:	c3                   	ret    

ffff800000800adc <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:183

void coprocessor_err(){
ffff800000800adc:	f3 0f 1e fa          	endbr64 
ffff800000800ae0:	55                   	push   rbp
ffff800000800ae1:	48 89 e5             	mov    rbp,rsp
ffff800000800ae4:	41 57                	push   r15
ffff800000800ae6:	48 83 ec 08          	sub    rsp,0x8
ffff800000800aea:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800aea <coprocessor_err+0xe>
ffff800000800af1:	49 bb 3e 1e 02 00 00 	movabs r11,0x21e3e
ffff800000800af8:	00 00 00 
ffff800000800afb:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:184
    asm("cli");
ffff800000800afe:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
    //puts("coprocessor err");
    eoi();
ffff800000800aff:	49 89 d7             	mov    r15,rdx
ffff800000800b02:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800b07:	48 b9 46 77 fe ff ff 	movabs rcx,0xfffffffffffe7746
ffff800000800b0e:	ff ff ff 
ffff800000800b11:	48 01 d1             	add    rcx,rdx
ffff800000800b14:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:187
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800b16:	fb                   	sti    
ffff800000800b17:	c9                   	leave  
ffff800000800b18:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:188
}
ffff800000800b1a:	90                   	nop
ffff800000800b1b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800b1f:	c9                   	leave  
ffff800000800b20:	c3                   	ret    

ffff800000800b21 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:207

xchg rcx to r10

*/
int syscall(int a, int b, int c, int d, int e, int f)
{
ffff800000800b21:	f3 0f 1e fa          	endbr64 
ffff800000800b25:	55                   	push   rbp
ffff800000800b26:	48 89 e5             	mov    rbp,rsp
ffff800000800b29:	41 57                	push   r15
ffff800000800b2b:	53                   	push   rbx
ffff800000800b2c:	48 83 ec 30          	sub    rsp,0x30
ffff800000800b30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800b30 <syscall+0xf>
ffff800000800b37:	49 bb f8 1d 02 00 00 	movabs r11,0x21df8
ffff800000800b3e:	00 00 00 
ffff800000800b41:	4c 01 db             	add    rbx,r11
ffff800000800b44:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000800b47:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000800b4a:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff800000800b4d:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff800000800b50:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
ffff800000800b54:	44 89 4d c8          	mov    DWORD PTR [rbp-0x38],r9d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:209
    unsigned long num;
    asm volatile("":"=a"(num));//这样rax中存的参数就到这了
ffff800000800b58:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:210
    switch (num)
ffff800000800b5c:	48 83 7d e8 64       	cmp    QWORD PTR [rbp-0x18],0x64
ffff800000800b61:	0f 87 1a 04 00 00    	ja     ffff800000800f81 <syscall+0x460>
ffff800000800b67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800b6b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800b72:	00 
ffff800000800b73:	48 8d 05 86 ed 01 00 	lea    rax,[rip+0x1ed86]        # ffff80000081f900 <dev_keyboard+0xc0>
ffff800000800b7a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800b7e:	48 8d 15 7b ed 01 00 	lea    rdx,[rip+0x1ed7b]        # ffff80000081f900 <dev_keyboard+0xc0>
ffff800000800b85:	48 01 d0             	add    rax,rdx
ffff800000800b88:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:212
    {
        case 0:return reg_device(a);
ffff800000800b8b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800b8e:	48 98                	cdqe   
ffff800000800b90:	48 89 c7             	mov    rdi,rax
ffff800000800b93:	49 89 df             	mov    r15,rbx
ffff800000800b96:	48 b8 4a 2b fe ff ff 	movabs rax,0xfffffffffffe2b4a
ffff800000800b9d:	ff ff ff 
ffff800000800ba0:	48 01 d8             	add    rax,rbx
ffff800000800ba3:	ff d0                	call   rax
ffff800000800ba5:	e9 d7 03 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:213
        case 1:return dispose_device(a);
ffff800000800baa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800bad:	89 c7                	mov    edi,eax
ffff800000800baf:	49 89 df             	mov    r15,rbx
ffff800000800bb2:	48 b8 b8 38 fe ff ff 	movabs rax,0xfffffffffffe38b8
ffff800000800bb9:	ff ff ff 
ffff800000800bbc:	48 01 d8             	add    rax,rbx
ffff800000800bbf:	ff d0                	call   rax
ffff800000800bc1:	e9 bb 03 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:214
        case 2:return reg_driver(a);
ffff800000800bc6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800bc9:	48 98                	cdqe   
ffff800000800bcb:	48 89 c7             	mov    rdi,rax
ffff800000800bce:	49 89 df             	mov    r15,rbx
ffff800000800bd1:	48 b8 c2 2e fe ff ff 	movabs rax,0xfffffffffffe2ec2
ffff800000800bd8:	ff ff ff 
ffff800000800bdb:	48 01 d8             	add    rax,rbx
ffff800000800bde:	ff d0                	call   rax
ffff800000800be0:	e9 9c 03 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:215
        case 3:return dispose_driver(a);
ffff800000800be5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800be8:	48 98                	cdqe   
ffff800000800bea:	48 89 c7             	mov    rdi,rax
ffff800000800bed:	49 89 df             	mov    r15,rbx
ffff800000800bf0:	48 b8 84 39 fe ff ff 	movabs rax,0xfffffffffffe3984
ffff800000800bf7:	ff ff ff 
ffff800000800bfa:	48 01 d8             	add    rax,rbx
ffff800000800bfd:	ff d0                	call   rax
ffff800000800bff:	e9 7d 03 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:216
        case 4:return call_drv_func(a,b,c);
ffff800000800c04:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000800c07:	48 98                	cdqe   
ffff800000800c09:	48 89 c2             	mov    rdx,rax
ffff800000800c0c:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff800000800c0f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800c12:	89 ce                	mov    esi,ecx
ffff800000800c14:	89 c7                	mov    edi,eax
ffff800000800c16:	49 89 df             	mov    r15,rbx
ffff800000800c19:	48 b8 76 35 fe ff ff 	movabs rax,0xfffffffffffe3576
ffff800000800c20:	ff ff ff 
ffff800000800c23:	48 01 d8             	add    rax,rbx
ffff800000800c26:	ff d0                	call   rax
ffff800000800c28:	e9 54 03 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:217
        case 5:return req_page_at(a,b);
ffff800000800c2d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800c30:	48 98                	cdqe   
ffff800000800c32:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff800000800c35:	89 d6                	mov    esi,edx
ffff800000800c37:	48 89 c7             	mov    rdi,rax
ffff800000800c3a:	49 89 df             	mov    r15,rbx
ffff800000800c3d:	48 b8 bb 07 fe ff ff 	movabs rax,0xfffffffffffe07bb
ffff800000800c44:	ff ff ff 
ffff800000800c47:	48 01 d8             	add    rax,rbx
ffff800000800c4a:	ff d0                	call   rax
ffff800000800c4c:	e9 30 03 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:218
        case 6:return free_page(a);
ffff800000800c51:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800c54:	48 98                	cdqe   
ffff800000800c56:	48 89 c7             	mov    rdi,rax
ffff800000800c59:	49 89 df             	mov    r15,rbx
ffff800000800c5c:	48 b8 bc 04 fe ff ff 	movabs rax,0xfffffffffffe04bc
ffff800000800c63:	ff ff ff 
ffff800000800c66:	48 01 d8             	add    rax,rbx
ffff800000800c69:	ff d0                	call   rax
ffff800000800c6b:	e9 11 03 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        case 7:return reg_proc(a, b, c);
ffff800000800c70:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000800c73:	48 98                	cdqe   
ffff800000800c75:	48 89 c2             	mov    rdx,rax
ffff800000800c78:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800c7b:	48 98                	cdqe   
ffff800000800c7d:	48 89 c1             	mov    rcx,rax
ffff800000800c80:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800c83:	48 98                	cdqe   
ffff800000800c85:	48 89 ce             	mov    rsi,rcx
ffff800000800c88:	48 89 c7             	mov    rdi,rax
ffff800000800c8b:	49 89 df             	mov    r15,rbx
ffff800000800c8e:	48 b8 db 56 fe ff ff 	movabs rax,0xfffffffffffe56db
ffff800000800c95:	ff ff ff 
ffff800000800c98:	48 01 d8             	add    rax,rbx
ffff800000800c9b:	ff d0                	call   rax
ffff800000800c9d:	e9 df 02 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 8:del_proc(a);
ffff800000800ca2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800ca5:	89 c7                	mov    edi,eax
ffff800000800ca7:	49 89 df             	mov    r15,rbx
ffff800000800caa:	48 b8 8c 53 fe ff ff 	movabs rax,0xfffffffffffe538c
ffff800000800cb1:	ff ff ff 
ffff800000800cb4:	48 01 d8             	add    rax,rbx
ffff800000800cb7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 10:chk_vm(a,b);
ffff800000800cb9:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff800000800cbc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800cbf:	89 d6                	mov    esi,edx
ffff800000800cc1:	89 c7                	mov    edi,eax
ffff800000800cc3:	49 89 df             	mov    r15,rbx
ffff800000800cc6:	48 b8 ed 08 fe ff ff 	movabs rax,0xfffffffffffe08ed
ffff800000800ccd:	ff ff ff 
ffff800000800cd0:	48 01 d8             	add    rax,rbx
ffff800000800cd3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 11:return sys_open(a,b);
ffff800000800cd5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800cd8:	48 98                	cdqe   
ffff800000800cda:	48 89 c2             	mov    rdx,rax
ffff800000800cdd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800ce0:	89 c6                	mov    esi,eax
ffff800000800ce2:	48 89 d7             	mov    rdi,rdx
ffff800000800ce5:	49 89 df             	mov    r15,rbx
ffff800000800ce8:	48 b8 83 a3 fe ff ff 	movabs rax,0xfffffffffffea383
ffff800000800cef:	ff ff ff 
ffff800000800cf2:	48 01 d8             	add    rax,rbx
ffff800000800cf5:	ff d0                	call   rax
ffff800000800cf7:	e9 85 02 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 12:return sys_close(a);
ffff800000800cfc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800cff:	89 c7                	mov    edi,eax
ffff800000800d01:	49 89 df             	mov    r15,rbx
ffff800000800d04:	48 b8 37 aa fe ff ff 	movabs rax,0xfffffffffffeaa37
ffff800000800d0b:	ff ff ff 
ffff800000800d0e:	48 01 d8             	add    rax,rbx
ffff800000800d11:	ff d0                	call   rax
ffff800000800d13:	e9 69 02 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 13:return sys_read(a,b,c);
ffff800000800d18:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000800d1b:	48 63 d0             	movsxd rdx,eax
ffff800000800d1e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800d21:	48 98                	cdqe   
ffff800000800d23:	48 89 c1             	mov    rcx,rax
ffff800000800d26:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800d29:	48 89 ce             	mov    rsi,rcx
ffff800000800d2c:	89 c7                	mov    edi,eax
ffff800000800d2e:	49 89 df             	mov    r15,rbx
ffff800000800d31:	48 b8 2e ab fe ff ff 	movabs rax,0xfffffffffffeab2e
ffff800000800d38:	ff ff ff 
ffff800000800d3b:	48 01 d8             	add    rax,rbx
ffff800000800d3e:	ff d0                	call   rax
ffff800000800d40:	e9 3c 02 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:225
        case 14:return sys_write(a,b,c);
ffff800000800d45:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000800d48:	48 63 d0             	movsxd rdx,eax
ffff800000800d4b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800d4e:	48 98                	cdqe   
ffff800000800d50:	48 89 c1             	mov    rcx,rax
ffff800000800d53:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800d56:	48 89 ce             	mov    rsi,rcx
ffff800000800d59:	89 c7                	mov    edi,eax
ffff800000800d5b:	49 89 df             	mov    r15,rbx
ffff800000800d5e:	48 b8 fc ab fe ff ff 	movabs rax,0xfffffffffffeabfc
ffff800000800d65:	ff ff ff 
ffff800000800d68:	48 01 d8             	add    rax,rbx
ffff800000800d6b:	ff d0                	call   rax
ffff800000800d6d:	e9 0f 02 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:226
        case 15:return sys_lseek(a,b,c);
ffff800000800d72:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800d75:	48 63 c8             	movsxd rcx,eax
ffff800000800d78:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000800d7b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800d7e:	48 89 ce             	mov    rsi,rcx
ffff800000800d81:	89 c7                	mov    edi,eax
ffff800000800d83:	49 89 df             	mov    r15,rbx
ffff800000800d86:	48 b8 ca ac fe ff ff 	movabs rax,0xfffffffffffeacca
ffff800000800d8d:	ff ff ff 
ffff800000800d90:	48 01 d8             	add    rax,rbx
ffff800000800d93:	ff d0                	call   rax
ffff800000800d95:	e9 e7 01 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:227
        case 16:return sys_tell(a);
ffff800000800d9a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800d9d:	89 c7                	mov    edi,eax
ffff800000800d9f:	49 89 df             	mov    r15,rbx
ffff800000800da2:	48 b8 e4 0e fe ff ff 	movabs rax,0xfffffffffffe0ee4
ffff800000800da9:	ff ff ff 
ffff800000800dac:	48 01 d8             	add    rax,rbx
ffff800000800daf:	ff d0                	call   rax
ffff800000800db1:	e9 cb 01 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:228
        case 17:return reg_vol(a,b,c);
ffff800000800db6:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000800db9:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff800000800dbc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800dbf:	89 ce                	mov    esi,ecx
ffff800000800dc1:	89 c7                	mov    edi,eax
ffff800000800dc3:	49 89 df             	mov    r15,rbx
ffff800000800dc6:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800dcb:	48 b9 50 0d fe ff ff 	movabs rcx,0xfffffffffffe0d50
ffff800000800dd2:	ff ff ff 
ffff800000800dd5:	48 01 d9             	add    rcx,rbx
ffff800000800dd8:	ff d1                	call   rcx
ffff800000800dda:	e9 a2 01 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:229
        case 18:return free_vol(a);
ffff800000800ddf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800de2:	89 c7                	mov    edi,eax
ffff800000800de4:	49 89 df             	mov    r15,rbx
ffff800000800de7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800dec:	48 ba 15 0d fe ff ff 	movabs rdx,0xfffffffffffe0d15
ffff800000800df3:	ff ff ff 
ffff800000800df6:	48 01 da             	add    rdx,rbx
ffff800000800df9:	ff d2                	call   rdx
ffff800000800dfb:	e9 81 01 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:230
        case 19:return execute(a, NULL);
ffff800000800e00:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e03:	48 98                	cdqe   
ffff800000800e05:	be 00 00 00 00       	mov    esi,0x0
ffff800000800e0a:	48 89 c7             	mov    rdi,rax
ffff800000800e0d:	49 89 df             	mov    r15,rbx
ffff800000800e10:	48 b8 dc 7a fe ff ff 	movabs rax,0xfffffffffffe7adc
ffff800000800e17:	ff ff ff 
ffff800000800e1a:	48 01 d8             	add    rax,rbx
ffff800000800e1d:	ff d0                	call   rax
ffff800000800e1f:	e9 5d 01 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:231
        case SYSCALL_EXIT:return sys_exit(a);
ffff800000800e24:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e27:	89 c7                	mov    edi,eax
ffff800000800e29:	49 89 df             	mov    r15,rbx
ffff800000800e2c:	48 b8 61 56 fe ff ff 	movabs rax,0xfffffffffffe5661
ffff800000800e33:	ff ff ff 
ffff800000800e36:	48 01 d8             	add    rax,rbx
ffff800000800e39:	ff d0                	call   rax
ffff800000800e3b:	e9 41 01 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:232
        case SYSCALL_CALL:return exec_call(a);
ffff800000800e40:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e43:	48 98                	cdqe   
ffff800000800e45:	48 89 c7             	mov    rdi,rax
ffff800000800e48:	49 89 df             	mov    r15,rbx
ffff800000800e4b:	48 b8 b3 7e fe ff ff 	movabs rax,0xfffffffffffe7eb3
ffff800000800e52:	ff ff ff 
ffff800000800e55:	48 01 d8             	add    rax,rbx
ffff800000800e58:	ff d0                	call   rax
ffff800000800e5a:	e9 22 01 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        case SYSCALL_MKFIFO:return sys_mkfifo(a);
ffff800000800e5f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e62:	89 c7                	mov    edi,eax
ffff800000800e64:	49 89 df             	mov    r15,rbx
ffff800000800e67:	48 b8 d4 0a fe ff ff 	movabs rax,0xfffffffffffe0ad4
ffff800000800e6e:	ff ff ff 
ffff800000800e71:	48 01 d8             	add    rax,rbx
ffff800000800e74:	ff d0                	call   rax
ffff800000800e76:	e9 06 01 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_MALLOC:return sys_malloc(a);
ffff800000800e7b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e7e:	89 c7                	mov    edi,eax
ffff800000800e80:	49 89 df             	mov    r15,rbx
ffff800000800e83:	48 b8 bf 59 fe ff ff 	movabs rax,0xfffffffffffe59bf
ffff800000800e8a:	ff ff ff 
ffff800000800e8d:	48 01 d8             	add    rax,rbx
ffff800000800e90:	ff d0                	call   rax
ffff800000800e92:	e9 ea 00 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:235
        case SYSCALL_FREE:return sys_free(a);
ffff800000800e97:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e9a:	89 c7                	mov    edi,eax
ffff800000800e9c:	49 89 df             	mov    r15,rbx
ffff800000800e9f:	48 b8 bc 5b fe ff ff 	movabs rax,0xfffffffffffe5bbc
ffff800000800ea6:	ff ff ff 
ffff800000800ea9:	48 01 d8             	add    rax,rbx
ffff800000800eac:	ff d0                	call   rax
ffff800000800eae:	e9 ce 00 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:236
        case SYSCALL_KB_READC:return sys_analyse_key();
ffff800000800eb3:	49 89 df             	mov    r15,rbx
ffff800000800eb6:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800ebb:	48 ba e4 bd fe ff ff 	movabs rdx,0xfffffffffffebde4
ffff800000800ec2:	ff ff ff 
ffff800000800ec5:	48 01 da             	add    rdx,rbx
ffff800000800ec8:	ff d2                	call   rdx
ffff800000800eca:	0f be c0             	movsx  eax,al
ffff800000800ecd:	e9 af 00 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        case SYSCALL_FIND_DEV:return sys_find_dev(a);
ffff800000800ed2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800ed5:	48 98                	cdqe   
ffff800000800ed7:	48 89 c7             	mov    rdi,rax
ffff800000800eda:	49 89 df             	mov    r15,rbx
ffff800000800edd:	48 b8 42 30 fe ff ff 	movabs rax,0xfffffffffffe3042
ffff800000800ee4:	ff ff ff 
ffff800000800ee7:	48 01 d8             	add    rax,rbx
ffff800000800eea:	ff d0                	call   rax
ffff800000800eec:	e9 90 00 00 00       	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:238
        case SYSCALL_FORK:return sys_fork();
ffff800000800ef1:	49 89 df             	mov    r15,rbx
ffff800000800ef4:	48 b8 e3 5f fe ff ff 	movabs rax,0xfffffffffffe5fe3
ffff800000800efb:	ff ff ff 
ffff800000800efe:	48 01 d8             	add    rax,rbx
ffff800000800f01:	ff d0                	call   rax
ffff800000800f03:	eb 7c                	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:239
        case SYSCALL_EXECVE:return sys_execve(a, 0, b);
ffff800000800f05:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800f08:	48 98                	cdqe   
ffff800000800f0a:	48 89 c2             	mov    rdx,rax
ffff800000800f0d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800f10:	48 98                	cdqe   
ffff800000800f12:	be 00 00 00 00       	mov    esi,0x0
ffff800000800f17:	48 89 c7             	mov    rdi,rax
ffff800000800f1a:	49 89 df             	mov    r15,rbx
ffff800000800f1d:	48 b8 41 7c fe ff ff 	movabs rax,0xfffffffffffe7c41
ffff800000800f24:	ff ff ff 
ffff800000800f27:	48 01 d8             	add    rax,rbx
ffff800000800f2a:	ff d0                	call   rax
ffff800000800f2c:	eb 53                	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
ffff800000800f2e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000800f31:	48 98                	cdqe   
ffff800000800f33:	48 89 c2             	mov    rdx,rax
ffff800000800f36:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800f39:	48 98                	cdqe   
ffff800000800f3b:	48 89 c1             	mov    rcx,rax
ffff800000800f3e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800f41:	89 c6                	mov    esi,eax
ffff800000800f43:	48 89 cf             	mov    rdi,rcx
ffff800000800f46:	49 89 df             	mov    r15,rbx
ffff800000800f49:	48 b8 20 31 fe ff ff 	movabs rax,0xfffffffffffe3120
ffff800000800f50:	ff ff ff 
ffff800000800f53:	48 01 d8             	add    rax,rbx
ffff800000800f56:	ff d0                	call   rax
ffff800000800f58:	eb 27                	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:241
        case SYSCALL_WAIT:return sys_wait(a,b,c);
ffff800000800f5a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800f5d:	48 98                	cdqe   
ffff800000800f5f:	48 89 c1             	mov    rcx,rax
ffff800000800f62:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000800f65:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800f68:	48 89 ce             	mov    rsi,rcx
ffff800000800f6b:	89 c7                	mov    edi,eax
ffff800000800f6d:	49 89 df             	mov    r15,rbx
ffff800000800f70:	48 b8 13 ae fe ff ff 	movabs rax,0xfffffffffffeae13
ffff800000800f77:	ff ff ff 
ffff800000800f7a:	48 01 d8             	add    rax,rbx
ffff800000800f7d:	ff d0                	call   rax
ffff800000800f7f:	eb 00                	jmp    ffff800000800f81 <syscall+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:247
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
ffff800000800f81:	48 83 c4 30          	add    rsp,0x30
ffff800000800f85:	5b                   	pop    rbx
ffff800000800f86:	41 5f                	pop    r15
ffff800000800f88:	5d                   	pop    rbp
ffff800000800f89:	c3                   	ret    

ffff800000800f8a <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:249
void wrmsr(unsigned long address,unsigned long value)
{
ffff800000800f8a:	f3 0f 1e fa          	endbr64 
ffff800000800f8e:	55                   	push   rbp
ffff800000800f8f:	48 89 e5             	mov    rbp,rsp
ffff800000800f92:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800f92 <wrmsr+0x8>
ffff800000800f99:	49 bb 96 19 02 00 00 	movabs r11,0x21996
ffff800000800fa0:	00 00 00 
ffff800000800fa3:	4c 01 d8             	add    rax,r11
ffff800000800fa6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000800faa:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
ffff800000800fae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800fb2:	48 c1 e8 20          	shr    rax,0x20
ffff800000800fb6:	48 89 c2             	mov    rdx,rax
ffff800000800fb9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800fbd:	89 c0                	mov    eax,eax
ffff800000800fbf:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000800fc3:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:251
ffff800000800fc5:	90                   	nop
ffff800000800fc6:	5d                   	pop    rbp
ffff800000800fc7:	c3                   	ret    

ffff800000800fc8 <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:24
#include "exe.h"
#include "ramfs.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
ffff800000800fc8:	f3 0f 1e fa          	endbr64 
ffff800000800fcc:	55                   	push   rbp
ffff800000800fcd:	48 89 e5             	mov    rbp,rsp
ffff800000800fd0:	41 57                	push   r15
ffff800000800fd2:	41 54                	push   r12
ffff800000800fd4:	53                   	push   rbx
ffff800000800fd5:	48 81 ec e8 00 00 00 	sub    rsp,0xe8
ffff800000800fdc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800fdc <main+0x14>
ffff800000800fe3:	49 bb 4c 19 02 00 00 	movabs r11,0x2194c
ffff800000800fea:	00 00 00 
ffff800000800fed:	4c 01 db             	add    rbx,r11
ffff800000800ff0:	89 bd 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],edi
ffff800000800ff6:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26

    struct multiboot_header* mbi=0ul;
ffff800000800ffd:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff800000801004:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    mbi=(struct multiboot_header*)addr;
ffff800000801005:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000080100c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:28
    init_logging();
ffff800000801010:	49 89 df             	mov    r15,rbx
ffff800000801013:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801018:	48 ba c7 ec fd ff ff 	movabs rdx,0xfffffffffffdecc7
ffff80000080101f:	ff ff ff 
ffff800000801022:	48 01 da             	add    rdx,rbx
ffff800000801025:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
ffff800000801027:	bf f8 03 00 00       	mov    edi,0x3f8
ffff80000080102c:	49 89 df             	mov    r15,rbx
ffff80000080102f:	48 b8 80 0a ff ff ff 	movabs rax,0xffffffffffff0a80
ffff800000801036:	ff ff ff 
ffff800000801039:	48 01 d8             	add    rax,rbx
ffff80000080103c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:39
    comprintf("\rgamessis os loaded.\r\n");
ffff80000080103e:	48 b8 00 d3 ff ff ff 	movabs rax,0xffffffffffffd300
ffff800000801045:	ff ff ff 
ffff800000801048:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080104c:	48 89 c7             	mov    rdi,rax
ffff80000080104f:	49 89 df             	mov    r15,rbx
ffff800000801052:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801057:	48 ba ac 0c ff ff ff 	movabs rdx,0xffffffffffff0cac
ffff80000080105e:	ff ff ff 
ffff800000801061:	48 01 da             	add    rdx,rbx
ffff800000801064:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:41
	unsigned size;
    size = *(unsigned long*)addr;
ffff800000801066:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000080106d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801070:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
ffff800000801073:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000080107a:	48 83 c0 08          	add    rax,0x8
ffff80000080107e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff800000801082:	e9 93 02 00 00       	jmp    ffff80000080131a <main+0x352>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
		switch (tag->type)
ffff800000801087:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080108b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080108d:	83 f8 08             	cmp    eax,0x8
ffff800000801090:	0f 87 71 02 00 00    	ja     ffff800000801307 <main+0x33f>
ffff800000801096:	89 c0                	mov    eax,eax
ffff800000801098:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080109f:	00 
ffff8000008010a0:	48 8d 05 e1 eb 01 00 	lea    rax,[rip+0x1ebe1]        # ffff80000081fc88 <.LC4+0x11>
ffff8000008010a7:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff8000008010ab:	48 8d 15 d6 eb 01 00 	lea    rdx,[rip+0x1ebd6]        # ffff80000081fc88 <.LC4+0x11>
ffff8000008010b2:	48 01 d0             	add    rax,rdx
ffff8000008010b5:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:66
			break;
		case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
			//printf("mem_lower = %uKB, mem_upper = %uKB\n",
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_lower,
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_upper);
			set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
ffff8000008010b8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008010bc:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008010bf:	89 c7                	mov    edi,eax
ffff8000008010c1:	49 89 df             	mov    r15,rbx
ffff8000008010c4:	48 b8 09 f6 fd ff ff 	movabs rax,0xfffffffffffdf609
ffff8000008010cb:	ff ff ff 
ffff8000008010ce:	48 01 d8             	add    rax,rbx
ffff8000008010d1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:67
			break;
ffff8000008010d3:	e9 2f 02 00 00       	jmp    ffff800000801307 <main+0x33f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80

			break;
		case MULTIBOOT_TAG_TYPE_MMAP:
		{
			//printf("mmap\n");
            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
ffff8000008010d8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008010dc:	48 83 c0 10          	add    rax,0x10
ffff8000008010e0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff8000008010e4:	eb 44                	jmp    ffff80000080112a <main+0x162>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:84
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
ffff8000008010e6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008010ea:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff8000008010ed:	89 c2                	mov    edx,eax
ffff8000008010ef:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008010f3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff8000008010f7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008010fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008010fe:	48 89 ce             	mov    rsi,rcx
ffff800000801101:	48 89 c7             	mov    rdi,rax
ffff800000801104:	49 89 df             	mov    r15,rbx
ffff800000801107:	48 b8 3e f6 fd ff ff 	movabs rax,0xfffffffffffdf63e
ffff80000080110e:	ff ff ff 
ffff800000801111:	48 01 d8             	add    rax,rbx
ffff800000801114:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
ffff800000801116:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080111a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080111d:	89 c2                	mov    edx,eax
ffff80000080111f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000801123:	48 01 d0             	add    rax,rdx
ffff800000801126:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:81
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
ffff80000080112a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080112e:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000801131:	89 c2                	mov    edx,eax
ffff800000801133:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801137:	48 01 d0             	add    rax,rdx
ffff80000080113a:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
ffff80000080113e:	72 a6                	jb     ffff8000008010e6 <main+0x11e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:88
            }

		}
		break;
ffff800000801140:	e9 c2 01 00 00       	jmp    ffff800000801307 <main+0x33f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93
		case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
		{
			multiboot_uint32_t color;
			unsigned i;
			struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
ffff800000801145:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801149:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:94
			void *fb = (void *) FRAMEBUFFER_ADDR;
ffff80000080114d:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff800000801154:	80 ff ff 
ffff800000801157:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:95
			set_framebuffer(*tagfb);
ffff80000080115b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080115f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801163:	ff 70 20             	push   QWORD PTR [rax+0x20]
ffff800000801166:	ff 70 18             	push   QWORD PTR [rax+0x18]
ffff800000801169:	ff 70 10             	push   QWORD PTR [rax+0x10]
ffff80000080116c:	ff 70 08             	push   QWORD PTR [rax+0x8]
ffff80000080116f:	ff 30                	push   QWORD PTR [rax]
ffff800000801171:	49 89 df             	mov    r15,rbx
ffff800000801174:	48 b8 e1 90 fe ff ff 	movabs rax,0xfffffffffffe90e1
ffff80000080117b:	ff ff ff 
ffff80000080117e:	48 01 d8             	add    rax,rbx
ffff800000801181:	ff d0                	call   rax
ffff800000801183:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97

			switch (tagfb->common.framebuffer_type)
ffff800000801187:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080118b:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
ffff80000080118f:	0f b6 c0             	movzx  eax,al
ffff800000801192:	83 f8 02             	cmp    eax,0x2
ffff800000801195:	0f 84 5a 01 00 00    	je     ffff8000008012f5 <main+0x32d>
ffff80000080119b:	83 f8 02             	cmp    eax,0x2
ffff80000080119e:	0f 8f 5a 01 00 00    	jg     ffff8000008012fe <main+0x336>
ffff8000008011a4:	85 c0                	test   eax,eax
ffff8000008011a6:	74 0e                	je     ffff8000008011b6 <main+0x1ee>
ffff8000008011a8:	83 f8 01             	cmp    eax,0x1
ffff8000008011ab:	0f 84 15 01 00 00    	je     ffff8000008012c6 <main+0x2fe>
ffff8000008011b1:	e9 48 01 00 00       	jmp    ffff8000008012fe <main+0x336>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:104
			case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
			{
				unsigned best_distance, distance;
				struct multiboot_color *palette;

				palette = tagfb->framebuffer_palette;
ffff8000008011b6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008011ba:	48 83 c0 22          	add    rax,0x22
ffff8000008011be:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:106

				color = 0;
ffff8000008011c2:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:107
				best_distance = 4 * 256 * 256;
ffff8000008011c9:	c7 45 c8 00 00 04 00 	mov    DWORD PTR [rbp-0x38],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109

				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff8000008011d0:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008011d7:	e9 d4 00 00 00       	jmp    ffff8000008012b0 <main+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:111
				{
					distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
ffff8000008011dc:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008011df:	48 89 d0             	mov    rax,rdx
ffff8000008011e2:	48 01 c0             	add    rax,rax
ffff8000008011e5:	48 01 c2             	add    rdx,rax
ffff8000008011e8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008011ec:	48 01 d0             	add    rax,rdx
ffff8000008011ef:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008011f3:	0f b6 c0             	movzx  eax,al
ffff8000008011f6:	ba ff 00 00 00       	mov    edx,0xff
ffff8000008011fb:	89 d1                	mov    ecx,edx
ffff8000008011fd:	29 c1                	sub    ecx,eax
ffff8000008011ff:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000801202:	48 89 d0             	mov    rax,rdx
ffff800000801205:	48 01 c0             	add    rax,rax
ffff800000801208:	48 01 c2             	add    rdx,rax
ffff80000080120b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080120f:	48 01 d0             	add    rax,rdx
ffff800000801212:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff800000801216:	0f b6 d0             	movzx  edx,al
ffff800000801219:	b8 ff 00 00 00       	mov    eax,0xff
ffff80000080121e:	29 d0                	sub    eax,edx
ffff800000801220:	89 ce                	mov    esi,ecx
ffff800000801222:	0f af f0             	imul   esi,eax
ffff800000801225:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000801228:	48 89 d0             	mov    rax,rdx
ffff80000080122b:	48 01 c0             	add    rax,rax
ffff80000080122e:	48 01 c2             	add    rdx,rax
ffff800000801231:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000801235:	48 01 d0             	add    rax,rdx
ffff800000801238:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080123b:	0f b6 c8             	movzx  ecx,al
ffff80000080123e:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000801241:	48 89 d0             	mov    rax,rdx
ffff800000801244:	48 01 c0             	add    rax,rax
ffff800000801247:	48 01 c2             	add    rdx,rax
ffff80000080124a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080124e:	48 01 d0             	add    rax,rdx
ffff800000801251:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801254:	0f b6 c0             	movzx  eax,al
ffff800000801257:	0f af c1             	imul   eax,ecx
ffff80000080125a:	01 c6                	add    esi,eax
ffff80000080125c:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080125f:	48 89 d0             	mov    rax,rdx
ffff800000801262:	48 01 c0             	add    rax,rax
ffff800000801265:	48 01 c2             	add    rdx,rax
ffff800000801268:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080126c:	48 01 d0             	add    rax,rdx
ffff80000080126f:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801273:	0f b6 c8             	movzx  ecx,al
ffff800000801276:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000801279:	48 89 d0             	mov    rax,rdx
ffff80000080127c:	48 01 c0             	add    rax,rax
ffff80000080127f:	48 01 c2             	add    rdx,rax
ffff800000801282:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000801286:	48 01 d0             	add    rax,rdx
ffff800000801289:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff80000080128d:	0f b6 c0             	movzx  eax,al
ffff800000801290:	0f af c1             	imul   eax,ecx
ffff800000801293:	01 f0                	add    eax,esi
ffff800000801295:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:112
					if (distance < best_distance)
ffff800000801298:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080129b:	3b 45 c8             	cmp    eax,DWORD PTR [rbp-0x38]
ffff80000080129e:	73 0c                	jae    ffff8000008012ac <main+0x2e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:114
					{
						color = i;
ffff8000008012a0:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008012a3:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:115
						best_distance = distance;
ffff8000008012a6:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff8000008012a9:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 2)
				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff8000008012ac:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 1)
ffff8000008012b0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008012b4:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
ffff8000008012b8:	0f b7 c0             	movzx  eax,ax
ffff8000008012bb:	39 45 cc             	cmp    DWORD PTR [rbp-0x34],eax
ffff8000008012be:	0f 82 18 ff ff ff    	jb     ffff8000008011dc <main+0x214>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:119
					}
				}
			}
			break;
ffff8000008012c4:	eb 40                	jmp    ffff800000801306 <main+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:122

			case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
				color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
ffff8000008012c6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008012ca:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
ffff8000008012ce:	0f b6 c0             	movzx  eax,al
ffff8000008012d1:	ba 01 00 00 00       	mov    edx,0x1
ffff8000008012d6:	89 c1                	mov    ecx,eax
ffff8000008012d8:	d3 e2                	shl    edx,cl
ffff8000008012da:	89 d0                	mov    eax,edx
ffff8000008012dc:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008012df:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008012e3:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffff8000008012e7:	0f b6 c0             	movzx  eax,al
ffff8000008012ea:	89 c1                	mov    ecx,eax
ffff8000008012ec:	d3 e2                	shl    edx,cl
ffff8000008012ee:	89 d0                	mov    eax,edx
ffff8000008012f0:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:123
				break;
ffff8000008012f3:	eb 11                	jmp    ffff800000801306 <main+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:126

			case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
				color = '\\' | 0x0100;
ffff8000008012f5:	c7 45 a4 5c 01 00 00 	mov    DWORD PTR [rbp-0x5c],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:127
				break;
ffff8000008012fc:	eb 08                	jmp    ffff800000801306 <main+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:130

			default:
				color = 0xffffffff;
ffff8000008012fe:	c7 45 a4 ff ff ff ff 	mov    DWORD PTR [rbp-0x5c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:131
				break;
ffff800000801305:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:134 (discriminator 1)
			}

			break;
ffff800000801306:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:45
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
ffff800000801307:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080130b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080130e:	83 c0 07             	add    eax,0x7
ffff800000801311:	89 c0                	mov    eax,eax
ffff800000801313:	83 e0 f8             	and    eax,0xfffffff8
ffff800000801316:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag->type != MULTIBOOT_TAG_TYPE_END;
ffff80000080131a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080131e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801320:	85 c0                	test   eax,eax
ffff800000801322:	0f 85 5f fd ff ff    	jne    ffff800000801087 <main+0xbf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:138
		}
		}
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
ffff800000801328:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080132c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080132f:	83 c0 07             	add    eax,0x7
ffff800000801332:	89 c0                	mov    eax,eax
ffff800000801334:	83 e0 f8             	and    eax,0xfffffff8
ffff800000801337:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:139
    init_memory();
ffff80000080133b:	49 89 df             	mov    r15,rbx
ffff80000080133e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801343:	48 ba 8e fd fd ff ff 	movabs rdx,0xfffffffffffdfd8e
ffff80000080134a:	ff ff ff 
ffff80000080134d:	48 01 da             	add    rdx,rbx
ffff800000801350:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:140
    init_framebuffer();
ffff800000801352:	49 89 df             	mov    r15,rbx
ffff800000801355:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080135a:	48 ba ed 8d fe ff ff 	movabs rdx,0xfffffffffffe8ded
ffff800000801361:	ff ff ff 
ffff800000801364:	48 01 da             	add    rdx,rbx
ffff800000801367:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:142
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
ffff800000801369:	b8 75 04 00 00       	mov    eax,0x475
ffff80000080136e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801371:	88 45 bb             	mov    BYTE PTR [rbp-0x45],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:144
	//printf("disk count:%d\n",disk_count);
    init_font();
ffff800000801374:	49 89 df             	mov    r15,rbx
ffff800000801377:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080137c:	48 ba 2c 8f fe ff ff 	movabs rdx,0xfffffffffffe8f2c
ffff800000801383:	ff ff ff 
ffff800000801386:	48 01 da             	add    rdx,rbx
ffff800000801389:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:147
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
ffff80000080138b:	48 b8 17 d3 ff ff ff 	movabs rax,0xffffffffffffd317
ffff800000801392:	ff ff ff 
ffff800000801395:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801399:	48 89 c7             	mov    rdi,rax
ffff80000080139c:	49 89 df             	mov    r15,rbx
ffff80000080139f:	48 b8 48 96 fe ff ff 	movabs rax,0xfffffffffffe9648
ffff8000008013a6:	ff ff ff 
ffff8000008013a9:	48 01 d8             	add    rax,rbx
ffff8000008013ac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:148
    init_int();
ffff8000008013ae:	49 89 df             	mov    r15,rbx
ffff8000008013b1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008013b6:	48 ba d8 d6 fd ff ff 	movabs rdx,0xfffffffffffdd6d8
ffff8000008013bd:	ff ff ff 
ffff8000008013c0:	48 01 da             	add    rdx,rbx
ffff8000008013c3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:149
    print("int loaded.\n");
ffff8000008013c5:	48 b8 34 d3 ff ff ff 	movabs rax,0xffffffffffffd334
ffff8000008013cc:	ff ff ff 
ffff8000008013cf:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008013d3:	48 89 c7             	mov    rdi,rax
ffff8000008013d6:	49 89 df             	mov    r15,rbx
ffff8000008013d9:	48 b8 48 96 fe ff ff 	movabs rax,0xfffffffffffe9648
ffff8000008013e0:	ff ff ff 
ffff8000008013e3:	48 01 d8             	add    rax,rbx
ffff8000008013e6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:151
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
ffff8000008013e8:	49 89 df             	mov    r15,rbx
ffff8000008013eb:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008013f0:	48 ba d2 f5 fd ff ff 	movabs rdx,0xfffffffffffdf5d2
ffff8000008013f7:	ff ff ff 
ffff8000008013fa:	48 01 da             	add    rdx,rbx
ffff8000008013fd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:152
 	init_gdt();
ffff8000008013ff:	49 89 df             	mov    r15,rbx
ffff800000801402:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801407:	48 ba 95 77 fe ff ff 	movabs rdx,0xfffffffffffe7795
ffff80000080140e:	ff ff ff 
ffff800000801411:	48 01 da             	add    rdx,rbx
ffff800000801414:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:153
    mount_rootfs();
ffff800000801416:	49 89 df             	mov    r15,rbx
ffff800000801419:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080141e:	48 ba e9 a0 fe ff ff 	movabs rdx,0xfffffffffffea0e9
ffff800000801425:	ff ff ff 
ffff800000801428:	48 01 da             	add    rdx,rbx
ffff80000080142b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:154
    init_devman();
ffff80000080142d:	49 89 df             	mov    r15,rbx
ffff800000801430:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801435:	48 ba 1d 1f fe ff ff 	movabs rdx,0xfffffffffffe1f1d
ffff80000080143c:	ff ff ff 
ffff80000080143f:	48 01 da             	add    rdx,rbx
ffff800000801442:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:155
    init_proc();
ffff800000801444:	49 89 df             	mov    r15,rbx
ffff800000801447:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080144c:	48 ba 81 3e fe ff ff 	movabs rdx,0xfffffffffffe3e81
ffff800000801453:	ff ff ff 
ffff800000801456:	48 01 da             	add    rdx,rbx
ffff800000801459:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:156
    init_ramfs();
ffff80000080145b:	49 89 df             	mov    r15,rbx
ffff80000080145e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801463:	48 ba 2e b4 fe ff ff 	movabs rdx,0xfffffffffffeb42e
ffff80000080146a:	ff ff ff 
ffff80000080146d:	48 01 da             	add    rdx,rbx
ffff800000801470:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:161
//    DISK1_FAT32_FS_init();

    //自带驱动
    //init_tty();
    init_kb();
ffff800000801472:	49 89 df             	mov    r15,rbx
ffff800000801475:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080147a:	48 ba 35 bb fe ff ff 	movabs rdx,0xfffffffffffebb35
ffff800000801481:	ff ff ff 
ffff800000801484:	48 01 da             	add    rdx,rbx
ffff800000801487:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:163
//    init_disk();
    sti();
ffff800000801489:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:164
    manage_proc_lock=0;
ffff80000080148a:	48 b8 08 fd ff ff ff 	movabs rax,0xfffffffffffffd08
ffff800000801491:	ff ff ff 
ffff800000801494:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000801498:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:167


    move_to_user_mode();
ffff80000080149e:	49 89 df             	mov    r15,rbx
ffff8000008014a1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008014a6:	48 ba e4 1a ff ff ff 	movabs rdx,0xffffffffffff1ae4
ffff8000008014ad:	ff ff ff 
ffff8000008014b0:	48 01 da             	add    rdx,rbx
ffff8000008014b3:	ff d2                	call   rdx
ffff8000008014b5:	48 c7 45 88 1b 00 00 	mov    QWORD PTR [rbp-0x78],0x1b
ffff8000008014bc:	00 
ffff8000008014bd:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
ffff8000008014c4:	00 
ffff8000008014c5:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
ffff8000008014cc:	00 00 00 00 
ffff8000008014d0:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
ffff8000008014d7:	00 00 00 00 
ffff8000008014db:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
ffff8000008014e2:	00 00 00 00 
ffff8000008014e6:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x0
ffff8000008014ed:	00 00 00 00 
ffff8000008014f1:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
ffff8000008014f8:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:191
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline int do_syscall(long func,long a1,long a2,long a3,long a4,long a5,long a6){
        asm volatile(".byte 0x48\n"
ffff8000008014fc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000801500:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
ffff800000801504:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
ffff80000080150b:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff800000801512:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
ffff800000801519:	4c 8b 85 60 ff ff ff 	mov    r8,QWORD PTR [rbp-0xa0]
ffff800000801520:	4c 8b 8d 58 ff ff ff 	mov    r9,QWORD PTR [rbp-0xa8]
ffff800000801527:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:193
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
}
ffff80000080152a:	90                   	nop
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:168
    if(do_syscall(SYSCALL_FORK,0,0,0,0,0,0)==0){
ffff80000080152b:	45 85 e4             	test   r12d,r12d
ffff80000080152e:	0f 85 b9 00 00 00    	jne    ffff8000008015ed <main+0x625>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:169
        char *argv[]={"/mnt/test.exe","gamessis os"};
ffff800000801534:	48 b8 41 d3 ff ff ff 	movabs rax,0xffffffffffffd341
ffff80000080153b:	ff ff ff 
ffff80000080153e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801542:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff800000801549:	48 b8 4f d3 ff ff ff 	movabs rax,0xffffffffffffd34f
ffff800000801550:	ff ff ff 
ffff800000801553:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801557:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:170
        do_syscall(SYSCALL_EXECVE, (long) "/mnt/test.exe", 2, (long) &argv[0], 0, 0, 0);
ffff80000080155e:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff800000801565:	48 ba 41 d3 ff ff ff 	movabs rdx,0xffffffffffffd341
ffff80000080156c:	ff ff ff 
ffff80000080156f:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000801573:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x1c
ffff80000080157a:	1c 00 00 00 
ffff80000080157e:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
ffff800000801585:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x2
ffff80000080158c:	02 00 00 00 
ffff800000801590:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
ffff800000801597:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
ffff80000080159e:	00 00 00 00 
ffff8000008015a2:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff8000008015a9:	00 00 00 00 
ffff8000008015ad:	48 c7 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],0x0
ffff8000008015b4:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:191
        asm volatile(".byte 0x48\n"
ffff8000008015b8:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff8000008015bf:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
ffff8000008015c6:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
ffff8000008015cd:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
ffff8000008015d4:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
ffff8000008015db:	4c 8b 85 28 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd8]
ffff8000008015e2:	4c 8b 8d 20 ff ff ff 	mov    r9,QWORD PTR [rbp-0xe0]
ffff8000008015e9:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:193
}
ffff8000008015ec:	90                   	nop
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:181 (discriminator 3)
//    init_fat16();

//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
ffff8000008015ed:	eb fe                	jmp    ffff8000008015ed <main+0x625>

ffff8000008015ef <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
ffff8000008015ef:	f3 0f 1e fa          	endbr64 
ffff8000008015f3:	55                   	push   rbp
ffff8000008015f4:	48 89 e5             	mov    rbp,rsp
ffff8000008015f7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008015f7 <init_logging+0x8>
ffff8000008015fe:	49 bb 31 13 02 00 00 	movabs r11,0x21331
ffff800000801605:	00 00 00 
ffff800000801608:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
ffff80000080160b:	48 ba d8 d6 bd ff ff 	movabs rdx,0xffffffffffbdd6d8
ffff800000801612:	ff ff ff 
ffff800000801615:	48 c7 04 10 00 80 0b 	mov    QWORD PTR [rax+rdx*1],0xb8000
ffff80000080161c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
ffff80000080161d:	48 ba e0 d6 bd ff ff 	movabs rdx,0xffffffffffbdd6e0
ffff800000801624:	ff ff ff 
ffff800000801627:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
ffff80000080162e:	48 ba e4 d6 bd ff ff 	movabs rdx,0xffffffffffbdd6e4
ffff800000801635:	ff ff ff 
ffff800000801638:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
ffff80000080163f:	90                   	nop
ffff800000801640:	5d                   	pop    rbp
ffff800000801641:	c3                   	ret    

ffff800000801642 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
ffff800000801642:	f3 0f 1e fa          	endbr64 
ffff800000801646:	55                   	push   rbp
ffff800000801647:	48 89 e5             	mov    rbp,rsp
ffff80000080164a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080164a <itoa+0x8>
ffff800000801651:	49 bb de 12 02 00 00 	movabs r11,0x212de
ffff800000801658:	00 00 00 
ffff80000080165b:	4c 01 d8             	add    rax,r11
ffff80000080165e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801662:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff800000801665:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
ffff800000801668:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080166c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
ffff800000801670:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000801673:	48 98                	cdqe   
ffff800000801675:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
ffff800000801679:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
ffff800000801680:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
ffff800000801684:	75 27                	jne    ffff8000008016ad <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
ffff800000801686:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
ffff80000080168a:	79 21                	jns    ffff8000008016ad <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
ffff80000080168c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801690:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000801694:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff800000801698:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
ffff80000080169b:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
ffff8000008016a0:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008016a3:	f7 d8                	neg    eax
ffff8000008016a5:	48 98                	cdqe   
ffff8000008016a7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008016ab:	eb 0d                	jmp    ffff8000008016ba <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
ffff8000008016ad:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
ffff8000008016b1:	75 07                	jne    ffff8000008016ba <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
ffff8000008016b3:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
ffff8000008016ba:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008016bd:	48 63 c8             	movsxd rcx,eax
ffff8000008016c0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008016c4:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008016c9:	48 f7 f1             	div    rcx
ffff8000008016cc:	48 89 d0             	mov    rax,rdx
ffff8000008016cf:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffff8000008016d2:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
ffff8000008016d6:	7f 0a                	jg     ffff8000008016e2 <itoa+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
ffff8000008016d8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008016db:	83 c0 30             	add    eax,0x30
ffff8000008016de:	89 c1                	mov    ecx,eax
ffff8000008016e0:	eb 08                	jmp    ffff8000008016ea <itoa+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
ffff8000008016e2:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008016e5:	83 c0 57             	add    eax,0x57
ffff8000008016e8:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
ffff8000008016ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008016ee:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008016f2:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008016f6:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
ffff8000008016f8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008016fb:	48 63 f0             	movsxd rsi,eax
ffff8000008016fe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801702:	ba 00 00 00 00       	mov    edx,0x0
ffff800000801707:	48 f7 f6             	div    rsi
ffff80000080170a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff80000080170e:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000801713:	75 a5                	jne    ffff8000008016ba <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
ffff800000801715:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801719:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
ffff80000080171c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801720:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
ffff800000801724:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801728:	48 83 e8 01          	sub    rax,0x1
ffff80000080172c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801730:	eb 2b                	jmp    ffff80000080175d <itoa+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
ffff800000801732:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801736:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801739:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
ffff80000080173c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801740:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000801743:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801747:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
ffff800000801749:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080174d:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
ffff800000801751:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
ffff800000801753:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
ffff800000801758:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff80000080175d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801761:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000801765:	72 cb                	jb     ffff800000801732 <itoa+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
ffff800000801767:	90                   	nop
ffff800000801768:	90                   	nop
ffff800000801769:	5d                   	pop    rbp
ffff80000080176a:	c3                   	ret    

ffff80000080176b <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
ffff80000080176b:	f3 0f 1e fa          	endbr64 
ffff80000080176f:	55                   	push   rbp
ffff800000801770:	48 89 e5             	mov    rbp,rsp
ffff800000801773:	41 57                	push   r15
ffff800000801775:	48 83 ec 28          	sub    rsp,0x28
ffff800000801779:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801779 <putchar+0xe>
ffff800000801780:	49 bb af 11 02 00 00 	movabs r11,0x211af
ffff800000801787:	00 00 00 
ffff80000080178a:	4c 01 d8             	add    rax,r11
ffff80000080178d:	89 fa                	mov    edx,edi
ffff80000080178f:	88 55 dc             	mov    BYTE PTR [rbp-0x24],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
ffff800000801792:	0f b6 55 dc          	movzx  edx,BYTE PTR [rbp-0x24]
ffff800000801796:	88 55 ee             	mov    BYTE PTR [rbp-0x12],dl
ffff800000801799:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
ffff80000080179d:	48 8d 55 ee          	lea    rdx,[rbp-0x12]
ffff8000008017a1:	48 89 d7             	mov    rdi,rdx
ffff8000008017a4:	49 89 c7             	mov    r15,rax
ffff8000008017a7:	48 ba 48 96 fe ff ff 	movabs rdx,0xfffffffffffe9648
ffff8000008017ae:	ff ff ff 
ffff8000008017b1:	48 01 c2             	add    rdx,rax
ffff8000008017b4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
ffff8000008017b6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008017ba:	c9                   	leave  
ffff8000008017bb:	c3                   	ret    

ffff8000008017bc <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
ffff8000008017bc:	f3 0f 1e fa          	endbr64 
ffff8000008017c0:	55                   	push   rbp
ffff8000008017c1:	48 89 e5             	mov    rbp,rsp
ffff8000008017c4:	41 57                	push   r15
ffff8000008017c6:	53                   	push   rbx
ffff8000008017c7:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff8000008017ce:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008017ce <printf+0x12>
ffff8000008017d5:	49 bb 5a 11 02 00 00 	movabs r11,0x2115a
ffff8000008017dc:	00 00 00 
ffff8000008017df:	4c 01 db             	add    rbx,r11
ffff8000008017e2:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff8000008017e9:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff8000008017f0:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff8000008017f7:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff8000008017fe:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff800000801805:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff80000080180c:	84 c0                	test   al,al
ffff80000080180e:	74 23                	je     ffff800000801833 <printf+0x77>
ffff800000801810:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff800000801817:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff80000080181b:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff80000080181f:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000801823:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff800000801827:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff80000080182b:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff80000080182f:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
ffff800000801833:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000080183a:	48 89 c7             	mov    rdi,rax
ffff80000080183d:	49 89 df             	mov    r15,rbx
ffff800000801840:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff800000801847:	ff ff ff 
ffff80000080184a:	48 01 d8             	add    rax,rbx
ffff80000080184d:	ff d0                	call   rax
ffff80000080184f:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff800000801854:	0f 8f f2 02 00 00    	jg     ffff800000801b4c <printf+0x390>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc();
ffff80000080185a:	49 89 df             	mov    r15,rbx
ffff80000080185d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801862:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000801869:	ff ff ff 
ffff80000080186c:	48 01 da             	add    rdx,rbx
ffff80000080186f:	ff d2                	call   rdx
ffff800000801871:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
ffff800000801878:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
ffff80000080187f:	00 00 00 
ffff800000801882:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
ffff800000801889:	00 00 00 
ffff80000080188c:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000801890:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffff800000801897:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff80000080189e:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
ffff8000008018a5:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008018ac:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff8000008018b3:	e9 27 02 00 00       	jmp    ffff800000801adf <printf+0x323>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008018b8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008018bf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008018c2:	3c 25                	cmp    al,0x25
ffff8000008018c4:	0f 85 e2 01 00 00    	jne    ffff800000801aac <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
ffff8000008018ca:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008018d1:	48 83 c0 01          	add    rax,0x1
ffff8000008018d5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008018d8:	84 c0                	test   al,al
ffff8000008018da:	0f 84 cc 01 00 00    	je     ffff800000801aac <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
ffff8000008018e0:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff8000008018e7:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008018e8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008018ef:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008018f2:	3c 78                	cmp    al,0x78
ffff8000008018f4:	75 75                	jne    ffff80000080196b <printf+0x1af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
ffff8000008018f6:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff8000008018fc:	83 f8 2f             	cmp    eax,0x2f
ffff8000008018ff:	77 23                	ja     ffff800000801924 <printf+0x168>
ffff800000801901:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801908:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080190e:	89 d2                	mov    edx,edx
ffff800000801910:	48 01 d0             	add    rax,rdx
ffff800000801913:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801919:	83 c2 08             	add    edx,0x8
ffff80000080191c:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801922:	eb 12                	jmp    ffff800000801936 <printf+0x17a>
ffff800000801924:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080192b:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000080192f:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801936:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801938:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
ffff80000080193e:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff800000801944:	48 63 d0             	movsxd rdx,eax
ffff800000801947:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080194e:	48 89 d6             	mov    rsi,rdx
ffff800000801951:	48 89 c7             	mov    rdi,rax
ffff800000801954:	49 89 df             	mov    r15,rbx
ffff800000801957:	48 b8 71 19 ff ff ff 	movabs rax,0xffffffffffff1971
ffff80000080195e:	ff ff ff 
ffff800000801961:	48 01 d8             	add    rax,rbx
ffff800000801964:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801966:	e9 6c 01 00 00       	jmp    ffff800000801ad7 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
ffff80000080196b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801972:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801975:	3c 73                	cmp    al,0x73
ffff800000801977:	75 75                	jne    ffff8000008019ee <printf+0x232>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
ffff800000801979:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff80000080197f:	83 f8 2f             	cmp    eax,0x2f
ffff800000801982:	77 23                	ja     ffff8000008019a7 <printf+0x1eb>
ffff800000801984:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080198b:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801991:	89 d2                	mov    edx,edx
ffff800000801993:	48 01 d0             	add    rax,rdx
ffff800000801996:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080199c:	83 c2 08             	add    edx,0x8
ffff80000080199f:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff8000008019a5:	eb 12                	jmp    ffff8000008019b9 <printf+0x1fd>
ffff8000008019a7:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008019ae:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008019b2:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff8000008019b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008019bc:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
ffff8000008019c3:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff8000008019ca:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019d1:	48 89 d6             	mov    rsi,rdx
ffff8000008019d4:	48 89 c7             	mov    rdi,rax
ffff8000008019d7:	49 89 df             	mov    r15,rbx
ffff8000008019da:	48 b8 ff 19 ff ff ff 	movabs rax,0xffffffffffff19ff
ffff8000008019e1:	ff ff ff 
ffff8000008019e4:	48 01 d8             	add    rax,rbx
ffff8000008019e7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008019e9:	e9 e9 00 00 00       	jmp    ffff800000801ad7 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
ffff8000008019ee:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019f5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019f8:	3c 64                	cmp    al,0x64
ffff8000008019fa:	75 73                	jne    ffff800000801a6f <printf+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
ffff8000008019fc:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801a02:	83 f8 2f             	cmp    eax,0x2f
ffff800000801a05:	77 23                	ja     ffff800000801a2a <printf+0x26e>
ffff800000801a07:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801a0e:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801a14:	89 d2                	mov    edx,edx
ffff800000801a16:	48 01 d0             	add    rax,rdx
ffff800000801a19:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801a1f:	83 c2 08             	add    edx,0x8
ffff800000801a22:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801a28:	eb 12                	jmp    ffff800000801a3c <printf+0x280>
ffff800000801a2a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801a31:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801a35:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801a3c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801a3f:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
ffff800000801a46:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000801a4d:	89 c2                	mov    edx,eax
ffff800000801a4f:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a56:	89 d6                	mov    esi,edx
ffff800000801a58:	48 89 c7             	mov    rdi,rax
ffff800000801a5b:	49 89 df             	mov    r15,rbx
ffff800000801a5e:	48 b8 b6 18 ff ff ff 	movabs rax,0xffffffffffff18b6
ffff800000801a65:	ff ff ff 
ffff800000801a68:	48 01 d8             	add    rax,rbx
ffff800000801a6b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801a6d:	eb 68                	jmp    ffff800000801ad7 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
ffff800000801a6f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801a76:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801a79:	3c 63                	cmp    al,0x63
ffff800000801a7b:	75 02                	jne    ffff800000801a7f <printf+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
ffff800000801a7d:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
ffff800000801a7f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801a86:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801a89:	0f be d0             	movsx  edx,al
ffff800000801a8c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a93:	89 d6                	mov    esi,edx
ffff800000801a95:	48 89 c7             	mov    rdi,rax
ffff800000801a98:	49 89 df             	mov    r15,rbx
ffff800000801a9b:	48 b8 77 18 ff ff ff 	movabs rax,0xffffffffffff1877
ffff800000801aa2:	ff ff ff 
ffff800000801aa5:	48 01 d8             	add    rax,rbx
ffff800000801aa8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801aaa:	eb 2b                	jmp    ffff800000801ad7 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
ffff800000801aac:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801ab3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801ab6:	0f be d0             	movsx  edx,al
ffff800000801ab9:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801ac0:	89 d6                	mov    esi,edx
ffff800000801ac2:	48 89 c7             	mov    rdi,rax
ffff800000801ac5:	49 89 df             	mov    r15,rbx
ffff800000801ac8:	48 b8 77 18 ff ff ff 	movabs rax,0xffffffffffff1877
ffff800000801acf:	ff ff ff 
ffff800000801ad2:	48 01 d8             	add    rax,rbx
ffff800000801ad5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801ad7:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801ade:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
ffff800000801adf:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801ae6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801ae9:	84 c0                	test   al,al
ffff800000801aeb:	0f 85 c7 fd ff ff    	jne    ffff8000008018b8 <printf+0xfc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
ffff800000801af1:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801af8:	48 89 c7             	mov    rdi,rax
ffff800000801afb:	49 89 df             	mov    r15,rbx
ffff800000801afe:	48 b8 48 96 fe ff ff 	movabs rax,0xfffffffffffe9648
ffff800000801b05:	ff ff ff 
ffff800000801b08:	48 01 d8             	add    rax,rbx
ffff800000801b0b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
ffff800000801b0d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801b14:	48 89 c7             	mov    rdi,rax
ffff800000801b17:	49 89 df             	mov    r15,rbx
ffff800000801b1a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801b1f:	48 ba ac 0c ff ff ff 	movabs rdx,0xffffffffffff0cac
ffff800000801b26:	ff ff ff 
ffff800000801b29:	48 01 da             	add    rdx,rbx
ffff800000801b2c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
ffff800000801b2e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801b35:	48 89 c7             	mov    rdi,rax
ffff800000801b38:	49 89 df             	mov    r15,rbx
ffff800000801b3b:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000801b42:	ff ff ff 
ffff800000801b45:	48 01 d8             	add    rax,rbx
ffff800000801b48:	ff d0                	call   rax
ffff800000801b4a:	eb 01                	jmp    ffff800000801b4d <printf+0x391>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
ffff800000801b4c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
ffff800000801b4d:	48 81 c4 00 01 00 00 	add    rsp,0x100
ffff800000801b54:	5b                   	pop    rbx
ffff800000801b55:	41 5f                	pop    r15
ffff800000801b57:	5d                   	pop    rbp
ffff800000801b58:	c3                   	ret    

ffff800000801b59 <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:27
//以kb为单位
int high_mem_base=1024;
int mmap_t_i=0;

stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
ffff800000801b59:	f3 0f 1e fa          	endbr64 
ffff800000801b5d:	55                   	push   rbp
ffff800000801b5e:	48 89 e5             	mov    rbp,rsp
ffff800000801b61:	41 57                	push   r15
ffff800000801b63:	48 83 ec 28          	sub    rsp,0x28
ffff800000801b67:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801b67 <mmap+0xe>
ffff800000801b6e:	49 bb c1 0d 02 00 00 	movabs r11,0x20dc1
ffff800000801b75:	00 00 00 
ffff800000801b78:	4c 01 d8             	add    rax,r11
ffff800000801b7b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801b7f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801b83:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:28
    return smmap(pa,la,attr,current->pml4);
ffff800000801b86:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000801b8d:	ff ff ff 
ffff800000801b90:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801b94:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000801b97:	48 8b 8a e0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xe0]
ffff800000801b9e:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801ba1:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000801ba5:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff800000801ba9:	49 89 c7             	mov    r15,rax
ffff800000801bac:	49 b8 9a f2 fd ff ff 	movabs r8,0xfffffffffffdf29a
ffff800000801bb3:	ff ff ff 
ffff800000801bb6:	49 01 c0             	add    r8,rax
ffff800000801bb9:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:58
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
ffff800000801bbc:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801bc0:	c9                   	leave  
ffff800000801bc1:	c3                   	ret    

ffff800000801bc2 <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:60
stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
ffff800000801bc2:	f3 0f 1e fa          	endbr64 
ffff800000801bc6:	55                   	push   rbp
ffff800000801bc7:	48 89 e5             	mov    rbp,rsp
ffff800000801bca:	41 57                	push   r15
ffff800000801bcc:	53                   	push   rbx
ffff800000801bcd:	48 83 ec 40          	sub    rsp,0x40
ffff800000801bd1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801bd1 <smmap+0xf>
ffff800000801bd8:	49 bb 57 0d 02 00 00 	movabs r11,0x20d57
ffff800000801bdf:	00 00 00 
ffff800000801be2:	4c 01 db             	add    rbx,r11
ffff800000801be5:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801be9:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000801bed:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffff800000801bf0:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:63
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
ffff800000801bf4:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000801bfb:	7f 00 00 
ffff800000801bfe:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff800000801c02:	76 0e                	jbe    ffff800000801c12 <smmap+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
        la&=~0xffff000000000000ul;
ffff800000801c04:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
ffff800000801c0b:	ff 00 00 
ffff800000801c0e:	48 21 45 c0          	and    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:66
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
ffff800000801c12:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801c16:	48 c1 e8 27          	shr    rax,0x27
ffff800000801c1a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801c21:	00 
ffff800000801c22:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801c26:	48 01 d0             	add    rax,rdx
ffff800000801c29:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801c2c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:67
    int pml4i=la / PML4E_SIZE;
ffff800000801c30:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801c34:	48 c1 e8 27          	shr    rax,0x27
ffff800000801c38:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:68
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
ffff800000801c3b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c3f:	83 e0 01             	and    eax,0x1
ffff800000801c42:	48 85 c0             	test   rax,rax
ffff800000801c45:	75 78                	jne    ffff800000801cbf <smmap+0xfd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:70
    {
        pdptp=(page_item*) kmalloc();
ffff800000801c47:	49 89 df             	mov    r15,rbx
ffff800000801c4a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801c4f:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000801c56:	ff ff ff 
ffff800000801c59:	48 01 da             	add    rdx,rbx
ffff800000801c5c:	ff d2                	call   rdx
ffff800000801c5e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:71
        memset(pdptp,0,4096);
ffff800000801c62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c66:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801c6b:	be 00 00 00 00       	mov    esi,0x0
ffff800000801c70:	48 89 c7             	mov    rdi,rax
ffff800000801c73:	49 89 df             	mov    r15,rbx
ffff800000801c76:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000801c7d:	ff ff ff 
ffff800000801c80:	48 01 d8             	add    rax,rbx
ffff800000801c83:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:73
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
ffff800000801c85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c89:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801c90:	7f 00 00 
ffff800000801c93:	48 21 d0             	and    rax,rdx
ffff800000801c96:	48 89 c6             	mov    rsi,rax
ffff800000801c99:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801c9c:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff800000801ca3:	ff ff ff 
ffff800000801ca6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000801caa:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000801cad:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000801cb0:	48 98                	cdqe   
ffff800000801cb2:	48 c1 e0 03          	shl    rax,0x3
ffff800000801cb6:	48 01 c8             	add    rax,rcx
ffff800000801cb9:	48 09 f2             	or     rdx,rsi
ffff800000801cbc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:75
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
ffff800000801cbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801cc3:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801cca:	7f 00 00 
ffff800000801ccd:	48 21 c2             	and    rdx,rax
ffff800000801cd0:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801cd7:	80 ff ff 
ffff800000801cda:	48 09 d0             	or     rax,rdx
ffff800000801cdd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:78

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
ffff800000801ce1:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
ffff800000801ce8:	00 00 00 
ffff800000801ceb:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000801cef:	48 c1 e8 1e          	shr    rax,0x1e
ffff800000801cf3:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
ffff800000801cf6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801cf9:	48 98                	cdqe   
ffff800000801cfb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801d02:	00 
ffff800000801d03:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801d07:	48 01 d0             	add    rax,rdx
ffff800000801d0a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801d0d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:81
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
ffff800000801d11:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d15:	83 e0 01             	and    eax,0x1
ffff800000801d18:	48 85 c0             	test   rax,rax
ffff800000801d1b:	75 6f                	jne    ffff800000801d8c <smmap+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:83
    {
        pdp=(page_item*) kmalloc();
ffff800000801d1d:	49 89 df             	mov    r15,rbx
ffff800000801d20:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801d25:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000801d2c:	ff ff ff 
ffff800000801d2f:	48 01 da             	add    rdx,rbx
ffff800000801d32:	ff d2                	call   rdx
ffff800000801d34:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:84
        memset(pdp,0,4096);
ffff800000801d38:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d3c:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801d41:	be 00 00 00 00       	mov    esi,0x0
ffff800000801d46:	48 89 c7             	mov    rdi,rax
ffff800000801d49:	49 89 df             	mov    r15,rbx
ffff800000801d4c:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000801d53:	ff ff ff 
ffff800000801d56:	48 01 d8             	add    rax,rbx
ffff800000801d59:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
ffff800000801d5b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d5f:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801d66:	7f 00 00 
ffff800000801d69:	48 21 d0             	and    rax,rdx
ffff800000801d6c:	48 89 c1             	mov    rcx,rax
ffff800000801d6f:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801d72:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801d75:	48 98                	cdqe   
ffff800000801d77:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801d7e:	00 
ffff800000801d7f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801d83:	48 01 f0             	add    rax,rsi
ffff800000801d86:	48 09 ca             	or     rdx,rcx
ffff800000801d89:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:87
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
ffff800000801d8c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d90:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801d97:	7f 00 00 
ffff800000801d9a:	48 21 c2             	and    rdx,rax
ffff800000801d9d:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801da4:	80 ff ff 
ffff800000801da7:	48 09 d0             	or     rax,rdx
ffff800000801daa:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:90

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
ffff800000801dae:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801db2:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801db7:	48 c1 e8 15          	shr    rax,0x15
ffff800000801dbb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801dc2:	00 
ffff800000801dc3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801dc7:	48 01 d0             	add    rax,rdx
ffff800000801dca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801dcd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91
    if(!((unsigned long long)pt & PAGE_PRESENT))
ffff800000801dd1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801dd5:	83 e0 01             	and    eax,0x1
ffff800000801dd8:	48 85 c0             	test   rax,rax
ffff800000801ddb:	75 77                	jne    ffff800000801e54 <smmap+0x292>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:93
    {
        pt=(page_item*) kmalloc();
ffff800000801ddd:	49 89 df             	mov    r15,rbx
ffff800000801de0:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801de5:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000801dec:	ff ff ff 
ffff800000801def:	48 01 da             	add    rdx,rbx
ffff800000801df2:	ff d2                	call   rdx
ffff800000801df4:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:94
        memset(pt,0,4096);
ffff800000801df8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801dfc:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801e01:	be 00 00 00 00       	mov    esi,0x0
ffff800000801e06:	48 89 c7             	mov    rdi,rax
ffff800000801e09:	49 89 df             	mov    r15,rbx
ffff800000801e0c:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000801e13:	ff ff ff 
ffff800000801e16:	48 01 d8             	add    rax,rbx
ffff800000801e19:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:95
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
ffff800000801e1b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801e1f:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801e26:	7f 00 00 
ffff800000801e29:	48 21 d0             	and    rax,rdx
ffff800000801e2c:	48 89 c1             	mov    rcx,rax
ffff800000801e2f:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801e32:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801e36:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801e3b:	48 c1 e8 15          	shr    rax,0x15
ffff800000801e3f:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801e46:	00 
ffff800000801e47:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801e4b:	48 01 f0             	add    rax,rsi
ffff800000801e4e:	48 09 ca             	or     rdx,rcx
ffff800000801e51:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:97
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
ffff800000801e54:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801e58:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801e5f:	7f 00 00 
ffff800000801e62:	48 21 c2             	and    rdx,rax
ffff800000801e65:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801e6c:	80 ff ff 
ffff800000801e6f:	48 09 d0             	or     rax,rdx
ffff800000801e72:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:100

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
ffff800000801e76:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000801e79:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000801e7d:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
ffff800000801e83:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000801e87:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000801e8e:	00 
ffff800000801e8f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000801e93:	48 01 ca             	add    rdx,rcx
ffff800000801e96:	48 0b 45 c8          	or     rax,QWORD PTR [rbp-0x38]
ffff800000801e9a:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101
    return NORMAL;
ffff800000801e9d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:102
}
ffff800000801ea2:	48 83 c4 40          	add    rsp,0x40
ffff800000801ea6:	5b                   	pop    rbx
ffff800000801ea7:	41 5f                	pop    r15
ffff800000801ea9:	5d                   	pop    rbp
ffff800000801eaa:	c3                   	ret    

ffff800000801eab <mdemap>:
mdemap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:105

stat_t mdemap(addr_t la)
{
ffff800000801eab:	f3 0f 1e fa          	endbr64 
ffff800000801eaf:	55                   	push   rbp
ffff800000801eb0:	48 89 e5             	mov    rbp,rsp
ffff800000801eb3:	41 57                	push   r15
ffff800000801eb5:	48 83 ec 18          	sub    rsp,0x18
ffff800000801eb9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801eb9 <mdemap+0xe>
ffff800000801ec0:	49 bb 6f 0a 02 00 00 	movabs r11,0x20a6f
ffff800000801ec7:	00 00 00 
ffff800000801eca:	4c 01 d8             	add    rax,r11
ffff800000801ecd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106
    return mmap(0l,la,0);
ffff800000801ed1:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000801ed5:	ba 00 00 00 00       	mov    edx,0x0
ffff800000801eda:	48 89 ce             	mov    rsi,rcx
ffff800000801edd:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801ee2:	49 89 c7             	mov    r15,rax
ffff800000801ee5:	48 b9 31 f2 fd ff ff 	movabs rcx,0xfffffffffffdf231
ffff800000801eec:	ff ff ff 
ffff800000801eef:	48 01 c1             	add    rcx,rax
ffff800000801ef2:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:107
}
ffff800000801ef4:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801ef8:	c9                   	leave  
ffff800000801ef9:	c3                   	ret    

ffff800000801efa <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:109
int init_paging()
{
ffff800000801efa:	f3 0f 1e fa          	endbr64 
ffff800000801efe:	55                   	push   rbp
ffff800000801eff:	48 89 e5             	mov    rbp,rsp
ffff800000801f02:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801f02 <init_paging+0x8>
ffff800000801f09:	49 bb 26 0a 02 00 00 	movabs r11,0x20a26
ffff800000801f10:	00 00 00 
ffff800000801f13:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:142
//    set_page_item(pml4,PDPT_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //把低512GB的空间取消映射，留给用户
    pml4[0]=0;
ffff800000801f16:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff800000801f1d:	ff ff ff 
ffff800000801f20:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801f24:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801f27:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:144
    #endif
}
ffff800000801f2e:	90                   	nop
ffff800000801f2f:	5d                   	pop    rbp
ffff800000801f30:	c3                   	ret    

ffff800000801f31 <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:146
void set_high_mem_base(int base)
{
ffff800000801f31:	f3 0f 1e fa          	endbr64 
ffff800000801f35:	55                   	push   rbp
ffff800000801f36:	48 89 e5             	mov    rbp,rsp
ffff800000801f39:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801f39 <set_high_mem_base+0x8>
ffff800000801f40:	49 bb ef 09 02 00 00 	movabs r11,0x209ef
ffff800000801f47:	00 00 00 
ffff800000801f4a:	4c 01 d8             	add    rax,r11
ffff800000801f4d:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
    high_mem_base=base;
ffff800000801f50:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff800000801f57:	ff ff ff 
ffff800000801f5a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801f5e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801f61:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:148
}
ffff800000801f63:	90                   	nop
ffff800000801f64:	5d                   	pop    rbp
ffff800000801f65:	c3                   	ret    

ffff800000801f66 <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:150
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
ffff800000801f66:	f3 0f 1e fa          	endbr64 
ffff800000801f6a:	55                   	push   rbp
ffff800000801f6b:	48 89 e5             	mov    rbp,rsp
ffff800000801f6e:	41 57                	push   r15
ffff800000801f70:	48 83 ec 28          	sub    rsp,0x28
ffff800000801f74:	4c 8d 05 f9 ff ff ff 	lea    r8,[rip+0xfffffffffffffff9]        # ffff800000801f74 <set_mem_area+0xe>
ffff800000801f7b:	49 bb b4 09 02 00 00 	movabs r11,0x209b4
ffff800000801f82:	00 00 00 
ffff800000801f85:	4d 01 d8             	add    r8,r11
ffff800000801f88:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801f8c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801f90:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
    mmap_struct[mmap_t_i].base=base;
ffff800000801f94:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff800000801f9b:	ff ff ff 
ffff800000801f9e:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801fa2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801fa4:	48 ba 80 fd ff ff ff 	movabs rdx,0xfffffffffffffd80
ffff800000801fab:	ff ff ff 
ffff800000801fae:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801fb2:	48 63 d0             	movsxd rdx,eax
ffff800000801fb5:	48 89 d0             	mov    rax,rdx
ffff800000801fb8:	48 01 c0             	add    rax,rax
ffff800000801fbb:	48 01 d0             	add    rax,rdx
ffff800000801fbe:	48 c1 e0 03          	shl    rax,0x3
ffff800000801fc2:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000801fc6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801fca:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:152
    mmap_struct[mmap_t_i].len=len;
ffff800000801fcd:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff800000801fd4:	ff ff ff 
ffff800000801fd7:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801fdb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801fdd:	48 ba 80 fd ff ff ff 	movabs rdx,0xfffffffffffffd80
ffff800000801fe4:	ff ff ff 
ffff800000801fe7:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801feb:	48 63 d0             	movsxd rdx,eax
ffff800000801fee:	48 89 d0             	mov    rax,rdx
ffff800000801ff1:	48 01 c0             	add    rax,rax
ffff800000801ff4:	48 01 d0             	add    rax,rdx
ffff800000801ff7:	48 c1 e0 03          	shl    rax,0x3
ffff800000801ffb:	48 01 c8             	add    rax,rcx
ffff800000801ffe:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000802002:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000802006:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:153
    mmap_struct[mmap_t_i++].type=type;
ffff800000802009:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff800000802010:	ff ff ff 
ffff800000802013:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000802017:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802019:	8d 48 01             	lea    ecx,[rax+0x1]
ffff80000080201c:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff800000802023:	ff ff ff 
ffff800000802026:	49 8b 14 10          	mov    rdx,QWORD PTR [r8+rdx*1]
ffff80000080202a:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff80000080202c:	48 ba 80 fd ff ff ff 	movabs rdx,0xfffffffffffffd80
ffff800000802033:	ff ff ff 
ffff800000802036:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff80000080203a:	48 63 d0             	movsxd rdx,eax
ffff80000080203d:	48 89 d0             	mov    rax,rdx
ffff800000802040:	48 01 c0             	add    rax,rax
ffff800000802043:	48 01 d0             	add    rax,rdx
ffff800000802046:	48 c1 e0 03          	shl    rax,0x3
ffff80000080204a:	48 01 c8             	add    rax,rcx
ffff80000080204d:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000802051:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802055:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
    comprintf("mem info:base=0x%l,len=0x%l,type=%d\n",base,len,type);
ffff800000802058:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080205c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000802060:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802064:	48 89 c6             	mov    rsi,rax
ffff800000802067:	48 b8 a8 d3 ff ff ff 	movabs rax,0xffffffffffffd3a8
ffff80000080206e:	ff ff ff 
ffff800000802071:	49 8d 04 00          	lea    rax,[r8+rax*1]
ffff800000802075:	48 89 c7             	mov    rdi,rax
ffff800000802078:	4d 89 c7             	mov    r15,r8
ffff80000080207b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802080:	49 b9 ac 0c ff ff ff 	movabs r9,0xffffffffffff0cac
ffff800000802087:	ff ff ff 
ffff80000080208a:	4d 01 c1             	add    r9,r8
ffff80000080208d:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155
}
ffff800000802090:	90                   	nop
ffff800000802091:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000802095:	c9                   	leave  
ffff800000802096:	c3                   	ret    

ffff800000802097 <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157
addr_t kmalloc()
{
ffff800000802097:	f3 0f 1e fa          	endbr64 
ffff80000080209b:	55                   	push   rbp
ffff80000080209c:	48 89 e5             	mov    rbp,rsp
ffff80000080209f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080209f <kmalloc+0x8>
ffff8000008020a6:	49 bb 89 08 02 00 00 	movabs r11,0x20889
ffff8000008020ad:	00 00 00 
ffff8000008020b0:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:158
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff8000008020b3:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008020ba:	e9 c6 00 00 00       	jmp    ffff800000802185 <kmalloc+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:160
    {
        for(int j=0;j<32;j++)
ffff8000008020bf:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff8000008020c6:	e9 ac 00 00 00       	jmp    ffff800000802177 <kmalloc+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:162
        {
            if(!(vmalloc_map[i]&(1<<j)))
ffff8000008020cb:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008020d2:	ff ff ff 
ffff8000008020d5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008020d9:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008020dc:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008020df:	48 63 d2             	movsxd rdx,edx
ffff8000008020e2:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008020e6:	48 01 ca             	add    rdx,rcx
ffff8000008020e9:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008020eb:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008020ee:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008020f3:	89 d1                	mov    ecx,edx
ffff8000008020f5:	d3 e7                	shl    edi,cl
ffff8000008020f7:	89 fa                	mov    edx,edi
ffff8000008020f9:	21 f2                	and    edx,esi
ffff8000008020fb:	85 d2                	test   edx,edx
ffff8000008020fd:	75 74                	jne    ffff800000802173 <kmalloc+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:164
            {
                vmalloc_map[i]|=(1<<j);
ffff8000008020ff:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff800000802106:	ff ff ff 
ffff800000802109:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080210d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802110:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802113:	48 63 d2             	movsxd rdx,edx
ffff800000802116:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080211a:	48 01 ca             	add    rdx,rcx
ffff80000080211d:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff80000080211f:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802122:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802127:	89 d1                	mov    ecx,edx
ffff800000802129:	d3 e7                	shl    edi,cl
ffff80000080212b:	89 fa                	mov    edx,edi
ffff80000080212d:	89 d1                	mov    ecx,edx
ffff80000080212f:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff800000802136:	ff ff ff 
ffff800000802139:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080213d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802140:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802143:	48 98                	cdqe   
ffff800000802145:	48 c1 e0 02          	shl    rax,0x2
ffff800000802149:	48 01 d0             	add    rax,rdx
ffff80000080214c:	09 ce                	or     esi,ecx
ffff80000080214e:	89 f2                	mov    edx,esi
ffff800000802150:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:165
                return VMALLOC_BASE+(i*32+j)*0x1000;
ffff800000802152:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802155:	c1 e0 05             	shl    eax,0x5
ffff800000802158:	89 c2                	mov    edx,eax
ffff80000080215a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080215d:	01 d0                	add    eax,edx
ffff80000080215f:	c1 e0 0c             	shl    eax,0xc
ffff800000802162:	48 98                	cdqe   
ffff800000802164:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff80000080216b:	80 ff ff 
ffff80000080216e:	48 01 d0             	add    rax,rdx
ffff800000802171:	eb 1c                	jmp    ffff80000080218f <kmalloc+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:160 (discriminator 2)
        for(int j=0;j<32;j++)
ffff800000802173:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:160 (discriminator 1)
ffff800000802177:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff80000080217b:	0f 8e 4a ff ff ff    	jle    ffff8000008020cb <kmalloc+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:158 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802181:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:158 (discriminator 1)
ffff800000802185:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff800000802189:	0f 8e 30 ff ff ff    	jle    ffff8000008020bf <kmalloc+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:169
            }
        }
    }
}
ffff80000080218f:	5d                   	pop    rbp
ffff800000802190:	c3                   	ret    

ffff800000802191 <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:171
addr_t kmallocat(addr_t addr,int pgc)
{
ffff800000802191:	f3 0f 1e fa          	endbr64 
ffff800000802195:	55                   	push   rbp
ffff800000802196:	48 89 e5             	mov    rbp,rsp
ffff800000802199:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802199 <kmallocat+0x8>
ffff8000008021a0:	49 bb 8f 07 02 00 00 	movabs r11,0x2078f
ffff8000008021a7:	00 00 00 
ffff8000008021aa:	4c 01 d8             	add    rax,r11
ffff8000008021ad:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008021b1:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
ffff8000008021b4:	48 b9 00 00 00 fe ff 	movabs rcx,0x7ffffe000000
ffff8000008021bb:	7f 00 00 
ffff8000008021be:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008021c2:	48 01 ca             	add    rdx,rcx
ffff8000008021c5:	48 c1 ea 0c          	shr    rdx,0xc
ffff8000008021c9:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:173
    if(addr==0){
ffff8000008021cc:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff8000008021d1:	0f 85 3f 01 00 00    	jne    ffff800000802316 <kmallocat+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
        int l=0,p=0;
ffff8000008021d7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008021de:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
        for(int i=0;i<kmalloc_pgc;i++){
ffff8000008021e5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008021ec:	eb 63                	jmp    ffff800000802251 <kmallocat+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
ffff8000008021ee:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008021f5:	ff ff ff 
ffff8000008021f8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008021fc:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008021ff:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000802202:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff800000802205:	85 d2                	test   edx,edx
ffff800000802207:	0f 48 d1             	cmovs  edx,ecx
ffff80000080220a:	c1 fa 05             	sar    edx,0x5
ffff80000080220d:	48 63 d2             	movsxd rdx,edx
ffff800000802210:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802214:	48 01 f2             	add    rdx,rsi
ffff800000802217:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802219:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080221c:	83 e2 1f             	and    edx,0x1f
ffff80000080221f:	89 d1                	mov    ecx,edx
ffff800000802221:	d3 ee                	shr    esi,cl
ffff800000802223:	89 f2                	mov    edx,esi
ffff800000802225:	83 e2 01             	and    edx,0x1
ffff800000802228:	85 d2                	test   edx,edx
ffff80000080222a:	75 12                	jne    ffff80000080223e <kmallocat+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:177
                if(l==0)
ffff80000080222c:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000802230:	75 06                	jne    ffff800000802238 <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
                    p=i;//开头空页
ffff800000802232:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000802235:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
                l++;
ffff800000802238:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffff80000080223c:	eb 07                	jmp    ffff800000802245 <kmallocat+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
            } else
                l=0;
ffff80000080223e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:182
            if(l==pgc)break;
ffff800000802245:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802248:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080224b:	74 1b                	je     ffff800000802268 <kmallocat+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
ffff80000080224d:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175 (discriminator 1)
ffff800000802251:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff800000802258:	ff ff ff 
ffff80000080225b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080225f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802261:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff800000802264:	7c 88                	jl     ffff8000008021ee <kmallocat+0x5d>
ffff800000802266:	eb 01                	jmp    ffff800000802269 <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:182
            if(l==pgc)break;
ffff800000802268:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184
        }
        if(l<pgc)return -1;
ffff800000802269:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080226c:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080226f:	7d 0c                	jge    ffff80000080227d <kmallocat+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184 (discriminator 1)
ffff800000802271:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802278:	e9 87 01 00 00       	jmp    ffff800000802404 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186
        //开始占用
        for(int i=0;i<pgc;i++){
ffff80000080227d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffff800000802284:	eb 6e                	jmp    ffff8000008022f4 <kmallocat+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:187 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
ffff800000802286:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff80000080228d:	ff ff ff 
ffff800000802290:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802294:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000802297:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080229a:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080229d:	01 ca                	add    edx,ecx
ffff80000080229f:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008022a2:	85 d2                	test   edx,edx
ffff8000008022a4:	0f 48 d1             	cmovs  edx,ecx
ffff8000008022a7:	c1 fa 05             	sar    edx,0x5
ffff8000008022aa:	89 d6                	mov    esi,edx
ffff8000008022ac:	48 63 d6             	movsxd rdx,esi
ffff8000008022af:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022b3:	48 01 fa             	add    rdx,rdi
ffff8000008022b6:	8b 3a                	mov    edi,DWORD PTR [rdx]
ffff8000008022b8:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff8000008022bb:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008022be:	01 ca                	add    edx,ecx
ffff8000008022c0:	83 e2 1f             	and    edx,0x1f
ffff8000008022c3:	41 b8 01 00 00 00    	mov    r8d,0x1
ffff8000008022c9:	89 d1                	mov    ecx,edx
ffff8000008022cb:	41 d3 e0             	shl    r8d,cl
ffff8000008022ce:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008022d5:	ff ff ff 
ffff8000008022d8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008022dc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008022df:	48 63 d6             	movsxd rdx,esi
ffff8000008022e2:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022e6:	48 01 ca             	add    rdx,rcx
ffff8000008022e9:	44 09 c7             	or     edi,r8d
ffff8000008022ec:	89 f9                	mov    ecx,edi
ffff8000008022ee:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186 (discriminator 3)
        for(int i=0;i<pgc;i++){
ffff8000008022f0:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186 (discriminator 1)
ffff8000008022f4:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008022f7:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008022fa:	7c 8a                	jl     ffff800000802286 <kmallocat+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:189
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
ffff8000008022fc:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008022ff:	c1 e0 0c             	shl    eax,0xc
ffff800000802302:	48 98                	cdqe   
ffff800000802304:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff80000080230b:	80 ff ff 
ffff80000080230e:	48 01 d0             	add    rax,rdx
ffff800000802311:	e9 ee 00 00 00       	jmp    ffff800000802404 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:191
    }
    for(int i=0;i<pgc;i++){
ffff800000802316:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080231d:	eb 5c                	jmp    ffff80000080237b <kmallocat+0x1ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:192
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
ffff80000080231f:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff800000802326:	ff ff ff 
ffff800000802329:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080232d:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000802330:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802333:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802336:	01 ca                	add    edx,ecx
ffff800000802338:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff80000080233b:	85 d2                	test   edx,edx
ffff80000080233d:	0f 48 d1             	cmovs  edx,ecx
ffff800000802340:	c1 fa 05             	sar    edx,0x5
ffff800000802343:	48 63 d2             	movsxd rdx,edx
ffff800000802346:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080234a:	48 01 f2             	add    rdx,rsi
ffff80000080234d:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff80000080234f:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802352:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802355:	01 ca                	add    edx,ecx
ffff800000802357:	83 e2 1f             	and    edx,0x1f
ffff80000080235a:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080235f:	89 d1                	mov    ecx,edx
ffff800000802361:	d3 e7                	shl    edi,cl
ffff800000802363:	89 fa                	mov    edx,edi
ffff800000802365:	21 f2                	and    edx,esi
ffff800000802367:	85 d2                	test   edx,edx
ffff800000802369:	74 0c                	je     ffff800000802377 <kmallocat+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193
            return -1;
ffff80000080236b:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802372:	e9 8d 00 00 00       	jmp    ffff800000802404 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:191 (discriminator 2)
    for(int i=0;i<pgc;i++){
ffff800000802377:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:191 (discriminator 1)
ffff80000080237b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080237e:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802381:	7c 9c                	jl     ffff80000080231f <kmallocat+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196
    }
    //
    for(int i=0;i<pgc;i++){
ffff800000802383:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080238a:	eb 6c                	jmp    ffff8000008023f8 <kmallocat+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:197 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
ffff80000080238c:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff800000802393:	ff ff ff 
ffff800000802396:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080239a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080239d:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
ffff8000008023a0:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008023a3:	01 f2                	add    edx,esi
ffff8000008023a5:	48 63 d2             	movsxd rdx,edx
ffff8000008023a8:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008023ac:	48 01 ca             	add    rdx,rcx
ffff8000008023af:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008023b1:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff8000008023b4:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008023b7:	01 ca                	add    edx,ecx
ffff8000008023b9:	83 e2 1f             	and    edx,0x1f
ffff8000008023bc:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008023c1:	89 d1                	mov    ecx,edx
ffff8000008023c3:	d3 e7                	shl    edi,cl
ffff8000008023c5:	89 fa                	mov    edx,edi
ffff8000008023c7:	41 89 d0             	mov    r8d,edx
ffff8000008023ca:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008023d1:	ff ff ff 
ffff8000008023d4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008023d8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008023db:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
ffff8000008023de:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008023e1:	01 fa                	add    edx,edi
ffff8000008023e3:	48 63 d2             	movsxd rdx,edx
ffff8000008023e6:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008023ea:	48 01 ca             	add    rdx,rcx
ffff8000008023ed:	44 09 c6             	or     esi,r8d
ffff8000008023f0:	89 f1                	mov    ecx,esi
ffff8000008023f2:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff8000008023f4:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196 (discriminator 1)
ffff8000008023f8:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008023fb:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008023fe:	7c 8c                	jl     ffff80000080238c <kmallocat+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:199
    }
    return addr;
ffff800000802400:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:201

}
ffff800000802404:	5d                   	pop    rbp
ffff800000802405:	c3                   	ret    

ffff800000802406 <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:204

int kmfree(addr_t ptr)
{
ffff800000802406:	f3 0f 1e fa          	endbr64 
ffff80000080240a:	55                   	push   rbp
ffff80000080240b:	48 89 e5             	mov    rbp,rsp
ffff80000080240e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080240e <kmfree+0x8>
ffff800000802415:	49 bb 1a 05 02 00 00 	movabs r11,0x2051a
ffff80000080241c:	00 00 00 
ffff80000080241f:	4c 01 da             	add    rdx,r11
ffff800000802422:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:205
    int num=ptr/PAGE_SIZE;
ffff800000802426:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080242a:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080242e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:206
    int n=num/32;
ffff800000802431:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802434:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802437:	85 c0                	test   eax,eax
ffff800000802439:	0f 48 c1             	cmovs  eax,ecx
ffff80000080243c:	c1 f8 05             	sar    eax,0x5
ffff80000080243f:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207
    int r=num%32;
ffff800000802442:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802445:	89 c1                	mov    ecx,eax
ffff800000802447:	c1 f9 1f             	sar    ecx,0x1f
ffff80000080244a:	c1 e9 1b             	shr    ecx,0x1b
ffff80000080244d:	01 c8                	add    eax,ecx
ffff80000080244f:	83 e0 1f             	and    eax,0x1f
ffff800000802452:	29 c8                	sub    eax,ecx
ffff800000802454:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
ffff800000802457:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff80000080245e:	ff ff ff 
ffff800000802461:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802465:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802468:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080246b:	48 98                	cdqe   
ffff80000080246d:	48 c1 e0 02          	shl    rax,0x2
ffff800000802471:	48 01 c8             	add    rax,rcx
ffff800000802474:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802476:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802479:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080247e:	89 c1                	mov    ecx,eax
ffff800000802480:	d3 e7                	shl    edi,cl
ffff800000802482:	89 f8                	mov    eax,edi
ffff800000802484:	f7 d0                	not    eax
ffff800000802486:	89 c1                	mov    ecx,eax
ffff800000802488:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff80000080248f:	ff ff ff 
ffff800000802492:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802496:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802499:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080249c:	48 98                	cdqe   
ffff80000080249e:	48 c1 e0 02          	shl    rax,0x2
ffff8000008024a2:	48 01 d0             	add    rax,rdx
ffff8000008024a5:	21 ce                	and    esi,ecx
ffff8000008024a7:	89 f2                	mov    edx,esi
ffff8000008024a9:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
}
ffff8000008024ab:	90                   	nop
ffff8000008024ac:	5d                   	pop    rbp
ffff8000008024ad:	c3                   	ret    

ffff8000008024ae <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
void page_err(){
ffff8000008024ae:	f3 0f 1e fa          	endbr64 
ffff8000008024b2:	55                   	push   rbp
ffff8000008024b3:	48 89 e5             	mov    rbp,rsp
ffff8000008024b6:	41 57                	push   r15
ffff8000008024b8:	41 55                	push   r13
ffff8000008024ba:	41 54                	push   r12
ffff8000008024bc:	53                   	push   rbx
ffff8000008024bd:	48 83 ec 20          	sub    rsp,0x20
ffff8000008024c1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008024c1 <page_err+0x13>
ffff8000008024c8:	49 bb 67 04 02 00 00 	movabs r11,0x20467
ffff8000008024cf:	00 00 00 
ffff8000008024d2:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:211
    asm("cli");
ffff8000008024d5:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:212
    printf("page err\n");
ffff8000008024d6:	48 b8 cd d3 ff ff ff 	movabs rax,0xffffffffffffd3cd
ffff8000008024dd:	ff ff ff 
ffff8000008024e0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008024e4:	48 89 c7             	mov    rdi,rax
ffff8000008024e7:	49 89 df             	mov    r15,rbx
ffff8000008024ea:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024ef:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff8000008024f6:	ff ff ff 
ffff8000008024f9:	48 01 da             	add    rdx,rbx
ffff8000008024fc:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:213
    unsigned long err_code=0,l_addr=0;
ffff8000008024fe:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000802505:	00 
ffff800000802506:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080250d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:214
    asm volatile("mov 0(%%rbp),%0":"=r"(err_code));
ffff80000080250e:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
ffff800000802512:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215
    asm volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
ffff800000802516:	0f 20 d0             	mov    rax,cr2
ffff800000802519:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:216
    int p=err_code&1;
ffff80000080251d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802521:	83 e0 01             	and    eax,0x1
ffff800000802524:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:218

    if(!p)
ffff800000802527:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080252b:	75 72                	jne    ffff80000080259f <page_err+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:225
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        //在进程的页表中申请新页
        smmap(get_phyaddr(req_a_page()),l_addr&~0xfff,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff80000080252d:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000802534:	ff ff ff 
ffff800000802537:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080253b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080253e:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000802545:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000802549:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080254f:	49 89 c5             	mov    r13,rax
ffff800000802552:	49 89 df             	mov    r15,rbx
ffff800000802555:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080255a:	48 ba 69 02 fe ff ff 	movabs rdx,0xfffffffffffe0269
ffff800000802561:	ff ff ff 
ffff800000802564:	48 01 da             	add    rdx,rbx
ffff800000802567:	ff d2                	call   rdx
ffff800000802569:	89 c7                	mov    edi,eax
ffff80000080256b:	49 89 df             	mov    r15,rbx
ffff80000080256e:	48 b8 56 06 fe ff ff 	movabs rax,0xfffffffffffe0656
ffff800000802575:	ff ff ff 
ffff800000802578:	48 01 d8             	add    rax,rbx
ffff80000080257b:	ff d0                	call   rax
ffff80000080257d:	48 98                	cdqe   
ffff80000080257f:	4c 89 e1             	mov    rcx,r12
ffff800000802582:	ba 07 00 00 00       	mov    edx,0x7
ffff800000802587:	4c 89 ee             	mov    rsi,r13
ffff80000080258a:	48 89 c7             	mov    rdi,rax
ffff80000080258d:	49 89 df             	mov    r15,rbx
ffff800000802590:	48 b8 9a f2 fd ff ff 	movabs rax,0xfffffffffffdf29a
ffff800000802597:	ff ff ff 
ffff80000080259a:	48 01 d8             	add    rax,rbx
ffff80000080259d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
ffff80000080259f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008025a3:	83 e0 02             	and    eax,0x2
ffff8000008025a6:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244
    if(p)printf("when writing\n");else //puts("when reading");
ffff8000008025a9:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008025ad:	74 2a                	je     ffff8000008025d9 <page_err+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244 (discriminator 1)
ffff8000008025af:	48 b8 d7 d3 ff ff ff 	movabs rax,0xffffffffffffd3d7
ffff8000008025b6:	ff ff ff 
ffff8000008025b9:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008025bd:	48 89 c7             	mov    rdi,rax
ffff8000008025c0:	49 89 df             	mov    r15,rbx
ffff8000008025c3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008025c8:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff8000008025cf:	ff ff ff 
ffff8000008025d2:	48 01 da             	add    rdx,rbx
ffff8000008025d5:	ff d2                	call   rdx
ffff8000008025d7:	eb 0a                	jmp    ffff8000008025e3 <page_err+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245
    p=err_code&4;
ffff8000008025d9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008025dd:	83 e0 04             	and    eax,0x4
ffff8000008025e0:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246
    if(!p)printf("supervisor mode\n");else //puts("user mode");
ffff8000008025e3:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008025e7:	75 2a                	jne    ffff800000802613 <page_err+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246 (discriminator 1)
ffff8000008025e9:	48 b8 e5 d3 ff ff ff 	movabs rax,0xffffffffffffd3e5
ffff8000008025f0:	ff ff ff 
ffff8000008025f3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008025f7:	48 89 c7             	mov    rdi,rax
ffff8000008025fa:	49 89 df             	mov    r15,rbx
ffff8000008025fd:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802602:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff800000802609:	ff ff ff 
ffff80000080260c:	48 01 da             	add    rdx,rbx
ffff80000080260f:	ff d2                	call   rdx
ffff800000802611:	eb 0a                	jmp    ffff80000080261d <page_err+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
    p=err_code&16;
ffff800000802613:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802617:	83 e0 10             	and    eax,0x10
ffff80000080261a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248
    if(p)printf("an instruction tries to fetch\n");
ffff80000080261d:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000802621:	74 28                	je     ffff80000080264b <page_err+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248 (discriminator 1)
ffff800000802623:	48 b8 f8 d3 ff ff ff 	movabs rax,0xffffffffffffd3f8
ffff80000080262a:	ff ff ff 
ffff80000080262d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802631:	48 89 c7             	mov    rdi,rax
ffff800000802634:	49 89 df             	mov    r15,rbx
ffff800000802637:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080263c:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff800000802643:	ff ff ff 
ffff800000802646:	48 01 da             	add    rdx,rbx
ffff800000802649:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:249
    unsigned int addr=0;
ffff80000080264b:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:250
    asm volatile("mov 8(%%rbp),%0":"=r"(addr));
ffff800000802652:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
ffff800000802655:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:251
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
ffff800000802658:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080265c:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080265f:	89 c6                	mov    esi,eax
ffff800000802661:	48 b8 18 d4 ff ff ff 	movabs rax,0xffffffffffffd418
ffff800000802668:	ff ff ff 
ffff80000080266b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080266f:	48 89 c7             	mov    rdi,rax
ffff800000802672:	49 89 df             	mov    r15,rbx
ffff800000802675:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080267a:	48 b9 94 ee fd ff ff 	movabs rcx,0xfffffffffffdee94
ffff800000802681:	ff ff ff 
ffff800000802684:	48 01 d9             	add    rcx,rbx
ffff800000802687:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:263
    }*/
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
ffff800000802689:	49 89 df             	mov    r15,rbx
ffff80000080268c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802691:	48 ba 46 77 fe ff ff 	movabs rdx,0xfffffffffffe7746
ffff800000802698:	ff ff ff 
ffff80000080269b:	48 01 da             	add    rdx,rbx
ffff80000080269e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:265
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
ffff8000008026a0:	fb                   	sti    
ffff8000008026a1:	c9                   	leave  
ffff8000008026a2:	48 83 c4 08          	add    rsp,0x8
ffff8000008026a6:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:266
}
ffff8000008026a8:	90                   	nop
ffff8000008026a9:	48 83 c4 20          	add    rsp,0x20
ffff8000008026ad:	5b                   	pop    rbx
ffff8000008026ae:	41 5c                	pop    r12
ffff8000008026b0:	41 5d                	pop    r13
ffff8000008026b2:	41 5f                	pop    r15
ffff8000008026b4:	5d                   	pop    rbp
ffff8000008026b5:	c3                   	ret    

ffff8000008026b6 <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:268
void init_memory()
{
ffff8000008026b6:	f3 0f 1e fa          	endbr64 
ffff8000008026ba:	55                   	push   rbp
ffff8000008026bb:	48 89 e5             	mov    rbp,rsp
ffff8000008026be:	41 57                	push   r15
ffff8000008026c0:	53                   	push   rbx
ffff8000008026c1:	48 83 ec 60          	sub    rsp,0x60
ffff8000008026c5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008026c5 <init_memory+0xf>
ffff8000008026cc:	49 bb 63 02 02 00 00 	movabs r11,0x20263
ffff8000008026d3:	00 00 00 
ffff8000008026d6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:271
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取可用内存大小mem_size
    size_t tot_mem_size=mmap_struct[mmap_t_i-1].base+mmap_struct[mmap_t_i-1].len,mem_size=0;
ffff8000008026d9:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff8000008026e0:	ff ff ff 
ffff8000008026e3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026e7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008026e9:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008026ec:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff8000008026f3:	ff ff ff 
ffff8000008026f6:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008026fa:	48 63 d2             	movsxd rdx,edx
ffff8000008026fd:	48 89 d0             	mov    rax,rdx
ffff800000802700:	48 01 c0             	add    rax,rax
ffff800000802703:	48 01 d0             	add    rax,rdx
ffff800000802706:	48 c1 e0 03          	shl    rax,0x3
ffff80000080270a:	48 01 c8             	add    rax,rcx
ffff80000080270d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802710:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff800000802717:	ff ff ff 
ffff80000080271a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080271e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802720:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802723:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff80000080272a:	ff ff ff 
ffff80000080272d:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802731:	48 63 d2             	movsxd rdx,edx
ffff800000802734:	48 89 d0             	mov    rax,rdx
ffff800000802737:	48 01 c0             	add    rax,rax
ffff80000080273a:	48 01 d0             	add    rax,rdx
ffff80000080273d:	48 c1 e0 03          	shl    rax,0x3
ffff800000802741:	48 01 f0             	add    rax,rsi
ffff800000802744:	48 83 c0 08          	add    rax,0x8
ffff800000802748:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080274b:	48 01 c8             	add    rax,rcx
ffff80000080274e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff800000802752:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000802759:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272
    for(int i=0;i<mmap_t_i;i++)
ffff80000080275a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000802761:	eb 6b                	jmp    ffff8000008027ce <init_memory+0x118>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274
    {
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff800000802763:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff80000080276a:	ff ff ff 
ffff80000080276d:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802771:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802774:	48 63 d0             	movsxd rdx,eax
ffff800000802777:	48 89 d0             	mov    rax,rdx
ffff80000080277a:	48 01 c0             	add    rax,rax
ffff80000080277d:	48 01 d0             	add    rax,rdx
ffff800000802780:	48 c1 e0 03          	shl    rax,0x3
ffff800000802784:	48 01 c8             	add    rax,rcx
ffff800000802787:	48 83 c0 10          	add    rax,0x10
ffff80000080278b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080278e:	48 83 f8 01          	cmp    rax,0x1
ffff800000802792:	75 36                	jne    ffff8000008027ca <init_memory+0x114>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:275
            mem_size+=mmap_struct[i].len;
ffff800000802794:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff80000080279b:	ff ff ff 
ffff80000080279e:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008027a2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008027a5:	48 63 d0             	movsxd rdx,eax
ffff8000008027a8:	48 89 d0             	mov    rax,rdx
ffff8000008027ab:	48 01 c0             	add    rax,rax
ffff8000008027ae:	48 01 d0             	add    rax,rdx
ffff8000008027b1:	48 c1 e0 03          	shl    rax,0x3
ffff8000008027b5:	48 01 c8             	add    rax,rcx
ffff8000008027b8:	48 83 c0 08          	add    rax,0x8
ffff8000008027bc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008027bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008027c3:	48 01 d0             	add    rax,rdx
ffff8000008027c6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff8000008027ca:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272 (discriminator 1)
ffff8000008027ce:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff8000008027d5:	ff ff ff 
ffff8000008027d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027dc:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008027de:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008027e1:	7c 80                	jl     ffff800000802763 <init_memory+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:277
    }
    usr_mem_pa=PAGE_4K_ALIGN(mem_size/2);
ffff8000008027e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008027e7:	48 89 c2             	mov    rdx,rax
ffff8000008027ea:	48 c1 ea 3f          	shr    rdx,0x3f
ffff8000008027ee:	48 01 d0             	add    rax,rdx
ffff8000008027f1:	48 d1 f8             	sar    rax,1
ffff8000008027f4:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008027fa:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000802800:	48 89 c2             	mov    rdx,rax
ffff800000802803:	48 b8 f8 fc ff ff ff 	movabs rax,0xfffffffffffffcf8
ffff80000080280a:	ff ff ff 
ffff80000080280d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802811:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:284
    /*
     * 注：物理内存的一半会分给内核。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    pmalloc_entc= tot_mem_size / PAGE_4K_SIZE/32;
ffff800000802814:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802818:	48 8d 90 ff ff 01 00 	lea    rdx,[rax+0x1ffff]
ffff80000080281f:	48 85 c0             	test   rax,rax
ffff800000802822:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000802826:	48 c1 f8 11          	sar    rax,0x11
ffff80000080282a:	89 c2                	mov    edx,eax
ffff80000080282c:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802833:	ff ff ff 
ffff800000802836:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080283a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:285
    int pgc=(tot_mem_size/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
ffff80000080283c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802840:	48 8d 90 ff ff ff 07 	lea    rdx,[rax+0x7ffffff]
ffff800000802847:	48 85 c0             	test   rax,rax
ffff80000080284a:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080284e:	48 c1 f8 1b          	sar    rax,0x1b
ffff800000802852:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
ffff800000802855:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000802858:	c1 f8 05             	sar    eax,0x5
ffff80000080285b:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:290
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
ffff80000080285e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802862:	48 89 c2             	mov    rdx,rax
ffff800000802865:	48 c1 ea 3f          	shr    rdx,0x3f
ffff800000802869:	48 01 d0             	add    rax,rdx
ffff80000080286c:	48 d1 f8             	sar    rax,1
ffff80000080286f:	48 2d 00 00 00 01    	sub    rax,0x1000000
ffff800000802875:	48 8d 90 ff ff 01 00 	lea    rdx,[rax+0x1ffff]
ffff80000080287c:	48 85 c0             	test   rax,rax
ffff80000080287f:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000802883:	48 c1 f8 11          	sar    rax,0x11
ffff800000802887:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291
    size_t vmms=vmec*4/PAGE_4K_SIZE;//位图自己需要多少页
ffff80000080288b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080288f:	48 8d 90 ff 03 00 00 	lea    rdx,[rax+0x3ff]
ffff800000802896:	48 85 c0             	test   rax,rax
ffff800000802899:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080289d:	48 c1 f8 0a          	sar    rax,0xa
ffff8000008028a1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292
    comprintf("tot memsize:0x%l,available size 0x%l,kmalloc pages count:%d,kmalloc bitmap taking 0x%d pages\n", tot_mem_size,mem_size,vmec,vmms);
ffff8000008028a5:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff8000008028a9:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffff8000008028ad:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008028b1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008028b5:	49 89 f0             	mov    r8,rsi
ffff8000008028b8:	48 89 c6             	mov    rsi,rax
ffff8000008028bb:	48 b8 40 d4 ff ff ff 	movabs rax,0xffffffffffffd440
ffff8000008028c2:	ff ff ff 
ffff8000008028c5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008028c9:	48 89 c7             	mov    rdi,rax
ffff8000008028cc:	49 89 df             	mov    r15,rbx
ffff8000008028cf:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008028d4:	49 b9 ac 0c ff ff ff 	movabs r9,0xffffffffffff0cac
ffff8000008028db:	ff ff ff 
ffff8000008028de:	49 01 d9             	add    r9,rbx
ffff8000008028e1:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:293
    if(vmec*4%PAGE_4K_SIZE)
ffff8000008028e4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008028e8:	48 c1 e0 02          	shl    rax,0x2
ffff8000008028ec:	25 fc 0f 00 00       	and    eax,0xffc
ffff8000008028f1:	48 85 c0             	test   rax,rax
ffff8000008028f4:	74 05                	je     ffff8000008028fb <init_memory+0x245>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:294
        vmms++;
ffff8000008028f6:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295
    for(int i=0;i<vmec;i++){
ffff8000008028fb:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000802902:	eb 27                	jmp    ffff80000080292b <init_memory+0x275>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296 (discriminator 3)
        vmalloc_map[i]=0;
ffff800000802904:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff80000080290b:	ff ff ff 
ffff80000080290e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802912:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802915:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000802918:	48 98                	cdqe   
ffff80000080291a:	48 c1 e0 02          	shl    rax,0x2
ffff80000080291e:	48 01 d0             	add    rax,rdx
ffff800000802921:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295 (discriminator 3)
    for(int i=0;i<vmec;i++){
ffff800000802927:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295 (discriminator 1)
ffff80000080292b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080292e:	48 98                	cdqe   
ffff800000802930:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff800000802934:	7f ce                	jg     ffff800000802904 <init_memory+0x24e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:299
    }
    //位图占用前几页
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff800000802936:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000080293d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000802944:	eb 61                	jmp    ffff8000008029a7 <init_memory+0x2f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301
    {
        if(i==32)
ffff800000802946:	83 7d d0 20          	cmp    DWORD PTR [rbp-0x30],0x20
ffff80000080294a:	75 0b                	jne    ffff800000802957 <init_memory+0x2a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303
        {
            i=0;
ffff80000080294c:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:304
            j++;
ffff800000802953:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:306 (discriminator 2)
        }
        vmalloc_map[j]|=1u<<i;
ffff800000802957:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff80000080295e:	ff ff ff 
ffff800000802961:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802965:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802968:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080296b:	48 98                	cdqe   
ffff80000080296d:	48 c1 e0 02          	shl    rax,0x2
ffff800000802971:	48 01 d0             	add    rax,rdx
ffff800000802974:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802976:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802979:	be 01 00 00 00       	mov    esi,0x1
ffff80000080297e:	89 c1                	mov    ecx,eax
ffff800000802980:	d3 e6                	shl    esi,cl
ffff800000802982:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff800000802989:	ff ff ff 
ffff80000080298c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802990:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802993:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802996:	48 98                	cdqe   
ffff800000802998:	48 c1 e0 02          	shl    rax,0x2
ffff80000080299c:	48 01 c8             	add    rax,rcx
ffff80000080299f:	09 f2                	or     edx,esi
ffff8000008029a1:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:299 (discriminator 2)
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff8000008029a3:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:299 (discriminator 1)
ffff8000008029a7:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008029aa:	c1 e0 05             	shl    eax,0x5
ffff8000008029ad:	89 c2                	mov    edx,eax
ffff8000008029af:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008029b2:	01 d0                	add    eax,edx
ffff8000008029b4:	48 98                	cdqe   
ffff8000008029b6:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff8000008029ba:	7f 8a                	jg     ffff800000802946 <init_memory+0x290>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:309
    }
    //kmalloc连续的内存
    page_map=kmallocat(0,pgc);//(unsigned int*)PAGE_4K_ALIGN(0xc00000);
ffff8000008029bc:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff8000008029bf:	89 c6                	mov    esi,eax
ffff8000008029c1:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008029c6:	49 89 df             	mov    r15,rbx
ffff8000008029c9:	48 b8 69 f8 fd ff ff 	movabs rax,0xfffffffffffdf869
ffff8000008029d0:	ff ff ff 
ffff8000008029d3:	48 01 d8             	add    rax,rbx
ffff8000008029d6:	ff d0                	call   rax
ffff8000008029d8:	48 89 c2             	mov    rdx,rax
ffff8000008029db:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008029e2:	ff ff ff 
ffff8000008029e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029e9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310
    int* p=page_map;
ffff8000008029ec:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008029f3:	ff ff ff 
ffff8000008029f6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029fa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008029fd:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:311
    addr_t curp=0;
ffff800000802a01:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000802a08:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313
    //不能使用的内存提前占用掉
    for(int i=0;i<mmap_t_i;i++){
ffff800000802a09:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff800000802a10:	e9 1f 01 00 00       	jmp    ffff800000802b34 <init_memory+0x47e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:314
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff800000802a15:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000802a1c:	ff ff ff 
ffff800000802a1f:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802a23:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802a26:	48 63 d0             	movsxd rdx,eax
ffff800000802a29:	48 89 d0             	mov    rax,rdx
ffff800000802a2c:	48 01 c0             	add    rax,rax
ffff800000802a2f:	48 01 d0             	add    rax,rdx
ffff800000802a32:	48 c1 e0 03          	shl    rax,0x3
ffff800000802a36:	48 01 c8             	add    rax,rcx
ffff800000802a39:	48 83 c0 10          	add    rax,0x10
ffff800000802a3d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802a40:	48 83 f8 01          	cmp    rax,0x1
ffff800000802a44:	0f 84 e5 00 00 00    	je     ffff800000802b2f <init_memory+0x479>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:316
            continue;
        int b=(mmap_struct[i].base-usr_mem_pa)/PAGE_4K_SIZE;
ffff800000802a4a:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000802a51:	ff ff ff 
ffff800000802a54:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802a58:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802a5b:	48 63 d0             	movsxd rdx,eax
ffff800000802a5e:	48 89 d0             	mov    rax,rdx
ffff800000802a61:	48 01 c0             	add    rax,rax
ffff800000802a64:	48 01 d0             	add    rax,rdx
ffff800000802a67:	48 c1 e0 03          	shl    rax,0x3
ffff800000802a6b:	48 01 c8             	add    rax,rcx
ffff800000802a6e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802a71:	48 b8 f8 fc ff ff ff 	movabs rax,0xfffffffffffffcf8
ffff800000802a78:	ff ff ff 
ffff800000802a7b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802a7f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802a82:	48 89 d0             	mov    rax,rdx
ffff800000802a85:	48 29 c8             	sub    rax,rcx
ffff800000802a88:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802a8c:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:317
        int l=mmap_struct[i].len/PAGE_4K_SIZE;
ffff800000802a8f:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000802a96:	ff ff ff 
ffff800000802a99:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802a9d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802aa0:	48 63 d0             	movsxd rdx,eax
ffff800000802aa3:	48 89 d0             	mov    rax,rdx
ffff800000802aa6:	48 01 c0             	add    rax,rax
ffff800000802aa9:	48 01 d0             	add    rax,rdx
ffff800000802aac:	48 c1 e0 03          	shl    rax,0x3
ffff800000802ab0:	48 01 c8             	add    rax,rcx
ffff800000802ab3:	48 83 c0 08          	add    rax,0x8
ffff800000802ab7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802aba:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802abe:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:318
        for(int j=0;j<l;j++){
ffff800000802ac1:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff800000802ac8:	eb 5b                	jmp    ffff800000802b25 <init_memory+0x46f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:319 (discriminator 3)
            p[b+j/32]|=1u<<(j%32);
ffff800000802aca:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802acd:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000802ad0:	85 c0                	test   eax,eax
ffff800000802ad2:	0f 48 c2             	cmovs  eax,edx
ffff800000802ad5:	c1 f8 05             	sar    eax,0x5
ffff800000802ad8:	89 c6                	mov    esi,eax
ffff800000802ada:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000802add:	01 f0                	add    eax,esi
ffff800000802adf:	48 98                	cdqe   
ffff800000802ae1:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000802ae8:	00 
ffff800000802ae9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000802aed:	48 01 d0             	add    rax,rdx
ffff800000802af0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802af2:	89 c7                	mov    edi,eax
ffff800000802af4:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802af7:	83 e0 1f             	and    eax,0x1f
ffff800000802afa:	ba 01 00 00 00       	mov    edx,0x1
ffff800000802aff:	89 c1                	mov    ecx,eax
ffff800000802b01:	d3 e2                	shl    edx,cl
ffff800000802b03:	89 d0                	mov    eax,edx
ffff800000802b05:	09 c7                	or     edi,eax
ffff800000802b07:	89 fa                	mov    edx,edi
ffff800000802b09:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000802b0c:	01 f0                	add    eax,esi
ffff800000802b0e:	48 98                	cdqe   
ffff800000802b10:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
ffff800000802b17:	00 
ffff800000802b18:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000802b1c:	48 01 c8             	add    rax,rcx
ffff800000802b1f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:318 (discriminator 3)
        for(int j=0;j<l;j++){
ffff800000802b21:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:318 (discriminator 1)
ffff800000802b25:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802b28:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
ffff800000802b2b:	7c 9d                	jl     ffff800000802aca <init_memory+0x414>
ffff800000802b2d:	eb 01                	jmp    ffff800000802b30 <init_memory+0x47a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315
            continue;
ffff800000802b2f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++){
ffff800000802b30:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313 (discriminator 1)
ffff800000802b34:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff800000802b3b:	ff ff ff 
ffff800000802b3e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b42:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802b44:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
ffff800000802b47:	0f 8c c8 fe ff ff    	jl     ffff800000802a15 <init_memory+0x35f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:323
        }
    }
    //低1gb提前占用掉 knl
    for(int j=0;j<0x2000;j++){
ffff800000802b4d:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
ffff800000802b54:	eb 27                	jmp    ffff800000802b7d <init_memory+0x4c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:324 (discriminator 3)
        page_map[j]=-1;
ffff800000802b56:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802b5d:	ff ff ff 
ffff800000802b60:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b64:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802b67:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000802b6a:	48 98                	cdqe   
ffff800000802b6c:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b70:	48 01 d0             	add    rax,rdx
ffff800000802b73:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:323 (discriminator 3)
    for(int j=0;j<0x2000;j++){
ffff800000802b79:	83 45 c0 01          	add    DWORD PTR [rbp-0x40],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:323 (discriminator 1)
ffff800000802b7d:	81 7d c0 ff 1f 00 00 	cmp    DWORD PTR [rbp-0x40],0x1fff
ffff800000802b84:	7e d0                	jle    ffff800000802b56 <init_memory+0x4a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:354
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
ffff800000802b86:	90                   	nop
ffff800000802b87:	90                   	nop
ffff800000802b88:	48 83 c4 60          	add    rsp,0x60
ffff800000802b8c:	5b                   	pop    rbx
ffff800000802b8d:	41 5f                	pop    r15
ffff800000802b8f:	5d                   	pop    rbp
ffff800000802b90:	c3                   	ret    

ffff800000802b91 <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:360
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
ffff800000802b91:	f3 0f 1e fa          	endbr64 
ffff800000802b95:	55                   	push   rbp
ffff800000802b96:	48 89 e5             	mov    rbp,rsp
ffff800000802b99:	41 57                	push   r15
ffff800000802b9b:	53                   	push   rbx
ffff800000802b9c:	48 83 ec 10          	sub    rsp,0x10
ffff800000802ba0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802ba0 <req_a_page+0xf>
ffff800000802ba7:	49 bb 88 fd 01 00 00 	movabs r11,0x1fd88
ffff800000802bae:	00 00 00 
ffff800000802bb1:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802bb4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802bbb:	e9 6b 01 00 00       	jmp    ffff800000802d2b <req_a_page+0x19a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362
        for(int j=0;j<32;j++){
ffff800000802bc0:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000802bc7:	e9 51 01 00 00       	jmp    ffff800000802d1d <req_a_page+0x18c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:363
            unsigned int bit=page_map[i]&(1<<j);
ffff800000802bcc:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802bd3:	ff ff ff 
ffff800000802bd6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802bda:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802bdd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802be0:	48 98                	cdqe   
ffff800000802be2:	48 c1 e0 02          	shl    rax,0x2
ffff800000802be6:	48 01 d0             	add    rax,rdx
ffff800000802be9:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802beb:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802bee:	be 01 00 00 00       	mov    esi,0x1
ffff800000802bf3:	89 c1                	mov    ecx,eax
ffff800000802bf5:	d3 e6                	shl    esi,cl
ffff800000802bf7:	89 f0                	mov    eax,esi
ffff800000802bf9:	21 d0                	and    eax,edx
ffff800000802bfb:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364
            if((i*32+j)*4096>=0x100000&&(bit==0u))
ffff800000802bfe:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802c01:	c1 e0 05             	shl    eax,0x5
ffff800000802c04:	89 c2                	mov    edx,eax
ffff800000802c06:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802c09:	01 d0                	add    eax,edx
ffff800000802c0b:	c1 e0 0c             	shl    eax,0xc
ffff800000802c0e:	3d ff ff 0f 00       	cmp    eax,0xfffff
ffff800000802c13:	0f 8e 00 01 00 00    	jle    ffff800000802d19 <req_a_page+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364 (discriminator 1)
ffff800000802c19:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000802c1d:	0f 85 f6 00 00 00    	jne    ffff800000802d19 <req_a_page+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
            {
                comprintf("req_a_page:before:page_map[%d]=0x%x,",i,page_map[i]);
ffff800000802c23:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802c2a:	ff ff ff 
ffff800000802c2d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802c31:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802c34:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802c37:	48 98                	cdqe   
ffff800000802c39:	48 c1 e0 02          	shl    rax,0x2
ffff800000802c3d:	48 01 d0             	add    rax,rdx
ffff800000802c40:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802c42:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802c45:	89 c6                	mov    esi,eax
ffff800000802c47:	48 b8 a0 d4 ff ff ff 	movabs rax,0xffffffffffffd4a0
ffff800000802c4e:	ff ff ff 
ffff800000802c51:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802c55:	48 89 c7             	mov    rdi,rax
ffff800000802c58:	49 89 df             	mov    r15,rbx
ffff800000802c5b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802c60:	48 b9 ac 0c ff ff ff 	movabs rcx,0xffffffffffff0cac
ffff800000802c67:	ff ff ff 
ffff800000802c6a:	48 01 d9             	add    rcx,rbx
ffff800000802c6d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:367
                page_map[i]=page_map[i]|(1<<j);
ffff800000802c6f:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802c76:	ff ff ff 
ffff800000802c79:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802c7d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802c80:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802c83:	48 98                	cdqe   
ffff800000802c85:	48 c1 e0 02          	shl    rax,0x2
ffff800000802c89:	48 01 d0             	add    rax,rdx
ffff800000802c8c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802c8e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802c91:	be 01 00 00 00       	mov    esi,0x1
ffff800000802c96:	89 c1                	mov    ecx,eax
ffff800000802c98:	d3 e6                	shl    esi,cl
ffff800000802c9a:	89 f0                	mov    eax,esi
ffff800000802c9c:	89 c6                	mov    esi,eax
ffff800000802c9e:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802ca5:	ff ff ff 
ffff800000802ca8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802cac:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802caf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802cb2:	48 98                	cdqe   
ffff800000802cb4:	48 c1 e0 02          	shl    rax,0x2
ffff800000802cb8:	48 01 c8             	add    rax,rcx
ffff800000802cbb:	09 f2                	or     edx,esi
ffff800000802cbd:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:368
                comprintf("now = 0x%x",page_map[i]);
ffff800000802cbf:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802cc6:	ff ff ff 
ffff800000802cc9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802ccd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802cd0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802cd3:	48 98                	cdqe   
ffff800000802cd5:	48 c1 e0 02          	shl    rax,0x2
ffff800000802cd9:	48 01 d0             	add    rax,rdx
ffff800000802cdc:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802cde:	89 c6                	mov    esi,eax
ffff800000802ce0:	48 b8 c5 d4 ff ff ff 	movabs rax,0xffffffffffffd4c5
ffff800000802ce7:	ff ff ff 
ffff800000802cea:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802cee:	48 89 c7             	mov    rdi,rax
ffff800000802cf1:	49 89 df             	mov    r15,rbx
ffff800000802cf4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802cf9:	48 ba ac 0c ff ff ff 	movabs rdx,0xffffffffffff0cac
ffff800000802d00:	ff ff ff 
ffff800000802d03:	48 01 da             	add    rdx,rbx
ffff800000802d06:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:369
                return i*32+j;//num of page
ffff800000802d08:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802d0b:	c1 e0 05             	shl    eax,0x5
ffff800000802d0e:	89 c2                	mov    edx,eax
ffff800000802d10:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802d13:	01 d0                	add    eax,edx
ffff800000802d15:	48 98                	cdqe   
ffff800000802d17:	eb 32                	jmp    ffff800000802d4b <req_a_page+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362 (discriminator 2)
        for(int j=0;j<32;j++){
ffff800000802d19:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362 (discriminator 1)
ffff800000802d1d:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000802d21:	0f 8e a5 fe ff ff    	jle    ffff800000802bcc <req_a_page+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361 (discriminator 2)
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802d27:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361 (discriminator 1)
ffff800000802d2b:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802d32:	ff ff ff 
ffff800000802d35:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d39:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802d3b:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffff800000802d3e:	0f 8c 7c fe ff ff    	jl     ffff800000802bc0 <req_a_page+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:374

            }
        }
    }
    return -1;
ffff800000802d44:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:375
}
ffff800000802d4b:	48 83 c4 10          	add    rsp,0x10
ffff800000802d4f:	5b                   	pop    rbx
ffff800000802d50:	41 5f                	pop    r15
ffff800000802d52:	5d                   	pop    rbp
ffff800000802d53:	c3                   	ret    

ffff800000802d54 <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:377

void * pmalloc(){
ffff800000802d54:	f3 0f 1e fa          	endbr64 
ffff800000802d58:	55                   	push   rbp
ffff800000802d59:	48 89 e5             	mov    rbp,rsp
ffff800000802d5c:	41 57                	push   r15
ffff800000802d5e:	53                   	push   rbx
ffff800000802d5f:	48 83 ec 10          	sub    rsp,0x10
ffff800000802d63:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802d63 <pmalloc+0xf>
ffff800000802d6a:	49 bb c5 fb 01 00 00 	movabs r11,0x1fbc5
ffff800000802d71:	00 00 00 
ffff800000802d74:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:378
    void *ret=(void*)(get_phyaddr(req_a_page()));
ffff800000802d77:	49 89 df             	mov    r15,rbx
ffff800000802d7a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802d7f:	48 ba 69 02 fe ff ff 	movabs rdx,0xfffffffffffe0269
ffff800000802d86:	ff ff ff 
ffff800000802d89:	48 01 da             	add    rdx,rbx
ffff800000802d8c:	ff d2                	call   rdx
ffff800000802d8e:	89 c7                	mov    edi,eax
ffff800000802d90:	49 89 df             	mov    r15,rbx
ffff800000802d93:	48 b8 56 06 fe ff ff 	movabs rax,0xfffffffffffe0656
ffff800000802d9a:	ff ff ff 
ffff800000802d9d:	48 01 d8             	add    rax,rbx
ffff800000802da0:	ff d0                	call   rax
ffff800000802da2:	48 98                	cdqe   
ffff800000802da4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:379
    comprintf("pmalloc():%l\n",ret);
ffff800000802da8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802dac:	48 89 c6             	mov    rsi,rax
ffff800000802daf:	48 b8 d0 d4 ff ff ff 	movabs rax,0xffffffffffffd4d0
ffff800000802db6:	ff ff ff 
ffff800000802db9:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802dbd:	48 89 c7             	mov    rdi,rax
ffff800000802dc0:	49 89 df             	mov    r15,rbx
ffff800000802dc3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802dc8:	48 ba ac 0c ff ff ff 	movabs rdx,0xffffffffffff0cac
ffff800000802dcf:	ff ff ff 
ffff800000802dd2:	48 01 da             	add    rdx,rbx
ffff800000802dd5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:380
    return ret;
ffff800000802dd7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:381
}
ffff800000802ddb:	48 83 c4 10          	add    rsp,0x10
ffff800000802ddf:	5b                   	pop    rbx
ffff800000802de0:	41 5f                	pop    r15
ffff800000802de2:	5d                   	pop    rbp
ffff800000802de3:	c3                   	ret    

ffff800000802de4 <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:382
int free_page(char *paddr){
ffff800000802de4:	f3 0f 1e fa          	endbr64 
ffff800000802de8:	55                   	push   rbp
ffff800000802de9:	48 89 e5             	mov    rbp,rsp
ffff800000802dec:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802dec <free_page+0x8>
ffff800000802df3:	49 bb 3c fb 01 00 00 	movabs r11,0x1fb3c
ffff800000802dfa:	00 00 00 
ffff800000802dfd:	4c 01 da             	add    rdx,r11
ffff800000802e00:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:383
    int num=(int)paddr/4096;
ffff800000802e04:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e08:	8d 88 ff 0f 00 00    	lea    ecx,[rax+0xfff]
ffff800000802e0e:	85 c0                	test   eax,eax
ffff800000802e10:	0f 48 c1             	cmovs  eax,ecx
ffff800000802e13:	c1 f8 0c             	sar    eax,0xc
ffff800000802e16:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:384
    int n=num/32;
ffff800000802e19:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802e1c:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802e1f:	85 c0                	test   eax,eax
ffff800000802e21:	0f 48 c1             	cmovs  eax,ecx
ffff800000802e24:	c1 f8 05             	sar    eax,0x5
ffff800000802e27:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:385
    int r=num%32;
ffff800000802e2a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802e2d:	89 c1                	mov    ecx,eax
ffff800000802e2f:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802e32:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802e35:	01 c8                	add    eax,ecx
ffff800000802e37:	83 e0 1f             	and    eax,0x1f
ffff800000802e3a:	29 c8                	sub    eax,ecx
ffff800000802e3c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:386
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
ffff800000802e3f:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802e46:	ff ff ff 
ffff800000802e49:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802e4d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802e50:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802e53:	48 98                	cdqe   
ffff800000802e55:	48 c1 e0 02          	shl    rax,0x2
ffff800000802e59:	48 01 c8             	add    rax,rcx
ffff800000802e5c:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802e5e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802e61:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802e66:	89 c1                	mov    ecx,eax
ffff800000802e68:	d3 e7                	shl    edi,cl
ffff800000802e6a:	89 f8                	mov    eax,edi
ffff800000802e6c:	f7 d0                	not    eax
ffff800000802e6e:	89 c1                	mov    ecx,eax
ffff800000802e70:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802e77:	ff ff ff 
ffff800000802e7a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802e7e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e81:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802e84:	48 98                	cdqe   
ffff800000802e86:	48 c1 e0 02          	shl    rax,0x2
ffff800000802e8a:	48 01 d0             	add    rax,rdx
ffff800000802e8d:	21 ce                	and    esi,ecx
ffff800000802e8f:	89 f2                	mov    edx,esi
ffff800000802e91:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387
}
ffff800000802e93:	90                   	nop
ffff800000802e94:	5d                   	pop    rbp
ffff800000802e95:	c3                   	ret    

ffff800000802e96 <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:389

int free_pages_at(int base,int pgn){
ffff800000802e96:	f3 0f 1e fa          	endbr64 
ffff800000802e9a:	55                   	push   rbp
ffff800000802e9b:	48 89 e5             	mov    rbp,rsp
ffff800000802e9e:	41 57                	push   r15
ffff800000802ea0:	53                   	push   rbx
ffff800000802ea1:	48 83 ec 20          	sub    rsp,0x20
ffff800000802ea5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802ea5 <free_pages_at+0xf>
ffff800000802eac:	49 bb 83 fa 01 00 00 	movabs r11,0x1fa83
ffff800000802eb3:	00 00 00 
ffff800000802eb6:	4c 01 db             	add    rbx,r11
ffff800000802eb9:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000802ebc:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390
    for(int i=0;i<pgn;i++){
ffff800000802ebf:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802ec6:	eb 28                	jmp    ffff800000802ef0 <free_pages_at+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:391 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
ffff800000802ec8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802ecb:	c1 e0 0c             	shl    eax,0xc
ffff800000802ece:	89 c2                	mov    edx,eax
ffff800000802ed0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802ed3:	01 d0                	add    eax,edx
ffff800000802ed5:	48 98                	cdqe   
ffff800000802ed7:	48 89 c7             	mov    rdi,rax
ffff800000802eda:	49 89 df             	mov    r15,rbx
ffff800000802edd:	48 b8 bc 04 fe ff ff 	movabs rax,0xfffffffffffe04bc
ffff800000802ee4:	ff ff ff 
ffff800000802ee7:	48 01 d8             	add    rax,rbx
ffff800000802eea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390 (discriminator 3)
    for(int i=0;i<pgn;i++){
ffff800000802eec:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390 (discriminator 1)
ffff800000802ef0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802ef3:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000802ef6:	7c d0                	jl     ffff800000802ec8 <free_pages_at+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:393
    }
}
ffff800000802ef8:	90                   	nop
ffff800000802ef9:	48 83 c4 20          	add    rsp,0x20
ffff800000802efd:	5b                   	pop    rbx
ffff800000802efe:	41 5f                	pop    r15
ffff800000802f00:	5d                   	pop    rbp
ffff800000802f01:	c3                   	ret    

ffff800000802f02 <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:394
int check_page(int num){
ffff800000802f02:	f3 0f 1e fa          	endbr64 
ffff800000802f06:	55                   	push   rbp
ffff800000802f07:	48 89 e5             	mov    rbp,rsp
ffff800000802f0a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802f0a <check_page+0x8>
ffff800000802f11:	49 bb 1e fa 01 00 00 	movabs r11,0x1fa1e
ffff800000802f18:	00 00 00 
ffff800000802f1b:	4c 01 da             	add    rdx,r11
ffff800000802f1e:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:395
    int n=num/32;
ffff800000802f21:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802f24:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802f27:	85 c0                	test   eax,eax
ffff800000802f29:	0f 48 c1             	cmovs  eax,ecx
ffff800000802f2c:	c1 f8 05             	sar    eax,0x5
ffff800000802f2f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:396
    int r=num%32;
ffff800000802f32:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802f35:	89 c1                	mov    ecx,eax
ffff800000802f37:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802f3a:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802f3d:	01 c8                	add    eax,ecx
ffff800000802f3f:	83 e0 1f             	and    eax,0x1f
ffff800000802f42:	29 c8                	sub    eax,ecx
ffff800000802f44:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:397
    int bit=page_map[n]&(1<<r);
ffff800000802f47:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802f4e:	ff ff ff 
ffff800000802f51:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802f55:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f58:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802f5b:	48 98                	cdqe   
ffff800000802f5d:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f61:	48 01 d0             	add    rax,rdx
ffff800000802f64:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802f66:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802f69:	be 01 00 00 00       	mov    esi,0x1
ffff800000802f6e:	89 c1                	mov    ecx,eax
ffff800000802f70:	d3 e6                	shl    esi,cl
ffff800000802f72:	89 f0                	mov    eax,esi
ffff800000802f74:	21 d0                	and    eax,edx
ffff800000802f76:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:398
    return bit;
ffff800000802f79:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:399
}
ffff800000802f7c:	5d                   	pop    rbp
ffff800000802f7d:	c3                   	ret    

ffff800000802f7e <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:403
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
ffff800000802f7e:	f3 0f 1e fa          	endbr64 
ffff800000802f82:	55                   	push   rbp
ffff800000802f83:	48 89 e5             	mov    rbp,rsp
ffff800000802f86:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802f86 <get_phyaddr+0x8>
ffff800000802f8d:	49 bb a2 f9 01 00 00 	movabs r11,0x1f9a2
ffff800000802f94:	00 00 00 
ffff800000802f97:	4c 01 d8             	add    rax,r11
ffff800000802f9a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:404
    return num*0x1000;
ffff800000802f9d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802fa0:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:405
}
ffff800000802fa3:	5d                   	pop    rbp
ffff800000802fa4:	c3                   	ret    

ffff800000802fa5 <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:408

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
ffff800000802fa5:	f3 0f 1e fa          	endbr64 
ffff800000802fa9:	55                   	push   rbp
ffff800000802faa:	48 89 e5             	mov    rbp,rsp
ffff800000802fad:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802fad <set_page_item+0x8>
ffff800000802fb4:	49 bb 7b f9 01 00 00 	movabs r11,0x1f97b
ffff800000802fbb:	00 00 00 
ffff800000802fbe:	4c 01 d8             	add    rax,r11
ffff800000802fc1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000802fc5:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000802fc8:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:409
    *item_addr=0;
ffff800000802fcb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802fcf:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:410
    *item_addr|=phy_addr&0xfffff000;
ffff800000802fd6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802fda:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802fdd:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802fe0:	89 c0                	mov    eax,eax
ffff800000802fe2:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000802fe7:	48 09 c2             	or     rdx,rax
ffff800000802fea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802fee:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:411
    *item_addr|=attr;
ffff800000802ff1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802ff5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802ff8:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffff800000802ffb:	48 98                	cdqe   
ffff800000802ffd:	48 09 c2             	or     rdx,rax
ffff800000803000:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803004:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:412
}
ffff800000803007:	90                   	nop
ffff800000803008:	5d                   	pop    rbp
ffff800000803009:	c3                   	ret    

ffff80000080300a <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:414
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
ffff80000080300a:	f3 0f 1e fa          	endbr64 
ffff80000080300e:	55                   	push   rbp
ffff80000080300f:	48 89 e5             	mov    rbp,rsp
ffff800000803012:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803012 <set_1gb_pdpt+0x8>
ffff800000803019:	49 bb 16 f9 01 00 00 	movabs r11,0x1f916
ffff800000803020:	00 00 00 
ffff800000803023:	4c 01 d8             	add    rax,r11
ffff800000803026:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080302a:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff80000080302d:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:415
    *ppdpt=0;
ffff800000803030:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803034:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:416
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
ffff80000080303b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080303f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803042:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000803045:	0c 81                	or     al,0x81
ffff800000803047:	89 c0                	mov    eax,eax
ffff800000803049:	48 09 c2             	or     rdx,rax
ffff80000080304c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803050:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:417
    unsigned int hipa=pa&0xffffc0000000ul;
ffff800000803053:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000803056:	25 00 00 00 c0       	and    eax,0xc0000000
ffff80000080305b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:418
    *ppdpt|=hipa;
ffff80000080305e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803062:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803065:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803068:	48 09 c2             	or     rdx,rax
ffff80000080306b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080306f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:419
}
ffff800000803072:	90                   	nop
ffff800000803073:	5d                   	pop    rbp
ffff800000803074:	c3                   	ret    

ffff800000803075 <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:421
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
ffff800000803075:	f3 0f 1e fa          	endbr64 
ffff800000803079:	55                   	push   rbp
ffff80000080307a:	48 89 e5             	mov    rbp,rsp
ffff80000080307d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080307d <set_2mb_pde+0x8>
ffff800000803084:	49 bb ab f8 01 00 00 	movabs r11,0x1f8ab
ffff80000080308b:	00 00 00 
ffff80000080308e:	4c 01 d8             	add    rax,r11
ffff800000803091:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000803095:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000803098:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:422
    *pde=0;
ffff80000080309b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080309f:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:423
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
ffff8000008030a6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008030aa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008030ad:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008030b0:	0d 81 10 00 00       	or     eax,0x1081
ffff8000008030b5:	48 98                	cdqe   
ffff8000008030b7:	48 09 c2             	or     rdx,rax
ffff8000008030ba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008030be:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:424
    unsigned int hipa=pa&0xffc00000;
ffff8000008030c1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008030c4:	25 00 00 c0 ff       	and    eax,0xffc00000
ffff8000008030c9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:425
    *pde|=hipa;
ffff8000008030cc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008030d0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008030d3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008030d6:	48 09 c2             	or     rdx,rax
ffff8000008030d9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008030dd:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:426
}
ffff8000008030e0:	90                   	nop
ffff8000008030e1:	5d                   	pop    rbp
ffff8000008030e2:	c3                   	ret    

ffff8000008030e3 <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:447
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
ffff8000008030e3:	f3 0f 1e fa          	endbr64 
ffff8000008030e7:	55                   	push   rbp
ffff8000008030e8:	48 89 e5             	mov    rbp,rsp
ffff8000008030eb:	41 57                	push   r15
ffff8000008030ed:	53                   	push   rbx
ffff8000008030ee:	48 83 ec 20          	sub    rsp,0x20
ffff8000008030f2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008030f2 <req_page_at+0xf>
ffff8000008030f9:	49 bb 36 f8 01 00 00 	movabs r11,0x1f836
ffff800000803100:	00 00 00 
ffff800000803103:	4c 01 db             	add    rbx,r11
ffff800000803106:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080310a:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:448
    if(base==0)//不指定地址
ffff80000080310d:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000803112:	75 32                	jne    ffff800000803146 <req_page_at+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450
    {
        return get_phyaddr(req_a_page());
ffff800000803114:	49 89 df             	mov    r15,rbx
ffff800000803117:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080311c:	48 ba 69 02 fe ff ff 	movabs rdx,0xfffffffffffe0269
ffff800000803123:	ff ff ff 
ffff800000803126:	48 01 da             	add    rdx,rbx
ffff800000803129:	ff d2                	call   rdx
ffff80000080312b:	89 c7                	mov    edi,eax
ffff80000080312d:	49 89 df             	mov    r15,rbx
ffff800000803130:	48 b8 56 06 fe ff ff 	movabs rax,0xfffffffffffe0656
ffff800000803137:	ff ff ff 
ffff80000080313a:	48 01 d8             	add    rax,rbx
ffff80000080313d:	ff d0                	call   rax
ffff80000080313f:	48 98                	cdqe   
ffff800000803141:	e9 c6 00 00 00       	jmp    ffff80000080320c <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:452
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
ffff800000803146:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080314a:	89 c2                	mov    edx,eax
ffff80000080314c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080314f:	89 c6                	mov    esi,eax
ffff800000803151:	89 d7                	mov    edi,edx
ffff800000803153:	49 89 df             	mov    r15,rbx
ffff800000803156:	48 b8 be 09 fe ff ff 	movabs rax,0xfffffffffffe09be
ffff80000080315d:	ff ff ff 
ffff800000803160:	48 01 d8             	add    rax,rbx
ffff800000803163:	ff d0                	call   rax
ffff800000803165:	85 c0                	test   eax,eax
ffff800000803167:	75 0c                	jne    ffff800000803175 <req_page_at+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:452 (discriminator 1)
ffff800000803169:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000803170:	e9 97 00 00 00       	jmp    ffff80000080320c <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453
    int pgni=base/4096;
ffff800000803175:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803179:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080317d:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454
    int pgi=pgni/32;
ffff800000803180:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803183:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000803186:	85 c0                	test   eax,eax
ffff800000803188:	0f 48 c2             	cmovs  eax,edx
ffff80000080318b:	c1 f8 05             	sar    eax,0x5
ffff80000080318e:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:455
    int pgj=pgni%32;
ffff800000803191:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803194:	99                   	cdq    
ffff800000803195:	c1 ea 1b             	shr    edx,0x1b
ffff800000803198:	01 d0                	add    eax,edx
ffff80000080319a:	83 e0 1f             	and    eax,0x1f
ffff80000080319d:	29 d0                	sub    eax,edx
ffff80000080319f:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456
    for(int i=0;i<pgn;i++)
ffff8000008031a2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008031a9:	eb 54                	jmp    ffff8000008031ff <req_page_at+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:458 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
ffff8000008031ab:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008031b2:	ff ff ff 
ffff8000008031b5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008031b9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008031bc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008031bf:	48 98                	cdqe   
ffff8000008031c1:	48 c1 e0 02          	shl    rax,0x2
ffff8000008031c5:	48 01 d0             	add    rax,rdx
ffff8000008031c8:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008031ca:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008031cd:	be 01 00 00 00       	mov    esi,0x1
ffff8000008031d2:	89 c1                	mov    ecx,eax
ffff8000008031d4:	d3 e6                	shl    esi,cl
ffff8000008031d6:	89 f0                	mov    eax,esi
ffff8000008031d8:	89 c6                	mov    esi,eax
ffff8000008031da:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008031e1:	ff ff ff 
ffff8000008031e4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008031e8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008031eb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008031ee:	48 98                	cdqe   
ffff8000008031f0:	48 c1 e0 02          	shl    rax,0x2
ffff8000008031f4:	48 01 c8             	add    rax,rcx
ffff8000008031f7:	09 f2                	or     edx,esi
ffff8000008031f9:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456 (discriminator 3)
    for(int i=0;i<pgn;i++)
ffff8000008031fb:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456 (discriminator 1)
ffff8000008031ff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803202:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000803205:	7c a4                	jl     ffff8000008031ab <req_page_at+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:460
    }
    return 0;
ffff800000803207:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:462

}
ffff80000080320c:	48 83 c4 20          	add    rsp,0x20
ffff800000803210:	5b                   	pop    rbx
ffff800000803211:	41 5f                	pop    r15
ffff800000803213:	5d                   	pop    rbp
ffff800000803214:	c3                   	ret    

ffff800000803215 <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:464
int chk_vm(int base, int pgn)
{
ffff800000803215:	f3 0f 1e fa          	endbr64 
ffff800000803219:	55                   	push   rbp
ffff80000080321a:	48 89 e5             	mov    rbp,rsp
ffff80000080321d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080321d <chk_vm+0x8>
ffff800000803224:	49 bb 0b f7 01 00 00 	movabs r11,0x1f70b
ffff80000080322b:	00 00 00 
ffff80000080322e:	4c 01 d8             	add    rax,r11
ffff800000803231:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000803234:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465
    int *pdet=0;
ffff800000803237:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080323e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466
    asm volatile("mov %%cr3,%0":"=r"(pdet));
ffff80000080323f:	0f 20 d8             	mov    rax,cr3
ffff800000803242:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
ffff800000803246:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803249:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff80000080324f:	85 c0                	test   eax,eax
ffff800000803251:	0f 48 c2             	cmovs  eax,edx
ffff800000803254:	c1 f8 15             	sar    eax,0x15
ffff800000803257:	48 98                	cdqe   
ffff800000803259:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803260:	00 
ffff800000803261:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803265:	48 01 d0             	add    rax,rdx
ffff800000803268:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080326a:	89 c0                	mov    eax,eax
ffff80000080326c:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000803271:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:468
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000803275:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803278:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff80000080327e:	85 c0                	test   eax,eax
ffff800000803280:	0f 48 c2             	cmovs  eax,edx
ffff800000803283:	c1 f8 15             	sar    eax,0x15
ffff800000803286:	48 98                	cdqe   
ffff800000803288:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080328f:	00 
ffff800000803290:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803294:	48 01 d0             	add    rax,rdx
ffff800000803297:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803299:	83 e0 01             	and    eax,0x1
ffff80000080329c:	85 c0                	test   eax,eax
ffff80000080329e:	74 38                	je     ffff8000008032d8 <chk_vm+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:469 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
ffff8000008032a0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008032a3:	99                   	cdq    
ffff8000008032a4:	c1 ea 0b             	shr    edx,0xb
ffff8000008032a7:	01 d0                	add    eax,edx
ffff8000008032a9:	25 ff ff 1f 00       	and    eax,0x1fffff
ffff8000008032ae:	29 d0                	sub    eax,edx
ffff8000008032b0:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008032b6:	85 c0                	test   eax,eax
ffff8000008032b8:	0f 48 c2             	cmovs  eax,edx
ffff8000008032bb:	c1 f8 0c             	sar    eax,0xc
ffff8000008032be:	48 98                	cdqe   
ffff8000008032c0:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff8000008032c7:	00 
ffff8000008032c8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008032cc:	48 01 d0             	add    rax,rdx
ffff8000008032cf:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008032d1:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:468 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff8000008032d4:	85 c0                	test   eax,eax
ffff8000008032d6:	75 07                	jne    ffff8000008032df <chk_vm+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:471
    {
        return -1;
ffff8000008032d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008032dd:	eb 05                	jmp    ffff8000008032e4 <chk_vm+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:473
    }
    return 0;
ffff8000008032df:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:474
}
ffff8000008032e4:	5d                   	pop    rbp
ffff8000008032e5:	c3                   	ret    

ffff8000008032e6 <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
ffff8000008032e6:	f3 0f 1e fa          	endbr64 
ffff8000008032ea:	55                   	push   rbp
ffff8000008032eb:	48 89 e5             	mov    rbp,rsp
ffff8000008032ee:	41 57                	push   r15
ffff8000008032f0:	53                   	push   rbx
ffff8000008032f1:	48 83 ec 20          	sub    rsp,0x20
ffff8000008032f5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008032f5 <is_pgs_ava+0xf>
ffff8000008032fc:	49 bb 33 f6 01 00 00 	movabs r11,0x1f633
ffff800000803303:	00 00 00 
ffff800000803306:	4c 01 db             	add    rbx,r11
ffff800000803309:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080330c:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:478
    int pgi=base/4096;
ffff80000080330f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803312:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000803318:	85 c0                	test   eax,eax
ffff80000080331a:	0f 48 c2             	cmovs  eax,edx
ffff80000080331d:	c1 f8 0c             	sar    eax,0xc
ffff800000803320:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479
    for(int i=0;i<pgn;i++)
ffff800000803323:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080332a:	eb 2b                	jmp    ffff800000803357 <is_pgs_ava+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481
    {
        if(check_page(pgi+i)!=0)return 0;
ffff80000080332c:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080332f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803332:	01 d0                	add    eax,edx
ffff800000803334:	89 c7                	mov    edi,eax
ffff800000803336:	49 89 df             	mov    r15,rbx
ffff800000803339:	48 b8 da 05 fe ff ff 	movabs rax,0xfffffffffffe05da
ffff800000803340:	ff ff ff 
ffff800000803343:	48 01 d8             	add    rax,rbx
ffff800000803346:	ff d0                	call   rax
ffff800000803348:	85 c0                	test   eax,eax
ffff80000080334a:	74 07                	je     ffff800000803353 <is_pgs_ava+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481 (discriminator 1)
ffff80000080334c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803351:	eb 11                	jmp    ffff800000803364 <is_pgs_ava+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479 (discriminator 2)
    for(int i=0;i<pgn;i++)
ffff800000803353:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479 (discriminator 1)
ffff800000803357:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080335a:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff80000080335d:	7c cd                	jl     ffff80000080332c <is_pgs_ava+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:483
    }
    return 1;
ffff80000080335f:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:485

}
ffff800000803364:	48 83 c4 20          	add    rsp,0x20
ffff800000803368:	5b                   	pop    rbx
ffff800000803369:	41 5f                	pop    r15
ffff80000080336b:	5d                   	pop    rbp
ffff80000080336c:	c3                   	ret    

ffff80000080336d <setup_sys_vol>:
setup_sys_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:22
super_block sbs[MAX_SUPERBLOCKS];
fs_operations fs[MAX_FS];

buffer_head buffer_heads[NR_BUFFERHEADS];
int setup_sys_vol(void *disk_drv, void *fs_drv)
{
ffff80000080336d:	f3 0f 1e fa          	endbr64 
ffff800000803371:	55                   	push   rbp
ffff800000803372:	48 89 e5             	mov    rbp,rsp
ffff800000803375:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803375 <setup_sys_vol+0x8>
ffff80000080337c:	49 bb b3 f5 01 00 00 	movabs r11,0x1f5b3
ffff800000803383:	00 00 00 
ffff800000803386:	4c 01 d8             	add    rax,r11
ffff800000803389:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080338d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:23
    vols[0].name[0]='C';
ffff800000803391:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff800000803398:	ff ff ff 
ffff80000080339b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080339f:	c6 02 43             	mov    BYTE PTR [rdx],0x43
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:24
    vols[0].name[1]='\0';
ffff8000008033a2:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008033a9:	ff ff ff 
ffff8000008033ac:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008033b0:	c6 42 01 00          	mov    BYTE PTR [rdx+0x1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:25
    vols[0].disk_drv=disk_drv;
ffff8000008033b4:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008033bb:	ff ff ff 
ffff8000008033be:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008033c2:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff8000008033c6:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:26
    vols[0].fs_drv=fs_drv;
ffff8000008033ca:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008033d1:	ff ff ff 
ffff8000008033d4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008033d8:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff8000008033dc:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:27
    vols[0].stat=VOLUME_STAT_READY;
ffff8000008033e0:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008033e7:	ff ff ff 
ffff8000008033ea:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008033ee:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:28
    return 0;
ffff8000008033f5:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:29
}
ffff8000008033fa:	5d                   	pop    rbp
ffff8000008033fb:	c3                   	ret    

ffff8000008033fc <sys_mkfifo>:
sys_mkfifo():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:32
//返回管道描述符
int sys_mkfifo(int number)
{
ffff8000008033fc:	f3 0f 1e fa          	endbr64 
ffff800000803400:	55                   	push   rbp
ffff800000803401:	48 89 e5             	mov    rbp,rsp
ffff800000803404:	41 57                	push   r15
ffff800000803406:	53                   	push   rbx
ffff800000803407:	48 83 ec 20          	sub    rsp,0x20
ffff80000080340b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080340b <sys_mkfifo+0xf>
ffff800000803412:	49 bb 1d f5 01 00 00 	movabs r11,0x1f51d
ffff800000803419:	00 00 00 
ffff80000080341c:	4c 01 db             	add    rbx,r11
ffff80000080341f:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34
    //查重
    for(int i=0;i<MAX_FIFOS;i++)
ffff800000803422:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803429:	eb 56                	jmp    ffff800000803481 <sys_mkfifo+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:36
    {
        if(fifos[i].id==number&&fifos[i].flag==1) {
ffff80000080342b:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff800000803432:	ff ff ff 
ffff800000803435:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803439:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080343c:	48 98                	cdqe   
ffff80000080343e:	48 c1 e0 04          	shl    rax,0x4
ffff800000803442:	48 01 d0             	add    rax,rdx
ffff800000803445:	48 83 c0 0c          	add    rax,0xc
ffff800000803449:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080344b:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff80000080344e:	75 2d                	jne    ffff80000080347d <sys_mkfifo+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:36 (discriminator 1)
ffff800000803450:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff800000803457:	ff ff ff 
ffff80000080345a:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080345e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803461:	48 98                	cdqe   
ffff800000803463:	48 c1 e0 04          	shl    rax,0x4
ffff800000803467:	48 01 d0             	add    rax,rdx
ffff80000080346a:	48 83 c0 08          	add    rax,0x8
ffff80000080346e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803470:	83 f8 01             	cmp    eax,0x1
ffff800000803473:	75 08                	jne    ffff80000080347d <sys_mkfifo+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:37
            return i;
ffff800000803475:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803478:	e9 09 01 00 00       	jmp    ffff800000803586 <sys_mkfifo+0x18a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
ffff80000080347d:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34 (discriminator 1)
ffff800000803481:	83 7d ec 0f          	cmp    DWORD PTR [rbp-0x14],0xf
ffff800000803485:	7e a4                	jle    ffff80000080342b <sys_mkfifo+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40
        }
    }
    for(int i=0;i<MAX_FIFOS;i++)
ffff800000803487:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080348e:	e9 e4 00 00 00       	jmp    ffff800000803577 <sys_mkfifo+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:42
    {
        if(fifos[i].flag==0) {
ffff800000803493:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff80000080349a:	ff ff ff 
ffff80000080349d:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff8000008034a1:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008034a4:	48 98                	cdqe   
ffff8000008034a6:	48 c1 e0 04          	shl    rax,0x4
ffff8000008034aa:	48 01 d0             	add    rax,rdx
ffff8000008034ad:	48 83 c0 08          	add    rax,0x8
ffff8000008034b1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008034b3:	85 c0                	test   eax,eax
ffff8000008034b5:	0f 85 b8 00 00 00    	jne    ffff800000803573 <sys_mkfifo+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:43
            fifos[i].flag=1;
ffff8000008034bb:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff8000008034c2:	ff ff ff 
ffff8000008034c5:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff8000008034c9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008034cc:	48 98                	cdqe   
ffff8000008034ce:	48 c1 e0 04          	shl    rax,0x4
ffff8000008034d2:	48 01 d0             	add    rax,rdx
ffff8000008034d5:	48 83 c0 08          	add    rax,0x8
ffff8000008034d9:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:44
            fifos[i].id=number;
ffff8000008034df:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff8000008034e6:	ff ff ff 
ffff8000008034e9:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff8000008034ed:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008034f0:	48 98                	cdqe   
ffff8000008034f2:	48 c1 e0 04          	shl    rax,0x4
ffff8000008034f6:	48 01 d0             	add    rax,rdx
ffff8000008034f9:	48 8d 50 0c          	lea    rdx,[rax+0xc]
ffff8000008034fd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803500:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:45
            fifos[i].size=CHUNK_SIZE;
ffff800000803502:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff800000803509:	ff ff ff 
ffff80000080350c:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803510:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803513:	48 98                	cdqe   
ffff800000803515:	48 c1 e0 04          	shl    rax,0x4
ffff800000803519:	48 01 d0             	add    rax,rdx
ffff80000080351c:	48 83 c0 04          	add    rax,0x4
ffff800000803520:	c7 00 00 10 00 00    	mov    DWORD PTR [rax],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:47
            //分配内存
            fifos[i].pa= get_phyaddr(req_a_page());
ffff800000803526:	49 89 df             	mov    r15,rbx
ffff800000803529:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080352e:	48 ba 69 02 fe ff ff 	movabs rdx,0xfffffffffffe0269
ffff800000803535:	ff ff ff 
ffff800000803538:	48 01 da             	add    rdx,rbx
ffff80000080353b:	ff d2                	call   rdx
ffff80000080353d:	89 c7                	mov    edi,eax
ffff80000080353f:	49 89 df             	mov    r15,rbx
ffff800000803542:	48 b8 56 06 fe ff ff 	movabs rax,0xfffffffffffe0656
ffff800000803549:	ff ff ff 
ffff80000080354c:	48 01 d8             	add    rax,rbx
ffff80000080354f:	ff d0                	call   rax
ffff800000803551:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff800000803558:	ff ff ff 
ffff80000080355b:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080355f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000803562:	48 63 d2             	movsxd rdx,edx
ffff800000803565:	48 c1 e2 04          	shl    rdx,0x4
ffff800000803569:	48 01 ca             	add    rdx,rcx
ffff80000080356c:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:48
            return i;
ffff80000080356e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803571:	eb 13                	jmp    ffff800000803586 <sys_mkfifo+0x18a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
ffff800000803573:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40 (discriminator 1)
ffff800000803577:	83 7d e8 0f          	cmp    DWORD PTR [rbp-0x18],0xf
ffff80000080357b:	0f 8e 12 ff ff ff    	jle    ffff800000803493 <sys_mkfifo+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:51
        }
    }
    return -1;
ffff800000803581:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:52
}
ffff800000803586:	48 83 c4 20          	add    rsp,0x20
ffff80000080358a:	5b                   	pop    rbx
ffff80000080358b:	41 5f                	pop    r15
ffff80000080358d:	5d                   	pop    rbp
ffff80000080358e:	c3                   	ret    

ffff80000080358f <sys_rmfifo>:
sys_rmfifo():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:55

int sys_rmfifo(int number)
{
ffff80000080358f:	f3 0f 1e fa          	endbr64 
ffff800000803593:	55                   	push   rbp
ffff800000803594:	48 89 e5             	mov    rbp,rsp
ffff800000803597:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803597 <sys_rmfifo+0x8>
ffff80000080359e:	49 bb 91 f3 01 00 00 	movabs r11,0x1f391
ffff8000008035a5:	00 00 00 
ffff8000008035a8:	4c 01 d8             	add    rax,r11
ffff8000008035ab:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56
    for(int i=0;i<MAX_FIFOS;i++)
ffff8000008035ae:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008035b5:	eb 79                	jmp    ffff800000803630 <sys_rmfifo+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:58
    {
        if(fifos[i].id==number&&fifos[i].flag==1) {
ffff8000008035b7:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff8000008035be:	ff ff ff 
ffff8000008035c1:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff8000008035c5:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008035c8:	48 63 d2             	movsxd rdx,edx
ffff8000008035cb:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008035cf:	48 01 ca             	add    rdx,rcx
ffff8000008035d2:	48 83 c2 0c          	add    rdx,0xc
ffff8000008035d6:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008035d8:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff8000008035db:	75 4f                	jne    ffff80000080362c <sys_rmfifo+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:58 (discriminator 1)
ffff8000008035dd:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff8000008035e4:	ff ff ff 
ffff8000008035e7:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff8000008035eb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008035ee:	48 63 d2             	movsxd rdx,edx
ffff8000008035f1:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008035f5:	48 01 ca             	add    rdx,rcx
ffff8000008035f8:	48 83 c2 08          	add    rdx,0x8
ffff8000008035fc:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008035fe:	83 fa 01             	cmp    edx,0x1
ffff800000803601:	75 29                	jne    ffff80000080362c <sys_rmfifo+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:59
            fifos[i].flag=0;
ffff800000803603:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff80000080360a:	ff ff ff 
ffff80000080360d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000803611:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803614:	48 98                	cdqe   
ffff800000803616:	48 c1 e0 04          	shl    rax,0x4
ffff80000080361a:	48 01 d0             	add    rax,rdx
ffff80000080361d:	48 83 c0 08          	add    rax,0x8
ffff800000803621:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:60
            return i;
ffff800000803627:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080362a:	eb 0f                	jmp    ffff80000080363b <sys_rmfifo+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
ffff80000080362c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56 (discriminator 1)
ffff800000803630:	83 7d fc 0f          	cmp    DWORD PTR [rbp-0x4],0xf
ffff800000803634:	7e 81                	jle    ffff8000008035b7 <sys_rmfifo+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:63
        }
    }
    return -1;
ffff800000803636:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:64
}
ffff80000080363b:	5d                   	pop    rbp
ffff80000080363c:	c3                   	ret    

ffff80000080363d <free_vol>:
free_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:66
int free_vol(int voli)
{
ffff80000080363d:	f3 0f 1e fa          	endbr64 
ffff800000803641:	55                   	push   rbp
ffff800000803642:	48 89 e5             	mov    rbp,rsp
ffff800000803645:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803645 <free_vol+0x8>
ffff80000080364c:	49 bb e3 f2 01 00 00 	movabs r11,0x1f2e3
ffff800000803653:	00 00 00 
ffff800000803656:	4c 01 d8             	add    rax,r11
ffff800000803659:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:67
    vols[0].stat=VOLUME_STAT_EMPTY;
ffff80000080365c:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff800000803663:	ff ff ff 
ffff800000803666:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080366a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:68
    return 0;
ffff800000803671:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:69
}
ffff800000803676:	5d                   	pop    rbp
ffff800000803677:	c3                   	ret    

ffff800000803678 <reg_vol>:
reg_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:72

int reg_vol(int disk_drvi, int fs_drvi, char *name)
{
ffff800000803678:	f3 0f 1e fa          	endbr64 
ffff80000080367c:	55                   	push   rbp
ffff80000080367d:	48 89 e5             	mov    rbp,rsp
ffff800000803680:	41 57                	push   r15
ffff800000803682:	53                   	push   rbx
ffff800000803683:	48 83 ec 20          	sub    rsp,0x20
ffff800000803687:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803687 <reg_vol+0xf>
ffff80000080368e:	49 bb a1 f2 01 00 00 	movabs r11,0x1f2a1
ffff800000803695:	00 00 00 
ffff800000803698:	4c 01 db             	add    rbx,r11
ffff80000080369b:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080369e:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff8000008036a1:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73
    for(int i=0;i<MAX_VOLUMES;i++)
ffff8000008036a5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008036ac:	e9 43 01 00 00       	jmp    ffff8000008037f4 <reg_vol+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:75
    {
        if(vols[i].stat==VOLUME_STAT_EMPTY)
ffff8000008036b1:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff8000008036b8:	ff ff ff 
ffff8000008036bb:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008036bf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008036c2:	48 63 d0             	movsxd rdx,eax
ffff8000008036c5:	48 89 d0             	mov    rax,rdx
ffff8000008036c8:	48 c1 e0 02          	shl    rax,0x2
ffff8000008036cc:	48 01 d0             	add    rax,rdx
ffff8000008036cf:	48 c1 e0 03          	shl    rax,0x3
ffff8000008036d3:	48 01 c8             	add    rax,rcx
ffff8000008036d6:	48 83 c0 20          	add    rax,0x20
ffff8000008036da:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008036dc:	85 c0                	test   eax,eax
ffff8000008036de:	0f 85 0c 01 00 00    	jne    ffff8000008037f0 <reg_vol+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:78
        {
            extern driver *drvs;
            vols[i].stat=VOLUME_STAT_READY;
ffff8000008036e4:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff8000008036eb:	ff ff ff 
ffff8000008036ee:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008036f2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008036f5:	48 63 d0             	movsxd rdx,eax
ffff8000008036f8:	48 89 d0             	mov    rax,rdx
ffff8000008036fb:	48 c1 e0 02          	shl    rax,0x2
ffff8000008036ff:	48 01 d0             	add    rax,rdx
ffff800000803702:	48 c1 e0 03          	shl    rax,0x3
ffff800000803706:	48 01 c8             	add    rax,rcx
ffff800000803709:	48 83 c0 20          	add    rax,0x20
ffff80000080370d:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:79
            vols[i].fs= &fs[fs_drvi];
ffff800000803713:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000803716:	48 63 d0             	movsxd rdx,eax
ffff800000803719:	48 89 d0             	mov    rax,rdx
ffff80000080371c:	48 01 c0             	add    rax,rax
ffff80000080371f:	48 01 d0             	add    rax,rdx
ffff800000803722:	48 c1 e0 03          	shl    rax,0x3
ffff800000803726:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff80000080372d:	ff ff ff 
ffff800000803730:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000803734:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
ffff800000803738:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff80000080373f:	ff ff ff 
ffff800000803742:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000803746:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803749:	48 63 d0             	movsxd rdx,eax
ffff80000080374c:	48 89 d0             	mov    rax,rdx
ffff80000080374f:	48 c1 e0 02          	shl    rax,0x2
ffff800000803753:	48 01 d0             	add    rax,rdx
ffff800000803756:	48 c1 e0 03          	shl    rax,0x3
ffff80000080375a:	48 01 f0             	add    rax,rsi
ffff80000080375d:	48 83 c0 18          	add    rax,0x18
ffff800000803761:	48 89 08             	mov    QWORD PTR [rax],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:80
            vols[i].disk_drv= get_drv(disk_drvi);
ffff800000803764:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803767:	89 c7                	mov    edi,eax
ffff800000803769:	49 89 df             	mov    r15,rbx
ffff80000080376c:	48 b8 f4 39 fe ff ff 	movabs rax,0xfffffffffffe39f4
ffff800000803773:	ff ff ff 
ffff800000803776:	48 01 d8             	add    rax,rbx
ffff800000803779:	ff d0                	call   rax
ffff80000080377b:	48 89 c2             	mov    rdx,rax
ffff80000080377e:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803785:	ff ff ff 
ffff800000803788:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff80000080378c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080378f:	48 63 c8             	movsxd rcx,eax
ffff800000803792:	48 89 c8             	mov    rax,rcx
ffff800000803795:	48 c1 e0 02          	shl    rax,0x2
ffff800000803799:	48 01 c8             	add    rax,rcx
ffff80000080379c:	48 c1 e0 03          	shl    rax,0x3
ffff8000008037a0:	48 01 f0             	add    rax,rsi
ffff8000008037a3:	48 83 c0 08          	add    rax,0x8
ffff8000008037a7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:81
            strcpy(vols[i].name,name);
ffff8000008037aa:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008037ad:	48 63 d0             	movsxd rdx,eax
ffff8000008037b0:	48 89 d0             	mov    rax,rdx
ffff8000008037b3:	48 c1 e0 02          	shl    rax,0x2
ffff8000008037b7:	48 01 d0             	add    rax,rdx
ffff8000008037ba:	48 c1 e0 03          	shl    rax,0x3
ffff8000008037be:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008037c5:	ff ff ff 
ffff8000008037c8:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008037cc:	48 01 c2             	add    rdx,rax
ffff8000008037cf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008037d3:	48 89 c6             	mov    rsi,rax
ffff8000008037d6:	48 89 d7             	mov    rdi,rdx
ffff8000008037d9:	49 89 df             	mov    r15,rbx
ffff8000008037dc:	48 b8 51 12 ff ff ff 	movabs rax,0xffffffffffff1251
ffff8000008037e3:	ff ff ff 
ffff8000008037e6:	48 01 d8             	add    rax,rbx
ffff8000008037e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:82
            return i;
ffff8000008037eb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008037ee:	eb 13                	jmp    ffff800000803803 <reg_vol+0x18b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73 (discriminator 2)
    for(int i=0;i<MAX_VOLUMES;i++)
ffff8000008037f0:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73 (discriminator 1)
ffff8000008037f4:	83 7d ec 19          	cmp    DWORD PTR [rbp-0x14],0x19
ffff8000008037f8:	0f 8e b3 fe ff ff    	jle    ffff8000008036b1 <reg_vol+0x39>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:85
        }
    }
    return -1;
ffff8000008037fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:86
}
ffff800000803803:	48 83 c4 20          	add    rsp,0x20
ffff800000803807:	5b                   	pop    rbx
ffff800000803808:	41 5f                	pop    r15
ffff80000080380a:	5d                   	pop    rbp
ffff80000080380b:	c3                   	ret    

ffff80000080380c <sys_tell>:
sys_tell():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:210
//    if(!f)return -1;
//    f->ptr=offset+origin;
//    return 0;
//}
int sys_tell(int fno)
{
ffff80000080380c:	f3 0f 1e fa          	endbr64 
ffff800000803810:	55                   	push   rbp
ffff800000803811:	48 89 e5             	mov    rbp,rsp
ffff800000803814:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803814 <sys_tell+0x8>
ffff80000080381b:	49 bb 14 f1 01 00 00 	movabs r11,0x1f114
ffff800000803822:	00 00 00 
ffff800000803825:	4c 01 d8             	add    rax,r11
ffff800000803828:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:211
    struct file* f=current->openf[fno];
ffff80000080382b:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000803832:	ff ff ff 
ffff800000803835:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000803839:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080383c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080383f:	48 63 d2             	movsxd rdx,edx
ffff800000803842:	48 83 c2 1e          	add    rdx,0x1e
ffff800000803846:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080384b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:212
    return f->position;
ffff80000080384f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803853:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:213
}
ffff800000803856:	5d                   	pop    rbp
ffff800000803857:	c3                   	ret    

ffff800000803858 <get_vfs_entry>:
get_vfs_entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:215
vfs_dir_entry *get_vfs_entry(int fno)
{
ffff800000803858:	f3 0f 1e fa          	endbr64 
ffff80000080385c:	55                   	push   rbp
ffff80000080385d:	48 89 e5             	mov    rbp,rsp
ffff800000803860:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000803860 <get_vfs_entry+0x8>
ffff800000803867:	49 bb c8 f0 01 00 00 	movabs r11,0x1f0c8
ffff80000080386e:	00 00 00 
ffff800000803871:	4c 01 da             	add    rdx,r11
ffff800000803874:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216
    for(int i=0;i<MAX_OPEN_FILES;i++)
ffff800000803877:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080387e:	eb 55                	jmp    ffff8000008038d5 <get_vfs_entry+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:218
    {
        if(opened[i].fno==fno)
ffff800000803880:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803887:	ff ff ff 
ffff80000080388a:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff80000080388e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803891:	48 63 c8             	movsxd rcx,eax
ffff800000803894:	48 89 c8             	mov    rax,rcx
ffff800000803897:	48 01 c0             	add    rax,rax
ffff80000080389a:	48 01 c8             	add    rax,rcx
ffff80000080389d:	48 c1 e0 05          	shl    rax,0x5
ffff8000008038a1:	48 01 f0             	add    rax,rsi
ffff8000008038a4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008038a6:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffff8000008038a9:	75 26                	jne    ffff8000008038d1 <get_vfs_entry+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:220
        {
            return &opened[i];
ffff8000008038ab:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008038ae:	48 63 c8             	movsxd rcx,eax
ffff8000008038b1:	48 89 c8             	mov    rax,rcx
ffff8000008038b4:	48 01 c0             	add    rax,rax
ffff8000008038b7:	48 01 c8             	add    rax,rcx
ffff8000008038ba:	48 c1 e0 05          	shl    rax,0x5
ffff8000008038be:	48 b9 e8 fe ff ff ff 	movabs rcx,0xfffffffffffffee8
ffff8000008038c5:	ff ff ff 
ffff8000008038c8:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff8000008038cc:	48 01 d0             	add    rax,rdx
ffff8000008038cf:	eb 0f                	jmp    ffff8000008038e0 <get_vfs_entry+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216 (discriminator 2)
    for(int i=0;i<MAX_OPEN_FILES;i++)
ffff8000008038d1:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216 (discriminator 1)
ffff8000008038d5:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff8000008038d9:	7e a5                	jle    ffff800000803880 <get_vfs_entry+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:223
        }
    }
    return NULL;
ffff8000008038db:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:224
}
ffff8000008038e0:	5d                   	pop    rbp
ffff8000008038e1:	c3                   	ret    

ffff8000008038e2 <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:228

//释放缓冲区（只释放这一块）
int brelse(buffer_head* bh)
{
ffff8000008038e2:	f3 0f 1e fa          	endbr64 
ffff8000008038e6:	55                   	push   rbp
ffff8000008038e7:	48 89 e5             	mov    rbp,rsp
ffff8000008038ea:	41 57                	push   r15
ffff8000008038ec:	53                   	push   rbx
ffff8000008038ed:	48 83 ec 10          	sub    rsp,0x10
ffff8000008038f1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008038f1 <brelse+0xf>
ffff8000008038f8:	49 bb 37 f0 01 00 00 	movabs r11,0x1f037
ffff8000008038ff:	00 00 00 
ffff800000803902:	4c 01 db             	add    rbx,r11
ffff800000803905:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:229
    wait_on_buf(bh);
ffff800000803909:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080390d:	48 89 c7             	mov    rdi,rax
ffff800000803910:	49 89 df             	mov    r15,rbx
ffff800000803913:	48 b8 1b 17 fe ff ff 	movabs rax,0xfffffffffffe171b
ffff80000080391a:	ff ff ff 
ffff80000080391d:	48 01 d8             	add    rax,rbx
ffff800000803920:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:230
    if(bh->b_count==0)return -1;
ffff800000803922:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803926:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080392a:	84 c0                	test   al,al
ffff80000080392c:	75 07                	jne    ffff800000803935 <brelse+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:230 (discriminator 1)
ffff80000080392e:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000803933:	eb 3f                	jmp    ffff800000803974 <brelse+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:231
    bh->b_count--;
ffff800000803935:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803939:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080393d:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000803940:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803944:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:232
    if(bh->b_count==0)
ffff800000803947:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080394b:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080394f:	84 c0                	test   al,al
ffff800000803951:	75 1c                	jne    ffff80000080396f <brelse+0x8d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:233
        kmfree(bh->b_data);
ffff800000803953:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803957:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080395a:	48 89 c7             	mov    rdi,rax
ffff80000080395d:	49 89 df             	mov    r15,rbx
ffff800000803960:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000803967:	ff ff ff 
ffff80000080396a:	48 01 d8             	add    rax,rbx
ffff80000080396d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:234
    return 0;
ffff80000080396f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:235
}
ffff800000803974:	48 83 c4 10          	add    rsp,0x10
ffff800000803978:	5b                   	pop    rbx
ffff800000803979:	41 5f                	pop    r15
ffff80000080397b:	5d                   	pop    rbp
ffff80000080397c:	c3                   	ret    

ffff80000080397d <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:238
//从设备中读取指定设备的指定块并返回缓冲区
buffer_head* bread(int dev,int blk)
{
ffff80000080397d:	f3 0f 1e fa          	endbr64 
ffff800000803981:	55                   	push   rbp
ffff800000803982:	48 89 e5             	mov    rbp,rsp
ffff800000803985:	41 57                	push   r15
ffff800000803987:	53                   	push   rbx
ffff800000803988:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
ffff80000080398f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080398f <bread+0x12>
ffff800000803996:	49 bb 99 ef 01 00 00 	movabs r11,0x1ef99
ffff80000080399d:	00 00 00 
ffff8000008039a0:	4c 01 db             	add    rbx,r11
ffff8000008039a3:	89 bd 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],edi
ffff8000008039a9:	89 b5 18 ff ff ff    	mov    DWORD PTR [rbp-0xe8],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:240

    buffer_head *bh=get_buf(dev,blk);
ffff8000008039af:	8b 95 18 ff ff ff    	mov    edx,DWORD PTR [rbp-0xe8]
ffff8000008039b5:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff8000008039bb:	89 d6                	mov    esi,edx
ffff8000008039bd:	89 c7                	mov    edi,eax
ffff8000008039bf:	49 89 df             	mov    r15,rbx
ffff8000008039c2:	48 b8 3c 14 fe ff ff 	movabs rax,0xfffffffffffe143c
ffff8000008039c9:	ff ff ff 
ffff8000008039cc:	48 01 d8             	add    rax,rbx
ffff8000008039cf:	ff d0                	call   rax
ffff8000008039d1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:241
    if(!bh)return -1;//申请失败
ffff8000008039d5:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff8000008039da:	75 0c                	jne    ffff8000008039e8 <bread+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:241 (discriminator 1)
ffff8000008039dc:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008039e3:	e9 a0 00 00 00       	jmp    ffff800000803a88 <bread+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:242
    if(!bh->b_uptodate)
ffff8000008039e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008039ec:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
ffff8000008039f0:	84 c0                	test   al,al
ffff8000008039f2:	0f 85 8c 00 00 00    	jne    ffff800000803a84 <bread+0x107>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:245
    {
        driver_args arg;
        arg.dev=dev;
ffff8000008039f8:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff8000008039fe:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:246
        arg.cmd=DRVF_READ;
ffff800000803a01:	c7 45 c8 02 00 00 00 	mov    DWORD PTR [rbp-0x38],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:247
        arg.dist_addr=bh->b_data;
ffff800000803a08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803a0c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a0f:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:248
        arg.len=BLOCK_SIZE;
ffff800000803a15:	c7 85 38 ff ff ff 00 	mov    DWORD PTR [rbp-0xc8],0x200
ffff800000803a1c:	02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:249
        arg.lba=bh->b_blocknr;
ffff800000803a1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803a23:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803a27:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:250
        arg.sec_c=BLOCK_SIZE/512;//之后会改
ffff800000803a2d:	c7 85 38 ff ff ff 01 	mov    DWORD PTR [rbp-0xc8],0x1
ffff800000803a34:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:252
        //lock_buffer(bh);//锁定缓冲块直到读取完成
        int reqi=make_request(&arg);
ffff800000803a37:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
ffff800000803a3e:	48 89 c7             	mov    rdi,rax
ffff800000803a41:	49 89 df             	mov    r15,rbx
ffff800000803a44:	48 b8 3a 3a fe ff ff 	movabs rax,0xfffffffffffe3a3a
ffff800000803a4b:	ff ff ff 
ffff800000803a4e:	48 01 d8             	add    rax,rbx
ffff800000803a51:	ff d0                	call   rax
ffff800000803a53:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:253
        wait_on_req(reqi);
ffff800000803a56:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000803a59:	89 c7                	mov    edi,eax
ffff800000803a5b:	49 89 df             	mov    r15,rbx
ffff800000803a5e:	48 b8 da 3d fe ff ff 	movabs rax,0xfffffffffffe3dda
ffff800000803a65:	ff ff ff 
ffff800000803a68:	48 01 d8             	add    rax,rbx
ffff800000803a6b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:254
        clear_req(reqi);
ffff800000803a6d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000803a70:	89 c7                	mov    edi,eax
ffff800000803a72:	49 89 df             	mov    r15,rbx
ffff800000803a75:	48 b8 2f 3e fe ff ff 	movabs rax,0xfffffffffffe3e2f
ffff800000803a7c:	ff ff ff 
ffff800000803a7f:	48 01 d8             	add    rax,rbx
ffff800000803a82:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:256
    }
    return bh;
ffff800000803a84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:257
}
ffff800000803a88:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
ffff800000803a8f:	5b                   	pop    rbx
ffff800000803a90:	41 5f                	pop    r15
ffff800000803a92:	5d                   	pop    rbp
ffff800000803a93:	c3                   	ret    

ffff800000803a94 <vfs_read_file>:
vfs_read_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:261


int vfs_read_file(vfs_dir_entry *f,char *buf,int len)
{
ffff800000803a94:	f3 0f 1e fa          	endbr64 
ffff800000803a98:	55                   	push   rbp
ffff800000803a99:	48 89 e5             	mov    rbp,rsp
ffff800000803a9c:	41 57                	push   r15
ffff800000803a9e:	53                   	push   rbx
ffff800000803a9f:	48 83 ec 40          	sub    rsp,0x40
ffff800000803aa3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803aa3 <vfs_read_file+0xf>
ffff800000803aaa:	49 bb 85 ee 01 00 00 	movabs r11,0x1ee85
ffff800000803ab1:	00 00 00 
ffff800000803ab4:	4c 01 db             	add    rbx,r11
ffff800000803ab7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803abb:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000803abf:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:262
    int dev=f->dev;
ffff800000803ac2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803ac6:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
ffff800000803ac9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:264 (discriminator 1)
    do{
        int block=get_according_bnr(f);
ffff800000803acc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803ad0:	48 89 c7             	mov    rdi,rax
ffff800000803ad3:	49 89 df             	mov    r15,rbx
ffff800000803ad6:	48 b8 d9 13 fe ff ff 	movabs rax,0xfffffffffffe13d9
ffff800000803add:	ff ff ff 
ffff800000803ae0:	48 01 d8             	add    rax,rbx
ffff800000803ae3:	ff d0                	call   rax
ffff800000803ae5:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:265 (discriminator 1)
        buffer_head* bh=bread(dev,block);
ffff800000803ae8:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000803aeb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803aee:	89 d6                	mov    esi,edx
ffff800000803af0:	89 c7                	mov    edi,eax
ffff800000803af2:	49 89 df             	mov    r15,rbx
ffff800000803af5:	48 b8 55 10 fe ff ff 	movabs rax,0xfffffffffffe1055
ffff800000803afc:	ff ff ff 
ffff800000803aff:	48 01 d8             	add    rax,rbx
ffff800000803b02:	ff d0                	call   rax
ffff800000803b04:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:266 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff800000803b08:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000803b0b:	ba 00 02 00 00       	mov    edx,0x200
ffff800000803b10:	39 d0                	cmp    eax,edx
ffff800000803b12:	0f 4f c2             	cmovg  eax,edx
ffff800000803b15:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:267 (discriminator 1)
        memcpy(buf,bh->b_data,size);
ffff800000803b18:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000803b1b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803b1f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803b22:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803b26:	48 89 ce             	mov    rsi,rcx
ffff800000803b29:	48 89 c7             	mov    rdi,rax
ffff800000803b2c:	49 89 df             	mov    r15,rbx
ffff800000803b2f:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000803b36:	ff ff ff 
ffff800000803b39:	48 01 d8             	add    rax,rbx
ffff800000803b3c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:268 (discriminator 1)
        len-=BLOCK_SIZE;
ffff800000803b3e:	81 6d bc 00 02 00 00 	sub    DWORD PTR [rbp-0x44],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:270 (discriminator 1)
        //读写指针后移
        f->ptr+=size;
ffff800000803b45:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803b49:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff800000803b4c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803b4f:	01 c2                	add    edx,eax
ffff800000803b51:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803b55:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:271 (discriminator 1)
        brelse(bh);
ffff800000803b58:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803b5c:	48 89 c7             	mov    rdi,rax
ffff800000803b5f:	49 89 df             	mov    r15,rbx
ffff800000803b62:	48 b8 ba 0f fe ff ff 	movabs rax,0xfffffffffffe0fba
ffff800000803b69:	ff ff ff 
ffff800000803b6c:	48 01 d8             	add    rax,rbx
ffff800000803b6f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:272 (discriminator 1)
    }while(len>0);
ffff800000803b71:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff800000803b75:	0f 8f 51 ff ff ff    	jg     ffff800000803acc <vfs_read_file+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:273
    return 0;
ffff800000803b7b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:274
}
ffff800000803b80:	48 83 c4 40          	add    rsp,0x40
ffff800000803b84:	5b                   	pop    rbx
ffff800000803b85:	41 5f                	pop    r15
ffff800000803b87:	5d                   	pop    rbp
ffff800000803b88:	c3                   	ret    

ffff800000803b89 <vfs_write_file>:
vfs_write_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:276
int vfs_write_file(vfs_dir_entry *f,char *buf,int len)
{
ffff800000803b89:	f3 0f 1e fa          	endbr64 
ffff800000803b8d:	55                   	push   rbp
ffff800000803b8e:	48 89 e5             	mov    rbp,rsp
ffff800000803b91:	41 57                	push   r15
ffff800000803b93:	53                   	push   rbx
ffff800000803b94:	48 83 ec 40          	sub    rsp,0x40
ffff800000803b98:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803b98 <vfs_write_file+0xf>
ffff800000803b9f:	49 bb 90 ed 01 00 00 	movabs r11,0x1ed90
ffff800000803ba6:	00 00 00 
ffff800000803ba9:	4c 01 db             	add    rbx,r11
ffff800000803bac:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803bb0:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000803bb4:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:277
    int dev=f->dev;
ffff800000803bb7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803bbb:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
ffff800000803bbe:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:279 (discriminator 1)
    do{
        int block=get_according_bnr(f);
ffff800000803bc1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803bc5:	48 89 c7             	mov    rdi,rax
ffff800000803bc8:	49 89 df             	mov    r15,rbx
ffff800000803bcb:	48 b8 d9 13 fe ff ff 	movabs rax,0xfffffffffffe13d9
ffff800000803bd2:	ff ff ff 
ffff800000803bd5:	48 01 d8             	add    rax,rbx
ffff800000803bd8:	ff d0                	call   rax
ffff800000803bda:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:280 (discriminator 1)
        buffer_head* bh=get_buf(dev,block);
ffff800000803bdd:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000803be0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803be3:	89 d6                	mov    esi,edx
ffff800000803be5:	89 c7                	mov    edi,eax
ffff800000803be7:	49 89 df             	mov    r15,rbx
ffff800000803bea:	48 b8 3c 14 fe ff ff 	movabs rax,0xfffffffffffe143c
ffff800000803bf1:	ff ff ff 
ffff800000803bf4:	48 01 d8             	add    rax,rbx
ffff800000803bf7:	ff d0                	call   rax
ffff800000803bf9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:281 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff800000803bfd:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000803c00:	ba 00 02 00 00       	mov    edx,0x200
ffff800000803c05:	39 d0                	cmp    eax,edx
ffff800000803c07:	0f 4f c2             	cmovg  eax,edx
ffff800000803c0a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:282 (discriminator 1)
        memcpy(bh->b_data,buf,size);
ffff800000803c0d:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000803c10:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c14:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c17:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000803c1b:	48 89 ce             	mov    rsi,rcx
ffff800000803c1e:	48 89 c7             	mov    rdi,rax
ffff800000803c21:	49 89 df             	mov    r15,rbx
ffff800000803c24:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000803c2b:	ff ff ff 
ffff800000803c2e:	48 01 d8             	add    rax,rbx
ffff800000803c31:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:283 (discriminator 1)
        len-=BLOCK_SIZE;
ffff800000803c33:	81 6d bc 00 02 00 00 	sub    DWORD PTR [rbp-0x44],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:285 (discriminator 1)
        //读写指针后移
        f->ptr+=size;
ffff800000803c3a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803c3e:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff800000803c41:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803c44:	01 c2                	add    edx,eax
ffff800000803c46:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803c4a:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:286 (discriminator 1)
        bh->b_dirt=1;//修改置位
ffff800000803c4d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c51:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:287 (discriminator 1)
        brelse(bh);
ffff800000803c55:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c59:	48 89 c7             	mov    rdi,rax
ffff800000803c5c:	49 89 df             	mov    r15,rbx
ffff800000803c5f:	48 b8 ba 0f fe ff ff 	movabs rax,0xfffffffffffe0fba
ffff800000803c66:	ff ff ff 
ffff800000803c69:	48 01 d8             	add    rax,rbx
ffff800000803c6c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:288 (discriminator 1)
    }while(len>0);
ffff800000803c6e:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff800000803c72:	0f 8f 49 ff ff ff    	jg     ffff800000803bc1 <vfs_write_file+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:289
    return 0;
ffff800000803c78:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:290
}
ffff800000803c7d:	48 83 c4 40          	add    rsp,0x40
ffff800000803c81:	5b                   	pop    rbx
ffff800000803c82:	41 5f                	pop    r15
ffff800000803c84:	5d                   	pop    rbp
ffff800000803c85:	c3                   	ret    

ffff800000803c86 <vfs_seek_file>:
vfs_seek_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:293

int vfs_seek_file(vfs_dir_entry *f,int offset,int origin)
{
ffff800000803c86:	f3 0f 1e fa          	endbr64 
ffff800000803c8a:	55                   	push   rbp
ffff800000803c8b:	48 89 e5             	mov    rbp,rsp
ffff800000803c8e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803c8e <vfs_seek_file+0x8>
ffff800000803c95:	49 bb 9a ec 01 00 00 	movabs r11,0x1ec9a
ffff800000803c9c:	00 00 00 
ffff800000803c9f:	4c 01 d8             	add    rax,r11
ffff800000803ca2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000803ca6:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000803ca9:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:294
    switch (origin)
ffff800000803cac:	83 7d f0 02          	cmp    DWORD PTR [rbp-0x10],0x2
ffff800000803cb0:	74 35                	je     ffff800000803ce7 <vfs_seek_file+0x61>
ffff800000803cb2:	83 7d f0 02          	cmp    DWORD PTR [rbp-0x10],0x2
ffff800000803cb6:	7f 3f                	jg     ffff800000803cf7 <vfs_seek_file+0x71>
ffff800000803cb8:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
ffff800000803cbc:	74 08                	je     ffff800000803cc6 <vfs_seek_file+0x40>
ffff800000803cbe:	83 7d f0 01          	cmp    DWORD PTR [rbp-0x10],0x1
ffff800000803cc2:	74 0e                	je     ffff800000803cd2 <vfs_seek_file+0x4c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:306
        break;
    case SEEK_END:
        f->ptr=f->size;
        break;
    default:
        break;
ffff800000803cc4:	eb 31                	jmp    ffff800000803cf7 <vfs_seek_file+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:297
        f->ptr=offset;
ffff800000803cc6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803cca:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000803ccd:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:298
        break;
ffff800000803cd0:	eb 26                	jmp    ffff800000803cf8 <vfs_seek_file+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:300
        f->ptr+=offset;
ffff800000803cd2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803cd6:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff800000803cd9:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000803cdc:	01 c2                	add    edx,eax
ffff800000803cde:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803ce2:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:301
        break;
ffff800000803ce5:	eb 11                	jmp    ffff800000803cf8 <vfs_seek_file+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:303
        f->ptr=f->size;
ffff800000803ce7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803ceb:	8b 50 18             	mov    edx,DWORD PTR [rax+0x18]
ffff800000803cee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803cf2:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:304
        break;
ffff800000803cf5:	eb 01                	jmp    ffff800000803cf8 <vfs_seek_file+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:306
        break;
ffff800000803cf7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:308
    }
    return f->ptr;
ffff800000803cf8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803cfc:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:309
}
ffff800000803cff:	5d                   	pop    rbp
ffff800000803d00:	c3                   	ret    

ffff800000803d01 <get_according_bnr>:
get_according_bnr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:312
//返回文件ptr在块设备中的块号
int get_according_bnr(vfs_dir_entry *f)
{
ffff800000803d01:	f3 0f 1e fa          	endbr64 
ffff800000803d05:	55                   	push   rbp
ffff800000803d06:	48 89 e5             	mov    rbp,rsp
ffff800000803d09:	48 83 ec 10          	sub    rsp,0x10
ffff800000803d0d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803d0d <get_according_bnr+0xc>
ffff800000803d14:	49 bb 1b ec 01 00 00 	movabs r11,0x1ec1b
ffff800000803d1b:	00 00 00 
ffff800000803d1e:	4c 01 d8             	add    rax,r11
ffff800000803d21:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:313
    return vols[f->voln].fs->get_according_bnr(f);
ffff800000803d25:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000803d29:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000803d2c:	48 b9 88 ff ff ff ff 	movabs rcx,0xffffffffffffff88
ffff800000803d33:	ff ff ff 
ffff800000803d36:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000803d3a:	48 63 d2             	movsxd rdx,edx
ffff800000803d3d:	48 89 d0             	mov    rax,rdx
ffff800000803d40:	48 c1 e0 02          	shl    rax,0x2
ffff800000803d44:	48 01 d0             	add    rax,rdx
ffff800000803d47:	48 c1 e0 03          	shl    rax,0x3
ffff800000803d4b:	48 01 c8             	add    rax,rcx
ffff800000803d4e:	48 83 c0 18          	add    rax,0x18
ffff800000803d52:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803d55:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000803d59:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803d5d:	48 89 c7             	mov    rdi,rax
ffff800000803d60:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:315

}
ffff800000803d62:	c9                   	leave  
ffff800000803d63:	c3                   	ret    

ffff800000803d64 <get_buf>:
get_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:318
//获取或者新建一个和dev上block相对应的缓冲区。
buffer_head* get_buf(int dev,int block)
{
ffff800000803d64:	f3 0f 1e fa          	endbr64 
ffff800000803d68:	55                   	push   rbp
ffff800000803d69:	48 89 e5             	mov    rbp,rsp
ffff800000803d6c:	41 57                	push   r15
ffff800000803d6e:	53                   	push   rbx
ffff800000803d6f:	48 83 ec 20          	sub    rsp,0x20
ffff800000803d73:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803d73 <get_buf+0xf>
ffff800000803d7a:	49 bb b5 eb 01 00 00 	movabs r11,0x1ebb5
ffff800000803d81:	00 00 00 
ffff800000803d84:	4c 01 db             	add    rbx,r11
ffff800000803d87:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000803d8a:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff800000803d8d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803d94:	e9 31 01 00 00       	jmp    ffff800000803eca <get_buf+0x166>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:321
    {
        if(buffer_heads[i].b_dev==dev&&buffer_heads[i].b_blocknr==block)
ffff800000803d99:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803da0:	ff ff ff 
ffff800000803da3:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803da7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803daa:	48 98                	cdqe   
ffff800000803dac:	48 c1 e0 06          	shl    rax,0x6
ffff800000803db0:	48 01 d0             	add    rax,rdx
ffff800000803db3:	48 83 c0 10          	add    rax,0x10
ffff800000803db7:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000803dba:	0f b7 c0             	movzx  eax,ax
ffff800000803dbd:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000803dc0:	0f 85 00 01 00 00    	jne    ffff800000803ec6 <get_buf+0x162>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:321 (discriminator 1)
ffff800000803dc6:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803dcd:	ff ff ff 
ffff800000803dd0:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803dd4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803dd7:	48 98                	cdqe   
ffff800000803dd9:	48 c1 e0 06          	shl    rax,0x6
ffff800000803ddd:	48 01 d0             	add    rax,rdx
ffff800000803de0:	48 83 c0 08          	add    rax,0x8
ffff800000803de4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803de7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000803dea:	48 98                	cdqe   
ffff800000803dec:	48 39 c2             	cmp    rdx,rax
ffff800000803def:	0f 85 d1 00 00 00    	jne    ffff800000803ec6 <get_buf+0x162>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:323
        {
            repeat:
ffff800000803df5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:324
            wait_on_buf(&buffer_heads[i]);//等待解锁
ffff800000803df6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803df9:	48 98                	cdqe   
ffff800000803dfb:	48 c1 e0 06          	shl    rax,0x6
ffff800000803dff:	48 89 c2             	mov    rdx,rax
ffff800000803e02:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803e09:	ff ff ff 
ffff800000803e0c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803e10:	48 01 d0             	add    rax,rdx
ffff800000803e13:	48 89 c7             	mov    rdi,rax
ffff800000803e16:	49 89 df             	mov    r15,rbx
ffff800000803e19:	48 b8 1b 17 fe ff ff 	movabs rax,0xfffffffffffe171b
ffff800000803e20:	ff ff ff 
ffff800000803e23:	48 01 d8             	add    rax,rbx
ffff800000803e26:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:325
            if(buffer_heads[i].b_count>0)//别的进程正在用
ffff800000803e28:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803e2f:	ff ff ff 
ffff800000803e32:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803e36:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803e39:	48 98                	cdqe   
ffff800000803e3b:	48 c1 e0 06          	shl    rax,0x6
ffff800000803e3f:	48 01 d0             	add    rax,rdx
ffff800000803e42:	48 83 c0 14          	add    rax,0x14
ffff800000803e46:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803e49:	84 c0                	test   al,al
ffff800000803e4b:	74 02                	je     ffff800000803e4f <get_buf+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:326
                goto repeat;
ffff800000803e4d:	eb a7                	jmp    ffff800000803df6 <get_buf+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:327
            if(!(buffer_heads[i].b_dev==dev&&buffer_heads[i].b_blocknr==block))//别的进程修改了
ffff800000803e4f:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803e56:	ff ff ff 
ffff800000803e59:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803e5d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803e60:	48 98                	cdqe   
ffff800000803e62:	48 c1 e0 06          	shl    rax,0x6
ffff800000803e66:	48 01 d0             	add    rax,rdx
ffff800000803e69:	48 83 c0 10          	add    rax,0x10
ffff800000803e6d:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000803e70:	0f b7 c0             	movzx  eax,ax
ffff800000803e73:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000803e76:	75 4d                	jne    ffff800000803ec5 <get_buf+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:327 (discriminator 2)
ffff800000803e78:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803e7f:	ff ff ff 
ffff800000803e82:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803e86:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803e89:	48 98                	cdqe   
ffff800000803e8b:	48 c1 e0 06          	shl    rax,0x6
ffff800000803e8f:	48 01 d0             	add    rax,rdx
ffff800000803e92:	48 83 c0 08          	add    rax,0x8
ffff800000803e96:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803e99:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000803e9c:	48 98                	cdqe   
ffff800000803e9e:	48 39 c2             	cmp    rdx,rax
ffff800000803ea1:	75 22                	jne    ffff800000803ec5 <get_buf+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:329
                continue;
            return &buffer_heads[i];
ffff800000803ea3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803ea6:	48 98                	cdqe   
ffff800000803ea8:	48 c1 e0 06          	shl    rax,0x6
ffff800000803eac:	48 89 c2             	mov    rdx,rax
ffff800000803eaf:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803eb6:	ff ff ff 
ffff800000803eb9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803ebd:	48 01 d0             	add    rax,rdx
ffff800000803ec0:	e9 75 01 00 00       	jmp    ffff80000080403a <get_buf+0x2d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:328
                continue;
ffff800000803ec5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319 (discriminator 2)
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff800000803ec6:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319 (discriminator 1)
ffff800000803eca:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000803ece:	0f 8e c5 fe ff ff    	jle    ffff800000803d99 <get_buf+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333
        }
    }
    //空头中找
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff800000803ed4:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000803edb:	e9 50 01 00 00       	jmp    ffff800000804030 <get_buf+0x2cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:335
    {
        if(buffer_heads[i].b_count==0)
ffff800000803ee0:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803ee7:	ff ff ff 
ffff800000803eea:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803eee:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803ef1:	48 98                	cdqe   
ffff800000803ef3:	48 c1 e0 06          	shl    rax,0x6
ffff800000803ef7:	48 01 d0             	add    rax,rdx
ffff800000803efa:	48 83 c0 14          	add    rax,0x14
ffff800000803efe:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803f01:	84 c0                	test   al,al
ffff800000803f03:	0f 85 23 01 00 00    	jne    ffff80000080402c <get_buf+0x2c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:337
        {
            if(buffer_heads[i].b_dirt)
ffff800000803f09:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803f10:	ff ff ff 
ffff800000803f13:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803f17:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803f1a:	48 98                	cdqe   
ffff800000803f1c:	48 c1 e0 06          	shl    rax,0x6
ffff800000803f20:	48 01 d0             	add    rax,rdx
ffff800000803f23:	48 83 c0 13          	add    rax,0x13
ffff800000803f27:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803f2a:	84 c0                	test   al,al
ffff800000803f2c:	74 64                	je     ffff800000803f92 <get_buf+0x22e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:339
            {
                sync_buf(&buffer_heads[i]);
ffff800000803f2e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803f31:	48 98                	cdqe   
ffff800000803f33:	48 c1 e0 06          	shl    rax,0x6
ffff800000803f37:	48 89 c2             	mov    rdx,rax
ffff800000803f3a:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803f41:	ff ff ff 
ffff800000803f44:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803f48:	48 01 d0             	add    rax,rdx
ffff800000803f4b:	48 89 c7             	mov    rdi,rax
ffff800000803f4e:	49 89 df             	mov    r15,rbx
ffff800000803f51:	48 b8 12 18 fe ff ff 	movabs rax,0xfffffffffffe1812
ffff800000803f58:	ff ff ff 
ffff800000803f5b:	48 01 d8             	add    rax,rbx
ffff800000803f5e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:340
                wait_on_buf(&buffer_heads[i]);
ffff800000803f60:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803f63:	48 98                	cdqe   
ffff800000803f65:	48 c1 e0 06          	shl    rax,0x6
ffff800000803f69:	48 89 c2             	mov    rdx,rax
ffff800000803f6c:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803f73:	ff ff ff 
ffff800000803f76:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803f7a:	48 01 d0             	add    rax,rdx
ffff800000803f7d:	48 89 c7             	mov    rdi,rax
ffff800000803f80:	49 89 df             	mov    r15,rbx
ffff800000803f83:	48 b8 1b 17 fe ff ff 	movabs rax,0xfffffffffffe171b
ffff800000803f8a:	ff ff ff 
ffff800000803f8d:	48 01 d8             	add    rax,rbx
ffff800000803f90:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:342
            }
            buffer_heads[i].b_count++;
ffff800000803f92:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803f99:	ff ff ff 
ffff800000803f9c:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803fa0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803fa3:	48 98                	cdqe   
ffff800000803fa5:	48 c1 e0 06          	shl    rax,0x6
ffff800000803fa9:	48 01 d0             	add    rax,rdx
ffff800000803fac:	48 83 c0 14          	add    rax,0x14
ffff800000803fb0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803fb3:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000803fb6:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803fbd:	ff ff ff 
ffff800000803fc0:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000803fc4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803fc7:	48 98                	cdqe   
ffff800000803fc9:	48 c1 e0 06          	shl    rax,0x6
ffff800000803fcd:	48 01 c8             	add    rax,rcx
ffff800000803fd0:	48 83 c0 14          	add    rax,0x14
ffff800000803fd4:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:344
            //给buffer分配一个实际的缓冲区
            buffer_heads[i].b_data= kmalloc();
ffff800000803fd6:	49 89 df             	mov    r15,rbx
ffff800000803fd9:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803fde:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000803fe5:	ff ff ff 
ffff800000803fe8:	48 01 da             	add    rdx,rbx
ffff800000803feb:	ff d2                	call   rdx
ffff800000803fed:	48 89 c2             	mov    rdx,rax
ffff800000803ff0:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803ff7:	ff ff ff 
ffff800000803ffa:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000803ffe:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000804001:	48 98                	cdqe   
ffff800000804003:	48 c1 e0 06          	shl    rax,0x6
ffff800000804007:	48 01 c8             	add    rax,rcx
ffff80000080400a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:345
            return &buffer_heads[i];
ffff80000080400d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000804010:	48 98                	cdqe   
ffff800000804012:	48 c1 e0 06          	shl    rax,0x6
ffff800000804016:	48 89 c2             	mov    rdx,rax
ffff800000804019:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000804020:	ff ff ff 
ffff800000804023:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804027:	48 01 d0             	add    rax,rdx
ffff80000080402a:	eb 0e                	jmp    ffff80000080403a <get_buf+0x2d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333 (discriminator 2)
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff80000080402c:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333 (discriminator 1)
ffff800000804030:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000804034:	0f 8e a6 fe ff ff    	jle    ffff800000803ee0 <get_buf+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:348
        }
    }
}
ffff80000080403a:	48 83 c4 20          	add    rsp,0x20
ffff80000080403e:	5b                   	pop    rbx
ffff80000080403f:	41 5f                	pop    r15
ffff800000804041:	5d                   	pop    rbp
ffff800000804042:	c3                   	ret    

ffff800000804043 <wait_on_buf>:
wait_on_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:351

void wait_on_buf(buffer_head* bh)
{
ffff800000804043:	f3 0f 1e fa          	endbr64 
ffff800000804047:	55                   	push   rbp
ffff800000804048:	48 89 e5             	mov    rbp,rsp
ffff80000080404b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080404b <wait_on_buf+0x8>
ffff800000804052:	49 bb dd e8 01 00 00 	movabs r11,0x1e8dd
ffff800000804059:	00 00 00 
ffff80000080405c:	4c 01 d8             	add    rax,r11
ffff80000080405f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:353
    //等待缓冲区解锁
    while (bh->b_lock);
ffff800000804063:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:353 (discriminator 1)
ffff800000804064:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804068:	0f b6 40 15          	movzx  eax,BYTE PTR [rax+0x15]
ffff80000080406c:	84 c0                	test   al,al
ffff80000080406e:	75 f4                	jne    ffff800000804064 <wait_on_buf+0x21>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:355
    
}
ffff800000804070:	90                   	nop
ffff800000804071:	90                   	nop
ffff800000804072:	5d                   	pop    rbp
ffff800000804073:	c3                   	ret    

ffff800000804074 <scan_dev>:
scan_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:359

//扫描块设备，读取分区，识别文件系统
int scan_dev(int dev)
{
ffff800000804074:	f3 0f 1e fa          	endbr64 
ffff800000804078:	55                   	push   rbp
ffff800000804079:	48 89 e5             	mov    rbp,rsp
ffff80000080407c:	41 57                	push   r15
ffff80000080407e:	53                   	push   rbx
ffff80000080407f:	48 83 ec 30          	sub    rsp,0x30
ffff800000804083:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804083 <scan_dev+0xf>
ffff80000080408a:	49 bb a5 e8 01 00 00 	movabs r11,0x1e8a5
ffff800000804091:	00 00 00 
ffff800000804094:	4c 01 db             	add    rbx,r11
ffff800000804097:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:363
//    device *blkdev=get_dev(dev);
//    buffer_head* bh=bread(dev,0);
//    if(!bh)return -1;
    char* buf= kmalloc();
ffff80000080409a:	49 89 df             	mov    r15,rbx
ffff80000080409d:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008040a2:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff8000008040a9:	ff ff ff 
ffff8000008040ac:	48 01 da             	add    rdx,rbx
ffff8000008040af:	ff d2                	call   rdx
ffff8000008040b1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:364
    int r=request(DISK_MAJOR_MAJOR,DISK_CMD_READ,0,1,buf);
ffff8000008040b5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008040b9:	49 89 c0             	mov    r8,rax
ffff8000008040bc:	b9 01 00 00 00       	mov    ecx,0x1
ffff8000008040c1:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008040c6:	be 20 00 00 00       	mov    esi,0x20
ffff8000008040cb:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008040d0:	49 89 df             	mov    r15,rbx
ffff8000008040d3:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff8000008040da:	ff ff ff 
ffff8000008040dd:	48 01 d8             	add    rax,rbx
ffff8000008040e0:	ff d0                	call   rax
ffff8000008040e2:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:365
    chk_result(r);
ffff8000008040e5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008040e8:	89 c7                	mov    edi,eax
ffff8000008040ea:	49 89 df             	mov    r15,rbx
ffff8000008040ed:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff8000008040f4:	ff ff ff 
ffff8000008040f7:	48 01 d8             	add    rax,rbx
ffff8000008040fa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:367

    dpt_t* dpte=buf+0x1be;
ffff8000008040fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804100:	48 05 be 01 00 00    	add    rax,0x1be
ffff800000804106:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368
    for(int i=0;i<4;i++)
ffff80000080410a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000804111:	eb 13                	jmp    ffff800000804126 <scan_dev+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:371 (discriminator 3)
    {
//        blkdev->par[i].type=dpte->type;
        int stlba=dpte->start_lba;
ffff800000804113:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804117:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080411a:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:387 (discriminator 3)
//        {
//            printf("err:unrecognised partition fs.\n");
//        }

//        blkdev->par[i].end_sec=dpte->end_lba;
        dpte++;
ffff80000080411d:	48 83 45 e8 10       	add    QWORD PTR [rbp-0x18],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368 (discriminator 3)
    for(int i=0;i<4;i++)
ffff800000804122:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368 (discriminator 1)
ffff800000804126:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080412a:	7e e7                	jle    ffff800000804113 <scan_dev+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:390
    }
//    brelse(bh);
    return 0;
ffff80000080412c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:391
}
ffff800000804131:	48 83 c4 30          	add    rsp,0x30
ffff800000804135:	5b                   	pop    rbx
ffff800000804136:	41 5f                	pop    r15
ffff800000804138:	5d                   	pop    rbp
ffff800000804139:	c3                   	ret    

ffff80000080413a <sync_buf>:
sync_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:394

int sync_buf(buffer_head* bh)
{
ffff80000080413a:	f3 0f 1e fa          	endbr64 
ffff80000080413e:	55                   	push   rbp
ffff80000080413f:	48 89 e5             	mov    rbp,rsp
ffff800000804142:	41 57                	push   r15
ffff800000804144:	48 83 ec 28          	sub    rsp,0x28
ffff800000804148:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804148 <sync_buf+0xe>
ffff80000080414f:	49 bb e0 e7 01 00 00 	movabs r11,0x1e7e0
ffff800000804156:	00 00 00 
ffff800000804159:	4c 01 d8             	add    rax,r11
ffff80000080415c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:395
    int dev=bh->b_dev;
ffff800000804160:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804164:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff800000804168:	0f b7 d2             	movzx  edx,dx
ffff80000080416b:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:396
    int block=bh->b_blocknr;
ffff80000080416e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804172:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000804176:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:398
    //这里需要调用块设备写函数write_block
    return write_block(dev,block,bh->b_data,BLOCK_SIZE);
ffff800000804179:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080417d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000804180:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffff800000804183:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff800000804186:	b9 00 02 00 00       	mov    ecx,0x200
ffff80000080418b:	49 89 c7             	mov    r15,rax
ffff80000080418e:	49 b8 7c 18 fe ff ff 	movabs r8,0xfffffffffffe187c
ffff800000804195:	ff ff ff 
ffff800000804198:	49 01 c0             	add    r8,rax
ffff80000080419b:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:400

}
ffff80000080419e:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008041a2:	c9                   	leave  
ffff8000008041a3:	c3                   	ret    

ffff8000008041a4 <write_block>:
write_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:403
//操作块设备函数
int write_block(int dev,int block,char *buf,int len)
{
ffff8000008041a4:	f3 0f 1e fa          	endbr64 
ffff8000008041a8:	55                   	push   rbp
ffff8000008041a9:	48 89 e5             	mov    rbp,rsp
ffff8000008041ac:	41 57                	push   r15
ffff8000008041ae:	53                   	push   rbx
ffff8000008041af:	48 83 ec 30          	sub    rsp,0x30
ffff8000008041b3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008041b3 <write_block+0xf>
ffff8000008041ba:	49 bb 75 e7 01 00 00 	movabs r11,0x1e775
ffff8000008041c1:	00 00 00 
ffff8000008041c4:	4c 01 db             	add    rbx,r11
ffff8000008041c7:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008041ca:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff8000008041cd:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff8000008041d1:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:405 (discriminator 1)
    do{
        buffer_head* bh=get_buf(dev,block);
ffff8000008041d4:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff8000008041d7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008041da:	89 d6                	mov    esi,edx
ffff8000008041dc:	89 c7                	mov    edi,eax
ffff8000008041de:	49 89 df             	mov    r15,rbx
ffff8000008041e1:	48 b8 3c 14 fe ff ff 	movabs rax,0xfffffffffffe143c
ffff8000008041e8:	ff ff ff 
ffff8000008041eb:	48 01 d8             	add    rax,rbx
ffff8000008041ee:	ff d0                	call   rax
ffff8000008041f0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:406 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff8000008041f4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008041f7:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008041fc:	39 d0                	cmp    eax,edx
ffff8000008041fe:	0f 4f c2             	cmovg  eax,edx
ffff800000804201:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:407 (discriminator 1)
        memcpy(bh->b_data,buf,size);
ffff800000804204:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000804207:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080420b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080420e:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000804212:	48 89 ce             	mov    rsi,rcx
ffff800000804215:	48 89 c7             	mov    rdi,rax
ffff800000804218:	49 89 df             	mov    r15,rbx
ffff80000080421b:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000804222:	ff ff ff 
ffff800000804225:	48 01 d8             	add    rax,rbx
ffff800000804228:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:408 (discriminator 1)
        len-=BLOCK_SIZE;
ffff80000080422a:	81 6d cc 00 02 00 00 	sub    DWORD PTR [rbp-0x34],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:409 (discriminator 1)
        bh->b_dirt=1;//修改置位
ffff800000804231:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804235:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:410 (discriminator 1)
        brelse(bh);
ffff800000804239:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080423d:	48 89 c7             	mov    rdi,rax
ffff800000804240:	49 89 df             	mov    r15,rbx
ffff800000804243:	48 b8 ba 0f fe ff ff 	movabs rax,0xfffffffffffe0fba
ffff80000080424a:	ff ff ff 
ffff80000080424d:	48 01 d8             	add    rax,rbx
ffff800000804250:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:411 (discriminator 1)
    }while(len>0);
ffff800000804252:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
ffff800000804256:	0f 8f 78 ff ff ff    	jg     ffff8000008041d4 <write_block+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:412
    return 0;
ffff80000080425c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:413
}
ffff800000804261:	48 83 c4 30          	add    rsp,0x30
ffff800000804265:	5b                   	pop    rbx
ffff800000804266:	41 5f                	pop    r15
ffff800000804268:	5d                   	pop    rbp
ffff800000804269:	c3                   	ret    

ffff80000080426a <read_block>:
read_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:415
int read_block(int dev,int block,char* buf,int len)
{
ffff80000080426a:	f3 0f 1e fa          	endbr64 
ffff80000080426e:	55                   	push   rbp
ffff80000080426f:	48 89 e5             	mov    rbp,rsp
ffff800000804272:	41 57                	push   r15
ffff800000804274:	53                   	push   rbx
ffff800000804275:	48 83 ec 30          	sub    rsp,0x30
ffff800000804279:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804279 <read_block+0xf>
ffff800000804280:	49 bb af e6 01 00 00 	movabs r11,0x1e6af
ffff800000804287:	00 00 00 
ffff80000080428a:	4c 01 db             	add    rbx,r11
ffff80000080428d:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000804290:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000804293:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff800000804297:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:417 (discriminator 1)
    do{
        buffer_head* bh=bread(dev,block);
ffff80000080429a:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080429d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008042a0:	89 d6                	mov    esi,edx
ffff8000008042a2:	89 c7                	mov    edi,eax
ffff8000008042a4:	49 89 df             	mov    r15,rbx
ffff8000008042a7:	48 b8 55 10 fe ff ff 	movabs rax,0xfffffffffffe1055
ffff8000008042ae:	ff ff ff 
ffff8000008042b1:	48 01 d8             	add    rax,rbx
ffff8000008042b4:	ff d0                	call   rax
ffff8000008042b6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:418 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff8000008042ba:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008042bd:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008042c2:	39 d0                	cmp    eax,edx
ffff8000008042c4:	0f 4f c2             	cmovg  eax,edx
ffff8000008042c7:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:419 (discriminator 1)
        memcpy(buf,bh->b_data,size);
ffff8000008042ca:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff8000008042cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042d1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008042d4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008042d8:	48 89 ce             	mov    rsi,rcx
ffff8000008042db:	48 89 c7             	mov    rdi,rax
ffff8000008042de:	49 89 df             	mov    r15,rbx
ffff8000008042e1:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff8000008042e8:	ff ff ff 
ffff8000008042eb:	48 01 d8             	add    rax,rbx
ffff8000008042ee:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:420 (discriminator 1)
        len-=BLOCK_SIZE;
ffff8000008042f0:	81 6d cc 00 02 00 00 	sub    DWORD PTR [rbp-0x34],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:421 (discriminator 1)
        brelse(bh);
ffff8000008042f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042fb:	48 89 c7             	mov    rdi,rax
ffff8000008042fe:	49 89 df             	mov    r15,rbx
ffff800000804301:	48 b8 ba 0f fe ff ff 	movabs rax,0xfffffffffffe0fba
ffff800000804308:	ff ff ff 
ffff80000080430b:	48 01 d8             	add    rax,rbx
ffff80000080430e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:422 (discriminator 1)
    }while(len>0);
ffff800000804310:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
ffff800000804314:	7f 84                	jg     ffff80000080429a <read_block+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:423
    return 0;
ffff800000804316:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:424
}
ffff80000080431b:	48 83 c4 30          	add    rsp,0x30
ffff80000080431f:	5b                   	pop    rbx
ffff800000804320:	41 5f                	pop    r15
ffff800000804322:	5d                   	pop    rbp
ffff800000804323:	c3                   	ret    

ffff800000804324 <init_vfs>:
init_vfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:427

int init_vfs()
{
ffff800000804324:	f3 0f 1e fa          	endbr64 
ffff800000804328:	55                   	push   rbp
ffff800000804329:	48 89 e5             	mov    rbp,rsp
ffff80000080432c:	41 57                	push   r15
ffff80000080432e:	53                   	push   rbx
ffff80000080432f:	48 83 ec 10          	sub    rsp,0x10
ffff800000804333:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804333 <init_vfs+0xf>
ffff80000080433a:	49 bb f5 e5 01 00 00 	movabs r11,0x1e5f5
ffff800000804341:	00 00 00 
ffff800000804344:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:431
    //扫描块设备
    extern device *dev_tree[];
    extern device devs[];
    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
ffff800000804347:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff80000080434e:	ff ff ff 
ffff800000804351:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804355:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804358:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432
    for(;p;p=p->next)
ffff80000080435c:	eb 5b                	jmp    ffff8000008043b9 <init_vfs+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:434
    {
        if(scan_dev(p-devs)!=0)return -1;
ffff80000080435e:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000804365:	ff ff ff 
ffff800000804368:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080436c:	48 89 c2             	mov    rdx,rax
ffff80000080436f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804373:	48 29 d0             	sub    rax,rdx
ffff800000804376:	48 c1 f8 02          	sar    rax,0x2
ffff80000080437a:	48 89 c2             	mov    rdx,rax
ffff80000080437d:	48 b8 19 9c 8f c1 f9 	movabs rax,0x8f9c18f9c18f9c19
ffff800000804384:	18 9c 8f 
ffff800000804387:	48 0f af c2          	imul   rax,rdx
ffff80000080438b:	89 c7                	mov    edi,eax
ffff80000080438d:	49 89 df             	mov    r15,rbx
ffff800000804390:	48 b8 4c 17 fe ff ff 	movabs rax,0xfffffffffffe174c
ffff800000804397:	ff ff ff 
ffff80000080439a:	48 01 d8             	add    rax,rbx
ffff80000080439d:	ff d0                	call   rax
ffff80000080439f:	85 c0                	test   eax,eax
ffff8000008043a1:	74 07                	je     ffff8000008043aa <init_vfs+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:434 (discriminator 1)
ffff8000008043a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008043a8:	eb 1b                	jmp    ffff8000008043c5 <init_vfs+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432
    for(;p;p=p->next)
ffff8000008043aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008043ae:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff8000008043b5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432 (discriminator 1)
ffff8000008043b9:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff8000008043be:	75 9e                	jne    ffff80000080435e <init_vfs+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:437
    }

    return 0;
ffff8000008043c0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:438
}
ffff8000008043c5:	48 83 c4 10          	add    rsp,0x10
ffff8000008043c9:	5b                   	pop    rbx
ffff8000008043ca:	41 5f                	pop    r15
ffff8000008043cc:	5d                   	pop    rbp
ffff8000008043cd:	c3                   	ret    

ffff8000008043ce <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
ffff8000008043ce:	f3 0f 1e fa          	endbr64 
ffff8000008043d2:	55                   	push   rbp
ffff8000008043d3:	48 89 e5             	mov    rbp,rsp
ffff8000008043d6:	41 57                	push   r15
ffff8000008043d8:	48 81 ec 88 00 00 00 	sub    rsp,0x88
ffff8000008043df:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008043df <make_dentry+0x11>
ffff8000008043e6:	49 bb 49 e5 01 00 00 	movabs r11,0x1e549
ffff8000008043ed:	00 00 00 
ffff8000008043f0:	4c 01 d8             	add    rax,r11
ffff8000008043f3:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff8000008043f7:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff8000008043fb:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
ffff8000008043fe:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff800000804402:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
    strcpy(d->name,name);
ffff800000804409:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080440d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000804410:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
ffff800000804414:	48 89 ce             	mov    rsi,rcx
ffff800000804417:	48 89 d7             	mov    rdi,rdx
ffff80000080441a:	49 89 c7             	mov    r15,rax
ffff80000080441d:	48 ba 51 12 ff ff ff 	movabs rdx,0xffffffffffff1251
ffff800000804424:	ff ff ff 
ffff800000804427:	48 01 c2             	add    rdx,rax
ffff80000080442a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
    d->name_length=namelen;
ffff80000080442c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000804430:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
ffff800000804433:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
ffff800000804436:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080443a:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff800000804441:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    list_init(&d->subdirs_list);
ffff800000804445:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000804449:	48 83 c0 28          	add    rax,0x28
ffff80000080444d:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    struct List * next;
};

__attribute__((always_inline)) inline void list_init(struct List * list)
{
    list->prev = NULL;
ffff800000804451:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804455:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080445c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804460:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804467:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000804468:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    list_init(&d->child_node);
ffff800000804469:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080446d:	48 83 c0 10          	add    rax,0x10
ffff800000804471:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000804475:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000804479:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000804480:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000804484:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080448b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080448c:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
    d->child_node.data=d;
ffff80000080448d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000804491:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff800000804495:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
    d->parent=parent;
ffff800000804499:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080449d:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008044a1:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:43
    list_add(&parent->subdirs_list,&d->child_node);
ffff8000008044a5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008044a9:	48 83 c0 10          	add    rax,0x10
ffff8000008044ad:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008044b1:	48 83 c2 28          	add    rdx,0x28
ffff8000008044b5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008044b9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
        new->next->prev = new;
    entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    if(entry->next==NULL)
ffff8000008044bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008044c1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008044c5:	48 85 c0             	test   rax,rax
ffff8000008044c8:	75 58                	jne    ffff800000804522 <make_dentry+0x154>
ffff8000008044ca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008044ce:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff8000008044d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008044d6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008044da:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008044de:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008044e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008044e6:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008044ea:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008044ee:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008044f2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008044f5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008044f9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008044fd:	48 85 c0             	test   rax,rax
ffff800000804500:	74 0f                	je     ffff800000804511 <make_dentry+0x143>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000804502:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804506:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080450a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080450e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000804511:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804515:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804519:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080451d:	e9 9c 00 00 00       	jmp    ffff8000008045be <make_dentry+0x1f0>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        list_add_to_behind(entry,new);
    else{
        struct List* p=entry;
ffff800000804522:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804526:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080452a:	eb 21                	jmp    ffff80000080454d <make_dentry+0x17f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080452c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804530:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000804534:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804538:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080453c:	48 39 c2             	cmp    rdx,rax
ffff80000080453f:	74 7c                	je     ffff8000008045bd <make_dentry+0x1ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000804541:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804545:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804549:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff80000080454d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804551:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804555:	48 85 c0             	test   rax,rax
ffff800000804558:	74 0e                	je     ffff800000804568 <make_dentry+0x19a>
ffff80000080455a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080455e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804562:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff800000804566:	75 c4                	jne    ffff80000080452c <make_dentry+0x15e>
ffff800000804568:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080456c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffff800000804570:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804574:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000804578:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080457c:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000804580:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000804584:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000804588:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080458c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804590:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000804593:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000804597:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080459b:	48 85 c0             	test   rax,rax
ffff80000080459e:	74 0f                	je     ffff8000008045af <make_dentry+0x1e1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008045a0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008045a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008045a8:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008045ac:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff8000008045af:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008045b3:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008045b7:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008045bb:	eb 01                	jmp    ffff8000008045be <make_dentry+0x1f0>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff8000008045bd:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:44
}
ffff8000008045be:	90                   	nop
ffff8000008045bf:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008045c3:	c9                   	leave  
ffff8000008045c4:	c3                   	ret    

ffff8000008045c5 <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:45
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,super_block* sb){
ffff8000008045c5:	f3 0f 1e fa          	endbr64 
ffff8000008045c9:	55                   	push   rbp
ffff8000008045ca:	48 89 e5             	mov    rbp,rsp
ffff8000008045cd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008045cd <make_inode+0x8>
ffff8000008045d4:	49 bb 5b e3 01 00 00 	movabs r11,0x1e35b
ffff8000008045db:	00 00 00 
ffff8000008045de:	4c 01 d8             	add    rax,r11
ffff8000008045e1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008045e5:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008045e9:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008045ed:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff8000008045f1:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:46
    i->f_ops=fops;
ffff8000008045f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008045f9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008045fd:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
    i->attribute=attr;
ffff800000804601:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804605:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804609:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:48
    i->sb=sb;
ffff80000080460d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804611:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804615:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:49
    i->file_size=0;
ffff800000804619:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080461d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:50
    i->inode_ops=iops;
ffff800000804624:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804628:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080462c:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:51
}
ffff800000804630:	90                   	nop
ffff800000804631:	5d                   	pop    rbp
ffff800000804632:	c3                   	ret    

ffff800000804633 <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:52
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* ddev,struct file_operations* fops){
ffff800000804633:	f3 0f 1e fa          	endbr64 
ffff800000804637:	55                   	push   rbp
ffff800000804638:	48 89 e5             	mov    rbp,rsp
ffff80000080463b:	41 57                	push   r15
ffff80000080463d:	41 54                	push   r12
ffff80000080463f:	53                   	push   rbx
ffff800000804640:	48 83 ec 78          	sub    rsp,0x78
ffff800000804644:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804644 <make_devf+0x11>
ffff80000080464b:	49 bb e4 e2 01 00 00 	movabs r11,0x1e2e4
ffff800000804652:	00 00 00 
ffff800000804655:	4c 01 db             	add    rbx,r11
ffff800000804658:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080465c:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff800000804660:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff800000804664:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff800000804668:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:53
    make_dentry(d,name, strlen(name),root_sb->root,&dev_dir_dops);
ffff80000080466f:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804676:	ff ff ff 
ffff800000804679:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080467d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804680:	4c 8b 20             	mov    r12,QWORD PTR [rax]
ffff800000804683:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000804687:	48 89 c7             	mov    rdi,rax
ffff80000080468a:	49 89 df             	mov    r15,rbx
ffff80000080468d:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff800000804694:	ff ff ff 
ffff800000804697:	48 01 d8             	add    rax,rbx
ffff80000080469a:	ff d0                	call   rax
ffff80000080469c:	89 c2                	mov    edx,eax
ffff80000080469e:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff8000008046a2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008046a6:	48 b9 a8 ff ff ff ff 	movabs rcx,0xffffffffffffffa8
ffff8000008046ad:	ff ff ff 
ffff8000008046b0:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff8000008046b4:	49 89 c8             	mov    r8,rcx
ffff8000008046b7:	4c 89 e1             	mov    rcx,r12
ffff8000008046ba:	48 89 c7             	mov    rdi,rax
ffff8000008046bd:	49 89 df             	mov    r15,rbx
ffff8000008046c0:	48 b8 a6 1a fe ff ff 	movabs rax,0xfffffffffffe1aa6
ffff8000008046c7:	ff ff ff 
ffff8000008046ca:	48 01 d8             	add    rax,rbx
ffff8000008046cd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:54
    d->dir_inode=i;
ffff8000008046cf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008046d3:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff8000008046d7:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
    make_inode(i,ddev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
ffff8000008046db:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff8000008046e2:	ff ff ff 
ffff8000008046e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046e9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008046ec:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008046f0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008046f4:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
ffff8000008046f8:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff8000008046ff:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000804703:	49 89 c8             	mov    r8,rcx
ffff800000804706:	b9 04 00 00 00       	mov    ecx,0x4
ffff80000080470b:	48 89 c7             	mov    rdi,rax
ffff80000080470e:	49 89 df             	mov    r15,rbx
ffff800000804711:	48 b8 9d 1c fe ff ff 	movabs rax,0xfffffffffffe1c9d
ffff800000804718:	ff ff ff 
ffff80000080471b:	48 01 d8             	add    rax,rbx
ffff80000080471e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:56
    list_add(&ddev->subdirs_list,&d->child_node);//添加到/dev下
ffff800000804720:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000804724:	48 83 c0 10          	add    rax,0x10
ffff800000804728:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080472c:	48 83 c2 28          	add    rdx,0x28
ffff800000804730:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000804734:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff800000804738:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080473c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804740:	48 85 c0             	test   rax,rax
ffff800000804743:	75 58                	jne    ffff80000080479d <make_devf+0x16a>
ffff800000804745:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804749:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff80000080474d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804751:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000804755:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804759:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080475d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804761:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000804765:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804769:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080476d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000804770:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804774:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804778:	48 85 c0             	test   rax,rax
ffff80000080477b:	74 0f                	je     ffff80000080478c <make_devf+0x159>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080477d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804781:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804785:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804789:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080478c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804790:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804794:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000804798:	e9 9c 00 00 00       	jmp    ffff800000804839 <make_devf+0x206>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080479d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008047a1:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008047a5:	eb 21                	jmp    ffff8000008047c8 <make_devf+0x195>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff8000008047a7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008047ab:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008047af:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008047b3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008047b7:	48 39 c2             	cmp    rdx,rax
ffff8000008047ba:	74 7c                	je     ffff800000804838 <make_devf+0x205>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008047bc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008047c0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008047c4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff8000008047c8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008047cc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008047d0:	48 85 c0             	test   rax,rax
ffff8000008047d3:	74 0e                	je     ffff8000008047e3 <make_devf+0x1b0>
ffff8000008047d5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008047d9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008047dd:	48 39 45 b8          	cmp    QWORD PTR [rbp-0x48],rax
ffff8000008047e1:	75 c4                	jne    ffff8000008047a7 <make_devf+0x174>
ffff8000008047e3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008047e7:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff8000008047eb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008047ef:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008047f3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008047f7:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008047fb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008047ff:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000804803:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804807:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080480b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080480e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804812:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804816:	48 85 c0             	test   rax,rax
ffff800000804819:	74 0f                	je     ffff80000080482a <make_devf+0x1f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080481b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080481f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804823:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000804827:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080482a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080482e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000804832:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000804836:	eb 01                	jmp    ffff800000804839 <make_devf+0x206>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff800000804838:	90                   	nop
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:57
}
ffff800000804839:	90                   	nop
ffff80000080483a:	48 83 c4 78          	add    rsp,0x78
ffff80000080483e:	5b                   	pop    rbx
ffff80000080483f:	41 5c                	pop    r12
ffff800000804841:	41 5f                	pop    r15
ffff800000804843:	5d                   	pop    rbp
ffff800000804844:	c3                   	ret    

ffff800000804845 <init_devman>:
init_devman():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:65
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
struct dir_entry* ddev=NULL,*dmnt,*dconsole,*dhd0,*dtty;
struct file ftty;
int init_devman()
{
ffff800000804845:	f3 0f 1e fa          	endbr64 
ffff800000804849:	55                   	push   rbp
ffff80000080484a:	48 89 e5             	mov    rbp,rsp
ffff80000080484d:	41 57                	push   r15
ffff80000080484f:	53                   	push   rbx
ffff800000804850:	48 83 ec 30          	sub    rsp,0x30
ffff800000804854:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804854 <init_devman+0xf>
ffff80000080485b:	49 bb d4 e0 01 00 00 	movabs r11,0x1e0d4
ffff800000804862:	00 00 00 
ffff800000804865:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:67
    //创建dev文件夹
    ddev=(struct dir_entry*) kmalloc();
ffff800000804868:	49 89 df             	mov    r15,rbx
ffff80000080486b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804870:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000804877:	ff ff ff 
ffff80000080487a:	48 01 da             	add    rdx,rbx
ffff80000080487d:	ff d2                	call   rdx
ffff80000080487f:	48 89 c2             	mov    rdx,rax
ffff800000804882:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000804889:	ff ff ff 
ffff80000080488c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804890:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
    struct index_node* idev=ddev+1;
ffff800000804893:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080489a:	ff ff ff 
ffff80000080489d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048a1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048a4:	48 83 c0 58          	add    rax,0x58
ffff8000008048a8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    ddev->name=idev+1;
ffff8000008048ac:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008048b3:	ff ff ff 
ffff8000008048b6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048ba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048bd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008048c1:	48 83 c2 38          	add    rdx,0x38
ffff8000008048c5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    make_dentry(ddev,"dev",3,root_sb->root,root_sb->root->dir_ops);
ffff8000008048c8:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff8000008048cf:	ff ff ff 
ffff8000008048d2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048dc:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff8000008048e0:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff8000008048e7:	ff ff ff 
ffff8000008048ea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048f1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008048f4:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008048fb:	ff ff ff 
ffff8000008048fe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804902:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804905:	49 89 c8             	mov    r8,rcx
ffff800000804908:	48 89 d1             	mov    rcx,rdx
ffff80000080490b:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804910:	48 be e0 d4 ff ff ff 	movabs rsi,0xffffffffffffd4e0
ffff800000804917:	ff ff ff 
ffff80000080491a:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff80000080491e:	48 89 c7             	mov    rdi,rax
ffff800000804921:	49 89 df             	mov    r15,rbx
ffff800000804924:	48 b8 a6 1a fe ff ff 	movabs rax,0xfffffffffffe1aa6
ffff80000080492b:	ff ff ff 
ffff80000080492e:	48 01 d8             	add    rax,rbx
ffff800000804931:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    ddev->dir_inode=idev;
ffff800000804933:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080493a:	ff ff ff 
ffff80000080493d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804941:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804944:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804948:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    make_inode(idev,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff80000080494c:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804953:	ff ff ff 
ffff800000804956:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080495a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080495d:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804964:	ff ff ff 
ffff800000804967:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080496b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080496e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804971:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804975:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff800000804979:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804980:	ff ff ff 
ffff800000804983:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804987:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080498a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080498d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804991:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
ffff800000804995:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804999:	49 89 c8             	mov    r8,rcx
ffff80000080499c:	b9 02 00 00 00       	mov    ecx,0x2
ffff8000008049a1:	48 89 c7             	mov    rdi,rax
ffff8000008049a4:	49 89 df             	mov    r15,rbx
ffff8000008049a7:	48 b8 9d 1c fe ff ff 	movabs rax,0xfffffffffffe1c9d
ffff8000008049ae:	ff ff ff 
ffff8000008049b1:	48 01 d8             	add    rax,rbx
ffff8000008049b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:73
    idev->private_index_info=ddev;
ffff8000008049b6:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008049bd:	ff ff ff 
ffff8000008049c0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049c4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008049c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049cb:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:76

    //创建mnt文件夹
    dmnt=(struct dir_entry*) kmalloc();
ffff8000008049cf:	49 89 df             	mov    r15,rbx
ffff8000008049d2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008049d7:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff8000008049de:	ff ff ff 
ffff8000008049e1:	48 01 da             	add    rdx,rbx
ffff8000008049e4:	ff d2                	call   rdx
ffff8000008049e6:	48 89 c2             	mov    rdx,rax
ffff8000008049e9:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008049f0:	ff ff ff 
ffff8000008049f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049f7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77
    struct index_node* imnt=dmnt+1;
ffff8000008049fa:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804a01:	ff ff ff 
ffff800000804a04:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a08:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a0b:	48 83 c0 58          	add    rax,0x58
ffff800000804a0f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    dmnt->name=imnt+1;
ffff800000804a13:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804a1a:	ff ff ff 
ffff800000804a1d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a21:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a24:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804a28:	48 83 c2 38          	add    rdx,0x38
ffff800000804a2c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
ffff800000804a2f:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804a36:	ff ff ff 
ffff800000804a39:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a3d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a40:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a43:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff800000804a47:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804a4e:	ff ff ff 
ffff800000804a51:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a55:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a58:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804a5b:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804a62:	ff ff ff 
ffff800000804a65:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a69:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a6c:	49 89 c8             	mov    r8,rcx
ffff800000804a6f:	48 89 d1             	mov    rcx,rdx
ffff800000804a72:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804a77:	48 be e4 d4 ff ff ff 	movabs rsi,0xffffffffffffd4e4
ffff800000804a7e:	ff ff ff 
ffff800000804a81:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff800000804a85:	48 89 c7             	mov    rdi,rax
ffff800000804a88:	49 89 df             	mov    r15,rbx
ffff800000804a8b:	48 b8 a6 1a fe ff ff 	movabs rax,0xfffffffffffe1aa6
ffff800000804a92:	ff ff ff 
ffff800000804a95:	48 01 d8             	add    rax,rbx
ffff800000804a98:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    dmnt->dir_inode=imnt;
ffff800000804a9a:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804aa1:	ff ff ff 
ffff800000804aa4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804aa8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804aab:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804aaf:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:81
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff800000804ab3:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804aba:	ff ff ff 
ffff800000804abd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804ac1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000804ac4:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804acb:	ff ff ff 
ffff800000804ace:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804ad2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804ad5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804ad8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804adc:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff800000804ae0:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804ae7:	ff ff ff 
ffff800000804aea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804aee:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804af1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804af4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804af8:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
ffff800000804afc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b00:	49 89 c8             	mov    r8,rcx
ffff800000804b03:	b9 02 00 00 00       	mov    ecx,0x2
ffff800000804b08:	48 89 c7             	mov    rdi,rax
ffff800000804b0b:	49 89 df             	mov    r15,rbx
ffff800000804b0e:	48 b8 9d 1c fe ff ff 	movabs rax,0xfffffffffffe1c9d
ffff800000804b15:	ff ff ff 
ffff800000804b18:	48 01 d8             	add    rax,rbx
ffff800000804b1b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:82
    imnt->private_index_info=dmnt;
ffff800000804b1d:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804b24:	ff ff ff 
ffff800000804b27:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b2b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804b2e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b32:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87


    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc();
ffff800000804b36:	49 89 df             	mov    r15,rbx
ffff800000804b39:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804b3e:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000804b45:	ff ff ff 
ffff800000804b48:	48 01 da             	add    rdx,rbx
ffff800000804b4b:	ff d2                	call   rdx
ffff800000804b4d:	48 89 c2             	mov    rdx,rax
ffff800000804b50:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff800000804b57:	ff ff ff 
ffff800000804b5a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b5e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    struct index_node* iconsole=dconsole+1;
ffff800000804b61:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff800000804b68:	ff ff ff 
ffff800000804b6b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b6f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804b72:	48 83 c0 58          	add    rax,0x58
ffff800000804b76:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:89
    dconsole->name=iconsole+1;
ffff800000804b7a:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff800000804b81:	ff ff ff 
ffff800000804b84:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b88:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804b8b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804b8f:	48 83 c2 38          	add    rdx,0x38
ffff800000804b93:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:90
    make_devf(dconsole,iconsole,"console",ddev,&framebuffer_fops);
ffff800000804b96:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000804b9d:	ff ff ff 
ffff800000804ba0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804ba4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804ba7:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff800000804bae:	ff ff ff 
ffff800000804bb1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804bb5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804bb8:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000804bbc:	48 b9 28 fe ff ff ff 	movabs rcx,0xfffffffffffffe28
ffff800000804bc3:	ff ff ff 
ffff800000804bc6:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804bca:	49 89 c8             	mov    r8,rcx
ffff800000804bcd:	48 89 d1             	mov    rcx,rdx
ffff800000804bd0:	48 ba e8 d4 ff ff ff 	movabs rdx,0xffffffffffffd4e8
ffff800000804bd7:	ff ff ff 
ffff800000804bda:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804bde:	48 89 c7             	mov    rdi,rax
ffff800000804be1:	49 89 df             	mov    r15,rbx
ffff800000804be4:	48 b8 0b 1d fe ff ff 	movabs rax,0xfffffffffffe1d0b
ffff800000804beb:	ff ff ff 
ffff800000804bee:	48 01 d8             	add    rax,rbx
ffff800000804bf1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc();
ffff800000804bf3:	49 89 df             	mov    r15,rbx
ffff800000804bf6:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804bfb:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000804c02:	ff ff ff 
ffff800000804c05:	48 01 da             	add    rdx,rbx
ffff800000804c08:	ff d2                	call   rdx
ffff800000804c0a:	48 89 c2             	mov    rdx,rax
ffff800000804c0d:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000804c14:	ff ff ff 
ffff800000804c17:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c1b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:93
    struct index_node* ihd0=dhd0+1;
ffff800000804c1e:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000804c25:	ff ff ff 
ffff800000804c28:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c2c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804c2f:	48 83 c0 58          	add    rax,0x58
ffff800000804c33:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:94
    dhd0->name=ihd0+1;
ffff800000804c37:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000804c3e:	ff ff ff 
ffff800000804c41:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c45:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804c48:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804c4c:	48 83 c2 38          	add    rdx,0x38
ffff800000804c50:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:95
    make_devf(dhd0,ihd0,"hd0",ddev,&hd_fops);
ffff800000804c53:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000804c5a:	ff ff ff 
ffff800000804c5d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c61:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804c64:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000804c6b:	ff ff ff 
ffff800000804c6e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c72:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804c75:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000804c79:	48 b9 a8 fd ff ff ff 	movabs rcx,0xfffffffffffffda8
ffff800000804c80:	ff ff ff 
ffff800000804c83:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804c87:	49 89 c8             	mov    r8,rcx
ffff800000804c8a:	48 89 d1             	mov    rcx,rdx
ffff800000804c8d:	48 ba f0 d4 ff ff ff 	movabs rdx,0xffffffffffffd4f0
ffff800000804c94:	ff ff ff 
ffff800000804c97:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804c9b:	48 89 c7             	mov    rdi,rax
ffff800000804c9e:	49 89 df             	mov    r15,rbx
ffff800000804ca1:	48 b8 0b 1d fe ff ff 	movabs rax,0xfffffffffffe1d0b
ffff800000804ca8:	ff ff ff 
ffff800000804cab:	48 01 d8             	add    rax,rbx
ffff800000804cae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:97
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc();
ffff800000804cb0:	49 89 df             	mov    r15,rbx
ffff800000804cb3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804cb8:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000804cbf:	ff ff ff 
ffff800000804cc2:	48 01 da             	add    rdx,rbx
ffff800000804cc5:	ff d2                	call   rdx
ffff800000804cc7:	48 89 c2             	mov    rdx,rax
ffff800000804cca:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff800000804cd1:	ff ff ff 
ffff800000804cd4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804cd8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:98
    struct index_node* itty=dtty+1;
ffff800000804cdb:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff800000804ce2:	ff ff ff 
ffff800000804ce5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804ce9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804cec:	48 83 c0 58          	add    rax,0x58
ffff800000804cf0:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:99
    dtty->name=itty+1;
ffff800000804cf4:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff800000804cfb:	ff ff ff 
ffff800000804cfe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804d02:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804d05:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804d09:	48 83 c2 38          	add    rdx,0x38
ffff800000804d0d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:100
    make_devf(dtty,itty,"tty",ddev,&tty_fops);
ffff800000804d10:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000804d17:	ff ff ff 
ffff800000804d1a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804d1e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804d21:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff800000804d28:	ff ff ff 
ffff800000804d2b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804d2f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804d32:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff800000804d36:	48 b9 b0 fe ff ff ff 	movabs rcx,0xfffffffffffffeb0
ffff800000804d3d:	ff ff ff 
ffff800000804d40:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804d44:	49 89 c8             	mov    r8,rcx
ffff800000804d47:	48 89 d1             	mov    rcx,rdx
ffff800000804d4a:	48 ba f4 d4 ff ff ff 	movabs rdx,0xffffffffffffd4f4
ffff800000804d51:	ff ff ff 
ffff800000804d54:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804d58:	48 89 c7             	mov    rdi,rax
ffff800000804d5b:	49 89 df             	mov    r15,rbx
ffff800000804d5e:	48 b8 0b 1d fe ff ff 	movabs rax,0xfffffffffffe1d0b
ffff800000804d65:	ff ff ff 
ffff800000804d68:	48 01 d8             	add    rax,rbx
ffff800000804d6b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:102
    //初始化一下
    tty_fops.open(itty,&ftty);
ffff800000804d6d:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000804d74:	ff ff ff 
ffff800000804d77:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804d7b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804d7e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804d82:	48 b9 10 fe ff ff ff 	movabs rcx,0xfffffffffffffe10
ffff800000804d89:	ff ff ff 
ffff800000804d8c:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804d90:	48 89 ce             	mov    rsi,rcx
ffff800000804d93:	48 89 c7             	mov    rdi,rax
ffff800000804d96:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:104

}
ffff800000804d98:	90                   	nop
ffff800000804d99:	48 83 c4 30          	add    rsp,0x30
ffff800000804d9d:	5b                   	pop    rbx
ffff800000804d9e:	41 5f                	pop    r15
ffff800000804da0:	5d                   	pop    rbp
ffff800000804da1:	c3                   	ret    

ffff800000804da2 <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106
//
long open_dev(struct index_node * inode,struct file * filp){
ffff800000804da2:	f3 0f 1e fa          	endbr64 
ffff800000804da6:	55                   	push   rbp
ffff800000804da7:	48 89 e5             	mov    rbp,rsp
ffff800000804daa:	41 57                	push   r15
ffff800000804dac:	53                   	push   rbx
ffff800000804dad:	48 83 ec 20          	sub    rsp,0x20
ffff800000804db1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804db1 <open_dev+0xf>
ffff800000804db8:	49 bb 77 db 01 00 00 	movabs r11,0x1db77
ffff800000804dbf:	00 00 00 
ffff800000804dc2:	4c 01 db             	add    rbx,r11
ffff800000804dc5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804dc9:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:108
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804dcd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804dd1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804dd5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804dd8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:109
    char* p=name+ strlen(name)-1;
ffff800000804ddc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804de0:	48 89 c7             	mov    rdi,rax
ffff800000804de3:	49 89 df             	mov    r15,rbx
ffff800000804de6:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff800000804ded:	ff ff ff 
ffff800000804df0:	48 01 d8             	add    rax,rbx
ffff800000804df3:	ff d0                	call   rax
ffff800000804df5:	48 98                	cdqe   
ffff800000804df7:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804dfb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804dff:	48 01 d0             	add    rax,rdx
ffff800000804e02:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110
    for(;*p!='/'&&p>=name;p--);
ffff800000804e06:	eb 05                	jmp    ffff800000804e0d <open_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 3)
ffff800000804e08:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 1)
ffff800000804e0d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e11:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804e14:	3c 2f                	cmp    al,0x2f
ffff800000804e16:	74 0a                	je     ffff800000804e22 <open_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 2)
ffff800000804e18:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e1c:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804e20:	73 e6                	jae    ffff800000804e08 <open_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111
    if(p>=name)
ffff800000804e22:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e26:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804e2a:	72 0c                	jb     ffff800000804e38 <open_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:112
        name=p+1;
ffff800000804e2c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e30:	48 83 c0 01          	add    rax,0x1
ffff800000804e34:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:113
    if(memcmp(name,"tty",3)==0){
ffff800000804e38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e3c:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804e41:	48 b9 f4 d4 ff ff ff 	movabs rcx,0xffffffffffffd4f4
ffff800000804e48:	ff ff ff 
ffff800000804e4b:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804e4f:	48 89 ce             	mov    rsi,rcx
ffff800000804e52:	48 89 c7             	mov    rdi,rax
ffff800000804e55:	49 89 df             	mov    r15,rbx
ffff800000804e58:	48 b8 97 11 ff ff ff 	movabs rax,0xffffffffffff1197
ffff800000804e5f:	ff ff ff 
ffff800000804e62:	48 01 d8             	add    rax,rbx
ffff800000804e65:	ff d0                	call   rax
ffff800000804e67:	85 c0                	test   eax,eax
ffff800000804e69:	75 22                	jne    ffff800000804e8d <open_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:114
        return init_tty(inode,filp);
ffff800000804e6b:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804e6f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804e73:	48 89 d6             	mov    rsi,rdx
ffff800000804e76:	48 89 c7             	mov    rdi,rax
ffff800000804e79:	49 89 df             	mov    r15,rbx
ffff800000804e7c:	48 b8 15 05 ff ff ff 	movabs rax,0xffffffffffff0515
ffff800000804e83:	ff ff ff 
ffff800000804e86:	48 01 d8             	add    rax,rbx
ffff800000804e89:	ff d0                	call   rax
ffff800000804e8b:	eb 57                	jmp    ffff800000804ee4 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:115
    }else if(strcmp(name,"console")==0){
ffff800000804e8d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e91:	48 ba e8 d4 ff ff ff 	movabs rdx,0xffffffffffffd4e8
ffff800000804e98:	ff ff ff 
ffff800000804e9b:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804e9f:	48 89 d6             	mov    rsi,rdx
ffff800000804ea2:	48 89 c7             	mov    rdi,rax
ffff800000804ea5:	49 89 df             	mov    r15,rbx
ffff800000804ea8:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff800000804eaf:	ff ff ff 
ffff800000804eb2:	48 01 d8             	add    rax,rbx
ffff800000804eb5:	ff d0                	call   rax
ffff800000804eb7:	85 c0                	test   eax,eax
ffff800000804eb9:	75 22                	jne    ffff800000804edd <open_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:116
        return open_framebuffer(inode,filp);
ffff800000804ebb:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804ebf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804ec3:	48 89 d6             	mov    rsi,rdx
ffff800000804ec6:	48 89 c7             	mov    rdi,rax
ffff800000804ec9:	49 89 df             	mov    r15,rbx
ffff800000804ecc:	48 b8 e3 97 fe ff ff 	movabs rax,0xfffffffffffe97e3
ffff800000804ed3:	ff ff ff 
ffff800000804ed6:	48 01 d8             	add    rax,rbx
ffff800000804ed9:	ff d0                	call   rax
ffff800000804edb:	eb 07                	jmp    ffff800000804ee4 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:118
    }
    return -1;
ffff800000804edd:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:119
}
ffff800000804ee4:	48 83 c4 20          	add    rsp,0x20
ffff800000804ee8:	5b                   	pop    rbx
ffff800000804ee9:	41 5f                	pop    r15
ffff800000804eeb:	5d                   	pop    rbp
ffff800000804eec:	c3                   	ret    

ffff800000804eed <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120
long close_dev(struct index_node * inode,struct file * filp){
ffff800000804eed:	f3 0f 1e fa          	endbr64 
ffff800000804ef1:	55                   	push   rbp
ffff800000804ef2:	48 89 e5             	mov    rbp,rsp
ffff800000804ef5:	41 57                	push   r15
ffff800000804ef7:	53                   	push   rbx
ffff800000804ef8:	48 83 ec 20          	sub    rsp,0x20
ffff800000804efc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804efc <close_dev+0xf>
ffff800000804f03:	49 bb 2c da 01 00 00 	movabs r11,0x1da2c
ffff800000804f0a:	00 00 00 
ffff800000804f0d:	4c 01 db             	add    rbx,r11
ffff800000804f10:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804f14:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:122
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804f18:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804f1c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804f20:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804f23:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:123
    char* p=name+ strlen(name)-1;
ffff800000804f27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804f2b:	48 89 c7             	mov    rdi,rax
ffff800000804f2e:	49 89 df             	mov    r15,rbx
ffff800000804f31:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff800000804f38:	ff ff ff 
ffff800000804f3b:	48 01 d8             	add    rax,rbx
ffff800000804f3e:	ff d0                	call   rax
ffff800000804f40:	48 98                	cdqe   
ffff800000804f42:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804f46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804f4a:	48 01 d0             	add    rax,rdx
ffff800000804f4d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124
    for(;*p!='/'&&p>=name;p--);
ffff800000804f51:	eb 05                	jmp    ffff800000804f58 <close_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 3)
ffff800000804f53:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 1)
ffff800000804f58:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f5c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804f5f:	3c 2f                	cmp    al,0x2f
ffff800000804f61:	74 0a                	je     ffff800000804f6d <close_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 2)
ffff800000804f63:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f67:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804f6b:	73 e6                	jae    ffff800000804f53 <close_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125
    if(p>=name)
ffff800000804f6d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f71:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804f75:	72 0c                	jb     ffff800000804f83 <close_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:126
        name=p+1;
ffff800000804f77:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f7b:	48 83 c0 01          	add    rax,0x1
ffff800000804f7f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:127
    if(memcmp(name,"tty",3)==0){
ffff800000804f83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804f87:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804f8c:	48 b9 f4 d4 ff ff ff 	movabs rcx,0xffffffffffffd4f4
ffff800000804f93:	ff ff ff 
ffff800000804f96:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804f9a:	48 89 ce             	mov    rsi,rcx
ffff800000804f9d:	48 89 c7             	mov    rdi,rax
ffff800000804fa0:	49 89 df             	mov    r15,rbx
ffff800000804fa3:	48 b8 97 11 ff ff ff 	movabs rax,0xffffffffffff1197
ffff800000804faa:	ff ff ff 
ffff800000804fad:	48 01 d8             	add    rax,rbx
ffff800000804fb0:	ff d0                	call   rax
ffff800000804fb2:	85 c0                	test   eax,eax
ffff800000804fb4:	75 22                	jne    ffff800000804fd8 <close_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:128
        return close_tty(inode,filp);
ffff800000804fb6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804fba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804fbe:	48 89 d6             	mov    rsi,rdx
ffff800000804fc1:	48 89 c7             	mov    rdi,rax
ffff800000804fc4:	49 89 df             	mov    r15,rbx
ffff800000804fc7:	48 b8 48 04 ff ff ff 	movabs rax,0xffffffffffff0448
ffff800000804fce:	ff ff ff 
ffff800000804fd1:	48 01 d8             	add    rax,rbx
ffff800000804fd4:	ff d0                	call   rax
ffff800000804fd6:	eb 57                	jmp    ffff80000080502f <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:129
    }else if(strcmp(name,"console")==0){
ffff800000804fd8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804fdc:	48 ba e8 d4 ff ff ff 	movabs rdx,0xffffffffffffd4e8
ffff800000804fe3:	ff ff ff 
ffff800000804fe6:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804fea:	48 89 d6             	mov    rsi,rdx
ffff800000804fed:	48 89 c7             	mov    rdi,rax
ffff800000804ff0:	49 89 df             	mov    r15,rbx
ffff800000804ff3:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff800000804ffa:	ff ff ff 
ffff800000804ffd:	48 01 d8             	add    rax,rbx
ffff800000805000:	ff d0                	call   rax
ffff800000805002:	85 c0                	test   eax,eax
ffff800000805004:	75 22                	jne    ffff800000805028 <close_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130
        return close_framebuffer(inode,filp);
ffff800000805006:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080500a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080500e:	48 89 d6             	mov    rsi,rdx
ffff800000805011:	48 89 c7             	mov    rdi,rax
ffff800000805014:	49 89 df             	mov    r15,rbx
ffff800000805017:	48 b8 3a 98 fe ff ff 	movabs rax,0xfffffffffffe983a
ffff80000080501e:	ff ff ff 
ffff800000805021:	48 01 d8             	add    rax,rbx
ffff800000805024:	ff d0                	call   rax
ffff800000805026:	eb 07                	jmp    ffff80000080502f <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:132
    }
    return -1;
ffff800000805028:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:134

}
ffff80000080502f:	48 83 c4 20          	add    rsp,0x20
ffff800000805033:	5b                   	pop    rbx
ffff800000805034:	41 5f                	pop    r15
ffff800000805036:	5d                   	pop    rbp
ffff800000805037:	c3                   	ret    

ffff800000805038 <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:135
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000805038:	f3 0f 1e fa          	endbr64 
ffff80000080503c:	55                   	push   rbp
ffff80000080503d:	48 89 e5             	mov    rbp,rsp
ffff800000805040:	41 57                	push   r15
ffff800000805042:	53                   	push   rbx
ffff800000805043:	48 83 ec 30          	sub    rsp,0x30
ffff800000805047:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805047 <read_dev+0xf>
ffff80000080504e:	49 bb e1 d8 01 00 00 	movabs r11,0x1d8e1
ffff800000805055:	00 00 00 
ffff800000805058:	4c 01 db             	add    rbx,r11
ffff80000080505b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080505f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000805063:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000805067:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:137
    //查看文件名
    char* name=filp->dentry->name;
ffff80000080506b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080506f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000805073:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805076:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:138
    char* p=name+ strlen(name)-1;
ffff80000080507a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080507e:	48 89 c7             	mov    rdi,rax
ffff800000805081:	49 89 df             	mov    r15,rbx
ffff800000805084:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff80000080508b:	ff ff ff 
ffff80000080508e:	48 01 d8             	add    rax,rbx
ffff800000805091:	ff d0                	call   rax
ffff800000805093:	48 98                	cdqe   
ffff800000805095:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000805099:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080509d:	48 01 d0             	add    rax,rdx
ffff8000008050a0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139
    for(;*p!='/'&&p>=name;p--);
ffff8000008050a4:	eb 05                	jmp    ffff8000008050ab <read_dev+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 3)
ffff8000008050a6:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 1)
ffff8000008050ab:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008050af:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008050b2:	3c 2f                	cmp    al,0x2f
ffff8000008050b4:	74 0a                	je     ffff8000008050c0 <read_dev+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 2)
ffff8000008050b6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008050ba:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008050be:	73 e6                	jae    ffff8000008050a6 <read_dev+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:140
    if(p>=name)
ffff8000008050c0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008050c4:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008050c8:	72 0c                	jb     ffff8000008050d6 <read_dev+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:141
        name=p+1;
ffff8000008050ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008050ce:	48 83 c0 01          	add    rax,0x1
ffff8000008050d2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142
    if(memcmp(name,"tty",3)==0){
ffff8000008050d6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008050da:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008050df:	48 b9 f4 d4 ff ff ff 	movabs rcx,0xffffffffffffd4f4
ffff8000008050e6:	ff ff ff 
ffff8000008050e9:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff8000008050ed:	48 89 ce             	mov    rsi,rcx
ffff8000008050f0:	48 89 c7             	mov    rdi,rax
ffff8000008050f3:	49 89 df             	mov    r15,rbx
ffff8000008050f6:	48 b8 97 11 ff ff ff 	movabs rax,0xffffffffffff1197
ffff8000008050fd:	ff ff ff 
ffff800000805100:	48 01 d8             	add    rax,rbx
ffff800000805103:	ff d0                	call   rax
ffff800000805105:	85 c0                	test   eax,eax
ffff800000805107:	75 27                	jne    ffff800000805130 <read_dev+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:143
        return read_tty(filp,buf,count,position);
ffff800000805109:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080510d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805111:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000805115:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805119:	48 89 c7             	mov    rdi,rax
ffff80000080511c:	49 89 df             	mov    r15,rbx
ffff80000080511f:	48 b8 69 06 ff ff ff 	movabs rax,0xffffffffffff0669
ffff800000805126:	ff ff ff 
ffff800000805129:	48 01 d8             	add    rax,rbx
ffff80000080512c:	ff d0                	call   rax
ffff80000080512e:	eb 5c                	jmp    ffff80000080518c <read_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:144
    }else if(strcmp(name,"console")==0){
ffff800000805130:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805134:	48 ba e8 d4 ff ff ff 	movabs rdx,0xffffffffffffd4e8
ffff80000080513b:	ff ff ff 
ffff80000080513e:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000805142:	48 89 d6             	mov    rsi,rdx
ffff800000805145:	48 89 c7             	mov    rdi,rax
ffff800000805148:	49 89 df             	mov    r15,rbx
ffff80000080514b:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff800000805152:	ff ff ff 
ffff800000805155:	48 01 d8             	add    rax,rbx
ffff800000805158:	ff d0                	call   rax
ffff80000080515a:	85 c0                	test   eax,eax
ffff80000080515c:	75 27                	jne    ffff800000805185 <read_dev+0x14d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
        return read_framebuffer(filp,buf,count,position);
ffff80000080515e:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000805162:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805166:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080516a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080516e:	48 89 c7             	mov    rdi,rax
ffff800000805171:	49 89 df             	mov    r15,rbx
ffff800000805174:	48 b8 61 98 fe ff ff 	movabs rax,0xfffffffffffe9861
ffff80000080517b:	ff ff ff 
ffff80000080517e:	48 01 d8             	add    rax,rbx
ffff800000805181:	ff d0                	call   rax
ffff800000805183:	eb 07                	jmp    ffff80000080518c <read_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147
    }
    return -1;
ffff800000805185:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:149

}
ffff80000080518c:	48 83 c4 30          	add    rsp,0x30
ffff800000805190:	5b                   	pop    rbx
ffff800000805191:	41 5f                	pop    r15
ffff800000805193:	5d                   	pop    rbp
ffff800000805194:	c3                   	ret    

ffff800000805195 <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:150
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000805195:	f3 0f 1e fa          	endbr64 
ffff800000805199:	55                   	push   rbp
ffff80000080519a:	48 89 e5             	mov    rbp,rsp
ffff80000080519d:	41 57                	push   r15
ffff80000080519f:	53                   	push   rbx
ffff8000008051a0:	48 83 ec 30          	sub    rsp,0x30
ffff8000008051a4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008051a4 <write_dev+0xf>
ffff8000008051ab:	49 bb 84 d7 01 00 00 	movabs r11,0x1d784
ffff8000008051b2:	00 00 00 
ffff8000008051b5:	4c 01 db             	add    rbx,r11
ffff8000008051b8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008051bc:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff8000008051c0:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff8000008051c4:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152
    //查看文件名
    char* name=filp->dentry->name;
ffff8000008051c8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008051cc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008051d0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008051d3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
    char* p=name+ strlen(name)-1;
ffff8000008051d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008051db:	48 89 c7             	mov    rdi,rax
ffff8000008051de:	49 89 df             	mov    r15,rbx
ffff8000008051e1:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff8000008051e8:	ff ff ff 
ffff8000008051eb:	48 01 d8             	add    rax,rbx
ffff8000008051ee:	ff d0                	call   rax
ffff8000008051f0:	48 98                	cdqe   
ffff8000008051f2:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008051f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008051fa:	48 01 d0             	add    rax,rdx
ffff8000008051fd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154
    for(;*p!='/'&&p>=name;p--);
ffff800000805201:	eb 05                	jmp    ffff800000805208 <write_dev+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 3)
ffff800000805203:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 1)
ffff800000805208:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080520c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080520f:	3c 2f                	cmp    al,0x2f
ffff800000805211:	74 0a                	je     ffff80000080521d <write_dev+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 2)
ffff800000805213:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805217:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080521b:	73 e6                	jae    ffff800000805203 <write_dev+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    if(p>=name)
ffff80000080521d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805221:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000805225:	72 0c                	jb     ffff800000805233 <write_dev+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:156
        name=p+1;
ffff800000805227:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080522b:	48 83 c0 01          	add    rax,0x1
ffff80000080522f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:157
    if(memcmp(name,"tty",3)==0){
ffff800000805233:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805237:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080523c:	48 b9 f4 d4 ff ff ff 	movabs rcx,0xffffffffffffd4f4
ffff800000805243:	ff ff ff 
ffff800000805246:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff80000080524a:	48 89 ce             	mov    rsi,rcx
ffff80000080524d:	48 89 c7             	mov    rdi,rax
ffff800000805250:	49 89 df             	mov    r15,rbx
ffff800000805253:	48 b8 97 11 ff ff ff 	movabs rax,0xffffffffffff1197
ffff80000080525a:	ff ff ff 
ffff80000080525d:	48 01 d8             	add    rax,rbx
ffff800000805260:	ff d0                	call   rax
ffff800000805262:	85 c0                	test   eax,eax
ffff800000805264:	75 27                	jne    ffff80000080528d <write_dev+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:158
        return write_tty(filp,buf,count,position);
ffff800000805266:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080526a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080526e:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000805272:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805276:	48 89 c7             	mov    rdi,rax
ffff800000805279:	49 89 df             	mov    r15,rbx
ffff80000080527c:	48 b8 2a 07 ff ff ff 	movabs rax,0xffffffffffff072a
ffff800000805283:	ff ff ff 
ffff800000805286:	48 01 d8             	add    rax,rbx
ffff800000805289:	ff d0                	call   rax
ffff80000080528b:	eb 5c                	jmp    ffff8000008052e9 <write_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:159
    }else if(strcmp(name,"console")==0){
ffff80000080528d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805291:	48 ba e8 d4 ff ff ff 	movabs rdx,0xffffffffffffd4e8
ffff800000805298:	ff ff ff 
ffff80000080529b:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080529f:	48 89 d6             	mov    rsi,rdx
ffff8000008052a2:	48 89 c7             	mov    rdi,rax
ffff8000008052a5:	49 89 df             	mov    r15,rbx
ffff8000008052a8:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff8000008052af:	ff ff ff 
ffff8000008052b2:	48 01 d8             	add    rax,rbx
ffff8000008052b5:	ff d0                	call   rax
ffff8000008052b7:	85 c0                	test   eax,eax
ffff8000008052b9:	75 27                	jne    ffff8000008052e2 <write_dev+0x14d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:160
        return write_framebuffer(filp,buf,count,position);
ffff8000008052bb:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff8000008052bf:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008052c3:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008052c7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008052cb:	48 89 c7             	mov    rdi,rax
ffff8000008052ce:	49 89 df             	mov    r15,rbx
ffff8000008052d1:	48 b8 90 98 fe ff ff 	movabs rax,0xfffffffffffe9890
ffff8000008052d8:	ff ff ff 
ffff8000008052db:	48 01 d8             	add    rax,rbx
ffff8000008052de:	ff d0                	call   rax
ffff8000008052e0:	eb 07                	jmp    ffff8000008052e9 <write_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:162
    }
    return -1;
ffff8000008052e2:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164

}
ffff8000008052e9:	48 83 c4 30          	add    rsp,0x30
ffff8000008052ed:	5b                   	pop    rbx
ffff8000008052ee:	41 5f                	pop    r15
ffff8000008052f0:	5d                   	pop    rbp
ffff8000008052f1:	c3                   	ret    

ffff8000008052f2 <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:165
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff8000008052f2:	f3 0f 1e fa          	endbr64 
ffff8000008052f6:	55                   	push   rbp
ffff8000008052f7:	48 89 e5             	mov    rbp,rsp
ffff8000008052fa:	41 57                	push   r15
ffff8000008052fc:	53                   	push   rbx
ffff8000008052fd:	48 83 ec 30          	sub    rsp,0x30
ffff800000805301:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805301 <ioctl_dev+0xf>
ffff800000805308:	49 bb 27 d6 01 00 00 	movabs r11,0x1d627
ffff80000080530f:	00 00 00 
ffff800000805312:	4c 01 db             	add    rbx,r11
ffff800000805315:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000805319:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080531d:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000805321:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
    //查看文件名
    char* name=filp->dentry->name;
ffff800000805325:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805329:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080532d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805330:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
    char* p=name+ strlen(name)-1;
ffff800000805334:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805338:	48 89 c7             	mov    rdi,rax
ffff80000080533b:	49 89 df             	mov    r15,rbx
ffff80000080533e:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff800000805345:	ff ff ff 
ffff800000805348:	48 01 d8             	add    rax,rbx
ffff80000080534b:	ff d0                	call   rax
ffff80000080534d:	48 98                	cdqe   
ffff80000080534f:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000805353:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805357:	48 01 d0             	add    rax,rdx
ffff80000080535a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
    for(;*p!='/'&&p>=name;p--);
ffff80000080535e:	eb 05                	jmp    ffff800000805365 <ioctl_dev+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 3)
ffff800000805360:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 1)
ffff800000805365:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805369:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080536c:	3c 2f                	cmp    al,0x2f
ffff80000080536e:	74 0a                	je     ffff80000080537a <ioctl_dev+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 2)
ffff800000805370:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805374:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000805378:	73 e6                	jae    ffff800000805360 <ioctl_dev+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:170
    if(p>=name)
ffff80000080537a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080537e:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000805382:	72 0c                	jb     ffff800000805390 <ioctl_dev+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:171
        name=p+1;
ffff800000805384:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805388:	48 83 c0 01          	add    rax,0x1
ffff80000080538c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
    if(memcmp(name,"tty",3)==0){
ffff800000805390:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805394:	ba 03 00 00 00       	mov    edx,0x3
ffff800000805399:	48 b9 f4 d4 ff ff ff 	movabs rcx,0xffffffffffffd4f4
ffff8000008053a0:	ff ff ff 
ffff8000008053a3:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff8000008053a7:	48 89 ce             	mov    rsi,rcx
ffff8000008053aa:	48 89 c7             	mov    rdi,rax
ffff8000008053ad:	49 89 df             	mov    r15,rbx
ffff8000008053b0:	48 b8 97 11 ff ff ff 	movabs rax,0xffffffffffff1197
ffff8000008053b7:	ff ff ff 
ffff8000008053ba:	48 01 d8             	add    rax,rbx
ffff8000008053bd:	ff d0                	call   rax
ffff8000008053bf:	85 c0                	test   eax,eax
ffff8000008053c1:	75 27                	jne    ffff8000008053ea <ioctl_dev+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:173
        return ioctl_tty(inode, filp, cmd, arg);
ffff8000008053c3:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff8000008053c7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008053cb:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008053cf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008053d3:	48 89 c7             	mov    rdi,rax
ffff8000008053d6:	49 89 df             	mov    r15,rbx
ffff8000008053d9:	48 b8 1a 08 ff ff ff 	movabs rax,0xffffffffffff081a
ffff8000008053e0:	ff ff ff 
ffff8000008053e3:	48 01 d8             	add    rax,rbx
ffff8000008053e6:	ff d0                	call   rax
ffff8000008053e8:	eb 5c                	jmp    ffff800000805446 <ioctl_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:174
    }else if(strcmp(name,"console")==0){
ffff8000008053ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008053ee:	48 ba e8 d4 ff ff ff 	movabs rdx,0xffffffffffffd4e8
ffff8000008053f5:	ff ff ff 
ffff8000008053f8:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff8000008053fc:	48 89 d6             	mov    rsi,rdx
ffff8000008053ff:	48 89 c7             	mov    rdi,rax
ffff800000805402:	49 89 df             	mov    r15,rbx
ffff800000805405:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff80000080540c:	ff ff ff 
ffff80000080540f:	48 01 d8             	add    rax,rbx
ffff800000805412:	ff d0                	call   rax
ffff800000805414:	85 c0                	test   eax,eax
ffff800000805416:	75 27                	jne    ffff80000080543f <ioctl_dev+0x14d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:175
        return ioctl_framebuffer(inode,filp,cmd,arg);
ffff800000805418:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080541c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805420:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000805424:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805428:	48 89 c7             	mov    rdi,rax
ffff80000080542b:	49 89 df             	mov    r15,rbx
ffff80000080542e:	48 b8 b1 99 fe ff ff 	movabs rax,0xfffffffffffe99b1
ffff800000805435:	ff ff ff 
ffff800000805438:	48 01 d8             	add    rax,rbx
ffff80000080543b:	ff d0                	call   rax
ffff80000080543d:	eb 07                	jmp    ffff800000805446 <ioctl_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    }
    return -1;
ffff80000080543f:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:179

}
ffff800000805446:	48 83 c4 30          	add    rsp,0x30
ffff80000080544a:	5b                   	pop    rbx
ffff80000080544b:	41 5f                	pop    r15
ffff80000080544d:	5d                   	pop    rbp
ffff80000080544e:	c3                   	ret    

ffff80000080544f <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:181
int load_driver(char *path)
{
ffff80000080544f:	f3 0f 1e fa          	endbr64 
ffff800000805453:	55                   	push   rbp
ffff800000805454:	48 89 e5             	mov    rbp,rsp
ffff800000805457:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805457 <load_driver+0x8>
ffff80000080545e:	49 bb d1 d4 01 00 00 	movabs r11,0x1d4d1
ffff800000805465:	00 00 00 
ffff800000805468:	4c 01 d8             	add    rax,r11
ffff80000080546b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:183
    
}
ffff80000080546f:	90                   	nop
ffff800000805470:	5d                   	pop    rbp
ffff800000805471:	c3                   	ret    

ffff800000805472 <reg_device>:
reg_device():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:186

int reg_device(device* dev)
{
ffff800000805472:	f3 0f 1e fa          	endbr64 
ffff800000805476:	55                   	push   rbp
ffff800000805477:	48 89 e5             	mov    rbp,rsp
ffff80000080547a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080547a <reg_device+0x8>
ffff800000805481:	49 bb ae d4 01 00 00 	movabs r11,0x1d4ae
ffff800000805488:	00 00 00 
ffff80000080548b:	4c 01 d8             	add    rax,r11
ffff80000080548e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190
    //TODO:查重

    //放入数组
    int i=0;
ffff800000805492:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    for(;i<MAX_DEVICES;i++)
ffff800000805499:	e9 6b 01 00 00       	jmp    ffff800000805609 <reg_device+0x197>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:193
    {
        if(devs[i].flag==DEV_FLAG_EMPTY)
ffff80000080549e:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff8000008054a5:	ff ff ff 
ffff8000008054a8:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff8000008054ac:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008054af:	48 63 ca             	movsxd rcx,edx
ffff8000008054b2:	48 89 ca             	mov    rdx,rcx
ffff8000008054b5:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008054b9:	48 01 ca             	add    rdx,rcx
ffff8000008054bc:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008054c0:	48 01 ca             	add    rdx,rcx
ffff8000008054c3:	48 c1 e2 03          	shl    rdx,0x3
ffff8000008054c7:	48 01 f2             	add    rdx,rsi
ffff8000008054ca:	48 83 c2 10          	add    rdx,0x10
ffff8000008054ce:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008054d0:	85 d2                	test   edx,edx
ffff8000008054d2:	0f 85 2d 01 00 00    	jne    ffff800000805605 <reg_device+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:195
        {
            devs[i]=*dev;
ffff8000008054d8:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff8000008054df:	ff ff ff 
ffff8000008054e2:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff8000008054e6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008054e9:	48 63 ca             	movsxd rcx,edx
ffff8000008054ec:	48 89 ca             	mov    rdx,rcx
ffff8000008054ef:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008054f3:	48 01 ca             	add    rdx,rcx
ffff8000008054f6:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008054fa:	48 01 ca             	add    rdx,rcx
ffff8000008054fd:	48 c1 e2 03          	shl    rdx,0x3
ffff800000805501:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff800000805505:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000805509:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080550c:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
ffff800000805510:	48 89 31             	mov    QWORD PTR [rcx],rsi
ffff800000805513:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
ffff800000805517:	48 8b 72 10          	mov    rsi,QWORD PTR [rdx+0x10]
ffff80000080551b:	48 8b 7a 18          	mov    rdi,QWORD PTR [rdx+0x18]
ffff80000080551f:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
ffff800000805523:	48 89 79 18          	mov    QWORD PTR [rcx+0x18],rdi
ffff800000805527:	48 8b 72 20          	mov    rsi,QWORD PTR [rdx+0x20]
ffff80000080552b:	48 8b 7a 28          	mov    rdi,QWORD PTR [rdx+0x28]
ffff80000080552f:	48 89 71 20          	mov    QWORD PTR [rcx+0x20],rsi
ffff800000805533:	48 89 79 28          	mov    QWORD PTR [rcx+0x28],rdi
ffff800000805537:	48 8b 72 30          	mov    rsi,QWORD PTR [rdx+0x30]
ffff80000080553b:	48 8b 7a 38          	mov    rdi,QWORD PTR [rdx+0x38]
ffff80000080553f:	48 89 71 30          	mov    QWORD PTR [rcx+0x30],rsi
ffff800000805543:	48 89 79 38          	mov    QWORD PTR [rcx+0x38],rdi
ffff800000805547:	48 8b 72 40          	mov    rsi,QWORD PTR [rdx+0x40]
ffff80000080554b:	48 8b 7a 48          	mov    rdi,QWORD PTR [rdx+0x48]
ffff80000080554f:	48 89 71 40          	mov    QWORD PTR [rcx+0x40],rsi
ffff800000805553:	48 89 79 48          	mov    QWORD PTR [rcx+0x48],rdi
ffff800000805557:	48 8b 72 50          	mov    rsi,QWORD PTR [rdx+0x50]
ffff80000080555b:	48 8b 7a 58          	mov    rdi,QWORD PTR [rdx+0x58]
ffff80000080555f:	48 89 71 50          	mov    QWORD PTR [rcx+0x50],rsi
ffff800000805563:	48 89 79 58          	mov    QWORD PTR [rcx+0x58],rdi
ffff800000805567:	48 8b 72 60          	mov    rsi,QWORD PTR [rdx+0x60]
ffff80000080556b:	48 8b 7a 68          	mov    rdi,QWORD PTR [rdx+0x68]
ffff80000080556f:	48 89 71 60          	mov    QWORD PTR [rcx+0x60],rsi
ffff800000805573:	48 89 79 68          	mov    QWORD PTR [rcx+0x68],rdi
ffff800000805577:	48 8b 72 70          	mov    rsi,QWORD PTR [rdx+0x70]
ffff80000080557b:	48 8b 7a 78          	mov    rdi,QWORD PTR [rdx+0x78]
ffff80000080557f:	48 89 71 70          	mov    QWORD PTR [rcx+0x70],rsi
ffff800000805583:	48 89 79 78          	mov    QWORD PTR [rcx+0x78],rdi
ffff800000805587:	48 8b b2 80 00 00 00 	mov    rsi,QWORD PTR [rdx+0x80]
ffff80000080558e:	48 8b ba 88 00 00 00 	mov    rdi,QWORD PTR [rdx+0x88]
ffff800000805595:	48 89 b1 80 00 00 00 	mov    QWORD PTR [rcx+0x80],rsi
ffff80000080559c:	48 89 b9 88 00 00 00 	mov    QWORD PTR [rcx+0x88],rdi
ffff8000008055a3:	48 8b b2 90 00 00 00 	mov    rsi,QWORD PTR [rdx+0x90]
ffff8000008055aa:	48 8b ba 98 00 00 00 	mov    rdi,QWORD PTR [rdx+0x98]
ffff8000008055b1:	48 89 b1 90 00 00 00 	mov    QWORD PTR [rcx+0x90],rsi
ffff8000008055b8:	48 89 b9 98 00 00 00 	mov    QWORD PTR [rcx+0x98],rdi
ffff8000008055bf:	48 8b 92 a0 00 00 00 	mov    rdx,QWORD PTR [rdx+0xa0]
ffff8000008055c6:	48 89 91 a0 00 00 00 	mov    QWORD PTR [rcx+0xa0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:196
            devs[i].flag=DEV_FLAG_USED;
ffff8000008055cd:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff8000008055d4:	ff ff ff 
ffff8000008055d7:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff8000008055db:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008055de:	48 63 ca             	movsxd rcx,edx
ffff8000008055e1:	48 89 ca             	mov    rdx,rcx
ffff8000008055e4:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008055e8:	48 01 ca             	add    rdx,rcx
ffff8000008055eb:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008055ef:	48 01 ca             	add    rdx,rcx
ffff8000008055f2:	48 c1 e2 03          	shl    rdx,0x3
ffff8000008055f6:	48 01 f2             	add    rdx,rsi
ffff8000008055f9:	48 83 c2 10          	add    rdx,0x10
ffff8000008055fd:	c7 02 01 00 00 00    	mov    DWORD PTR [rdx],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:197
            break;
ffff800000805603:	eb 0e                	jmp    ffff800000805613 <reg_device+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    for(;i<MAX_DEVICES;i++)
ffff800000805605:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191 (discriminator 1)
ffff800000805609:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff80000080560d:	0f 8e 8b fe ff ff    	jle    ffff80000080549e <reg_device+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200
        }
    }
    if(i==MAX_DEVICES)
ffff800000805613:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000805617:	75 0a                	jne    ffff800000805623 <reg_device+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:201
        return -1;
ffff800000805619:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080561e:	e9 c5 01 00 00       	jmp    ffff8000008057e8 <reg_device+0x376>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:203
    //添加到链表
    device* p=NULL,*neo=&devs[i],**pp;
ffff800000805623:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080562a:	00 
ffff80000080562b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080562e:	48 63 ca             	movsxd rcx,edx
ffff800000805631:	48 89 ca             	mov    rdx,rcx
ffff800000805634:	48 c1 e2 02          	shl    rdx,0x2
ffff800000805638:	48 01 ca             	add    rdx,rcx
ffff80000080563b:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080563f:	48 01 ca             	add    rdx,rcx
ffff800000805642:	48 c1 e2 03          	shl    rdx,0x3
ffff800000805646:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff80000080564d:	ff ff ff 
ffff800000805650:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000805654:	48 01 ca             	add    rdx,rcx
ffff800000805657:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:204
    switch (dev->type)
ffff80000080565b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080565f:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000805662:	83 fa 03             	cmp    edx,0x3
ffff800000805665:	74 6f                	je     ffff8000008056d6 <reg_device+0x264>
ffff800000805667:	83 fa 03             	cmp    edx,0x3
ffff80000080566a:	0f 8f 94 00 00 00    	jg     ffff800000805704 <reg_device+0x292>
ffff800000805670:	83 fa 01             	cmp    edx,0x1
ffff800000805673:	74 0a                	je     ffff80000080567f <reg_device+0x20d>
ffff800000805675:	83 fa 02             	cmp    edx,0x2
ffff800000805678:	74 2e                	je     ffff8000008056a8 <reg_device+0x236>
ffff80000080567a:	e9 85 00 00 00       	jmp    ffff800000805704 <reg_device+0x292>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:207
    {
    case DEV_TYPE_BLKDEV:
        p=dev_tree[DEVTREE_BLKDEVI];pp=&dev_tree[DEVTREE_BLKDEVI];
ffff80000080567f:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff800000805686:	ff ff ff 
ffff800000805689:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080568d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000805690:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000805694:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff80000080569b:	ff ff ff 
ffff80000080569e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008056a2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:208
        break;
ffff8000008056a6:	eb 66                	jmp    ffff80000080570e <reg_device+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:211
    
    case DEV_TYPE_CHRDEV:
        p=dev_tree[DEVTREE_CHRDEVI];pp=&dev_tree[DEVTREE_CHRDEVI];
ffff8000008056a8:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008056af:	ff ff ff 
ffff8000008056b2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008056b6:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff8000008056ba:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff8000008056be:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008056c5:	ff ff ff 
ffff8000008056c8:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008056cc:	48 8d 40 08          	lea    rax,[rax+0x8]
ffff8000008056d0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:212
        break;
ffff8000008056d4:	eb 38                	jmp    ffff80000080570e <reg_device+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:215
        
    case DEV_TYPE_OTHERS:
        p=dev_tree[DEVTREE_OTHERDEVI];pp=&dev_tree[DEVTREE_OTHERDEVI];
ffff8000008056d6:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008056dd:	ff ff ff 
ffff8000008056e0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008056e4:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff8000008056e8:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff8000008056ec:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008056f3:	ff ff ff 
ffff8000008056f6:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008056fa:	48 8d 40 10          	lea    rax,[rax+0x10]
ffff8000008056fe:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:216
        break;
ffff800000805702:	eb 0a                	jmp    ffff80000080570e <reg_device+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:217
    default:return -1;//不可能有其他情况
ffff800000805704:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805709:	e9 da 00 00 00       	jmp    ffff8000008057e8 <reg_device+0x376>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:219
    }
    if(!p){
ffff80000080570e:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff800000805713:	75 2b                	jne    ffff800000805740 <reg_device+0x2ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:220
        *pp=neo;
ffff800000805715:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805719:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080571d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:221
        neo->prev=NULL;
ffff800000805720:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805724:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x0
ffff80000080572b:	00 00 00 00 
ffff80000080572f:	eb 3d                	jmp    ffff80000080576e <reg_device+0x2fc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:224 (discriminator 2)
    }
    else{
        for(;p->next;p=p->next);
ffff800000805731:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805735:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff80000080573c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:224 (discriminator 1)
ffff800000805740:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805744:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff80000080574b:	48 85 c0             	test   rax,rax
ffff80000080574e:	75 e1                	jne    ffff800000805731 <reg_device+0x2bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:225
        p->next=neo;
ffff800000805750:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805754:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000805758:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:226
        neo->prev=p;
ffff80000080575f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805763:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000805767:	48 89 90 98 00 00 00 	mov    QWORD PTR [rax+0x98],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:228
    }
    neo->next=NULL;
ffff80000080576e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805772:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x0
ffff800000805779:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:230
    //设置相应的请求函数
    switch (neo->stype)
ffff80000080577d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805781:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000805784:	83 f8 04             	cmp    eax,0x4
ffff800000805787:	74 3b                	je     ffff8000008057c4 <reg_device+0x352>
ffff800000805789:	83 f8 04             	cmp    eax,0x4
ffff80000080578c:	7f 56                	jg     ffff8000008057e4 <reg_device+0x372>
ffff80000080578e:	83 f8 03             	cmp    eax,0x3
ffff800000805791:	74 21                	je     ffff8000008057b4 <reg_device+0x342>
ffff800000805793:	83 f8 03             	cmp    eax,0x3
ffff800000805796:	7f 4c                	jg     ffff8000008057e4 <reg_device+0x372>
ffff800000805798:	83 f8 01             	cmp    eax,0x1
ffff80000080579b:	74 07                	je     ffff8000008057a4 <reg_device+0x332>
ffff80000080579d:	83 f8 02             	cmp    eax,0x2
ffff8000008057a0:	74 32                	je     ffff8000008057d4 <reg_device+0x362>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:246
        break;
    case DEV_STYPE_TTY:
        neo->operi=OPERATIONS_TTY;
        break;
    default:
        break;
ffff8000008057a2:	eb 40                	jmp    ffff8000008057e4 <reg_device+0x372>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:233
        neo->operi=OPERATIONS_HD;
ffff8000008057a4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008057a8:	c7 80 a0 00 00 00 00 	mov    DWORD PTR [rax+0xa0],0x0
ffff8000008057af:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:234
        break;
ffff8000008057b2:	eb 31                	jmp    ffff8000008057e5 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:237
        neo->operi=OPERATIONS_MOUSE;
ffff8000008057b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008057b8:	c7 80 a0 00 00 00 02 	mov    DWORD PTR [rax+0xa0],0x2
ffff8000008057bf:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:238
        break;
ffff8000008057c2:	eb 21                	jmp    ffff8000008057e5 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:240
        neo->operi=OPERATIONS_KEYBOARD;
ffff8000008057c4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008057c8:	c7 80 a0 00 00 00 03 	mov    DWORD PTR [rax+0xa0],0x3
ffff8000008057cf:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:241
        break;
ffff8000008057d2:	eb 11                	jmp    ffff8000008057e5 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243
        neo->operi=OPERATIONS_TTY;
ffff8000008057d4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008057d8:	c7 80 a0 00 00 00 01 	mov    DWORD PTR [rax+0xa0],0x1
ffff8000008057df:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:244
        break;
ffff8000008057e2:	eb 01                	jmp    ffff8000008057e5 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:246
        break;
ffff8000008057e4:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:248
    }
    return i;
ffff8000008057e5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:249
}
ffff8000008057e8:	5d                   	pop    rbp
ffff8000008057e9:	c3                   	ret    

ffff8000008057ea <reg_driver>:
reg_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:253


int reg_driver(driver *drv)
{
ffff8000008057ea:	f3 0f 1e fa          	endbr64 
ffff8000008057ee:	55                   	push   rbp
ffff8000008057ef:	48 89 e5             	mov    rbp,rsp
ffff8000008057f2:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff8000008057f2 <reg_driver+0x8>
ffff8000008057f9:	49 bb 36 d1 01 00 00 	movabs r11,0x1d136
ffff800000805800:	00 00 00 
ffff800000805803:	4c 01 d9             	add    rcx,r11
ffff800000805806:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254
    for(int i=0;i<MAX_DRIVERS;i++)
ffff80000080580a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000805811:	e9 43 01 00 00       	jmp    ffff800000805959 <reg_driver+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:256
    {
        if(drvs[i].flag==DRV_FLAG_EMPTY)
ffff800000805816:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080581d:	ff ff ff 
ffff800000805820:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff800000805824:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805827:	48 63 d0             	movsxd rdx,eax
ffff80000080582a:	48 89 d0             	mov    rax,rdx
ffff80000080582d:	48 c1 e0 02          	shl    rax,0x2
ffff800000805831:	48 01 d0             	add    rax,rdx
ffff800000805834:	48 c1 e0 05          	shl    rax,0x5
ffff800000805838:	48 01 f0             	add    rax,rsi
ffff80000080583b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080583d:	85 c0                	test   eax,eax
ffff80000080583f:	0f 85 10 01 00 00    	jne    ffff800000805955 <reg_driver+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:258
        {
            drvs[i]=*drv;
ffff800000805845:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080584c:	ff ff ff 
ffff80000080584f:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff800000805853:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805856:	48 63 d0             	movsxd rdx,eax
ffff800000805859:	48 89 d0             	mov    rax,rdx
ffff80000080585c:	48 c1 e0 02          	shl    rax,0x2
ffff800000805860:	48 01 d0             	add    rax,rdx
ffff800000805863:	48 c1 e0 05          	shl    rax,0x5
ffff800000805867:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
ffff80000080586b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080586f:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000805872:	48 8b 78 08          	mov    rdi,QWORD PTR [rax+0x8]
ffff800000805876:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff800000805879:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
ffff80000080587d:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
ffff800000805881:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
ffff800000805885:	48 89 72 10          	mov    QWORD PTR [rdx+0x10],rsi
ffff800000805889:	48 89 7a 18          	mov    QWORD PTR [rdx+0x18],rdi
ffff80000080588d:	48 8b 70 20          	mov    rsi,QWORD PTR [rax+0x20]
ffff800000805891:	48 8b 78 28          	mov    rdi,QWORD PTR [rax+0x28]
ffff800000805895:	48 89 72 20          	mov    QWORD PTR [rdx+0x20],rsi
ffff800000805899:	48 89 7a 28          	mov    QWORD PTR [rdx+0x28],rdi
ffff80000080589d:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008058a1:	48 8b 78 38          	mov    rdi,QWORD PTR [rax+0x38]
ffff8000008058a5:	48 89 72 30          	mov    QWORD PTR [rdx+0x30],rsi
ffff8000008058a9:	48 89 7a 38          	mov    QWORD PTR [rdx+0x38],rdi
ffff8000008058ad:	48 8b 70 40          	mov    rsi,QWORD PTR [rax+0x40]
ffff8000008058b1:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
ffff8000008058b5:	48 89 72 40          	mov    QWORD PTR [rdx+0x40],rsi
ffff8000008058b9:	48 89 7a 48          	mov    QWORD PTR [rdx+0x48],rdi
ffff8000008058bd:	48 8b 70 50          	mov    rsi,QWORD PTR [rax+0x50]
ffff8000008058c1:	48 8b 78 58          	mov    rdi,QWORD PTR [rax+0x58]
ffff8000008058c5:	48 89 72 50          	mov    QWORD PTR [rdx+0x50],rsi
ffff8000008058c9:	48 89 7a 58          	mov    QWORD PTR [rdx+0x58],rdi
ffff8000008058cd:	48 8b 70 60          	mov    rsi,QWORD PTR [rax+0x60]
ffff8000008058d1:	48 8b 78 68          	mov    rdi,QWORD PTR [rax+0x68]
ffff8000008058d5:	48 89 72 60          	mov    QWORD PTR [rdx+0x60],rsi
ffff8000008058d9:	48 89 7a 68          	mov    QWORD PTR [rdx+0x68],rdi
ffff8000008058dd:	48 8b 70 70          	mov    rsi,QWORD PTR [rax+0x70]
ffff8000008058e1:	48 8b 78 78          	mov    rdi,QWORD PTR [rax+0x78]
ffff8000008058e5:	48 89 72 70          	mov    QWORD PTR [rdx+0x70],rsi
ffff8000008058e9:	48 89 7a 78          	mov    QWORD PTR [rdx+0x78],rdi
ffff8000008058ed:	48 8b b0 80 00 00 00 	mov    rsi,QWORD PTR [rax+0x80]
ffff8000008058f4:	48 8b b8 88 00 00 00 	mov    rdi,QWORD PTR [rax+0x88]
ffff8000008058fb:	48 89 b2 80 00 00 00 	mov    QWORD PTR [rdx+0x80],rsi
ffff800000805902:	48 89 ba 88 00 00 00 	mov    QWORD PTR [rdx+0x88],rdi
ffff800000805909:	48 8b b0 90 00 00 00 	mov    rsi,QWORD PTR [rax+0x90]
ffff800000805910:	48 8b b8 98 00 00 00 	mov    rdi,QWORD PTR [rax+0x98]
ffff800000805917:	48 89 b2 90 00 00 00 	mov    QWORD PTR [rdx+0x90],rsi
ffff80000080591e:	48 89 ba 98 00 00 00 	mov    QWORD PTR [rdx+0x98],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:259
            drvs[i].flag=DRV_FLAG_USED;
ffff800000805925:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080592c:	ff ff ff 
ffff80000080592f:	48 8b 0c 01          	mov    rcx,QWORD PTR [rcx+rax*1]
ffff800000805933:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805936:	48 63 d0             	movsxd rdx,eax
ffff800000805939:	48 89 d0             	mov    rax,rdx
ffff80000080593c:	48 c1 e0 02          	shl    rax,0x2
ffff800000805940:	48 01 d0             	add    rax,rdx
ffff800000805943:	48 c1 e0 05          	shl    rax,0x5
ffff800000805947:	48 01 c8             	add    rax,rcx
ffff80000080594a:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:260
            return i;
ffff800000805950:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805953:	eb 13                	jmp    ffff800000805968 <reg_driver+0x17e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254 (discriminator 2)
    for(int i=0;i<MAX_DRIVERS;i++)
ffff800000805955:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254 (discriminator 1)
ffff800000805959:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff80000080595d:	0f 8e b3 fe ff ff    	jle    ffff800000805816 <reg_driver+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:263
        }
    }
    return -1;
ffff800000805963:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:264
}
ffff800000805968:	5d                   	pop    rbp
ffff800000805969:	c3                   	ret    

ffff80000080596a <sys_find_dev>:
sys_find_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:267

int sys_find_dev(char *name)
{
ffff80000080596a:	f3 0f 1e fa          	endbr64 
ffff80000080596e:	55                   	push   rbp
ffff80000080596f:	48 89 e5             	mov    rbp,rsp
ffff800000805972:	41 57                	push   r15
ffff800000805974:	53                   	push   rbx
ffff800000805975:	48 83 ec 20          	sub    rsp,0x20
ffff800000805979:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805979 <sys_find_dev+0xf>
ffff800000805980:	49 bb af cf 01 00 00 	movabs r11,0x1cfaf
ffff800000805987:	00 00 00 
ffff80000080598a:	4c 01 db             	add    rbx,r11
ffff80000080598d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268
    for(int i=0;i<MAX_DEVICES;i++)
ffff800000805991:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000805998:	e9 93 00 00 00       	jmp    ffff800000805a30 <sys_find_dev+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:270
    {
        if(devs[i].flag!=DEV_FLAG_EMPTY&&strcmp(name,devs[i].name)==0)
ffff80000080599d:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008059a4:	ff ff ff 
ffff8000008059a7:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008059ab:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008059ae:	48 63 d0             	movsxd rdx,eax
ffff8000008059b1:	48 89 d0             	mov    rax,rdx
ffff8000008059b4:	48 c1 e0 02          	shl    rax,0x2
ffff8000008059b8:	48 01 d0             	add    rax,rdx
ffff8000008059bb:	48 c1 e0 02          	shl    rax,0x2
ffff8000008059bf:	48 01 d0             	add    rax,rdx
ffff8000008059c2:	48 c1 e0 03          	shl    rax,0x3
ffff8000008059c6:	48 01 c8             	add    rax,rcx
ffff8000008059c9:	48 83 c0 10          	add    rax,0x10
ffff8000008059cd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008059cf:	85 c0                	test   eax,eax
ffff8000008059d1:	74 59                	je     ffff800000805a2c <sys_find_dev+0xc2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:270 (discriminator 1)
ffff8000008059d3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008059d6:	48 63 d0             	movsxd rdx,eax
ffff8000008059d9:	48 89 d0             	mov    rax,rdx
ffff8000008059dc:	48 c1 e0 02          	shl    rax,0x2
ffff8000008059e0:	48 01 d0             	add    rax,rdx
ffff8000008059e3:	48 c1 e0 02          	shl    rax,0x2
ffff8000008059e7:	48 01 d0             	add    rax,rdx
ffff8000008059ea:	48 c1 e0 03          	shl    rax,0x3
ffff8000008059ee:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff8000008059f2:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008059f9:	ff ff ff 
ffff8000008059fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805a00:	48 01 d0             	add    rax,rdx
ffff800000805a03:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffff800000805a07:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805a0b:	48 89 d6             	mov    rsi,rdx
ffff800000805a0e:	48 89 c7             	mov    rdi,rax
ffff800000805a11:	49 89 df             	mov    r15,rbx
ffff800000805a14:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff800000805a1b:	ff ff ff 
ffff800000805a1e:	48 01 d8             	add    rax,rbx
ffff800000805a21:	ff d0                	call   rax
ffff800000805a23:	85 c0                	test   eax,eax
ffff800000805a25:	75 05                	jne    ffff800000805a2c <sys_find_dev+0xc2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:271
            return i;
ffff800000805a27:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805a2a:	eb 13                	jmp    ffff800000805a3f <sys_find_dev+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268 (discriminator 2)
    for(int i=0;i<MAX_DEVICES;i++)
ffff800000805a2c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268 (discriminator 1)
ffff800000805a30:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff800000805a34:	0f 8e 63 ff ff ff    	jle    ffff80000080599d <sys_find_dev+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:273
    }
    return -1;
ffff800000805a3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:274
}
ffff800000805a3f:	48 83 c4 20          	add    rsp,0x20
ffff800000805a43:	5b                   	pop    rbx
ffff800000805a44:	41 5f                	pop    r15
ffff800000805a46:	5d                   	pop    rbp
ffff800000805a47:	c3                   	ret    

ffff800000805a48 <sys_operate_dev>:
sys_operate_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:277

int sys_operate_dev(char *name,int func,driver_args* args)
{
ffff800000805a48:	f3 0f 1e fa          	endbr64 
ffff800000805a4c:	55                   	push   rbp
ffff800000805a4d:	48 89 e5             	mov    rbp,rsp
ffff800000805a50:	41 57                	push   r15
ffff800000805a52:	53                   	push   rbx
ffff800000805a53:	48 83 ec 30          	sub    rsp,0x30
ffff800000805a57:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805a57 <sys_operate_dev+0xf>
ffff800000805a5e:	49 bb d1 ce 01 00 00 	movabs r11,0x1ced1
ffff800000805a65:	00 00 00 
ffff800000805a68:	4c 01 db             	add    rbx,r11
ffff800000805a6b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000805a6f:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
ffff800000805a72:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:278
    int i=0;
ffff800000805a76:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279
    for(;i<MAX_DEVICES;i++)
ffff800000805a7d:	e9 8e 00 00 00       	jmp    ffff800000805b10 <sys_operate_dev+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:281
    {
        if(devs[i].flag!=DEV_FLAG_EMPTY&&strcmp(name,devs[i].name)==0)
ffff800000805a82:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805a89:	ff ff ff 
ffff800000805a8c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805a90:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805a93:	48 63 d0             	movsxd rdx,eax
ffff800000805a96:	48 89 d0             	mov    rax,rdx
ffff800000805a99:	48 c1 e0 02          	shl    rax,0x2
ffff800000805a9d:	48 01 d0             	add    rax,rdx
ffff800000805aa0:	48 c1 e0 02          	shl    rax,0x2
ffff800000805aa4:	48 01 d0             	add    rax,rdx
ffff800000805aa7:	48 c1 e0 03          	shl    rax,0x3
ffff800000805aab:	48 01 c8             	add    rax,rcx
ffff800000805aae:	48 83 c0 10          	add    rax,0x10
ffff800000805ab2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805ab4:	85 c0                	test   eax,eax
ffff800000805ab6:	74 54                	je     ffff800000805b0c <sys_operate_dev+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:281 (discriminator 1)
ffff800000805ab8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805abb:	48 63 d0             	movsxd rdx,eax
ffff800000805abe:	48 89 d0             	mov    rax,rdx
ffff800000805ac1:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ac5:	48 01 d0             	add    rax,rdx
ffff800000805ac8:	48 c1 e0 02          	shl    rax,0x2
ffff800000805acc:	48 01 d0             	add    rax,rdx
ffff800000805acf:	48 c1 e0 03          	shl    rax,0x3
ffff800000805ad3:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000805ad7:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805ade:	ff ff ff 
ffff800000805ae1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805ae5:	48 01 d0             	add    rax,rdx
ffff800000805ae8:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffff800000805aec:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805af0:	48 89 d6             	mov    rsi,rdx
ffff800000805af3:	48 89 c7             	mov    rdi,rax
ffff800000805af6:	49 89 df             	mov    r15,rbx
ffff800000805af9:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff800000805b00:	ff ff ff 
ffff800000805b03:	48 01 d8             	add    rax,rbx
ffff800000805b06:	ff d0                	call   rax
ffff800000805b08:	85 c0                	test   eax,eax
ffff800000805b0a:	74 10                	je     ffff800000805b1c <sys_operate_dev+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279
    for(;i<MAX_DEVICES;i++)
ffff800000805b0c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279 (discriminator 1)
ffff800000805b10:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff800000805b14:	0f 8e 68 ff ff ff    	jle    ffff800000805a82 <sys_operate_dev+0x3a>
ffff800000805b1a:	eb 01                	jmp    ffff800000805b1d <sys_operate_dev+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:282
            break;
ffff800000805b1c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:284
    }
    if(i==MAX_DEVICES)return -1;
ffff800000805b1d:	83 7d ec 40          	cmp    DWORD PTR [rbp-0x14],0x40
ffff800000805b21:	75 0a                	jne    ffff800000805b2d <sys_operate_dev+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:284 (discriminator 1)
ffff800000805b23:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805b28:	e9 68 03 00 00       	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:285
    switch (func) {
ffff800000805b2d:	83 7d d4 0b          	cmp    DWORD PTR [rbp-0x2c],0xb
ffff800000805b31:	0f 87 59 03 00 00    	ja     ffff800000805e90 <sys_operate_dev+0x448>
ffff800000805b37:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000805b3a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805b41:	00 
ffff800000805b42:	48 8d 05 d7 a2 01 00 	lea    rax,[rip+0x1a2d7]        # ffff80000081fe20 <.LC4+0x4>
ffff800000805b49:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000805b4d:	48 8d 15 cc a2 01 00 	lea    rdx,[rip+0x1a2cc]        # ffff80000081fe20 <.LC4+0x4>
ffff800000805b54:	48 01 d0             	add    rax,rdx
ffff800000805b57:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:286
        case DRVF_OPEN :return devs[i].drv->open(args);
ffff800000805b5a:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805b61:	ff ff ff 
ffff800000805b64:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805b68:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805b6b:	48 63 d0             	movsxd rdx,eax
ffff800000805b6e:	48 89 d0             	mov    rax,rdx
ffff800000805b71:	48 c1 e0 02          	shl    rax,0x2
ffff800000805b75:	48 01 d0             	add    rax,rdx
ffff800000805b78:	48 c1 e0 02          	shl    rax,0x2
ffff800000805b7c:	48 01 d0             	add    rax,rdx
ffff800000805b7f:	48 c1 e0 03          	shl    rax,0x3
ffff800000805b83:	48 01 c8             	add    rax,rcx
ffff800000805b86:	48 83 c0 78          	add    rax,0x78
ffff800000805b8a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805b8d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000805b91:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805b95:	48 89 c7             	mov    rdi,rax
ffff800000805b98:	ff d2                	call   rdx
ffff800000805b9a:	e9 f6 02 00 00       	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:287
        case DRVF_CLOSE:return devs[i].drv->close(args);
ffff800000805b9f:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805ba6:	ff ff ff 
ffff800000805ba9:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805bad:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805bb0:	48 63 d0             	movsxd rdx,eax
ffff800000805bb3:	48 89 d0             	mov    rax,rdx
ffff800000805bb6:	48 c1 e0 02          	shl    rax,0x2
ffff800000805bba:	48 01 d0             	add    rax,rdx
ffff800000805bbd:	48 c1 e0 02          	shl    rax,0x2
ffff800000805bc1:	48 01 d0             	add    rax,rdx
ffff800000805bc4:	48 c1 e0 03          	shl    rax,0x3
ffff800000805bc8:	48 01 c8             	add    rax,rcx
ffff800000805bcb:	48 83 c0 78          	add    rax,0x78
ffff800000805bcf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805bd2:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000805bd6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805bda:	48 89 c7             	mov    rdi,rax
ffff800000805bdd:	ff d2                	call   rdx
ffff800000805bdf:	e9 b1 02 00 00       	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:288
        case DRVF_READ :return devs[i].drv->read(args);
ffff800000805be4:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805beb:	ff ff ff 
ffff800000805bee:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805bf2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805bf5:	48 63 d0             	movsxd rdx,eax
ffff800000805bf8:	48 89 d0             	mov    rax,rdx
ffff800000805bfb:	48 c1 e0 02          	shl    rax,0x2
ffff800000805bff:	48 01 d0             	add    rax,rdx
ffff800000805c02:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c06:	48 01 d0             	add    rax,rdx
ffff800000805c09:	48 c1 e0 03          	shl    rax,0x3
ffff800000805c0d:	48 01 c8             	add    rax,rcx
ffff800000805c10:	48 83 c0 78          	add    rax,0x78
ffff800000805c14:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805c17:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff800000805c1b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805c1f:	48 89 c7             	mov    rdi,rax
ffff800000805c22:	ff d2                	call   rdx
ffff800000805c24:	e9 6c 02 00 00       	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:289
        case DRVF_WRITE:return devs[i].drv->write(args);
ffff800000805c29:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805c30:	ff ff ff 
ffff800000805c33:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805c37:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805c3a:	48 63 d0             	movsxd rdx,eax
ffff800000805c3d:	48 89 d0             	mov    rax,rdx
ffff800000805c40:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c44:	48 01 d0             	add    rax,rdx
ffff800000805c47:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c4b:	48 01 d0             	add    rax,rdx
ffff800000805c4e:	48 c1 e0 03          	shl    rax,0x3
ffff800000805c52:	48 01 c8             	add    rax,rcx
ffff800000805c55:	48 83 c0 78          	add    rax,0x78
ffff800000805c59:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805c5c:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff800000805c60:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805c64:	48 89 c7             	mov    rdi,rax
ffff800000805c67:	ff d2                	call   rdx
ffff800000805c69:	e9 27 02 00 00       	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:290
        case DRVF_CHK  :return devs[i].drv->check(args);
ffff800000805c6e:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805c75:	ff ff ff 
ffff800000805c78:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805c7c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805c7f:	48 63 d0             	movsxd rdx,eax
ffff800000805c82:	48 89 d0             	mov    rax,rdx
ffff800000805c85:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c89:	48 01 d0             	add    rax,rdx
ffff800000805c8c:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c90:	48 01 d0             	add    rax,rdx
ffff800000805c93:	48 c1 e0 03          	shl    rax,0x3
ffff800000805c97:	48 01 c8             	add    rax,rcx
ffff800000805c9a:	48 83 c0 78          	add    rax,0x78
ffff800000805c9e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805ca1:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000805ca5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805ca9:	48 89 c7             	mov    rdi,rax
ffff800000805cac:	ff d2                	call   rdx
ffff800000805cae:	e9 e2 01 00 00       	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:291
        case DRVF_RSVD :return devs[i].drv->reserved(args);
ffff800000805cb3:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805cba:	ff ff ff 
ffff800000805cbd:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805cc1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805cc4:	48 63 d0             	movsxd rdx,eax
ffff800000805cc7:	48 89 d0             	mov    rax,rdx
ffff800000805cca:	48 c1 e0 02          	shl    rax,0x2
ffff800000805cce:	48 01 d0             	add    rax,rdx
ffff800000805cd1:	48 c1 e0 02          	shl    rax,0x2
ffff800000805cd5:	48 01 d0             	add    rax,rdx
ffff800000805cd8:	48 c1 e0 03          	shl    rax,0x3
ffff800000805cdc:	48 01 c8             	add    rax,rcx
ffff800000805cdf:	48 83 c0 78          	add    rax,0x78
ffff800000805ce3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805ce6:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffff800000805cea:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805cee:	48 89 c7             	mov    rdi,rax
ffff800000805cf1:	ff d2                	call   rdx
ffff800000805cf3:	e9 9d 01 00 00       	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:292
        case DRVF_INT  :return devs[i].drv->inthandler(args);
ffff800000805cf8:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805cff:	ff ff ff 
ffff800000805d02:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805d06:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805d09:	48 63 d0             	movsxd rdx,eax
ffff800000805d0c:	48 89 d0             	mov    rax,rdx
ffff800000805d0f:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d13:	48 01 d0             	add    rax,rdx
ffff800000805d16:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d1a:	48 01 d0             	add    rax,rdx
ffff800000805d1d:	48 c1 e0 03          	shl    rax,0x3
ffff800000805d21:	48 01 c8             	add    rax,rcx
ffff800000805d24:	48 83 c0 78          	add    rax,0x78
ffff800000805d28:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805d2b:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
ffff800000805d2f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805d33:	48 89 c7             	mov    rdi,rax
ffff800000805d36:	ff d2                	call   rdx
ffff800000805d38:	e9 58 01 00 00       	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:293
        case DRVF_FIND :return devs[i].drv->find(args);
ffff800000805d3d:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805d44:	ff ff ff 
ffff800000805d47:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805d4b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805d4e:	48 63 d0             	movsxd rdx,eax
ffff800000805d51:	48 89 d0             	mov    rax,rdx
ffff800000805d54:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d58:	48 01 d0             	add    rax,rdx
ffff800000805d5b:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d5f:	48 01 d0             	add    rax,rdx
ffff800000805d62:	48 c1 e0 03          	shl    rax,0x3
ffff800000805d66:	48 01 c8             	add    rax,rcx
ffff800000805d69:	48 83 c0 78          	add    rax,0x78
ffff800000805d6d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805d70:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff800000805d74:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805d78:	48 89 c7             	mov    rdi,rax
ffff800000805d7b:	ff d2                	call   rdx
ffff800000805d7d:	e9 13 01 00 00       	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:294
        case DRVF_RM   :return devs[i].drv->rm(args);
ffff800000805d82:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805d89:	ff ff ff 
ffff800000805d8c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805d90:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805d93:	48 63 d0             	movsxd rdx,eax
ffff800000805d96:	48 89 d0             	mov    rax,rdx
ffff800000805d99:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d9d:	48 01 d0             	add    rax,rdx
ffff800000805da0:	48 c1 e0 02          	shl    rax,0x2
ffff800000805da4:	48 01 d0             	add    rax,rdx
ffff800000805da7:	48 c1 e0 03          	shl    rax,0x3
ffff800000805dab:	48 01 c8             	add    rax,rcx
ffff800000805dae:	48 83 c0 78          	add    rax,0x78
ffff800000805db2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805db5:	48 8b 50 48          	mov    rdx,QWORD PTR [rax+0x48]
ffff800000805db9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805dbd:	48 89 c7             	mov    rdi,rax
ffff800000805dc0:	ff d2                	call   rdx
ffff800000805dc2:	e9 ce 00 00 00       	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:295
        case DRVF_TOUCH:return devs[i].drv->touch(args);
ffff800000805dc7:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805dce:	ff ff ff 
ffff800000805dd1:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805dd5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805dd8:	48 63 d0             	movsxd rdx,eax
ffff800000805ddb:	48 89 d0             	mov    rax,rdx
ffff800000805dde:	48 c1 e0 02          	shl    rax,0x2
ffff800000805de2:	48 01 d0             	add    rax,rdx
ffff800000805de5:	48 c1 e0 02          	shl    rax,0x2
ffff800000805de9:	48 01 d0             	add    rax,rdx
ffff800000805dec:	48 c1 e0 03          	shl    rax,0x3
ffff800000805df0:	48 01 c8             	add    rax,rcx
ffff800000805df3:	48 83 c0 78          	add    rax,0x78
ffff800000805df7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805dfa:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
ffff800000805dfe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805e02:	48 89 c7             	mov    rdi,rax
ffff800000805e05:	ff d2                	call   rdx
ffff800000805e07:	e9 89 00 00 00       	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:296
        case DRVF_MKDIR:return devs[i].drv->mkdir(args);
ffff800000805e0c:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805e13:	ff ff ff 
ffff800000805e16:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805e1a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805e1d:	48 63 d0             	movsxd rdx,eax
ffff800000805e20:	48 89 d0             	mov    rax,rdx
ffff800000805e23:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e27:	48 01 d0             	add    rax,rdx
ffff800000805e2a:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e2e:	48 01 d0             	add    rax,rdx
ffff800000805e31:	48 c1 e0 03          	shl    rax,0x3
ffff800000805e35:	48 01 c8             	add    rax,rcx
ffff800000805e38:	48 83 c0 78          	add    rax,0x78
ffff800000805e3c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805e3f:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff800000805e43:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805e47:	48 89 c7             	mov    rdi,rax
ffff800000805e4a:	ff d2                	call   rdx
ffff800000805e4c:	eb 47                	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:297
        case DRVF_LS:return    devs[i].drv->ls(args);
ffff800000805e4e:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805e55:	ff ff ff 
ffff800000805e58:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805e5c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805e5f:	48 63 d0             	movsxd rdx,eax
ffff800000805e62:	48 89 d0             	mov    rax,rdx
ffff800000805e65:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e69:	48 01 d0             	add    rax,rdx
ffff800000805e6c:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e70:	48 01 d0             	add    rax,rdx
ffff800000805e73:	48 c1 e0 03          	shl    rax,0x3
ffff800000805e77:	48 01 c8             	add    rax,rcx
ffff800000805e7a:	48 83 c0 78          	add    rax,0x78
ffff800000805e7e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805e81:	48 8b 50 60          	mov    rdx,QWORD PTR [rax+0x60]
ffff800000805e85:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805e89:	48 89 c7             	mov    rdi,rax
ffff800000805e8c:	ff d2                	call   rdx
ffff800000805e8e:	eb 05                	jmp    ffff800000805e95 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:299
    }
    return -1;
ffff800000805e90:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:300
}
ffff800000805e95:	48 83 c4 30          	add    rsp,0x30
ffff800000805e99:	5b                   	pop    rbx
ffff800000805e9a:	41 5f                	pop    r15
ffff800000805e9c:	5d                   	pop    rbp
ffff800000805e9d:	c3                   	ret    

ffff800000805e9e <call_drv_func>:
call_drv_func():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:302
int call_drv_func(int drv_n,int func_n,driver_args *args)
{
ffff800000805e9e:	f3 0f 1e fa          	endbr64 
ffff800000805ea2:	55                   	push   rbp
ffff800000805ea3:	48 89 e5             	mov    rbp,rsp
ffff800000805ea6:	48 83 ec 10          	sub    rsp,0x10
ffff800000805eaa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805eaa <call_drv_func+0xc>
ffff800000805eb1:	49 bb 7e ca 01 00 00 	movabs r11,0x1ca7e
ffff800000805eb8:	00 00 00 
ffff800000805ebb:	4c 01 d8             	add    rax,r11
ffff800000805ebe:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000805ec1:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000805ec4:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:303
    if(drvs[drv_n].flag==DRV_FLAG_EMPTY)return -1;
ffff800000805ec8:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000805ecf:	ff ff ff 
ffff800000805ed2:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000805ed6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805ed9:	48 63 ca             	movsxd rcx,edx
ffff800000805edc:	48 89 ca             	mov    rdx,rcx
ffff800000805edf:	48 c1 e2 02          	shl    rdx,0x2
ffff800000805ee3:	48 01 ca             	add    rdx,rcx
ffff800000805ee6:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805eea:	48 01 f2             	add    rdx,rsi
ffff800000805eed:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805eef:	85 d2                	test   edx,edx
ffff800000805ef1:	75 0a                	jne    ffff800000805efd <call_drv_func+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:303 (discriminator 1)
ffff800000805ef3:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805ef8:	e9 e1 02 00 00       	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:306
    /*driverfunc f=drvs[drv_n].func_thunk[func_n];
    return f(args);*/
    switch (func_n) {
ffff800000805efd:	83 7d f8 0b          	cmp    DWORD PTR [rbp-0x8],0xb
ffff800000805f01:	0f 87 d2 02 00 00    	ja     ffff8000008061d9 <call_drv_func+0x33b>
ffff800000805f07:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000805f0a:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805f11:	00 
ffff800000805f12:	48 8d 15 67 9f 01 00 	lea    rdx,[rip+0x19f67]        # ffff80000081fe80 <.LC4+0x64>
ffff800000805f19:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff800000805f1d:	48 8d 0d 5c 9f 01 00 	lea    rcx,[rip+0x19f5c]        # ffff80000081fe80 <.LC4+0x64>
ffff800000805f24:	48 01 ca             	add    rdx,rcx
ffff800000805f27:	3e ff e2             	notrack jmp rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:307
        case DRVF_OPEN :return drvs[drv_n].open(args);
ffff800000805f2a:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000805f31:	ff ff ff 
ffff800000805f34:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805f38:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805f3b:	48 63 d0             	movsxd rdx,eax
ffff800000805f3e:	48 89 d0             	mov    rax,rdx
ffff800000805f41:	48 c1 e0 02          	shl    rax,0x2
ffff800000805f45:	48 01 d0             	add    rax,rdx
ffff800000805f48:	48 c1 e0 05          	shl    rax,0x5
ffff800000805f4c:	48 01 c8             	add    rax,rcx
ffff800000805f4f:	48 83 c0 08          	add    rax,0x8
ffff800000805f53:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805f56:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805f5a:	48 89 c7             	mov    rdi,rax
ffff800000805f5d:	ff d2                	call   rdx
ffff800000805f5f:	e9 7a 02 00 00       	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:308
        case DRVF_CLOSE:return drvs[drv_n].close(args);
ffff800000805f64:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000805f6b:	ff ff ff 
ffff800000805f6e:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805f72:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805f75:	48 63 d0             	movsxd rdx,eax
ffff800000805f78:	48 89 d0             	mov    rax,rdx
ffff800000805f7b:	48 c1 e0 02          	shl    rax,0x2
ffff800000805f7f:	48 01 d0             	add    rax,rdx
ffff800000805f82:	48 c1 e0 05          	shl    rax,0x5
ffff800000805f86:	48 01 c8             	add    rax,rcx
ffff800000805f89:	48 83 c0 10          	add    rax,0x10
ffff800000805f8d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805f90:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805f94:	48 89 c7             	mov    rdi,rax
ffff800000805f97:	ff d2                	call   rdx
ffff800000805f99:	e9 40 02 00 00       	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:309
        case DRVF_READ :return drvs[drv_n].read(args);
ffff800000805f9e:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000805fa5:	ff ff ff 
ffff800000805fa8:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805fac:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805faf:	48 63 d0             	movsxd rdx,eax
ffff800000805fb2:	48 89 d0             	mov    rax,rdx
ffff800000805fb5:	48 c1 e0 02          	shl    rax,0x2
ffff800000805fb9:	48 01 d0             	add    rax,rdx
ffff800000805fbc:	48 c1 e0 05          	shl    rax,0x5
ffff800000805fc0:	48 01 c8             	add    rax,rcx
ffff800000805fc3:	48 83 c0 18          	add    rax,0x18
ffff800000805fc7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805fca:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805fce:	48 89 c7             	mov    rdi,rax
ffff800000805fd1:	ff d2                	call   rdx
ffff800000805fd3:	e9 06 02 00 00       	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:310
        case DRVF_WRITE:return drvs[drv_n].write(args);
ffff800000805fd8:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000805fdf:	ff ff ff 
ffff800000805fe2:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805fe6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805fe9:	48 63 d0             	movsxd rdx,eax
ffff800000805fec:	48 89 d0             	mov    rax,rdx
ffff800000805fef:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ff3:	48 01 d0             	add    rax,rdx
ffff800000805ff6:	48 c1 e0 05          	shl    rax,0x5
ffff800000805ffa:	48 01 c8             	add    rax,rcx
ffff800000805ffd:	48 83 c0 20          	add    rax,0x20
ffff800000806001:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806004:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806008:	48 89 c7             	mov    rdi,rax
ffff80000080600b:	ff d2                	call   rdx
ffff80000080600d:	e9 cc 01 00 00       	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:311
        case DRVF_CHK  :return drvs[drv_n].check(args);
ffff800000806012:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000806019:	ff ff ff 
ffff80000080601c:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000806020:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806023:	48 63 d0             	movsxd rdx,eax
ffff800000806026:	48 89 d0             	mov    rax,rdx
ffff800000806029:	48 c1 e0 02          	shl    rax,0x2
ffff80000080602d:	48 01 d0             	add    rax,rdx
ffff800000806030:	48 c1 e0 05          	shl    rax,0x5
ffff800000806034:	48 01 c8             	add    rax,rcx
ffff800000806037:	48 83 c0 28          	add    rax,0x28
ffff80000080603b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080603e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806042:	48 89 c7             	mov    rdi,rax
ffff800000806045:	ff d2                	call   rdx
ffff800000806047:	e9 92 01 00 00       	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:312
        case DRVF_RSVD :return drvs[drv_n].reserved(args);
ffff80000080604c:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000806053:	ff ff ff 
ffff800000806056:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080605a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080605d:	48 63 d0             	movsxd rdx,eax
ffff800000806060:	48 89 d0             	mov    rax,rdx
ffff800000806063:	48 c1 e0 02          	shl    rax,0x2
ffff800000806067:	48 01 d0             	add    rax,rdx
ffff80000080606a:	48 c1 e0 05          	shl    rax,0x5
ffff80000080606e:	48 01 c8             	add    rax,rcx
ffff800000806071:	48 83 c0 30          	add    rax,0x30
ffff800000806075:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806078:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080607c:	48 89 c7             	mov    rdi,rax
ffff80000080607f:	ff d2                	call   rdx
ffff800000806081:	e9 58 01 00 00       	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:313
        case DRVF_INT  :return drvs[drv_n].inthandler(args);
ffff800000806086:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080608d:	ff ff ff 
ffff800000806090:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000806094:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806097:	48 63 d0             	movsxd rdx,eax
ffff80000080609a:	48 89 d0             	mov    rax,rdx
ffff80000080609d:	48 c1 e0 02          	shl    rax,0x2
ffff8000008060a1:	48 01 d0             	add    rax,rdx
ffff8000008060a4:	48 c1 e0 05          	shl    rax,0x5
ffff8000008060a8:	48 01 c8             	add    rax,rcx
ffff8000008060ab:	48 83 c0 38          	add    rax,0x38
ffff8000008060af:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008060b2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008060b6:	48 89 c7             	mov    rdi,rax
ffff8000008060b9:	ff d2                	call   rdx
ffff8000008060bb:	e9 1e 01 00 00       	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:314
        case DRVF_FIND :return drvs[drv_n].find(args);
ffff8000008060c0:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008060c7:	ff ff ff 
ffff8000008060ca:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff8000008060ce:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008060d1:	48 63 d0             	movsxd rdx,eax
ffff8000008060d4:	48 89 d0             	mov    rax,rdx
ffff8000008060d7:	48 c1 e0 02          	shl    rax,0x2
ffff8000008060db:	48 01 d0             	add    rax,rdx
ffff8000008060de:	48 c1 e0 05          	shl    rax,0x5
ffff8000008060e2:	48 01 c8             	add    rax,rcx
ffff8000008060e5:	48 83 c0 40          	add    rax,0x40
ffff8000008060e9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008060ec:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008060f0:	48 89 c7             	mov    rdi,rax
ffff8000008060f3:	ff d2                	call   rdx
ffff8000008060f5:	e9 e4 00 00 00       	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:315
        case DRVF_RM   :return drvs[drv_n].rm(args);
ffff8000008060fa:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000806101:	ff ff ff 
ffff800000806104:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000806108:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080610b:	48 63 d0             	movsxd rdx,eax
ffff80000080610e:	48 89 d0             	mov    rax,rdx
ffff800000806111:	48 c1 e0 02          	shl    rax,0x2
ffff800000806115:	48 01 d0             	add    rax,rdx
ffff800000806118:	48 c1 e0 05          	shl    rax,0x5
ffff80000080611c:	48 01 c8             	add    rax,rcx
ffff80000080611f:	48 83 c0 48          	add    rax,0x48
ffff800000806123:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806126:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080612a:	48 89 c7             	mov    rdi,rax
ffff80000080612d:	ff d2                	call   rdx
ffff80000080612f:	e9 aa 00 00 00       	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:316
        case DRVF_TOUCH:return drvs[drv_n].touch(args);
ffff800000806134:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080613b:	ff ff ff 
ffff80000080613e:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000806142:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806145:	48 63 d0             	movsxd rdx,eax
ffff800000806148:	48 89 d0             	mov    rax,rdx
ffff80000080614b:	48 c1 e0 02          	shl    rax,0x2
ffff80000080614f:	48 01 d0             	add    rax,rdx
ffff800000806152:	48 c1 e0 05          	shl    rax,0x5
ffff800000806156:	48 01 c8             	add    rax,rcx
ffff800000806159:	48 83 c0 50          	add    rax,0x50
ffff80000080615d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806160:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806164:	48 89 c7             	mov    rdi,rax
ffff800000806167:	ff d2                	call   rdx
ffff800000806169:	eb 73                	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:317
        case DRVF_MKDIR:return drvs[drv_n].mkdir(args);
ffff80000080616b:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000806172:	ff ff ff 
ffff800000806175:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000806179:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080617c:	48 63 d0             	movsxd rdx,eax
ffff80000080617f:	48 89 d0             	mov    rax,rdx
ffff800000806182:	48 c1 e0 02          	shl    rax,0x2
ffff800000806186:	48 01 d0             	add    rax,rdx
ffff800000806189:	48 c1 e0 05          	shl    rax,0x5
ffff80000080618d:	48 01 c8             	add    rax,rcx
ffff800000806190:	48 83 c0 58          	add    rax,0x58
ffff800000806194:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806197:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080619b:	48 89 c7             	mov    rdi,rax
ffff80000080619e:	ff d2                	call   rdx
ffff8000008061a0:	eb 3c                	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:318
        case DRVF_LS:return drvs[drv_n].ls(args);
ffff8000008061a2:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008061a9:	ff ff ff 
ffff8000008061ac:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff8000008061b0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008061b3:	48 63 d0             	movsxd rdx,eax
ffff8000008061b6:	48 89 d0             	mov    rax,rdx
ffff8000008061b9:	48 c1 e0 02          	shl    rax,0x2
ffff8000008061bd:	48 01 d0             	add    rax,rdx
ffff8000008061c0:	48 c1 e0 05          	shl    rax,0x5
ffff8000008061c4:	48 01 c8             	add    rax,rcx
ffff8000008061c7:	48 83 c0 60          	add    rax,0x60
ffff8000008061cb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008061ce:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008061d2:	48 89 c7             	mov    rdi,rax
ffff8000008061d5:	ff d2                	call   rdx
ffff8000008061d7:	eb 05                	jmp    ffff8000008061de <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:320
    }
    return -1;
ffff8000008061d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:321
}
ffff8000008061de:	c9                   	leave  
ffff8000008061df:	c3                   	ret    

ffff8000008061e0 <dispose_device>:
dispose_device():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:322
int dispose_device(int dev){
ffff8000008061e0:	f3 0f 1e fa          	endbr64 
ffff8000008061e4:	55                   	push   rbp
ffff8000008061e5:	48 89 e5             	mov    rbp,rsp
ffff8000008061e8:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008061e8 <dispose_device+0x8>
ffff8000008061ef:	49 bb 40 c7 01 00 00 	movabs r11,0x1c740
ffff8000008061f6:	00 00 00 
ffff8000008061f9:	4c 01 da             	add    rdx,r11
ffff8000008061fc:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:323
    if(devs[dev].flag!=DEV_FLAG_USED)return -1;
ffff8000008061ff:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000806206:	ff ff ff 
ffff800000806209:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff80000080620d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806210:	48 63 c8             	movsxd rcx,eax
ffff800000806213:	48 89 c8             	mov    rax,rcx
ffff800000806216:	48 c1 e0 02          	shl    rax,0x2
ffff80000080621a:	48 01 c8             	add    rax,rcx
ffff80000080621d:	48 c1 e0 02          	shl    rax,0x2
ffff800000806221:	48 01 c8             	add    rax,rcx
ffff800000806224:	48 c1 e0 03          	shl    rax,0x3
ffff800000806228:	48 01 f0             	add    rax,rsi
ffff80000080622b:	48 83 c0 10          	add    rax,0x10
ffff80000080622f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806231:	83 f8 01             	cmp    eax,0x1
ffff800000806234:	74 07                	je     ffff80000080623d <dispose_device+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:323 (discriminator 1)
ffff800000806236:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080623b:	eb 6d                	jmp    ffff8000008062aa <dispose_device+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:324
    device* p=&devs[dev];
ffff80000080623d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806240:	48 63 c8             	movsxd rcx,eax
ffff800000806243:	48 89 c8             	mov    rax,rcx
ffff800000806246:	48 c1 e0 02          	shl    rax,0x2
ffff80000080624a:	48 01 c8             	add    rax,rcx
ffff80000080624d:	48 c1 e0 02          	shl    rax,0x2
ffff800000806251:	48 01 c8             	add    rax,rcx
ffff800000806254:	48 c1 e0 03          	shl    rax,0x3
ffff800000806258:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff80000080625f:	ff ff ff 
ffff800000806262:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff800000806266:	48 01 d0             	add    rax,rdx
ffff800000806269:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:326
    //从链表删除
    if(p->prev)p->prev->next=p->next;
ffff80000080626d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806271:	48 8b 80 98 00 00 00 	mov    rax,QWORD PTR [rax+0x98]
ffff800000806278:	48 85 c0             	test   rax,rax
ffff80000080627b:	74 1d                	je     ffff80000080629a <dispose_device+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:326 (discriminator 1)
ffff80000080627d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806281:	48 8b 80 98 00 00 00 	mov    rax,QWORD PTR [rax+0x98]
ffff800000806288:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080628c:	48 8b 92 90 00 00 00 	mov    rdx,QWORD PTR [rdx+0x90]
ffff800000806293:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:327
    p->flag=DEV_FLAG_EMPTY;
ffff80000080629a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080629e:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:328
    return 0;
ffff8000008062a5:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:329
}
ffff8000008062aa:	5d                   	pop    rbp
ffff8000008062ab:	c3                   	ret    

ffff8000008062ac <dispose_driver>:
dispose_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:330
int dispose_driver(driver *drv){
ffff8000008062ac:	f3 0f 1e fa          	endbr64 
ffff8000008062b0:	55                   	push   rbp
ffff8000008062b1:	48 89 e5             	mov    rbp,rsp
ffff8000008062b4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008062b4 <dispose_driver+0x8>
ffff8000008062bb:	49 bb 74 c6 01 00 00 	movabs r11,0x1c674
ffff8000008062c2:	00 00 00 
ffff8000008062c5:	4c 01 d8             	add    rax,r11
ffff8000008062c8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:332

}
ffff8000008062cc:	90                   	nop
ffff8000008062cd:	5d                   	pop    rbp
ffff8000008062ce:	c3                   	ret    

ffff8000008062cf <get_dev>:
get_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:335

device *get_dev(int devi)
{
ffff8000008062cf:	f3 0f 1e fa          	endbr64 
ffff8000008062d3:	55                   	push   rbp
ffff8000008062d4:	48 89 e5             	mov    rbp,rsp
ffff8000008062d7:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008062d7 <get_dev+0x8>
ffff8000008062de:	49 bb 51 c6 01 00 00 	movabs r11,0x1c651
ffff8000008062e5:	00 00 00 
ffff8000008062e8:	4c 01 da             	add    rdx,r11
ffff8000008062eb:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:336
    return &devs[devi];
ffff8000008062ee:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008062f1:	48 63 c8             	movsxd rcx,eax
ffff8000008062f4:	48 89 c8             	mov    rax,rcx
ffff8000008062f7:	48 c1 e0 02          	shl    rax,0x2
ffff8000008062fb:	48 01 c8             	add    rax,rcx
ffff8000008062fe:	48 c1 e0 02          	shl    rax,0x2
ffff800000806302:	48 01 c8             	add    rax,rcx
ffff800000806305:	48 c1 e0 03          	shl    rax,0x3
ffff800000806309:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff800000806310:	ff ff ff 
ffff800000806313:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff800000806317:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:337
}
ffff80000080631a:	5d                   	pop    rbp
ffff80000080631b:	c3                   	ret    

ffff80000080631c <get_drv>:
get_drv():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:339
driver *get_drv(int drvi)
{
ffff80000080631c:	f3 0f 1e fa          	endbr64 
ffff800000806320:	55                   	push   rbp
ffff800000806321:	48 89 e5             	mov    rbp,rsp
ffff800000806324:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000806324 <get_drv+0x8>
ffff80000080632b:	49 bb 04 c6 01 00 00 	movabs r11,0x1c604
ffff800000806332:	00 00 00 
ffff800000806335:	4c 01 da             	add    rdx,r11
ffff800000806338:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:340
    return &drvs[drvi];
ffff80000080633b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080633e:	48 63 c8             	movsxd rcx,eax
ffff800000806341:	48 89 c8             	mov    rax,rcx
ffff800000806344:	48 c1 e0 02          	shl    rax,0x2
ffff800000806348:	48 01 c8             	add    rax,rcx
ffff80000080634b:	48 c1 e0 05          	shl    rax,0x5
ffff80000080634f:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000806356:	ff ff ff 
ffff800000806359:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff80000080635d:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:341
}
ffff800000806360:	5d                   	pop    rbp
ffff800000806361:	c3                   	ret    

ffff800000806362 <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:345

//发送一个操作设备的申请
int make_request(driver_args* args)
{
ffff800000806362:	f3 0f 1e fa          	endbr64 
ffff800000806366:	55                   	push   rbp
ffff800000806367:	48 89 e5             	mov    rbp,rsp
ffff80000080636a:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080636a <make_request+0x8>
ffff800000806371:	49 bb be c5 01 00 00 	movabs r11,0x1c5be
ffff800000806378:	00 00 00 
ffff80000080637b:	4c 01 d9             	add    rcx,r11
ffff80000080637e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:347
    //在数组中寻找空项
    int i=0;
ffff800000806382:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348
    for(;i<NR_REQS;i++)
ffff800000806389:	eb 34                	jmp    ffff8000008063bf <make_request+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:350
    {
        if(reqs[i].stat==REQ_STAT_EMPTY)break;
ffff80000080638b:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff800000806392:	ff ff ff 
ffff800000806395:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff800000806399:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080639c:	48 63 d0             	movsxd rdx,eax
ffff80000080639f:	48 89 d0             	mov    rax,rdx
ffff8000008063a2:	48 01 c0             	add    rax,rax
ffff8000008063a5:	48 01 d0             	add    rax,rdx
ffff8000008063a8:	48 c1 e0 06          	shl    rax,0x6
ffff8000008063ac:	48 01 f0             	add    rax,rsi
ffff8000008063af:	48 05 ac 00 00 00    	add    rax,0xac
ffff8000008063b5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008063b7:	85 c0                	test   eax,eax
ffff8000008063b9:	74 0c                	je     ffff8000008063c7 <make_request+0x65>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348
    for(;i<NR_REQS;i++)
ffff8000008063bb:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348 (discriminator 1)
ffff8000008063bf:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff8000008063c3:	7e c6                	jle    ffff80000080638b <make_request+0x29>
ffff8000008063c5:	eb 01                	jmp    ffff8000008063c8 <make_request+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:350
        if(reqs[i].stat==REQ_STAT_EMPTY)break;
ffff8000008063c7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:352
    }
    if(i==NR_REQS)return -1;//满了
ffff8000008063c8:	83 7d fc 20          	cmp    DWORD PTR [rbp-0x4],0x20
ffff8000008063cc:	75 0a                	jne    ffff8000008063d8 <make_request+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:352 (discriminator 1)
ffff8000008063ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008063d3:	e9 25 02 00 00       	jmp    ffff8000008065fd <make_request+0x29b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:353
    reqs[i]=*args;//放入数组
ffff8000008063d8:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff8000008063df:	ff ff ff 
ffff8000008063e2:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff8000008063e6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008063e9:	48 63 d0             	movsxd rdx,eax
ffff8000008063ec:	48 89 d0             	mov    rax,rdx
ffff8000008063ef:	48 01 c0             	add    rax,rax
ffff8000008063f2:	48 01 d0             	add    rax,rdx
ffff8000008063f5:	48 c1 e0 06          	shl    rax,0x6
ffff8000008063f9:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
ffff8000008063fd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000806401:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000806404:	48 8b 78 08          	mov    rdi,QWORD PTR [rax+0x8]
ffff800000806408:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff80000080640b:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
ffff80000080640f:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
ffff800000806413:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
ffff800000806417:	48 89 72 10          	mov    QWORD PTR [rdx+0x10],rsi
ffff80000080641b:	48 89 7a 18          	mov    QWORD PTR [rdx+0x18],rdi
ffff80000080641f:	48 8b 70 20          	mov    rsi,QWORD PTR [rax+0x20]
ffff800000806423:	48 8b 78 28          	mov    rdi,QWORD PTR [rax+0x28]
ffff800000806427:	48 89 72 20          	mov    QWORD PTR [rdx+0x20],rsi
ffff80000080642b:	48 89 7a 28          	mov    QWORD PTR [rdx+0x28],rdi
ffff80000080642f:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff800000806433:	48 8b 78 38          	mov    rdi,QWORD PTR [rax+0x38]
ffff800000806437:	48 89 72 30          	mov    QWORD PTR [rdx+0x30],rsi
ffff80000080643b:	48 89 7a 38          	mov    QWORD PTR [rdx+0x38],rdi
ffff80000080643f:	48 8b 70 40          	mov    rsi,QWORD PTR [rax+0x40]
ffff800000806443:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
ffff800000806447:	48 89 72 40          	mov    QWORD PTR [rdx+0x40],rsi
ffff80000080644b:	48 89 7a 48          	mov    QWORD PTR [rdx+0x48],rdi
ffff80000080644f:	48 8b 70 50          	mov    rsi,QWORD PTR [rax+0x50]
ffff800000806453:	48 8b 78 58          	mov    rdi,QWORD PTR [rax+0x58]
ffff800000806457:	48 89 72 50          	mov    QWORD PTR [rdx+0x50],rsi
ffff80000080645b:	48 89 7a 58          	mov    QWORD PTR [rdx+0x58],rdi
ffff80000080645f:	48 8b 70 60          	mov    rsi,QWORD PTR [rax+0x60]
ffff800000806463:	48 8b 78 68          	mov    rdi,QWORD PTR [rax+0x68]
ffff800000806467:	48 89 72 60          	mov    QWORD PTR [rdx+0x60],rsi
ffff80000080646b:	48 89 7a 68          	mov    QWORD PTR [rdx+0x68],rdi
ffff80000080646f:	48 8b 70 70          	mov    rsi,QWORD PTR [rax+0x70]
ffff800000806473:	48 8b 78 78          	mov    rdi,QWORD PTR [rax+0x78]
ffff800000806477:	48 89 72 70          	mov    QWORD PTR [rdx+0x70],rsi
ffff80000080647b:	48 89 7a 78          	mov    QWORD PTR [rdx+0x78],rdi
ffff80000080647f:	48 8b b0 80 00 00 00 	mov    rsi,QWORD PTR [rax+0x80]
ffff800000806486:	48 8b b8 88 00 00 00 	mov    rdi,QWORD PTR [rax+0x88]
ffff80000080648d:	48 89 b2 80 00 00 00 	mov    QWORD PTR [rdx+0x80],rsi
ffff800000806494:	48 89 ba 88 00 00 00 	mov    QWORD PTR [rdx+0x88],rdi
ffff80000080649b:	48 8b b0 90 00 00 00 	mov    rsi,QWORD PTR [rax+0x90]
ffff8000008064a2:	48 8b b8 98 00 00 00 	mov    rdi,QWORD PTR [rax+0x98]
ffff8000008064a9:	48 89 b2 90 00 00 00 	mov    QWORD PTR [rdx+0x90],rsi
ffff8000008064b0:	48 89 ba 98 00 00 00 	mov    QWORD PTR [rdx+0x98],rdi
ffff8000008064b7:	48 8b b0 a0 00 00 00 	mov    rsi,QWORD PTR [rax+0xa0]
ffff8000008064be:	48 8b b8 a8 00 00 00 	mov    rdi,QWORD PTR [rax+0xa8]
ffff8000008064c5:	48 89 b2 a0 00 00 00 	mov    QWORD PTR [rdx+0xa0],rsi
ffff8000008064cc:	48 89 ba a8 00 00 00 	mov    QWORD PTR [rdx+0xa8],rdi
ffff8000008064d3:	48 8b b0 b0 00 00 00 	mov    rsi,QWORD PTR [rax+0xb0]
ffff8000008064da:	48 8b b8 b8 00 00 00 	mov    rdi,QWORD PTR [rax+0xb8]
ffff8000008064e1:	48 89 b2 b0 00 00 00 	mov    QWORD PTR [rdx+0xb0],rsi
ffff8000008064e8:	48 89 ba b8 00 00 00 	mov    QWORD PTR [rdx+0xb8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:355
    //插入具体设备的等待链表中
    device* dev=&devs[args->dev];
ffff8000008064ef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008064f3:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
ffff8000008064f9:	48 63 d0             	movsxd rdx,eax
ffff8000008064fc:	48 89 d0             	mov    rax,rdx
ffff8000008064ff:	48 c1 e0 02          	shl    rax,0x2
ffff800000806503:	48 01 d0             	add    rax,rdx
ffff800000806506:	48 c1 e0 02          	shl    rax,0x2
ffff80000080650a:	48 01 d0             	add    rax,rdx
ffff80000080650d:	48 c1 e0 03          	shl    rax,0x3
ffff800000806511:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000806518:	ff ff ff 
ffff80000080651b:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff80000080651f:	48 01 d0             	add    rax,rdx
ffff800000806522:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:356
    if(!dev->waiting_reqs)//空的等待队列
ffff800000806526:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080652a:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff800000806531:	48 85 c0             	test   rax,rax
ffff800000806534:	75 34                	jne    ffff80000080656a <make_request+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:357
        dev->waiting_reqs=&reqs[i];
ffff800000806536:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806539:	48 63 d0             	movsxd rdx,eax
ffff80000080653c:	48 89 d0             	mov    rax,rdx
ffff80000080653f:	48 01 c0             	add    rax,rax
ffff800000806542:	48 01 d0             	add    rax,rdx
ffff800000806545:	48 c1 e0 06          	shl    rax,0x6
ffff800000806549:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff800000806550:	ff ff ff 
ffff800000806553:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff800000806557:	48 01 c2             	add    rdx,rax
ffff80000080655a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080655e:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
ffff800000806565:	e9 90 00 00 00       	jmp    ffff8000008065fa <make_request+0x298>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:359
    else{
        driver_args* p=dev->waiting_reqs;
ffff80000080656a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080656e:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff800000806575:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360
        for(;p->next;p=p->next);
ffff800000806579:	eb 0f                	jmp    ffff80000080658a <make_request+0x228>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360 (discriminator 2)
ffff80000080657b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080657f:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
ffff800000806586:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360 (discriminator 1)
ffff80000080658a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080658e:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
ffff800000806595:	48 85 c0             	test   rax,rax
ffff800000806598:	75 e1                	jne    ffff80000080657b <make_request+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:361
        p->next=&reqs[i];
ffff80000080659a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080659d:	48 63 d0             	movsxd rdx,eax
ffff8000008065a0:	48 89 d0             	mov    rax,rdx
ffff8000008065a3:	48 01 c0             	add    rax,rax
ffff8000008065a6:	48 01 d0             	add    rax,rdx
ffff8000008065a9:	48 c1 e0 06          	shl    rax,0x6
ffff8000008065ad:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff8000008065b4:	ff ff ff 
ffff8000008065b7:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff8000008065bb:	48 01 c2             	add    rdx,rax
ffff8000008065be:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008065c2:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:362
        reqs[i].next=NULL;
ffff8000008065c9:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff8000008065d0:	ff ff ff 
ffff8000008065d3:	48 8b 0c 01          	mov    rcx,QWORD PTR [rcx+rax*1]
ffff8000008065d7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008065da:	48 63 d0             	movsxd rdx,eax
ffff8000008065dd:	48 89 d0             	mov    rax,rdx
ffff8000008065e0:	48 01 c0             	add    rax,rax
ffff8000008065e3:	48 01 d0             	add    rax,rdx
ffff8000008065e6:	48 c1 e0 06          	shl    rax,0x6
ffff8000008065ea:	48 01 c8             	add    rax,rcx
ffff8000008065ed:	48 05 b8 00 00 00    	add    rax,0xb8
ffff8000008065f3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:365
    }

    return i;
ffff8000008065fa:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:366
}
ffff8000008065fd:	5d                   	pop    rbp
ffff8000008065fe:	c3                   	ret    

ffff8000008065ff <do_req>:
do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:369
//取出一个申请并且执行
int do_req()
{
ffff8000008065ff:	f3 0f 1e fa          	endbr64 
ffff800000806603:	55                   	push   rbp
ffff800000806604:	48 89 e5             	mov    rbp,rsp
ffff800000806607:	53                   	push   rbx
ffff800000806608:	48 83 ec 18          	sub    rsp,0x18
ffff80000080660c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080660c <do_req+0xd>
ffff800000806613:	49 bb 1c c3 01 00 00 	movabs r11,0x1c31c
ffff80000080661a:	00 00 00 
ffff80000080661d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372
    //查看每个设备的请求情况
    //块设备
    for(int i=0;i<3;i++)
ffff800000806620:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000806627:	e9 c1 00 00 00       	jmp    ffff8000008066ed <do_req+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:374
    {
        device* p=dev_tree[i];
ffff80000080662c:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff800000806633:	ff ff ff 
ffff800000806636:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080663a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080663d:	48 63 d2             	movsxd rdx,edx
ffff800000806640:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff800000806644:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375
        for(;p;p=p->next)
ffff800000806648:	e9 91 00 00 00       	jmp    ffff8000008066de <do_req+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:378
        {
            //如果没有请求运行而且有请求要运行
            if(!p->running_req&&p->waiting_reqs)
ffff80000080664d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806651:	48 8b 80 80 00 00 00 	mov    rax,QWORD PTR [rax+0x80]
ffff800000806658:	48 85 c0             	test   rax,rax
ffff80000080665b:	75 72                	jne    ffff8000008066cf <do_req+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:378 (discriminator 1)
ffff80000080665d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806661:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff800000806668:	48 85 c0             	test   rax,rax
ffff80000080666b:	74 62                	je     ffff8000008066cf <do_req+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:380
            {
                p->running_req=p->waiting_reqs;
ffff80000080666d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806671:	48 8b 90 88 00 00 00 	mov    rdx,QWORD PTR [rax+0x88]
ffff800000806678:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080667c:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:381
                p->waiting_reqs=p->waiting_reqs->next;//取出一个
ffff800000806683:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806687:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff80000080668e:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
ffff800000806695:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806699:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:382
                dev_funcs[p->operi](p->running_req);
ffff8000008066a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008066a4:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [rax+0xa0]
ffff8000008066aa:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff8000008066b1:	ff ff ff 
ffff8000008066b4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066b8:	48 63 d2             	movsxd rdx,edx
ffff8000008066bb:	48 8b 14 d0          	mov    rdx,QWORD PTR [rax+rdx*8]
ffff8000008066bf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008066c3:	48 8b 80 80 00 00 00 	mov    rax,QWORD PTR [rax+0x80]
ffff8000008066ca:	48 89 c7             	mov    rdi,rax
ffff8000008066cd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375
        for(;p;p=p->next)
ffff8000008066cf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008066d3:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff8000008066da:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375 (discriminator 1)
ffff8000008066de:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff8000008066e3:	0f 85 64 ff ff ff    	jne    ffff80000080664d <do_req+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372 (discriminator 2)
    for(int i=0;i<3;i++)
ffff8000008066e9:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372 (discriminator 1)
ffff8000008066ed:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
ffff8000008066f1:	0f 8e 35 ff ff ff    	jle    ffff80000080662c <do_req+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:388
            }
            //如果还在运行（DONE的状态不能直接覆盖，因为里面的运行结果可能还没被拿走）
        }
    }
    
    return 0;
ffff8000008066f7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:389
}
ffff8000008066fc:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff800000806700:	c9                   	leave  
ffff800000806701:	c3                   	ret    

ffff800000806702 <wait_on_req>:
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:393


void wait_on_req(int reqi)
{
ffff800000806702:	f3 0f 1e fa          	endbr64 
ffff800000806706:	55                   	push   rbp
ffff800000806707:	48 89 e5             	mov    rbp,rsp
ffff80000080670a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080670a <wait_on_req+0x8>
ffff800000806711:	49 bb 1e c2 01 00 00 	movabs r11,0x1c21e
ffff800000806718:	00 00 00 
ffff80000080671b:	4c 01 da             	add    rdx,r11
ffff80000080671e:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:394
    while(reqs[reqi].stat!=REQ_STAT_DONE);
ffff800000806721:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:394 (discriminator 1)
ffff800000806722:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff800000806729:	ff ff ff 
ffff80000080672c:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff800000806730:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806733:	48 63 c8             	movsxd rcx,eax
ffff800000806736:	48 89 c8             	mov    rax,rcx
ffff800000806739:	48 01 c0             	add    rax,rax
ffff80000080673c:	48 01 c8             	add    rax,rcx
ffff80000080673f:	48 c1 e0 06          	shl    rax,0x6
ffff800000806743:	48 01 f0             	add    rax,rsi
ffff800000806746:	48 05 ac 00 00 00    	add    rax,0xac
ffff80000080674c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080674e:	83 f8 03             	cmp    eax,0x3
ffff800000806751:	75 cf                	jne    ffff800000806722 <wait_on_req+0x20>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:395
}
ffff800000806753:	90                   	nop
ffff800000806754:	90                   	nop
ffff800000806755:	5d                   	pop    rbp
ffff800000806756:	c3                   	ret    

ffff800000806757 <clear_req>:
clear_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:397
void clear_req(int reqi)
{
ffff800000806757:	f3 0f 1e fa          	endbr64 
ffff80000080675b:	55                   	push   rbp
ffff80000080675c:	48 89 e5             	mov    rbp,rsp
ffff80000080675f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080675f <clear_req+0x8>
ffff800000806766:	49 bb c9 c1 01 00 00 	movabs r11,0x1c1c9
ffff80000080676d:	00 00 00 
ffff800000806770:	4c 01 d8             	add    rax,r11
ffff800000806773:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:398
    reqs[reqi].stat=REQ_STAT_EMPTY;
ffff800000806776:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff80000080677d:	ff ff ff 
ffff800000806780:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000806784:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806787:	48 63 d0             	movsxd rdx,eax
ffff80000080678a:	48 89 d0             	mov    rax,rdx
ffff80000080678d:	48 01 c0             	add    rax,rax
ffff800000806790:	48 01 d0             	add    rax,rdx
ffff800000806793:	48 c1 e0 06          	shl    rax,0x6
ffff800000806797:	48 01 c8             	add    rax,rcx
ffff80000080679a:	48 05 ac 00 00 00    	add    rax,0xac
ffff8000008067a0:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:399
ffff8000008067a6:	90                   	nop
ffff8000008067a7:	5d                   	pop    rbp
ffff8000008067a8:	c3                   	ret    

ffff8000008067a9 <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:27
TSS *tss=0xffff800000108000ul;
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
void init_proc(){
ffff8000008067a9:	f3 0f 1e fa          	endbr64 
ffff8000008067ad:	55                   	push   rbp
ffff8000008067ae:	48 89 e5             	mov    rbp,rsp
ffff8000008067b1:	41 57                	push   r15
ffff8000008067b3:	53                   	push   rbx
ffff8000008067b4:	48 83 ec 10          	sub    rsp,0x10
ffff8000008067b8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008067b8 <init_proc+0xf>
ffff8000008067bf:	49 bb 70 c1 01 00 00 	movabs r11,0x1c170
ffff8000008067c6:	00 00 00 
ffff8000008067c9:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
ffff8000008067cc:	be 0d 00 00 00       	mov    esi,0xd
ffff8000008067d1:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008067d6:	49 89 df             	mov    r15,rbx
ffff8000008067d9:	48 b8 69 f8 fd ff ff 	movabs rax,0xfffffffffffdf869
ffff8000008067e0:	ff ff ff 
ffff8000008067e3:	48 01 d8             	add    rax,rbx
ffff8000008067e6:	ff d0                	call   rax
ffff8000008067e8:	48 89 c2             	mov    rdx,rax
ffff8000008067eb:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008067f2:	ff ff ff 
ffff8000008067f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008067f9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff8000008067fc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000806803:	eb 7b                	jmp    ffff800000806880 <init_proc+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31 (discriminator 3)
        task[i].pid=-1;
ffff800000806805:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080680c:	ff ff ff 
ffff80000080680f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806813:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806816:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806819:	48 98                	cdqe   
ffff80000080681b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806822:	48 01 d0             	add    rax,rdx
ffff800000806825:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
        task[i].stat=TASK_EMPTY;
ffff80000080682b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806832:	ff ff ff 
ffff800000806835:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806839:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080683c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080683f:	48 98                	cdqe   
ffff800000806841:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806848:	48 01 d0             	add    rax,rdx
ffff80000080684b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:33 (discriminator 3)
        task[i].parent_pid=-1;
ffff800000806852:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806859:	ff ff ff 
ffff80000080685c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806860:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806863:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806866:	48 98                	cdqe   
ffff800000806868:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080686f:	48 01 d0             	add    rax,rdx
ffff800000806872:	c7 80 bc 00 00 00 ff 	mov    DWORD PTR [rax+0xbc],0xffffffff
ffff800000806879:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff80000080687c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 1)
ffff800000806880:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff800000806884:	0f 8e 7b ff ff ff    	jle    ffff800000806805 <init_proc+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35
    }
    cur_proc=0;//proc zero
ffff80000080688a:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000806891:	ff ff ff 
ffff800000806894:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806898:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:36
    current=task;
ffff80000080689e:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008068a5:	ff ff ff 
ffff8000008068a8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068ac:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008068af:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff8000008068b6:	ff ff ff 
ffff8000008068b9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068bd:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:37
    pidd=1;
ffff8000008068c0:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff8000008068c7:	ff ff ff 
ffff8000008068ca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068ce:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:42


    //asm volatile("lldt %0"::"m"(xi));
    //asm volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
ffff8000008068d4:	68 00 00 80 00       	push   0x800000
ffff8000008068d9:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008068e0:	ff 
ffff8000008068e1:	68 00 00 80 00       	push   0x800000
ffff8000008068e6:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008068ed:	ff 
ffff8000008068ee:	68 00 00 80 00       	push   0x800000
ffff8000008068f3:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008068fa:	ff 
ffff8000008068fb:	68 00 00 80 00       	push   0x800000
ffff800000806900:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000806907:	ff 
ffff800000806908:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
ffff80000080690f:	80 ff ff 
ffff800000806912:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
ffff800000806919:	80 ff ff 
ffff80000080691c:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
ffff800000806923:	80 ff ff 
ffff800000806926:	48 89 c1             	mov    rcx,rax
ffff800000806929:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000806930:	80 ff ff 
ffff800000806933:	48 89 c2             	mov    rdx,rax
ffff800000806936:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080693d:	80 ff ff 
ffff800000806940:	48 89 c6             	mov    rsi,rax
ffff800000806943:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080694a:	80 ff ff 
ffff80000080694d:	48 89 c7             	mov    rdi,rax
ffff800000806950:	49 89 df             	mov    r15,rbx
ffff800000806953:	48 b8 8f 5e fe ff ff 	movabs rax,0xfffffffffffe5e8f
ffff80000080695a:	ff ff ff 
ffff80000080695d:	48 01 d8             	add    rax,rbx
ffff800000806960:	ff d0                	call   rax
ffff800000806962:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:47
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);

    //===============创建0号进程======================
    int zi= init_proc0();
ffff800000806966:	49 89 df             	mov    r15,rbx
ffff800000806969:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080696e:	48 ba 10 44 fe ff ff 	movabs rdx,0xfffffffffffe4410
ffff800000806975:	ff ff ff 
ffff800000806978:	48 01 da             	add    rdx,rbx
ffff80000080697b:	ff d2                	call   rdx
ffff80000080697d:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:48
    task[zi].stat=TASK_READY;
ffff800000806980:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806987:	ff ff ff 
ffff80000080698a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080698e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806991:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000806994:	48 98                	cdqe   
ffff800000806996:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080699d:	48 01 d0             	add    rax,rdx
ffff8000008069a0:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:50
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
ffff8000008069a7:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff8000008069ae:	ff ff ff 
ffff8000008069b1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008069b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008069b8:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
ffff8000008069bc:	48 89 c6             	mov    rsi,rax
ffff8000008069bf:	bf a8 06 00 00       	mov    edi,0x6a8
ffff8000008069c4:	49 89 df             	mov    r15,rbx
ffff8000008069c7:	48 b8 62 e6 fd ff ff 	movabs rax,0xfffffffffffde662
ffff8000008069ce:	ff ff ff 
ffff8000008069d1:	48 01 d8             	add    rax,rbx
ffff8000008069d4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:52
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
ffff8000008069d6:	be 08 00 00 00       	mov    esi,0x8
ffff8000008069db:	bf 74 01 00 00       	mov    edi,0x174
ffff8000008069e0:	49 89 df             	mov    r15,rbx
ffff8000008069e3:	48 b8 62 e6 fd ff ff 	movabs rax,0xfffffffffffde662
ffff8000008069ea:	ff ff ff 
ffff8000008069ed:	48 01 d8             	add    rax,rbx
ffff8000008069f0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:54
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
ffff8000008069f2:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
ffff8000008069f9:	00 20 00 
ffff8000008069fc:	48 89 c6             	mov    rsi,rax
ffff8000008069ff:	b8 81 00 00 c0       	mov    eax,0xc0000081
ffff800000806a04:	48 89 c7             	mov    rdi,rax
ffff800000806a07:	49 89 df             	mov    r15,rbx
ffff800000806a0a:	48 b8 62 e6 fd ff ff 	movabs rax,0xfffffffffffde662
ffff800000806a11:	ff ff ff 
ffff800000806a14:	48 01 d8             	add    rax,rbx
ffff800000806a17:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:56

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
ffff800000806a19:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff800000806a20:	ff ff ff 
ffff800000806a23:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a27:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806a2a:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff800000806a2e:	48 89 c6             	mov    rsi,rax
ffff800000806a31:	48 b8 b8 d5 ff ff ff 	movabs rax,0xffffffffffffd5b8
ffff800000806a38:	ff ff ff 
ffff800000806a3b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000806a3f:	48 89 c7             	mov    rdi,rax
ffff800000806a42:	49 89 df             	mov    r15,rbx
ffff800000806a45:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806a4a:	48 ba ac 0c ff ff ff 	movabs rdx,0xffffffffffff0cac
ffff800000806a51:	ff ff ff 
ffff800000806a54:	48 01 da             	add    rdx,rbx
ffff800000806a57:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:59
    //创建一个测试进程
//    create_test_proc();
}
ffff800000806a59:	90                   	nop
ffff800000806a5a:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000806a5e:	5b                   	pop    rbx
ffff800000806a5f:	41 5f                	pop    r15
ffff800000806a61:	5d                   	pop    rbp
ffff800000806a62:	c3                   	ret    

ffff800000806a63 <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:60
void create_test_proc(){
ffff800000806a63:	f3 0f 1e fa          	endbr64 
ffff800000806a67:	55                   	push   rbp
ffff800000806a68:	48 89 e5             	mov    rbp,rsp
ffff800000806a6b:	41 57                	push   r15
ffff800000806a6d:	53                   	push   rbx
ffff800000806a6e:	48 83 ec 20          	sub    rsp,0x20
ffff800000806a72:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806a72 <create_test_proc+0xf>
ffff800000806a79:	49 bb b6 be 01 00 00 	movabs r11,0x1beb6
ffff800000806a80:	00 00 00 
ffff800000806a83:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62

    int index=req_proc();
ffff800000806a86:	49 89 df             	mov    r15,rbx
ffff800000806a89:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806a8e:	48 ba 52 46 fe ff ff 	movabs rdx,0xfffffffffffe4652
ffff800000806a95:	ff ff ff 
ffff800000806a98:	48 01 da             	add    rdx,rbx
ffff800000806a9b:	ff d2                	call   rdx
ffff800000806a9d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:63
    task[index].stat=TASK_READY;
ffff800000806aa0:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806aa7:	ff ff ff 
ffff800000806aaa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806aae:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806ab1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806ab4:	48 98                	cdqe   
ffff800000806ab6:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806abd:	48 01 d0             	add    rax,rdx
ffff800000806ac0:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64
    int currsp=0x9fc00-1;
ffff800000806ac7:	c7 45 dc ff fb 09 00 	mov    DWORD PTR [rbp-0x24],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:65
    asm volatile("mov %%rsp,%0":"=m"(currsp));
ffff800000806ace:	48 89 65 dc          	mov    QWORD PTR [rbp-0x24],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:66
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff800000806ad2:	48 b8 20 fe ff ff ff 	movabs rax,0xfffffffffffffe20
ffff800000806ad9:	ff ff ff 
ffff800000806adc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ae0:	48 89 c2             	mov    rdx,rax
ffff800000806ae3:	48 83 ec 08          	sub    rsp,0x8
ffff800000806ae7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806aea:	50                   	push   rax
ffff800000806aeb:	6a 00                	push   0x0
ffff800000806aed:	52                   	push   rdx
ffff800000806aee:	6a 00                	push   0x0
ffff800000806af0:	6a 00                	push   0x0
ffff800000806af2:	6a 00                	push   0x0
ffff800000806af4:	68 58 7d 00 00       	push   0x7d58
ffff800000806af9:	6a 10                	push   0x10
ffff800000806afb:	6a 10                	push   0x10
ffff800000806afd:	6a 10                	push   0x10
ffff800000806aff:	6a 10                	push   0x10
ffff800000806b01:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff800000806b07:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff800000806b0d:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000806b12:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806b17:	be 00 00 00 00       	mov    esi,0x0
ffff800000806b1c:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806b21:	49 89 df             	mov    r15,rbx
ffff800000806b24:	48 b8 a3 47 fe ff ff 	movabs rax,0xfffffffffffe47a3
ffff800000806b2b:	ff ff ff 
ffff800000806b2e:	48 01 d8             	add    rax,rbx
ffff800000806b31:	ff d0                	call   rax
ffff800000806b33:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)ret_sys_call, 0, index);
    task[index].tss.rsp0=0x400000;
ffff800000806b37:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806b3e:	ff ff ff 
ffff800000806b41:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b45:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b48:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806b4b:	48 98                	cdqe   
ffff800000806b4d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806b54:	48 01 d0             	add    rax,rdx
ffff800000806b57:	48 c7 80 fc 01 00 00 	mov    QWORD PTR [rax+0x1fc],0x400000
ffff800000806b5e:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:69
    task[index].mem_struct.stack_top=0x7e00;
ffff800000806b62:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806b69:	ff ff ff 
ffff800000806b6c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b70:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b73:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806b76:	48 98                	cdqe   
ffff800000806b78:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806b7f:	48 01 d0             	add    rax,rdx
ffff800000806b82:	48 c7 40 40 00 7e 00 	mov    QWORD PTR [rax+0x40],0x7e00
ffff800000806b89:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
    task[index].mem_struct.stack_bottom=0x6e00;
ffff800000806b8a:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806b91:	ff ff ff 
ffff800000806b94:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b98:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b9b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806b9e:	48 98                	cdqe   
ffff800000806ba0:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806ba7:	48 01 d0             	add    rax,rdx
ffff800000806baa:	48 c7 40 38 00 6e 00 	mov    QWORD PTR [rax+0x38],0x6e00
ffff800000806bb1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:71
    task[index].mem_struct.heap_top=0x1101000;
ffff800000806bb2:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806bb9:	ff ff ff 
ffff800000806bbc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806bc0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806bc3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806bc6:	48 98                	cdqe   
ffff800000806bc8:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806bcf:	48 01 d0             	add    rax,rdx
ffff800000806bd2:	48 c7 40 30 00 10 10 	mov    QWORD PTR [rax+0x30],0x1101000
ffff800000806bd9:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:72
    task[index].mem_struct.heap_base=0x1100000;
ffff800000806bda:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806be1:	ff ff ff 
ffff800000806be4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806be8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806beb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806bee:	48 98                	cdqe   
ffff800000806bf0:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806bf7:	48 01 d0             	add    rax,rdx
ffff800000806bfa:	48 c7 40 28 00 00 10 	mov    QWORD PTR [rax+0x28],0x1100000
ffff800000806c01:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:75

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
ffff800000806c02:	48 c7 45 e0 58 7d 00 	mov    QWORD PTR [rbp-0x20],0x7d58
ffff800000806c09:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:76
    str->rax=0;
ffff800000806c0a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c0e:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000806c15:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77
    str->rbx=0;
ffff800000806c16:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c1a:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
ffff800000806c21:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rcx=proc_zero;//sysret采用的返回地址
ffff800000806c22:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000806c29:	ff ff ff 
ffff800000806c2c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c30:	48 89 c2             	mov    rdx,rax
ffff800000806c33:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c37:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rdx=0;
ffff800000806c3b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c3f:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffff800000806c46:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->rsi=0;
ffff800000806c47:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c4b:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff800000806c52:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->rdi=0;
ffff800000806c53:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c57:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffff800000806c5e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->r15=0;
ffff800000806c5f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c63:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000806c6a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->r14=0;
ffff800000806c6b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c6f:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff800000806c76:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r13=0;
ffff800000806c77:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c7b:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff800000806c82:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r12=0;
ffff800000806c83:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c87:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff800000806c8e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r11=0x200;
ffff800000806c8f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c93:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
ffff800000806c9a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r10=0;
ffff800000806c9b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806c9f:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff800000806ca6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->r9=0;
ffff800000806ca7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806cab:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
ffff800000806cb2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->r8=0;
ffff800000806cb3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806cb7:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
ffff800000806cbe:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->rip=proc_zero;
ffff800000806cbf:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000806cc6:	ff ff ff 
ffff800000806cc9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ccd:	48 89 c2             	mov    rdx,rax
ffff800000806cd0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806cd4:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->cs=0x8;
ffff800000806cdb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806cdf:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
ffff800000806ce6:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->rflags=0x00200206;
ffff800000806cea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806cee:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
ffff800000806cf5:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->rsp=0x7e00;
ffff800000806cf9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806cfd:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
ffff800000806d04:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->ss=0x2b;
ffff800000806d08:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806d0c:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
ffff800000806d13:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:95
    str->ds=0x2b;
ffff800000806d17:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806d1b:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:96
    str->es=0x2b;
ffff800000806d22:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806d26:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
ffff800000806d2d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:98

}
ffff800000806d2e:	90                   	nop
ffff800000806d2f:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000806d33:	5b                   	pop    rbx
ffff800000806d34:	41 5f                	pop    r15
ffff800000806d36:	5d                   	pop    rbp
ffff800000806d37:	c3                   	ret    

ffff800000806d38 <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:100
int init_proc0()
{
ffff800000806d38:	f3 0f 1e fa          	endbr64 
ffff800000806d3c:	55                   	push   rbp
ffff800000806d3d:	48 89 e5             	mov    rbp,rsp
ffff800000806d40:	41 57                	push   r15
ffff800000806d42:	53                   	push   rbx
ffff800000806d43:	48 83 ec 10          	sub    rsp,0x10
ffff800000806d47:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806d47 <init_proc0+0xf>
ffff800000806d4e:	49 bb e1 bb 01 00 00 	movabs r11,0x1bbe1
ffff800000806d55:	00 00 00 
ffff800000806d58:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102

    task[0].pid=pidd++;
ffff800000806d5b:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000806d62:	ff ff ff 
ffff800000806d65:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d69:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806d6b:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000806d6e:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000806d75:	ff ff ff 
ffff800000806d78:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806d7c:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000806d7e:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000806d85:	ff ff ff 
ffff800000806d88:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806d8c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806d8f:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:103
    task[0].stat=TASK_RUNNING;
ffff800000806d91:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806d98:	ff ff ff 
ffff800000806d9b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d9f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806da2:	c7 40 18 01 00 00 00 	mov    DWORD PTR [rax+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:104
    task[0].utime=0;
ffff800000806da9:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806db0:	ff ff ff 
ffff800000806db3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806db7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806dba:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:105
    task[0].priority=0;
ffff800000806dc1:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806dc8:	ff ff ff 
ffff800000806dcb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806dcf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806dd2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:107

    struct process *pz=task;
ffff800000806dd9:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806de0:	ff ff ff 
ffff800000806de3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806de7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806dea:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:116
//    task[index].tss.eip=(long)proc_zero;
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    pz->openf[0]=(struct file*)&ftty;
ffff800000806dee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806df2:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000806df9:	ff ff ff 
ffff800000806dfc:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806e00:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:117
    pz->openf[1]=(struct file*)&ftty;
ffff800000806e07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e0b:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000806e12:	ff ff ff 
ffff800000806e15:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806e19:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:118
    pz->openf[2]=(struct file*)&ftty;
ffff800000806e20:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e24:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000806e2b:	ff ff ff 
ffff800000806e2e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806e32:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120

    pz->mem_struct.stack_top=STACK_TOP;
ffff800000806e39:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e3d:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000806e44:	7f 00 00 
ffff800000806e47:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:121
    pz->mem_struct.stack_bottom=STACK_TOP;
ffff800000806e4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e4f:	48 89 70 38          	mov    QWORD PTR [rax+0x38],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122
    pz->mem_struct.heap_top=HEAP_BASE;
ffff800000806e53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e57:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x1000000
ffff800000806e5e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    pz->mem_struct.heap_base=HEAP_BASE;
ffff800000806e5f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806e63:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000806e6a:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:124
    memcpy(&pz->tss,tss, sizeof(TSS));
ffff800000806e6b:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff800000806e72:	ff ff ff 
ffff800000806e75:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e79:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806e7c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806e80:	48 8d 8a f8 01 00 00 	lea    rcx,[rdx+0x1f8]
ffff800000806e87:	ba 6c 00 00 00       	mov    edx,0x6c
ffff800000806e8c:	48 89 c6             	mov    rsi,rax
ffff800000806e8f:	48 89 cf             	mov    rdi,rcx
ffff800000806e92:	49 89 df             	mov    r15,rbx
ffff800000806e95:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000806e9c:	ff ff ff 
ffff800000806e9f:	48 01 d8             	add    rax,rbx
ffff800000806ea2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:126

    pz->child_procs=NULL;
ffff800000806ea4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806ea8:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000806eaf:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:129

    //这个是进程切换的时候要读取的值
    pz->regs.cr3=PML4_ADDR&~KNL_BASE;
ffff800000806eb3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806eb7:	48 c7 80 64 02 00 00 	mov    QWORD PTR [rax+0x264],0x101000
ffff800000806ebe:	00 10 10 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:130
    pz->pml4=PML4_ADDR;
ffff800000806ec2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806ec6:	48 bf 00 10 10 00 00 	movabs rdi,0xffff800000101000
ffff800000806ecd:	80 ff ff 
ffff800000806ed0:	48 89 b8 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131
    pz->cwd=root_sb->root;
ffff800000806ed7:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000806ede:	ff ff ff 
ffff800000806ee1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ee5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806ee8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806eeb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806eef:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    pz->exef=NULL;
ffff800000806ef6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806efa:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffff800000806f01:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:133
    list_init(&pz->node);
ffff800000806f05:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f09:	48 05 34 03 00 00    	add    rax,0x334
ffff800000806f0f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000806f13:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806f17:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000806f1e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806f22:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000806f29:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000806f2a:	90                   	nop
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:134
    pz->node.data=pz;
ffff800000806f2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f2f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806f33:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    
    pz->gpid=pz->pid;
ffff800000806f3a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f3e:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000806f40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f44:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:137
    pz->sid=pz->pid;
ffff800000806f47:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f4b:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000806f4d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f51:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    pz->fg_pgid=pz->pid;
ffff800000806f54:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f58:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000806f5a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f5e:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    pz->in_bgpg=0;
ffff800000806f61:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806f65:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
    return 0;
ffff800000806f6c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
}
ffff800000806f71:	48 83 c4 10          	add    rsp,0x10
ffff800000806f75:	5b                   	pop    rbx
ffff800000806f76:	41 5f                	pop    r15
ffff800000806f78:	5d                   	pop    rbp
ffff800000806f79:	c3                   	ret    

ffff800000806f7a <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
int req_proc(){
ffff800000806f7a:	f3 0f 1e fa          	endbr64 
ffff800000806f7e:	55                   	push   rbp
ffff800000806f7f:	48 89 e5             	mov    rbp,rsp
ffff800000806f82:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806f82 <req_proc+0x8>
ffff800000806f89:	49 bb a6 b9 01 00 00 	movabs r11,0x1b9a6
ffff800000806f90:	00 00 00 
ffff800000806f93:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    int num=0;
ffff800000806f96:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000806f9d:	eb 04                	jmp    ffff800000806fa3 <req_proc+0x29>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:146
    num<=MAX_PROC_COUNT){
        num++;
ffff800000806f9f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000806fa3:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000806faa:	ff ff ff 
ffff800000806fad:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806fb1:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806fb4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000806fb7:	48 63 d2             	movsxd rdx,edx
ffff800000806fba:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000806fc1:	48 01 ca             	add    rdx,rcx
ffff800000806fc4:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806fc6:	83 fa ff             	cmp    edx,0xffffffff
ffff800000806fc9:	74 2e                	je     ffff800000806ff9 <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144 (discriminator 1)
ffff800000806fcb:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000806fd2:	ff ff ff 
ffff800000806fd5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806fd9:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806fdc:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000806fdf:	48 63 d2             	movsxd rdx,edx
ffff800000806fe2:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000806fe9:	48 01 ca             	add    rdx,rcx
ffff800000806fec:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000806fef:	85 d2                	test   edx,edx
ffff800000806ff1:	74 06                	je     ffff800000806ff9 <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144 (discriminator 2)
ffff800000806ff3:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000806ff7:	7e a6                	jle    ffff800000806f9f <req_proc+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
    }
    if(num>=MAX_PROC_COUNT)
ffff800000806ff9:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000806ffd:	7e 0a                	jle    ffff800000807009 <req_proc+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:149
        return -1;
ffff800000806fff:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807004:	e9 c0 00 00 00       	jmp    ffff8000008070c9 <req_proc+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    task[num].pid=pidd++;
ffff800000807009:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807010:	ff ff ff 
ffff800000807013:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807017:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807019:	8d 72 01             	lea    esi,[rdx+0x1]
ffff80000080701c:	48 b9 40 fe ff ff ff 	movabs rcx,0xfffffffffffffe40
ffff800000807023:	ff ff ff 
ffff800000807026:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080702a:	89 31                	mov    DWORD PTR [rcx],esi
ffff80000080702c:	48 b9 a8 fe ff ff ff 	movabs rcx,0xfffffffffffffea8
ffff800000807033:	ff ff ff 
ffff800000807036:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080703a:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff80000080703d:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807040:	48 63 c9             	movsxd rcx,ecx
ffff800000807043:	48 69 c9 54 03 00 00 	imul   rcx,rcx,0x354
ffff80000080704a:	48 01 f1             	add    rcx,rsi
ffff80000080704d:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
    task[num].stat=TASK_ZOMBIE;
ffff80000080704f:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807056:	ff ff ff 
ffff800000807059:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080705d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807060:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807063:	48 63 d2             	movsxd rdx,edx
ffff800000807066:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080706d:	48 01 ca             	add    rdx,rcx
ffff800000807070:	c7 42 18 04 00 00 00 	mov    DWORD PTR [rdx+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    task[num].utime=0;
ffff800000807077:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080707e:	ff ff ff 
ffff800000807081:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807085:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807088:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080708b:	48 63 d2             	movsxd rdx,edx
ffff80000080708e:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807095:	48 01 ca             	add    rdx,rcx
ffff800000807098:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    task[num].priority=0;
ffff80000080709f:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008070a6:	ff ff ff 
ffff8000008070a9:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008070ad:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008070b0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008070b3:	48 98                	cdqe   
ffff8000008070b5:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008070bc:	48 01 d0             	add    rax,rdx
ffff8000008070bf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
    return num;
ffff8000008070c6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:155
}
ffff8000008070c9:	5d                   	pop    rbp
ffff8000008070ca:	c3                   	ret    

ffff8000008070cb <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
ffff8000008070cb:	f3 0f 1e fa          	endbr64 
ffff8000008070cf:	55                   	push   rbp
ffff8000008070d0:	48 89 e5             	mov    rbp,rsp
ffff8000008070d3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008070d3 <set_proc+0x8>
ffff8000008070da:	49 bb 55 b8 01 00 00 	movabs r11,0x1b855
ffff8000008070e1:	00 00 00 
ffff8000008070e4:	4c 01 d8             	add    rax,r11
ffff8000008070e7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008070eb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff8000008070ef:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff8000008070f3:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff8000008070f7:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffff8000008070fb:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:158
    struct process* proc=&task[proc_nr];
ffff8000008070ff:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807106:	ff ff ff 
ffff800000807109:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080710d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807110:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
ffff800000807113:	48 98                	cdqe   
ffff800000807115:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080711c:	48 01 d0             	add    rax,rdx
ffff80000080711f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
    proc->regs.rax=rax;
ffff800000807123:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807127:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080712b:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    proc->regs.rbx=rbx;
ffff800000807132:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807136:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080713a:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rcx=rcx;
ffff800000807141:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807145:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000807149:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:162
    proc->regs.rdx=rdx;
ffff800000807150:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807154:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000807158:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    proc->regs.es=es;
ffff80000080715f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807163:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000807167:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:164
    proc->regs.cs=cs;
ffff80000080716e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807172:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000807176:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165
    proc->regs.ss=ss;
ffff80000080717d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807181:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
ffff800000807185:	48 89 90 cc 02 00 00 	mov    QWORD PTR [rax+0x2cc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.ds=ds;
ffff80000080718c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807190:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000807194:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.fs=fs;
ffff80000080719b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080719f:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
ffff8000008071a3:	48 89 90 dc 02 00 00 	mov    QWORD PTR [rax+0x2dc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.gs=gs;
ffff8000008071aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071ae:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff8000008071b2:	48 89 90 e4 02 00 00 	mov    QWORD PTR [rax+0x2e4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->regs.rsp=rsp;
ffff8000008071b9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071bd:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff8000008071c1:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:170
    proc->regs.rbp=rbp;
ffff8000008071c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071cc:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
ffff8000008071d0:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:171
    proc->regs.rsi=rsi;
ffff8000008071d7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071db:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
ffff8000008071df:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172
    proc->regs.rdi=rdi;
ffff8000008071e6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071ea:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
ffff8000008071ee:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:173
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
ffff8000008071f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008071f9:	48 c7 80 74 02 00 00 	mov    QWORD PTR [rax+0x274],0x202
ffff800000807200:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:175
    //能接受中断
    proc->regs.rip=rip;
ffff800000807204:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807208:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
ffff80000080720c:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:177

    proc->regs.cs=cs;
ffff800000807213:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807217:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080721b:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:178
    proc->regs.ds=ds;
ffff800000807222:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807226:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff80000080722a:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:179
    proc->regs.es=es;
ffff800000807231:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807235:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000807239:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:180
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
ffff800000807240:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807244:	48 b9 00 10 10 00 00 	movabs rcx,0xffff800000101000
ffff80000080724b:	80 ff ff 
ffff80000080724e:	48 89 88 64 02 00 00 	mov    QWORD PTR [rax+0x264],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:181
    proc->pml4=PML4_ADDR;
ffff800000807255:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807259:	48 89 88 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:184


}
ffff800000807260:	90                   	nop
ffff800000807261:	5d                   	pop    rbp
ffff800000807262:	c3                   	ret    

ffff800000807263 <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:186
void proc_zero()
{
ffff800000807263:	f3 0f 1e fa          	endbr64 
ffff800000807267:	55                   	push   rbp
ffff800000807268:	48 89 e5             	mov    rbp,rsp
ffff80000080726b:	41 57                	push   r15
ffff80000080726d:	53                   	push   rbx
ffff80000080726e:	48 83 ec 10          	sub    rsp,0x10
ffff800000807272:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807272 <proc_zero+0xf>
ffff800000807279:	49 bb b6 b6 01 00 00 	movabs r11,0x1b6b6
ffff800000807280:	00 00 00 
ffff800000807283:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
ffff800000807286:	49 89 df             	mov    r15,rbx
ffff800000807289:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080728e:	48 ba e4 bd fe ff ff 	movabs rdx,0xfffffffffffebde4
ffff800000807295:	ff ff ff 
ffff800000807298:	48 01 da             	add    rdx,rbx
ffff80000080729b:	ff d2                	call   rdx
ffff80000080729d:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:200 (discriminator 1)
        putchar(c);
ffff8000008072a0:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff8000008072a4:	89 c7                	mov    edi,eax
ffff8000008072a6:	49 89 df             	mov    r15,rbx
ffff8000008072a9:	48 b8 43 ee fd ff ff 	movabs rax,0xfffffffffffdee43
ffff8000008072b0:	ff ff ff 
ffff8000008072b3:	48 01 d8             	add    rax,rbx
ffff8000008072b6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:198 (discriminator 1)
    {
ffff8000008072b8:	eb cc                	jmp    ffff800000807286 <proc_zero+0x23>

ffff8000008072ba <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:203
    }
}
void save_rsp(){
ffff8000008072ba:	f3 0f 1e fa          	endbr64 
ffff8000008072be:	55                   	push   rbp
ffff8000008072bf:	48 89 e5             	mov    rbp,rsp
ffff8000008072c2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008072c2 <save_rsp+0x8>
ffff8000008072c9:	49 bb 66 b6 01 00 00 	movabs r11,0x1b666
ffff8000008072d0:	00 00 00 
ffff8000008072d3:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
ffff8000008072d6:	48 be f0 ff 7f 00 00 	movabs rsi,0xffff8000007ffff0
ffff8000008072dd:	80 ff ff 
ffff8000008072e0:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:206
    current->regs.rsp=*p;
ffff8000008072e4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008072e8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008072eb:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff8000008072f2:	ff ff ff 
ffff8000008072f5:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff8000008072f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008072fc:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
}
ffff800000807303:	90                   	nop
ffff800000807304:	5d                   	pop    rbp
ffff800000807305:	c3                   	ret    

ffff800000807306 <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
void manage_proc(){
ffff800000807306:	f3 0f 1e fa          	endbr64 
ffff80000080730a:	55                   	push   rbp
ffff80000080730b:	48 89 e5             	mov    rbp,rsp
ffff80000080730e:	41 57                	push   r15
ffff800000807310:	48 83 ec 18          	sub    rsp,0x18
ffff800000807314:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807314 <manage_proc+0xe>
ffff80000080731b:	49 bb 14 b6 01 00 00 	movabs r11,0x1b614
ffff800000807322:	00 00 00 
ffff800000807325:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
    if(cur_proc!=-1)
ffff800000807328:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080732f:	ff ff ff 
ffff800000807332:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807336:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807338:	83 fa ff             	cmp    edx,0xffffffff
ffff80000080733b:	74 37                	je     ffff800000807374 <manage_proc+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210
        task[cur_proc].utime++;
ffff80000080733d:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807344:	ff ff ff 
ffff800000807347:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080734b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080734e:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807355:	ff ff ff 
ffff800000807358:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080735c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080735e:	48 63 d2             	movsxd rdx,edx
ffff800000807361:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807368:	48 01 ca             	add    rdx,rcx
ffff80000080736b:	8b 4a 1c             	mov    ecx,DWORD PTR [rdx+0x1c]
ffff80000080736e:	83 c1 01             	add    ecx,0x1
ffff800000807371:	89 4a 1c             	mov    DWORD PTR [rdx+0x1c],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000807374:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080737b:	ff ff ff 
ffff80000080737e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807382:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807384:	83 fa ff             	cmp    edx,0xffffffff
ffff800000807387:	74 70                	je     ffff8000008073f9 <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 1)
ffff800000807389:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807390:	ff ff ff 
ffff800000807393:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807397:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080739a:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008073a1:	ff ff ff 
ffff8000008073a4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073a8:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008073aa:	48 63 d2             	movsxd rdx,edx
ffff8000008073ad:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008073b4:	48 01 ca             	add    rdx,rcx
ffff8000008073b7:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff8000008073ba:	83 fa 0a             	cmp    edx,0xa
ffff8000008073bd:	77 3a                	ja     ffff8000008073f9 <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
ffff8000008073bf:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008073c6:	ff ff ff 
ffff8000008073c9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073cd:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008073d0:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008073d7:	ff ff ff 
ffff8000008073da:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073de:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008073e0:	48 63 d2             	movsxd rdx,edx
ffff8000008073e3:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008073ea:	48 01 ca             	add    rdx,rcx
ffff8000008073ed:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff8000008073f0:	83 fa 02             	cmp    edx,0x2
ffff8000008073f3:	0f 84 bf 01 00 00    	je     ffff8000008075b8 <manage_proc+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
        if(cur_proc!=-1)
ffff8000008073f9:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807400:	ff ff ff 
ffff800000807403:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807407:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807409:	83 fa ff             	cmp    edx,0xffffffff
ffff80000080740c:	74 35                	je     ffff800000807443 <manage_proc+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:214
            task[cur_proc].utime=0;
ffff80000080740e:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807415:	ff ff ff 
ffff800000807418:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080741c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080741f:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807426:	ff ff ff 
ffff800000807429:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080742d:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080742f:	48 63 d2             	movsxd rdx,edx
ffff800000807432:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807439:	48 01 ca             	add    rdx,rcx
ffff80000080743c:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:216
        //find
        int i=cur_proc+1;
ffff800000807443:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080744a:	ff ff ff 
ffff80000080744d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807451:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807453:	83 c2 01             	add    edx,0x1
ffff800000807456:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:217
        int times=0;
ffff800000807459:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
        //轮询，直到有一个符合条件
        while(times<10){
ffff800000807460:	eb 7b                	jmp    ffff8000008074dd <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
ffff800000807462:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807469:	ff ff ff 
ffff80000080746c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807470:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807473:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807476:	48 63 d2             	movsxd rdx,edx
ffff800000807479:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807480:	48 01 ca             	add    rdx,rcx
ffff800000807483:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807485:	83 fa ff             	cmp    edx,0xffffffff
ffff800000807488:	74 3e                	je     ffff8000008074c8 <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220 (discriminator 1)
ffff80000080748a:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807491:	ff ff ff 
ffff800000807494:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807498:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080749b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080749e:	48 63 d2             	movsxd rdx,edx
ffff8000008074a1:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008074a8:	48 01 ca             	add    rdx,rcx
ffff8000008074ab:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff8000008074ae:	83 fa 02             	cmp    edx,0x2
ffff8000008074b1:	75 15                	jne    ffff8000008074c8 <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220 (discriminator 2)
ffff8000008074b3:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008074ba:	ff ff ff 
ffff8000008074bd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008074c1:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008074c3:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff8000008074c6:	75 21                	jne    ffff8000008074e9 <manage_proc+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
                break;
            }
            i++;
ffff8000008074c8:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:224
            if(i>=MAX_TASKS){
ffff8000008074cc:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff8000008074d0:	7e 0b                	jle    ffff8000008074dd <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:225
                times++;
ffff8000008074d2:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:226
                i=0;
ffff8000008074d6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
        while(times<10){
ffff8000008074dd:	83 7d e8 09          	cmp    DWORD PTR [rbp-0x18],0x9
ffff8000008074e1:	0f 8e 7b ff ff ff    	jle    ffff800000807462 <manage_proc+0x15c>
ffff8000008074e7:	eb 01                	jmp    ffff8000008074ea <manage_proc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:221
                break;
ffff8000008074e9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:229
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff8000008074ea:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
ffff8000008074ee:	0f 84 c7 00 00 00    	je     ffff8000008075bb <manage_proc+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
        //switch
        task[cur_proc].stat=TASK_READY;
ffff8000008074f4:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008074fb:	ff ff ff 
ffff8000008074fe:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807502:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807505:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080750c:	ff ff ff 
ffff80000080750f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807513:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807515:	48 63 d2             	movsxd rdx,edx
ffff800000807518:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080751f:	48 01 ca             	add    rdx,rcx
ffff800000807522:	c7 42 18 02 00 00 00 	mov    DWORD PTR [rdx+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:232
        task[i].stat=TASK_RUNNING;
ffff800000807529:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807530:	ff ff ff 
ffff800000807533:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807537:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080753a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080753d:	48 63 d2             	movsxd rdx,edx
ffff800000807540:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807547:	48 01 ca             	add    rdx,rcx
ffff80000080754a:	c7 42 18 01 00 00 00 	mov    DWORD PTR [rdx+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:233
        switch_to(&task[cur_proc], &task[i]);
ffff800000807551:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807558:	ff ff ff 
ffff80000080755b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080755f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807562:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807565:	48 63 d2             	movsxd rdx,edx
ffff800000807568:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080756f:	48 01 d1             	add    rcx,rdx
ffff800000807572:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807579:	ff ff ff 
ffff80000080757c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807580:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000807583:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080758a:	ff ff ff 
ffff80000080758d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807591:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807593:	48 63 d2             	movsxd rdx,edx
ffff800000807596:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080759d:	48 01 f2             	add    rdx,rsi
ffff8000008075a0:	48 89 ce             	mov    rsi,rcx
ffff8000008075a3:	48 89 d7             	mov    rdi,rdx
ffff8000008075a6:	49 89 c7             	mov    r15,rax
ffff8000008075a9:	48 ba 87 5c fe ff ff 	movabs rdx,0xfffffffffffe5c87
ffff8000008075b0:	ff ff ff 
ffff8000008075b3:	48 01 c2             	add    rdx,rax
ffff8000008075b6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
    }
    return;
ffff8000008075b8:	90                   	nop
ffff8000008075b9:	eb 01                	jmp    ffff8000008075bc <manage_proc+0x2b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:229
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff8000008075bb:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:236
}
ffff8000008075bc:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008075c0:	c9                   	leave  
ffff8000008075c1:	c3                   	ret    

ffff8000008075c2 <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:239

void switch_proc_tss(int pnr)
{
ffff8000008075c2:	f3 0f 1e fa          	endbr64 
ffff8000008075c6:	55                   	push   rbp
ffff8000008075c7:	48 89 e5             	mov    rbp,rsp
ffff8000008075ca:	41 57                	push   r15
ffff8000008075cc:	48 83 ec 28          	sub    rsp,0x28
ffff8000008075d0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008075d0 <switch_proc_tss+0xe>
ffff8000008075d7:	49 bb 58 b3 01 00 00 	movabs r11,0x1b358
ffff8000008075de:	00 00 00 
ffff8000008075e1:	4c 01 d8             	add    rax,r11
ffff8000008075e4:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:240
    int sel=_TSS_IND(pnr)*8;
ffff8000008075e7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008075ea:	01 d2                	add    edx,edx
ffff8000008075ec:	83 c2 05             	add    edx,0x5
ffff8000008075ef:	c1 e2 03             	shl    edx,0x3
ffff8000008075f2:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241
    cur_proc=pnr;
ffff8000008075f5:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008075fc:	ff ff ff 
ffff8000008075ff:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807603:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff800000807606:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
    switch_proc_asm(sel);
ffff800000807608:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080760b:	89 d7                	mov    edi,edx
ffff80000080760d:	49 89 c7             	mov    r15,rax
ffff800000807610:	48 ba 6f 1a ff ff ff 	movabs rdx,0xffffffffffff1a6f
ffff800000807617:	ff ff ff 
ffff80000080761a:	48 01 c2             	add    rdx,rax
ffff80000080761d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
}
ffff80000080761f:	90                   	nop
ffff800000807620:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000807624:	c9                   	leave  
ffff800000807625:	c3                   	ret    

ffff800000807626 <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:244
void switch_proc(int pnr){
ffff800000807626:	f3 0f 1e fa          	endbr64 
ffff80000080762a:	55                   	push   rbp
ffff80000080762b:	48 89 e5             	mov    rbp,rsp
ffff80000080762e:	41 57                	push   r15
ffff800000807630:	53                   	push   rbx
ffff800000807631:	48 81 ec 70 03 00 00 	sub    rsp,0x370
ffff800000807638:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807638 <switch_proc+0x12>
ffff80000080763f:	49 bb f0 b2 01 00 00 	movabs r11,0x1b2f0
ffff800000807646:	00 00 00 
ffff800000807649:	4c 01 db             	add    rbx,r11
ffff80000080764c:	89 bd 8c fc ff ff    	mov    DWORD PTR [rbp-0x374],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:247
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
ffff800000807652:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807659:	ff ff ff 
ffff80000080765c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807660:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807663:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff800000807669:	48 98                	cdqe   
ffff80000080766b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807672:	48 01 c2             	add    rdx,rax
ffff800000807675:	48 8d 85 90 fc ff ff 	lea    rax,[rbp-0x370]
ffff80000080767c:	b9 6a 00 00 00       	mov    ecx,0x6a
ffff800000807681:	48 89 c7             	mov    rdi,rax
ffff800000807684:	48 89 d6             	mov    rsi,rdx
ffff800000807687:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
ffff80000080768a:	48 89 f2             	mov    rdx,rsi
ffff80000080768d:	48 89 f8             	mov    rax,rdi
ffff800000807690:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807692:	89 08                	mov    DWORD PTR [rax],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:248
    save_context(&task[cur_proc].tss);
ffff800000807694:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080769b:	ff ff ff 
ffff80000080769e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008076a2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008076a5:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008076ac:	ff ff ff 
ffff8000008076af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008076b3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008076b5:	48 98                	cdqe   
ffff8000008076b7:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008076be:	48 01 d0             	add    rax,rdx
ffff8000008076c1:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff8000008076c7:	48 89 c7             	mov    rdi,rax
ffff8000008076ca:	49 89 df             	mov    r15,rbx
ffff8000008076cd:	48 b8 2b 4e fe ff ff 	movabs rax,0xfffffffffffe4e2b
ffff8000008076d4:	ff ff ff 
ffff8000008076d7:	48 01 d8             	add    rax,rbx
ffff8000008076da:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:253
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
ffff8000008076dc:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008076e3:	ff ff ff 
ffff8000008076e6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008076ea:	8b 95 8c fc ff ff    	mov    edx,DWORD PTR [rbp-0x374]
ffff8000008076f0:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:254
    int sel=_TSS_IND(pnr)*8;
ffff8000008076f2:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff8000008076f8:	01 c0                	add    eax,eax
ffff8000008076fa:	83 c0 05             	add    eax,0x5
ffff8000008076fd:	c1 e0 03             	shl    eax,0x3
ffff800000807700:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:255
    switch_to(NULL, &task[pnr].tss);
ffff800000807703:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080770a:	ff ff ff 
ffff80000080770d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807711:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807714:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff80000080771a:	48 98                	cdqe   
ffff80000080771c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807723:	48 01 d0             	add    rax,rdx
ffff800000807726:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff80000080772c:	48 89 c6             	mov    rsi,rax
ffff80000080772f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807734:	49 89 df             	mov    r15,rbx
ffff800000807737:	48 b8 87 5c fe ff ff 	movabs rax,0xfffffffffffe5c87
ffff80000080773e:	ff ff ff 
ffff800000807741:	48 01 d8             	add    rax,rbx
ffff800000807744:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:258
    //asm volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
ffff800000807746:	90                   	nop
ffff800000807747:	48 81 c4 70 03 00 00 	add    rsp,0x370
ffff80000080774e:	5b                   	pop    rbx
ffff80000080774f:	41 5f                	pop    r15
ffff800000807751:	5d                   	pop    rbp
ffff800000807752:	c3                   	ret    

ffff800000807753 <save_context>:
save_context():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:260
void save_context(TSS *tss)
{
ffff800000807753:	f3 0f 1e fa          	endbr64 
ffff800000807757:	55                   	push   rbp
ffff800000807758:	48 89 e5             	mov    rbp,rsp
ffff80000080775b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080775b <save_context+0x8>
ffff800000807762:	49 bb cd b1 01 00 00 	movabs r11,0x1b1cd
ffff800000807769:	00 00 00 
ffff80000080776c:	4c 01 d8             	add    rax,r11
ffff80000080776f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:271
//    tss->esi=scene_saver.esi;
//    tss->edi=scene_saver.edi;
//    tss->eflags=scene_saver.eflags;
//    tss->esp=scene_saver.esp;
//    tss->ebp=scene_saver.ebp;
}
ffff800000807773:	90                   	nop
ffff800000807774:	5d                   	pop    rbp
ffff800000807775:	c3                   	ret    

ffff800000807776 <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:432
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
ffff800000807776:	f3 0f 1e fa          	endbr64 
ffff80000080777a:	55                   	push   rbp
ffff80000080777b:	48 89 e5             	mov    rbp,rsp
ffff80000080777e:	41 57                	push   r15
ffff800000807780:	53                   	push   rbx
ffff800000807781:	48 83 ec 60          	sub    rsp,0x60
ffff800000807785:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807785 <palloc+0xf>
ffff80000080778c:	49 bb a3 b1 01 00 00 	movabs r11,0x1b1a3
ffff800000807793:	00 00 00 
ffff800000807796:	4c 01 db             	add    rbx,r11
ffff800000807799:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff80000080779c:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433
    int page_c=size/4096+size%4096?1:0;
ffff80000080779f:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff8000008077a2:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008077a8:	85 c0                	test   eax,eax
ffff8000008077aa:	0f 48 c2             	cmovs  eax,edx
ffff8000008077ad:	c1 f8 0c             	sar    eax,0xc
ffff8000008077b0:	89 c1                	mov    ecx,eax
ffff8000008077b2:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff8000008077b5:	99                   	cdq    
ffff8000008077b6:	c1 ea 14             	shr    edx,0x14
ffff8000008077b9:	01 d0                	add    eax,edx
ffff8000008077bb:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008077c0:	29 d0                	sub    eax,edx
ffff8000008077c2:	01 c8                	add    eax,ecx
ffff8000008077c4:	85 c0                	test   eax,eax
ffff8000008077c6:	0f 95 c0             	setne  al
ffff8000008077c9:	0f b6 c0             	movzx  eax,al
ffff8000008077cc:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434
    int c=0;
ffff8000008077cf:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:435
    void *ptr=NULL;
ffff8000008077d6:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008077dd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
ffff8000008077de:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008077e5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437
    pgind++;
ffff8000008077e6:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:438
    for(int i=1;i<1024;i++)
ffff8000008077eb:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
ffff8000008077f2:	e9 07 03 00 00       	jmp    ffff800000807afe <palloc+0x388>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440
    {
        page_item* tblp=*pgind&0xfffff000;
ffff8000008077f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008077fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008077fe:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000807803:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:441
        for(int j=0;j<1024;j++)
ffff800000807807:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080780e:	e9 d5 02 00 00       	jmp    ffff800000807ae8 <palloc+0x372>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:443
        {
            int v=*tblp&PAGE_PRESENT;
ffff800000807813:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807817:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080781a:	83 e0 01             	and    eax,0x1
ffff80000080781d:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:444
            if(!v)
ffff800000807820:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff800000807824:	0f 85 b5 02 00 00    	jne    ffff800000807adf <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
            {
                int new_pg=req_a_page();
ffff80000080782a:	49 89 df             	mov    r15,rbx
ffff80000080782d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807832:	48 ba 69 02 fe ff ff 	movabs rdx,0xfffffffffffe0269
ffff800000807839:	ff ff ff 
ffff80000080783c:	48 01 da             	add    rdx,rbx
ffff80000080783f:	ff d2                	call   rdx
ffff800000807841:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:447
                if(new_pg==-1)
ffff800000807844:	83 7d b8 ff          	cmp    DWORD PTR [rbp-0x48],0xffffffff
ffff800000807848:	0f 85 0c 01 00 00    	jne    ffff80000080795a <palloc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:450
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff80000080784e:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807855:	ff ff ff 
ffff800000807858:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080785c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080785f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807862:	48 98                	cdqe   
ffff800000807864:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080786b:	48 01 d0             	add    rax,rdx
ffff80000080786e:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000807875:	0f b7 c0             	movzx  eax,ax
ffff800000807878:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:451
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff80000080787b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807882:	ff ff ff 
ffff800000807885:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807889:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080788c:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080788f:	48 98                	cdqe   
ffff800000807891:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807898:	48 01 d0             	add    rax,rdx
ffff80000080789b:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008078a2:	0f b7 c0             	movzx  eax,ax
ffff8000008078a5:	c1 e0 10             	shl    eax,0x10
ffff8000008078a8:	25 00 00 0f 00       	and    eax,0xf0000
ffff8000008078ad:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:452
                    size+=c;
ffff8000008078b0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008078b3:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:453
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff8000008078b6:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008078bd:	ff ff ff 
ffff8000008078c0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008078c4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008078c7:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008078ca:	48 98                	cdqe   
ffff8000008078cc:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008078d3:	48 01 d0             	add    rax,rdx
ffff8000008078d6:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
ffff8000008078d9:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:454
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff8000008078e0:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008078e7:	ff ff ff 
ffff8000008078ea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008078ee:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008078f1:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008078f4:	48 98                	cdqe   
ffff8000008078f6:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008078fd:	48 01 d0             	add    rax,rdx
ffff800000807900:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000807907:	0f b7 c0             	movzx  eax,ax
ffff80000080790a:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:455
                    tmp_attr&=0xfff0;
ffff80000080790d:	81 65 a0 f0 ff 00 00 	and    DWORD PTR [rbp-0x60],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:456
                    tmp_attr+=(size>>16)&0xf;
ffff800000807914:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000807917:	c1 e8 10             	shr    eax,0x10
ffff80000080791a:	83 e0 0f             	and    eax,0xf
ffff80000080791d:	89 c2                	mov    edx,eax
ffff80000080791f:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffff800000807922:	01 d0                	add    eax,edx
ffff800000807924:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:457
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff800000807927:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080792e:	ff ff ff 
ffff800000807931:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807935:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807938:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080793b:	48 98                	cdqe   
ffff80000080793d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807944:	48 01 d0             	add    rax,rdx
ffff800000807947:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
ffff80000080794a:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:458
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
ffff800000807951:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807955:	e9 b6 01 00 00       	jmp    ffff800000807b10 <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:460
                }
                int addr=get_phyaddr(new_pg);
ffff80000080795a:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080795d:	89 c7                	mov    edi,eax
ffff80000080795f:	49 89 df             	mov    r15,rbx
ffff800000807962:	48 b8 56 06 fe ff ff 	movabs rax,0xfffffffffffe0656
ffff800000807969:	ff ff ff 
ffff80000080796c:	48 01 d8             	add    rax,rbx
ffff80000080796f:	ff d0                	call   rax
ffff800000807971:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:461
                set_page_item(tblp,addr,PAGE_PRESENT|\
ffff800000807974:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
ffff800000807977:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080797b:	ba 07 00 00 00       	mov    edx,0x7
ffff800000807980:	89 ce                	mov    esi,ecx
ffff800000807982:	48 89 c7             	mov    rdi,rax
ffff800000807985:	49 89 df             	mov    r15,rbx
ffff800000807988:	48 b8 7d 06 fe ff ff 	movabs rax,0xfffffffffffe067d
ffff80000080798f:	ff ff ff 
ffff800000807992:	48 01 d8             	add    rax,rbx
ffff800000807995:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:463
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
ffff800000807997:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080799a:	c1 e0 0a             	shl    eax,0xa
ffff80000080799d:	89 c2                	mov    edx,eax
ffff80000080799f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008079a2:	01 d0                	add    eax,edx
ffff8000008079a4:	c1 e0 0c             	shl    eax,0xc
ffff8000008079a7:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:464
                if(ptr==NULL)
ffff8000008079aa:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff8000008079af:	75 13                	jne    ffff8000008079c4 <palloc+0x24e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:467
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
ffff8000008079b1:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff8000008079b8:	ff ff ff 
ffff8000008079bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008079bf:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
ffff8000008079c2:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                }
                page_c--;
ffff8000008079c4:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                c++;
ffff8000008079c8:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:471
                if(page_c==0)
ffff8000008079cc:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008079d0:	0f 85 09 01 00 00    	jne    ffff800000807adf <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:474
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff8000008079d6:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008079dd:	ff ff ff 
ffff8000008079e0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008079e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008079e7:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008079ea:	48 98                	cdqe   
ffff8000008079ec:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008079f3:	48 01 d0             	add    rax,rdx
ffff8000008079f6:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff8000008079fd:	0f b7 c0             	movzx  eax,ax
ffff800000807a00:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:475
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff800000807a03:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807a0a:	ff ff ff 
ffff800000807a0d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a11:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a14:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807a17:	48 98                	cdqe   
ffff800000807a19:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807a20:	48 01 d0             	add    rax,rdx
ffff800000807a23:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000807a2a:	0f b7 c0             	movzx  eax,ax
ffff800000807a2d:	c1 e0 10             	shl    eax,0x10
ffff800000807a30:	25 00 00 0f 00       	and    eax,0xf0000
ffff800000807a35:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:476
                    size+=c;
ffff800000807a38:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807a3b:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:477
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff800000807a3e:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807a45:	ff ff ff 
ffff800000807a48:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a4c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a4f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807a52:	48 98                	cdqe   
ffff800000807a54:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807a5b:	48 01 d0             	add    rax,rdx
ffff800000807a5e:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000807a61:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:478
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff800000807a68:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807a6f:	ff ff ff 
ffff800000807a72:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a76:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a79:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807a7c:	48 98                	cdqe   
ffff800000807a7e:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807a85:	48 01 d0             	add    rax,rdx
ffff800000807a88:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000807a8f:	0f b7 c0             	movzx  eax,ax
ffff800000807a92:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:479
                    tmp_attr&=0xfff0;
ffff800000807a95:	81 65 a8 f0 ff 00 00 	and    DWORD PTR [rbp-0x58],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:480
                    tmp_attr+=(size>>16)&0xf;
ffff800000807a9c:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000807a9f:	c1 e8 10             	shr    eax,0x10
ffff800000807aa2:	83 e0 0f             	and    eax,0xf
ffff800000807aa5:	89 c2                	mov    edx,eax
ffff800000807aa7:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
ffff800000807aaa:	01 d0                	add    eax,edx
ffff800000807aac:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:481
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff800000807aaf:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807ab6:	ff ff ff 
ffff800000807ab9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807abd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807ac0:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807ac3:	48 98                	cdqe   
ffff800000807ac5:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807acc:	48 01 d0             	add    rax,rdx
ffff800000807acf:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffff800000807ad2:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:482
                    return ptr;
ffff800000807ad9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807add:	eb 31                	jmp    ffff800000807b10 <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:485 (discriminator 2)
                }
            }
            tblp++;
ffff800000807adf:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:441 (discriminator 2)
        for(int j=0;j<1024;j++)
ffff800000807ae4:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:441 (discriminator 1)
ffff800000807ae8:	81 7d cc ff 03 00 00 	cmp    DWORD PTR [rbp-0x34],0x3ff
ffff800000807aef:	0f 8e 1e fd ff ff    	jle    ffff800000807813 <palloc+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:487 (discriminator 2)
        }
        pgind++;
ffff800000807af5:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:438 (discriminator 2)
    for(int i=1;i<1024;i++)
ffff800000807afa:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:438 (discriminator 1)
ffff800000807afe:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
ffff800000807b05:	0f 8e ec fc ff ff    	jle    ffff8000008077f7 <palloc+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:489
    }
    return NULL;
ffff800000807b0b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:490
}
ffff800000807b10:	48 83 c4 60          	add    rsp,0x60
ffff800000807b14:	5b                   	pop    rbx
ffff800000807b15:	41 5f                	pop    r15
ffff800000807b17:	5d                   	pop    rbp
ffff800000807b18:	c3                   	ret    

ffff800000807b19 <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:493
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
ffff800000807b19:	f3 0f 1e fa          	endbr64 
ffff800000807b1d:	55                   	push   rbp
ffff800000807b1e:	48 89 e5             	mov    rbp,rsp
ffff800000807b21:	41 57                	push   r15
ffff800000807b23:	48 83 ec 18          	sub    rsp,0x18
ffff800000807b27:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807b27 <malloc+0xe>
ffff800000807b2e:	49 bb 01 ae 01 00 00 	movabs r11,0x1ae01
ffff800000807b35:	00 00 00 
ffff800000807b38:	4c 01 d8             	add    rax,r11
ffff800000807b3b:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:494
    return palloc(cur_proc,size);
ffff800000807b3e:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807b45:	ff ff ff 
ffff800000807b48:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807b4c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807b4e:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff800000807b51:	89 ce                	mov    esi,ecx
ffff800000807b53:	89 d7                	mov    edi,edx
ffff800000807b55:	49 89 c7             	mov    r15,rax
ffff800000807b58:	48 ba 4e 4e fe ff ff 	movabs rdx,0xfffffffffffe4e4e
ffff800000807b5f:	ff ff ff 
ffff800000807b62:	48 01 c2             	add    rdx,rax
ffff800000807b65:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:495
}
ffff800000807b67:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000807b6b:	c9                   	leave  
ffff800000807b6c:	c3                   	ret    

ffff800000807b6d <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:497
void proc_end()
{
ffff800000807b6d:	f3 0f 1e fa          	endbr64 
ffff800000807b71:	55                   	push   rbp
ffff800000807b72:	48 89 e5             	mov    rbp,rsp
ffff800000807b75:	41 57                	push   r15
ffff800000807b77:	53                   	push   rbx
ffff800000807b78:	48 83 ec 10          	sub    rsp,0x10
ffff800000807b7c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807b7c <proc_end+0xf>
ffff800000807b83:	49 bb ac ad 01 00 00 	movabs r11,0x1adac
ffff800000807b8a:	00 00 00 
ffff800000807b8d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:499
    int ret;
    asm volatile("mov %%eax,%0":"=m"(ret));
ffff800000807b90:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:503
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //asm volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
ffff800000807b93:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000807b9a:	ff ff ff 
ffff800000807b9d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ba1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807ba3:	89 c7                	mov    edi,eax
ffff800000807ba5:	49 89 df             	mov    r15,rbx
ffff800000807ba8:	48 b8 8c 53 fe ff ff 	movabs rax,0xfffffffffffe538c
ffff800000807baf:	ff ff ff 
ffff800000807bb2:	48 01 d8             	add    rax,rbx
ffff800000807bb5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:504
    if(task[cur_proc].parent_pid!=-1){
ffff800000807bb7:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807bbe:	ff ff ff 
ffff800000807bc1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807bc5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807bc8:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000807bcf:	ff ff ff 
ffff800000807bd2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807bd6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807bd8:	48 98                	cdqe   
ffff800000807bda:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807be1:	48 01 d0             	add    rax,rdx
ffff800000807be4:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000807bea:	83 f8 ff             	cmp    eax,0xffffffff
ffff800000807bed:	0f 84 a0 00 00 00    	je     ffff800000807c93 <proc_end+0x126>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:505
        task[task[cur_proc].parent_pid].stat=TASK_READY;
ffff800000807bf3:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807bfa:	ff ff ff 
ffff800000807bfd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c01:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807c04:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807c0b:	ff ff ff 
ffff800000807c0e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c12:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807c15:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000807c1c:	ff ff ff 
ffff800000807c1f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c23:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807c25:	48 98                	cdqe   
ffff800000807c27:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807c2e:	48 01 c8             	add    rax,rcx
ffff800000807c31:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000807c37:	89 c0                	mov    eax,eax
ffff800000807c39:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807c40:	48 01 d0             	add    rax,rdx
ffff800000807c43:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:506
        switch_proc_tss(task[cur_proc].parent_pid);
ffff800000807c4a:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807c51:	ff ff ff 
ffff800000807c54:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c58:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807c5b:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000807c62:	ff ff ff 
ffff800000807c65:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c69:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807c6b:	48 98                	cdqe   
ffff800000807c6d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807c74:	48 01 d0             	add    rax,rdx
ffff800000807c77:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000807c7d:	89 c7                	mov    edi,eax
ffff800000807c7f:	49 89 df             	mov    r15,rbx
ffff800000807c82:	48 b8 9a 4c fe ff ff 	movabs rax,0xfffffffffffe4c9a
ffff800000807c89:	ff ff ff 
ffff800000807c8c:	48 01 d8             	add    rax,rbx
ffff800000807c8f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:511
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
ffff800000807c91:	eb 17                	jmp    ffff800000807caa <proc_end+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:509
        switch_proc_tss(0);
ffff800000807c93:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807c98:	49 89 df             	mov    r15,rbx
ffff800000807c9b:	48 b8 9a 4c fe ff ff 	movabs rax,0xfffffffffffe4c9a
ffff800000807ca2:	ff ff ff 
ffff800000807ca5:	48 01 d8             	add    rax,rbx
ffff800000807ca8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:511
}
ffff800000807caa:	90                   	nop
ffff800000807cab:	48 83 c4 10          	add    rsp,0x10
ffff800000807caf:	5b                   	pop    rbx
ffff800000807cb0:	41 5f                	pop    r15
ffff800000807cb2:	5d                   	pop    rbp
ffff800000807cb3:	c3                   	ret    

ffff800000807cb4 <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:513
void del_proc(int pnr)
{
ffff800000807cb4:	f3 0f 1e fa          	endbr64 
ffff800000807cb8:	55                   	push   rbp
ffff800000807cb9:	48 89 e5             	mov    rbp,rsp
ffff800000807cbc:	41 57                	push   r15
ffff800000807cbe:	53                   	push   rbx
ffff800000807cbf:	48 83 ec 20          	sub    rsp,0x20
ffff800000807cc3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807cc3 <del_proc+0xf>
ffff800000807cca:	49 bb 65 ac 01 00 00 	movabs r11,0x1ac65
ffff800000807cd1:	00 00 00 
ffff800000807cd4:	4c 01 db             	add    rbx,r11
ffff800000807cd7:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:514
    task[pnr].stat=TASK_ZOMBIE;
ffff800000807cda:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807ce1:	ff ff ff 
ffff800000807ce4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ce8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807ceb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807cee:	48 98                	cdqe   
ffff800000807cf0:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807cf7:	48 01 d0             	add    rax,rdx
ffff800000807cfa:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:517
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
ffff800000807d01:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807d08:	ff ff ff 
ffff800000807d0b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d0f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807d12:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807d15:	48 98                	cdqe   
ffff800000807d17:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807d1e:	48 01 d0             	add    rax,rdx
ffff800000807d21:	48 89 c7             	mov    rdi,rax
ffff800000807d24:	49 89 df             	mov    r15,rbx
ffff800000807d27:	48 b8 38 6a fe ff ff 	movabs rax,0xfffffffffffe6a38
ffff800000807d2e:	ff ff ff 
ffff800000807d31:	48 01 d8             	add    rax,rbx
ffff800000807d34:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:519
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
ffff800000807d36:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807d3d:	ff ff ff 
ffff800000807d40:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d44:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807d47:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807d4a:	48 98                	cdqe   
ffff800000807d4c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807d53:	48 01 d0             	add    rax,rdx
ffff800000807d56:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000807d5d:	48 89 c7             	mov    rdi,rax
ffff800000807d60:	49 89 df             	mov    r15,rbx
ffff800000807d63:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000807d6a:	ff ff ff 
ffff800000807d6d:	48 01 d8             	add    rax,rbx
ffff800000807d70:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000807d72:	c7 45 ec 03 00 00 00 	mov    DWORD PTR [rbp-0x14],0x3
ffff800000807d79:	eb 4f                	jmp    ffff800000807dca <del_proc+0x116>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
        if(task[pnr].openf[i]){
ffff800000807d7b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807d82:	ff ff ff 
ffff800000807d85:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d89:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807d8c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807d8f:	48 98                	cdqe   
ffff800000807d91:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807d98:	48 01 d0             	add    rax,rdx
ffff800000807d9b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807d9e:	48 63 d2             	movsxd rdx,edx
ffff800000807da1:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807da5:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807daa:	48 85 c0             	test   rax,rax
ffff800000807dad:	74 17                	je     ffff800000807dc6 <del_proc+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:523
            sys_close(i);
ffff800000807daf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807db2:	89 c7                	mov    edi,eax
ffff800000807db4:	49 89 df             	mov    r15,rbx
ffff800000807db7:	48 b8 37 aa fe ff ff 	movabs rax,0xfffffffffffeaa37
ffff800000807dbe:	ff ff ff 
ffff800000807dc1:	48 01 d8             	add    rax,rbx
ffff800000807dc4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000807dc6:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521 (discriminator 1)
ffff800000807dca:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000807dce:	7e ab                	jle    ffff800000807d7b <del_proc+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:527
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
ffff800000807dd0:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807dd7:	ff ff ff 
ffff800000807dda:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807dde:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807de1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807de4:	48 98                	cdqe   
ffff800000807de6:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807ded:	48 01 d0             	add    rax,rdx
ffff800000807df0:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000807df3:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000807dfa:	ff ff ff 
ffff800000807dfd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807e01:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807e04:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807e07:	48 98                	cdqe   
ffff800000807e09:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807e10:	48 01 c8             	add    rax,rcx
ffff800000807e13:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807e15:	39 c2                	cmp    edx,eax
ffff800000807e17:	75 79                	jne    ffff800000807e92 <del_proc+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:529
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
ffff800000807e19:	ba 00 00 00 00       	mov    edx,0x0
ffff800000807e1e:	be 02 00 00 00       	mov    esi,0x2
ffff800000807e23:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807e28:	49 89 df             	mov    r15,rbx
ffff800000807e2b:	48 b8 5d 76 fe ff ff 	movabs rax,0xfffffffffffe765d
ffff800000807e32:	ff ff ff 
ffff800000807e35:	48 01 d8             	add    rax,rbx
ffff800000807e38:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:530
        sys_close(0);
ffff800000807e3a:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807e3f:	49 89 df             	mov    r15,rbx
ffff800000807e42:	48 b8 37 aa fe ff ff 	movabs rax,0xfffffffffffeaa37
ffff800000807e49:	ff ff ff 
ffff800000807e4c:	48 01 d8             	add    rax,rbx
ffff800000807e4f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:531
        sys_close(1);
ffff800000807e51:	bf 01 00 00 00       	mov    edi,0x1
ffff800000807e56:	49 89 df             	mov    r15,rbx
ffff800000807e59:	48 b8 37 aa fe ff ff 	movabs rax,0xfffffffffffeaa37
ffff800000807e60:	ff ff ff 
ffff800000807e63:	48 01 d8             	add    rax,rbx
ffff800000807e66:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:532
        sys_close(2);
ffff800000807e68:	bf 02 00 00 00       	mov    edi,0x2
ffff800000807e6d:	49 89 df             	mov    r15,rbx
ffff800000807e70:	48 b8 37 aa fe ff ff 	movabs rax,0xfffffffffffeaa37
ffff800000807e77:	ff ff ff 
ffff800000807e7a:	48 01 d8             	add    rax,rbx
ffff800000807e7d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:534
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
ffff800000807e7f:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000807e86:	eb 04                	jmp    ffff800000807e8c <del_proc+0x1d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:534 (discriminator 3)
ffff800000807e88:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:534 (discriminator 1)
ffff800000807e8c:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000807e90:	7e f6                	jle    ffff800000807e88 <del_proc+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:544
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
ffff800000807e92:	90                   	nop
ffff800000807e93:	48 83 c4 20          	add    rsp,0x20
ffff800000807e97:	5b                   	pop    rbx
ffff800000807e98:	41 5f                	pop    r15
ffff800000807e9a:	5d                   	pop    rbp
ffff800000807e9b:	c3                   	ret    

ffff800000807e9c <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547

int set_proc_stat(int pid,int stat)
{
ffff800000807e9c:	f3 0f 1e fa          	endbr64 
ffff800000807ea0:	55                   	push   rbp
ffff800000807ea1:	48 89 e5             	mov    rbp,rsp
ffff800000807ea4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807ea4 <set_proc_stat+0x8>
ffff800000807eab:	49 bb 84 aa 01 00 00 	movabs r11,0x1aa84
ffff800000807eb2:	00 00 00 
ffff800000807eb5:	4c 01 d8             	add    rax,r11
ffff800000807eb8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807ebb:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:548
    if(pid==-1)return -1;
ffff800000807ebe:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000807ec2:	75 0a                	jne    ffff800000807ece <set_proc_stat+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:548 (discriminator 1)
ffff800000807ec4:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807ec9:	e9 b9 00 00 00       	jmp    ffff800000807f87 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549
    int i=0;
ffff800000807ece:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550
    for(;task[i].pid!=pid;i++);
ffff800000807ed5:	eb 04                	jmp    ffff800000807edb <set_proc_stat+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550 (discriminator 2)
ffff800000807ed7:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550 (discriminator 1)
ffff800000807edb:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807ee2:	ff ff ff 
ffff800000807ee5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807ee9:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807eec:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807eef:	48 63 d2             	movsxd rdx,edx
ffff800000807ef2:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807ef9:	48 01 ca             	add    rdx,rcx
ffff800000807efc:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807efe:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807f01:	39 d1                	cmp    ecx,edx
ffff800000807f03:	75 d2                	jne    ffff800000807ed7 <set_proc_stat+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:551
    if(i==MAX_PROC_COUNT)return -1;
ffff800000807f05:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000807f09:	75 07                	jne    ffff800000807f12 <set_proc_stat+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:551 (discriminator 1)
ffff800000807f0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807f10:	eb 75                	jmp    ffff800000807f87 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:552
    task[i].stat=stat;
ffff800000807f12:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807f19:	ff ff ff 
ffff800000807f1c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f20:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807f23:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807f26:	48 63 d2             	movsxd rdx,edx
ffff800000807f29:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807f30:	48 01 d1             	add    rcx,rdx
ffff800000807f33:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807f36:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:554
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
ffff800000807f39:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807f40:	ff ff ff 
ffff800000807f43:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f47:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807f49:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000807f4c:	75 34                	jne    ffff800000807f82 <set_proc_stat+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:555
        task[cur_proc].utime=MAX_UTIME;
ffff800000807f4e:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807f55:	ff ff ff 
ffff800000807f58:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f5c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807f5f:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000807f66:	ff ff ff 
ffff800000807f69:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807f6d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807f6f:	48 98                	cdqe   
ffff800000807f71:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807f78:	48 01 c8             	add    rax,rcx
ffff800000807f7b:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:556
    return 0;
ffff800000807f82:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:557
}
ffff800000807f87:	5d                   	pop    rbp
ffff800000807f88:	c3                   	ret    

ffff800000807f89 <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:589
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
ffff800000807f89:	f3 0f 1e fa          	endbr64 
ffff800000807f8d:	55                   	push   rbp
ffff800000807f8e:	48 89 e5             	mov    rbp,rsp
ffff800000807f91:	41 57                	push   r15
ffff800000807f93:	53                   	push   rbx
ffff800000807f94:	48 83 ec 10          	sub    rsp,0x10
ffff800000807f98:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807f98 <sys_exit+0xf>
ffff800000807f9f:	49 bb 90 a9 01 00 00 	movabs r11,0x1a990
ffff800000807fa6:	00 00 00 
ffff800000807fa9:	4c 01 db             	add    rbx,r11
ffff800000807fac:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:590
    current->exit_code=code;
ffff800000807faf:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000807fb6:	ff ff ff 
ffff800000807fb9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807fbd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807fc0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807fc3:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:591
    del_proc(cur_proc);
ffff800000807fc6:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000807fcd:	ff ff ff 
ffff800000807fd0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807fd4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807fd6:	89 c7                	mov    edi,eax
ffff800000807fd8:	49 89 df             	mov    r15,rbx
ffff800000807fdb:	48 b8 8c 53 fe ff ff 	movabs rax,0xfffffffffffe538c
ffff800000807fe2:	ff ff ff 
ffff800000807fe5:	48 01 d8             	add    rax,rbx
ffff800000807fe8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:593 (discriminator 1)
    while(1)
        manage_proc();
ffff800000807fea:	49 89 df             	mov    r15,rbx
ffff800000807fed:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807ff2:	48 ba de 49 fe ff ff 	movabs rdx,0xfffffffffffe49de
ffff800000807ff9:	ff ff ff 
ffff800000807ffc:	48 01 da             	add    rdx,rbx
ffff800000807fff:	ff d2                	call   rdx
ffff800000808001:	eb e7                	jmp    ffff800000807fea <sys_exit+0x61>

ffff800000808003 <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:649
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
ffff800000808003:	f3 0f 1e fa          	endbr64 
ffff800000808007:	55                   	push   rbp
ffff800000808008:	48 89 e5             	mov    rbp,rsp
ffff80000080800b:	41 57                	push   r15
ffff80000080800d:	41 54                	push   r12
ffff80000080800f:	53                   	push   rbx
ffff800000808010:	48 83 ec 48          	sub    rsp,0x48
ffff800000808014:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808014 <reg_proc+0x11>
ffff80000080801b:	49 bb 14 a9 01 00 00 	movabs r11,0x1a914
ffff800000808022:	00 00 00 
ffff800000808025:	4c 01 db             	add    rbx,r11
ffff800000808028:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff80000080802c:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff800000808030:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651
    
    int i=req_proc();
ffff800000808034:	49 89 df             	mov    r15,rbx
ffff800000808037:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080803c:	48 ba 52 46 fe ff ff 	movabs rdx,0xfffffffffffe4652
ffff800000808043:	ff ff ff 
ffff800000808046:	48 01 da             	add    rdx,rbx
ffff800000808049:	ff d2                	call   rdx
ffff80000080804b:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:652
    if(i==-1)return -1;
ffff80000080804e:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000808052:	75 0a                	jne    ffff80000080805e <reg_proc+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:652 (discriminator 1)
ffff800000808054:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808059:	e9 7e 02 00 00       	jmp    ffff8000008082dc <reg_proc+0x2d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:655

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
ffff80000080805e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808062:	48 83 ec 08          	sub    rsp,0x8
ffff800000808066:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000808069:	52                   	push   rdx
ffff80000080806a:	6a 00                	push   0x0
ffff80000080806c:	50                   	push   rax
ffff80000080806d:	6a 00                	push   0x0
ffff80000080806f:	6a 00                	push   0x0
ffff800000808071:	6a 00                	push   0x0
ffff800000808073:	68 00 f0 ff ff       	push   0xfffffffffffff000
ffff800000808078:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
ffff80000080807f:	00 
ffff800000808080:	6a 28                	push   0x28
ffff800000808082:	6a 28                	push   0x28
ffff800000808084:	6a 28                	push   0x28
ffff800000808086:	6a 28                	push   0x28
ffff800000808088:	41 b9 30 00 00 00    	mov    r9d,0x30
ffff80000080808e:	41 b8 28 00 00 00    	mov    r8d,0x28
ffff800000808094:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000808099:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080809e:	be 00 00 00 00       	mov    esi,0x0
ffff8000008080a3:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008080a8:	49 89 df             	mov    r15,rbx
ffff8000008080ab:	48 b8 a3 47 fe ff ff 	movabs rax,0xfffffffffffe47a3
ffff8000008080b2:	ff ff ff 
ffff8000008080b5:	48 01 d8             	add    rax,rbx
ffff8000008080b8:	ff d0                	call   rax
ffff8000008080ba:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:657
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc();
ffff8000008080be:	49 89 df             	mov    r15,rbx
ffff8000008080c1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008080c6:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff8000008080cd:	ff ff ff 
ffff8000008080d0:	48 01 da             	add    rdx,rbx
ffff8000008080d3:	ff d2                	call   rdx
ffff8000008080d5:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008080dc:	ff ff ff 
ffff8000008080df:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008080e3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008080e6:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008080e9:	48 63 d2             	movsxd rdx,edx
ffff8000008080ec:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008080f3:	48 01 ca             	add    rdx,rcx
ffff8000008080f6:	48 89 82 e0 00 00 00 	mov    QWORD PTR [rdx+0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:658
    task[i].pml4[0]= kmalloc();
ffff8000008080fd:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808104:	ff ff ff 
ffff800000808107:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080810b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080810e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808111:	48 98                	cdqe   
ffff800000808113:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080811a:	48 01 d0             	add    rax,rdx
ffff80000080811d:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000808124:	49 89 df             	mov    r15,rbx
ffff800000808127:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080812c:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000808133:	ff ff ff 
ffff800000808136:	48 01 da             	add    rdx,rbx
ffff800000808139:	ff d2                	call   rdx
ffff80000080813b:	49 89 04 24          	mov    QWORD PTR [r12],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:659
    unsigned long *pdpt=task[i].pml4;
ffff80000080813f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808146:	ff ff ff 
ffff800000808149:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080814d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808150:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808153:	48 98                	cdqe   
ffff800000808155:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080815c:	48 01 d0             	add    rax,rdx
ffff80000080815f:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000808166:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:661
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
ffff80000080816a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080816e:	ba 03 00 00 00       	mov    edx,0x3
ffff800000808173:	be 00 00 00 00       	mov    esi,0x0
ffff800000808178:	48 89 c7             	mov    rdi,rax
ffff80000080817b:	49 89 df             	mov    r15,rbx
ffff80000080817e:	48 b8 e2 06 fe ff ff 	movabs rax,0xfffffffffffe06e2
ffff800000808185:	ff ff ff 
ffff800000808188:	48 01 d8             	add    rax,rbx
ffff80000080818b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:664

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc();
ffff80000080818d:	49 89 df             	mov    r15,rbx
ffff800000808190:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808195:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff80000080819c:	ff ff ff 
ffff80000080819f:	48 01 da             	add    rdx,rbx
ffff8000008081a2:	ff d2                	call   rdx
ffff8000008081a4:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:665
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
ffff8000008081a8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008081ac:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008081b0:	48 83 c0 18          	add    rax,0x18
ffff8000008081b4:	48 83 ca 07          	or     rdx,0x7
ffff8000008081b8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:666
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
ffff8000008081bb:	49 89 df             	mov    r15,rbx
ffff8000008081be:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008081c3:	48 ba 69 02 fe ff ff 	movabs rdx,0xfffffffffffe0269
ffff8000008081ca:	ff ff ff 
ffff8000008081cd:	48 01 da             	add    rdx,rbx
ffff8000008081d0:	ff d2                	call   rdx
ffff8000008081d2:	89 c7                	mov    edi,eax
ffff8000008081d4:	49 89 df             	mov    r15,rbx
ffff8000008081d7:	48 b8 56 06 fe ff ff 	movabs rax,0xfffffffffffe0656
ffff8000008081de:	ff ff ff 
ffff8000008081e1:	48 01 d8             	add    rax,rbx
ffff8000008081e4:	ff d0                	call   rax
ffff8000008081e6:	89 c1                	mov    ecx,eax
ffff8000008081e8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008081ec:	48 05 f8 0f 00 00    	add    rax,0xff8
ffff8000008081f2:	ba 06 00 00 00       	mov    edx,0x6
ffff8000008081f7:	89 ce                	mov    esi,ecx
ffff8000008081f9:	48 89 c7             	mov    rdi,rax
ffff8000008081fc:	49 89 df             	mov    r15,rbx
ffff8000008081ff:	48 b8 4d 07 fe ff ff 	movabs rax,0xfffffffffffe074d
ffff800000808206:	ff ff ff 
ffff800000808209:	48 01 d8             	add    rax,rbx
ffff80000080820c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:667
    task[i].regs.cr3=task[i].pml4;
ffff80000080820e:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808215:	ff ff ff 
ffff800000808218:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080821c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080821f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808222:	48 98                	cdqe   
ffff800000808224:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080822b:	48 01 d0             	add    rax,rdx
ffff80000080822e:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000808235:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080823c:	ff ff ff 
ffff80000080823f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808243:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808246:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808249:	48 98                	cdqe   
ffff80000080824b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808252:	48 01 c8             	add    rax,rcx
ffff800000808255:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:669

    task[i].stat=TASK_READY;
ffff80000080825c:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808263:	ff ff ff 
ffff800000808266:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080826a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080826d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808270:	48 98                	cdqe   
ffff800000808272:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808279:	48 01 d0             	add    rax,rdx
ffff80000080827c:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:670
    task[i].cwd=cwd;
ffff800000808283:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080828a:	ff ff ff 
ffff80000080828d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808291:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808294:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808297:	48 98                	cdqe   
ffff800000808299:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008082a0:	48 01 c2             	add    rdx,rax
ffff8000008082a3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008082a7:	48 89 82 e8 00 00 00 	mov    QWORD PTR [rdx+0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:671
    task[i].exef=exef;
ffff8000008082ae:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008082b5:	ff ff ff 
ffff8000008082b8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008082bc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008082bf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008082c2:	48 98                	cdqe   
ffff8000008082c4:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008082cb:	48 01 c2             	add    rdx,rax
ffff8000008082ce:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008082d2:	48 89 82 f0 00 00 00 	mov    QWORD PTR [rdx+0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:673

    return i;
ffff8000008082d9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:728
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
ffff8000008082dc:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff8000008082e0:	5b                   	pop    rbx
ffff8000008082e1:	41 5c                	pop    r12
ffff8000008082e3:	41 5f                	pop    r15
ffff8000008082e5:	5d                   	pop    rbp
ffff8000008082e6:	c3                   	ret    

ffff8000008082e7 <sys_malloc>:
sys_malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:731

void * sys_malloc(int size)
{
ffff8000008082e7:	f3 0f 1e fa          	endbr64 
ffff8000008082eb:	55                   	push   rbp
ffff8000008082ec:	48 89 e5             	mov    rbp,rsp
ffff8000008082ef:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008082ef <sys_malloc+0x8>
ffff8000008082f6:	49 bb 39 a6 01 00 00 	movabs r11,0x1a639
ffff8000008082fd:	00 00 00 
ffff800000808300:	4c 01 d8             	add    rax,r11
ffff800000808303:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:733
    //
    int n=size/CHUNK_SIZE+size%CHUNK_SIZE?1:0;
ffff800000808306:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000808309:	8d 8a ff 0f 00 00    	lea    ecx,[rdx+0xfff]
ffff80000080830f:	85 d2                	test   edx,edx
ffff800000808311:	0f 48 d1             	cmovs  edx,ecx
ffff800000808314:	c1 fa 0c             	sar    edx,0xc
ffff800000808317:	89 d6                	mov    esi,edx
ffff800000808319:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080831c:	89 d1                	mov    ecx,edx
ffff80000080831e:	c1 f9 1f             	sar    ecx,0x1f
ffff800000808321:	c1 e9 14             	shr    ecx,0x14
ffff800000808324:	01 ca                	add    edx,ecx
ffff800000808326:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff80000080832c:	29 ca                	sub    edx,ecx
ffff80000080832e:	01 f2                	add    edx,esi
ffff800000808330:	85 d2                	test   edx,edx
ffff800000808332:	0f 95 c2             	setne  dl
ffff800000808335:	0f b6 d2             	movzx  edx,dl
ffff800000808338:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:734
    chunk_header *hp=(chunk_header*)task[cur_proc].mem_struct.heap_base;
ffff80000080833b:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000808342:	ff ff ff 
ffff800000808345:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808349:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080834c:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000808353:	ff ff ff 
ffff800000808356:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080835a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080835c:	48 63 d2             	movsxd rdx,edx
ffff80000080835f:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000808366:	48 01 ca             	add    rdx,rcx
ffff800000808369:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080836d:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000808371:	eb 0c                	jmp    ffff80000080837f <sys_malloc+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:736
        hp=hp->next;
ffff800000808373:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000808377:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080837b:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff80000080837f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000808383:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000808387:	48 85 d2             	test   rdx,rdx
ffff80000080838a:	74 16                	je     ffff8000008083a2 <sys_malloc+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735 (discriminator 1)
ffff80000080838c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000808390:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff800000808393:	85 d2                	test   edx,edx
ffff800000808395:	75 0b                	jne    ffff8000008083a2 <sys_malloc+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735 (discriminator 2)
ffff800000808397:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080839b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080839d:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff8000008083a0:	7e d1                	jle    ffff800000808373 <sys_malloc+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:737
    if(hp->pgn<n)
ffff8000008083a2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008083a6:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008083a8:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff8000008083ab:	0f 8e b8 00 00 00    	jle    ffff800000808469 <sys_malloc+0x182>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:740
    {
        //上抬heap top
        if(task[cur_proc].mem_struct.heap_top+CHUNK_SIZE*n>=HEAP_MAXTOP)
ffff8000008083b1:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008083b8:	ff ff ff 
ffff8000008083bb:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008083bf:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008083c2:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008083c9:	ff ff ff 
ffff8000008083cc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008083d0:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008083d2:	48 63 d2             	movsxd rdx,edx
ffff8000008083d5:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008083dc:	48 01 ca             	add    rdx,rcx
ffff8000008083df:	48 8b 4a 30          	mov    rcx,QWORD PTR [rdx+0x30]
ffff8000008083e3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008083e6:	c1 e2 0c             	shl    edx,0xc
ffff8000008083e9:	48 63 d2             	movsxd rdx,edx
ffff8000008083ec:	48 01 ca             	add    rdx,rcx
ffff8000008083ef:	48 81 fa ff ff ef 01 	cmp    rdx,0x1efffff
ffff8000008083f6:	76 0a                	jbe    ffff800000808402 <sys_malloc+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:743
        {
            //超过顶部
            return NULL;
ffff8000008083f8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008083fd:	e9 e0 00 00 00       	jmp    ffff8000008084e2 <sys_malloc+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:745
        }
        int needed=n-hp->pgn;
ffff800000808402:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000808406:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000808408:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080840b:	29 ca                	sub    edx,ecx
ffff80000080840d:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:746
        char* p=task[cur_proc].mem_struct.heap_top;
ffff800000808410:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000808417:	ff ff ff 
ffff80000080841a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080841e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808421:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000808428:	ff ff ff 
ffff80000080842b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080842f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808431:	48 98                	cdqe   
ffff800000808433:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080843a:	48 01 c8             	add    rax,rcx
ffff80000080843d:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000808441:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000808445:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080844c:	eb 13                	jmp    ffff800000808461 <sys_malloc+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749 (discriminator 3)
        {
            *p=0;//触发缺页中断
ffff80000080844e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808452:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:750 (discriminator 3)
            p+=PAGE_SIZE;
ffff800000808455:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
ffff80000080845c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747 (discriminator 3)
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff80000080845d:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747 (discriminator 1)
ffff800000808461:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808464:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
ffff800000808467:	7c e5                	jl     ffff80000080844e <sys_malloc+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:753
        }
    }
    if(hp->pgn>n)
ffff800000808469:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080846d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080846f:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
ffff800000808472:	7d 59                	jge    ffff8000008084cd <sys_malloc+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:756
    {
        //在后面新建一个头
        char *p=hp;
ffff800000808474:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808478:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:757
        p+=(n+1)*CHUNK_SIZE;//算上存储头一个
ffff80000080847c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080847f:	83 c0 01             	add    eax,0x1
ffff800000808482:	c1 e0 0c             	shl    eax,0xc
ffff800000808485:	48 98                	cdqe   
ffff800000808487:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:758
        chunk_header *np=p;
ffff80000080848b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080848f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:759
        np->pgn=hp->pgn-n-1;
ffff800000808493:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808497:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808499:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080849c:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080849f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008084a3:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:760
        np->next=hp->next;
ffff8000008084a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008084a9:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008084ad:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008084b1:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761
        np->prev=hp;
ffff8000008084b5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008084b9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008084bd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:762
        hp->next=np;
ffff8000008084c1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008084c5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008084c9:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:764
    }
    hp->alloc=1;//分配完毕
ffff8000008084cd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008084d1:	c7 40 04 01 00 00 00 	mov    DWORD PTR [rax+0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:765
    return (char*)hp+CHUNK_SIZE;//返回后边的第一个数据块地址
ffff8000008084d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008084dc:	48 05 00 10 00 00    	add    rax,0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:766
}
ffff8000008084e2:	5d                   	pop    rbp
ffff8000008084e3:	c3                   	ret    

ffff8000008084e4 <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:768
int sys_free(int ptr)
{
ffff8000008084e4:	f3 0f 1e fa          	endbr64 
ffff8000008084e8:	55                   	push   rbp
ffff8000008084e9:	48 89 e5             	mov    rbp,rsp
ffff8000008084ec:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008084ec <sys_free+0x8>
ffff8000008084f3:	49 bb 3c a4 01 00 00 	movabs r11,0x1a43c
ffff8000008084fa:	00 00 00 
ffff8000008084fd:	4c 01 d8             	add    rax,r11
ffff800000808500:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:769
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
ffff800000808503:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808506:	2d 00 10 00 00       	sub    eax,0x1000
ffff80000080850b:	48 98                	cdqe   
ffff80000080850d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:770
    hp->alloc=0;    //合并
ffff800000808511:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808515:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
    //向后合并
    chunk_header *p=hp->next;
ffff80000080851c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808520:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808524:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:773
    while(p!=NULL)
ffff800000808528:	eb 2e                	jmp    ffff800000808558 <sys_free+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:775
    {
        if(p->alloc==0)
ffff80000080852a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080852e:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808531:	85 c0                	test   eax,eax
ffff800000808533:	75 2c                	jne    ffff800000808561 <sys_free+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:777
        {
            hp->pgn+=p->pgn+1;//把区域合并
ffff800000808535:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808539:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080853b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080853f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808541:	83 c0 01             	add    eax,0x1
ffff800000808544:	01 c2                	add    edx,eax
ffff800000808546:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080854a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:780
        }else
            break;
        p=p->next;
ffff80000080854c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808550:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808554:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:773
    while(p!=NULL)
ffff800000808558:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080855d:	75 cb                	jne    ffff80000080852a <sys_free+0x46>
ffff80000080855f:	eb 01                	jmp    ffff800000808562 <sys_free+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:779
            break;
ffff800000808561:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:783
    }
    //向前合并
    p=hp->prev;
ffff800000808562:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808566:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080856a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:784
    while(p!=NULL)
ffff80000080856e:	eb 2e                	jmp    ffff80000080859e <sys_free+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:786
    {
        if(p->alloc==0)
ffff800000808570:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808574:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808577:	85 c0                	test   eax,eax
ffff800000808579:	75 2c                	jne    ffff8000008085a7 <sys_free+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:788
        {
            p->pgn+=hp->pgn+1;//把区域合并
ffff80000080857b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080857f:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808581:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808585:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808587:	83 c0 01             	add    eax,0x1
ffff80000080858a:	01 c2                	add    edx,eax
ffff80000080858c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808590:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:791
        }else
            break;
        p=p->prev;
ffff800000808592:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808596:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080859a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:784
    while(p!=NULL)
ffff80000080859e:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008085a3:	75 cb                	jne    ffff800000808570 <sys_free+0x8c>
ffff8000008085a5:	eb 01                	jmp    ffff8000008085a8 <sys_free+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:790
            break;
ffff8000008085a7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:794
    }
    //合并完成
    return 0;
ffff8000008085a8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:795
}
ffff8000008085ad:	5d                   	pop    rbp
ffff8000008085ae:	c3                   	ret    

ffff8000008085af <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:797

void switch_to(struct process *from, struct process *to) {
ffff8000008085af:	f3 0f 1e fa          	endbr64 
ffff8000008085b3:	55                   	push   rbp
ffff8000008085b4:	48 89 e5             	mov    rbp,rsp
ffff8000008085b7:	53                   	push   rbx
ffff8000008085b8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008085b8 <switch_to+0x9>
ffff8000008085bf:	49 bb 70 a3 01 00 00 	movabs r11,0x1a370
ffff8000008085c6:	00 00 00 
ffff8000008085c9:	4c 01 d8             	add    rax,r11
ffff8000008085cc:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffff8000008085d0:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    cur_proc=to-task;
ffff8000008085d4:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff8000008085db:	ff ff ff 
ffff8000008085de:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008085e2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008085e5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008085e9:	48 29 ca             	sub    rdx,rcx
ffff8000008085ec:	48 89 d1             	mov    rcx,rdx
ffff8000008085ef:	48 c1 f9 02          	sar    rcx,0x2
ffff8000008085f3:	48 ba 7d 38 0d a1 92 	movabs rdx,0xb3146e92a10d387d
ffff8000008085fa:	6e 14 b3 
ffff8000008085fd:	48 0f af d1          	imul   rdx,rcx
ffff800000808601:	89 d1                	mov    ecx,edx
ffff800000808603:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080860a:	ff ff ff 
ffff80000080860d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808611:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:799
    current=&task[cur_proc];
ffff800000808613:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080861a:	ff ff ff 
ffff80000080861d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808624:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080862b:	ff ff ff 
ffff80000080862e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808632:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000808634:	48 63 d2             	movsxd rdx,edx
ffff800000808637:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080863e:	48 01 ca             	add    rdx,rcx
ffff800000808641:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff800000808648:	ff ff ff 
ffff80000080864b:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080864f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:801
    //cr3需要物理地址,regs.cr3里面填的就是物理地址
    asm volatile("mov %0,%%rax\n"
ffff800000808652:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808656:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
ffff80000080865d:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:803
                 "mov %%rax,%%cr3\n":"=m"(to->regs.cr3));
    asm volatile("mov %%rsp,%0\r\n"
ffff800000808660:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
ffff800000808664:	4c 8b 55 f0          	mov    r10,QWORD PTR [rbp-0x10]
ffff800000808668:	4c 8b 5d f0          	mov    r11,QWORD PTR [rbp-0x10]
ffff80000080866c:	48 8b 5d f0          	mov    rbx,QWORD PTR [rbp-0x10]
ffff800000808670:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808674:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000808678:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080867c:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
ffff800000808680:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffff800000808684:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000808688:	49 89 a1 9c 02 00 00 	mov    QWORD PTR [r9+0x29c],rsp
ffff80000080868f:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # ffff8000008086ba <done>
ffff800000808696:	49 89 82 6c 02 00 00 	mov    QWORD PTR [r10+0x26c],rax
ffff80000080869d:	41 8c a3 dc 02 00 00 	mov    WORD PTR [r11+0x2dc],fs
ffff8000008086a4:	8c ab e4 02 00 00    	mov    WORD PTR [rbx+0x2e4],gs
ffff8000008086aa:	48 8b a1 9c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x29c]
ffff8000008086b1:	41 ff b0 6c 02 00 00 	push   QWORD PTR [r8+0x26c]
ffff8000008086b8:	eb 08                	jmp    ffff8000008086c2 <__switch_to>

ffff8000008086ba <done>:
ffff8000008086ba:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:817
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
ffff8000008086bb:	90                   	nop
ffff8000008086bc:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff8000008086c0:	c9                   	leave  
ffff8000008086c1:	c3                   	ret    

ffff8000008086c2 <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:818
void __switch_to(struct process *from, struct process *to) {
ffff8000008086c2:	f3 0f 1e fa          	endbr64 
ffff8000008086c6:	55                   	push   rbp
ffff8000008086c7:	48 89 e5             	mov    rbp,rsp
ffff8000008086ca:	41 57                	push   r15
ffff8000008086cc:	41 54                	push   r12
ffff8000008086ce:	53                   	push   rbx
ffff8000008086cf:	48 83 ec 18          	sub    rsp,0x18
ffff8000008086d3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008086d3 <__switch_to+0x11>
ffff8000008086da:	49 bb 55 a2 01 00 00 	movabs r11,0x1a255
ffff8000008086e1:	00 00 00 
ffff8000008086e4:	4c 01 d8             	add    rax,r11
ffff8000008086e7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008086eb:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:819
    set_tss(to->tss.rsp0,to->tss.rsp1,to->tss.rsp2,to->tss.ists[0],to->tss.ists[1],
ffff8000008086ef:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008086f3:	4c 8b 9a 4c 02 00 00 	mov    r11,QWORD PTR [rdx+0x24c]
ffff8000008086fa:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008086fe:	4c 8b 92 44 02 00 00 	mov    r10,QWORD PTR [rdx+0x244]
ffff800000808705:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000808709:	4c 8b 8a 3c 02 00 00 	mov    r9,QWORD PTR [rdx+0x23c]
ffff800000808710:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000808714:	4c 8b 82 34 02 00 00 	mov    r8,QWORD PTR [rdx+0x234]
ffff80000080871b:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080871f:	4c 8b a2 2c 02 00 00 	mov    r12,QWORD PTR [rdx+0x22c]
ffff800000808726:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080872a:	48 8b 9a 24 02 00 00 	mov    rbx,QWORD PTR [rdx+0x224]
ffff800000808731:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000808735:	48 8b 8a 1c 02 00 00 	mov    rcx,QWORD PTR [rdx+0x21c]
ffff80000080873c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000808740:	48 8b 92 0c 02 00 00 	mov    rdx,QWORD PTR [rdx+0x20c]
ffff800000808747:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080874b:	48 8b b6 04 02 00 00 	mov    rsi,QWORD PTR [rsi+0x204]
ffff800000808752:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffff800000808756:	48 8b bf fc 01 00 00 	mov    rdi,QWORD PTR [rdi+0x1fc]
ffff80000080875d:	41 53                	push   r11
ffff80000080875f:	41 52                	push   r10
ffff800000808761:	41 51                	push   r9
ffff800000808763:	41 50                	push   r8
ffff800000808765:	4d 89 e1             	mov    r9,r12
ffff800000808768:	49 89 d8             	mov    r8,rbx
ffff80000080876b:	49 89 c7             	mov    r15,rax
ffff80000080876e:	49 ba 8f 5e fe ff ff 	movabs r10,0xfffffffffffe5e8f
ffff800000808775:	ff ff ff 
ffff800000808778:	49 01 c2             	add    r10,rax
ffff80000080877b:	41 ff d2             	call   r10
ffff80000080877e:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:821
            to->tss.ists[2],to->tss.ists[3],to->tss.ists[4],to->tss.ists[5],to->tss.ists[6]);
    asm volatile("mov %%fs,%0\r\n"
ffff800000808782:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808786:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080878a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080878e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000808792:	8c a0 dc 02 00 00    	mov    WORD PTR [rax+0x2dc],fs
ffff800000808798:	8c ae e4 02 00 00    	mov    WORD PTR [rsi+0x2e4],gs
ffff80000080879e:	8e a2 dc 02 00 00    	mov    fs,WORD PTR [rdx+0x2dc]
ffff8000008087a4:	8e a9 e4 02 00 00    	mov    gs,WORD PTR [rcx+0x2e4]
ffff8000008087aa:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:827
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
ffff8000008087ab:	90                   	nop
ffff8000008087ac:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff8000008087b0:	5b                   	pop    rbx
ffff8000008087b1:	41 5c                	pop    r12
ffff8000008087b3:	41 5f                	pop    r15
ffff8000008087b5:	5d                   	pop    rbp
ffff8000008087b6:	c3                   	ret    

ffff8000008087b7 <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:829

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
ffff8000008087b7:	f3 0f 1e fa          	endbr64 
ffff8000008087bb:	55                   	push   rbp
ffff8000008087bc:	48 89 e5             	mov    rbp,rsp
ffff8000008087bf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008087bf <set_tss+0x8>
ffff8000008087c6:	49 bb 69 a1 01 00 00 	movabs r11,0x1a169
ffff8000008087cd:	00 00 00 
ffff8000008087d0:	4c 01 d8             	add    rax,r11
ffff8000008087d3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008087d7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008087db:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008087df:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff8000008087e3:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffff8000008087e7:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:830
    tss->rsp0=rsp0;
ffff8000008087eb:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff8000008087f2:	ff ff ff 
ffff8000008087f5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008087f9:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008087fc:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000808800:	48 89 4a 04          	mov    QWORD PTR [rdx+0x4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:831
    tss->rsp1=rsp1;
ffff800000808804:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080880b:	ff ff ff 
ffff80000080880e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808812:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808815:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000808819:	48 89 4a 0c          	mov    QWORD PTR [rdx+0xc],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:832
    tss->rsp2=rsp2;
ffff80000080881d:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff800000808824:	ff ff ff 
ffff800000808827:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080882b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080882e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000808832:	48 89 4a 14          	mov    QWORD PTR [rdx+0x14],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:833
    tss->ists[0]=ist0;
ffff800000808836:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080883d:	ff ff ff 
ffff800000808840:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808844:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808847:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080884b:	48 89 4a 24          	mov    QWORD PTR [rdx+0x24],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:834
    tss->ists[1]=ist1;
ffff80000080884f:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff800000808856:	ff ff ff 
ffff800000808859:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080885d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808860:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000808864:	48 89 4a 2c          	mov    QWORD PTR [rdx+0x2c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:835
    tss->ists[2]=ist2;
ffff800000808868:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080886f:	ff ff ff 
ffff800000808872:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808876:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808879:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080887d:	48 89 4a 34          	mov    QWORD PTR [rdx+0x34],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:836
    tss->ists[3]=ist3;
ffff800000808881:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff800000808888:	ff ff ff 
ffff80000080888b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080888f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808892:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff800000808896:	48 89 4a 3c          	mov    QWORD PTR [rdx+0x3c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:837
    tss->ists[4]=ist4;
ffff80000080889a:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff8000008088a1:	ff ff ff 
ffff8000008088a4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008088a8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008088ab:	48 8b 4d 18          	mov    rcx,QWORD PTR [rbp+0x18]
ffff8000008088af:	48 89 4a 44          	mov    QWORD PTR [rdx+0x44],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:838
    tss->ists[5]=ist5;
ffff8000008088b3:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff8000008088ba:	ff ff ff 
ffff8000008088bd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008088c1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008088c4:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff8000008088c8:	48 89 4a 4c          	mov    QWORD PTR [rdx+0x4c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:839
    tss->ists[6]=ist6;
ffff8000008088cc:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff8000008088d3:	ff ff ff 
ffff8000008088d6:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008088da:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008088dd:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff8000008088e1:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:840
}
ffff8000008088e5:	90                   	nop
ffff8000008088e6:	5d                   	pop    rbp
ffff8000008088e7:	c3                   	ret    

ffff8000008088e8 <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:842

int fork_child_ret(){
ffff8000008088e8:	f3 0f 1e fa          	endbr64 
ffff8000008088ec:	55                   	push   rbp
ffff8000008088ed:	48 89 e5             	mov    rbp,rsp
ffff8000008088f0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008088f0 <fork_child_ret+0x8>
ffff8000008088f7:	49 bb 38 a0 01 00 00 	movabs r11,0x1a038
ffff8000008088fe:	00 00 00 
ffff800000808901:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:843
    return 0;
ffff800000808904:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:845

}
ffff800000808909:	5d                   	pop    rbp
ffff80000080890a:	c3                   	ret    

ffff80000080890b <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847

int sys_fork(void){
ffff80000080890b:	f3 0f 1e fa          	endbr64 
ffff80000080890f:	55                   	push   rbp
ffff800000808910:	48 89 e5             	mov    rbp,rsp
ffff800000808913:	41 57                	push   r15
ffff800000808915:	53                   	push   rbx
ffff800000808916:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff80000080891d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080891d <sys_fork+0x12>
ffff800000808924:	49 bb 0b a0 01 00 00 	movabs r11,0x1a00b
ffff80000080892b:	00 00 00 
ffff80000080892e:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:848
    int pid=req_proc();
ffff800000808931:	49 89 df             	mov    r15,rbx
ffff800000808934:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808939:	48 ba 52 46 fe ff ff 	movabs rdx,0xfffffffffffe4652
ffff800000808940:	ff ff ff 
ffff800000808943:	48 01 da             	add    rdx,rbx
ffff800000808946:	ff d2                	call   rdx
ffff800000808948:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849
    int pids=task[pid].pid;
ffff80000080894b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808952:	ff ff ff 
ffff800000808955:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808959:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080895c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080895f:	48 98                	cdqe   
ffff800000808961:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808968:	48 01 d0             	add    rax,rdx
ffff80000080896b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080896d:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850
    if(pid==-1)return -1;
ffff800000808970:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000808974:	75 0a                	jne    ffff800000808980 <sys_fork+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850 (discriminator 1)
ffff800000808976:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080897b:	e9 d4 09 00 00       	jmp    ffff800000809354 <sys_fork+0xa49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852
    //首先完全复制
    task[pid]=*current;
ffff800000808980:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808987:	ff ff ff 
ffff80000080898a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080898e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808991:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808998:	ff ff ff 
ffff80000080899b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080899f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008089a2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008089a5:	48 98                	cdqe   
ffff8000008089a7:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008089ae:	48 01 d0             	add    rax,rdx
ffff8000008089b1:	48 89 c2             	mov    rdx,rax
ffff8000008089b4:	48 89 c8             	mov    rax,rcx
ffff8000008089b7:	b9 54 03 00 00       	mov    ecx,0x354
ffff8000008089bc:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008089bf:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff8000008089c2:	89 ce                	mov    esi,ecx
ffff8000008089c4:	48 01 d6             	add    rsi,rdx
ffff8000008089c7:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
ffff8000008089cb:	89 ce                	mov    esi,ecx
ffff8000008089cd:	48 01 c6             	add    rsi,rax
ffff8000008089d0:	48 83 c6 08          	add    rsi,0x8
ffff8000008089d4:	48 8b 76 f0          	mov    rsi,QWORD PTR [rsi-0x10]
ffff8000008089d8:	48 89 77 f0          	mov    QWORD PTR [rdi-0x10],rsi
ffff8000008089dc:	48 8d 7a 08          	lea    rdi,[rdx+0x8]
ffff8000008089e0:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
ffff8000008089e4:	48 29 fa             	sub    rdx,rdi
ffff8000008089e7:	48 29 d0             	sub    rax,rdx
ffff8000008089ea:	01 d1                	add    ecx,edx
ffff8000008089ec:	83 e1 f8             	and    ecx,0xfffffff8
ffff8000008089ef:	c1 e9 03             	shr    ecx,0x3
ffff8000008089f2:	89 ca                	mov    edx,ecx
ffff8000008089f4:	89 d2                	mov    edx,edx
ffff8000008089f6:	48 89 c6             	mov    rsi,rax
ffff8000008089f9:	48 89 d1             	mov    rcx,rdx
ffff8000008089fc:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:853
    task[pid].pid=pids;
ffff8000008089ff:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808a06:	ff ff ff 
ffff800000808a09:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808a0d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808a10:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808a13:	48 98                	cdqe   
ffff800000808a15:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808a1c:	48 01 c2             	add    rdx,rax
ffff800000808a1f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000808a22:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:860

//    asm volatile("mov %%r10,%0"::"m"(r->rip));
    // r->rip=current->regs.rip;

    // memcpy(&task[pid].tss,tss, sizeof(TSS));
    task[pid].stat=TASK_READY;
ffff800000808a24:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808a2b:	ff ff ff 
ffff800000808a2e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808a32:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808a35:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808a38:	48 98                	cdqe   
ffff800000808a3a:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808a41:	48 01 d0             	add    rax,rdx
ffff800000808a44:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:861
    task[pid].parent_pid=current->pid;
ffff800000808a4b:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808a52:	ff ff ff 
ffff800000808a55:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808a59:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808a5c:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000808a63:	ff ff ff 
ffff800000808a66:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808a6a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808a6d:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000808a70:	48 63 d2             	movsxd rdx,edx
ffff800000808a73:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000808a7a:	48 01 ca             	add    rdx,rcx
ffff800000808a7d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808a7f:	89 82 bc 00 00 00    	mov    DWORD PTR [rdx+0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
ffff800000808a85:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808a8c:	ff ff ff 
ffff800000808a8f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808a93:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808a96:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808a99:	48 98                	cdqe   
ffff800000808a9b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808aa2:	48 01 d0             	add    rax,rdx
ffff800000808aa5:	48 05 34 03 00 00    	add    rax,0x334
ffff800000808aab:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000808aaf:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808ab3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000808aba:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808abe:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000808ac5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000808ac6:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:864
    task[pid].child_procs=NULL;
ffff800000808ac7:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808ace:	ff ff ff 
ffff800000808ad1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808ad5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808ad8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808adb:	48 98                	cdqe   
ffff800000808add:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808ae4:	48 01 d0             	add    rax,rdx
ffff800000808ae7:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000808aee:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865
    task[pid].node.data=&task[pid];
ffff800000808af2:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808af9:	ff ff ff 
ffff800000808afc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b00:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808b03:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808b06:	48 98                	cdqe   
ffff800000808b08:	48 69 d0 54 03 00 00 	imul   rdx,rax,0x354
ffff800000808b0f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808b16:	ff ff ff 
ffff800000808b19:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b1d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000808b20:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808b23:	48 98                	cdqe   
ffff800000808b25:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808b2c:	48 01 f0             	add    rax,rsi
ffff800000808b2f:	48 01 ca             	add    rdx,rcx
ffff800000808b32:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:866
    if(!current->child_procs)
ffff800000808b39:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808b40:	ff ff ff 
ffff800000808b43:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b47:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808b4a:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000808b51:	48 85 c0             	test   rax,rax
ffff800000808b54:	75 44                	jne    ffff800000808b9a <sys_fork+0x28f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:867
        current->child_procs=&task[pid].node;
ffff800000808b56:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808b5d:	ff ff ff 
ffff800000808b60:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b64:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808b67:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808b6a:	48 98                	cdqe   
ffff800000808b6c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808b73:	48 01 c2             	add    rdx,rax
ffff800000808b76:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808b7d:	ff ff ff 
ffff800000808b80:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b84:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808b87:	48 81 c2 34 03 00 00 	add    rdx,0x334
ffff800000808b8e:	48 89 90 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],rdx
ffff800000808b95:	e9 85 01 00 00       	jmp    ffff800000808d1f <sys_fork+0x414>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:869
    else
        list_add(current->child_procs,&task[pid].node);
ffff800000808b9a:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808ba1:	ff ff ff 
ffff800000808ba4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808ba8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808bab:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808bae:	48 98                	cdqe   
ffff800000808bb0:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808bb7:	48 01 d0             	add    rax,rdx
ffff800000808bba:	48 8d 90 34 03 00 00 	lea    rdx,[rax+0x334]
ffff800000808bc1:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808bc8:	ff ff ff 
ffff800000808bcb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808bcf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808bd2:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000808bd9:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff800000808bdd:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff800000808be1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808be5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808be9:	48 85 c0             	test   rax,rax
ffff800000808bec:	75 58                	jne    ffff800000808c46 <sys_fork+0x33b>
ffff800000808bee:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808bf2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff800000808bf6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000808bfa:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000808bfe:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000808c02:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000808c06:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808c0a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000808c0e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808c12:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff800000808c16:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000808c19:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808c1d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808c21:	48 85 c0             	test   rax,rax
ffff800000808c24:	74 0f                	je     ffff800000808c35 <sys_fork+0x32a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000808c26:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808c2a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808c2e:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000808c32:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000808c35:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000808c39:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000808c3d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000808c41:	e9 d9 00 00 00       	jmp    ffff800000808d1f <sys_fork+0x414>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff800000808c46:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808c4a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000808c51:	eb 2e                	jmp    ffff800000808c81 <sys_fork+0x376>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff800000808c53:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808c5a:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000808c5e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000808c62:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808c66:	48 39 c2             	cmp    rdx,rax
ffff800000808c69:	0f 84 af 00 00 00    	je     ffff800000808d1e <sys_fork+0x413>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000808c6f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808c76:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808c7a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff800000808c81:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808c88:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808c8c:	48 85 c0             	test   rax,rax
ffff800000808c8f:	74 14                	je     ffff800000808ca5 <sys_fork+0x39a>
ffff800000808c91:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808c98:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808c9c:	48 39 85 78 ff ff ff 	cmp    QWORD PTR [rbp-0x88],rax
ffff800000808ca3:	75 ae                	jne    ffff800000808c53 <sys_fork+0x348>
ffff800000808ca5:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808cac:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffff800000808cb3:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000808cb7:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000808cbe:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808cc5:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000808cc9:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808cd0:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000808cd4:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808cdb:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff800000808ce2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000808ce5:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808cec:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808cf0:	48 85 c0             	test   rax,rax
ffff800000808cf3:	74 15                	je     ffff800000808d0a <sys_fork+0x3ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000808cf5:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808cfc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808d00:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff800000808d07:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000808d0a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808d11:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff800000808d18:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000808d1c:	eb 01                	jmp    ffff800000808d1f <sys_fork+0x414>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff800000808d1e:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:871

    task[pid].utime=0;
ffff800000808d1f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808d26:	ff ff ff 
ffff800000808d29:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808d2d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808d30:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808d33:	48 98                	cdqe   
ffff800000808d35:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808d3c:	48 01 d0             	add    rax,rdx
ffff800000808d3f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:874

    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
ffff800000808d46:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808d4d:	ff ff ff 
ffff800000808d50:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808d54:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808d57:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808d5a:	48 98                	cdqe   
ffff800000808d5c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808d63:	48 01 c2             	add    rdx,rax
ffff800000808d66:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808d6d:	ff ff ff 
ffff800000808d70:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808d74:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808d77:	48 89 d6             	mov    rsi,rdx
ffff800000808d7a:	48 89 c7             	mov    rdi,rax
ffff800000808d7d:	49 89 df             	mov    r15,rbx
ffff800000808d80:	48 b8 62 6d fe ff ff 	movabs rax,0xfffffffffffe6d62
ffff800000808d87:	ff ff ff 
ffff800000808d8a:	48 01 d8             	add    rax,rbx
ffff800000808d8d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:879
    
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000808d8f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808d96:	ff ff ff 
ffff800000808d99:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808d9d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808da0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808da3:	48 98                	cdqe   
ffff800000808da5:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808dac:	48 01 d0             	add    rax,rdx
ffff800000808daf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000808db3:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000808db9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:880
    addr_t tmpla=KNL_BASE+0x80000000;
ffff800000808dbd:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff800000808dc4:	80 ff ff 
ffff800000808dc7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000808dcb:	e9 d1 00 00 00       	jmp    ffff800000808ea1 <sys_fork+0x596>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:882 (discriminator 2)
        addr_t new_stkpg= pmalloc();
ffff800000808dd0:	49 89 df             	mov    r15,rbx
ffff800000808dd3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808dd8:	48 ba 2c 04 fe ff ff 	movabs rdx,0xfffffffffffe042c
ffff800000808ddf:	ff ff ff 
ffff800000808de2:	48 01 da             	add    rdx,rbx
ffff800000808de5:	ff d2                	call   rdx
ffff800000808de7:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:883 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000808deb:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808df2:	ff ff ff 
ffff800000808df5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808df9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808dfc:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000808e03:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000808e07:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808e0b:	48 89 d1             	mov    rcx,rdx
ffff800000808e0e:	ba 03 00 00 00       	mov    edx,0x3
ffff800000808e13:	48 89 c7             	mov    rdi,rax
ffff800000808e16:	49 89 df             	mov    r15,rbx
ffff800000808e19:	48 b8 9a f2 fd ff ff 	movabs rax,0xfffffffffffdf29a
ffff800000808e20:	ff ff ff 
ffff800000808e23:	48 01 d8             	add    rax,rbx
ffff800000808e26:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:884 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000808e28:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000808e2c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808e30:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808e35:	48 89 ce             	mov    rsi,rcx
ffff800000808e38:	48 89 c7             	mov    rdi,rax
ffff800000808e3b:	49 89 df             	mov    r15,rbx
ffff800000808e3e:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000808e45:	ff ff ff 
ffff800000808e48:	48 01 d8             	add    rax,rbx
ffff800000808e4b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:887 (discriminator 2)
        
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000808e4d:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808e54:	ff ff ff 
ffff800000808e57:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808e5b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808e5e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808e61:	48 98                	cdqe   
ffff800000808e63:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808e6a:	48 01 d0             	add    rax,rdx
ffff800000808e6d:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000808e74:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000808e78:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808e7c:	48 89 d1             	mov    rcx,rdx
ffff800000808e7f:	ba 07 00 00 00       	mov    edx,0x7
ffff800000808e84:	48 89 c7             	mov    rdi,rax
ffff800000808e87:	49 89 df             	mov    r15,rbx
ffff800000808e8a:	48 b8 9a f2 fd ff ff 	movabs rax,0xfffffffffffdf29a
ffff800000808e91:	ff ff ff 
ffff800000808e94:	48 01 d8             	add    rax,rbx
ffff800000808e97:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000808e99:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
ffff800000808ea0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881 (discriminator 1)
ffff800000808ea1:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808ea8:	ff ff ff 
ffff800000808eab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808eaf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808eb2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808eb5:	48 98                	cdqe   
ffff800000808eb7:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808ebe:	48 01 d0             	add    rax,rdx
ffff800000808ec1:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000808ec5:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff800000808ec9:	0f 83 01 ff ff ff    	jae    ffff800000808dd0 <sys_fork+0x4c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889
    }
    if(task[pid].mem_struct.stack_top<=task[pid].mem_struct.stack_bottom){
ffff800000808ecf:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808ed6:	ff ff ff 
ffff800000808ed9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808edd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808ee0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808ee3:	48 98                	cdqe   
ffff800000808ee5:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808eec:	48 01 d0             	add    rax,rdx
ffff800000808eef:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff800000808ef3:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808efa:	ff ff ff 
ffff800000808efd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f01:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808f04:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808f07:	48 98                	cdqe   
ffff800000808f09:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808f10:	48 01 c8             	add    rax,rcx
ffff800000808f13:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000808f17:	48 39 c2             	cmp    rdx,rax
ffff800000808f1a:	0f 87 bd 00 00 00    	ja     ffff800000808fdd <sys_fork+0x6d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:892
        //父进程没有栈空间（一般是不可能的，这个几乎就是为了内核进程fork而写）
        //开辟一页空栈。
        addr_t new_stkpg= (addr_t) pmalloc();
ffff800000808f20:	49 89 df             	mov    r15,rbx
ffff800000808f23:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808f28:	48 ba 2c 04 fe ff ff 	movabs rdx,0xfffffffffffe042c
ffff800000808f2f:	ff ff ff 
ffff800000808f32:	48 01 da             	add    rdx,rbx
ffff800000808f35:	ff d2                	call   rdx
ffff800000808f37:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:893
        stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000808f3b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808f42:	ff ff ff 
ffff800000808f45:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f49:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808f4c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808f4f:	48 98                	cdqe   
ffff800000808f51:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808f58:	48 01 d0             	add    rax,rdx
ffff800000808f5b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000808f5f:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000808f65:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:895
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000808f69:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808f70:	ff ff ff 
ffff800000808f73:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f77:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808f7a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808f7d:	48 98                	cdqe   
ffff800000808f7f:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808f86:	48 01 d0             	add    rax,rdx
ffff800000808f89:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000808f90:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000808f94:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000808f98:	48 89 d1             	mov    rcx,rdx
ffff800000808f9b:	ba 07 00 00 00       	mov    edx,0x7
ffff800000808fa0:	48 89 c7             	mov    rdi,rax
ffff800000808fa3:	49 89 df             	mov    r15,rbx
ffff800000808fa6:	48 b8 9a f2 fd ff ff 	movabs rax,0xfffffffffffdf29a
ffff800000808fad:	ff ff ff 
ffff800000808fb0:	48 01 d8             	add    rax,rbx
ffff800000808fb3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897
        //给新进程分配一页栈
        task[pid].mem_struct.stack_bottom=stk;
ffff800000808fb5:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808fbc:	ff ff ff 
ffff800000808fbf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808fc3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808fc6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808fc9:	48 98                	cdqe   
ffff800000808fcb:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808fd2:	48 01 c2             	add    rdx,rax
ffff800000808fd5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808fd9:	48 89 42 38          	mov    QWORD PTR [rdx+0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:903
        //给这页新的栈填上恢复上下文需要的内容
        
    }
    //中断使用的栈空间
    //ist一页就够
    addr_t new_stkpg= kmalloc();
ffff800000808fdd:	49 89 df             	mov    r15,rbx
ffff800000808fe0:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808fe5:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000808fec:	ff ff ff 
ffff800000808fef:	48 01 da             	add    rdx,rbx
ffff800000808ff2:	ff d2                	call   rdx
ffff800000808ff4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:904
    memcpy(new_stkpg,current->tss.ists[0]-PAGE_4K_SIZE,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000808ff8:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000808fff:	ff ff ff 
ffff800000809002:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809006:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809009:	48 8b 80 1c 02 00 00 	mov    rax,QWORD PTR [rax+0x21c]
ffff800000809010:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000809016:	48 89 c1             	mov    rcx,rax
ffff800000809019:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080901d:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809022:	48 89 ce             	mov    rsi,rcx
ffff800000809025:	48 89 c7             	mov    rdi,rax
ffff800000809028:	49 89 df             	mov    r15,rbx
ffff80000080902b:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000809032:	ff ff ff 
ffff800000809035:	48 01 d8             	add    rax,rbx
ffff800000809038:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:905
    stack_store_regs* ctx_dup=new_stkpg+PAGE_4K_SIZE-sizeof(stack_store_regs);//拷贝的上下文
ffff80000080903a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080903e:	48 05 58 0f 00 00    	add    rax,0xf58
ffff800000809044:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:906
    ctx_dup->rax=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
ffff800000809048:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080904c:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000809053:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:907
    task[pid].regs.rip=clock_ret;
ffff800000809054:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080905b:	ff ff ff 
ffff80000080905e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809062:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809065:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809068:	48 98                	cdqe   
ffff80000080906a:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809071:	48 01 d0             	add    rax,rdx
ffff800000809074:	48 ba b0 ff ff ff ff 	movabs rdx,0xffffffffffffffb0
ffff80000080907b:	ff ff ff 
ffff80000080907e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000809082:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:908
    task[pid].regs.rsp=ctx_dup;
ffff800000809089:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809090:	ff ff ff 
ffff800000809093:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809097:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080909a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080909d:	48 98                	cdqe   
ffff80000080909f:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008090a6:	48 01 c2             	add    rdx,rax
ffff8000008090a9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008090ad:	48 89 82 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:909
    task[pid].tss.ists[0]=new_stkpg;
ffff8000008090b4:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008090bb:	ff ff ff 
ffff8000008090be:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008090c2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008090c5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008090c8:	48 98                	cdqe   
ffff8000008090ca:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008090d1:	48 01 c2             	add    rdx,rax
ffff8000008090d4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008090d8:	48 89 82 1c 02 00 00 	mov    QWORD PTR [rdx+0x21c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:910
    task[pid].tss.ists[1]=new_stkpg;
ffff8000008090df:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008090e6:	ff ff ff 
ffff8000008090e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008090ed:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008090f0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008090f3:	48 98                	cdqe   
ffff8000008090f5:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008090fc:	48 01 c2             	add    rdx,rax
ffff8000008090ff:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809103:	48 89 82 24 02 00 00 	mov    QWORD PTR [rdx+0x224],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:911
    task[pid].tss.ists[2]=new_stkpg;
ffff80000080910a:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809111:	ff ff ff 
ffff800000809114:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809118:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080911b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080911e:	48 98                	cdqe   
ffff800000809120:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809127:	48 01 c2             	add    rdx,rax
ffff80000080912a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080912e:	48 89 82 2c 02 00 00 	mov    QWORD PTR [rdx+0x22c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:912
    task[pid].tss.ists[3]=new_stkpg;
ffff800000809135:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080913c:	ff ff ff 
ffff80000080913f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809143:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809146:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809149:	48 98                	cdqe   
ffff80000080914b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809152:	48 01 c2             	add    rdx,rax
ffff800000809155:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809159:	48 89 82 34 02 00 00 	mov    QWORD PTR [rdx+0x234],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:913
    task[pid].tss.ists[4]=new_stkpg;
ffff800000809160:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809167:	ff ff ff 
ffff80000080916a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080916e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809171:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809174:	48 98                	cdqe   
ffff800000809176:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080917d:	48 01 c2             	add    rdx,rax
ffff800000809180:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809184:	48 89 82 3c 02 00 00 	mov    QWORD PTR [rdx+0x23c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:914
    task[pid].tss.ists[5]=new_stkpg;
ffff80000080918b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809192:	ff ff ff 
ffff800000809195:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809199:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080919c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080919f:	48 98                	cdqe   
ffff8000008091a1:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008091a8:	48 01 c2             	add    rdx,rax
ffff8000008091ab:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008091af:	48 89 82 44 02 00 00 	mov    QWORD PTR [rdx+0x244],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:915
    task[pid].tss.ists[6]=new_stkpg;
ffff8000008091b6:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008091bd:	ff ff ff 
ffff8000008091c0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008091c4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008091c7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008091ca:	48 98                	cdqe   
ffff8000008091cc:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008091d3:	48 01 c2             	add    rdx,rax
ffff8000008091d6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008091da:	48 89 82 4c 02 00 00 	mov    QWORD PTR [rdx+0x24c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918

    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
ffff8000008091e1:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008091e8:	ff ff ff 
ffff8000008091eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008091ef:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008091f2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008091f5:	48 98                	cdqe   
ffff8000008091f7:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008091fe:	48 01 d0             	add    rax,rdx
ffff800000809201:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000809205:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff80000080920b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff80000080920f:	e9 d1 00 00 00       	jmp    ffff8000008092e5 <sys_fork+0x9da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920 (discriminator 2)
        addr_t new_hppg= pmalloc();
ffff800000809214:	49 89 df             	mov    r15,rbx
ffff800000809217:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080921c:	48 ba 2c 04 fe ff ff 	movabs rdx,0xfffffffffffe042c
ffff800000809223:	ff ff ff 
ffff800000809226:	48 01 da             	add    rdx,rbx
ffff800000809229:	ff d2                	call   rdx
ffff80000080922b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:921 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff80000080922f:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000809236:	ff ff ff 
ffff800000809239:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080923d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809240:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000809247:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080924b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080924f:	48 89 d1             	mov    rcx,rdx
ffff800000809252:	ba 03 00 00 00       	mov    edx,0x3
ffff800000809257:	48 89 c7             	mov    rdi,rax
ffff80000080925a:	49 89 df             	mov    r15,rbx
ffff80000080925d:	48 b8 9a f2 fd ff ff 	movabs rax,0xfffffffffffdf29a
ffff800000809264:	ff ff ff 
ffff800000809267:	48 01 d8             	add    rax,rbx
ffff80000080926a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff80000080926c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff800000809270:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809274:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809279:	48 89 ce             	mov    rsi,rcx
ffff80000080927c:	48 89 c7             	mov    rdi,rax
ffff80000080927f:	49 89 df             	mov    r15,rbx
ffff800000809282:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000809289:	ff ff ff 
ffff80000080928c:	48 01 d8             	add    rax,rbx
ffff80000080928f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:924 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000809291:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809298:	ff ff ff 
ffff80000080929b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080929f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008092a2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008092a5:	48 98                	cdqe   
ffff8000008092a7:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008092ae:	48 01 d0             	add    rax,rdx
ffff8000008092b1:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff8000008092b8:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff8000008092bc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008092c0:	48 89 d1             	mov    rcx,rdx
ffff8000008092c3:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008092c8:	48 89 c7             	mov    rdi,rax
ffff8000008092cb:	49 89 df             	mov    r15,rbx
ffff8000008092ce:	48 b8 9a f2 fd ff ff 	movabs rax,0xfffffffffffdf29a
ffff8000008092d5:	ff ff ff 
ffff8000008092d8:	48 01 d8             	add    rax,rbx
ffff8000008092db:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff8000008092dd:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
ffff8000008092e4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919 (discriminator 1)
ffff8000008092e5:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008092ec:	ff ff ff 
ffff8000008092ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008092f3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008092f6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008092f9:	48 98                	cdqe   
ffff8000008092fb:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809302:	48 01 d0             	add    rax,rdx
ffff800000809305:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000809309:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080930d:	0f 83 01 ff ff ff    	jae    ffff800000809214 <sys_fork+0x909>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:926
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
ffff800000809313:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080931a:	ff ff ff 
ffff80000080931d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809321:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809324:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080932b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080932f:	48 89 d1             	mov    rcx,rdx
ffff800000809332:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809337:	48 89 c6             	mov    rsi,rax
ffff80000080933a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080933f:	49 89 df             	mov    r15,rbx
ffff800000809342:	48 b8 9a f2 fd ff ff 	movabs rax,0xfffffffffffdf29a
ffff800000809349:	ff ff ff 
ffff80000080934c:	48 01 d8             	add    rax,rbx
ffff80000080934f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:932
    


    //如果父进程没有堆，不开辟。留给load_xx函数。
    //父进程运行到这里
    return pid;
ffff800000809351:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:933
}
ffff800000809354:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff80000080935b:	5b                   	pop    rbx
ffff80000080935c:	41 5f                	pop    r15
ffff80000080935e:	5d                   	pop    rbp
ffff80000080935f:	c3                   	ret    

ffff800000809360 <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:935
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
ffff800000809360:	f3 0f 1e fa          	endbr64 
ffff800000809364:	55                   	push   rbp
ffff800000809365:	48 89 e5             	mov    rbp,rsp
ffff800000809368:	41 57                	push   r15
ffff80000080936a:	53                   	push   rbx
ffff80000080936b:	48 83 ec 50          	sub    rsp,0x50
ffff80000080936f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080936f <release_mmap+0xf>
ffff800000809376:	49 bb b9 95 01 00 00 	movabs r11,0x195b9
ffff80000080937d:	00 00 00 
ffff800000809380:	4c 01 db             	add    rbx,r11
ffff800000809383:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936
    page_item * pml4p=p->pml4;
ffff800000809387:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080938b:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000809392:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:938
    //复制pdpt
    page_item *pml4e= pml4p;
ffff800000809396:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080939a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff80000080939e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008093a5:	e9 c8 02 00 00       	jmp    ffff800000809672 <release_mmap+0x312>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:941
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff8000008093aa:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008093ad:	48 98                	cdqe   
ffff8000008093af:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008093b6:	00 
ffff8000008093b7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008093bb:	48 01 d0             	add    rax,rdx
ffff8000008093be:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008093c1:	83 e0 01             	and    eax,0x1
ffff8000008093c4:	48 85 c0             	test   rax,rax
ffff8000008093c7:	0f 84 a1 02 00 00    	je     ffff80000080966e <release_mmap+0x30e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK;
ffff8000008093cd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008093d0:	48 98                	cdqe   
ffff8000008093d2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008093d9:	00 
ffff8000008093da:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008093de:	48 01 d0             	add    rax,rdx
ffff8000008093e1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008093e4:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008093ea:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:943
            for(int j=0;j<512;j++)
ffff8000008093ee:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008093f5:	e9 35 02 00 00       	jmp    ffff80000080962f <release_mmap+0x2cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:945
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff8000008093fa:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008093fd:	48 98                	cdqe   
ffff8000008093ff:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809406:	00 
ffff800000809407:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080940b:	48 01 d0             	add    rax,rdx
ffff80000080940e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809411:	83 e0 01             	and    eax,0x1
ffff800000809414:	48 85 c0             	test   rax,rax
ffff800000809417:	0f 84 0e 02 00 00    	je     ffff80000080962b <release_mmap+0x2cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:945 (discriminator 1)
ffff80000080941d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809420:	48 98                	cdqe   
ffff800000809422:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809429:	00 
ffff80000080942a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080942e:	48 01 d0             	add    rax,rdx
ffff800000809431:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809434:	25 80 00 00 00       	and    eax,0x80
ffff800000809439:	48 85 c0             	test   rax,rax
ffff80000080943c:	0f 85 e9 01 00 00    	jne    ffff80000080962b <release_mmap+0x2cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:946
                    page_item *pde=pdpte[j]&PAGE_4K_MASK;
ffff800000809442:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809445:	48 98                	cdqe   
ffff800000809447:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080944e:	00 
ffff80000080944f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809453:	48 01 d0             	add    rax,rdx
ffff800000809456:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809459:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080945f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:947
                    for(int k=0;k<512;k++)
ffff800000809463:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080946a:	e9 7d 01 00 00       	jmp    ffff8000008095ec <release_mmap+0x28c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:949
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff80000080946f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809472:	48 98                	cdqe   
ffff800000809474:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080947b:	00 
ffff80000080947c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809480:	48 01 d0             	add    rax,rdx
ffff800000809483:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809486:	83 e0 01             	and    eax,0x1
ffff800000809489:	48 85 c0             	test   rax,rax
ffff80000080948c:	0f 84 e1 00 00 00    	je     ffff800000809573 <release_mmap+0x213>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:949 (discriminator 1)
ffff800000809492:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809495:	48 98                	cdqe   
ffff800000809497:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080949e:	00 
ffff80000080949f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008094a3:	48 01 d0             	add    rax,rdx
ffff8000008094a6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008094a9:	25 80 00 00 00       	and    eax,0x80
ffff8000008094ae:	48 85 c0             	test   rax,rax
ffff8000008094b1:	0f 85 bc 00 00 00    	jne    ffff800000809573 <release_mmap+0x213>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:950
                            page_item *pte=pde[k]&PAGE_4K_MASK;
ffff8000008094b7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008094ba:	48 98                	cdqe   
ffff8000008094bc:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008094c3:	00 
ffff8000008094c4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008094c8:	48 01 d0             	add    rax,rdx
ffff8000008094cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008094ce:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008094d4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951
                            for(int l=0;l<512;l++){
ffff8000008094d8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008094df:	eb 55                	jmp    ffff800000809536 <release_mmap+0x1d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952
                                if(pte[l]&PAGE_PRESENT){
ffff8000008094e1:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008094e4:	48 98                	cdqe   
ffff8000008094e6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008094ed:	00 
ffff8000008094ee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008094f2:	48 01 d0             	add    rax,rdx
ffff8000008094f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008094f8:	83 e0 01             	and    eax,0x1
ffff8000008094fb:	48 85 c0             	test   rax,rax
ffff8000008094fe:	74 32                	je     ffff800000809532 <release_mmap+0x1d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955
                                    //释放申请的物理内存
                                    //TODO:这里有一个问题：目前fork时候堆栈空间使用的是vmalloc内存，这样的话free_page是释放不了的。
                                    free_page(pte[l]&PAGE_4K_MASK);
ffff800000809500:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809503:	48 98                	cdqe   
ffff800000809505:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080950c:	00 
ffff80000080950d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809511:	48 01 d0             	add    rax,rdx
ffff800000809514:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809517:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080951d:	48 89 c7             	mov    rdi,rax
ffff800000809520:	49 89 df             	mov    r15,rbx
ffff800000809523:	48 b8 bc 04 fe ff ff 	movabs rax,0xfffffffffffe04bc
ffff80000080952a:	ff ff ff 
ffff80000080952d:	48 01 d8             	add    rax,rbx
ffff800000809530:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951 (discriminator 2)
                            for(int l=0;l<512;l++){
ffff800000809532:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951 (discriminator 1)
ffff800000809536:	81 7d e0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x20],0x1ff
ffff80000080953d:	7e a2                	jle    ffff8000008094e1 <release_mmap+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK);
ffff80000080953f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809542:	48 98                	cdqe   
ffff800000809544:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080954b:	00 
ffff80000080954c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809550:	48 01 d0             	add    rax,rdx
ffff800000809553:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809556:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080955c:	48 89 c7             	mov    rdi,rax
ffff80000080955f:	49 89 df             	mov    r15,rbx
ffff800000809562:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000809569:	ff ff ff 
ffff80000080956c:	48 01 d8             	add    rax,rbx
ffff80000080956f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:949
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff800000809571:	eb 75                	jmp    ffff8000008095e8 <release_mmap+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:960
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k] & PDE_2MB)){
ffff800000809573:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809576:	48 98                	cdqe   
ffff800000809578:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080957f:	00 
ffff800000809580:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809584:	48 01 d0             	add    rax,rdx
ffff800000809587:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080958a:	83 e0 01             	and    eax,0x1
ffff80000080958d:	48 85 c0             	test   rax,rax
ffff800000809590:	74 56                	je     ffff8000008095e8 <release_mmap+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:960 (discriminator 1)
ffff800000809592:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809595:	48 98                	cdqe   
ffff800000809597:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080959e:	00 
ffff80000080959f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008095a3:	48 01 d0             	add    rax,rdx
ffff8000008095a6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008095a9:	25 80 00 00 00       	and    eax,0x80
ffff8000008095ae:	48 85 c0             	test   rax,rax
ffff8000008095b1:	74 35                	je     ffff8000008095e8 <release_mmap+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:962
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
ffff8000008095b3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008095b6:	48 98                	cdqe   
ffff8000008095b8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008095bf:	00 
ffff8000008095c0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008095c4:	48 01 d0             	add    rax,rdx
ffff8000008095c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008095ca:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff8000008095cf:	be 00 02 00 00       	mov    esi,0x200
ffff8000008095d4:	89 c7                	mov    edi,eax
ffff8000008095d6:	49 89 df             	mov    r15,rbx
ffff8000008095d9:	48 b8 6e 05 fe ff ff 	movabs rax,0xfffffffffffe056e
ffff8000008095e0:	ff ff ff 
ffff8000008095e3:	48 01 d8             	add    rax,rbx
ffff8000008095e6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:947 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff8000008095e8:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:947 (discriminator 1)
ffff8000008095ec:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff8000008095f3:	0f 8e 76 fe ff ff    	jle    ffff80000080946f <release_mmap+0x10f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:966
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK);
ffff8000008095f9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008095fc:	48 98                	cdqe   
ffff8000008095fe:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809605:	00 
ffff800000809606:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080960a:	48 01 d0             	add    rax,rdx
ffff80000080960d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809610:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000809616:	48 89 c7             	mov    rdi,rax
ffff800000809619:	49 89 df             	mov    r15,rbx
ffff80000080961c:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000809623:	ff ff ff 
ffff800000809626:	48 01 d8             	add    rax,rbx
ffff800000809629:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:943 (discriminator 2)
            for(int j=0;j<512;j++)
ffff80000080962b:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:943 (discriminator 1)
ffff80000080962f:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff800000809636:	0f 8e be fd ff ff    	jle    ffff8000008093fa <release_mmap+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:971
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK);
ffff80000080963c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080963f:	48 98                	cdqe   
ffff800000809641:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809648:	00 
ffff800000809649:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080964d:	48 01 d0             	add    rax,rdx
ffff800000809650:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809653:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000809659:	48 89 c7             	mov    rdi,rax
ffff80000080965c:	49 89 df             	mov    r15,rbx
ffff80000080965f:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000809666:	ff ff ff 
ffff800000809669:	48 01 d8             	add    rax,rbx
ffff80000080966c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939 (discriminator 2)
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff80000080966e:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939 (discriminator 1)
ffff800000809672:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffff800000809679:	0f 8e 2b fd ff ff    	jle    ffff8000008093aa <release_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:974
        }
    }
}
ffff80000080967f:	90                   	nop
ffff800000809680:	90                   	nop
ffff800000809681:	48 83 c4 50          	add    rsp,0x50
ffff800000809685:	5b                   	pop    rbx
ffff800000809686:	41 5f                	pop    r15
ffff800000809688:	5d                   	pop    rbp
ffff800000809689:	c3                   	ret    

ffff80000080968a <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:975
void copy_mmap(struct process* from, struct process *to){
ffff80000080968a:	f3 0f 1e fa          	endbr64 
ffff80000080968e:	55                   	push   rbp
ffff80000080968f:	48 89 e5             	mov    rbp,rsp
ffff800000809692:	41 57                	push   r15
ffff800000809694:	53                   	push   rbx
ffff800000809695:	48 83 ec 70          	sub    rsp,0x70
ffff800000809699:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809699 <copy_mmap+0xf>
ffff8000008096a0:	49 bb 8f 92 01 00 00 	movabs r11,0x1928f
ffff8000008096a7:	00 00 00 
ffff8000008096aa:	4c 01 db             	add    rbx,r11
ffff8000008096ad:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff8000008096b1:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976
    page_item * pml4p= kmalloc();
ffff8000008096b5:	49 89 df             	mov    r15,rbx
ffff8000008096b8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008096bd:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff8000008096c4:	ff ff ff 
ffff8000008096c7:	48 01 da             	add    rdx,rbx
ffff8000008096ca:	ff d2                	call   rdx
ffff8000008096cc:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:977
    memcpy(pml4p, (unsigned char *) from->pml4, PAGE_4K_SIZE);//复制pml4
ffff8000008096d0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008096d4:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff8000008096db:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008096df:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008096e4:	48 89 ce             	mov    rsi,rcx
ffff8000008096e7:	48 89 c7             	mov    rdi,rax
ffff8000008096ea:	49 89 df             	mov    r15,rbx
ffff8000008096ed:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff8000008096f4:	ff ff ff 
ffff8000008096f7:	48 01 d8             	add    rax,rbx
ffff8000008096fa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:978
    to->regs.cr3=(unsigned long)pml4p&~KNL_BASE;
ffff8000008096fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809700:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000809707:	7f 00 00 
ffff80000080970a:	48 21 c2             	and    rdx,rax
ffff80000080970d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000809711:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:979
    to->pml4=pml4p;
ffff800000809718:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080971c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000809720:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:982
    //复制pdpt

    page_item *pml4e= pml4p;
ffff800000809727:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080972b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983
    for(int i=0;i<512;i++)
ffff80000080972f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000809736:	e9 0e 03 00 00       	jmp    ffff800000809a49 <copy_mmap+0x3bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:985
    {
        if((pml4e[i]&PAGE_PRESENT)==0)
ffff80000080973b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080973e:	48 98                	cdqe   
ffff800000809740:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809747:	00 
ffff800000809748:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080974c:	48 01 d0             	add    rax,rdx
ffff80000080974f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809752:	83 e0 01             	and    eax,0x1
ffff800000809755:	48 85 c0             	test   rax,rax
ffff800000809758:	0f 84 e6 02 00 00    	je     ffff800000809a44 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:987
            continue;
        addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080975e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809761:	48 98                	cdqe   
ffff800000809763:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080976a:	00 
ffff80000080976b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080976f:	48 01 d0             	add    rax,rdx
ffff800000809772:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809775:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:988
        addr_t m4=kmalloc();
ffff800000809779:	49 89 df             	mov    r15,rbx
ffff80000080977c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809781:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000809788:	ff ff ff 
ffff80000080978b:	48 01 da             	add    rdx,rbx
ffff80000080978e:	ff d2                	call   rdx
ffff800000809790:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:989
        pml4e[i]= (m4&~KNL_BASE) | (old_data & ~PAGE_4K_MASK);
ffff800000809794:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff80000080979b:	7f 00 00 
ffff80000080979e:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff8000008097a2:	48 89 c2             	mov    rdx,rax
ffff8000008097a5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008097a9:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008097ae:	48 89 c1             	mov    rcx,rax
ffff8000008097b1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008097b4:	48 98                	cdqe   
ffff8000008097b6:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff8000008097bd:	00 
ffff8000008097be:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008097c2:	48 01 f0             	add    rax,rsi
ffff8000008097c5:	48 09 ca             	or     rdx,rcx
ffff8000008097c8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990
        memcpy((unsigned char *) m4, old_data & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008097cb:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008097d2:	7f 00 00 
ffff8000008097d5:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
ffff8000008097d9:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008097e0:	80 ff ff 
ffff8000008097e3:	48 09 d0             	or     rax,rdx
ffff8000008097e6:	48 89 c1             	mov    rcx,rax
ffff8000008097e9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008097ed:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008097f2:	48 89 ce             	mov    rsi,rcx
ffff8000008097f5:	48 89 c7             	mov    rdi,rax
ffff8000008097f8:	49 89 df             	mov    r15,rbx
ffff8000008097fb:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000809802:	ff ff ff 
ffff800000809805:	48 01 d8             	add    rax,rbx
ffff800000809808:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
        page_item *pdpte= (page_item *) m4;
ffff80000080980a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080980e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992
        for(int j=0;j<512;j++)
ffff800000809812:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000809819:	e9 17 02 00 00       	jmp    ffff800000809a35 <copy_mmap+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:994
        {
            if((pdpte[j]&PAGE_PRESENT)==0||(pdpte[j]&PDPTE_1GB)!=0)
ffff80000080981e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809821:	48 98                	cdqe   
ffff800000809823:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080982a:	00 
ffff80000080982b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080982f:	48 01 d0             	add    rax,rdx
ffff800000809832:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809835:	83 e0 01             	and    eax,0x1
ffff800000809838:	48 85 c0             	test   rax,rax
ffff80000080983b:	0f 84 ef 01 00 00    	je     ffff800000809a30 <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:994 (discriminator 2)
ffff800000809841:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809844:	48 98                	cdqe   
ffff800000809846:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080984d:	00 
ffff80000080984e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809852:	48 01 d0             	add    rax,rdx
ffff800000809855:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809858:	25 80 00 00 00       	and    eax,0x80
ffff80000080985d:	48 85 c0             	test   rax,rax
ffff800000809860:	0f 85 ca 01 00 00    	jne    ffff800000809a30 <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:996
                continue;
            addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000809866:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809869:	48 98                	cdqe   
ffff80000080986b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809872:	00 
ffff800000809873:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809877:	48 01 d0             	add    rax,rdx
ffff80000080987a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080987d:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:997
            addr_t m3=kmalloc();
ffff800000809881:	49 89 df             	mov    r15,rbx
ffff800000809884:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809889:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000809890:	ff ff ff 
ffff800000809893:	48 01 da             	add    rdx,rbx
ffff800000809896:	ff d2                	call   rdx
ffff800000809898:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:998
            pdpte[j]= (m3&~KNL_BASE) | (old_data2 & ~PAGE_4K_MASK);
ffff80000080989c:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff8000008098a3:	7f 00 00 
ffff8000008098a6:	48 23 45 a8          	and    rax,QWORD PTR [rbp-0x58]
ffff8000008098aa:	48 89 c2             	mov    rdx,rax
ffff8000008098ad:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008098b1:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008098b6:	48 89 c1             	mov    rcx,rax
ffff8000008098b9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008098bc:	48 98                	cdqe   
ffff8000008098be:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff8000008098c5:	00 
ffff8000008098c6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008098ca:	48 01 f0             	add    rax,rsi
ffff8000008098cd:	48 09 ca             	or     rdx,rcx
ffff8000008098d0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999
            memcpy((unsigned char *) m3, old_data2 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008098d3:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008098da:	7f 00 00 
ffff8000008098dd:	48 23 45 b0          	and    rax,QWORD PTR [rbp-0x50]
ffff8000008098e1:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008098e8:	80 ff ff 
ffff8000008098eb:	48 09 d0             	or     rax,rdx
ffff8000008098ee:	48 89 c1             	mov    rcx,rax
ffff8000008098f1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008098f5:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008098fa:	48 89 ce             	mov    rsi,rcx
ffff8000008098fd:	48 89 c7             	mov    rdi,rax
ffff800000809900:	49 89 df             	mov    r15,rbx
ffff800000809903:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff80000080990a:	ff ff ff 
ffff80000080990d:	48 01 d8             	add    rax,rbx
ffff800000809910:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1000
            page_item *pde= (page_item *) m3;
ffff800000809912:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809916:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001
            for(int k=0;k<512;k++)
ffff80000080991a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000809921:	e9 fb 00 00 00       	jmp    ffff800000809a21 <copy_mmap+0x397>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003
            {
                if((pde[j]&PAGE_PRESENT)==0||(pde[j]&PDE_2MB)!=0)
ffff800000809926:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809929:	48 98                	cdqe   
ffff80000080992b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809932:	00 
ffff800000809933:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000809937:	48 01 d0             	add    rax,rdx
ffff80000080993a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080993d:	83 e0 01             	and    eax,0x1
ffff800000809940:	48 85 c0             	test   rax,rax
ffff800000809943:	0f 84 d3 00 00 00    	je     ffff800000809a1c <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003 (discriminator 2)
ffff800000809949:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080994c:	48 98                	cdqe   
ffff80000080994e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809955:	00 
ffff800000809956:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080995a:	48 01 d0             	add    rax,rdx
ffff80000080995d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809960:	25 80 00 00 00       	and    eax,0x80
ffff800000809965:	48 85 c0             	test   rax,rax
ffff800000809968:	0f 85 ae 00 00 00    	jne    ffff800000809a1c <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005
                    continue;
                addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080996e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809971:	48 98                	cdqe   
ffff800000809973:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080997a:	00 
ffff80000080997b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080997f:	48 01 d0             	add    rax,rdx
ffff800000809982:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809985:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1006
                addr_t m2=kmalloc();
ffff800000809989:	49 89 df             	mov    r15,rbx
ffff80000080998c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809991:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000809998:	ff ff ff 
ffff80000080999b:	48 01 da             	add    rdx,rbx
ffff80000080999e:	ff d2                	call   rdx
ffff8000008099a0:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
                pde[k]= (m2&~KNL_BASE) | (old_data3 & ~PAGE_4K_MASK);
ffff8000008099a4:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff8000008099ab:	7f 00 00 
ffff8000008099ae:	48 23 45 90          	and    rax,QWORD PTR [rbp-0x70]
ffff8000008099b2:	48 89 c2             	mov    rdx,rax
ffff8000008099b5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008099b9:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008099be:	48 89 c1             	mov    rcx,rax
ffff8000008099c1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008099c4:	48 98                	cdqe   
ffff8000008099c6:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff8000008099cd:	00 
ffff8000008099ce:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008099d2:	48 01 f0             	add    rax,rsi
ffff8000008099d5:	48 09 ca             	or     rdx,rcx
ffff8000008099d8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008
                memcpy((unsigned char *) m2, old_data3 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008099db:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008099e2:	7f 00 00 
ffff8000008099e5:	48 23 45 98          	and    rax,QWORD PTR [rbp-0x68]
ffff8000008099e9:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008099f0:	80 ff ff 
ffff8000008099f3:	48 09 d0             	or     rax,rdx
ffff8000008099f6:	48 89 c1             	mov    rcx,rax
ffff8000008099f9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008099fd:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809a02:	48 89 ce             	mov    rsi,rcx
ffff800000809a05:	48 89 c7             	mov    rdi,rax
ffff800000809a08:	49 89 df             	mov    r15,rbx
ffff800000809a0b:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000809a12:	ff ff ff 
ffff800000809a15:	48 01 d8             	add    rax,rbx
ffff800000809a18:	ff d0                	call   rax
ffff800000809a1a:	eb 01                	jmp    ffff800000809a1d <copy_mmap+0x393>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
                    continue;
ffff800000809a1c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001 (discriminator 2)
            for(int k=0;k<512;k++)
ffff800000809a1d:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001 (discriminator 1)
ffff800000809a21:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000809a28:	0f 8e f8 fe ff ff    	jle    ffff800000809926 <copy_mmap+0x29c>
ffff800000809a2e:	eb 01                	jmp    ffff800000809a31 <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:995
                continue;
ffff800000809a30:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992 (discriminator 2)
        for(int j=0;j<512;j++)
ffff800000809a31:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992 (discriminator 1)
ffff800000809a35:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff800000809a3c:	0f 8e dc fd ff ff    	jle    ffff80000080981e <copy_mmap+0x194>
ffff800000809a42:	eb 01                	jmp    ffff800000809a45 <copy_mmap+0x3bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:986
            continue;
ffff800000809a44:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983 (discriminator 2)
    for(int i=0;i<512;i++)
ffff800000809a45:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983 (discriminator 1)
ffff800000809a49:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff800000809a50:	0f 8e e5 fc ff ff    	jle    ffff80000080973b <copy_mmap+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1015
            }

        }

    }
}
ffff800000809a56:	90                   	nop
ffff800000809a57:	90                   	nop
ffff800000809a58:	48 83 c4 70          	add    rsp,0x70
ffff800000809a5c:	5b                   	pop    rbx
ffff800000809a5d:	41 5f                	pop    r15
ffff800000809a5f:	5d                   	pop    rbp
ffff800000809a60:	c3                   	ret    

ffff800000809a61 <getpgrp>:
getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017

pid_t getpgrp(void){
ffff800000809a61:	f3 0f 1e fa          	endbr64 
ffff800000809a65:	55                   	push   rbp
ffff800000809a66:	48 89 e5             	mov    rbp,rsp
ffff800000809a69:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809a69 <getpgrp+0x8>
ffff800000809a70:	49 bb bf 8e 01 00 00 	movabs r11,0x18ebf
ffff800000809a77:	00 00 00 
ffff800000809a7a:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1018
    return current->gpid;
ffff800000809a7d:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809a84:	ff ff ff 
ffff800000809a87:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809a8b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a8e:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019
}
ffff800000809a91:	5d                   	pop    rbp
ffff800000809a92:	c3                   	ret    

ffff800000809a93 <getpgid>:
getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021

int getpgid(pid_t pid,gid_t gid){
ffff800000809a93:	f3 0f 1e fa          	endbr64 
ffff800000809a97:	55                   	push   rbp
ffff800000809a98:	48 89 e5             	mov    rbp,rsp
ffff800000809a9b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809a9b <getpgid+0x8>
ffff800000809aa2:	49 bb 8d 8e 01 00 00 	movabs r11,0x18e8d
ffff800000809aa9:	00 00 00 
ffff800000809aac:	4c 01 d8             	add    rax,r11
ffff800000809aaf:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000809ab2:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1022
    if(pid==0)
ffff800000809ab5:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000809ab9:	75 16                	jne    ffff800000809ad1 <getpgid+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023
        return current->gpid;
ffff800000809abb:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809ac2:	ff ff ff 
ffff800000809ac5:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809ac9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809acc:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809acf:	eb 67                	jmp    ffff800000809b38 <getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809ad1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000809ad8:	eb 53                	jmp    ffff800000809b2d <getpgid+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1025
        if(task[i].pid==pid)
ffff800000809ada:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809ae1:	ff ff ff 
ffff800000809ae4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809ae8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809aeb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809aee:	48 63 d2             	movsxd rdx,edx
ffff800000809af1:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000809af8:	48 01 ca             	add    rdx,rcx
ffff800000809afb:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000809afd:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000809b00:	39 d1                	cmp    ecx,edx
ffff800000809b02:	75 25                	jne    ffff800000809b29 <getpgid+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1026
            return task[i].gpid;
ffff800000809b04:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809b0b:	ff ff ff 
ffff800000809b0e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809b12:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809b15:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809b18:	48 98                	cdqe   
ffff800000809b1a:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809b21:	48 01 d0             	add    rax,rdx
ffff800000809b24:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809b27:	eb 0f                	jmp    ffff800000809b38 <getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809b29:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024 (discriminator 1)
ffff800000809b2d:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000809b31:	7e a7                	jle    ffff800000809ada <getpgid+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1028
    }
    return -1;
ffff800000809b33:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1029
}
ffff800000809b38:	5d                   	pop    rbp
ffff800000809b39:	c3                   	ret    

ffff800000809b3a <setpgid>:
setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1030
int setpgid(pid_t pid,gid_t gid){
ffff800000809b3a:	f3 0f 1e fa          	endbr64 
ffff800000809b3e:	55                   	push   rbp
ffff800000809b3f:	48 89 e5             	mov    rbp,rsp
ffff800000809b42:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809b42 <setpgid+0x8>
ffff800000809b49:	49 bb e6 8d 01 00 00 	movabs r11,0x18de6
ffff800000809b50:	00 00 00 
ffff800000809b53:	4c 01 d8             	add    rax,r11
ffff800000809b56:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000809b59:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1031
    if(pid==0)
ffff800000809b5c:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000809b60:	75 56                	jne    ffff800000809bb8 <setpgid+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1033
    {
        if(current->sid==current->pid)
ffff800000809b62:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809b69:	ff ff ff 
ffff800000809b6c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809b70:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809b73:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000809b76:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809b7d:	ff ff ff 
ffff800000809b80:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809b84:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809b87:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809b89:	39 d1                	cmp    ecx,edx
ffff800000809b8b:	75 0a                	jne    ffff800000809b97 <setpgid+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1034
            return -1;
ffff800000809b8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809b92:	e9 e9 00 00 00       	jmp    ffff800000809c80 <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1035
        current->gpid=gid;
ffff800000809b97:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809b9e:	ff ff ff 
ffff800000809ba1:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809ba5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809ba8:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809bab:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
        return 0;
ffff800000809bae:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809bb3:	e9 c8 00 00 00       	jmp    ffff800000809c80 <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809bb8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000809bbf:	e9 ad 00 00 00       	jmp    ffff800000809c71 <setpgid+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1039
        if(task[i].pid==pid)
ffff800000809bc4:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809bcb:	ff ff ff 
ffff800000809bce:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809bd2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809bd5:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809bd8:	48 63 d2             	movsxd rdx,edx
ffff800000809bdb:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000809be2:	48 01 ca             	add    rdx,rcx
ffff800000809be5:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000809be7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000809bea:	39 d1                	cmp    ecx,edx
ffff800000809bec:	75 7f                	jne    ffff800000809c6d <setpgid+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041
        {
            if(task[i].sid==task[i].pid)
ffff800000809bee:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809bf5:	ff ff ff 
ffff800000809bf8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809bfc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809bff:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809c02:	48 63 d2             	movsxd rdx,edx
ffff800000809c05:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000809c0c:	48 01 ca             	add    rdx,rcx
ffff800000809c0f:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000809c12:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809c19:	ff ff ff 
ffff800000809c1c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809c20:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000809c23:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809c26:	48 63 d2             	movsxd rdx,edx
ffff800000809c29:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000809c30:	48 01 f2             	add    rdx,rsi
ffff800000809c33:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809c35:	39 d1                	cmp    ecx,edx
ffff800000809c37:	75 07                	jne    ffff800000809c40 <setpgid+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042
                return -1;
ffff800000809c39:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809c3e:	eb 40                	jmp    ffff800000809c80 <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1043
            task[i].gpid=gid;
ffff800000809c40:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809c47:	ff ff ff 
ffff800000809c4a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809c4e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809c51:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809c54:	48 98                	cdqe   
ffff800000809c56:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809c5d:	48 01 c2             	add    rdx,rax
ffff800000809c60:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809c63:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1044
            return 0;
ffff800000809c66:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809c6b:	eb 13                	jmp    ffff800000809c80 <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809c6d:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038 (discriminator 1)
ffff800000809c71:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000809c75:	0f 8e 49 ff ff ff    	jle    ffff800000809bc4 <setpgid+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1047
        }
    }
    return -1;
ffff800000809c7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1048
}
ffff800000809c80:	5d                   	pop    rbp
ffff800000809c81:	c3                   	ret    

ffff800000809c82 <setsid>:
setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050

pid_t setsid(void){
ffff800000809c82:	f3 0f 1e fa          	endbr64 
ffff800000809c86:	55                   	push   rbp
ffff800000809c87:	48 89 e5             	mov    rbp,rsp
ffff800000809c8a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809c8a <setsid+0x8>
ffff800000809c91:	49 bb 9e 8c 01 00 00 	movabs r11,0x18c9e
ffff800000809c98:	00 00 00 
ffff800000809c9b:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1051
    current->sid=current->pid;
ffff800000809c9e:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809ca5:	ff ff ff 
ffff800000809ca8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809cac:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809caf:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff800000809cb6:	ff ff ff 
ffff800000809cb9:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000809cbd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809cc0:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809cc2:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052
}
ffff800000809cc5:	90                   	nop
ffff800000809cc6:	5d                   	pop    rbp
ffff800000809cc7:	c3                   	ret    

ffff800000809cc8 <getsid>:
getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1053
pid_t getsid(pid_t pid){
ffff800000809cc8:	f3 0f 1e fa          	endbr64 
ffff800000809ccc:	55                   	push   rbp
ffff800000809ccd:	48 89 e5             	mov    rbp,rsp
ffff800000809cd0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809cd0 <getsid+0x8>
ffff800000809cd7:	49 bb 58 8c 01 00 00 	movabs r11,0x18c58
ffff800000809cde:	00 00 00 
ffff800000809ce1:	4c 01 d8             	add    rax,r11
ffff800000809ce4:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1054
    if(pid==0)
ffff800000809ce7:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000809ceb:	75 16                	jne    ffff800000809d03 <getsid+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1055
        return current->sid;
ffff800000809ced:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809cf4:	ff ff ff 
ffff800000809cf7:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809cfb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809cfe:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809d01:	eb 67                	jmp    ffff800000809d6a <getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1056
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809d03:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000809d0a:	eb 53                	jmp    ffff800000809d5f <getsid+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1057
        if(task[i].pid==pid)
ffff800000809d0c:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809d13:	ff ff ff 
ffff800000809d16:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809d1a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809d1d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809d20:	48 63 d2             	movsxd rdx,edx
ffff800000809d23:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000809d2a:	48 01 ca             	add    rdx,rcx
ffff800000809d2d:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000809d2f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000809d32:	39 d1                	cmp    ecx,edx
ffff800000809d34:	75 25                	jne    ffff800000809d5b <getsid+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1058
            return task[i].sid;
ffff800000809d36:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000809d3d:	ff ff ff 
ffff800000809d40:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809d44:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809d47:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809d4a:	48 98                	cdqe   
ffff800000809d4c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809d53:	48 01 d0             	add    rax,rdx
ffff800000809d56:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809d59:	eb 0f                	jmp    ffff800000809d6a <getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1056 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809d5b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1056 (discriminator 1)
ffff800000809d5f:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000809d63:	7e a7                	jle    ffff800000809d0c <getsid+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1060
    }
    return -1;
ffff800000809d65:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1061
}
ffff800000809d6a:	5d                   	pop    rbp
ffff800000809d6b:	c3                   	ret    

ffff800000809d6c <tcsetpgrp>:
tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1062
int tcsetpgrp(int fildes,pid_t pgid_id){
ffff800000809d6c:	f3 0f 1e fa          	endbr64 
ffff800000809d70:	55                   	push   rbp
ffff800000809d71:	48 89 e5             	mov    rbp,rsp
ffff800000809d74:	41 57                	push   r15
ffff800000809d76:	53                   	push   rbx
ffff800000809d77:	48 83 ec 20          	sub    rsp,0x20
ffff800000809d7b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809d7b <tcsetpgrp+0xf>
ffff800000809d82:	49 bb ad 8b 01 00 00 	movabs r11,0x18bad
ffff800000809d89:	00 00 00 
ffff800000809d8c:	4c 01 db             	add    rbx,r11
ffff800000809d8f:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000809d92:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1064
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
ffff800000809d95:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809d98:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809d9d:	be 02 00 00 00       	mov    esi,0x2
ffff800000809da2:	89 c7                	mov    edi,eax
ffff800000809da4:	49 89 df             	mov    r15,rbx
ffff800000809da7:	48 b8 5d 76 fe ff ff 	movabs rax,0xfffffffffffe765d
ffff800000809dae:	ff ff ff 
ffff800000809db1:	48 01 d8             	add    rax,rbx
ffff800000809db4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1065
    int sid= getsid(0);//获取session id
ffff800000809db6:	bf 00 00 00 00       	mov    edi,0x0
ffff800000809dbb:	49 89 df             	mov    r15,rbx
ffff800000809dbe:	48 b8 a0 73 fe ff ff 	movabs rax,0xfffffffffffe73a0
ffff800000809dc5:	ff ff ff 
ffff800000809dc8:	48 01 d8             	add    rax,rbx
ffff800000809dcb:	ff d0                	call   rax
ffff800000809dcd:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1066
    struct process* new_fgl=NULL;
ffff800000809dd0:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000809dd7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1067
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809dd8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000809ddf:	e9 fb 00 00 00       	jmp    ffff800000809edf <tcsetpgrp+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000809de4:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809deb:	ff ff ff 
ffff800000809dee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809df2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809df5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809df8:	48 98                	cdqe   
ffff800000809dfa:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809e01:	48 01 d0             	add    rax,rdx
ffff800000809e04:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000809e07:	83 f8 04             	cmp    eax,0x4
ffff800000809e0a:	0f 84 ca 00 00 00    	je     ffff800000809eda <tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068 (discriminator 2)
ffff800000809e10:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809e17:	ff ff ff 
ffff800000809e1a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809e1e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809e21:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809e24:	48 98                	cdqe   
ffff800000809e26:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809e2d:	48 01 d0             	add    rax,rdx
ffff800000809e30:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000809e33:	85 c0                	test   eax,eax
ffff800000809e35:	0f 84 9f 00 00 00    	je     ffff800000809eda <tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1069
        if(task[i].sid==sid){
ffff800000809e3b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809e42:	ff ff ff 
ffff800000809e45:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809e49:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809e4c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809e4f:	48 98                	cdqe   
ffff800000809e51:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809e58:	48 01 d0             	add    rax,rdx
ffff800000809e5b:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000809e5e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809e61:	39 c2                	cmp    edx,eax
ffff800000809e63:	75 76                	jne    ffff800000809edb <tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1070
            task[i].fg_pgid=pgid_id;
ffff800000809e65:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809e6c:	ff ff ff 
ffff800000809e6f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809e73:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809e76:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809e79:	48 98                	cdqe   
ffff800000809e7b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809e82:	48 01 c2             	add    rdx,rax
ffff800000809e85:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000809e88:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1071
            if(task[i].pid==pgid_id){
ffff800000809e8b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809e92:	ff ff ff 
ffff800000809e95:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809e99:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809e9c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809e9f:	48 98                	cdqe   
ffff800000809ea1:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809ea8:	48 01 d0             	add    rax,rdx
ffff800000809eab:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809ead:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000809eb0:	39 c2                	cmp    edx,eax
ffff800000809eb2:	75 27                	jne    ffff800000809edb <tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1073
                //这是新前台进程组的leader
                new_fgl=&task[i];
ffff800000809eb4:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809ebb:	ff ff ff 
ffff800000809ebe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809ec2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809ec5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809ec8:	48 98                	cdqe   
ffff800000809eca:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000809ed1:	48 01 d0             	add    rax,rdx
ffff800000809ed4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000809ed8:	eb 01                	jmp    ffff800000809edb <tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000809eda:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1067 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809edb:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1067 (discriminator 1)
ffff800000809edf:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff800000809ee3:	0f 8e fb fe ff ff    	jle    ffff800000809de4 <tcsetpgrp+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1078
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
ffff800000809ee9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809eed:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffff800000809ef0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809ef4:	48 63 d2             	movsxd rdx,edx
ffff800000809ef7:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809efb:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809f00:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809f04:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
ffff800000809f08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809f0c:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809f0f:	48 63 d2             	movsxd rdx,edx
ffff800000809f12:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809f16:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
ffff800000809f1b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809f1f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809f22:	48 63 d2             	movsxd rdx,edx
ffff800000809f25:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809f29:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809f2e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000809f32:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000809f36:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000809f3b:	ba 01 00 00 00       	mov    edx,0x1
ffff800000809f40:	48 89 c7             	mov    rdi,rax
ffff800000809f43:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1080
    ,TTY_CONNECT,0);
}
ffff800000809f46:	90                   	nop
ffff800000809f47:	48 83 c4 20          	add    rsp,0x20
ffff800000809f4b:	5b                   	pop    rbx
ffff800000809f4c:	41 5f                	pop    r15
ffff800000809f4e:	5d                   	pop    rbp
ffff800000809f4f:	c3                   	ret    

ffff800000809f50 <tcgetpgrp>:
tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1081
pid_t tcgetpgrp(int fildes){
ffff800000809f50:	f3 0f 1e fa          	endbr64 
ffff800000809f54:	55                   	push   rbp
ffff800000809f55:	48 89 e5             	mov    rbp,rsp
ffff800000809f58:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809f58 <tcgetpgrp+0x8>
ffff800000809f5f:	49 bb d0 89 01 00 00 	movabs r11,0x189d0
ffff800000809f66:	00 00 00 
ffff800000809f69:	4c 01 d8             	add    rax,r11
ffff800000809f6c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1082
    return current->fg_pgid;
ffff800000809f6f:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809f76:	ff ff ff 
ffff800000809f79:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809f7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809f80:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1083
}
ffff800000809f83:	5d                   	pop    rbp
ffff800000809f84:	c3                   	ret    

ffff800000809f85 <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1086
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
ffff800000809f85:	f3 0f 1e fa          	endbr64 
ffff800000809f89:	55                   	push   rbp
ffff800000809f8a:	48 89 e5             	mov    rbp,rsp
ffff800000809f8d:	48 83 ec 10          	sub    rsp,0x10
ffff800000809f91:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809f91 <sys_ioctl+0xc>
ffff800000809f98:	49 bb 97 89 01 00 00 	movabs r11,0x18997
ffff800000809f9f:	00 00 00 
ffff800000809fa2:	4c 01 d8             	add    rax,r11
ffff800000809fa5:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000809fa8:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000809fab:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1087
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
ffff800000809faf:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000809fb6:	ff ff ff 
ffff800000809fb9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809fbd:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809fc0:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000809fc3:	48 63 c9             	movsxd rcx,ecx
ffff800000809fc6:	48 83 c1 1e          	add    rcx,0x1e
ffff800000809fca:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff800000809fcf:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff800000809fd3:	4c 8b 42 28          	mov    r8,QWORD PTR [rdx+0x28]
ffff800000809fd7:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000809fda:	48 63 d2             	movsxd rdx,edx
ffff800000809fdd:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff800000809fe4:	ff ff ff 
ffff800000809fe7:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000809feb:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffff800000809fee:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff800000809ff1:	48 63 f6             	movsxd rsi,esi
ffff800000809ff4:	48 83 c6 1e          	add    rsi,0x1e
ffff800000809ff8:	48 8b 74 f1 08       	mov    rsi,QWORD PTR [rcx+rsi*8+0x8]
ffff800000809ffd:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff80000080a004:	ff ff ff 
ffff80000080a007:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080a00b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a00e:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080a011:	48 63 c9             	movsxd rcx,ecx
ffff80000080a014:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080a018:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
ffff80000080a01d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a021:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080a025:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080a029:	48 89 c7             	mov    rdi,rax
ffff80000080a02c:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1089
    ,request,args);
ffff80000080a02f:	90                   	nop
ffff80000080a030:	c9                   	leave  
ffff80000080a031:	c3                   	ret    
ffff80000080a032:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080a039:	00 00 00 
ffff80000080a03c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff80000080a040 <outb>:
outb():
ffff80000080a040:	66 89 fa             	mov    dx,di
ffff80000080a043:	66 89 f0             	mov    ax,si
ffff80000080a046:	ee                   	out    dx,al
ffff80000080a047:	e8 29 00 00 00       	call   ffff80000080a075 <io_delay>
ffff80000080a04c:	c3                   	ret    

ffff80000080a04d <outw>:
outw():
ffff80000080a04d:	66 89 fa             	mov    dx,di
ffff80000080a050:	66 89 f0             	mov    ax,si
ffff80000080a053:	66 ef                	out    dx,ax
ffff80000080a055:	90                   	nop
ffff80000080a056:	90                   	nop
ffff80000080a057:	90                   	nop
ffff80000080a058:	c3                   	ret    

ffff80000080a059 <inb>:
inb():
ffff80000080a059:	31 c0                	xor    eax,eax
ffff80000080a05b:	66 89 fa             	mov    dx,di
ffff80000080a05e:	ec                   	in     al,dx
ffff80000080a05f:	90                   	nop
ffff80000080a060:	90                   	nop
ffff80000080a061:	90                   	nop
ffff80000080a062:	c3                   	ret    

ffff80000080a063 <inw>:
inw():
ffff80000080a063:	31 c0                	xor    eax,eax
ffff80000080a065:	66 89 fa             	mov    dx,di
ffff80000080a068:	66 ed                	in     ax,dx
ffff80000080a06a:	90                   	nop
ffff80000080a06b:	90                   	nop
ffff80000080a06c:	90                   	nop
ffff80000080a06d:	c3                   	ret    

ffff80000080a06e <eoi>:
eoi():
ffff80000080a06e:	b0 20                	mov    al,0x20
ffff80000080a070:	e6 a0                	out    0xa0,al
ffff80000080a072:	e6 20                	out    0x20,al
ffff80000080a074:	c3                   	ret    

ffff80000080a075 <io_delay>:
io_delay():
ffff80000080a075:	90                   	nop
ffff80000080a076:	90                   	nop
ffff80000080a077:	90                   	nop
ffff80000080a078:	90                   	nop
ffff80000080a079:	c3                   	ret    

ffff80000080a07a <turn_on_int>:
turn_on_int():
ffff80000080a07a:	b0 f8                	mov    al,0xf8
ffff80000080a07c:	e6 21                	out    0x21,al
ffff80000080a07e:	e8 f2 ff ff ff       	call   ffff80000080a075 <io_delay>
ffff80000080a083:	b0 af                	mov    al,0xaf
ffff80000080a085:	e6 a1                	out    0xa1,al
ffff80000080a087:	e8 e9 ff ff ff       	call   ffff80000080a075 <io_delay>
ffff80000080a08c:	48 b8 00 70 10 00 00 	movabs rax,0xffff800000107000
ffff80000080a093:	80 ff ff 
ffff80000080a096:	0f 01 18             	lidt   [rax]
ffff80000080a099:	90                   	nop
ffff80000080a09a:	90                   	nop
ffff80000080a09b:	90                   	nop
ffff80000080a09c:	90                   	nop
ffff80000080a09d:	c3                   	ret    

ffff80000080a09e <report_back_trace_of_err>:
report_back_trace_of_err():
ffff80000080a09e:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff80000080a0a3:	50                   	push   rax
ffff80000080a0a4:	83 c4 08             	add    esp,0x8
ffff80000080a0a7:	c3                   	ret    

ffff80000080a0a8 <bt_msg>:
bt_msg():
ffff80000080a0a8:	65 72 72             	gs jb  ffff80000080a11d <fill_desc+0x3a>
ffff80000080a0ab:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff80000080a0ac:	72 20                	jb     ffff80000080a0ce <init_gdt+0x11>
ffff80000080a0ae:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff80000080a0af:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
ffff80000080a0b2:	72 73                	jb     ffff80000080a127 <fill_desc+0x44>
ffff80000080a0b4:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
ffff80000080a0b7:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # ffff800000eefd35 <_knl_end+0x2efd35>

ffff80000080a0bd <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:9
#include "proc.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
ffff80000080a0bd:	f3 0f 1e fa          	endbr64 
ffff80000080a0c1:	55                   	push   rbp
ffff80000080a0c2:	48 89 e5             	mov    rbp,rsp
ffff80000080a0c5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a0c5 <init_gdt+0x8>
ffff80000080a0cc:	49 bb 63 88 01 00 00 	movabs r11,0x18863
ffff80000080a0d3:	00 00 00 
ffff80000080a0d6:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:11
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    asm volatile("mov $0x48,%ax\r\n"
ffff80000080a0d9:	66 b8 48 00          	mov    ax,0x48
ffff80000080a0dd:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:13
                 "ltr %ax");  
}
ffff80000080a0e0:	90                   	nop
ffff80000080a0e1:	5d                   	pop    rbp
ffff80000080a0e2:	c3                   	ret    

ffff80000080a0e3 <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
ffff80000080a0e3:	f3 0f 1e fa          	endbr64 
ffff80000080a0e7:	55                   	push   rbp
ffff80000080a0e8:	48 89 e5             	mov    rbp,rsp
ffff80000080a0eb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a0eb <fill_desc+0x8>
ffff80000080a0f2:	49 bb 3d 88 01 00 00 	movabs r11,0x1883d
ffff80000080a0f9:	00 00 00 
ffff80000080a0fc:	4c 01 d8             	add    rax,r11
ffff80000080a0ff:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080a103:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080a107:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffff80000080a10a:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_12=base&0xffff;
ffff80000080a10e:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a115:	ff ff ff 
ffff80000080a118:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a11c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a11f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a122:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a126:	48 01 ca             	add    rdx,rcx
ffff80000080a129:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff80000080a12d:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_3=(base>>16)&0xff;
ffff80000080a131:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a135:	48 89 d6             	mov    rsi,rdx
ffff80000080a138:	48 c1 ee 10          	shr    rsi,0x10
ffff80000080a13c:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a143:	ff ff ff 
ffff80000080a146:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a14a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a14d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a150:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a154:	48 01 ca             	add    rdx,rcx
ffff80000080a157:	89 f1                	mov    ecx,esi
ffff80000080a159:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_4=(base>>24)&0xff;
ffff80000080a15c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a160:	48 89 d6             	mov    rsi,rdx
ffff80000080a163:	48 c1 ee 18          	shr    rsi,0x18
ffff80000080a167:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a16e:	ff ff ff 
ffff80000080a171:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a175:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a178:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a17b:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a17f:	48 01 ca             	add    rdx,rcx
ffff80000080a182:	89 f1                	mov    ecx,esi
ffff80000080a184:	88 4a 07             	mov    BYTE PTR [rdx+0x7],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].base_5678=(base>>32)&0xffffffff;
ffff80000080a187:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a18b:	48 89 d1             	mov    rcx,rdx
ffff80000080a18e:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080a192:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a199:	ff ff ff 
ffff80000080a19c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a1a0:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080a1a3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a1a6:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a1aa:	48 01 f2             	add    rdx,rsi
ffff80000080a1ad:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].limit_lo16=limit&0xffff;
ffff80000080a1b0:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a1b7:	ff ff ff 
ffff80000080a1ba:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a1be:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a1c1:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a1c4:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a1c8:	48 01 ca             	add    rdx,rcx
ffff80000080a1cb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080a1cf:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:21
    gdt[index].attr=attr|((limit>>8)&0xf0);
ffff80000080a1d2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a1d6:	48 c1 ea 08          	shr    rdx,0x8
ffff80000080a1da:	89 d1                	mov    ecx,edx
ffff80000080a1dc:	66 81 e1 f0 00       	and    cx,0xf0
ffff80000080a1e1:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a1e8:	ff ff ff 
ffff80000080a1eb:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a1ef:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a1f2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080a1f5:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a1f9:	48 01 c2             	add    rdx,rax
ffff80000080a1fc:	89 c8                	mov    eax,ecx
ffff80000080a1fe:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
ffff80000080a202:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:23

}
ffff80000080a206:	90                   	nop
ffff80000080a207:	5d                   	pop    rbp
ffff80000080a208:	c3                   	ret    

ffff80000080a209 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
ffff80000080a209:	f3 0f 1e fa          	endbr64 
ffff80000080a20d:	55                   	push   rbp
ffff80000080a20e:	48 89 e5             	mov    rbp,rsp
ffff80000080a211:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a211 <fill_gate+0x8>
ffff80000080a218:	49 bb 17 87 01 00 00 	movabs r11,0x18717
ffff80000080a21f:	00 00 00 
ffff80000080a222:	4c 01 d8             	add    rax,r11
ffff80000080a225:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080a228:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff80000080a22b:	89 d6                	mov    esi,edx
ffff80000080a22d:	89 ca                	mov    edx,ecx
ffff80000080a22f:	89 f1                	mov    ecx,esi
ffff80000080a231:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffff80000080a235:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    gate* ptr=gdt;
ffff80000080a239:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a240:	ff ff ff 
ffff80000080a243:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a247:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a24a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_low=offset&0xffff;
ffff80000080a24e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a251:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a255:	48 89 c2             	mov    rdx,rax
ffff80000080a258:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a25c:	48 01 d0             	add    rax,rdx
ffff80000080a25f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a262:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].offset_high=(offset>>16)&0xffff;
ffff80000080a265:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a268:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a26c:	48 89 c2             	mov    rdx,rax
ffff80000080a26f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a273:	48 01 d0             	add    rax,rdx
ffff80000080a276:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a279:	c1 ea 10             	shr    edx,0x10
ffff80000080a27c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].selector=selector;
ffff80000080a27f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a282:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a286:	48 89 c2             	mov    rdx,rax
ffff80000080a289:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a28d:	48 01 c2             	add    rdx,rax
ffff80000080a290:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffff80000080a294:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
    ptr[index].attr=attr;
ffff80000080a298:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a29b:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a29f:	48 89 c2             	mov    rdx,rax
ffff80000080a2a2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a2a6:	48 01 c2             	add    rdx,rax
ffff80000080a2a9:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
ffff80000080a2ad:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:32
}
ffff80000080a2b1:	90                   	nop
ffff80000080a2b2:	5d                   	pop    rbp
ffff80000080a2b3:	c3                   	ret    

ffff80000080a2b4 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:35

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
ffff80000080a2b4:	f3 0f 1e fa          	endbr64 
ffff80000080a2b8:	55                   	push   rbp
ffff80000080a2b9:	48 89 e5             	mov    rbp,rsp
ffff80000080a2bc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a2bc <fill_ldt_desc+0x8>
ffff80000080a2c3:	49 bb 6c 86 01 00 00 	movabs r11,0x1866c
ffff80000080a2ca:	00 00 00 
ffff80000080a2cd:	4c 01 d8             	add    rax,r11
ffff80000080a2d0:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff80000080a2d3:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff80000080a2d6:	89 d0                	mov    eax,edx
ffff80000080a2d8:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080a2dc:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:41
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
ffff80000080a2e0:	90                   	nop
ffff80000080a2e1:	5d                   	pop    rbp
ffff80000080a2e2:	c3                   	ret    
ffff80000080a2e3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080a2ea:	00 00 00 
ffff80000080a2ed:	0f 1f 00             	nop    DWORD PTR [rax]

ffff80000080a2f0 <fill_desc>:
fill_desc():
ffff80000080a2f0:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff80000080a2f5:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
ffff80000080a2fa:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff80000080a2ff:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
ffff80000080a304:	be 00 60 00 00       	mov    esi,0x6000
ffff80000080a309:	c1 e2 03             	shl    edx,0x3
ffff80000080a30c:	01 d6                	add    esi,edx
ffff80000080a30e:	66 67 89 1e          	mov    WORD PTR [esi],bx
ffff80000080a312:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
ffff80000080a317:	c1 e8 10             	shr    eax,0x10
ffff80000080a31a:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
ffff80000080a31e:	c1 eb 10             	shr    ebx,0x10
ffff80000080a321:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
ffff80000080a325:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
ffff80000080a329:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
ffff80000080a32d:	c3                   	ret    

ffff80000080a32e <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
ffff80000080a32e:	f3 0f 1e fa          	endbr64 
ffff80000080a332:	55                   	push   rbp
ffff80000080a333:	48 89 e5             	mov    rbp,rsp
ffff80000080a336:	41 57                	push   r15
ffff80000080a338:	53                   	push   rbx
ffff80000080a339:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a339 <clock_c+0xb>
ffff80000080a340:	49 bb ef 85 01 00 00 	movabs r11,0x185ef
ffff80000080a347:	00 00 00 
ffff80000080a34a:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    execute_request();
ffff80000080a34d:	49 89 df             	mov    r15,rbx
ffff80000080a350:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a355:	48 ba ad c5 fe ff ff 	movabs rdx,0xfffffffffffec5ad
ffff80000080a35c:	ff ff ff 
ffff80000080a35f:	48 01 da             	add    rdx,rbx
ffff80000080a362:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:12
    do_req();
ffff80000080a364:	49 89 df             	mov    r15,rbx
ffff80000080a367:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a36c:	48 ba d7 3c fe ff ff 	movabs rdx,0xfffffffffffe3cd7
ffff80000080a373:	ff ff ff 
ffff80000080a376:	48 01 da             	add    rdx,rbx
ffff80000080a379:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    if(!manage_proc_lock)
ffff80000080a37b:	48 b8 08 fd ff ff ff 	movabs rax,0xfffffffffffffd08
ffff80000080a382:	ff ff ff 
ffff80000080a385:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a389:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a38b:	85 c0                	test   eax,eax
ffff80000080a38d:	75 17                	jne    ffff80000080a3a6 <clock_c+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:15
    {
        manage_proc();
ffff80000080a38f:	49 89 df             	mov    r15,rbx
ffff80000080a392:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a397:	48 ba de 49 fe ff ff 	movabs rdx,0xfffffffffffe49de
ffff80000080a39e:	ff ff ff 
ffff80000080a3a1:	48 01 da             	add    rdx,rbx
ffff80000080a3a4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:18
    }
    //puts("1 disk req executed.");
ffff80000080a3a6:	90                   	nop
ffff80000080a3a7:	5b                   	pop    rbx
ffff80000080a3a8:	41 5f                	pop    r15
ffff80000080a3aa:	5d                   	pop    rbp
ffff80000080a3ab:	c3                   	ret    
ffff80000080a3ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff80000080a3b0 <clock>:
clock():
ffff80000080a3b0:	50                   	push   rax
ffff80000080a3b1:	53                   	push   rbx
ffff80000080a3b2:	51                   	push   rcx
ffff80000080a3b3:	52                   	push   rdx
ffff80000080a3b4:	57                   	push   rdi
ffff80000080a3b5:	56                   	push   rsi
ffff80000080a3b6:	41 50                	push   r8
ffff80000080a3b8:	41 51                	push   r9
ffff80000080a3ba:	41 52                	push   r10
ffff80000080a3bc:	41 53                	push   r11
ffff80000080a3be:	41 54                	push   r12
ffff80000080a3c0:	41 55                	push   r13
ffff80000080a3c2:	41 56                	push   r14
ffff80000080a3c4:	41 57                	push   r15
ffff80000080a3c6:	e8 ef ce ff ff       	call   ffff8000008072ba <save_rsp>
ffff80000080a3cb:	66 8c c0             	mov    ax,es
ffff80000080a3ce:	50                   	push   rax
ffff80000080a3cf:	66 8c d8             	mov    ax,ds
ffff80000080a3d2:	50                   	push   rax
ffff80000080a3d3:	66 b8 10 00          	mov    ax,0x10
ffff80000080a3d7:	8e c0                	mov    es,eax
ffff80000080a3d9:	8e d8                	mov    ds,eax

ffff80000080a3db <clock.normal_part>:
clock.normal_part():
ffff80000080a3db:	b0 20                	mov    al,0x20
ffff80000080a3dd:	e6 a0                	out    0xa0,al
ffff80000080a3df:	e6 20                	out    0x20,al
ffff80000080a3e1:	e8 48 ff ff ff       	call   ffff80000080a32e <clock_c>

ffff80000080a3e6 <clock_ret>:
clock_ret():
ffff80000080a3e6:	58                   	pop    rax
ffff80000080a3e7:	8e d8                	mov    ds,eax
ffff80000080a3e9:	58                   	pop    rax
ffff80000080a3ea:	8e c0                	mov    es,eax
ffff80000080a3ec:	41 5f                	pop    r15
ffff80000080a3ee:	41 5e                	pop    r14
ffff80000080a3f0:	41 5d                	pop    r13
ffff80000080a3f2:	41 5c                	pop    r12
ffff80000080a3f4:	41 5b                	pop    r11
ffff80000080a3f6:	41 5a                	pop    r10
ffff80000080a3f8:	41 59                	pop    r9
ffff80000080a3fa:	41 58                	pop    r8
ffff80000080a3fc:	5e                   	pop    rsi
ffff80000080a3fd:	5f                   	pop    rdi
ffff80000080a3fe:	5a                   	pop    rdx
ffff80000080a3ff:	59                   	pop    rcx
ffff80000080a400:	5b                   	pop    rbx
ffff80000080a401:	58                   	pop    rax
ffff80000080a402:	48 cf                	iretq  

ffff80000080a404 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:118
    return ind;
}
*/

int execute(char *path, char **argv)
{
ffff80000080a404:	f3 0f 1e fa          	endbr64 
ffff80000080a408:	55                   	push   rbp
ffff80000080a409:	48 89 e5             	mov    rbp,rsp
ffff80000080a40c:	41 57                	push   r15
ffff80000080a40e:	53                   	push   rbx
ffff80000080a40f:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a413:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a413 <execute+0xf>
ffff80000080a41a:	49 bb 15 85 01 00 00 	movabs r11,0x18515
ffff80000080a421:	00 00 00 
ffff80000080a424:	4c 01 db             	add    rbx,r11
ffff80000080a427:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080a42b:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:121
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
ffff80000080a42f:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
ffff80000080a436:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
ffff80000080a43d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a441:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080a446:	48 89 c7             	mov    rdi,rax
ffff80000080a449:	49 89 df             	mov    r15,rbx
ffff80000080a44c:	48 b8 83 a3 fe ff ff 	movabs rax,0xfffffffffffea383
ffff80000080a453:	ff ff ff 
ffff80000080a456:	48 01 d8             	add    rax,rbx
ffff80000080a459:	ff d0                	call   rax
ffff80000080a45b:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080a45e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080a462:	79 0a                	jns    ffff80000080a46e <execute+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122 (discriminator 1)
ffff80000080a464:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080a469:	e9 f2 00 00 00       	jmp    ffff80000080a560 <execute+0x15c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124
    //
    char *p=path;
ffff80000080a46e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a472:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125
    for(;*p!='\0';p++);
ffff80000080a476:	eb 05                	jmp    ffff80000080a47d <execute+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 2)
ffff80000080a478:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 1)
ffff80000080a47d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a481:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a484:	84 c0                	test   al,al
ffff80000080a486:	75 f0                	jne    ffff80000080a478 <execute+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126
    for(;*p!='/'&&p>path;p--);
ffff80000080a488:	eb 05                	jmp    ffff80000080a48f <execute+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 3)
ffff80000080a48a:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 1)
ffff80000080a48f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a493:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a496:	3c 2f                	cmp    al,0x2f
ffff80000080a498:	74 0a                	je     ffff80000080a4a4 <execute+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 2)
ffff80000080a49a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a49e:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080a4a2:	77 e6                	ja     ffff80000080a48a <execute+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    if(p>path)
ffff80000080a4a4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a4a8:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080a4ac:	76 3c                	jbe    ffff80000080a4ea <execute+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
    {
        *p='\0';
ffff80000080a4ae:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a4b2:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
ffff80000080a4b5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a4b9:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080a4be:	48 89 c7             	mov    rdi,rax
ffff80000080a4c1:	49 89 df             	mov    r15,rbx
ffff80000080a4c4:	48 b8 83 a3 fe ff ff 	movabs rax,0xfffffffffffea383
ffff80000080a4cb:	ff ff ff 
ffff80000080a4ce:	48 01 d8             	add    rax,rbx
ffff80000080a4d1:	ff d0                	call   rax
ffff80000080a4d3:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080a4d6:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080a4da:	79 07                	jns    ffff80000080a4e3 <execute+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130 (discriminator 1)
ffff80000080a4dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080a4e1:	eb 7d                	jmp    ffff80000080a560 <execute+0x15c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131
        *p='/';
ffff80000080a4e3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a4e7:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:135
    }
    extern struct file opened[];
    extern struct process task[];
    int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
ffff80000080a4ea:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a4ed:	48 63 d0             	movsxd rdx,eax
ffff80000080a4f0:	48 89 d0             	mov    rax,rdx
ffff80000080a4f3:	48 c1 e0 02          	shl    rax,0x2
ffff80000080a4f7:	48 01 d0             	add    rax,rdx
ffff80000080a4fa:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a4fe:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080a505:	ff ff ff 
ffff80000080a508:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080a50c:	48 01 c2             	add    rdx,rax
ffff80000080a50f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a512:	48 63 c8             	movsxd rcx,eax
ffff80000080a515:	48 89 c8             	mov    rax,rcx
ffff80000080a518:	48 c1 e0 02          	shl    rax,0x2
ffff80000080a51c:	48 01 c8             	add    rax,rcx
ffff80000080a51f:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a523:	48 b9 e8 fe ff ff ff 	movabs rcx,0xfffffffffffffee8
ffff80000080a52a:	ff ff ff 
ffff80000080a52d:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080a531:	48 01 c8             	add    rax,rcx
ffff80000080a534:	48 b9 90 ff ff ff ff 	movabs rcx,0xffffffffffffff90
ffff80000080a53b:	ff ff ff 
ffff80000080a53e:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080a542:	48 89 c6             	mov    rsi,rax
ffff80000080a545:	48 89 cf             	mov    rdi,rcx
ffff80000080a548:	49 89 df             	mov    r15,rbx
ffff80000080a54b:	48 b8 db 56 fe ff ff 	movabs rax,0xfffffffffffe56db
ffff80000080a552:	ff ff ff 
ffff80000080a555:	48 01 d8             	add    rax,rbx
ffff80000080a558:	ff d0                	call   rax
ffff80000080a55a:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:136
    return pi;
ffff80000080a55d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:137
}
ffff80000080a560:	48 83 c4 30          	add    rsp,0x30
ffff80000080a564:	5b                   	pop    rbx
ffff80000080a565:	41 5f                	pop    r15
ffff80000080a567:	5d                   	pop    rbp
ffff80000080a568:	c3                   	ret    

ffff80000080a569 <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139

int sys_execve(char *path, int argc, char **argv) {
ffff80000080a569:	f3 0f 1e fa          	endbr64 
ffff80000080a56d:	55                   	push   rbp
ffff80000080a56e:	48 89 e5             	mov    rbp,rsp
ffff80000080a571:	41 57                	push   r15
ffff80000080a573:	53                   	push   rbx
ffff80000080a574:	48 83 ec 50          	sub    rsp,0x50
ffff80000080a578:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a578 <sys_execve+0xf>
ffff80000080a57f:	49 bb b0 83 01 00 00 	movabs r11,0x183b0
ffff80000080a586:	00 00 00 
ffff80000080a589:	4c 01 db             	add    rbx,r11
ffff80000080a58c:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff80000080a590:	89 75 b4             	mov    DWORD PTR [rbp-0x4c],esi
ffff80000080a593:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:140
    int fno=-1,cwd_fno=-1;
ffff80000080a597:	c7 45 e0 ff ff ff ff 	mov    DWORD PTR [rbp-0x20],0xffffffff
ffff80000080a59e:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
ffff80000080a5a5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080a5a9:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080a5ae:	48 89 c7             	mov    rdi,rax
ffff80000080a5b1:	49 89 df             	mov    r15,rbx
ffff80000080a5b4:	48 b8 83 a3 fe ff ff 	movabs rax,0xfffffffffffea383
ffff80000080a5bb:	ff ff ff 
ffff80000080a5be:	48 01 d8             	add    rax,rbx
ffff80000080a5c1:	ff d0                	call   rax
ffff80000080a5c3:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffff80000080a5c6:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff80000080a5ca:	79 0a                	jns    ffff80000080a5d6 <sys_execve+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141 (discriminator 1)
ffff80000080a5cc:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
ffff80000080a5d1:	e9 fc 01 00 00       	jmp    ffff80000080a7d2 <sys_execve+0x269>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:145

    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
ffff80000080a5d6:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a5dd:	ff ff ff 
ffff80000080a5e0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a5e4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a5e7:	48 89 c7             	mov    rdi,rax
ffff80000080a5ea:	49 89 df             	mov    r15,rbx
ffff80000080a5ed:	48 b8 38 6a fe ff ff 	movabs rax,0xfffffffffffe6a38
ffff80000080a5f4:	ff ff ff 
ffff80000080a5f7:	48 01 d8             	add    rax,rbx
ffff80000080a5fa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:146
    current->regs.rsp=STACK_TOP;//清空栈
ffff80000080a5fc:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a603:	ff ff ff 
ffff80000080a606:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a60a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a60d:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff80000080a614:	7f 00 00 
ffff80000080a617:	48 89 b0 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:149
    extern TSS* tss;

    current->exef=current->openf[fno];//改变执行文件
ffff80000080a61e:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a625:	ff ff ff 
ffff80000080a628:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a62c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a62f:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a636:	ff ff ff 
ffff80000080a639:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a63d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a640:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
ffff80000080a643:	48 63 c9             	movsxd rcx,ecx
ffff80000080a646:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080a64a:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080a64f:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:150
    addr_t entry= load_elf(current->exef);
ffff80000080a656:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a65d:	ff ff ff 
ffff80000080a660:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a664:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a667:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff80000080a66e:	48 89 c7             	mov    rdi,rax
ffff80000080a671:	49 89 df             	mov    r15,rbx
ffff80000080a674:	48 b8 cf 89 fe ff ff 	movabs rax,0xfffffffffffe89cf
ffff80000080a67b:	ff ff ff 
ffff80000080a67e:	48 01 d8             	add    rax,rbx
ffff80000080a681:	ff d0                	call   rax
ffff80000080a683:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:153
    extern struct file opened[];
    extern struct process task[];
    if(sys_close(current->exef-opened)<0)return -1;
ffff80000080a687:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a68e:	ff ff ff 
ffff80000080a691:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a695:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a698:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff80000080a69f:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080a6a6:	ff ff ff 
ffff80000080a6a9:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080a6ad:	48 29 d0             	sub    rax,rdx
ffff80000080a6b0:	48 c1 f8 03          	sar    rax,0x3
ffff80000080a6b4:	48 89 c2             	mov    rdx,rax
ffff80000080a6b7:	48 b8 cd cc cc cc cc 	movabs rax,0xcccccccccccccccd
ffff80000080a6be:	cc cc cc 
ffff80000080a6c1:	48 0f af c2          	imul   rax,rdx
ffff80000080a6c5:	89 c7                	mov    edi,eax
ffff80000080a6c7:	49 89 df             	mov    r15,rbx
ffff80000080a6ca:	48 b8 37 aa fe ff ff 	movabs rax,0xfffffffffffeaa37
ffff80000080a6d1:	ff ff ff 
ffff80000080a6d4:	48 01 d8             	add    rax,rbx
ffff80000080a6d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:156

    //sysret直接返回到新程序的main
    void *retp= (void *) entry;
ffff80000080a6d9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a6dd:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:157
    stack_store_regs *rs= (stack_store_regs *) (tss->ists[0] - sizeof(stack_store_regs));
ffff80000080a6e1:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff80000080a6e8:	ff ff ff 
ffff80000080a6eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a6ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a6f2:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff80000080a6f6:	48 2d a8 00 00 00    	sub    rax,0xa8
ffff80000080a6fc:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:158
    rs->rcx= (unsigned long) retp;
ffff80000080a700:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080a704:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a708:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:160
    //第一个参数argc
    rs->rsi=argc;
ffff80000080a70c:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080a70f:	48 63 d0             	movsxd rdx,eax
ffff80000080a712:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a716:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:162
    //第二个参数argv需要把内容从内核空间拷贝到用户堆里面
    char* p= (char *) current->mem_struct.heap_base;
ffff80000080a71a:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a721:	ff ff ff 
ffff80000080a724:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a728:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a72b:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080a72f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163
    for(int i=0;i<argc;i++){
ffff80000080a733:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080a73a:	eb 6c                	jmp    ffff80000080a7a8 <sys_execve+0x23f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 3)
        strcpy(p,argv[i]);
ffff80000080a73c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a73f:	48 98                	cdqe   
ffff80000080a741:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a748:	00 
ffff80000080a749:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a74d:	48 01 d0             	add    rax,rdx
ffff80000080a750:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a753:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a757:	48 89 d6             	mov    rsi,rdx
ffff80000080a75a:	48 89 c7             	mov    rdi,rax
ffff80000080a75d:	49 89 df             	mov    r15,rbx
ffff80000080a760:	48 b8 51 12 ff ff ff 	movabs rax,0xffffffffffff1251
ffff80000080a767:	ff ff ff 
ffff80000080a76a:	48 01 d8             	add    rax,rbx
ffff80000080a76d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165 (discriminator 3)
        p+= strlen(argv[i])+1;
ffff80000080a76f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a772:	48 98                	cdqe   
ffff80000080a774:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a77b:	00 
ffff80000080a77c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a780:	48 01 d0             	add    rax,rdx
ffff80000080a783:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a786:	48 89 c7             	mov    rdi,rax
ffff80000080a789:	49 89 df             	mov    r15,rbx
ffff80000080a78c:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff80000080a793:	ff ff ff 
ffff80000080a796:	48 01 d8             	add    rax,rbx
ffff80000080a799:	ff d0                	call   rax
ffff80000080a79b:	83 c0 01             	add    eax,0x1
ffff80000080a79e:	48 98                	cdqe   
ffff80000080a7a0:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff80000080a7a4:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163 (discriminator 1)
ffff80000080a7a8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a7ab:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
ffff80000080a7ae:	7c 8c                	jl     ffff80000080a73c <sys_execve+0x1d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:167
    }
    rs->rdi=current->mem_struct.heap_base;
ffff80000080a7b0:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a7b7:	ff ff ff 
ffff80000080a7ba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a7be:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a7c1:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080a7c5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a7c9:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:171
    //以下部分是临时测试代码
//    int (*pmain)(int argc,char **argv)=(int (*)(int, char **)) entry;
//    pmain(argc, (char **) rs->rdi);
    return 0;
ffff80000080a7cd:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:172
}
ffff80000080a7d2:	48 83 c4 50          	add    rsp,0x50
ffff80000080a7d6:	5b                   	pop    rbx
ffff80000080a7d7:	41 5f                	pop    r15
ffff80000080a7d9:	5d                   	pop    rbp
ffff80000080a7da:	c3                   	ret    

ffff80000080a7db <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174
int exec_call(char *path)
{
ffff80000080a7db:	f3 0f 1e fa          	endbr64 
ffff80000080a7df:	55                   	push   rbp
ffff80000080a7e0:	48 89 e5             	mov    rbp,rsp
ffff80000080a7e3:	41 57                	push   r15
ffff80000080a7e5:	53                   	push   rbx
ffff80000080a7e6:	48 83 ec 20          	sub    rsp,0x20
ffff80000080a7ea:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a7ea <exec_call+0xf>
ffff80000080a7f1:	49 bb 3e 81 01 00 00 	movabs r11,0x1813e
ffff80000080a7f8:	00 00 00 
ffff80000080a7fb:	4c 01 db             	add    rbx,r11
ffff80000080a7fe:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175
    int pi= execute(path, NULL);
ffff80000080a802:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a806:	be 00 00 00 00       	mov    esi,0x0
ffff80000080a80b:	48 89 c7             	mov    rdi,rax
ffff80000080a80e:	49 89 df             	mov    r15,rbx
ffff80000080a811:	48 b8 dc 7a fe ff ff 	movabs rax,0xfffffffffffe7adc
ffff80000080a818:	ff ff ff 
ffff80000080a81b:	48 01 d8             	add    rax,rbx
ffff80000080a81e:	ff d0                	call   rax
ffff80000080a820:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:176
    int tss= _TSS_IND(pi)*8;
ffff80000080a823:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a826:	01 c0                	add    eax,eax
ffff80000080a828:	83 c0 05             	add    eax,0x5
ffff80000080a82b:	c1 e0 03             	shl    eax,0x3
ffff80000080a82e:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:179
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
ffff80000080a831:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a834:	89 c7                	mov    edi,eax
ffff80000080a836:	49 89 df             	mov    r15,rbx
ffff80000080a839:	48 b8 9a 4c fe ff ff 	movabs rax,0xfffffffffffe4c9a
ffff80000080a840:	ff ff ff 
ffff80000080a843:	48 01 d8             	add    rax,rbx
ffff80000080a846:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:180
    while(task[pi].stat != TASK_ZOMBIE);
ffff80000080a848:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:180 (discriminator 1)
ffff80000080a849:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080a850:	ff ff ff 
ffff80000080a853:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080a857:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a85a:	48 98                	cdqe   
ffff80000080a85c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080a863:	48 01 d0             	add    rax,rdx
ffff80000080a866:	48 83 c0 10          	add    rax,0x10
ffff80000080a86a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a86d:	83 f8 04             	cmp    eax,0x4
ffff80000080a870:	75 d7                	jne    ffff80000080a849 <exec_call+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:181
    return task[pi].exit_code;
ffff80000080a872:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080a879:	ff ff ff 
ffff80000080a87c:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080a880:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a883:	48 98                	cdqe   
ffff80000080a885:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080a88c:	48 01 d0             	add    rax,rdx
ffff80000080a88f:	48 83 c0 20          	add    rax,0x20
ffff80000080a893:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:182
}
ffff80000080a896:	48 83 c4 20          	add    rsp,0x20
ffff80000080a89a:	5b                   	pop    rbx
ffff80000080a89b:	41 5f                	pop    r15
ffff80000080a89d:	5d                   	pop    rbp
ffff80000080a89e:	c3                   	ret    

ffff80000080a89f <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:184
int proc_start()
{
ffff80000080a89f:	f3 0f 1e fa          	endbr64 
ffff80000080a8a3:	55                   	push   rbp
ffff80000080a8a4:	48 89 e5             	mov    rbp,rsp
ffff80000080a8a7:	41 57                	push   r15
ffff80000080a8a9:	53                   	push   rbx
ffff80000080a8aa:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a8aa <proc_start+0xb>
ffff80000080a8b1:	49 bb 7e 80 01 00 00 	movabs r11,0x1807e
ffff80000080a8b8:	00 00 00 
ffff80000080a8bb:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:187
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
ffff80000080a8be:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080a8c5:	ff ff ff 
ffff80000080a8c8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a8cc:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a8ce:	48 98                	cdqe   
ffff80000080a8d0:	48 69 d0 54 03 00 00 	imul   rdx,rax,0x354
ffff80000080a8d7:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080a8de:	ff ff ff 
ffff80000080a8e1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a8e5:	48 01 d0             	add    rax,rdx
ffff80000080a8e8:	48 89 c7             	mov    rdi,rax
ffff80000080a8eb:	49 89 df             	mov    r15,rbx
ffff80000080a8ee:	48 b8 f2 7f fe ff ff 	movabs rax,0xfffffffffffe7ff2
ffff80000080a8f5:	ff ff ff 
ffff80000080a8f8:	48 01 d8             	add    rax,rbx
ffff80000080a8fb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:189
    //释放进程资源
    sys_exit(0);
ffff80000080a8fd:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080a902:	49 89 df             	mov    r15,rbx
ffff80000080a905:	48 b8 61 56 fe ff ff 	movabs rax,0xfffffffffffe5661
ffff80000080a90c:	ff ff ff 
ffff80000080a90f:	48 01 d8             	add    rax,rbx
ffff80000080a912:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190
}
ffff80000080a914:	90                   	nop
ffff80000080a915:	5b                   	pop    rbx
ffff80000080a916:	41 5f                	pop    r15
ffff80000080a918:	5d                   	pop    rbp
ffff80000080a919:	c3                   	ret    

ffff80000080a91a <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:193
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
ffff80000080a91a:	f3 0f 1e fa          	endbr64 
ffff80000080a91e:	55                   	push   rbp
ffff80000080a91f:	48 89 e5             	mov    rbp,rsp
ffff80000080a922:	41 57                	push   r15
ffff80000080a924:	53                   	push   rbx
ffff80000080a925:	48 81 ec 00 03 00 00 	sub    rsp,0x300
ffff80000080a92c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a92c <load_pe+0x12>
ffff80000080a933:	49 bb fc 7f 01 00 00 	movabs r11,0x17ffc
ffff80000080a93a:	00 00 00 
ffff80000080a93d:	4c 01 db             	add    rbx,r11
ffff80000080a940:	48 89 bd f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195
    // 读取文件头
    struct file *f=proc->exef;
ffff80000080a947:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
ffff80000080a94e:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff80000080a955:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196
    int exefno=-1;
ffff80000080a959:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:197
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080a960:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080a967:	eb 32                	jmp    ffff80000080a99b <load_pe+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:198
        if(current->openf[i]==f)
ffff80000080a969:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080a970:	ff ff ff 
ffff80000080a973:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a977:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a97a:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a97d:	48 63 d2             	movsxd rdx,edx
ffff80000080a980:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080a984:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080a989:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff80000080a98d:	75 08                	jne    ffff80000080a997 <load_pe+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:200
        {
            exefno=i;
ffff80000080a98f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080a992:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:201
            break;
ffff80000080a995:	eb 0a                	jmp    ffff80000080a9a1 <load_pe+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:197 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080a997:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:197 (discriminator 1)
ffff80000080a99b:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff80000080a99f:	7e c8                	jle    ffff80000080a969 <load_pe+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:203
        }
    if(exefno==-1)return ERR;
ffff80000080a9a1:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff80000080a9a5:	75 0a                	jne    ffff80000080a9b1 <load_pe+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:203 (discriminator 1)
ffff80000080a9a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080a9ac:	e9 59 08 00 00       	jmp    ffff80000080b20a <load_pe+0x8f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:207

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
ffff80000080a9b1:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
ffff80000080a9b8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a9bb:	ba 44 00 00 00       	mov    edx,0x44
ffff80000080a9c0:	48 89 ce             	mov    rsi,rcx
ffff80000080a9c3:	89 c7                	mov    edi,eax
ffff80000080a9c5:	49 89 df             	mov    r15,rbx
ffff80000080a9c8:	48 b8 2e ab fe ff ff 	movabs rax,0xfffffffffffeab2e
ffff80000080a9cf:	ff ff ff 
ffff80000080a9d2:	48 01 d8             	add    rax,rbx
ffff80000080a9d5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:208
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
ffff80000080a9d7:	48 8b 85 6c fe ff ff 	mov    rax,QWORD PTR [rbp-0x194]
ffff80000080a9de:	48 89 c1             	mov    rcx,rax
ffff80000080a9e1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a9e4:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a9e9:	48 89 ce             	mov    rsi,rcx
ffff80000080a9ec:	89 c7                	mov    edi,eax
ffff80000080a9ee:	49 89 df             	mov    r15,rbx
ffff80000080a9f1:	48 b8 ca ac fe ff ff 	movabs rax,0xfffffffffffeacca
ffff80000080a9f8:	ff ff ff 
ffff80000080a9fb:	48 01 d8             	add    rax,rbx
ffff80000080a9fe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:209
    sys_read(exefno, &tnth, sizeof(tnth));
ffff80000080aa00:	48 8d 8d 20 fd ff ff 	lea    rcx,[rbp-0x2e0]
ffff80000080aa07:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aa0a:	ba 0c 01 00 00       	mov    edx,0x10c
ffff80000080aa0f:	48 89 ce             	mov    rsi,rcx
ffff80000080aa12:	89 c7                	mov    edi,eax
ffff80000080aa14:	49 89 df             	mov    r15,rbx
ffff80000080aa17:	48 b8 2e ab fe ff ff 	movabs rax,0xfffffffffffeab2e
ffff80000080aa1e:	ff ff ff 
ffff80000080aa21:	48 01 d8             	add    rax,rbx
ffff80000080aa24:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212

    //是否需要移动base(先不检查)
    addr_t nbase=tnth.OptionalHeader.ImageBase;
ffff80000080aa26:	48 8b 85 54 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2ac]
ffff80000080aa2d:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:213
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
ffff80000080aa31:	8b 85 74 fd ff ff    	mov    eax,DWORD PTR [rbp-0x28c]
ffff80000080aa37:	c1 e8 0c             	shr    eax,0xc
ffff80000080aa3a:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:238
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
ffff80000080aa40:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aa43:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080aa48:	be 00 00 00 00       	mov    esi,0x0
ffff80000080aa4d:	89 c7                	mov    edi,eax
ffff80000080aa4f:	49 89 df             	mov    r15,rbx
ffff80000080aa52:	48 b8 ca ac fe ff ff 	movabs rax,0xfffffffffffeacca
ffff80000080aa59:	ff ff ff 
ffff80000080aa5c:	48 01 d8             	add    rax,rbx
ffff80000080aa5f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:239
    sys_read(exefno, nbase, PAGE_SIZE);
ffff80000080aa61:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffff80000080aa65:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aa68:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080aa6d:	48 89 ce             	mov    rsi,rcx
ffff80000080aa70:	89 c7                	mov    edi,eax
ffff80000080aa72:	49 89 df             	mov    r15,rbx
ffff80000080aa75:	48 b8 2e ab fe ff ff 	movabs rax,0xfffffffffffeab2e
ffff80000080aa7c:	ff ff ff 
ffff80000080aa7f:	48 01 d8             	add    rax,rbx
ffff80000080aa82:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:241
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
ffff80000080aa84:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080aa88:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:242
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
ffff80000080aa8f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080aa96:	48 8b 50 3c          	mov    rdx,QWORD PTR [rax+0x3c]
ffff80000080aa9a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080aa9e:	48 01 d0             	add    rax,rdx
ffff80000080aaa1:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:243
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
ffff80000080aaa8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080aaaf:	48 83 c0 04          	add    rax,0x4
ffff80000080aab3:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:246
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
ffff80000080aaba:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080aac1:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
ffff80000080aac4:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:247
    int page_count=prog_size/4096;
ffff80000080aaca:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff80000080aad0:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000080aad6:	85 c0                	test   eax,eax
ffff80000080aad8:	0f 48 c2             	cmovs  eax,edx
ffff80000080aadb:	c1 f8 0c             	sar    eax,0xc
ffff80000080aade:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:249

    addr_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
ffff80000080aae4:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080aaeb:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
ffff80000080aaee:	89 c2                	mov    edx,eax
ffff80000080aaf0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080aaf4:	48 01 d0             	add    rax,rdx
ffff80000080aaf7:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:250
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
ffff80000080aafe:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff80000080ab04:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
ffff80000080ab0a:	85 c0                	test   eax,eax
ffff80000080ab0c:	0f 48 c2             	cmovs  eax,edx
ffff80000080ab0f:	c1 f8 0a             	sar    eax,0xa
ffff80000080ab12:	89 c1                	mov    ecx,eax
ffff80000080ab14:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff80000080ab1a:	99                   	cdq    
ffff80000080ab1b:	c1 ea 16             	shr    edx,0x16
ffff80000080ab1e:	01 d0                	add    eax,edx
ffff80000080ab20:	25 ff 03 00 00       	and    eax,0x3ff
ffff80000080ab25:	29 d0                	sub    eax,edx
ffff80000080ab27:	01 c8                	add    eax,ecx
ffff80000080ab29:	85 c0                	test   eax,eax
ffff80000080ab2b:	0f 95 c0             	setne  al
ffff80000080ab2e:	0f b6 c0             	movzx  eax,al
ffff80000080ab31:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:251
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
ffff80000080ab37:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080ab3e:	48 c1 e8 15          	shr    rax,0x15
ffff80000080ab42:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:254

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
ffff80000080ab48:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ab4f:	89 c0                	mov    eax,eax
ffff80000080ab51:	48 05 0c 01 00 00    	add    rax,0x10c
ffff80000080ab57:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:256
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
ffff80000080ab5b:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ab62:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff80000080ab66:	0f b7 d0             	movzx  edx,ax
ffff80000080ab69:	89 d0                	mov    eax,edx
ffff80000080ab6b:	c1 e0 02             	shl    eax,0x2
ffff80000080ab6e:	01 d0                	add    eax,edx
ffff80000080ab70:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:255
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
ffff80000080ab73:	05 50 01 00 00       	add    eax,0x150
ffff80000080ab78:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:257
    int align=nth->OptionalHeader.FileAlignment;
ffff80000080ab7e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ab85:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
ffff80000080ab88:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258
    data_start=data_start%align?data_start-data_start%align+align:data_start;
ffff80000080ab8e:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080ab94:	99                   	cdq    
ffff80000080ab95:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff80000080ab9b:	89 d0                	mov    eax,edx
ffff80000080ab9d:	85 c0                	test   eax,eax
ffff80000080ab9f:	74 23                	je     ffff80000080abc4 <load_pe+0x2aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258 (discriminator 1)
ffff80000080aba1:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080aba7:	99                   	cdq    
ffff80000080aba8:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff80000080abae:	89 d1                	mov    ecx,edx
ffff80000080abb0:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080abb6:	29 c8                	sub    eax,ecx
ffff80000080abb8:	89 c2                	mov    edx,eax
ffff80000080abba:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
ffff80000080abc0:	01 d0                	add    eax,edx
ffff80000080abc2:	eb 06                	jmp    ffff80000080abca <load_pe+0x2b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258 (discriminator 2)
ffff80000080abc4:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258 (discriminator 4)
ffff80000080abca:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:259 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff80000080abd0:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080abd7:	e9 85 00 00 00       	jmp    ffff80000080ac61 <load_pe+0x347>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
ffff80000080abdc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080abe0:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080abe3:	25 00 00 00 02       	and    eax,0x2000000
ffff80000080abe8:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262
        if(disca)
ffff80000080abee:	83 bd b0 fe ff ff 00 	cmp    DWORD PTR [rbp-0x150],0x0
ffff80000080abf5:	75 60                	jne    ffff80000080ac57 <load_pe+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:265
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
ffff80000080abf7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080abfb:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080abfe:	89 c1                	mov    ecx,eax
ffff80000080ac00:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ac03:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080ac08:	48 89 ce             	mov    rsi,rcx
ffff80000080ac0b:	89 c7                	mov    edi,eax
ffff80000080ac0d:	49 89 df             	mov    r15,rbx
ffff80000080ac10:	48 b8 ca ac fe ff ff 	movabs rax,0xfffffffffffeacca
ffff80000080ac17:	ff ff ff 
ffff80000080ac1a:	48 01 d8             	add    rax,rbx
ffff80000080ac1d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:266
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
ffff80000080ac1f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ac23:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080ac26:	89 c2                	mov    edx,eax
ffff80000080ac28:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ac2c:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080ac2f:	89 c1                	mov    ecx,eax
ffff80000080ac31:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ac35:	48 01 c8             	add    rax,rcx
ffff80000080ac38:	48 89 c1             	mov    rcx,rax
ffff80000080ac3b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ac3e:	48 89 ce             	mov    rsi,rcx
ffff80000080ac41:	89 c7                	mov    edi,eax
ffff80000080ac43:	49 89 df             	mov    r15,rbx
ffff80000080ac46:	48 b8 2e ab fe ff ff 	movabs rax,0xfffffffffffeab2e
ffff80000080ac4d:	ff ff ff 
ffff80000080ac50:	48 01 d8             	add    rax,rbx
ffff80000080ac53:	ff d0                	call   rax
ffff80000080ac55:	eb 01                	jmp    ffff80000080ac58 <load_pe+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:263
            continue;
ffff80000080ac57:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:259 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff80000080ac58:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
ffff80000080ac5c:	48 83 45 e0 28       	add    QWORD PTR [rbp-0x20],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:259 (discriminator 1)
ffff80000080ac61:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ac68:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff80000080ac6c:	0f b7 c0             	movzx  eax,ax
ffff80000080ac6f:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff80000080ac72:	0f 8c 64 ff ff ff    	jl     ffff80000080abdc <load_pe+0x2c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:271

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
ffff80000080ac78:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ac7f:	48 05 90 00 00 00    	add    rax,0x90
ffff80000080ac85:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:272
    if(impd->Size>0)
ffff80000080ac8c:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080ac93:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080ac96:	85 c0                	test   eax,eax
ffff80000080ac98:	0f 84 bc 02 00 00    	je     ffff80000080af5a <load_pe+0x640>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274
    {
        int tmpi=impd->VirtualAddress+nbase;
ffff80000080ac9e:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080aca5:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080aca7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080acab:	01 d0                	add    eax,edx
ffff80000080acad:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:275
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
ffff80000080acb3:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
ffff80000080acb9:	48 98                	cdqe   
ffff80000080acbb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:277
        int dllp;
        while (impdes->Characteristics)
ffff80000080acbf:	e9 88 02 00 00       	jmp    ffff80000080af4c <load_pe+0x632>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
ffff80000080acc4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080acc8:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080accb:	89 c2                	mov    edx,eax
ffff80000080accd:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080acd1:	48 01 d0             	add    rax,rdx
ffff80000080acd4:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:283
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
ffff80000080acdb:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff80000080ace2:	48 ba d7 d5 ff ff ff 	movabs rdx,0xffffffffffffd5d7
ffff80000080ace9:	ff ff ff 
ffff80000080acec:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080acf0:	48 89 d6             	mov    rsi,rdx
ffff80000080acf3:	48 89 c7             	mov    rdi,rax
ffff80000080acf6:	49 89 df             	mov    r15,rbx
ffff80000080acf9:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff80000080ad00:	ff ff ff 
ffff80000080ad03:	48 01 d8             	add    rax,rbx
ffff80000080ad06:	ff d0                	call   rax
ffff80000080ad08:	85 c0                	test   eax,eax
ffff80000080ad0a:	75 09                	jne    ffff80000080ad15 <load_pe+0x3fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:285
            {
                dllp=0x1c00000;
ffff80000080ad0c:	c7 45 cc 00 00 c0 01 	mov    DWORD PTR [rbp-0x34],0x1c00000
ffff80000080ad13:	eb 3d                	jmp    ffff80000080ad52 <load_pe+0x438>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:288
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
ffff80000080ad15:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
ffff80000080ad1c:	48 89 c7             	mov    rdi,rax
ffff80000080ad1f:	48 b8 f2 7f fe ff ff 	movabs rax,0xfffffffffffe7ff2
ffff80000080ad26:	ff ff ff 
ffff80000080ad29:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ad2d:	ff d0                	call   rax
ffff80000080ad2f:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:291
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
ffff80000080ad35:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff80000080ad3b:	89 c7                	mov    edi,eax
ffff80000080ad3d:	49 89 df             	mov    r15,rbx
ffff80000080ad40:	48 b8 ee 88 fe ff ff 	movabs rax,0xfffffffffffe88ee
ffff80000080ad47:	ff ff ff 
ffff80000080ad4a:	48 01 d8             	add    rax,rbx
ffff80000080ad4d:	ff d0                	call   rax
ffff80000080ad4f:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:294
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
ffff80000080ad52:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ad55:	48 98                	cdqe   
ffff80000080ad57:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:295
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
ffff80000080ad5e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ad61:	48 63 d0             	movsxd rdx,eax
ffff80000080ad64:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000080ad6b:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ad6f:	48 01 d0             	add    rax,rdx
ffff80000080ad72:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:296
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
ffff80000080ad79:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080ad80:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
ffff80000080ad86:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ad89:	01 d0                	add    eax,edx
ffff80000080ad8b:	89 c0                	mov    eax,eax
ffff80000080ad8d:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:297
            int funcn=dllexp->NumberOfNames;
ffff80000080ad94:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080ad9b:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080ad9e:	89 85 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:298
            char **fnames=dllexp->AddressOfNames+dllp;
ffff80000080ada4:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080adab:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
ffff80000080adae:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080adb1:	01 d0                	add    eax,edx
ffff80000080adb3:	89 c0                	mov    eax,eax
ffff80000080adb5:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:299
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
ffff80000080adbc:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080adc3:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff80000080adc6:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080adc9:	01 d0                	add    eax,edx
ffff80000080adcb:	89 c0                	mov    eax,eax
ffff80000080adcd:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:300
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
ffff80000080add4:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080addb:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff80000080adde:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ade1:	01 d0                	add    eax,edx
ffff80000080ade3:	89 c0                	mov    eax,eax
ffff80000080ade5:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:302
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
ffff80000080adec:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080adf3:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080adf6:	89 85 e4 fe ff ff    	mov    DWORD PTR [rbp-0x11c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:304
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
ffff80000080adfc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ae00:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080ae03:	89 c2                	mov    edx,eax
ffff80000080ae05:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ae09:	48 01 d0             	add    rax,rdx
ffff80000080ae0c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:305
            char **siataddrs=impdes->FirstThunk+nbase;
ffff80000080ae10:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ae14:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080ae17:	89 c2                	mov    edx,eax
ffff80000080ae19:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ae1d:	48 01 d0             	add    rax,rdx
ffff80000080ae20:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:306
            while (*iataddrs)
ffff80000080ae24:	e9 10 01 00 00       	jmp    ffff80000080af39 <load_pe+0x61f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:309
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
ffff80000080ae29:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ae2d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ae2f:	85 c0                	test   eax,eax
ffff80000080ae31:	79 43                	jns    ffff80000080ae76 <load_pe+0x55c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:312
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
ffff80000080ae33:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ae37:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ae39:	25 ff ff ff 7f       	and    eax,0x7fffffff
ffff80000080ae3e:	2b 85 e4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x11c]
ffff80000080ae44:	89 85 d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
                    *iataddrs=funcaddrs[ord]+dllp;
ffff80000080ae4a:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
ffff80000080ae50:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080ae57:	00 
ffff80000080ae58:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000080ae5f:	48 01 d0             	add    rax,rdx
ffff80000080ae62:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080ae64:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ae67:	01 d0                	add    eax,edx
ffff80000080ae69:	89 c2                	mov    edx,eax
ffff80000080ae6b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ae6f:	89 10                	mov    DWORD PTR [rax],edx
ffff80000080ae71:	e9 b9 00 00 00       	jmp    ffff80000080af2f <load_pe+0x615>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:317
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
ffff80000080ae76:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ae7a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ae7c:	89 c0                	mov    eax,eax
ffff80000080ae7e:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:318
                    import_by_name_p+=2;//跳过开头两字节序号
ffff80000080ae85:	48 83 85 d8 fe ff ff 	add    QWORD PTR [rbp-0x128],0x2
ffff80000080ae8c:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:319
                    int i=0;
ffff80000080ae8d:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:320
                    for(;i<funcn;i++)
ffff80000080ae94:	e9 87 00 00 00       	jmp    ffff80000080af20 <load_pe+0x606>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:322
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
ffff80000080ae99:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080ae9c:	48 98                	cdqe   
ffff80000080ae9e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080aea5:	00 
ffff80000080aea6:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000080aead:	48 01 d0             	add    rax,rdx
ffff80000080aeb0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080aeb3:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffff80000080aeba:	48 89 d6             	mov    rsi,rdx
ffff80000080aebd:	48 89 c7             	mov    rdi,rax
ffff80000080aec0:	49 89 df             	mov    r15,rbx
ffff80000080aec3:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff80000080aeca:	ff ff ff 
ffff80000080aecd:	48 01 d8             	add    rax,rbx
ffff80000080aed0:	ff d0                	call   rax
ffff80000080aed2:	85 c0                	test   eax,eax
ffff80000080aed4:	75 46                	jne    ffff80000080af1c <load_pe+0x602>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:324
                        {
                            int ordi=funcords[i];
ffff80000080aed6:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080aed9:	48 98                	cdqe   
ffff80000080aedb:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffff80000080aedf:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000080aee6:	48 01 d0             	add    rax,rdx
ffff80000080aee9:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080aeec:	98                   	cwde   
ffff80000080aeed:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:325
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
ffff80000080aef3:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
ffff80000080aef9:	48 98                	cdqe   
ffff80000080aefb:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080af02:	00 
ffff80000080af03:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000080af0a:	48 01 d0             	add    rax,rdx
ffff80000080af0d:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080af0f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080af12:	01 d0                	add    eax,edx
ffff80000080af14:	89 c2                	mov    edx,eax
ffff80000080af16:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080af1a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:320
                    for(;i<funcn;i++)
ffff80000080af1c:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:320 (discriminator 1)
ffff80000080af20:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080af23:	3b 85 04 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xfc]
ffff80000080af29:	0f 8c 6a ff ff ff    	jl     ffff80000080ae99 <load_pe+0x57f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:329
                        }
                    }
                }
                iataddrs++;
ffff80000080af2f:	48 83 45 c0 04       	add    QWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:330
                siataddrs++;
ffff80000080af34:	48 83 45 b8 08       	add    QWORD PTR [rbp-0x48],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:306
            while (*iataddrs)
ffff80000080af39:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080af3d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080af3f:	85 c0                	test   eax,eax
ffff80000080af41:	0f 85 e2 fe ff ff    	jne    ffff80000080ae29 <load_pe+0x50f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
            }
            impdes++;
ffff80000080af47:	48 83 45 d0 14       	add    QWORD PTR [rbp-0x30],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:277
        while (impdes->Characteristics)
ffff80000080af4c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af50:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080af52:	85 c0                	test   eax,eax
ffff80000080af54:	0f 85 6a fd ff ff    	jne    ffff80000080acc4 <load_pe+0x3aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:339
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
ffff80000080af5a:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff80000080af61:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:340
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
ffff80000080af62:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080af69:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
ffff80000080af6f:	85 c0                	test   eax,eax
ffff80000080af71:	0f 84 ec 00 00 00    	je     ffff80000080b063 <load_pe+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff80000080af77:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080af7e:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:343
                                +(u32)nbase);
ffff80000080af84:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff80000080af88:	01 d0                	add    eax,edx
ffff80000080af8a:	89 c0                	mov    eax,eax
ffff80000080af8c:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
ffff80000080af90:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080af94:	48 83 c0 40          	add    rax,0x40
ffff80000080af98:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
        u16 *rtype=reloc+1;
ffff80000080af9c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080afa0:	48 83 c0 02          	add    rax,0x2
ffff80000080afa4:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:346
        int old_base=nth->OptionalHeader.ImageBase;
ffff80000080afa8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080afaf:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080afb3:	89 85 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:347
        while(relp->VirtualAddress){
ffff80000080afb9:	e9 97 00 00 00       	jmp    ffff80000080b055 <load_pe+0x73b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:348
            int pgva=relp->VirtualAddress+nbase;
ffff80000080afbe:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080afc2:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080afc4:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080afc8:	01 d0                	add    eax,edx
ffff80000080afca:	89 85 c8 fe ff ff    	mov    DWORD PTR [rbp-0x138],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:349
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff80000080afd0:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
ffff80000080afd7:	eb 5a                	jmp    ffff80000080b033 <load_pe+0x719>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:351
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff80000080afd9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080afdd:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080afe0:	66 85 c0             	test   ax,ax
ffff80000080afe3:	74 49                	je     ffff80000080b02e <load_pe+0x714>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:352
                int *at=*reloc+pgva;//要重定位的数据的地址
ffff80000080afe5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080afe9:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080afec:	0f b7 d0             	movzx  edx,ax
ffff80000080afef:	8b 85 c8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x138]
ffff80000080aff5:	01 d0                	add    eax,edx
ffff80000080aff7:	48 98                	cdqe   
ffff80000080aff9:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:353
                *at=*at-old_base+nbase;
ffff80000080b000:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff80000080b007:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b009:	2b 85 cc fe ff ff    	sub    eax,DWORD PTR [rbp-0x134]
ffff80000080b00f:	89 c2                	mov    edx,eax
ffff80000080b011:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b015:	01 d0                	add    eax,edx
ffff80000080b017:	89 c2                	mov    edx,eax
ffff80000080b019:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff80000080b020:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:355
                //下一个
                reloc+=2;
ffff80000080b022:	48 83 45 a0 04       	add    QWORD PTR [rbp-0x60],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:356
                rtype+=2;
ffff80000080b027:	48 83 45 98 04       	add    QWORD PTR [rbp-0x68],0x4
ffff80000080b02c:	eb 01                	jmp    ffff80000080b02f <load_pe+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:351
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff80000080b02e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:349 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff80000080b02f:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:349 (discriminator 1)
ffff80000080b033:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b037:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080b03a:	c1 e8 02             	shr    eax,0x2
ffff80000080b03d:	89 c2                	mov    edx,eax
ffff80000080b03f:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080b042:	39 c2                	cmp    edx,eax
ffff80000080b044:	77 93                	ja     ffff80000080afd9 <load_pe+0x6bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358
            }
            relp=(int)relp+0x1000;
ffff80000080b046:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b04a:	05 00 10 00 00       	add    eax,0x1000
ffff80000080b04f:	48 98                	cdqe   
ffff80000080b051:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:347
        while(relp->VirtualAddress){
ffff80000080b055:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b059:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b05b:	85 c0                	test   eax,eax
ffff80000080b05d:	0f 85 5b ff ff ff    	jne    ffff80000080afbe <load_pe+0x6a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
ffff80000080b063:	c7 85 00 fd ff ff 00 	mov    DWORD PTR [rbp-0x300],0x0
ffff80000080b06a:	00 00 00 
ffff80000080b06d:	c7 85 04 fd ff ff 00 	mov    DWORD PTR [rbp-0x2fc],0x0
ffff80000080b074:	00 00 00 
ffff80000080b077:	48 c7 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],0x0
ffff80000080b07e:	00 00 00 00 
ffff80000080b082:	48 c7 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],0x0
ffff80000080b089:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:371
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff80000080b08d:	48 8d 85 00 fd ff ff 	lea    rax,[rbp-0x300]
ffff80000080b094:	ba 18 00 00 00       	mov    edx,0x18
ffff80000080b099:	48 89 c6             	mov    rsi,rax
ffff80000080b09c:	bf 00 00 00 01       	mov    edi,0x1000000
ffff80000080b0a1:	49 89 df             	mov    r15,rbx
ffff80000080b0a4:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff80000080b0ab:	ff ff ff 
ffff80000080b0ae:	48 01 d8             	add    rax,rbx
ffff80000080b0b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:372
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
ffff80000080b0b3:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080b0ba:	ff ff ff 
ffff80000080b0bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b0c1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b0c3:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b0ca:	ff ff ff 
ffff80000080b0cd:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b0d1:	48 98                	cdqe   
ffff80000080b0d3:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080b0da:	48 01 d0             	add    rax,rdx
ffff80000080b0dd:	48 83 c0 20          	add    rax,0x20
ffff80000080b0e1:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x1000000
ffff80000080b0e8:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:373
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff80000080b0e9:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080b0f0:	ff ff ff 
ffff80000080b0f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b0f7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b0f9:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b100:	ff ff ff 
ffff80000080b103:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b107:	48 98                	cdqe   
ffff80000080b109:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080b110:	48 01 d0             	add    rax,rdx
ffff80000080b113:	48 83 c0 20          	add    rax,0x20
ffff80000080b117:	48 c7 40 10 00 10 00 	mov    QWORD PTR [rax+0x10],0x1001000
ffff80000080b11e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:375
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
ffff80000080b11f:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080b126:	ff ff ff 
ffff80000080b129:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b12d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b12f:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b136:	ff ff ff 
ffff80000080b139:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b13d:	48 98                	cdqe   
ffff80000080b13f:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080b146:	48 01 d0             	add    rax,rdx
ffff80000080b149:	48 83 c0 30          	add    rax,0x30
ffff80000080b14d:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff80000080b154:	7f 00 00 
ffff80000080b157:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:382


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
ffff80000080b15b:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080b162:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:383
    int ecode=main(0,NULL);
ffff80000080b169:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffff80000080b170:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b175:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080b17a:	ff d0                	call   rax
ffff80000080b17c:	89 85 b4 fe ff ff    	mov    DWORD PTR [rbp-0x14c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:384
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
ffff80000080b182:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x14c]
ffff80000080b188:	48 98                	cdqe   
ffff80000080b18a:	48 c7 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],0x14
ffff80000080b191:	14 00 00 00 
ffff80000080b195:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffff80000080b19c:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
ffff80000080b1a3:	00 00 00 00 
ffff80000080b1a7:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0x0
ffff80000080b1ae:	00 00 00 00 
ffff80000080b1b2:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffff80000080b1b9:	00 00 00 00 
ffff80000080b1bd:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0x0
ffff80000080b1c4:	00 00 00 00 
ffff80000080b1c8:	48 c7 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],0x0
ffff80000080b1cf:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:191
        asm volatile(".byte 0x48\n"
ffff80000080b1d3:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080b1da:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffff80000080b1e1:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
ffff80000080b1e8:	48 8b 95 90 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x170]
ffff80000080b1ef:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
ffff80000080b1f6:	4c 8b 85 80 fe ff ff 	mov    r8,QWORD PTR [rbp-0x180]
ffff80000080b1fd:	4c 8b 8d 78 fe ff ff 	mov    r9,QWORD PTR [rbp-0x188]
ffff80000080b204:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:193
}
ffff80000080b207:	90                   	nop
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387 (discriminator 1)
    //
    //不应该执行到这
    while(1);
ffff80000080b208:	eb fe                	jmp    ffff80000080b208 <load_pe+0x8ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:389 (discriminator 2)
    return task[cur_proc].exit_code;
}
ffff80000080b20a:	48 81 c4 00 03 00 00 	add    rsp,0x300
ffff80000080b211:	5b                   	pop    rbx
ffff80000080b212:	41 5f                	pop    r15
ffff80000080b214:	5d                   	pop    rbp
ffff80000080b215:	c3                   	ret    

ffff80000080b216 <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:392

int get_module_addr(int mi)
{
ffff80000080b216:	f3 0f 1e fa          	endbr64 
ffff80000080b21a:	55                   	push   rbp
ffff80000080b21b:	48 89 e5             	mov    rbp,rsp
ffff80000080b21e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b21e <get_module_addr+0x8>
ffff80000080b225:	49 bb 0a 77 01 00 00 	movabs r11,0x1770a
ffff80000080b22c:	00 00 00 
ffff80000080b22f:	4c 01 d8             	add    rax,r11
ffff80000080b232:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:393
    return modules[mi].base;
ffff80000080b235:	48 ba e0 fd ff ff ff 	movabs rdx,0xfffffffffffffde0
ffff80000080b23c:	ff ff ff 
ffff80000080b23f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b243:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080b246:	48 63 d2             	movsxd rdx,edx
ffff80000080b249:	8b 04 d0             	mov    eax,DWORD PTR [rax+rdx*8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:394
}
ffff80000080b24c:	5d                   	pop    rbp
ffff80000080b24d:	c3                   	ret    

ffff80000080b24e <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:396
int dispose_library(int dlln)
{
ffff80000080b24e:	f3 0f 1e fa          	endbr64 
ffff80000080b252:	55                   	push   rbp
ffff80000080b253:	48 89 e5             	mov    rbp,rsp
ffff80000080b256:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b256 <dispose_library+0x8>
ffff80000080b25d:	49 bb d2 76 01 00 00 	movabs r11,0x176d2
ffff80000080b264:	00 00 00 
ffff80000080b267:	4c 01 d8             	add    rax,r11
ffff80000080b26a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397
    if(dlln<0||dlln>=MAX_DLLS)return -1;
ffff80000080b26d:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000080b271:	78 09                	js     ffff80000080b27c <dispose_library+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397 (discriminator 2)
ffff80000080b273:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffff80000080b27a:	7e 07                	jle    ffff80000080b283 <dispose_library+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397 (discriminator 3)
ffff80000080b27c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080b281:	eb 2c                	jmp    ffff80000080b2af <dispose_library+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:402
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
ffff80000080b283:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080b28a:	ff ff ff 
ffff80000080b28d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b291:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080b294:	48 98                	cdqe   
ffff80000080b296:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
ffff80000080b29d:	48 01 d0             	add    rax,rdx
ffff80000080b2a0:	48 83 c0 08          	add    rax,0x8
ffff80000080b2a4:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:403
    return 0;
ffff80000080b2aa:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:404
}
ffff80000080b2af:	5d                   	pop    rbp
ffff80000080b2b0:	c3                   	ret    

ffff80000080b2b1 <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:452

    return 0;
} */

int sys_insmod(char *path)
{
ffff80000080b2b1:	f3 0f 1e fa          	endbr64 
ffff80000080b2b5:	55                   	push   rbp
ffff80000080b2b6:	48 89 e5             	mov    rbp,rsp
ffff80000080b2b9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b2b9 <sys_insmod+0x8>
ffff80000080b2c0:	49 bb 6f 76 01 00 00 	movabs r11,0x1766f
ffff80000080b2c7:	00 00 00 
ffff80000080b2ca:	4c 01 d8             	add    rax,r11
ffff80000080b2cd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:454

}
ffff80000080b2d1:	90                   	nop
ffff80000080b2d2:	5d                   	pop    rbp
ffff80000080b2d3:	c3                   	ret    

ffff80000080b2d4 <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:456
int sys_rmmod(char *name)
{
ffff80000080b2d4:	f3 0f 1e fa          	endbr64 
ffff80000080b2d8:	55                   	push   rbp
ffff80000080b2d9:	48 89 e5             	mov    rbp,rsp
ffff80000080b2dc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b2dc <sys_rmmod+0x8>
ffff80000080b2e3:	49 bb 4c 76 01 00 00 	movabs r11,0x1764c
ffff80000080b2ea:	00 00 00 
ffff80000080b2ed:	4c 01 d8             	add    rax,r11
ffff80000080b2f0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:458

}
ffff80000080b2f4:	90                   	nop
ffff80000080b2f5:	5d                   	pop    rbp
ffff80000080b2f6:	c3                   	ret    

ffff80000080b2f7 <load_elf>:
load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:460
//切换进程前,在execve系统调用中
addr_t load_elf(struct file *elf) {
ffff80000080b2f7:	f3 0f 1e fa          	endbr64 
ffff80000080b2fb:	55                   	push   rbp
ffff80000080b2fc:	48 89 e5             	mov    rbp,rsp
ffff80000080b2ff:	41 57                	push   r15
ffff80000080b301:	41 55                	push   r13
ffff80000080b303:	41 54                	push   r12
ffff80000080b305:	53                   	push   rbx
ffff80000080b306:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffff80000080b30d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b30d <load_elf+0x16>
ffff80000080b314:	49 bb 1b 76 01 00 00 	movabs r11,0x1761b
ffff80000080b31b:	00 00 00 
ffff80000080b31e:	4c 01 db             	add    rbx,r11
ffff80000080b321:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:463
    // 读取文件头

    addr_t tmpla=KNL_BASE+0x80000000;
ffff80000080b328:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff80000080b32f:	80 ff ff 
ffff80000080b332:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:465
    //读取文件头，当前就是要加载程序的进程，所以不用搞临时映射
    addr_t pma= (addr_t) pmalloc();
ffff80000080b336:	49 89 df             	mov    r15,rbx
ffff80000080b339:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b33e:	48 ba 2c 04 fe ff ff 	movabs rdx,0xfffffffffffe042c
ffff80000080b345:	ff ff ff 
ffff80000080b348:	48 01 da             	add    rdx,rbx
ffff80000080b34b:	ff d2                	call   rdx
ffff80000080b34d:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:466
    smmap(pma , 0x400000, PAGE_PRESENT | PAGE_RWX | PAGE_FOR_ALL, current->pml4);
ffff80000080b351:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b358:	ff ff ff 
ffff80000080b35b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b35f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b362:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080b369:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b36d:	48 89 d1             	mov    rcx,rdx
ffff80000080b370:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080b375:	be 00 00 40 00       	mov    esi,0x400000
ffff80000080b37a:	48 89 c7             	mov    rdi,rax
ffff80000080b37d:	49 89 df             	mov    r15,rbx
ffff80000080b380:	48 b8 9a f2 fd ff ff 	movabs rax,0xfffffffffffdf29a
ffff80000080b387:	ff ff ff 
ffff80000080b38a:	48 01 d8             	add    rax,rbx
ffff80000080b38d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:467
    elf->position=0;
ffff80000080b38f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b396:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:469
    //读取文件头
    elf->f_ops->read(elf, (char *) 0x400000, PAGE_4K_SIZE, &elf->position);
ffff80000080b39d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b3a4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b3a8:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080b3ac:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff80000080b3b3:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b3ba:	48 89 d1             	mov    rcx,rdx
ffff80000080b3bd:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080b3c2:	be 00 00 40 00       	mov    esi,0x400000
ffff80000080b3c7:	48 89 c7             	mov    rdi,rax
ffff80000080b3ca:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:471

    unsigned long bin= (unsigned long) 0x400000;
ffff80000080b3cd:	48 c7 45 b0 00 00 40 	mov    QWORD PTR [rbp-0x50],0x400000
ffff80000080b3d4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:472
    Elf64_Ehdr *ehdr=(Elf64_Phdr*)bin;
ffff80000080b3d5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b3d9:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:473
    u16 entn=ehdr->e_phnum;
ffff80000080b3dd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b3e1:	0f b7 40 38          	movzx  eax,WORD PTR [rax+0x38]
ffff80000080b3e5:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:474
    u16 ents=ehdr->e_phentsize;
ffff80000080b3e9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b3ed:	0f b7 40 36          	movzx  eax,WORD PTR [rax+0x36]
ffff80000080b3f1:	66 89 45 a4          	mov    WORD PTR [rbp-0x5c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:475
    struct Elf64_Shdr* sh= (struct Elf64_Shdr *) (bin + ehdr->e_shoff);
ffff80000080b3f5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b3f9:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080b3fd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b401:	48 01 d0             	add    rax,rdx
ffff80000080b404:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:476
    Elf64_Phdr *ph= (Elf64_Phdr *) (bin + ehdr->e_phoff);
ffff80000080b408:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b40c:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080b410:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b414:	48 01 d0             	add    rax,rdx
ffff80000080b417:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:477
    for(int i=0;i<entn;i++){
ffff80000080b41b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff80000080b422:	e9 36 01 00 00       	jmp    ffff80000080b55d <load_elf+0x266>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:480
        //加载节
        if((ph->p_type|PT_LOAD)!=0){
            unsigned long off=ph->p_offset;
ffff80000080b427:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b42b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b42f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:481
            unsigned long fs=ph->p_filesz;
ffff80000080b433:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b437:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080b43b:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:482
            char* vptr= (char *) ph->p_vaddr;
ffff80000080b43f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b443:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b447:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:483
            elf->position=off;
ffff80000080b44e:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080b452:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b459:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:486

            //先映射好内存
            int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080b45c:	c7 85 74 ff ff ff 05 	mov    DWORD PTR [rbp-0x8c],0x5
ffff80000080b463:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:488
            if((ph->p_flags|PF_X)!=0||(ph->p_flags|PF_W)!=0)
                attr|=PAGE_RWX;
ffff80000080b466:	83 8d 74 ff ff ff 02 	or     DWORD PTR [rbp-0x8c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:489
            int pgc=fs/PAGE_4K_SIZE;
ffff80000080b46d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b471:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080b475:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:490
            if(!pgc)pgc=1;
ffff80000080b478:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
ffff80000080b47c:	75 07                	jne    ffff80000080b485 <load_elf+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:490 (discriminator 1)
ffff80000080b47e:	c7 45 d0 01 00 00 00 	mov    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:491
            for(int j=0;j<pgc;j++){
ffff80000080b485:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080b48c:	e9 89 00 00 00       	jmp    ffff80000080b51a <load_elf+0x223>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:492
                addr_t dest=(addr_t) (vptr + j * PAGE_4K_SIZE);
ffff80000080b491:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080b494:	c1 e0 0c             	shl    eax,0xc
ffff80000080b497:	48 63 d0             	movsxd rdx,eax
ffff80000080b49a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080b4a1:	48 01 d0             	add    rax,rdx
ffff80000080b4a4:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:493
                if(dest==0x400000)continue;
ffff80000080b4ab:	48 81 bd 68 ff ff ff 	cmp    QWORD PTR [rbp-0x98],0x400000
ffff80000080b4b2:	00 00 40 00 
ffff80000080b4b6:	74 5d                	je     ffff80000080b515 <load_elf+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:494
                smmap((addr_t) pmalloc(), dest, attr, current->pml4);
ffff80000080b4b8:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b4bf:	ff ff ff 
ffff80000080b4c2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b4c6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b4c9:	4c 8b a8 e0 00 00 00 	mov    r13,QWORD PTR [rax+0xe0]
ffff80000080b4d0:	44 8b a5 74 ff ff ff 	mov    r12d,DWORD PTR [rbp-0x8c]
ffff80000080b4d7:	49 89 df             	mov    r15,rbx
ffff80000080b4da:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b4df:	48 ba 2c 04 fe ff ff 	movabs rdx,0xfffffffffffe042c
ffff80000080b4e6:	ff ff ff 
ffff80000080b4e9:	48 01 da             	add    rdx,rbx
ffff80000080b4ec:	ff d2                	call   rdx
ffff80000080b4ee:	48 89 c7             	mov    rdi,rax
ffff80000080b4f1:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080b4f8:	4c 89 e9             	mov    rcx,r13
ffff80000080b4fb:	44 89 e2             	mov    edx,r12d
ffff80000080b4fe:	48 89 c6             	mov    rsi,rax
ffff80000080b501:	49 89 df             	mov    r15,rbx
ffff80000080b504:	48 b8 9a f2 fd ff ff 	movabs rax,0xfffffffffffdf29a
ffff80000080b50b:	ff ff ff 
ffff80000080b50e:	48 01 d8             	add    rax,rbx
ffff80000080b511:	ff d0                	call   rax
ffff80000080b513:	eb 01                	jmp    ffff80000080b516 <load_elf+0x21f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:493
                if(dest==0x400000)continue;
ffff80000080b515:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:491 (discriminator 2)
            for(int j=0;j<pgc;j++){
ffff80000080b516:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:491 (discriminator 1)
ffff80000080b51a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080b51d:	3b 45 d0             	cmp    eax,DWORD PTR [rbp-0x30]
ffff80000080b520:	0f 8c 6b ff ff ff    	jl     ffff80000080b491 <load_elf+0x19a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:497
            }
            //读取
            elf->f_ops->read(elf,vptr,fs,&elf->position);
ffff80000080b526:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b52d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b531:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080b535:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffff80000080b53c:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080b540:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
ffff80000080b547:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b54e:	48 89 c7             	mov    rdi,rax
ffff80000080b551:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:500

        }
        ph++;
ffff80000080b554:	48 83 45 d8 38       	add    QWORD PTR [rbp-0x28],0x38
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:477
    for(int i=0;i<entn;i++){
ffff80000080b559:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:477 (discriminator 1)
ffff80000080b55d:	0f b7 45 a6          	movzx  eax,WORD PTR [rbp-0x5a]
ffff80000080b561:	39 45 d4             	cmp    DWORD PTR [rbp-0x2c],eax
ffff80000080b564:	0f 8c bd fe ff ff    	jl     ffff80000080b427 <load_elf+0x130>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:503
    }
    //初始化堆
    chunk_header hdrtmp={
ffff80000080b56a:	c7 85 50 ff ff ff 00 	mov    DWORD PTR [rbp-0xb0],0x0
ffff80000080b571:	00 00 00 
ffff80000080b574:	c7 85 54 ff ff ff 00 	mov    DWORD PTR [rbp-0xac],0x0
ffff80000080b57b:	00 00 00 
ffff80000080b57e:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
ffff80000080b585:	00 00 00 00 
ffff80000080b589:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x0
ffff80000080b590:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:511
            .pgn=0,
            .prev=NULL
    };
    //空堆
    //分配堆
    smmap((addr_t) pmalloc(), HEAP_BASE, PAGE_PRESENT | PAGE_FOR_ALL | PAGE_RWX, current->pml4);
ffff80000080b594:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b59b:	ff ff ff 
ffff80000080b59e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5a5:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff80000080b5ac:	49 89 df             	mov    r15,rbx
ffff80000080b5af:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b5b4:	48 ba 2c 04 fe ff ff 	movabs rdx,0xfffffffffffe042c
ffff80000080b5bb:	ff ff ff 
ffff80000080b5be:	48 01 da             	add    rdx,rbx
ffff80000080b5c1:	ff d2                	call   rdx
ffff80000080b5c3:	4c 89 e1             	mov    rcx,r12
ffff80000080b5c6:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080b5cb:	be 00 00 00 01       	mov    esi,0x1000000
ffff80000080b5d0:	48 89 c7             	mov    rdi,rax
ffff80000080b5d3:	49 89 df             	mov    r15,rbx
ffff80000080b5d6:	48 b8 9a f2 fd ff ff 	movabs rax,0xfffffffffffdf29a
ffff80000080b5dd:	ff ff ff 
ffff80000080b5e0:	48 01 d8             	add    rax,rbx
ffff80000080b5e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:512
    memset((unsigned char *) HEAP_BASE, 0, CHUNK_SIZE);
ffff80000080b5e5:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080b5ea:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b5ef:	bf 00 00 00 01       	mov    edi,0x1000000
ffff80000080b5f4:	49 89 df             	mov    r15,rbx
ffff80000080b5f7:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff80000080b5fe:	ff ff ff 
ffff80000080b601:	48 01 d8             	add    rax,rbx
ffff80000080b604:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:513
    current->mem_struct.heap_base=HEAP_BASE;
ffff80000080b606:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b60d:	ff ff ff 
ffff80000080b610:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b614:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b617:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff80000080b61e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:514
    current->mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff80000080b61f:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b626:	ff ff ff 
ffff80000080b629:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b62d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b630:	48 c7 40 30 00 10 00 	mov    QWORD PTR [rax+0x30],0x1001000
ffff80000080b637:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:516
    //设置栈
    current->mem_struct.stack_top=STACK_TOP;
ffff80000080b638:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080b63f:	ff ff ff 
ffff80000080b642:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b646:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b649:	48 b9 00 f0 ff ff ff 	movabs rcx,0x7ffffffff000
ffff80000080b650:	7f 00 00 
ffff80000080b653:	48 89 48 40          	mov    QWORD PTR [rax+0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:517
    addr_t entry=ehdr->e_entry;
ffff80000080b657:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b65b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b65f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:519
    //从系统调用返回
    return entry;
ffff80000080b663:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:520
ffff80000080b667:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffff80000080b66e:	5b                   	pop    rbx
ffff80000080b66f:	41 5c                	pop    r12
ffff80000080b671:	41 5d                	pop    r13
ffff80000080b673:	41 5f                	pop    r15
ffff80000080b675:	5d                   	pop    rbp
ffff80000080b676:	c3                   	ret    
ffff80000080b677:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffff80000080b67e:	00 00 

ffff80000080b680 <_syscall>:
_syscall():
ffff80000080b680:	fa                   	cli    
ffff80000080b681:	55                   	push   rbp
ffff80000080b682:	48 bd 00 80 10 00 00 	movabs rbp,0xffff800000108000
ffff80000080b689:	80 ff ff 
ffff80000080b68c:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
ffff80000080b690:	48 8b 65 24          	mov    rsp,QWORD PTR [rbp+0x24]
ffff80000080b694:	6a 2b                	push   0x2b
ffff80000080b696:	54                   	push   rsp
ffff80000080b697:	9c                   	pushf  
ffff80000080b698:	6a 33                	push   0x33
ffff80000080b69a:	51                   	push   rcx
ffff80000080b69b:	50                   	push   rax
ffff80000080b69c:	53                   	push   rbx
ffff80000080b69d:	51                   	push   rcx
ffff80000080b69e:	52                   	push   rdx
ffff80000080b69f:	57                   	push   rdi
ffff80000080b6a0:	56                   	push   rsi
ffff80000080b6a1:	41 50                	push   r8
ffff80000080b6a3:	41 51                	push   r9
ffff80000080b6a5:	41 52                	push   r10
ffff80000080b6a7:	41 53                	push   r11
ffff80000080b6a9:	41 54                	push   r12
ffff80000080b6ab:	41 55                	push   r13
ffff80000080b6ad:	41 56                	push   r14
ffff80000080b6af:	41 57                	push   r15
ffff80000080b6b1:	66 8c c0             	mov    ax,es
ffff80000080b6b4:	50                   	push   rax
ffff80000080b6b5:	66 8c d8             	mov    ax,ds
ffff80000080b6b8:	50                   	push   rax
ffff80000080b6b9:	66 b8 10 00          	mov    ax,0x10
ffff80000080b6bd:	8e c0                	mov    es,eax
ffff80000080b6bf:	8e d8                	mov    ds,eax
ffff80000080b6c1:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
ffff80000080b6c6:	41 53                	push   r11
ffff80000080b6c8:	51                   	push   rcx
ffff80000080b6c9:	49 87 ca             	xchg   r10,rcx
ffff80000080b6cc:	57                   	push   rdi
ffff80000080b6cd:	48 bf 48 85 40 00 00 	movabs rdi,0xffff800000408548
ffff80000080b6d4:	80 ff ff 
ffff80000080b6d7:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
ffff80000080b6da:	4c 89 97 6c 02 00 00 	mov    QWORD PTR [rdi+0x26c],r10
ffff80000080b6e1:	5f                   	pop    rdi
ffff80000080b6e2:	e8 3a 54 ff ff       	call   ffff800000800b21 <syscall>

ffff80000080b6e7 <_syscall_sysret>:
_syscall_sysret():
ffff80000080b6e7:	4c 87 d1             	xchg   rcx,r10
ffff80000080b6ea:	59                   	pop    rcx
ffff80000080b6eb:	41 5b                	pop    r11
ffff80000080b6ed:	58                   	pop    rax
ffff80000080b6ee:	8e d8                	mov    ds,eax
ffff80000080b6f0:	58                   	pop    rax
ffff80000080b6f1:	8e c0                	mov    es,eax
ffff80000080b6f3:	41 5f                	pop    r15
ffff80000080b6f5:	41 5e                	pop    r14
ffff80000080b6f7:	41 5d                	pop    r13
ffff80000080b6f9:	41 5c                	pop    r12
ffff80000080b6fb:	41 5b                	pop    r11
ffff80000080b6fd:	41 5a                	pop    r10
ffff80000080b6ff:	41 59                	pop    r9
ffff80000080b701:	41 58                	pop    r8
ffff80000080b703:	5e                   	pop    rsi
ffff80000080b704:	5f                   	pop    rdi
ffff80000080b705:	5a                   	pop    rdx
ffff80000080b706:	59                   	pop    rcx
ffff80000080b707:	5b                   	pop    rbx
ffff80000080b708:	48 83 c4 08          	add    rsp,0x8
ffff80000080b70c:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
ffff80000080b710:	5d                   	pop    rbp
ffff80000080b711:	fb                   	sti    
ffff80000080b712:	48 0f 07             	sysretq 

ffff80000080b715 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:27
static u32 font_width_bytes;
static u8 *glyph_table;
static u32 bytes_per_glyph, glyph_nr;
int font_size=1;
void init_framebuffer()
{
ffff80000080b715:	f3 0f 1e fa          	endbr64 
ffff80000080b719:	55                   	push   rbp
ffff80000080b71a:	48 89 e5             	mov    rbp,rsp
ffff80000080b71d:	41 57                	push   r15
ffff80000080b71f:	53                   	push   rbx
ffff80000080b720:	48 83 ec 50          	sub    rsp,0x50
ffff80000080b724:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b724 <init_framebuffer+0xf>
ffff80000080b72b:	49 bb 04 72 01 00 00 	movabs r11,0x17204
ffff80000080b732:	00 00 00 
ffff80000080b735:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
ffff80000080b738:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b73f:	ff ff ff 
ffff80000080b742:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b746:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080b749:	89 c0                	mov    eax,eax
ffff80000080b74b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:30
    size_t h=framebuffer.common.framebuffer_height;
ffff80000080b74f:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b756:	ff ff ff 
ffff80000080b759:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b75d:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080b760:	89 c0                	mov    eax,eax
ffff80000080b762:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
ffff80000080b766:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b76d:	ff ff ff 
ffff80000080b770:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b774:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080b778:	c0 e8 03             	shr    al,0x3
ffff80000080b77b:	0f b6 c0             	movzx  eax,al
ffff80000080b77e:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t inter=framebuffer.common.framebuffer_pitch;
ffff80000080b782:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b789:	ff ff ff 
ffff80000080b78c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b790:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080b793:	89 c0                	mov    eax,eax
ffff80000080b795:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t pc=w*h;
ffff80000080b799:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b79d:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
ffff80000080b7a2:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t size=h*inter;
ffff80000080b7a6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b7aa:	48 0f af 45 b8       	imul   rax,QWORD PTR [rbp-0x48]
ffff80000080b7af:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    int pgc=size/PAGE_SIZE;
ffff80000080b7b3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b7b7:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080b7be:	48 85 c0             	test   rax,rax
ffff80000080b7c1:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080b7c5:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080b7c9:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    addr_t p=FRAMEBUFFER_ADDR;
ffff80000080b7cc:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080b7d3:	80 ff ff 
ffff80000080b7d6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    addr_t pp=framebuffer.common.framebuffer_addr;
ffff80000080b7da:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b7e1:	ff ff ff 
ffff80000080b7e4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b7e8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b7ec:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    for (size_t i = 0; i < pgc; i++)
ffff80000080b7f0:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080b7f7:	00 
ffff80000080b7f8:	eb 44                	jmp    ffff80000080b83e <init_framebuffer+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
ffff80000080b7fa:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080b7fe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b802:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
ffff80000080b809:	80 ff ff 
ffff80000080b80c:	48 89 d1             	mov    rcx,rdx
ffff80000080b80f:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080b814:	48 89 c7             	mov    rdi,rax
ffff80000080b817:	49 89 df             	mov    r15,rbx
ffff80000080b81a:	48 b8 9a f2 fd ff ff 	movabs rax,0xfffffffffffdf29a
ffff80000080b821:	ff ff ff 
ffff80000080b824:	48 01 d8             	add    rax,rbx
ffff80000080b827:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:41 (discriminator 3)
        pp+=PAGE_SIZE;
ffff80000080b829:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080b830:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
        p+=PAGE_SIZE;
ffff80000080b831:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffff80000080b838:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
ffff80000080b839:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 1)
ffff80000080b83e:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080b841:	48 98                	cdqe   
ffff80000080b843:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080b847:	7c b1                	jl     ffff80000080b7fa <init_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:46
    }
    
    
}
ffff80000080b849:	90                   	nop
ffff80000080b84a:	90                   	nop
ffff80000080b84b:	48 83 c4 50          	add    rsp,0x50
ffff80000080b84f:	5b                   	pop    rbx
ffff80000080b850:	41 5f                	pop    r15
ffff80000080b852:	5d                   	pop    rbp
ffff80000080b853:	c3                   	ret    

ffff80000080b854 <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
void init_font(){
ffff80000080b854:	f3 0f 1e fa          	endbr64 
ffff80000080b858:	55                   	push   rbp
ffff80000080b859:	48 89 e5             	mov    rbp,rsp
ffff80000080b85c:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080b85c <init_font+0x8>
ffff80000080b863:	49 bb cc 70 01 00 00 	movabs r11,0x170cc
ffff80000080b86a:	00 00 00 
ffff80000080b86d:	4c 01 d9             	add    rcx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
ffff80000080b870:	48 b8 f8 8c bf ff ff 	movabs rax,0xffffffffffbf8cf8
ffff80000080b877:	ff ff ff 
ffff80000080b87a:	48 ba 98 fd ff ff ff 	movabs rdx,0xfffffffffffffd98
ffff80000080b881:	ff ff ff 
ffff80000080b884:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff80000080b888:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:50

    font_width_bytes = (boot_font->width + 7) / 8;
ffff80000080b88c:	48 b8 f8 8c bf ff ff 	movabs rax,0xffffffffffbf8cf8
ffff80000080b893:	ff ff ff 
ffff80000080b896:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b89a:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080b89d:	83 c0 07             	add    eax,0x7
ffff80000080b8a0:	c1 e8 03             	shr    eax,0x3
ffff80000080b8a3:	89 c2                	mov    edx,eax
ffff80000080b8a5:	48 b8 08 8d bf ff ff 	movabs rax,0xffffffffffbf8d08
ffff80000080b8ac:	ff ff ff 
ffff80000080b8af:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51
    font_width = font_width_bytes * 8;
ffff80000080b8b2:	48 b8 08 8d bf ff ff 	movabs rax,0xffffffffffbf8d08
ffff80000080b8b9:	ff ff ff 
ffff80000080b8bc:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080b8bf:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff80000080b8c6:	48 b8 00 8d bf ff ff 	movabs rax,0xffffffffffbf8d00
ffff80000080b8cd:	ff ff ff 
ffff80000080b8d0:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_height = boot_font->height;
ffff80000080b8d3:	48 b8 f8 8c bf ff ff 	movabs rax,0xffffffffffbf8cf8
ffff80000080b8da:	ff ff ff 
ffff80000080b8dd:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b8e1:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080b8e4:	48 ba 04 8d bf ff ff 	movabs rdx,0xffffffffffbf8d04
ffff80000080b8eb:	ff ff ff 
ffff80000080b8ee:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:54

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
ffff80000080b8f1:	48 b8 f8 8c bf ff ff 	movabs rax,0xffffffffffbf8cf8
ffff80000080b8f8:	ff ff ff 
ffff80000080b8fb:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b8ff:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080b902:	89 c2                	mov    edx,eax
ffff80000080b904:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff80000080b90b:	ff ff ff 
ffff80000080b90e:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b912:	48 01 c2             	add    rdx,rax
ffff80000080b915:	48 b8 10 8d bf ff ff 	movabs rax,0xffffffffffbf8d10
ffff80000080b91c:	ff ff ff 
ffff80000080b91f:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55
    glyph_nr = boot_font->glyph_nr;
ffff80000080b923:	48 b8 f8 8c bf ff ff 	movabs rax,0xffffffffffbf8cf8
ffff80000080b92a:	ff ff ff 
ffff80000080b92d:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b931:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080b934:	48 ba 1c 8d bf ff ff 	movabs rdx,0xffffffffffbf8d1c
ffff80000080b93b:	ff ff ff 
ffff80000080b93e:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    bytes_per_glyph = boot_font->bytes_per_glyph;
ffff80000080b941:	48 b8 f8 8c bf ff ff 	movabs rax,0xffffffffffbf8cf8
ffff80000080b948:	ff ff ff 
ffff80000080b94b:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b94f:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080b952:	48 ba 18 8d bf ff ff 	movabs rdx,0xffffffffffbf8d18
ffff80000080b959:	ff ff ff 
ffff80000080b95c:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:58

    fb_cursor_x = fb_cursor_y = 0;
ffff80000080b95f:	48 b8 e8 8c bf ff ff 	movabs rax,0xffffffffffbf8ce8
ffff80000080b966:	ff ff ff 
ffff80000080b969:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
ffff80000080b970:	48 b8 e8 8c bf ff ff 	movabs rax,0xffffffffffbf8ce8
ffff80000080b977:	ff ff ff 
ffff80000080b97a:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080b97d:	48 ba e4 8c bf ff ff 	movabs rdx,0xffffffffffbf8ce4
ffff80000080b984:	ff ff ff 
ffff80000080b987:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
ffff80000080b98a:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b991:	ff ff ff 
ffff80000080b994:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b998:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080b99b:	48 ba 00 8d bf ff ff 	movabs rdx,0xffffffffffbf8d00
ffff80000080b9a2:	ff ff ff 
ffff80000080b9a5:	8b 34 11             	mov    esi,DWORD PTR [rcx+rdx*1]
ffff80000080b9a8:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080b9ad:	f7 f6                	div    esi
ffff80000080b9af:	89 c2                	mov    edx,eax
ffff80000080b9b1:	48 b8 ec 8c bf ff ff 	movabs rax,0xffffffffffbf8cec
ffff80000080b9b8:	ff ff ff 
ffff80000080b9bb:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
ffff80000080b9be:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080b9c5:	ff ff ff 
ffff80000080b9c8:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b9cc:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080b9cf:	48 ba 04 8d bf ff ff 	movabs rdx,0xffffffffffbf8d04
ffff80000080b9d6:	ff ff ff 
ffff80000080b9d9:	8b 3c 11             	mov    edi,DWORD PTR [rcx+rdx*1]
ffff80000080b9dc:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080b9e1:	f7 f7                	div    edi
ffff80000080b9e3:	89 c2                	mov    edx,eax
ffff80000080b9e5:	48 b8 f0 8c bf ff ff 	movabs rax,0xffffffffffbf8cf0
ffff80000080b9ec:	ff ff ff 
ffff80000080b9ef:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    font_size=1;
ffff80000080b9f2:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080b9f9:	ff ff ff 
ffff80000080b9fc:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080ba00:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
}
ffff80000080ba06:	90                   	nop
ffff80000080ba07:	5d                   	pop    rbp
ffff80000080ba08:	c3                   	ret    

ffff80000080ba09 <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
ffff80000080ba09:	f3 0f 1e fa          	endbr64 
ffff80000080ba0d:	55                   	push   rbp
ffff80000080ba0e:	48 89 e5             	mov    rbp,rsp
ffff80000080ba11:	53                   	push   rbx
ffff80000080ba12:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ba12 <set_framebuffer+0x9>
ffff80000080ba19:	49 bb 16 6f 01 00 00 	movabs r11,0x16f16
ffff80000080ba20:	00 00 00 
ffff80000080ba23:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:65
    framebuffer=tag;
ffff80000080ba26:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080ba2d:	ff ff ff 
ffff80000080ba30:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080ba34:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff80000080ba38:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
ffff80000080ba3c:	48 89 08             	mov    QWORD PTR [rax],rcx
ffff80000080ba3f:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
ffff80000080ba43:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff80000080ba47:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
ffff80000080ba4b:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffff80000080ba4f:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffff80000080ba53:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff80000080ba57:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
}
ffff80000080ba5b:	90                   	nop
ffff80000080ba5c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080ba60:	c9                   	leave  
ffff80000080ba61:	c3                   	ret    

ffff80000080ba62 <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68

void fill_rect(int x,int y,int w,int h,unsigned int color){
ffff80000080ba62:	f3 0f 1e fa          	endbr64 
ffff80000080ba66:	55                   	push   rbp
ffff80000080ba67:	48 89 e5             	mov    rbp,rsp
ffff80000080ba6a:	4c 8d 0d f9 ff ff ff 	lea    r9,[rip+0xfffffffffffffff9]        # ffff80000080ba6a <fill_rect+0x8>
ffff80000080ba71:	49 bb be 6e 01 00 00 	movabs r11,0x16ebe
ffff80000080ba78:	00 00 00 
ffff80000080ba7b:	4d 01 d9             	add    r9,r11
ffff80000080ba7e:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ba81:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ba84:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ba87:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff80000080ba8a:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
ffff80000080ba8e:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080ba95:	80 ff ff 
ffff80000080ba98:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
ffff80000080ba9c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080ba9f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffff80000080baa2:	e9 82 00 00 00       	jmp    ffff80000080bb29 <fill_rect+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72
        for(int px=y;px<w+y;px++){
ffff80000080baa7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080baaa:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffff80000080baad:	eb 69                	jmp    ffff80000080bb18 <fill_rect+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080baaf:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080bab6:	ff ff ff 
ffff80000080bab9:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080babd:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff80000080bac0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080bac3:	0f af c2             	imul   eax,edx
ffff80000080bac6:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:74 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080bac8:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080bacf:	ff ff ff 
ffff80000080bad2:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080bad6:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080bada:	0f b6 c0             	movzx  eax,al
ffff80000080badd:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
ffff80000080bae1:	8d 50 07             	lea    edx,[rax+0x7]
ffff80000080bae4:	85 c0                	test   eax,eax
ffff80000080bae6:	0f 48 c2             	cmovs  eax,edx
ffff80000080bae9:	c1 f8 03             	sar    eax,0x3
ffff80000080baec:	48 98                	cdqe   
ffff80000080baee:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080baf2:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080baf9:	80 ff ff 
ffff80000080bafc:	48 01 d0             	add    rax,rdx
ffff80000080baff:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 3)
            fb=(unsigned int*)ptr;
ffff80000080bb03:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bb07:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
            *fb=color;
ffff80000080bb0b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bb0f:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080bb12:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 3)
        for(int px=y;px<w+y;px++){
ffff80000080bb14:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 1)
ffff80000080bb18:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080bb1b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bb1e:	01 d0                	add    eax,edx
ffff80000080bb20:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
ffff80000080bb23:	7c 8a                	jl     ffff80000080baaf <fill_rect+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 2)
    for(int py=x;py<h+x;py++){
ffff80000080bb25:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 1)
ffff80000080bb29:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080bb2c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bb2f:	01 d0                	add    eax,edx
ffff80000080bb31:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffff80000080bb34:	0f 8c 6d ff ff ff    	jl     ffff80000080baa7 <fill_rect+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79
        }
    }
}
ffff80000080bb3a:	90                   	nop
ffff80000080bb3b:	90                   	nop
ffff80000080bb3c:	5d                   	pop    rbp
ffff80000080bb3d:	c3                   	ret    

ffff80000080bb3e <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:82
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
ffff80000080bb3e:	f3 0f 1e fa          	endbr64 
ffff80000080bb42:	55                   	push   rbp
ffff80000080bb43:	48 89 e5             	mov    rbp,rsp
ffff80000080bb46:	41 57                	push   r15
ffff80000080bb48:	53                   	push   rbx
ffff80000080bb49:	48 83 ec 30          	sub    rsp,0x30
ffff80000080bb4d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080bb4d <draw_text+0xf>
ffff80000080bb54:	49 bb db 6d 01 00 00 	movabs r11,0x16ddb
ffff80000080bb5b:	00 00 00 
ffff80000080bb5e:	4c 01 db             	add    rbx,r11
ffff80000080bb61:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080bb64:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080bb67:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080bb6a:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
    int tx=x;
ffff80000080bb6e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bb71:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080bb74:	eb 75                	jmp    ffff80000080bbeb <draw_text+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
    {
        if(*str=='\n')
ffff80000080bb76:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bb7a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bb7d:	3c 0a                	cmp    al,0xa
ffff80000080bb7f:	75 23                	jne    ffff80000080bba4 <draw_text+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
        {
            y+=font_height*size;
ffff80000080bb81:	48 b8 04 8d bf ff ff 	movabs rax,0xffffffffffbf8d04
ffff80000080bb88:	ff ff ff 
ffff80000080bb8b:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080bb8e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080bb91:	0f af d0             	imul   edx,eax
ffff80000080bb94:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bb97:	01 d0                	add    eax,edx
ffff80000080bb99:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:89
            tx=x;
ffff80000080bb9c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bb9f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080bba2:	eb 42                	jmp    ffff80000080bbe6 <draw_text+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
        }
        else
        {
            draw_letter(tx,y,size,*str);
ffff80000080bba4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bba8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bbab:	0f be c8             	movsx  ecx,al
ffff80000080bbae:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080bbb1:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
ffff80000080bbb4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080bbb7:	89 c7                	mov    edi,eax
ffff80000080bbb9:	49 89 df             	mov    r15,rbx
ffff80000080bbbc:	48 b8 d9 92 fe ff ff 	movabs rax,0xfffffffffffe92d9
ffff80000080bbc3:	ff ff ff 
ffff80000080bbc6:	48 01 d8             	add    rax,rbx
ffff80000080bbc9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:94
            tx+=size*font_width;
ffff80000080bbcb:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080bbce:	48 b8 00 8d bf ff ff 	movabs rax,0xffffffffffbf8d00
ffff80000080bbd5:	ff ff ff 
ffff80000080bbd8:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080bbdb:	0f af d0             	imul   edx,eax
ffff80000080bbde:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080bbe1:	01 d0                	add    eax,edx
ffff80000080bbe3:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:96
        }
        str++;
ffff80000080bbe6:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080bbeb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bbef:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bbf2:	84 c0                	test   al,al
ffff80000080bbf4:	75 80                	jne    ffff80000080bb76 <draw_text+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
    }
}
ffff80000080bbf6:	90                   	nop
ffff80000080bbf7:	90                   	nop
ffff80000080bbf8:	48 83 c4 30          	add    rsp,0x30
ffff80000080bbfc:	5b                   	pop    rbx
ffff80000080bbfd:	41 5f                	pop    r15
ffff80000080bbff:	5d                   	pop    rbp
ffff80000080bc00:	c3                   	ret    

ffff80000080bc01 <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:99
void draw_letter(int x, volatile int y, int size, char c) {
ffff80000080bc01:	f3 0f 1e fa          	endbr64 
ffff80000080bc05:	55                   	push   rbp
ffff80000080bc06:	48 89 e5             	mov    rbp,rsp
ffff80000080bc09:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bc09 <draw_letter+0x8>
ffff80000080bc10:	49 bb 1f 6d 01 00 00 	movabs r11,0x16d1f
ffff80000080bc17:	00 00 00 
ffff80000080bc1a:	4c 01 d8             	add    rax,r11
ffff80000080bc1d:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080bc20:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
ffff80000080bc23:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
ffff80000080bc26:	89 ca                	mov    edx,ecx
ffff80000080bc28:	88 55 c0             	mov    BYTE PTR [rbp-0x40],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
    u8 *glyph = glyph_table;
ffff80000080bc2b:	48 ba 10 8d bf ff ff 	movabs rdx,0xffffffffffbf8d10
ffff80000080bc32:	ff ff ff 
ffff80000080bc35:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bc39:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:101
    if (c < glyph_nr) {
ffff80000080bc3d:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080bc41:	48 ba 1c 8d bf ff ff 	movabs rdx,0xffffffffffbf8d1c
ffff80000080bc48:	ff ff ff 
ffff80000080bc4b:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bc4e:	39 d1                	cmp    ecx,edx
ffff80000080bc50:	73 1a                	jae    ffff80000080bc6c <draw_letter+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
        glyph += c * bytes_per_glyph;
ffff80000080bc52:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080bc56:	48 ba 18 8d bf ff ff 	movabs rdx,0xffffffffffbf8d18
ffff80000080bc5d:	ff ff ff 
ffff80000080bc60:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bc63:	0f af d1             	imul   edx,ecx
ffff80000080bc66:	89 d2                	mov    edx,edx
ffff80000080bc68:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080bc6c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080bc73:	e9 f8 00 00 00       	jmp    ffff80000080bd70 <draw_letter+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        u8 mask = 1 << 7;
ffff80000080bc78:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080bc7c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080bc83:	e9 bb 00 00 00       	jmp    ffff80000080bd43 <draw_letter+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
            int px=x+ch_x*size;
ffff80000080bc88:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080bc8b:	89 d1                	mov    ecx,edx
ffff80000080bc8d:	0f af 4d ec          	imul   ecx,DWORD PTR [rbp-0x14]
ffff80000080bc91:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080bc94:	01 ca                	add    edx,ecx
ffff80000080bc96:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
            int py=y+ch_y*size;
ffff80000080bc99:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080bc9c:	89 d1                	mov    ecx,edx
ffff80000080bc9e:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
ffff80000080bca2:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff80000080bca5:	01 ca                	add    edx,ecx
ffff80000080bca7:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080bcaa:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bcb1:	ff ff ff 
ffff80000080bcb4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bcb8:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080bcbb:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080bcbe:	0f af d1             	imul   edx,ecx
ffff80000080bcc1:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112
                     +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080bcc3:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bcca:	ff ff ff 
ffff80000080bccd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bcd1:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080bcd5:	0f b6 d2             	movzx  edx,dl
ffff80000080bcd8:	0f af 55 e8          	imul   edx,DWORD PTR [rbp-0x18]
ffff80000080bcdc:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080bcdf:	85 d2                	test   edx,edx
ffff80000080bce1:	0f 48 d1             	cmovs  edx,ecx
ffff80000080bce4:	c1 fa 03             	sar    edx,0x3
ffff80000080bce7:	48 63 d2             	movsxd rdx,edx
ffff80000080bcea:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080bcee:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080bcf5:	80 ff ff 
ffff80000080bcf8:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080bcfb:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            if ((*(glyph + ch_x / 8) & mask) != 0) {
ffff80000080bcff:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080bd02:	c1 ea 03             	shr    edx,0x3
ffff80000080bd05:	89 d1                	mov    ecx,edx
ffff80000080bd07:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080bd0b:	48 01 ca             	add    rdx,rcx
ffff80000080bd0e:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080bd11:	22 55 f3             	and    dl,BYTE PTR [rbp-0xd]
ffff80000080bd14:	84 d2                	test   dl,dl
ffff80000080bd16:	74 0c                	je     ffff80000080bd24 <draw_letter+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
                *ptr=-1;
ffff80000080bd18:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080bd1c:	c7 02 ff ff ff ff    	mov    DWORD PTR [rdx],0xffffffff
ffff80000080bd22:	eb 0a                	jmp    ffff80000080bd2e <draw_letter+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
            } else {
                *ptr=0;
ffff80000080bd24:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080bd28:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:119
            }

            mask >>= 1;
ffff80000080bd2e:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            if (ch_x % 8 == 0) {
ffff80000080bd31:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080bd34:	83 e2 07             	and    edx,0x7
ffff80000080bd37:	85 d2                	test   edx,edx
ffff80000080bd39:	75 04                	jne    ffff80000080bd3f <draw_letter+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:121
                mask = 1 << 7;
ffff80000080bd3b:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080bd3f:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 1)
ffff80000080bd43:	48 ba 00 8d bf ff ff 	movabs rdx,0xffffffffffbf8d00
ffff80000080bd4a:	ff ff ff 
ffff80000080bd4d:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bd50:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080bd53:	0f 82 2f ff ff ff    	jb     ffff80000080bc88 <draw_letter+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
ffff80000080bd59:	48 ba 08 8d bf ff ff 	movabs rdx,0xffffffffffbf8d08
ffff80000080bd60:	ff ff ff 
ffff80000080bd63:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bd66:	89 d2                	mov    edx,edx
ffff80000080bd68:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080bd6c:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 1)
ffff80000080bd70:	48 ba 04 8d bf ff ff 	movabs rdx,0xffffffffffbf8d04
ffff80000080bd77:	ff ff ff 
ffff80000080bd7a:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bd7d:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080bd80:	0f 82 f2 fe ff ff    	jb     ffff80000080bc78 <draw_letter+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:127
    }
}
ffff80000080bd86:	90                   	nop
ffff80000080bd87:	90                   	nop
ffff80000080bd88:	5d                   	pop    rbp
ffff80000080bd89:	c3                   	ret    

ffff80000080bd8a <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129
//向上滚动一个像素
void scr_up(){
ffff80000080bd8a:	f3 0f 1e fa          	endbr64 
ffff80000080bd8e:	55                   	push   rbp
ffff80000080bd8f:	48 89 e5             	mov    rbp,rsp
ffff80000080bd92:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bd92 <scr_up+0x8>
ffff80000080bd99:	49 bb 96 6b 01 00 00 	movabs r11,0x16b96
ffff80000080bda0:	00 00 00 
ffff80000080bda3:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080bda6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080bdad:	e9 ad 00 00 00       	jmp    ffff80000080be5f <scr_up+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080bdb2:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080bdb9:	e9 81 00 00 00       	jmp    ffff80000080be3f <scr_up+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
                    dy*framebuffer.common.framebuffer_pitch
ffff80000080bdbe:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bdc5:	ff ff ff 
ffff80000080bdc8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bdcc:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080bdcf:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080bdd2:	0f af d1             	imul   edx,ecx
ffff80000080bdd5:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134 (discriminator 3)
                    +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080bdd7:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bdde:	ff ff ff 
ffff80000080bde1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bde5:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080bde9:	0f b6 d2             	movzx  edx,dl
ffff80000080bdec:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080bdf0:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080bdf3:	85 d2                	test   edx,edx
ffff80000080bdf5:	0f 48 d1             	cmovs  edx,ecx
ffff80000080bdf8:	c1 fa 03             	sar    edx,0x3
ffff80000080bdfb:	48 63 d2             	movsxd rdx,edx
ffff80000080bdfe:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080be02:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080be09:	80 ff ff 
ffff80000080be0c:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:132 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
ffff80000080be0f:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135 (discriminator 3)
            *p=*(p+framebuffer.common.framebuffer_pitch);
ffff80000080be13:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080be1a:	ff ff ff 
ffff80000080be1d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080be21:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080be24:	89 d1                	mov    ecx,edx
ffff80000080be26:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080be2a:	48 01 ca             	add    rdx,rcx
ffff80000080be2d:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080be30:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080be34:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136 (discriminator 3)
            p++;
ffff80000080be36:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 3)
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080be3b:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 1)
ffff80000080be3f:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080be46:	ff ff ff 
ffff80000080be49:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080be4d:	8b 4a 14             	mov    ecx,DWORD PTR [rdx+0x14]
ffff80000080be50:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080be53:	39 d1                	cmp    ecx,edx
ffff80000080be55:	0f 87 63 ff ff ff    	ja     ffff80000080bdbe <scr_up+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 2)
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080be5b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 1)
ffff80000080be5f:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080be66:	ff ff ff 
ffff80000080be69:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080be6d:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080be70:	8d 4a ff             	lea    ecx,[rdx-0x1]
ffff80000080be73:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080be76:	39 d1                	cmp    ecx,edx
ffff80000080be78:	0f 87 34 ff ff ff    	ja     ffff80000080bdb2 <scr_up+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:142
        }

    }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
ffff80000080be7e:	90                   	nop
ffff80000080be7f:	90                   	nop
ffff80000080be80:	5d                   	pop    rbp
ffff80000080be81:	c3                   	ret    

ffff80000080be82 <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:143
void scr_down(){
ffff80000080be82:	f3 0f 1e fa          	endbr64 
ffff80000080be86:	55                   	push   rbp
ffff80000080be87:	48 89 e5             	mov    rbp,rsp
ffff80000080be8a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080be8a <scr_down+0x8>
ffff80000080be91:	49 bb 9e 6a 01 00 00 	movabs r11,0x16a9e
ffff80000080be98:	00 00 00 
ffff80000080be9b:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080be9e:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffff80000080bea5:	e9 aa 00 00 00       	jmp    ffff80000080bf54 <scr_down+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080beaa:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080beb1:	e9 82 00 00 00       	jmp    ffff80000080bf38 <scr_down+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080beb6:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bebd:	ff ff ff 
ffff80000080bec0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bec4:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080bec7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080beca:	0f af d1             	imul   edx,ecx
ffff80000080becd:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:147 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080becf:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bed6:	ff ff ff 
ffff80000080bed9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bedd:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080bee1:	0f b6 d2             	movzx  edx,dl
ffff80000080bee4:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080bee8:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080beeb:	85 d2                	test   edx,edx
ffff80000080beed:	0f 48 d1             	cmovs  edx,ecx
ffff80000080bef0:	c1 fa 03             	sar    edx,0x3
ffff80000080bef3:	48 63 d2             	movsxd rdx,edx
ffff80000080bef6:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080befa:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080bf01:	80 ff ff 
ffff80000080bf04:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080bf07:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:148 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
ffff80000080bf0b:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bf12:	ff ff ff 
ffff80000080bf15:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bf19:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080bf1c:	89 d2                	mov    edx,edx
ffff80000080bf1e:	48 89 d1             	mov    rcx,rdx
ffff80000080bf21:	48 f7 d9             	neg    rcx
ffff80000080bf24:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bf28:	48 01 ca             	add    rdx,rcx
ffff80000080bf2b:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080bf2e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bf32:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080bf34:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 1)
ffff80000080bf38:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080bf3b:	48 ba ec 8c bf ff ff 	movabs rdx,0xffffffffffbf8cec
ffff80000080bf42:	ff ff ff 
ffff80000080bf45:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bf48:	39 d1                	cmp    ecx,edx
ffff80000080bf4a:	0f 82 66 ff ff ff    	jb     ffff80000080beb6 <scr_down+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080bf50:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 1)
ffff80000080bf54:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080bf57:	48 ba f0 8c bf ff ff 	movabs rdx,0xffffffffffbf8cf0
ffff80000080bf5e:	ff ff ff 
ffff80000080bf61:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bf64:	39 d1                	cmp    ecx,edx
ffff80000080bf66:	0f 82 3e ff ff ff    	jb     ffff80000080beaa <scr_down+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
        }

    }
}
ffff80000080bf6c:	90                   	nop
ffff80000080bf6d:	90                   	nop
ffff80000080bf6e:	5d                   	pop    rbp
ffff80000080bf6f:	c3                   	ret    

ffff80000080bf70 <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
void print(char* s){
ffff80000080bf70:	f3 0f 1e fa          	endbr64 
ffff80000080bf74:	55                   	push   rbp
ffff80000080bf75:	48 89 e5             	mov    rbp,rsp
ffff80000080bf78:	41 57                	push   r15
ffff80000080bf7a:	53                   	push   rbx
ffff80000080bf7b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080bf7f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080bf7f <print+0xf>
ffff80000080bf86:	49 bb a9 69 01 00 00 	movabs r11,0x169a9
ffff80000080bf8d:	00 00 00 
ffff80000080bf90:	4c 01 db             	add    rbx,r11
ffff80000080bf93:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080bf97:	e9 55 01 00 00       	jmp    ffff80000080c0f1 <print+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
ffff80000080bf9c:	48 b8 e4 8c bf ff ff 	movabs rax,0xffffffffffbf8ce4
ffff80000080bfa3:	ff ff ff 
ffff80000080bfa6:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080bfa9:	48 b8 ec 8c bf ff ff 	movabs rax,0xffffffffffbf8cec
ffff80000080bfb0:	ff ff ff 
ffff80000080bfb3:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080bfb6:	39 c2                	cmp    edx,eax
ffff80000080bfb8:	77 0b                	ja     ffff80000080bfc5 <print+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 1)
ffff80000080bfba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bfbe:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bfc1:	3c 0a                	cmp    al,0xa
ffff80000080bfc3:	75 2e                	jne    ffff80000080bff3 <print+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157
        {
            fb_cursor_y+=1;
ffff80000080bfc5:	48 b8 e8 8c bf ff ff 	movabs rax,0xffffffffffbf8ce8
ffff80000080bfcc:	ff ff ff 
ffff80000080bfcf:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080bfd2:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080bfd5:	48 b8 e8 8c bf ff ff 	movabs rax,0xffffffffffbf8ce8
ffff80000080bfdc:	ff ff ff 
ffff80000080bfdf:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:158
            fb_cursor_x=0;
ffff80000080bfe2:	48 b8 e4 8c bf ff ff 	movabs rax,0xffffffffffbf8ce4
ffff80000080bfe9:	ff ff ff 
ffff80000080bfec:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        }
        if(*s=='\n')continue;
ffff80000080bff3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bff7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bffa:	3c 0a                	cmp    al,0xa
ffff80000080bffc:	0f 84 e9 00 00 00    	je     ffff80000080c0eb <print+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        if(fb_cursor_y>=max_ch_nr_y-1){
ffff80000080c002:	48 b8 f0 8c bf ff ff 	movabs rax,0xffffffffffbf8cf0
ffff80000080c009:	ff ff ff 
ffff80000080c00c:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c00f:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080c012:	48 b8 e8 8c bf ff ff 	movabs rax,0xffffffffffbf8ce8
ffff80000080c019:	ff ff ff 
ffff80000080c01c:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c01f:	39 c2                	cmp    edx,eax
ffff80000080c021:	77 11                	ja     ffff80000080c034 <print+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:165
//            for(int i=0;i<font_height*font_size;i++)
////                scr_up();
////            fb_cursor_y=max_ch_nr_y-1;
            fb_cursor_y=0;
ffff80000080c023:	48 b8 e8 8c bf ff ff 	movabs rax,0xffffffffffbf8ce8
ffff80000080c02a:	ff ff ff 
ffff80000080c02d:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
ffff80000080c034:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c038:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c03b:	0f be d0             	movsx  edx,al
ffff80000080c03e:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c045:	ff ff ff 
ffff80000080c048:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c04c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c04e:	48 b9 e8 8c bf ff ff 	movabs rcx,0xffffffffffbf8ce8
ffff80000080c055:	ff ff ff 
ffff80000080c058:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080c05b:	48 b9 04 8d bf ff ff 	movabs rcx,0xffffffffffbf8d04
ffff80000080c062:	ff ff ff 
ffff80000080c065:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080c068:	0f af f1             	imul   esi,ecx
ffff80000080c06b:	48 b9 00 fe ff ff ff 	movabs rcx,0xfffffffffffffe00
ffff80000080c072:	ff ff ff 
ffff80000080c075:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080c079:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080c07b:	0f af ce             	imul   ecx,esi
ffff80000080c07e:	41 89 c8             	mov    r8d,ecx
ffff80000080c081:	48 b9 e4 8c bf ff ff 	movabs rcx,0xffffffffffbf8ce4
ffff80000080c088:	ff ff ff 
ffff80000080c08b:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080c08e:	48 b9 00 8d bf ff ff 	movabs rcx,0xffffffffffbf8d00
ffff80000080c095:	ff ff ff 
ffff80000080c098:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080c09b:	0f af f1             	imul   esi,ecx
ffff80000080c09e:	48 b9 00 fe ff ff ff 	movabs rcx,0xfffffffffffffe00
ffff80000080c0a5:	ff ff ff 
ffff80000080c0a8:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080c0ac:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080c0ae:	0f af ce             	imul   ecx,esi
ffff80000080c0b1:	89 cf                	mov    edi,ecx
ffff80000080c0b3:	89 d1                	mov    ecx,edx
ffff80000080c0b5:	89 c2                	mov    edx,eax
ffff80000080c0b7:	44 89 c6             	mov    esi,r8d
ffff80000080c0ba:	49 89 df             	mov    r15,rbx
ffff80000080c0bd:	48 b8 d9 92 fe ff ff 	movabs rax,0xfffffffffffe92d9
ffff80000080c0c4:	ff ff ff 
ffff80000080c0c7:	48 01 d8             	add    rax,rbx
ffff80000080c0ca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:168
        fb_cursor_x+=1;
ffff80000080c0cc:	48 b8 e4 8c bf ff ff 	movabs rax,0xffffffffffbf8ce4
ffff80000080c0d3:	ff ff ff 
ffff80000080c0d6:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c0d9:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080c0dc:	48 b8 e4 8c bf ff ff 	movabs rax,0xffffffffffbf8ce4
ffff80000080c0e3:	ff ff ff 
ffff80000080c0e6:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
ffff80000080c0e9:	eb 01                	jmp    ffff80000080c0ec <print+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        if(*s=='\n')continue;
ffff80000080c0eb:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080c0ec:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
ffff80000080c0f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c0f5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c0f8:	84 c0                	test   al,al
ffff80000080c0fa:	0f 85 9c fe ff ff    	jne    ffff80000080bf9c <print+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
    }
}
ffff80000080c100:	90                   	nop
ffff80000080c101:	90                   	nop
ffff80000080c102:	48 83 c4 10          	add    rsp,0x10
ffff80000080c106:	5b                   	pop    rbx
ffff80000080c107:	41 5f                	pop    r15
ffff80000080c109:	5d                   	pop    rbp
ffff80000080c10a:	c3                   	ret    

ffff80000080c10b <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080c10b:	f3 0f 1e fa          	endbr64 
ffff80000080c10f:	55                   	push   rbp
ffff80000080c110:	48 89 e5             	mov    rbp,rsp
ffff80000080c113:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c113 <open_framebuffer+0x8>
ffff80000080c11a:	49 bb 15 68 01 00 00 	movabs r11,0x16815
ffff80000080c121:	00 00 00 
ffff80000080c124:	4c 01 d8             	add    rax,r11
ffff80000080c127:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c12b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
    inode->f_ops=&framebuffer_fops;
ffff80000080c12f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c133:	48 b9 28 fe ff ff ff 	movabs rcx,0xfffffffffffffe28
ffff80000080c13a:	ff ff ff 
ffff80000080c13d:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080c141:	48 89 4a 20          	mov    QWORD PTR [rdx+0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
    filp->f_ops=&framebuffer_fops;
ffff80000080c145:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c149:	48 b9 28 fe ff ff ff 	movabs rcx,0xfffffffffffffe28
ffff80000080c150:	ff ff ff 
ffff80000080c153:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080c157:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
    return 1;
ffff80000080c15b:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:179
}
ffff80000080c160:	5d                   	pop    rbp
ffff80000080c161:	c3                   	ret    

ffff80000080c162 <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
long close_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080c162:	f3 0f 1e fa          	endbr64 
ffff80000080c166:	55                   	push   rbp
ffff80000080c167:	48 89 e5             	mov    rbp,rsp
ffff80000080c16a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c16a <close_framebuffer+0x8>
ffff80000080c171:	49 bb be 67 01 00 00 	movabs r11,0x167be
ffff80000080c178:	00 00 00 
ffff80000080c17b:	4c 01 d8             	add    rax,r11
ffff80000080c17e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c182:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:182

}
ffff80000080c186:	90                   	nop
ffff80000080c187:	5d                   	pop    rbp
ffff80000080c188:	c3                   	ret    

ffff80000080c189 <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:183
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080c189:	f3 0f 1e fa          	endbr64 
ffff80000080c18d:	55                   	push   rbp
ffff80000080c18e:	48 89 e5             	mov    rbp,rsp
ffff80000080c191:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c191 <read_framebuffer+0x8>
ffff80000080c198:	49 bb 97 67 01 00 00 	movabs r11,0x16797
ffff80000080c19f:	00 00 00 
ffff80000080c1a2:	4c 01 d8             	add    rax,r11
ffff80000080c1a5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c1a9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c1ad:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c1b1:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185

}
ffff80000080c1b5:	90                   	nop
ffff80000080c1b6:	5d                   	pop    rbp
ffff80000080c1b7:	c3                   	ret    

ffff80000080c1b8 <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080c1b8:	f3 0f 1e fa          	endbr64 
ffff80000080c1bc:	55                   	push   rbp
ffff80000080c1bd:	48 89 e5             	mov    rbp,rsp
ffff80000080c1c0:	41 57                	push   r15
ffff80000080c1c2:	53                   	push   rbx
ffff80000080c1c3:	48 83 ec 40          	sub    rsp,0x40
ffff80000080c1c7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c1c7 <write_framebuffer+0xf>
ffff80000080c1ce:	49 bb 61 67 01 00 00 	movabs r11,0x16761
ffff80000080c1d5:	00 00 00 
ffff80000080c1d8:	4c 01 db             	add    rbx,r11
ffff80000080c1db:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080c1df:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080c1e3:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080c1e7:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    char *tmp= (char*) kmalloc();
ffff80000080c1eb:	49 89 df             	mov    r15,rbx
ffff80000080c1ee:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c1f3:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff80000080c1fa:	ff ff ff 
ffff80000080c1fd:	48 01 da             	add    rdx,rbx
ffff80000080c200:	ff d2                	call   rdx
ffff80000080c202:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    int c=count/(PAGE_4K_SIZE-1),p=0;
ffff80000080c206:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080c20a:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
ffff80000080c211:	01 10 00 
ffff80000080c214:	48 89 c8             	mov    rax,rcx
ffff80000080c217:	48 f7 e2             	mul    rdx
ffff80000080c21a:	48 89 c8             	mov    rax,rcx
ffff80000080c21d:	48 29 d0             	sub    rax,rdx
ffff80000080c220:	48 d1 e8             	shr    rax,1
ffff80000080c223:	48 01 d0             	add    rax,rdx
ffff80000080c226:	48 c1 e8 0b          	shr    rax,0xb
ffff80000080c22a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080c22d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
ffff80000080c234:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080c23b:	eb 60                	jmp    ffff80000080c29d <write_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:191 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
ffff80000080c23d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080c240:	48 63 d0             	movsxd rdx,eax
ffff80000080c243:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c247:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080c24b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c24f:	ba ff 0f 00 00       	mov    edx,0xfff
ffff80000080c254:	48 89 ce             	mov    rsi,rcx
ffff80000080c257:	48 89 c7             	mov    rdi,rax
ffff80000080c25a:	49 89 df             	mov    r15,rbx
ffff80000080c25d:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff80000080c264:	ff ff ff 
ffff80000080c267:	48 01 d8             	add    rax,rbx
ffff80000080c26a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
ffff80000080c26c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c270:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080c276:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193 (discriminator 7)
        print(tmp);
ffff80000080c279:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c27d:	48 89 c7             	mov    rdi,rax
ffff80000080c280:	49 89 df             	mov    r15,rbx
ffff80000080c283:	48 b8 48 96 fe ff ff 	movabs rax,0xfffffffffffe9648
ffff80000080c28a:	ff ff ff 
ffff80000080c28d:	48 01 d8             	add    rax,rbx
ffff80000080c290:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:194 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
ffff80000080c292:	81 45 ec ff 0f 00 00 	add    DWORD PTR [rbp-0x14],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
ffff80000080c299:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 1)
ffff80000080c29d:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080c2a1:	74 05                	je     ffff80000080c2a8 <write_framebuffer+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 3)
ffff80000080c2a3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c2a6:	eb 05                	jmp    ffff80000080c2ad <write_framebuffer+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 4)
ffff80000080c2a8:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 6)
ffff80000080c2ad:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
ffff80000080c2b0:	7f 8b                	jg     ffff80000080c23d <write_framebuffer+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
    }
    kmfree(tmp);
ffff80000080c2b2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c2b6:	48 89 c7             	mov    rdi,rax
ffff80000080c2b9:	49 89 df             	mov    r15,rbx
ffff80000080c2bc:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080c2c3:	ff ff ff 
ffff80000080c2c6:	48 01 d8             	add    rax,rbx
ffff80000080c2c9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    return 0;
ffff80000080c2cb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
}
ffff80000080c2d0:	48 83 c4 40          	add    rsp,0x40
ffff80000080c2d4:	5b                   	pop    rbx
ffff80000080c2d5:	41 5f                	pop    r15
ffff80000080c2d7:	5d                   	pop    rbp
ffff80000080c2d8:	c3                   	ret    

ffff80000080c2d9 <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:199
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080c2d9:	f3 0f 1e fa          	endbr64 
ffff80000080c2dd:	55                   	push   rbp
ffff80000080c2de:	48 89 e5             	mov    rbp,rsp
ffff80000080c2e1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c2e1 <ioctl_framebuffer+0x8>
ffff80000080c2e8:	49 bb 47 66 01 00 00 	movabs r11,0x16647
ffff80000080c2ef:	00 00 00 
ffff80000080c2f2:	4c 01 d8             	add    rax,r11
ffff80000080c2f5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c2f9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c2fd:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c301:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201

}
ffff80000080c305:	90                   	nop
ffff80000080c306:	5d                   	pop    rbp
ffff80000080c307:	c3                   	ret    

ffff80000080c308 <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:13
#include "log.h"
#include "mem.h"
#include "str.h"

struct dir_entry * path_walk(char * name,unsigned long flags)
{
ffff80000080c308:	f3 0f 1e fa          	endbr64 
ffff80000080c30c:	55                   	push   rbp
ffff80000080c30d:	48 89 e5             	mov    rbp,rsp
ffff80000080c310:	41 57                	push   r15
ffff80000080c312:	53                   	push   rbx
ffff80000080c313:	48 83 ec 70          	sub    rsp,0x70
ffff80000080c317:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c317 <path_walk+0xf>
ffff80000080c31e:	49 bb 11 66 01 00 00 	movabs r11,0x16611
ffff80000080c325:	00 00 00 
ffff80000080c328:	4c 01 db             	add    rbx,r11
ffff80000080c32b:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080c32f:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:14
    char * tmpname = NULL;
ffff80000080c333:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080c33a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:15
    int tmpnamelen = 0;
ffff80000080c33b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:16
    struct dir_entry * parent = root_sb->root;
ffff80000080c342:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080c349:	ff ff ff 
ffff80000080c34c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c350:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c353:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c356:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:17
    struct dir_entry * path = NULL;
ffff80000080c35a:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080c361:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:19

    while(*name == '/')
ffff80000080c362:	eb 05                	jmp    ffff80000080c369 <path_walk+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20
        name++;
ffff80000080c364:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:19
    while(*name == '/')
ffff80000080c369:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c36d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c370:	3c 2f                	cmp    al,0x2f
ffff80000080c372:	74 f0                	je     ffff80000080c364 <path_walk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:22

    if(!*name)
ffff80000080c374:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c378:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c37b:	84 c0                	test   al,al
ffff80000080c37d:	75 09                	jne    ffff80000080c388 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:24
    {
        return parent;
ffff80000080c37f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c383:	e9 06 03 00 00       	jmp    ffff80000080c68e <path_walk+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:29
    }

    for(;;)
    {
        tmpname = name;
ffff80000080c388:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c38c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        while(*name && (*name != '/'))
ffff80000080c390:	eb 05                	jmp    ffff80000080c397 <path_walk+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
            name++;
ffff80000080c392:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        while(*name && (*name != '/'))
ffff80000080c397:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c39b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c39e:	84 c0                	test   al,al
ffff80000080c3a0:	74 0b                	je     ffff80000080c3ad <path_walk+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30 (discriminator 1)
ffff80000080c3a2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c3a6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c3a9:	3c 2f                	cmp    al,0x2f
ffff80000080c3ab:	75 e5                	jne    ffff80000080c392 <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
        tmpnamelen = name - tmpname;
ffff80000080c3ad:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c3b1:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
ffff80000080c3b5:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:34

        path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff80000080c3b8:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c3bd:	bf 58 00 00 00       	mov    edi,0x58
ffff80000080c3c2:	49 89 df             	mov    r15,rbx
ffff80000080c3c5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c3ca:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff80000080c3d1:	ff ff ff 
ffff80000080c3d4:	48 01 da             	add    rdx,rbx
ffff80000080c3d7:	ff d2                	call   rdx
ffff80000080c3d9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:35
        memset(path,0,sizeof(struct dir_entry));
ffff80000080c3dd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c3e1:	ba 58 00 00 00       	mov    edx,0x58
ffff80000080c3e6:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c3eb:	48 89 c7             	mov    rdi,rax
ffff80000080c3ee:	49 89 df             	mov    r15,rbx
ffff80000080c3f1:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff80000080c3f8:	ff ff ff 
ffff80000080c3fb:	48 01 d8             	add    rax,rbx
ffff80000080c3fe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:37

        path->name = kmalloc();
ffff80000080c400:	49 89 df             	mov    r15,rbx
ffff80000080c403:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c408:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff80000080c40f:	ff ff ff 
ffff80000080c412:	48 01 da             	add    rdx,rbx
ffff80000080c415:	ff d2                	call   rdx
ffff80000080c417:	48 89 c2             	mov    rdx,rax
ffff80000080c41a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c41e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38
        memset(path->name,0,tmpnamelen+1);
ffff80000080c421:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c424:	83 c0 01             	add    eax,0x1
ffff80000080c427:	89 c2                	mov    edx,eax
ffff80000080c429:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c42d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c430:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c435:	48 89 c7             	mov    rdi,rax
ffff80000080c438:	49 89 df             	mov    r15,rbx
ffff80000080c43b:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff80000080c442:	ff ff ff 
ffff80000080c445:	48 01 d8             	add    rax,rbx
ffff80000080c448:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:39
        memcpy(path->name,tmpname,tmpnamelen);
ffff80000080c44a:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080c44d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c451:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c454:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080c458:	48 89 ce             	mov    rsi,rcx
ffff80000080c45b:	48 89 c7             	mov    rdi,rax
ffff80000080c45e:	49 89 df             	mov    r15,rbx
ffff80000080c461:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff80000080c468:	ff ff ff 
ffff80000080c46b:	48 01 d8             	add    rax,rbx
ffff80000080c46e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        path->name_length = tmpnamelen;
ffff80000080c470:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c474:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080c477:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:42

        path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
ffff80000080c47a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c47e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c482:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080c486:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080c48a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c48e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c492:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080c496:	48 89 d6             	mov    rsi,rdx
ffff80000080c499:	48 89 c7             	mov    rdi,rax
ffff80000080c49c:	ff d1                	call   rcx
ffff80000080c49e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:43
        if(path == NULL)
ffff80000080c4a2:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffff80000080c4a7:	75 71                	jne    ffff80000080c51a <path_walk+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:45
        {
            printf("can not find file or dir:%s\n",path->name);
ffff80000080c4a9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c4ad:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c4b0:	48 89 c6             	mov    rsi,rax
ffff80000080c4b3:	48 b8 df d5 ff ff ff 	movabs rax,0xffffffffffffd5df
ffff80000080c4ba:	ff ff ff 
ffff80000080c4bd:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c4c1:	48 89 c7             	mov    rdi,rax
ffff80000080c4c4:	49 89 df             	mov    r15,rbx
ffff80000080c4c7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c4cc:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080c4d3:	ff ff ff 
ffff80000080c4d6:	48 01 da             	add    rdx,rbx
ffff80000080c4d9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:46
            kmfree(path->name);
ffff80000080c4db:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c4df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c4e2:	48 89 c7             	mov    rdi,rax
ffff80000080c4e5:	49 89 df             	mov    r15,rbx
ffff80000080c4e8:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080c4ef:	ff ff ff 
ffff80000080c4f2:	48 01 d8             	add    rax,rbx
ffff80000080c4f5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:47
            kmfree(path);
ffff80000080c4f7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c4fb:	48 89 c7             	mov    rdi,rax
ffff80000080c4fe:	49 89 df             	mov    r15,rbx
ffff80000080c501:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080c508:	ff ff ff 
ffff80000080c50b:	48 01 d8             	add    rax,rbx
ffff80000080c50e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:48
            return NULL;
ffff80000080c510:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c515:	e9 74 01 00 00       	jmp    ffff80000080c68e <path_walk+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:53
        }

//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
        path->parent = parent;
ffff80000080c51a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c51e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c522:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:56
        //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
        //对于/dev这样的文件夹，lookup返回的就是链表里的dentry，data会一样
        list_add(&parent->subdirs_list,&path->child_node);
ffff80000080c526:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c52a:	48 83 c0 10          	add    rax,0x10
ffff80000080c52e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c532:	48 83 c2 28          	add    rdx,0x28
ffff80000080c536:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080c53a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080c53e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c542:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c546:	48 85 c0             	test   rax,rax
ffff80000080c549:	75 58                	jne    ffff80000080c5a3 <path_walk+0x29b>
ffff80000080c54b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c54f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff80000080c553:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c557:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080c55b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c55f:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080c563:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c567:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080c56b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c56f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080c573:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080c576:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c57a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c57e:	48 85 c0             	test   rax,rax
ffff80000080c581:	74 0f                	je     ffff80000080c592 <path_walk+0x28a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080c583:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c587:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c58b:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080c58f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080c592:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c596:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080c59a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080c59e:	e9 9c 00 00 00       	jmp    ffff80000080c63f <path_walk+0x337>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080c5a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c5a7:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080c5ab:	eb 21                	jmp    ffff80000080c5ce <path_walk+0x2c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080c5ad:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c5b1:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080c5b5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c5b9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c5bd:	48 39 c2             	cmp    rdx,rax
ffff80000080c5c0:	74 7c                	je     ffff80000080c63e <path_walk+0x336>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080c5c2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c5c6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c5ca:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080c5ce:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c5d2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c5d6:	48 85 c0             	test   rax,rax
ffff80000080c5d9:	74 0e                	je     ffff80000080c5e9 <path_walk+0x2e1>
ffff80000080c5db:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c5df:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c5e3:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080c5e7:	75 c4                	jne    ffff80000080c5ad <path_walk+0x2a5>
ffff80000080c5e9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c5ed:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff80000080c5f1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c5f5:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080c5f9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c5fd:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080c601:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c605:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080c609:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c60d:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080c611:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080c614:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c618:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c61c:	48 85 c0             	test   rax,rax
ffff80000080c61f:	74 0f                	je     ffff80000080c630 <path_walk+0x328>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080c621:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c625:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c629:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080c62d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080c630:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c634:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080c638:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080c63c:	eb 01                	jmp    ffff80000080c63f <path_walk+0x337>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080c63e:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:58

        if(!*name)
ffff80000080c63f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c643:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c646:	84 c0                	test   al,al
ffff80000080c648:	74 2a                	je     ffff80000080c674 <path_walk+0x36c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
            goto last_component;
        while(*name == '/')
ffff80000080c64a:	eb 05                	jmp    ffff80000080c651 <path_walk+0x349>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
            name++;
ffff80000080c64c:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
        while(*name == '/')
ffff80000080c651:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c655:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c658:	3c 2f                	cmp    al,0x2f
ffff80000080c65a:	74 f0                	je     ffff80000080c64c <path_walk+0x344>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62
        if(!*name)
ffff80000080c65c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c660:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c663:	84 c0                	test   al,al
ffff80000080c665:	74 10                	je     ffff80000080c677 <path_walk+0x36f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:65
            goto last_slash;

        parent = path;
ffff80000080c667:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c66b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:29
        tmpname = name;
ffff80000080c66f:	e9 14 fd ff ff       	jmp    ffff80000080c388 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59
            goto last_component;
ffff80000080c674:	90                   	nop
ffff80000080c675:	eb 01                	jmp    ffff80000080c678 <path_walk+0x370>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:63
            goto last_slash;
ffff80000080c677:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:71
    }

    last_slash:
    last_component:

    if(flags & 1)
ffff80000080c678:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080c67c:	83 e0 01             	and    eax,0x1
ffff80000080c67f:	48 85 c0             	test   rax,rax
ffff80000080c682:	74 06                	je     ffff80000080c68a <path_walk+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:73
    {
        return parent;
ffff80000080c684:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c688:	eb 04                	jmp    ffff80000080c68e <path_walk+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:76
    }

    return path;
ffff80000080c68a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:77
}
ffff80000080c68e:	48 83 c4 70          	add    rsp,0x70
ffff80000080c692:	5b                   	pop    rbx
ffff80000080c693:	41 5f                	pop    r15
ffff80000080c695:	5d                   	pop    rbp
ffff80000080c696:	c3                   	ret    

ffff80000080c697 <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:81


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
ffff80000080c697:	f3 0f 1e fa          	endbr64 
ffff80000080c69b:	55                   	push   rbp
ffff80000080c69c:	48 89 e5             	mov    rbp,rsp
ffff80000080c69f:	41 57                	push   r15
ffff80000080c6a1:	48 83 ec 48          	sub    rsp,0x48
ffff80000080c6a5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c6a5 <fill_dentry+0xe>
ffff80000080c6ac:	49 bb 83 62 01 00 00 	movabs r11,0x16283
ffff80000080c6b3:	00 00 00 
ffff80000080c6b6:	4c 01 d8             	add    rax,r11
ffff80000080c6b9:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080c6bd:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080c6c1:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080c6c5:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff80000080c6c9:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:82
    struct dirent* dent = (struct dirent*)buf;
ffff80000080c6cd:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c6d1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:84

    if((unsigned long)buf < PAGE_4K_SIZE)
ffff80000080c6d5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c6d9:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff80000080c6e0:	77 07                	ja     ffff80000080c6e9 <fill_dentry+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:85
        return -EFAULT;
ffff80000080c6e2:	b8 eb ff ff ff       	mov    eax,0xffffffeb
ffff80000080c6e7:	eb 53                	jmp    ffff80000080c73c <fill_dentry+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:87

    memcpy(name,dent->d_name,namelen);
ffff80000080c6e9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c6ed:	89 d7                	mov    edi,edx
ffff80000080c6ef:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c6f3:	48 8d 72 18          	lea    rsi,[rdx+0x18]
ffff80000080c6f7:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080c6fb:	89 fa                	mov    edx,edi
ffff80000080c6fd:	48 89 cf             	mov    rdi,rcx
ffff80000080c700:	49 89 c7             	mov    r15,rax
ffff80000080c703:	48 b9 4d 11 ff ff ff 	movabs rcx,0xffffffffffff114d
ffff80000080c70a:	ff ff ff 
ffff80000080c70d:	48 01 c1             	add    rcx,rax
ffff80000080c710:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:88
    dent->d_namelen = namelen;
ffff80000080c712:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c716:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c71a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
    dent->d_type = type;
ffff80000080c71e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c722:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080c726:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:90
    dent->d_offset = offset;
ffff80000080c72a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c72e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080c732:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:91
    return sizeof(struct dirent) + namelen;
ffff80000080c735:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c739:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:92
}
ffff80000080c73c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c740:	c9                   	leave  
ffff80000080c741:	c3                   	ret    

ffff80000080c742 <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:99
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000080c742:	f3 0f 1e fa          	endbr64 
ffff80000080c746:	55                   	push   rbp
ffff80000080c747:	48 89 e5             	mov    rbp,rsp
ffff80000080c74a:	41 57                	push   r15
ffff80000080c74c:	53                   	push   rbx
ffff80000080c74d:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c751:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c751 <mount_fs+0xf>
ffff80000080c758:	49 bb d7 61 01 00 00 	movabs r11,0x161d7
ffff80000080c75f:	00 00 00 
ffff80000080c762:	4c 01 db             	add    rbx,r11
ffff80000080c765:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080c769:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080c76d:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
    struct file_system_type * p = NULL;
ffff80000080c771:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c778:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102

    for(p = &filesystem;p;p = p->next)
ffff80000080c779:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080c780:	ff ff ff 
ffff80000080c783:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c787:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080c78b:	eb 4d                	jmp    ffff80000080c7da <mount_fs+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103
        if(!strcmp(p->name,name))
ffff80000080c78d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c791:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c794:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c798:	48 89 d6             	mov    rsi,rdx
ffff80000080c79b:	48 89 c7             	mov    rdi,rax
ffff80000080c79e:	49 89 df             	mov    r15,rbx
ffff80000080c7a1:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff80000080c7a8:	ff ff ff 
ffff80000080c7ab:	48 01 d8             	add    rax,rbx
ffff80000080c7ae:	ff d0                	call   rax
ffff80000080c7b0:	85 c0                	test   eax,eax
ffff80000080c7b2:	75 1a                	jne    ffff80000080c7ce <mount_fs+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:105
        {
            return p->read_superblock(DPTE,buf);
ffff80000080c7b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c7b8:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffff80000080c7bc:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c7c0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c7c4:	48 89 d6             	mov    rsi,rdx
ffff80000080c7c7:	48 89 c7             	mov    rdi,rax
ffff80000080c7ca:	ff d1                	call   rcx
ffff80000080c7cc:	eb 18                	jmp    ffff80000080c7e6 <mount_fs+0xa4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080c7ce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c7d2:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c7d6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102 (discriminator 1)
ffff80000080c7da:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c7df:	75 ac                	jne    ffff80000080c78d <mount_fs+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:107
        }
    return 0;
ffff80000080c7e1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108
}
ffff80000080c7e6:	48 83 c4 30          	add    rsp,0x30
ffff80000080c7ea:	5b                   	pop    rbx
ffff80000080c7eb:	41 5f                	pop    r15
ffff80000080c7ed:	5d                   	pop    rbp
ffff80000080c7ee:	c3                   	ret    

ffff80000080c7ef <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:111

unsigned long register_filesystem(struct file_system_type * fs)
{
ffff80000080c7ef:	f3 0f 1e fa          	endbr64 
ffff80000080c7f3:	55                   	push   rbp
ffff80000080c7f4:	48 89 e5             	mov    rbp,rsp
ffff80000080c7f7:	41 57                	push   r15
ffff80000080c7f9:	53                   	push   rbx
ffff80000080c7fa:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c7fe:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c7fe <register_filesystem+0xf>
ffff80000080c805:	49 bb 2a 61 01 00 00 	movabs r11,0x1612a
ffff80000080c80c:	00 00 00 
ffff80000080c80f:	4c 01 db             	add    rbx,r11
ffff80000080c812:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112
    struct file_system_type * p = NULL;
ffff80000080c816:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c81d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114

    for(p = &filesystem;p;p = p->next)
ffff80000080c81e:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080c825:	ff ff ff 
ffff80000080c828:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c82c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080c830:	eb 3d                	jmp    ffff80000080c86f <register_filesystem+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115
        if(!strcmp(fs->name,p->name))
ffff80000080c832:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c836:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c839:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c83d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c840:	48 89 d6             	mov    rsi,rdx
ffff80000080c843:	48 89 c7             	mov    rdi,rax
ffff80000080c846:	49 89 df             	mov    r15,rbx
ffff80000080c849:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff80000080c850:	ff ff ff 
ffff80000080c853:	48 01 d8             	add    rax,rbx
ffff80000080c856:	ff d0                	call   rax
ffff80000080c858:	85 c0                	test   eax,eax
ffff80000080c85a:	75 07                	jne    ffff80000080c863 <register_filesystem+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116
            return 0;
ffff80000080c85c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c861:	eb 48                	jmp    ffff80000080c8ab <register_filesystem+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080c863:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c867:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c86b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114 (discriminator 1)
ffff80000080c86f:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c874:	75 bc                	jne    ffff80000080c832 <register_filesystem+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:118

    fs->next = filesystem.next;
ffff80000080c876:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080c87d:	ff ff ff 
ffff80000080c880:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c884:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080c888:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c88c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:119
    filesystem.next = fs;
ffff80000080c890:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080c897:	ff ff ff 
ffff80000080c89a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c89e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c8a2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:121

    return 1;
ffff80000080c8a6:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:122
}
ffff80000080c8ab:	48 83 c4 20          	add    rsp,0x20
ffff80000080c8af:	5b                   	pop    rbx
ffff80000080c8b0:	41 5f                	pop    r15
ffff80000080c8b2:	5d                   	pop    rbp
ffff80000080c8b3:	c3                   	ret    

ffff80000080c8b4 <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:125

unsigned long unregister_filesystem(struct file_system_type * fs)
{
ffff80000080c8b4:	f3 0f 1e fa          	endbr64 
ffff80000080c8b8:	55                   	push   rbp
ffff80000080c8b9:	48 89 e5             	mov    rbp,rsp
ffff80000080c8bc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c8bc <unregister_filesystem+0x8>
ffff80000080c8c3:	49 bb 6c 60 01 00 00 	movabs r11,0x1606c
ffff80000080c8ca:	00 00 00 
ffff80000080c8cd:	4c 01 d8             	add    rax,r11
ffff80000080c8d0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126
    struct file_system_type * p = &filesystem;
ffff80000080c8d4:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000080c8db:	ff ff ff 
ffff80000080c8de:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c8e2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:128

    while(p->next)
ffff80000080c8e6:	eb 41                	jmp    ffff80000080c929 <unregister_filesystem+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129
        if(p->next == fs)
ffff80000080c8e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c8ec:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c8f0:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080c8f4:	75 27                	jne    ffff80000080c91d <unregister_filesystem+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:131
        {
            p->next = p->next->next;
ffff80000080c8f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c8fa:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c8fe:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080c902:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c906:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:132
            fs->next = NULL;
ffff80000080c90a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c90e:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080c915:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:133
            return 1;
ffff80000080c916:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080c91b:	eb 1e                	jmp    ffff80000080c93b <unregister_filesystem+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:136
        }
        else
            p = p->next;
ffff80000080c91d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c921:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c925:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:128
    while(p->next)
ffff80000080c929:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c92d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c931:	48 85 c0             	test   rax,rax
ffff80000080c934:	75 b2                	jne    ffff80000080c8e8 <unregister_filesystem+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
    return 0;
ffff80000080c936:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
}
ffff80000080c93b:	5d                   	pop    rbp
ffff80000080c93c:	c3                   	ret    

ffff80000080c93d <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:140
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080c93d:	f3 0f 1e fa          	endbr64 
ffff80000080c941:	55                   	push   rbp
ffff80000080c942:	48 89 e5             	mov    rbp,rsp
ffff80000080c945:	41 57                	push   r15
ffff80000080c947:	53                   	push   rbx
ffff80000080c948:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c94c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c94c <root_lookup+0xf>
ffff80000080c953:	49 bb dc 5f 01 00 00 	movabs r11,0x15fdc
ffff80000080c95a:	00 00 00 
ffff80000080c95d:	4c 01 db             	add    rbx,r11
ffff80000080c960:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080c964:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:141
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
ffff80000080c968:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c96c:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080c970:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
    struct List* p= tmp->subdirs_list.next;
ffff80000080c974:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c978:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080c97c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    while (p){
ffff80000080c980:	eb 61                	jmp    ffff80000080c9e3 <root_lookup+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
        struct dir_entry* dp=p->data;
ffff80000080c982:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c986:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c98a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:145
        if(strcmp(dp->name,dest_dentry->name)==0){
ffff80000080c98e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c992:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c995:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c999:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c99c:	48 89 d6             	mov    rsi,rdx
ffff80000080c99f:	48 89 c7             	mov    rdi,rax
ffff80000080c9a2:	49 89 df             	mov    r15,rbx
ffff80000080c9a5:	48 b8 9f 14 ff ff ff 	movabs rax,0xffffffffffff149f
ffff80000080c9ac:	ff ff ff 
ffff80000080c9af:	48 01 d8             	add    rax,rbx
ffff80000080c9b2:	ff d0                	call   rax
ffff80000080c9b4:	85 c0                	test   eax,eax
ffff80000080c9b6:	75 1f                	jne    ffff80000080c9d7 <root_lookup+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:146
            kmfree(dest_dentry);
ffff80000080c9b8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c9bc:	48 89 c7             	mov    rdi,rax
ffff80000080c9bf:	49 89 df             	mov    r15,rbx
ffff80000080c9c2:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080c9c9:	ff ff ff 
ffff80000080c9cc:	48 01 d8             	add    rax,rbx
ffff80000080c9cf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:147
            return dp;
ffff80000080c9d1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c9d5:	eb 31                	jmp    ffff80000080ca08 <root_lookup+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:149
        }
        p=p->next;
ffff80000080c9d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c9db:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c9df:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    while (p){
ffff80000080c9e3:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c9e8:	75 98                	jne    ffff80000080c982 <root_lookup+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:151
    }
    kmfree(dest_dentry);
ffff80000080c9ea:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c9ee:	48 89 c7             	mov    rdi,rax
ffff80000080c9f1:	49 89 df             	mov    r15,rbx
ffff80000080c9f4:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080c9fb:	ff ff ff 
ffff80000080c9fe:	48 01 d8             	add    rax,rbx
ffff80000080ca01:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:152
    return NULL;
ffff80000080ca03:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:153
}
ffff80000080ca08:	48 83 c4 30          	add    rsp,0x30
ffff80000080ca0c:	5b                   	pop    rbx
ffff80000080ca0d:	41 5f                	pop    r15
ffff80000080ca0f:	5d                   	pop    rbp
ffff80000080ca10:	c3                   	ret    

ffff80000080ca11 <mount_rootfs>:
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:157
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void mount_rootfs(){
ffff80000080ca11:	f3 0f 1e fa          	endbr64 
ffff80000080ca15:	55                   	push   rbp
ffff80000080ca16:	48 89 e5             	mov    rbp,rsp
ffff80000080ca19:	41 57                	push   r15
ffff80000080ca1b:	53                   	push   rbx
ffff80000080ca1c:	48 83 ec 20          	sub    rsp,0x20
ffff80000080ca20:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ca20 <mount_rootfs+0xf>
ffff80000080ca27:	49 bb 08 5f 01 00 00 	movabs r11,0x15f08
ffff80000080ca2e:	00 00 00 
ffff80000080ca31:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:158
    root_sb=(struct super_block*) kmalloc();
ffff80000080ca34:	49 89 df             	mov    r15,rbx
ffff80000080ca37:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ca3c:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff80000080ca43:	ff ff ff 
ffff80000080ca46:	48 01 da             	add    rdx,rbx
ffff80000080ca49:	ff d2                	call   rdx
ffff80000080ca4b:	48 89 c2             	mov    rdx,rax
ffff80000080ca4e:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080ca55:	ff ff ff 
ffff80000080ca58:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ca5c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:159
    root_sb->root=root_sb+1;//紧凑跟在后面
ffff80000080ca5f:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080ca66:	ff ff ff 
ffff80000080ca69:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ca6d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ca70:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080ca77:	ff ff ff 
ffff80000080ca7a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ca7e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ca81:	48 83 c2 18          	add    rdx,0x18
ffff80000080ca85:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160
    root_sb->sb_ops=NULL;
ffff80000080ca88:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080ca8f:	ff ff ff 
ffff80000080ca92:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ca96:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ca99:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080caa0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:161
    struct index_node* ir=root_sb->root+1;
ffff80000080caa1:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080caa8:	ff ff ff 
ffff80000080caab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080caaf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cab2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cab5:	48 83 c0 58          	add    rax,0x58
ffff80000080cab9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:162
    root_sb->root->dir_inode=ir;
ffff80000080cabd:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cac4:	ff ff ff 
ffff80000080cac7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cacb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cace:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cad1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080cad5:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163
    ir->sb=root_sb;
ffff80000080cad9:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cae0:	ff ff ff 
ffff80000080cae3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cae7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080caea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080caee:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:164
    ir->attribute=FS_ATTR_DIR;
ffff80000080caf2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080caf6:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff80000080cafd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:165
    ir->file_size=0;
ffff80000080cafe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cb02:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:166
    ir->inode_ops=&root_iops;//lookup函数是必要的
ffff80000080cb09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cb0d:	48 ba 28 fd ff ff ff 	movabs rdx,0xfffffffffffffd28
ffff80000080cb14:	ff ff ff 
ffff80000080cb17:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080cb1b:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167
    ir->f_ops=NULL;
ffff80000080cb1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cb23:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff80000080cb2a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    ir->private_index_info=root_sb->root;
ffff80000080cb2b:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cb32:	ff ff ff 
ffff80000080cb35:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cb39:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cb3c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cb3f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cb43:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170

    root_sb->root->name=ir+1;//紧凑跟在后面
ffff80000080cb47:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cb4e:	ff ff ff 
ffff80000080cb51:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cb55:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cb58:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cb5b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080cb5f:	48 83 c2 38          	add    rdx,0x38
ffff80000080cb63:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:171
    strcpy(root_sb->root->name,"/");
ffff80000080cb66:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cb6d:	ff ff ff 
ffff80000080cb70:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cb74:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cb77:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cb7a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cb7d:	48 ba 07 d6 ff ff ff 	movabs rdx,0xffffffffffffd607
ffff80000080cb84:	ff ff ff 
ffff80000080cb87:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080cb8b:	48 89 d6             	mov    rsi,rdx
ffff80000080cb8e:	48 89 c7             	mov    rdi,rax
ffff80000080cb91:	49 89 df             	mov    r15,rbx
ffff80000080cb94:	48 b8 51 12 ff ff ff 	movabs rax,0xffffffffffff1251
ffff80000080cb9b:	ff ff ff 
ffff80000080cb9e:	48 01 d8             	add    rax,rbx
ffff80000080cba1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:172
    root_sb->root->name_length=1;
ffff80000080cba3:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cbaa:	ff ff ff 
ffff80000080cbad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cbb1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cbb4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cbb7:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:173
    root_sb->root->parent=root_sb->root;
ffff80000080cbbe:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cbc5:	ff ff ff 
ffff80000080cbc8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cbcc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cbcf:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cbd6:	ff ff ff 
ffff80000080cbd9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cbdd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cbe0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cbe3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080cbe6:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:174
    list_init(&root_sb->root->subdirs_list);
ffff80000080cbea:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cbf1:	ff ff ff 
ffff80000080cbf4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cbf8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cbfb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cbfe:	48 83 c0 28          	add    rax,0x28
ffff80000080cc02:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cc06:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cc0a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cc11:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cc15:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080cc1c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cc1d:	90                   	nop
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:175
    list_init(&root_sb->root->child_node);
ffff80000080cc1e:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080cc25:	ff ff ff 
ffff80000080cc28:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cc2c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cc2f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cc32:	48 83 c0 10          	add    rax,0x10
ffff80000080cc36:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cc3a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cc3e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cc45:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cc49:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080cc50:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cc51:	90                   	nop
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:177

}
ffff80000080cc52:	90                   	nop
ffff80000080cc53:	48 83 c4 20          	add    rsp,0x20
ffff80000080cc57:	5b                   	pop    rbx
ffff80000080cc58:	41 5f                	pop    r15
ffff80000080cc5a:	5d                   	pop    rbp
ffff80000080cc5b:	c3                   	ret    

ffff80000080cc5c <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:20
#include "syscall.h"
#include "int.h"


unsigned long sys_putstring(char *string)
{
ffff80000080cc5c:	f3 0f 1e fa          	endbr64 
ffff80000080cc60:	55                   	push   rbp
ffff80000080cc61:	48 89 e5             	mov    rbp,rsp
ffff80000080cc64:	41 57                	push   r15
ffff80000080cc66:	48 83 ec 18          	sub    rsp,0x18
ffff80000080cc6a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080cc6a <sys_putstring+0xe>
ffff80000080cc71:	49 bb be 5c 01 00 00 	movabs r11,0x15cbe
ffff80000080cc78:	00 00 00 
ffff80000080cc7b:	4c 01 da             	add    rdx,r11
ffff80000080cc7e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:21
    printf(string);
ffff80000080cc82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc86:	48 89 c7             	mov    rdi,rax
ffff80000080cc89:	49 89 d7             	mov    r15,rdx
ffff80000080cc8c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cc91:	48 b9 94 ee fd ff ff 	movabs rcx,0xfffffffffffdee94
ffff80000080cc98:	ff ff ff 
ffff80000080cc9b:	48 01 d1             	add    rcx,rdx
ffff80000080cc9e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
    return 0;
ffff80000080cca0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
}
ffff80000080cca5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080cca9:	c9                   	leave  
ffff80000080ccaa:	c3                   	ret    

ffff80000080ccab <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:26

unsigned long sys_open(char *filename,int flags)
{
ffff80000080ccab:	f3 0f 1e fa          	endbr64 
ffff80000080ccaf:	55                   	push   rbp
ffff80000080ccb0:	48 89 e5             	mov    rbp,rsp
ffff80000080ccb3:	41 57                	push   r15
ffff80000080ccb5:	53                   	push   rbx
ffff80000080ccb6:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffff80000080ccbd:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ccbd <sys_open+0x12>
ffff80000080ccc4:	49 bb 6b 5c 01 00 00 	movabs r11,0x15c6b
ffff80000080cccb:	00 00 00 
ffff80000080ccce:	4c 01 db             	add    rbx,r11
ffff80000080ccd1:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
ffff80000080ccd8:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:27
    char * path = NULL;
ffff80000080ccde:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080cce5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28
    long pathlen = 0;
ffff80000080cce6:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080cced:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    long error = 0;
ffff80000080ccee:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080ccf5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    struct dir_entry * dentry = NULL;
ffff80000080ccf6:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080ccfd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    struct file * filp = NULL;
ffff80000080ccfe:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080cd05:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct file ** f = NULL;
ffff80000080cd06:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080cd0d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    int fd = -1;
ffff80000080cd0e:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:37
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc();
ffff80000080cd15:	49 89 df             	mov    r15,rbx
ffff80000080cd18:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cd1d:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff80000080cd24:	ff ff ff 
ffff80000080cd27:	48 01 da             	add    rdx,rbx
ffff80000080cd2a:	ff d2                	call   rdx
ffff80000080cd2c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:38
    if(path == NULL)
ffff80000080cd30:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080cd35:	75 0c                	jne    ffff80000080cd43 <sys_open+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
        return -ENOMEM;
ffff80000080cd37:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080cd3e:	e9 10 06 00 00       	jmp    ffff80000080d353 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
    memset(path,0,PAGE_4K_SIZE);
ffff80000080cd43:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cd47:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080cd4c:	be 00 00 00 00       	mov    esi,0x0
ffff80000080cd51:	48 89 c7             	mov    rdi,rax
ffff80000080cd54:	49 89 df             	mov    r15,rbx
ffff80000080cd57:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff80000080cd5e:	ff ff ff 
ffff80000080cd61:	48 01 d8             	add    rax,rbx
ffff80000080cd64:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
    pathlen = strlen(filename);
ffff80000080cd66:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080cd6d:	48 89 c7             	mov    rdi,rax
ffff80000080cd70:	49 89 df             	mov    r15,rbx
ffff80000080cd73:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff80000080cd7a:	ff ff ff 
ffff80000080cd7d:	48 01 d8             	add    rax,rbx
ffff80000080cd80:	ff d0                	call   rax
ffff80000080cd82:	48 98                	cdqe   
ffff80000080cd84:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    if(pathlen <= 0)
ffff80000080cd88:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080cd8d:	7f 25                	jg     ffff80000080cdb4 <sys_open+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:44
    {
        kmfree(path);
ffff80000080cd8f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cd93:	48 89 c7             	mov    rdi,rax
ffff80000080cd96:	49 89 df             	mov    r15,rbx
ffff80000080cd99:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080cda0:	ff ff ff 
ffff80000080cda3:	48 01 d8             	add    rax,rbx
ffff80000080cda6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:45
        return -EFAULT;
ffff80000080cda8:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080cdaf:	e9 9f 05 00 00       	jmp    ffff80000080d353 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:47
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080cdb4:	48 81 7d c0 ff 0f 00 	cmp    QWORD PTR [rbp-0x40],0xfff
ffff80000080cdbb:	00 
ffff80000080cdbc:	7e 25                	jle    ffff80000080cde3 <sys_open+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:49
    {
        kmfree(path);
ffff80000080cdbe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cdc2:	48 89 c7             	mov    rdi,rax
ffff80000080cdc5:	49 89 df             	mov    r15,rbx
ffff80000080cdc8:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080cdcf:	ff ff ff 
ffff80000080cdd2:	48 01 d8             	add    rax,rbx
ffff80000080cdd5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:50
        return -ENAMETOOLONG;
ffff80000080cdd7:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080cdde:	e9 70 05 00 00       	jmp    ffff80000080d353 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:52
    }
    strcpy(path,filename);
ffff80000080cde3:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
ffff80000080cdea:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cdee:	48 89 d6             	mov    rsi,rdx
ffff80000080cdf1:	48 89 c7             	mov    rdi,rax
ffff80000080cdf4:	49 89 df             	mov    r15,rbx
ffff80000080cdf7:	48 b8 51 12 ff ff ff 	movabs rax,0xffffffffffff1251
ffff80000080cdfe:	ff ff ff 
ffff80000080ce01:	48 01 d8             	add    rax,rbx
ffff80000080ce04:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:54

    dentry = path_walk(path,0);
ffff80000080ce06:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ce0a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ce0f:	48 89 c7             	mov    rdi,rax
ffff80000080ce12:	49 89 df             	mov    r15,rbx
ffff80000080ce15:	48 b8 e0 99 fe ff ff 	movabs rax,0xfffffffffffe99e0
ffff80000080ce1c:	ff ff ff 
ffff80000080ce1f:	48 01 d8             	add    rax,rbx
ffff80000080ce22:	ff d0                	call   rax
ffff80000080ce24:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:56

    if(dentry == NULL){
ffff80000080ce28:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080ce2d:	0f 85 bc 02 00 00    	jne    ffff80000080d0ef <sys_open+0x444>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:61
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //找到上一级目录
        char* p=path+strlen(path)-1;
ffff80000080ce33:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ce37:	48 89 c7             	mov    rdi,rax
ffff80000080ce3a:	49 89 df             	mov    r15,rbx
ffff80000080ce3d:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff80000080ce44:	ff ff ff 
ffff80000080ce47:	48 01 d8             	add    rax,rbx
ffff80000080ce4a:	ff d0                	call   rax
ffff80000080ce4c:	48 98                	cdqe   
ffff80000080ce4e:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080ce52:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ce56:	48 01 d0             	add    rax,rdx
ffff80000080ce59:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62
        for(;*p!='/'&&p>path;p--);
ffff80000080ce5d:	eb 05                	jmp    ffff80000080ce64 <sys_open+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 3)
ffff80000080ce5f:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 1)
ffff80000080ce64:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ce68:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ce6b:	3c 2f                	cmp    al,0x2f
ffff80000080ce6d:	74 0a                	je     ffff80000080ce79 <sys_open+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 2)
ffff80000080ce6f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ce73:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080ce77:	77 e6                	ja     ffff80000080ce5f <sys_open+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63
        *p='\0';
ffff80000080ce79:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ce7d:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
ffff80000080ce80:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ce84:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080ce89:	48 89 c7             	mov    rdi,rax
ffff80000080ce8c:	49 89 df             	mov    r15,rbx
ffff80000080ce8f:	48 b8 e0 99 fe ff ff 	movabs rax,0xfffffffffffe99e0
ffff80000080ce96:	ff ff ff 
ffff80000080ce99:	48 01 d8             	add    rax,rbx
ffff80000080ce9c:	ff d0                	call   rax
ffff80000080ce9e:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        if(parent==NULL)
ffff80000080cea2:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080cea7:	75 0c                	jne    ffff80000080ceb5 <sys_open+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
            return -ENOENT;//上级目录也不在
ffff80000080cea9:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080ceb0:	e9 9e 04 00 00       	jmp    ffff80000080d353 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:68
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc();
ffff80000080ceb5:	49 89 df             	mov    r15,rbx
ffff80000080ceb8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cebd:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff80000080cec4:	ff ff ff 
ffff80000080cec7:	48 01 da             	add    rdx,rbx
ffff80000080ceca:	ff d2                	call   rdx
ffff80000080cecc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:69
        list_init(&dentry->subdirs_list);
ffff80000080ced0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ced4:	48 83 c0 28          	add    rax,0x28
ffff80000080ced8:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cedf:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080cee6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080ceed:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080cef4:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080cefb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cefc:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:70
        list_init(&dentry->child_node);
ffff80000080cefd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cf01:	48 83 c0 10          	add    rax,0x10
ffff80000080cf05:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cf0c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080cf13:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cf1a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080cf21:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080cf28:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cf29:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        dentry->child_node.data=dentry;
ffff80000080cf2a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cf2e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cf32:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        list_add(&parent->subdirs_list,&dentry->child_node);
ffff80000080cf36:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cf3a:	48 83 c0 10          	add    rax,0x10
ffff80000080cf3e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080cf42:	48 83 c2 28          	add    rdx,0x28
ffff80000080cf46:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffff80000080cf4a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080cf4e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080cf52:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cf56:	48 85 c0             	test   rax,rax
ffff80000080cf59:	75 58                	jne    ffff80000080cfb3 <sys_open+0x308>
ffff80000080cf5b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080cf5f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080cf63:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080cf67:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080cf6b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080cf6f:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080cf73:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080cf77:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080cf7b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080cf7f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080cf83:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080cf86:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080cf8a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cf8e:	48 85 c0             	test   rax,rax
ffff80000080cf91:	74 0f                	je     ffff80000080cfa2 <sys_open+0x2f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080cf93:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080cf97:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cf9b:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080cf9f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080cfa2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080cfa6:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080cfaa:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080cfae:	e9 c1 00 00 00       	jmp    ffff80000080d074 <sys_open+0x3c9>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080cfb3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080cfb7:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080cfbb:	eb 25                	jmp    ffff80000080cfe2 <sys_open+0x337>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080cfbd:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080cfc1:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080cfc5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080cfc9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080cfcd:	48 39 c2             	cmp    rdx,rax
ffff80000080cfd0:	0f 84 9d 00 00 00    	je     ffff80000080d073 <sys_open+0x3c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080cfd6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080cfda:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cfde:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff80000080cfe2:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080cfe6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cfea:	48 85 c0             	test   rax,rax
ffff80000080cfed:	74 0e                	je     ffff80000080cffd <sys_open+0x352>
ffff80000080cfef:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080cff3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cff7:	48 39 45 80          	cmp    QWORD PTR [rbp-0x80],rax
ffff80000080cffb:	75 c0                	jne    ffff80000080cfbd <sys_open+0x312>
ffff80000080cffd:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080d001:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff80000080d008:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080d00c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080d013:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080d01a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080d01e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080d025:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080d029:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080d030:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080d037:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080d03a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080d041:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d045:	48 85 c0             	test   rax,rax
ffff80000080d048:	74 15                	je     ffff80000080d05f <sys_open+0x3b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080d04a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080d051:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d055:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff80000080d05c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080d05f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080d066:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff80000080d06d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080d071:	eb 01                	jmp    ffff80000080d074 <sys_open+0x3c9>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080d073:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        dentry->parent=parent;
ffff80000080d074:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d078:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080d07c:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        dentry->dir_inode=dentry+1;//放在后面
ffff80000080d080:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d084:	48 8d 50 58          	lea    rdx,[rax+0x58]
ffff80000080d088:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d08c:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        dentry->dir_inode->file_size=0;
ffff80000080d090:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d094:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d098:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:77
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
ffff80000080d09f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080d0a3:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080d0a7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d0ab:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d0af:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000080d0b3:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:78
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
ffff80000080d0b7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080d0bb:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080d0bf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d0c3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d0c7:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080d0cb:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:79
        dentry->dir_ops=parent->dir_ops;
ffff80000080d0cf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080d0d3:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
ffff80000080d0d7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d0db:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:81
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
ffff80000080d0df:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d0e3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d0e7:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080d0ee:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:83
    }
    kmfree(path);
ffff80000080d0ef:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d0f3:	48 89 c7             	mov    rdi,rax
ffff80000080d0f6:	49 89 df             	mov    r15,rbx
ffff80000080d0f9:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080d100:	ff ff ff 
ffff80000080d103:	48 01 d8             	add    rax,rbx
ffff80000080d106:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:85

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
ffff80000080d108:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080d10e:	25 00 40 00 00       	and    eax,0x4000
ffff80000080d113:	85 c0                	test   eax,eax
ffff80000080d115:	74 1e                	je     ffff80000080d135 <sys_open+0x48a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:85 (discriminator 1)
ffff80000080d117:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d11b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d11f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d123:	48 83 f8 02          	cmp    rax,0x2
ffff80000080d127:	74 0c                	je     ffff80000080d135 <sys_open+0x48a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86
        return -ENOTDIR;
ffff80000080d129:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080d130:	e9 1e 02 00 00       	jmp    ffff80000080d353 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
ffff80000080d135:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080d13b:	25 00 40 00 00       	and    eax,0x4000
ffff80000080d140:	85 c0                	test   eax,eax
ffff80000080d142:	75 1e                	jne    ffff80000080d162 <sys_open+0x4b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87 (discriminator 1)
ffff80000080d144:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d148:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d14c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d150:	48 83 f8 02          	cmp    rax,0x2
ffff80000080d154:	75 0c                	jne    ffff80000080d162 <sys_open+0x4b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88
        return -EISDIR;
ffff80000080d156:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
ffff80000080d15d:	e9 f1 01 00 00       	jmp    ffff80000080d353 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:90

    filp = (struct file *) kmalloc();
ffff80000080d162:	49 89 df             	mov    r15,rbx
ffff80000080d165:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d16a:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff80000080d171:	ff ff ff 
ffff80000080d174:	48 01 da             	add    rdx,rbx
ffff80000080d177:	ff d2                	call   rdx
ffff80000080d179:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91
    memset(filp,0,sizeof(struct file));
ffff80000080d17d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d181:	ba 28 00 00 00       	mov    edx,0x28
ffff80000080d186:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d18b:	48 89 c7             	mov    rdi,rax
ffff80000080d18e:	49 89 df             	mov    r15,rbx
ffff80000080d191:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff80000080d198:	ff ff ff 
ffff80000080d19b:	48 01 d8             	add    rax,rbx
ffff80000080d19e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:92
    filp->dentry = dentry;
ffff80000080d1a0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d1a4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d1a8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:93
    filp->mode = flags;
ffff80000080d1ac:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080d1b2:	48 63 d0             	movsxd rdx,eax
ffff80000080d1b5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d1b9:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:95

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
ffff80000080d1bd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d1c1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d1c5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d1c9:	83 e0 04             	and    eax,0x4
ffff80000080d1cc:	48 85 c0             	test   rax,rax
ffff80000080d1cf:	74 18                	je     ffff80000080d1e9 <sys_open+0x53e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:97
        extern struct file_operations dev_dir_fops;
        filp->f_ops = &dev_dir_fops;	//////	find device file operation function
ffff80000080d1d1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d1d5:	48 ba d8 ff ff ff ff 	movabs rdx,0xffffffffffffffd8
ffff80000080d1dc:	ff ff ff 
ffff80000080d1df:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d1e3:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffff80000080d1e7:	eb 14                	jmp    ffff80000080d1fd <sys_open+0x552>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:100
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
ffff80000080d1e9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d1ed:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d1f1:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080d1f5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d1f9:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101
    if(filp->f_ops && filp->f_ops->open)
ffff80000080d1fd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d201:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d205:	48 85 c0             	test   rax,rax
ffff80000080d208:	74 33                	je     ffff80000080d23d <sys_open+0x592>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101 (discriminator 1)
ffff80000080d20a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d20e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d212:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d215:	48 85 c0             	test   rax,rax
ffff80000080d218:	74 23                	je     ffff80000080d23d <sys_open+0x592>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102
        error = filp->f_ops->open(dentry->dir_inode,filp);
ffff80000080d21a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d21e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d222:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080d225:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d229:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d22d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080d231:	48 89 d6             	mov    rsi,rdx
ffff80000080d234:	48 89 c7             	mov    rdi,rax
ffff80000080d237:	ff d1                	call   rcx
ffff80000080d239:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:103
    if(error != 1)
ffff80000080d23d:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080d242:	74 25                	je     ffff80000080d269 <sys_open+0x5be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:105
    {
        kmfree(filp);
ffff80000080d244:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d248:	48 89 c7             	mov    rdi,rax
ffff80000080d24b:	49 89 df             	mov    r15,rbx
ffff80000080d24e:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080d255:	ff ff ff 
ffff80000080d258:	48 01 d8             	add    rax,rbx
ffff80000080d25b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
        return -EFAULT;
ffff80000080d25d:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080d264:	e9 ea 00 00 00       	jmp    ffff80000080d353 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:109
    }

    if(filp->mode & O_TRUNC)
ffff80000080d269:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d26d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d271:	25 00 02 00 00       	and    eax,0x200
ffff80000080d276:	48 85 c0             	test   rax,rax
ffff80000080d279:	74 13                	je     ffff80000080d28e <sys_open+0x5e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:111
    {
        filp->dentry->dir_inode->file_size = 0;
ffff80000080d27b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d27f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d283:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d287:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:113
    }
    if(filp->mode & O_APPEND)
ffff80000080d28e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d292:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d296:	25 00 04 00 00       	and    eax,0x400
ffff80000080d29b:	48 85 c0             	test   rax,rax
ffff80000080d29e:	74 19                	je     ffff80000080d2b9 <sys_open+0x60e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:115
    {
        filp->position = filp->dentry->dir_inode->file_size;
ffff80000080d2a0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d2a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d2a8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d2ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d2af:	48 89 c2             	mov    rdx,rax
ffff80000080d2b2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d2b6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:118
    }

    f = current->openf;
ffff80000080d2b9:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080d2c0:	ff ff ff 
ffff80000080d2c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d2c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d2ca:	48 05 f8 00 00 00    	add    rax,0xf8
ffff80000080d2d0:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080d2d4:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080d2db:	eb 28                	jmp    ffff80000080d305 <sys_open+0x65a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120
        if(f[i] == NULL)
ffff80000080d2dd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d2e0:	48 98                	cdqe   
ffff80000080d2e2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080d2e9:	00 
ffff80000080d2ea:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d2ee:	48 01 d0             	add    rax,rdx
ffff80000080d2f1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d2f4:	48 85 c0             	test   rax,rax
ffff80000080d2f7:	75 08                	jne    ffff80000080d301 <sys_open+0x656>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:122
        {
            fd = i;
ffff80000080d2f9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d2fc:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
            break;
ffff80000080d2ff:	eb 0a                	jmp    ffff80000080d30b <sys_open+0x660>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080d301:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119 (discriminator 1)
ffff80000080d305:	83 7d d8 1f          	cmp    DWORD PTR [rbp-0x28],0x1f
ffff80000080d309:	7e d2                	jle    ffff80000080d2dd <sys_open+0x632>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:125
        }
    if(i == MAX_TASKS)
ffff80000080d30b:	83 7d d8 20          	cmp    DWORD PTR [rbp-0x28],0x20
ffff80000080d30f:	75 22                	jne    ffff80000080d333 <sys_open+0x688>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:127
    {
        kmfree(filp);
ffff80000080d311:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d315:	48 89 c7             	mov    rdi,rax
ffff80000080d318:	49 89 df             	mov    r15,rbx
ffff80000080d31b:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080d322:	ff ff ff 
ffff80000080d325:	48 01 d8             	add    rax,rbx
ffff80000080d328:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:129
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
ffff80000080d32a:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
ffff80000080d331:	eb 20                	jmp    ffff80000080d353 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:131
    }
    f[fd] = filp;
ffff80000080d333:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d336:	48 98                	cdqe   
ffff80000080d338:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080d33f:	00 
ffff80000080d340:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d344:	48 01 c2             	add    rdx,rax
ffff80000080d347:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d34b:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:133

    return fd;
ffff80000080d34e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d351:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:134
}
ffff80000080d353:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffff80000080d35a:	5b                   	pop    rbx
ffff80000080d35b:	41 5f                	pop    r15
ffff80000080d35d:	5d                   	pop    rbp
ffff80000080d35e:	c3                   	ret    

ffff80000080d35f <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:137

unsigned long sys_close(int fd)
{
ffff80000080d35f:	f3 0f 1e fa          	endbr64 
ffff80000080d363:	55                   	push   rbp
ffff80000080d364:	48 89 e5             	mov    rbp,rsp
ffff80000080d367:	41 57                	push   r15
ffff80000080d369:	53                   	push   rbx
ffff80000080d36a:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d36e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d36e <sys_close+0xf>
ffff80000080d375:	49 bb ba 55 01 00 00 	movabs r11,0x155ba
ffff80000080d37c:	00 00 00 
ffff80000080d37f:	4c 01 db             	add    rbx,r11
ffff80000080d382:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:138
    struct file * filp = NULL;
ffff80000080d385:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080d38c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080d38d:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080d391:	78 06                	js     ffff80000080d399 <sys_close+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141 (discriminator 1)
ffff80000080d393:	83 7d dc 1f          	cmp    DWORD PTR [rbp-0x24],0x1f
ffff80000080d397:	7e 0c                	jle    ffff80000080d3a5 <sys_close+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142
        return -EBADF;
ffff80000080d399:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d3a0:	e9 a8 00 00 00       	jmp    ffff80000080d44d <sys_close+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:144

    filp = current->openf[fd];
ffff80000080d3a5:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080d3ac:	ff ff ff 
ffff80000080d3af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d3b3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d3b6:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d3b9:	48 63 d2             	movsxd rdx,edx
ffff80000080d3bc:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d3c0:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d3c5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145
    if(filp->f_ops && filp->f_ops->close)
ffff80000080d3c9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d3cd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d3d1:	48 85 c0             	test   rax,rax
ffff80000080d3d4:	74 35                	je     ffff80000080d40b <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145 (discriminator 1)
ffff80000080d3d6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d3da:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d3de:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d3e2:	48 85 c0             	test   rax,rax
ffff80000080d3e5:	74 24                	je     ffff80000080d40b <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146
        filp->f_ops->close(filp->dentry->dir_inode,filp);
ffff80000080d3e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d3eb:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d3ef:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080d3f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d3f7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d3fb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d3ff:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d403:	48 89 d6             	mov    rsi,rdx
ffff80000080d406:	48 89 c7             	mov    rdi,rax
ffff80000080d409:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:148

    kmfree(filp);
ffff80000080d40b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d40f:	48 89 c7             	mov    rdi,rax
ffff80000080d412:	49 89 df             	mov    r15,rbx
ffff80000080d415:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080d41c:	ff ff ff 
ffff80000080d41f:	48 01 d8             	add    rax,rbx
ffff80000080d422:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149
    current->openf[fd] = NULL;
ffff80000080d424:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080d42b:	ff ff ff 
ffff80000080d42e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d432:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d435:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d438:	48 63 d2             	movsxd rdx,edx
ffff80000080d43b:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d43f:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
ffff80000080d446:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:151

    return 0;
ffff80000080d448:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152
}
ffff80000080d44d:	48 83 c4 20          	add    rsp,0x20
ffff80000080d451:	5b                   	pop    rbx
ffff80000080d452:	41 5f                	pop    r15
ffff80000080d454:	5d                   	pop    rbp
ffff80000080d455:	c3                   	ret    

ffff80000080d456 <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:155

unsigned long sys_read(int fd,void * buf,long count)
{
ffff80000080d456:	f3 0f 1e fa          	endbr64 
ffff80000080d45a:	55                   	push   rbp
ffff80000080d45b:	48 89 e5             	mov    rbp,rsp
ffff80000080d45e:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d462:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d462 <sys_read+0xc>
ffff80000080d469:	49 bb c6 54 01 00 00 	movabs r11,0x154c6
ffff80000080d470:	00 00 00 
ffff80000080d473:	4c 01 d8             	add    rax,r11
ffff80000080d476:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080d479:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d47d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:156
    struct file * filp = NULL;
ffff80000080d481:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080d488:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:157
    unsigned long ret = 0;
ffff80000080d489:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d490:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080d491:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080d495:	78 06                	js     ffff80000080d49d <sys_read+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160 (discriminator 1)
ffff80000080d497:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080d49b:	7e 09                	jle    ffff80000080d4a6 <sys_read+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161
        return -EBADF;
ffff80000080d49d:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d4a4:	eb 7c                	jmp    ffff80000080d522 <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:162
    if(count < 0)
ffff80000080d4a6:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080d4ab:	79 09                	jns    ffff80000080d4b6 <sys_read+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163
        return -EINVAL;
ffff80000080d4ad:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080d4b4:	eb 6c                	jmp    ffff80000080d522 <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:165

    filp = current->openf[fd];
ffff80000080d4b6:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d4bd:	ff ff ff 
ffff80000080d4c0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d4c4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d4c7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080d4ca:	48 63 d2             	movsxd rdx,edx
ffff80000080d4cd:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d4d1:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d4d6:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166
    if(filp->f_ops && filp->f_ops->read)
ffff80000080d4da:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d4de:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d4e2:	48 85 c0             	test   rax,rax
ffff80000080d4e5:	74 37                	je     ffff80000080d51e <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166 (discriminator 1)
ffff80000080d4e7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d4eb:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d4ef:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d4f3:	48 85 c0             	test   rax,rax
ffff80000080d4f6:	74 26                	je     ffff80000080d51e <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
ffff80000080d4f8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d4fc:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d500:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080d504:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080d508:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d50c:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080d510:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d514:	48 89 c7             	mov    rdi,rax
ffff80000080d517:	41 ff d0             	call   r8
ffff80000080d51a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:168
    return ret;
ffff80000080d51e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169
}
ffff80000080d522:	c9                   	leave  
ffff80000080d523:	c3                   	ret    

ffff80000080d524 <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:172

unsigned long sys_write(int fd,void * buf,long count)
{
ffff80000080d524:	f3 0f 1e fa          	endbr64 
ffff80000080d528:	55                   	push   rbp
ffff80000080d529:	48 89 e5             	mov    rbp,rsp
ffff80000080d52c:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d530:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d530 <sys_write+0xc>
ffff80000080d537:	49 bb f8 53 01 00 00 	movabs r11,0x153f8
ffff80000080d53e:	00 00 00 
ffff80000080d541:	4c 01 d8             	add    rax,r11
ffff80000080d544:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080d547:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d54b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:173
    struct file * filp = NULL;
ffff80000080d54f:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080d556:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:174
    unsigned long ret = 0;
ffff80000080d557:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d55e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080d55f:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080d563:	78 06                	js     ffff80000080d56b <sys_write+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177 (discriminator 1)
ffff80000080d565:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080d569:	7e 09                	jle    ffff80000080d574 <sys_write+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178
        return -EBADF;
ffff80000080d56b:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d572:	eb 7c                	jmp    ffff80000080d5f0 <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:179
    if(count < 0)
ffff80000080d574:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080d579:	79 09                	jns    ffff80000080d584 <sys_write+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180
        return -EINVAL;
ffff80000080d57b:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080d582:	eb 6c                	jmp    ffff80000080d5f0 <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:182

    filp = current->openf[fd];
ffff80000080d584:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d58b:	ff ff ff 
ffff80000080d58e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d592:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d595:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080d598:	48 63 d2             	movsxd rdx,edx
ffff80000080d59b:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d59f:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d5a4:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183
    if(filp->f_ops && filp->f_ops->write)
ffff80000080d5a8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d5ac:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d5b0:	48 85 c0             	test   rax,rax
ffff80000080d5b3:	74 37                	je     ffff80000080d5ec <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183 (discriminator 1)
ffff80000080d5b5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d5b9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d5bd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d5c1:	48 85 c0             	test   rax,rax
ffff80000080d5c4:	74 26                	je     ffff80000080d5ec <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
ffff80000080d5c6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d5ca:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d5ce:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
ffff80000080d5d2:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080d5d6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d5da:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080d5de:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d5e2:	48 89 c7             	mov    rdi,rax
ffff80000080d5e5:	41 ff d0             	call   r8
ffff80000080d5e8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:185
    return ret;
ffff80000080d5ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186
}
ffff80000080d5f0:	c9                   	leave  
ffff80000080d5f1:	c3                   	ret    

ffff80000080d5f2 <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:190


unsigned long sys_lseek(int filds,long offset,int whence)
{
ffff80000080d5f2:	f3 0f 1e fa          	endbr64 
ffff80000080d5f6:	55                   	push   rbp
ffff80000080d5f7:	48 89 e5             	mov    rbp,rsp
ffff80000080d5fa:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d5fe:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d5fe <sys_lseek+0xc>
ffff80000080d605:	49 bb 2a 53 01 00 00 	movabs r11,0x1532a
ffff80000080d60c:	00 00 00 
ffff80000080d60f:	4c 01 d8             	add    rax,r11
ffff80000080d612:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080d615:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d619:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:191
    struct file * filp = NULL;
ffff80000080d61c:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080d623:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:192
    unsigned long ret = 0;
ffff80000080d624:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d62b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
ffff80000080d62c:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080d630:	78 06                	js     ffff80000080d638 <sys_lseek+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195 (discriminator 1)
ffff80000080d632:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080d636:	7e 0c                	jle    ffff80000080d644 <sys_lseek+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196
        return -EBADF;
ffff80000080d638:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d63f:	e9 82 00 00 00       	jmp    ffff80000080d6c6 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197
    if(whence < 0 || whence >= SEEK_MAX)
ffff80000080d644:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080d648:	78 06                	js     ffff80000080d650 <sys_lseek+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197 (discriminator 1)
ffff80000080d64a:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
ffff80000080d64e:	7e 09                	jle    ffff80000080d659 <sys_lseek+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198
        return -EINVAL;
ffff80000080d650:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080d657:	eb 6d                	jmp    ffff80000080d6c6 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:200

    filp = current->openf[filds];
ffff80000080d659:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d660:	ff ff ff 
ffff80000080d663:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d667:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d66a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080d66d:	48 63 d2             	movsxd rdx,edx
ffff80000080d670:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d674:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d679:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201
    if(filp->f_ops && filp->f_ops->lseek)
ffff80000080d67d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d681:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d685:	48 85 c0             	test   rax,rax
ffff80000080d688:	74 38                	je     ffff80000080d6c2 <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201 (discriminator 1)
ffff80000080d68a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d68e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d692:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080d696:	48 85 c0             	test   rax,rax
ffff80000080d699:	74 27                	je     ffff80000080d6c2 <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202
        ret = filp->f_ops->lseek(filp,offset,whence);
ffff80000080d69b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d69f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d6a3:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
ffff80000080d6a7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080d6aa:	48 63 d0             	movsxd rdx,eax
ffff80000080d6ad:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080d6b1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d6b5:	48 89 ce             	mov    rsi,rcx
ffff80000080d6b8:	48 89 c7             	mov    rdi,rax
ffff80000080d6bb:	41 ff d0             	call   r8
ffff80000080d6be:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:203
    return ret;
ffff80000080d6c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204
}
ffff80000080d6c6:	c9                   	leave  
ffff80000080d6c7:	c3                   	ret    

ffff80000080d6c8 <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:214
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
ffff80000080d6c8:	f3 0f 1e fa          	endbr64 
ffff80000080d6cc:	55                   	push   rbp
ffff80000080d6cd:	48 89 e5             	mov    rbp,rsp
ffff80000080d6d0:	41 57                	push   r15
ffff80000080d6d2:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d6d6:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080d6d6 <sys_vfork+0xe>
ffff80000080d6dd:	49 bb 52 52 01 00 00 	movabs r11,0x15252
ffff80000080d6e4:	00 00 00 
ffff80000080d6e7:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:215
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
ffff80000080d6ea:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080d6f1:	ff ff ff 
ffff80000080d6f4:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080d6f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d6fb:	48 8b 80 fc 01 00 00 	mov    rax,QWORD PTR [rax+0x1fc]
ffff80000080d702:	48 2d d0 00 00 00    	sub    rax,0xd0
ffff80000080d708:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:216
    printf("sys_vfork\n");
ffff80000080d70c:	48 b8 10 d6 ff ff ff 	movabs rax,0xffffffffffffd610
ffff80000080d713:	ff ff ff 
ffff80000080d716:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080d71a:	48 89 c7             	mov    rdi,rax
ffff80000080d71d:	49 89 d7             	mov    r15,rdx
ffff80000080d720:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d725:	48 b9 94 ee fd ff ff 	movabs rcx,0xfffffffffffdee94
ffff80000080d72c:	ff ff ff 
ffff80000080d72f:	48 01 d1             	add    rcx,rdx
ffff80000080d732:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:218
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
ffff80000080d734:	90                   	nop
ffff80000080d735:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d739:	c9                   	leave  
ffff80000080d73a:	c3                   	ret    

ffff80000080d73b <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:261

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
ffff80000080d73b:	f3 0f 1e fa          	endbr64 
ffff80000080d73f:	55                   	push   rbp
ffff80000080d740:	48 89 e5             	mov    rbp,rsp
ffff80000080d743:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d743 <sys_wait+0x8>
ffff80000080d74a:	49 bb e5 51 01 00 00 	movabs r11,0x151e5
ffff80000080d751:	00 00 00 
ffff80000080d754:	4c 01 d8             	add    rax,r11
ffff80000080d757:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
ffff80000080d75a:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000080d75e:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:262
    struct process* waitee=NULL;
ffff80000080d761:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d768:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:264
    extern struct process task[];
    if(!current->child_procs)
ffff80000080d769:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d770:	ff ff ff 
ffff80000080d773:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d777:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d77a:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080d781:	48 85 d2             	test   rdx,rdx
ffff80000080d784:	75 0c                	jne    ffff80000080d792 <sys_wait+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:265
        return -ECHILD;//没有子进程可以等
ffff80000080d786:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080d78d:	e9 ef 01 00 00       	jmp    ffff80000080d981 <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266
    if(pid==-1){
ffff80000080d792:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
ffff80000080d796:	75 58                	jne    ffff80000080d7f0 <sys_wait+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d798:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d79f:	ff ff ff 
ffff80000080d7a2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d7a6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d7a9:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080d7b0:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080d7b4:	eb 31                	jmp    ffff80000080d7e7 <sys_wait+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
                struct process* p=l->data;
ffff80000080d7b6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080d7ba:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080d7be:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:271
                if(p->stat == TASK_ZOMBIE) {
ffff80000080d7c2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080d7c6:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080d7c9:	83 fa 04             	cmp    edx,0x4
ffff80000080d7cc:	75 0d                	jne    ffff80000080d7db <sys_wait+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:272
                    waitee=p;
ffff80000080d7ce:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080d7d2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
                    goto done;
ffff80000080d7d6:	e9 46 01 00 00       	jmp    ffff80000080d921 <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d7db:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080d7df:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080d7e3:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269 (discriminator 1)
ffff80000080d7e7:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff80000080d7ec:	75 c8                	jne    ffff80000080d7b6 <sys_wait+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
ffff80000080d7ee:	eb a8                	jmp    ffff80000080d798 <sys_wait+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:278
                }
            }
        }

    }else if(pid==0) {
ffff80000080d7f0:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080d7f4:	75 77                	jne    ffff80000080d86d <sys_wait+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d7f6:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d7fd:	ff ff ff 
ffff80000080d800:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d804:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d807:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080d80e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080d812:	eb 50                	jmp    ffff80000080d864 <sys_wait+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
                struct process* p=l->data;
ffff80000080d814:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d818:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080d81c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
ffff80000080d820:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d824:	8b 4a 04             	mov    ecx,DWORD PTR [rdx+0x4]
ffff80000080d827:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080d82e:	ff ff ff 
ffff80000080d831:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d835:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d838:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080d83b:	39 d1                	cmp    ecx,edx
ffff80000080d83d:	75 19                	jne    ffff80000080d858 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283 (discriminator 1)
ffff80000080d83f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d843:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080d846:	83 fa 04             	cmp    edx,0x4
ffff80000080d849:	75 0d                	jne    ffff80000080d858 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284
                    waitee=p;
ffff80000080d84b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080d84f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
                    goto done;
ffff80000080d853:	e9 c9 00 00 00       	jmp    ffff80000080d921 <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d858:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d85c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080d860:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281 (discriminator 1)
ffff80000080d864:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d869:	75 a9                	jne    ffff80000080d814 <sys_wait+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281
ffff80000080d86b:	eb 89                	jmp    ffff80000080d7f6 <sys_wait+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:290
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
ffff80000080d86d:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080d871:	79 03                	jns    ffff80000080d876 <sys_wait+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:290 (discriminator 1)
ffff80000080d873:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080d876:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080d87d:	eb 4f                	jmp    ffff80000080d8ce <sys_wait+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293
            if(task[i].pid==pid){
ffff80000080d87f:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080d886:	ff ff ff 
ffff80000080d889:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d88d:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080d890:	48 63 d2             	movsxd rdx,edx
ffff80000080d893:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080d89a:	48 01 ca             	add    rdx,rcx
ffff80000080d89d:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080d89f:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080d8a2:	39 d1                	cmp    ecx,edx
ffff80000080d8a4:	75 24                	jne    ffff80000080d8ca <sys_wait+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294
                waitee=&task[i];
ffff80000080d8a6:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080d8a9:	48 63 d2             	movsxd rdx,edx
ffff80000080d8ac:	48 69 ca 54 03 00 00 	imul   rcx,rdx,0x354
ffff80000080d8b3:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080d8ba:	ff ff ff 
ffff80000080d8bd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d8c1:	48 01 ca             	add    rdx,rcx
ffff80000080d8c4:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295
                break;
ffff80000080d8c8:	eb 0a                	jmp    ffff80000080d8d4 <sys_wait+0x199>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080d8ca:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292 (discriminator 1)
ffff80000080d8ce:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080d8d2:	7e ab                	jle    ffff80000080d87f <sys_wait+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
ffff80000080d8d4:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080d8d9:	74 21                	je     ffff80000080d8fc <sys_wait+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298 (discriminator 1)
ffff80000080d8db:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d8df:	8b 92 bc 00 00 00    	mov    edx,DWORD PTR [rdx+0xbc]
ffff80000080d8e5:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff80000080d8ec:	ff ff ff 
ffff80000080d8ef:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080d8f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d8f6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d8f8:	39 c2                	cmp    edx,eax
ffff80000080d8fa:	74 09                	je     ffff80000080d905 <sys_wait+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
            return -ECHILD;//没有这个进程或者不是子进程
ffff80000080d8fc:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080d903:	eb 7c                	jmp    ffff80000080d981 <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:301
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
ffff80000080d905:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:301 (discriminator 1)
ffff80000080d906:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d90a:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080d90d:	83 f8 04             	cmp    eax,0x4
ffff80000080d910:	75 f4                	jne    ffff80000080d906 <sys_wait+0x1cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302
        *stat_loc=waitee->exit_code;
ffff80000080d912:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d916:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080d919:	89 c2                	mov    edx,eax
ffff80000080d91b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d91f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:306
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
ffff80000080d921:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d925:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:308
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
ffff80000080d92c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d930:	48 05 34 03 00 00    	add    rax,0x334
ffff80000080d936:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
    }
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
ffff80000080d93a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d93e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d941:	48 85 c0             	test   rax,rax
ffff80000080d944:	74 13                	je     ffff80000080d959 <sys_wait+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:48
        entry->prev->next=entry->next;
ffff80000080d946:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d94a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d94d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d951:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080d955:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:49
    if(entry->next)
ffff80000080d959:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d95d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d961:	48 85 c0             	test   rax,rax
ffff80000080d964:	74 12                	je     ffff80000080d978 <sys_wait+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:50
        entry->next->prev=entry->prev;
ffff80000080d966:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d96a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d96e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d972:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d975:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:51
}
ffff80000080d978:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:310
    //TODO 被信号中断时返回-1
    return waitee->pid;
ffff80000080d979:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d97d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d97f:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:311
}
ffff80000080d981:	5d                   	pop    rbp
ffff80000080d982:	c3                   	ret    

ffff80000080d983 <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:313
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
ffff80000080d983:	f3 0f 1e fa          	endbr64 
ffff80000080d987:	55                   	push   rbp
ffff80000080d988:	48 89 e5             	mov    rbp,rsp
ffff80000080d98b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d98b <sys_wait4+0x8>
ffff80000080d992:	49 bb 9d 4f 01 00 00 	movabs r11,0x14f9d
ffff80000080d999:	00 00 00 
ffff80000080d99c:	4c 01 d8             	add    rax,r11
ffff80000080d99f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080d9a3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080d9a7:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080d9aa:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:349
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
ffff80000080d9ae:	90                   	nop
ffff80000080d9af:	5d                   	pop    rbp
ffff80000080d9b0:	c3                   	ret    

ffff80000080d9b1 <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:352

unsigned long sys_brk(unsigned long brk)
{
ffff80000080d9b1:	f3 0f 1e fa          	endbr64 
ffff80000080d9b5:	55                   	push   rbp
ffff80000080d9b6:	48 89 e5             	mov    rbp,rsp
ffff80000080d9b9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d9b9 <sys_brk+0x8>
ffff80000080d9c0:	49 bb 6f 4f 01 00 00 	movabs r11,0x14f6f
ffff80000080d9c7:	00 00 00 
ffff80000080d9ca:	4c 01 d8             	add    rax,r11
ffff80000080d9cd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:366
//
//    new_brk = do_brk(current->mm->end_brk,new_brk - current->mm->end_brk);	//expand brk space
//
//    current->mm->end_brk = new_brk;
//    return new_brk;
}
ffff80000080d9d1:	90                   	nop
ffff80000080d9d2:	5d                   	pop    rbp
ffff80000080d9d3:	c3                   	ret    

ffff80000080d9d4 <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:369

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
ffff80000080d9d4:	f3 0f 1e fa          	endbr64 
ffff80000080d9d8:	55                   	push   rbp
ffff80000080d9d9:	48 89 e5             	mov    rbp,rsp
ffff80000080d9dc:	41 57                	push   r15
ffff80000080d9de:	53                   	push   rbx
ffff80000080d9df:	48 83 ec 10          	sub    rsp,0x10
ffff80000080d9e3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d9e3 <sys_reboot+0xf>
ffff80000080d9ea:	49 bb 45 4f 01 00 00 	movabs r11,0x14f45
ffff80000080d9f1:	00 00 00 
ffff80000080d9f4:	4c 01 db             	add    rbx,r11
ffff80000080d9f7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080d9fb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:370
    printf("sys_reboot\n");
ffff80000080d9ff:	48 b8 1b d6 ff ff ff 	movabs rax,0xffffffffffffd61b
ffff80000080da06:	ff ff ff 
ffff80000080da09:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080da0d:	48 89 c7             	mov    rdi,rax
ffff80000080da10:	49 89 df             	mov    r15,rbx
ffff80000080da13:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080da18:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080da1f:	ff ff ff 
ffff80000080da22:	48 01 da             	add    rdx,rbx
ffff80000080da25:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:371
    switch(cmd)
ffff80000080da27:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080da2c:	74 09                	je     ffff80000080da37 <sys_reboot+0x63>
ffff80000080da2e:	48 83 7d e8 02       	cmp    QWORD PTR [rbp-0x18],0x2
ffff80000080da33:	74 20                	je     ffff80000080da55 <sys_reboot+0x81>
ffff80000080da35:	eb 48                	jmp    ffff80000080da7f <sys_reboot+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:374
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
ffff80000080da37:	be fe 00 00 00       	mov    esi,0xfe
ffff80000080da3c:	bf 64 00 00 00       	mov    edi,0x64
ffff80000080da41:	49 89 df             	mov    r15,rbx
ffff80000080da44:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080da4b:	ff ff ff 
ffff80000080da4e:	48 01 d8             	add    rax,rbx
ffff80000080da51:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:375
            break;
ffff80000080da53:	eb 53                	jmp    ffff80000080daa8 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:378

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
ffff80000080da55:	48 b8 28 d6 ff ff ff 	movabs rax,0xffffffffffffd628
ffff80000080da5c:	ff ff ff 
ffff80000080da5f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080da63:	48 89 c7             	mov    rdi,rax
ffff80000080da66:	49 89 df             	mov    r15,rbx
ffff80000080da69:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080da6e:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080da75:	ff ff ff 
ffff80000080da78:	48 01 da             	add    rdx,rbx
ffff80000080da7b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:379
            break;
ffff80000080da7d:	eb 29                	jmp    ffff80000080daa8 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:382

        default:
            printf("sys_reboot cmd ERROR!\n");
ffff80000080da7f:	48 b8 48 d6 ff ff ff 	movabs rax,0xffffffffffffd648
ffff80000080da86:	ff ff ff 
ffff80000080da89:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080da8d:	48 89 c7             	mov    rdi,rax
ffff80000080da90:	49 89 df             	mov    r15,rbx
ffff80000080da93:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080da98:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080da9f:	ff ff ff 
ffff80000080daa2:	48 01 da             	add    rdx,rbx
ffff80000080daa5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383
            break;
ffff80000080daa7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:385
    }
    return 0;
ffff80000080daa8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386
}
ffff80000080daad:	48 83 c4 10          	add    rsp,0x10
ffff80000080dab1:	5b                   	pop    rbx
ffff80000080dab2:	41 5f                	pop    r15
ffff80000080dab4:	5d                   	pop    rbp
ffff80000080dab5:	c3                   	ret    

ffff80000080dab6 <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:390


unsigned long sys_chdir(char *filename)
{
ffff80000080dab6:	f3 0f 1e fa          	endbr64 
ffff80000080daba:	55                   	push   rbp
ffff80000080dabb:	48 89 e5             	mov    rbp,rsp
ffff80000080dabe:	41 57                	push   r15
ffff80000080dac0:	53                   	push   rbx
ffff80000080dac1:	48 83 ec 30          	sub    rsp,0x30
ffff80000080dac5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dac5 <sys_chdir+0xf>
ffff80000080dacc:	49 bb 63 4e 01 00 00 	movabs r11,0x14e63
ffff80000080dad3:	00 00 00 
ffff80000080dad6:	4c 01 db             	add    rbx,r11
ffff80000080dad9:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:391
    char * path = NULL;
ffff80000080dadd:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080dae4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:392
    long pathlen = 0;
ffff80000080dae5:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080daec:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:393
    struct dir_entry * dentry = NULL;
ffff80000080daed:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080daf4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:395

    printf("sys_chdir\n");
ffff80000080daf5:	48 b8 5f d6 ff ff ff 	movabs rax,0xffffffffffffd65f
ffff80000080dafc:	ff ff ff 
ffff80000080daff:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080db03:	48 89 c7             	mov    rdi,rax
ffff80000080db06:	49 89 df             	mov    r15,rbx
ffff80000080db09:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080db0e:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080db15:	ff ff ff 
ffff80000080db18:	48 01 da             	add    rdx,rbx
ffff80000080db1b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:396
    path = (char *) kmalloc();
ffff80000080db1d:	49 89 df             	mov    r15,rbx
ffff80000080db20:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080db25:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff80000080db2c:	ff ff ff 
ffff80000080db2f:	48 01 da             	add    rdx,rbx
ffff80000080db32:	ff d2                	call   rdx
ffff80000080db34:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:398

    if(path == NULL)
ffff80000080db38:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080db3d:	75 0c                	jne    ffff80000080db4b <sys_chdir+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:399
        return -ENOMEM;
ffff80000080db3f:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080db46:	e9 28 01 00 00       	jmp    ffff80000080dc73 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:400
    memset(path,0,PAGE_4K_SIZE);
ffff80000080db4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080db4f:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080db54:	be 00 00 00 00       	mov    esi,0x0
ffff80000080db59:	48 89 c7             	mov    rdi,rax
ffff80000080db5c:	49 89 df             	mov    r15,rbx
ffff80000080db5f:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff80000080db66:	ff ff ff 
ffff80000080db69:	48 01 d8             	add    rax,rbx
ffff80000080db6c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:401
    pathlen = strlen(filename);
ffff80000080db6e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080db72:	48 89 c7             	mov    rdi,rax
ffff80000080db75:	49 89 df             	mov    r15,rbx
ffff80000080db78:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff80000080db7f:	ff ff ff 
ffff80000080db82:	48 01 d8             	add    rax,rbx
ffff80000080db85:	ff d0                	call   rax
ffff80000080db87:	48 98                	cdqe   
ffff80000080db89:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:402
    if(pathlen <= 0)
ffff80000080db8d:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080db92:	7f 25                	jg     ffff80000080dbb9 <sys_chdir+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:404
    {
        kmfree(path);
ffff80000080db94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080db98:	48 89 c7             	mov    rdi,rax
ffff80000080db9b:	49 89 df             	mov    r15,rbx
ffff80000080db9e:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080dba5:	ff ff ff 
ffff80000080dba8:	48 01 d8             	add    rax,rbx
ffff80000080dbab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
        return -EFAULT;
ffff80000080dbad:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080dbb4:	e9 ba 00 00 00       	jmp    ffff80000080dc73 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:407
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080dbb9:	48 81 7d e0 ff 0f 00 	cmp    QWORD PTR [rbp-0x20],0xfff
ffff80000080dbc0:	00 
ffff80000080dbc1:	7e 25                	jle    ffff80000080dbe8 <sys_chdir+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:409
    {
        kmfree(path);
ffff80000080dbc3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dbc7:	48 89 c7             	mov    rdi,rax
ffff80000080dbca:	49 89 df             	mov    r15,rbx
ffff80000080dbcd:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080dbd4:	ff ff ff 
ffff80000080dbd7:	48 01 d8             	add    rax,rbx
ffff80000080dbda:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:410
        return -ENAMETOOLONG;
ffff80000080dbdc:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080dbe3:	e9 8b 00 00 00       	jmp    ffff80000080dc73 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:412
    }
    strcpy(filename,path);
ffff80000080dbe8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dbec:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080dbf0:	48 89 d6             	mov    rsi,rdx
ffff80000080dbf3:	48 89 c7             	mov    rdi,rax
ffff80000080dbf6:	49 89 df             	mov    r15,rbx
ffff80000080dbf9:	48 b8 51 12 ff ff ff 	movabs rax,0xffffffffffff1251
ffff80000080dc00:	ff ff ff 
ffff80000080dc03:	48 01 d8             	add    rax,rbx
ffff80000080dc06:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:414

    dentry = path_walk(path,0);
ffff80000080dc08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dc0c:	be 00 00 00 00       	mov    esi,0x0
ffff80000080dc11:	48 89 c7             	mov    rdi,rax
ffff80000080dc14:	49 89 df             	mov    r15,rbx
ffff80000080dc17:	48 b8 e0 99 fe ff ff 	movabs rax,0xfffffffffffe99e0
ffff80000080dc1e:	ff ff ff 
ffff80000080dc21:	48 01 d8             	add    rax,rbx
ffff80000080dc24:	ff d0                	call   rax
ffff80000080dc26:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:415
    kmfree(path);
ffff80000080dc2a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dc2e:	48 89 c7             	mov    rdi,rax
ffff80000080dc31:	49 89 df             	mov    r15,rbx
ffff80000080dc34:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000080dc3b:	ff ff ff 
ffff80000080dc3e:	48 01 d8             	add    rax,rbx
ffff80000080dc41:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:417

    if(dentry == NULL)
ffff80000080dc43:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080dc48:	75 09                	jne    ffff80000080dc53 <sys_chdir+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:418
        return -ENOENT;
ffff80000080dc4a:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080dc51:	eb 20                	jmp    ffff80000080dc73 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
ffff80000080dc53:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080dc57:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080dc5b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080dc5f:	48 83 f8 02          	cmp    rax,0x2
ffff80000080dc63:	74 09                	je     ffff80000080dc6e <sys_chdir+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:420
        return -ENOTDIR;
ffff80000080dc65:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080dc6c:	eb 05                	jmp    ffff80000080dc73 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421
    return 0;
ffff80000080dc6e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
}
ffff80000080dc73:	48 83 c4 30          	add    rsp,0x30
ffff80000080dc77:	5b                   	pop    rbx
ffff80000080dc78:	41 5f                	pop    r15
ffff80000080dc7a:	5d                   	pop    rbp
ffff80000080dc7b:	c3                   	ret    

ffff80000080dc7c <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:425

unsigned long sys_getdents(int fd, void * dirent, long count)
{
ffff80000080dc7c:	f3 0f 1e fa          	endbr64 
ffff80000080dc80:	55                   	push   rbp
ffff80000080dc81:	48 89 e5             	mov    rbp,rsp
ffff80000080dc84:	48 83 ec 30          	sub    rsp,0x30
ffff80000080dc88:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dc88 <sys_getdents+0xc>
ffff80000080dc8f:	49 bb a0 4c 01 00 00 	movabs r11,0x14ca0
ffff80000080dc96:	00 00 00 
ffff80000080dc99:	4c 01 d8             	add    rax,r11
ffff80000080dc9c:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080dc9f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080dca3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426
    struct file * filp = NULL;
ffff80000080dca7:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080dcae:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:427
    unsigned long ret = 0;
ffff80000080dcaf:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080dcb6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
ffff80000080dcb7:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080dcbb:	78 06                	js     ffff80000080dcc3 <sys_getdents+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430 (discriminator 1)
ffff80000080dcbd:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
ffff80000080dcc1:	7e 0c                	jle    ffff80000080dccf <sys_getdents+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431
        return -EBADF;
ffff80000080dcc3:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080dcca:	e9 85 00 00 00       	jmp    ffff80000080dd54 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:432
    if(count < 0)
ffff80000080dccf:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080dcd4:	79 09                	jns    ffff80000080dcdf <sys_getdents+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:433
        return -EINVAL;
ffff80000080dcd6:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080dcdd:	eb 75                	jmp    ffff80000080dd54 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:435

    filp = current->openf[fd];
ffff80000080dcdf:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080dce6:	ff ff ff 
ffff80000080dce9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dced:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080dcf0:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080dcf3:	48 63 c9             	movsxd rcx,ecx
ffff80000080dcf6:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080dcfa:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080dcff:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436
    if(filp->f_ops && filp->f_ops->readdir)
ffff80000080dd03:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080dd07:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080dd0b:	48 85 d2             	test   rdx,rdx
ffff80000080dd0e:	74 40                	je     ffff80000080dd50 <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436 (discriminator 1)
ffff80000080dd10:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080dd14:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080dd18:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080dd1c:	48 85 d2             	test   rdx,rdx
ffff80000080dd1f:	74 2f                	je     ffff80000080dd50 <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
ffff80000080dd21:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080dd25:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080dd29:	4c 8b 42 30          	mov    r8,QWORD PTR [rdx+0x30]
ffff80000080dd2d:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080dd31:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080dd35:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080dd3c:	ff ff ff 
ffff80000080dd3f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080dd43:	48 89 c2             	mov    rdx,rax
ffff80000080dd46:	48 89 cf             	mov    rdi,rcx
ffff80000080dd49:	41 ff d0             	call   r8
ffff80000080dd4c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:438
    return ret;
ffff80000080dd50:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439
}
ffff80000080dd54:	c9                   	leave  
ffff80000080dd55:	c3                   	ret    

ffff80000080dd56 <init_ramfs>:
init_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:28
};
struct index_node_operations ramfs_iops={
        .lookup=lookup_inode_ramfs,.create=create_inode_ramfs
};
struct index_node* test;
void init_ramfs(){
ffff80000080dd56:	f3 0f 1e fa          	endbr64 
ffff80000080dd5a:	55                   	push   rbp
ffff80000080dd5b:	48 89 e5             	mov    rbp,rsp
ffff80000080dd5e:	41 57                	push   r15
ffff80000080dd60:	53                   	push   rbx
ffff80000080dd61:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dd61 <init_ramfs+0xb>
ffff80000080dd68:	49 bb c7 4b 01 00 00 	movabs r11,0x14bc7
ffff80000080dd6f:	00 00 00 
ffff80000080dd72:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:30
    //挂载新文件系统到/mnt
    ramdisk_base= (char *) kmallocat(0, 100);
ffff80000080dd75:	be 64 00 00 00       	mov    esi,0x64
ffff80000080dd7a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080dd7f:	49 89 df             	mov    r15,rbx
ffff80000080dd82:	48 b8 69 f8 fd ff ff 	movabs rax,0xfffffffffffdf869
ffff80000080dd89:	ff ff ff 
ffff80000080dd8c:	48 01 d8             	add    rax,rbx
ffff80000080dd8f:	ff d0                	call   rax
ffff80000080dd91:	48 89 c2             	mov    rdx,rax
ffff80000080dd94:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff80000080dd9b:	ff ff ff 
ffff80000080dd9e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dda2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:31
    if(ramdisk_base==-1){
ffff80000080dda5:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff80000080ddac:	ff ff ff 
ffff80000080ddaf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ddb3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ddb6:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
ffff80000080ddba:	75 2d                	jne    ffff80000080dde9 <init_ramfs+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:32
        comprintf("failed to init ramfs.\n");
ffff80000080ddbc:	48 b8 6a d6 ff ff ff 	movabs rax,0xffffffffffffd66a
ffff80000080ddc3:	ff ff ff 
ffff80000080ddc6:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ddca:	48 89 c7             	mov    rdi,rax
ffff80000080ddcd:	49 89 df             	mov    r15,rbx
ffff80000080ddd0:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ddd5:	48 ba ac 0c ff ff ff 	movabs rdx,0xffffffffffff0cac
ffff80000080dddc:	ff ff ff 
ffff80000080dddf:	48 01 da             	add    rdx,rbx
ffff80000080dde2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:33
        return;
ffff80000080dde4:	e9 c2 01 00 00       	jmp    ffff80000080dfab <init_ramfs+0x255>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:35
    }
    ramdisk_size=PAGE_4K_SIZE*100;
ffff80000080dde9:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff80000080ddf0:	ff ff ff 
ffff80000080ddf3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ddf7:	48 c7 00 00 40 06 00 	mov    QWORD PTR [rax],0x64000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:37

    ramfs_sb.sb_ops=&ramfs_fops;
ffff80000080ddfe:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff80000080de05:	ff ff ff 
ffff80000080de08:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080de0c:	48 ba 10 fd ff ff ff 	movabs rdx,0xfffffffffffffd10
ffff80000080de13:	ff ff ff 
ffff80000080de16:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080de1a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:38
    ramfs_sb.root=dmnt;
ffff80000080de1e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080de25:	ff ff ff 
ffff80000080de28:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080de2c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080de2f:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff80000080de36:	ff ff ff 
ffff80000080de39:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080de3d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:40
    //解压img里面的test程序
    memcpy(ramdisk_base, _binary_bin_test_elf_start, (char*)_binary_bin_test_elf_end - (char*)_binary_bin_test_elf_start);
ffff80000080de40:	48 b8 18 fd ff ff ff 	movabs rax,0xfffffffffffffd18
ffff80000080de47:	ff ff ff 
ffff80000080de4a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080de4e:	48 89 c2             	mov    rdx,rax
ffff80000080de51:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000080de58:	ff ff ff 
ffff80000080de5b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080de5f:	48 89 c1             	mov    rcx,rax
ffff80000080de62:	48 89 d0             	mov    rax,rdx
ffff80000080de65:	48 29 c8             	sub    rax,rcx
ffff80000080de68:	89 c2                	mov    edx,eax
ffff80000080de6a:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff80000080de71:	ff ff ff 
ffff80000080de74:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080de78:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080de7b:	48 b9 90 fd ff ff ff 	movabs rcx,0xfffffffffffffd90
ffff80000080de82:	ff ff ff 
ffff80000080de85:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080de89:	48 89 ce             	mov    rsi,rcx
ffff80000080de8c:	48 89 c7             	mov    rdi,rax
ffff80000080de8f:	49 89 df             	mov    r15,rbx
ffff80000080de92:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff80000080de99:	ff ff ff 
ffff80000080de9c:	48 01 d8             	add    rax,rbx
ffff80000080de9f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:41
    test= (struct index_node *) kmalloc();
ffff80000080dea1:	49 89 df             	mov    r15,rbx
ffff80000080dea4:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dea9:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff80000080deb0:	ff ff ff 
ffff80000080deb3:	48 01 da             	add    rdx,rbx
ffff80000080deb6:	ff d2                	call   rdx
ffff80000080deb8:	48 89 c2             	mov    rdx,rax
ffff80000080debb:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080dec2:	ff ff ff 
ffff80000080dec5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dec9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:42
    test->f_ops=&ramfs_fops;
ffff80000080decc:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080ded3:	ff ff ff 
ffff80000080ded6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080deda:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080dedd:	48 ba 10 fd ff ff ff 	movabs rdx,0xfffffffffffffd10
ffff80000080dee4:	ff ff ff 
ffff80000080dee7:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080deeb:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:43
    test->file_size= (char*)_binary_bin_test_elf_end - (char*)_binary_bin_test_elf_start;
ffff80000080deef:	48 b8 18 fd ff ff ff 	movabs rax,0xfffffffffffffd18
ffff80000080def6:	ff ff ff 
ffff80000080def9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080defd:	48 89 c2             	mov    rdx,rax
ffff80000080df00:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000080df07:	ff ff ff 
ffff80000080df0a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df0e:	48 29 c2             	sub    rdx,rax
ffff80000080df11:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080df18:	ff ff ff 
ffff80000080df1b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df1f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080df22:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:44
    test->sb=&ramfs_sb;
ffff80000080df25:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080df2c:	ff ff ff 
ffff80000080df2f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df33:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080df36:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000080df3d:	ff ff ff 
ffff80000080df40:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080df44:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:45
    test->attribute=FS_ATTR_FILE;
ffff80000080df48:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080df4f:	ff ff ff 
ffff80000080df52:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df56:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080df59:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080df60:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:46
    test->inode_ops=&ramfs_iops;
ffff80000080df61:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080df68:	ff ff ff 
ffff80000080df6b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df6f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080df72:	48 ba c0 ff ff ff ff 	movabs rdx,0xffffffffffffffc0
ffff80000080df79:	ff ff ff 
ffff80000080df7c:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080df80:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:48
    //设置一下dmnt的inode的操作，查找的时候会用到
    dmnt->dir_inode->inode_ops=&ramfs_iops;
ffff80000080df84:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080df8b:	ff ff ff 
ffff80000080df8e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df92:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080df95:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080df99:	48 ba c0 ff ff ff ff 	movabs rdx,0xffffffffffffffc0
ffff80000080dfa0:	ff ff ff 
ffff80000080dfa3:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080dfa7:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:49
}
ffff80000080dfab:	5b                   	pop    rbx
ffff80000080dfac:	41 5f                	pop    r15
ffff80000080dfae:	5d                   	pop    rbp
ffff80000080dfaf:	c3                   	ret    

ffff80000080dfb0 <create_inode_ramfs>:
create_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:51

long create_inode_ramfs(struct index_node * inode,struct dir_entry * dentry,int mode){}
ffff80000080dfb0:	f3 0f 1e fa          	endbr64 
ffff80000080dfb4:	55                   	push   rbp
ffff80000080dfb5:	48 89 e5             	mov    rbp,rsp
ffff80000080dfb8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dfb8 <create_inode_ramfs+0x8>
ffff80000080dfbf:	49 bb 70 49 01 00 00 	movabs r11,0x14970
ffff80000080dfc6:	00 00 00 
ffff80000080dfc9:	4c 01 d8             	add    rax,r11
ffff80000080dfcc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080dfd0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080dfd4:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080dfd7:	90                   	nop
ffff80000080dfd8:	5d                   	pop    rbp
ffff80000080dfd9:	c3                   	ret    

ffff80000080dfda <lookup_inode_ramfs>:
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:52
struct dir_entry* lookup_inode_ramfs(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080dfda:	f3 0f 1e fa          	endbr64 
ffff80000080dfde:	55                   	push   rbp
ffff80000080dfdf:	48 89 e5             	mov    rbp,rsp
ffff80000080dfe2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dfe2 <lookup_inode_ramfs+0x8>
ffff80000080dfe9:	49 bb 46 49 01 00 00 	movabs r11,0x14946
ffff80000080dff0:	00 00 00 
ffff80000080dff3:	4c 01 d8             	add    rax,r11
ffff80000080dff6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080dffa:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:53
    list_init(&dest_dentry->subdirs_list);
ffff80000080dffe:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e002:	48 83 c2 28          	add    rdx,0x28
ffff80000080e006:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080e00a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e00e:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080e015:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e019:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080e020:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080e021:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:54
    list_init(&dest_dentry->child_node);
ffff80000080e022:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e026:	48 83 c2 10          	add    rdx,0x10
ffff80000080e02a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080e02e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080e032:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080e039:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080e03d:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080e044:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080e045:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:55
    dest_dentry->dir_inode=test;
ffff80000080e046:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080e04d:	ff ff ff 
ffff80000080e050:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e054:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e057:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e05b:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:56
    dest_dentry->child_node.data=dest_dentry;
ffff80000080e05f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e063:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e067:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:57
    return dest_dentry;
ffff80000080e06b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:58
}
ffff80000080e06f:	5d                   	pop    rbp
ffff80000080e070:	c3                   	ret    

ffff80000080e071 <open_ramfs>:
open_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:59
long open_ramfs(struct index_node * inode,struct file * filp){
ffff80000080e071:	f3 0f 1e fa          	endbr64 
ffff80000080e075:	55                   	push   rbp
ffff80000080e076:	48 89 e5             	mov    rbp,rsp
ffff80000080e079:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e079 <open_ramfs+0x8>
ffff80000080e080:	49 bb af 48 01 00 00 	movabs r11,0x148af
ffff80000080e087:	00 00 00 
ffff80000080e08a:	4c 01 d8             	add    rax,r11
ffff80000080e08d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e091:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:60
    filp->f_ops=inode->f_ops;
ffff80000080e095:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080e099:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080e09d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e0a1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:61
    filp->position=0;
ffff80000080e0a5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e0a9:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:62
    return 1;
ffff80000080e0b0:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:63
}
ffff80000080e0b5:	5d                   	pop    rbp
ffff80000080e0b6:	c3                   	ret    

ffff80000080e0b7 <close_ramfs>:
close_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:65

long close_ramfs(struct index_node * inode,struct file * filp){
ffff80000080e0b7:	f3 0f 1e fa          	endbr64 
ffff80000080e0bb:	55                   	push   rbp
ffff80000080e0bc:	48 89 e5             	mov    rbp,rsp
ffff80000080e0bf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e0bf <close_ramfs+0x8>
ffff80000080e0c6:	49 bb 69 48 01 00 00 	movabs r11,0x14869
ffff80000080e0cd:	00 00 00 
ffff80000080e0d0:	4c 01 d8             	add    rax,r11
ffff80000080e0d3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e0d7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:66
    return 0;
ffff80000080e0db:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:67
}
ffff80000080e0e0:	5d                   	pop    rbp
ffff80000080e0e1:	c3                   	ret    

ffff80000080e0e2 <read_ramfs>:
read_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:69
//注意一下:position是指针
long read_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080e0e2:	f3 0f 1e fa          	endbr64 
ffff80000080e0e6:	55                   	push   rbp
ffff80000080e0e7:	48 89 e5             	mov    rbp,rsp
ffff80000080e0ea:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e0ea <read_ramfs+0x8>
ffff80000080e0f1:	49 bb 3e 48 01 00 00 	movabs r11,0x1483e
ffff80000080e0f8:	00 00 00 
ffff80000080e0fb:	4c 01 d8             	add    rax,r11
ffff80000080e0fe:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080e102:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080e106:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080e10a:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:70
    int len= (char*)_binary_bin_test_elf_end - (char*)_binary_bin_test_elf_start - *position;
ffff80000080e10e:	48 ba 18 fd ff ff ff 	movabs rdx,0xfffffffffffffd18
ffff80000080e115:	ff ff ff 
ffff80000080e118:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e11c:	48 89 d1             	mov    rcx,rdx
ffff80000080e11f:	48 ba 90 fd ff ff ff 	movabs rdx,0xfffffffffffffd90
ffff80000080e126:	ff ff ff 
ffff80000080e129:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e12d:	48 89 d6             	mov    rsi,rdx
ffff80000080e130:	48 29 f1             	sub    rcx,rsi
ffff80000080e133:	48 89 ca             	mov    rdx,rcx
ffff80000080e136:	89 d1                	mov    ecx,edx
ffff80000080e138:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080e13c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e13f:	89 d6                	mov    esi,edx
ffff80000080e141:	29 f1                	sub    ecx,esi
ffff80000080e143:	89 ca                	mov    edx,ecx
ffff80000080e145:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:71
    if(len>count)len=count;
ffff80000080e148:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e14b:	48 63 d2             	movsxd rdx,edx
ffff80000080e14e:	48 39 55 d8          	cmp    QWORD PTR [rbp-0x28],rdx
ffff80000080e152:	73 07                	jae    ffff80000080e15b <read_ramfs+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:71 (discriminator 1)
ffff80000080e154:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080e158:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:72
    for(int i=0;i<len;i++){
ffff80000080e15b:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080e162:	eb 36                	jmp    ffff80000080e19a <read_ramfs+0xb8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:73 (discriminator 3)
        buf[i]=_binary_bin_test_elf_start[i + *position];
ffff80000080e164:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080e167:	48 63 ca             	movsxd rcx,edx
ffff80000080e16a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080e16e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e171:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080e175:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080e178:	48 63 ca             	movsxd rcx,edx
ffff80000080e17b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e17f:	48 01 d1             	add    rcx,rdx
ffff80000080e182:	48 ba 90 fd ff ff ff 	movabs rdx,0xfffffffffffffd90
ffff80000080e189:	ff ff ff 
ffff80000080e18c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e190:	0f b6 14 32          	movzx  edx,BYTE PTR [rdx+rsi*1]
ffff80000080e194:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:72 (discriminator 3)
    for(int i=0;i<len;i++){
ffff80000080e196:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:72 (discriminator 1)
ffff80000080e19a:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080e19d:	3b 55 fc             	cmp    edx,DWORD PTR [rbp-0x4]
ffff80000080e1a0:	7c c2                	jl     ffff80000080e164 <read_ramfs+0x82>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:75
    }
    *position+=len;
ffff80000080e1a2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080e1a6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e1a9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080e1ac:	48 98                	cdqe   
ffff80000080e1ae:	48 01 c2             	add    rdx,rax
ffff80000080e1b1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080e1b5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:76
    return 0;
ffff80000080e1b8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:77
}
ffff80000080e1bd:	5d                   	pop    rbp
ffff80000080e1be:	c3                   	ret    

ffff80000080e1bf <write_ramfs>:
write_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:78
long write_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080e1bf:	f3 0f 1e fa          	endbr64 
ffff80000080e1c3:	55                   	push   rbp
ffff80000080e1c4:	48 89 e5             	mov    rbp,rsp
ffff80000080e1c7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e1c7 <write_ramfs+0x8>
ffff80000080e1ce:	49 bb 61 47 01 00 00 	movabs r11,0x14761
ffff80000080e1d5:	00 00 00 
ffff80000080e1d8:	4c 01 d8             	add    rax,r11
ffff80000080e1db:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e1df:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080e1e3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080e1e7:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:79
    return 0;
ffff80000080e1eb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:80
}
ffff80000080e1f0:	5d                   	pop    rbp
ffff80000080e1f1:	c3                   	ret    

ffff80000080e1f2 <ioctl_ramfs>:
ioctl_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:81
long ioctl_ramfs(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080e1f2:	f3 0f 1e fa          	endbr64 
ffff80000080e1f6:	55                   	push   rbp
ffff80000080e1f7:	48 89 e5             	mov    rbp,rsp
ffff80000080e1fa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e1fa <ioctl_ramfs+0x8>
ffff80000080e201:	49 bb 2e 47 01 00 00 	movabs r11,0x1472e
ffff80000080e208:	00 00 00 
ffff80000080e20b:	4c 01 d8             	add    rax,r11
ffff80000080e20e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e212:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080e216:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080e21a:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:82
    return 0;
ffff80000080e21e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:83
ffff80000080e223:	5d                   	pop    rbp
ffff80000080e224:	c3                   	ret    

ffff80000080e225 <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
ffff80000080e225:	f3 0f 1e fa          	endbr64 
ffff80000080e229:	55                   	push   rbp
ffff80000080e22a:	48 89 e5             	mov    rbp,rsp
ffff80000080e22d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e22d <shift+0x8>
ffff80000080e234:	49 bb fb 46 01 00 00 	movabs r11,0x146fb
ffff80000080e23b:	00 00 00 
ffff80000080e23e:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:134
    k_shift=!k_shift;
ffff80000080e241:	48 ba 60 ff ff ff ff 	movabs rdx,0xffffffffffffff60
ffff80000080e248:	ff ff ff 
ffff80000080e24b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e24f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e252:	84 d2                	test   dl,dl
ffff80000080e254:	0f 94 c2             	sete   dl
ffff80000080e257:	89 d1                	mov    ecx,edx
ffff80000080e259:	48 ba 60 ff ff ff ff 	movabs rdx,0xffffffffffffff60
ffff80000080e260:	ff ff ff 
ffff80000080e263:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e267:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
}
ffff80000080e269:	90                   	nop
ffff80000080e26a:	5d                   	pop    rbp
ffff80000080e26b:	c3                   	ret    

ffff80000080e26c <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
void ctrl()
{
ffff80000080e26c:	f3 0f 1e fa          	endbr64 
ffff80000080e270:	55                   	push   rbp
ffff80000080e271:	48 89 e5             	mov    rbp,rsp
ffff80000080e274:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e274 <ctrl+0x8>
ffff80000080e27b:	49 bb b4 46 01 00 00 	movabs r11,0x146b4
ffff80000080e282:	00 00 00 
ffff80000080e285:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:138
    k_ctrl=!k_ctrl;
ffff80000080e288:	48 ba 00 fd ff ff ff 	movabs rdx,0xfffffffffffffd00
ffff80000080e28f:	ff ff ff 
ffff80000080e292:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e296:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e299:	84 d2                	test   dl,dl
ffff80000080e29b:	0f 94 c2             	sete   dl
ffff80000080e29e:	89 d1                	mov    ecx,edx
ffff80000080e2a0:	48 ba 00 fd ff ff ff 	movabs rdx,0xfffffffffffffd00
ffff80000080e2a7:	ff ff ff 
ffff80000080e2aa:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e2ae:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
}
ffff80000080e2b0:	90                   	nop
ffff80000080e2b1:	5d                   	pop    rbp
ffff80000080e2b2:	c3                   	ret    

ffff80000080e2b3 <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
void capslock()
{
ffff80000080e2b3:	f3 0f 1e fa          	endbr64 
ffff80000080e2b7:	55                   	push   rbp
ffff80000080e2b8:	48 89 e5             	mov    rbp,rsp
ffff80000080e2bb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e2bb <capslock+0x8>
ffff80000080e2c2:	49 bb 6d 46 01 00 00 	movabs r11,0x1466d
ffff80000080e2c9:	00 00 00 
ffff80000080e2cc:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:142
    k_capslock=k_capslock==0?1:0;
ffff80000080e2cf:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080e2d6:	ff ff ff 
ffff80000080e2d9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e2dd:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e2e0:	84 d2                	test   dl,dl
ffff80000080e2e2:	0f 94 c2             	sete   dl
ffff80000080e2e5:	89 d1                	mov    ecx,edx
ffff80000080e2e7:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080e2ee:	ff ff ff 
ffff80000080e2f1:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e2f5:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:143
}
ffff80000080e2f7:	90                   	nop
ffff80000080e2f8:	5d                   	pop    rbp
ffff80000080e2f9:	c3                   	ret    

ffff80000080e2fa <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
char to_ascii(char scan_code)
{
ffff80000080e2fa:	f3 0f 1e fa          	endbr64 
ffff80000080e2fe:	55                   	push   rbp
ffff80000080e2ff:	48 89 e5             	mov    rbp,rsp
ffff80000080e302:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e302 <to_ascii+0x8>
ffff80000080e309:	49 bb 26 46 01 00 00 	movabs r11,0x14626
ffff80000080e310:	00 00 00 
ffff80000080e313:	4c 01 d8             	add    rax,r11
ffff80000080e316:	89 fa                	mov    edx,edi
ffff80000080e318:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e31b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080e322:	e9 25 01 00 00       	jmp    ffff80000080e44c <to_ascii+0x152>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
        if(key_map[i].scan_code==scan_code)
ffff80000080e327:	48 be 98 d6 ff ff ff 	movabs rsi,0xffffffffffffd698
ffff80000080e32e:	ff ff ff 
ffff80000080e331:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e334:	48 63 ca             	movsxd rcx,edx
ffff80000080e337:	48 89 ca             	mov    rdx,rcx
ffff80000080e33a:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e33e:	48 01 ca             	add    rdx,rcx
ffff80000080e341:	48 01 c2             	add    rdx,rax
ffff80000080e344:	48 01 f2             	add    rdx,rsi
ffff80000080e347:	48 83 c2 02          	add    rdx,0x2
ffff80000080e34b:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e34e:	38 55 ec             	cmp    BYTE PTR [rbp-0x14],dl
ffff80000080e351:	0f 85 f1 00 00 00    	jne    ffff80000080e448 <to_ascii+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
ffff80000080e357:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080e35e:	ff ff ff 
ffff80000080e361:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e365:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e368:	84 d2                	test   dl,dl
ffff80000080e36a:	74 79                	je     ffff80000080e3e5 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 1)
ffff80000080e36c:	48 be 98 d6 ff ff ff 	movabs rsi,0xffffffffffffd698
ffff80000080e373:	ff ff ff 
ffff80000080e376:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e379:	48 63 ca             	movsxd rcx,edx
ffff80000080e37c:	48 01 c6             	add    rsi,rax
ffff80000080e37f:	48 89 ca             	mov    rdx,rcx
ffff80000080e382:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e386:	48 01 ca             	add    rdx,rcx
ffff80000080e389:	48 01 f2             	add    rdx,rsi
ffff80000080e38c:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e38f:	80 fa 60             	cmp    dl,0x60
ffff80000080e392:	7e 51                	jle    ffff80000080e3e5 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 2)
ffff80000080e394:	48 be 98 d6 ff ff ff 	movabs rsi,0xffffffffffffd698
ffff80000080e39b:	ff ff ff 
ffff80000080e39e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e3a1:	48 63 ca             	movsxd rcx,edx
ffff80000080e3a4:	48 01 c6             	add    rsi,rax
ffff80000080e3a7:	48 89 ca             	mov    rdx,rcx
ffff80000080e3aa:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e3ae:	48 01 ca             	add    rdx,rcx
ffff80000080e3b1:	48 01 f2             	add    rdx,rsi
ffff80000080e3b4:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e3b7:	80 fa 7a             	cmp    dl,0x7a
ffff80000080e3ba:	7f 29                	jg     ffff80000080e3e5 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 3)
ffff80000080e3bc:	48 be 98 d6 ff ff ff 	movabs rsi,0xffffffffffffd698
ffff80000080e3c3:	ff ff ff 
ffff80000080e3c6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e3c9:	48 63 ca             	movsxd rcx,edx
ffff80000080e3cc:	48 89 ca             	mov    rdx,rcx
ffff80000080e3cf:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e3d3:	48 01 ca             	add    rdx,rcx
ffff80000080e3d6:	48 01 d0             	add    rax,rdx
ffff80000080e3d9:	48 01 f0             	add    rax,rsi
ffff80000080e3dc:	48 83 c0 01          	add    rax,0x1
ffff80000080e3e0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e3e3:	eb 76                	jmp    ffff80000080e45b <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
            else if(k_shift)return key_map[i].ascii_shift;
ffff80000080e3e5:	48 ba 60 ff ff ff ff 	movabs rdx,0xffffffffffffff60
ffff80000080e3ec:	ff ff ff 
ffff80000080e3ef:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e3f3:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e3f6:	84 d2                	test   dl,dl
ffff80000080e3f8:	74 29                	je     ffff80000080e423 <to_ascii+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150 (discriminator 1)
ffff80000080e3fa:	48 be 98 d6 ff ff ff 	movabs rsi,0xffffffffffffd698
ffff80000080e401:	ff ff ff 
ffff80000080e404:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e407:	48 63 ca             	movsxd rcx,edx
ffff80000080e40a:	48 89 ca             	mov    rdx,rcx
ffff80000080e40d:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e411:	48 01 ca             	add    rdx,rcx
ffff80000080e414:	48 01 d0             	add    rax,rdx
ffff80000080e417:	48 01 f0             	add    rax,rsi
ffff80000080e41a:	48 83 c0 01          	add    rax,0x1
ffff80000080e41e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e421:	eb 38                	jmp    ffff80000080e45b <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
            else return key_map[i].ascii;
ffff80000080e423:	48 b9 98 d6 ff ff ff 	movabs rcx,0xffffffffffffd698
ffff80000080e42a:	ff ff ff 
ffff80000080e42d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e430:	48 63 d2             	movsxd rdx,edx
ffff80000080e433:	48 01 c1             	add    rcx,rax
ffff80000080e436:	48 89 d0             	mov    rax,rdx
ffff80000080e439:	48 c1 e0 02          	shl    rax,0x2
ffff80000080e43d:	48 01 d0             	add    rax,rdx
ffff80000080e440:	48 01 c8             	add    rax,rcx
ffff80000080e443:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e446:	eb 13                	jmp    ffff80000080e45b <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e448:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146 (discriminator 1)
ffff80000080e44c:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
ffff80000080e450:	0f 8e d1 fe ff ff    	jle    ffff80000080e327 <to_ascii+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:154
        }

    return '\0';
ffff80000080e456:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
}
ffff80000080e45b:	5d                   	pop    rbp
ffff80000080e45c:	c3                   	ret    

ffff80000080e45d <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:157
int init_kb()
{
ffff80000080e45d:	f3 0f 1e fa          	endbr64 
ffff80000080e461:	55                   	push   rbp
ffff80000080e462:	48 89 e5             	mov    rbp,rsp
ffff80000080e465:	41 57                	push   r15
ffff80000080e467:	53                   	push   rbx
ffff80000080e468:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e468 <init_kb+0xb>
ffff80000080e46f:	49 bb c0 44 01 00 00 	movabs r11,0x144c0
ffff80000080e476:	00 00 00 
ffff80000080e479:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:158
    reg_device(&dev_keyboard);
ffff80000080e47c:	48 b8 30 ff ff ff ff 	movabs rax,0xffffffffffffff30
ffff80000080e483:	ff ff ff 
ffff80000080e486:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e48a:	48 89 c7             	mov    rdi,rax
ffff80000080e48d:	49 89 df             	mov    r15,rbx
ffff80000080e490:	48 b8 4a 2b fe ff ff 	movabs rax,0xfffffffffffe2b4a
ffff80000080e497:	ff ff ff 
ffff80000080e49a:	48 01 d8             	add    rax,rbx
ffff80000080e49d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:159
    reg_driver(&drv_keyboard);
ffff80000080e49f:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080e4a6:	ff ff ff 
ffff80000080e4a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e4ad:	48 89 c7             	mov    rdi,rax
ffff80000080e4b0:	49 89 df             	mov    r15,rbx
ffff80000080e4b3:	48 b8 c2 2e fe ff ff 	movabs rax,0xfffffffffffe2ec2
ffff80000080e4ba:	ff ff ff 
ffff80000080e4bd:	48 01 d8             	add    rax,rbx
ffff80000080e4c0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:160
}
ffff80000080e4c2:	90                   	nop
ffff80000080e4c3:	5b                   	pop    rbx
ffff80000080e4c4:	41 5f                	pop    r15
ffff80000080e4c6:	5d                   	pop    rbp
ffff80000080e4c7:	c3                   	ret    

ffff80000080e4c8 <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:162
int key_proc()
{
ffff80000080e4c8:	f3 0f 1e fa          	endbr64 
ffff80000080e4cc:	55                   	push   rbp
ffff80000080e4cd:	48 89 e5             	mov    rbp,rsp
ffff80000080e4d0:	41 57                	push   r15
ffff80000080e4d2:	53                   	push   rbx
ffff80000080e4d3:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e4d7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e4d7 <key_proc+0xf>
ffff80000080e4de:	49 bb 51 44 01 00 00 	movabs r11,0x14451
ffff80000080e4e5:	00 00 00 
ffff80000080e4e8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:163
    asm volatile("cli");
ffff80000080e4eb:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:165
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
ffff80000080e4ec:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffff80000080e4f0:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
ffff80000080e4f4:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
    key_code tmpc;
    scan1=inb(0x60);
ffff80000080e4f8:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080e4fd:	49 89 df             	mov    r15,rbx
ffff80000080e500:	48 b8 31 77 fe ff ff 	movabs rax,0xfffffffffffe7731
ffff80000080e507:	ff ff ff 
ffff80000080e50a:	48 01 d8             	add    rax,rbx
ffff80000080e50d:	ff d0                	call   rax
ffff80000080e50f:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:179
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
ffff80000080e512:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e519:	ff ff ff 
ffff80000080e51c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e520:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e523:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e526:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e52d:	ff ff ff 
ffff80000080e530:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e534:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e537:	89 d0                	mov    eax,edx
ffff80000080e539:	99                   	cdq    
ffff80000080e53a:	f7 f9                	idiv   ecx
ffff80000080e53c:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e543:	ff ff ff 
ffff80000080e546:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e54a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e54d:	39 c2                	cmp    edx,eax
ffff80000080e54f:	74 68                	je     ffff80000080e5b9 <key_proc+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:181
    {
        key_bufq.data[key_bufq.tail]=scan1;
ffff80000080e551:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e558:	ff ff ff 
ffff80000080e55b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e55f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e562:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e569:	ff ff ff 
ffff80000080e56c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e570:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e573:	48 98                	cdqe   
ffff80000080e575:	48 01 c2             	add    rdx,rax
ffff80000080e578:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e57c:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:182
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
ffff80000080e57e:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e585:	ff ff ff 
ffff80000080e588:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e58c:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e58f:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e592:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e599:	ff ff ff 
ffff80000080e59c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e5a0:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e5a3:	89 d0                	mov    eax,edx
ffff80000080e5a5:	99                   	cdq    
ffff80000080e5a6:	f7 f9                	idiv   ecx
ffff80000080e5a8:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e5af:	ff ff ff 
ffff80000080e5b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e5b6:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:185
    }

    if(scan1==0x48)
ffff80000080e5b9:	80 7d ef 48          	cmp    BYTE PTR [rbp-0x11],0x48
ffff80000080e5bd:	75 17                	jne    ffff80000080e5d6 <key_proc+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:186
        scr_up();
ffff80000080e5bf:	49 89 df             	mov    r15,rbx
ffff80000080e5c2:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e5c7:	48 ba 62 94 fe ff ff 	movabs rdx,0xfffffffffffe9462
ffff80000080e5ce:	ff ff ff 
ffff80000080e5d1:	48 01 da             	add    rdx,rbx
ffff80000080e5d4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
    if(scan1==0x50)
ffff80000080e5d6:	80 7d ef 50          	cmp    BYTE PTR [rbp-0x11],0x50
ffff80000080e5da:	75 17                	jne    ffff80000080e5f3 <key_proc+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
        scr_down();
ffff80000080e5dc:	49 89 df             	mov    r15,rbx
ffff80000080e5df:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e5e4:	48 ba 5a 95 fe ff ff 	movabs rdx,0xfffffffffffe955a
ffff80000080e5eb:	ff ff ff 
ffff80000080e5ee:	48 01 da             	add    rdx,rbx
ffff80000080e5f1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:189
    switch (scan1)
ffff80000080e5f3:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e5f7:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e5fc:	74 45                	je     ffff80000080e643 <key_proc+0x17b>
ffff80000080e5fe:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e603:	0f 8f 85 00 00 00    	jg     ffff80000080e68e <key_proc+0x1c6>
ffff80000080e609:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e60e:	74 33                	je     ffff80000080e643 <key_proc+0x17b>
ffff80000080e610:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e615:	7f 77                	jg     ffff80000080e68e <key_proc+0x1c6>
ffff80000080e617:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e61c:	74 3e                	je     ffff80000080e65c <key_proc+0x194>
ffff80000080e61e:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e623:	7f 69                	jg     ffff80000080e68e <key_proc+0x1c6>
ffff80000080e625:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e628:	74 4b                	je     ffff80000080e675 <key_proc+0x1ad>
ffff80000080e62a:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e62d:	7f 5f                	jg     ffff80000080e68e <key_proc+0x1c6>
ffff80000080e62f:	83 f8 36             	cmp    eax,0x36
ffff80000080e632:	74 0f                	je     ffff80000080e643 <key_proc+0x17b>
ffff80000080e634:	83 f8 36             	cmp    eax,0x36
ffff80000080e637:	7f 55                	jg     ffff80000080e68e <key_proc+0x1c6>
ffff80000080e639:	83 f8 1d             	cmp    eax,0x1d
ffff80000080e63c:	74 1e                	je     ffff80000080e65c <key_proc+0x194>
ffff80000080e63e:	83 f8 2a             	cmp    eax,0x2a
ffff80000080e641:	75 4b                	jne    ffff80000080e68e <key_proc+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:195
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
ffff80000080e643:	49 89 df             	mov    r15,rbx
ffff80000080e646:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e64b:	48 ba fd b8 fe ff ff 	movabs rdx,0xfffffffffffeb8fd
ffff80000080e652:	ff ff ff 
ffff80000080e655:	48 01 da             	add    rdx,rbx
ffff80000080e658:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
            break;
ffff80000080e65a:	eb 33                	jmp    ffff80000080e68f <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:199
        case 0x1d:
        case 0x9d:
            ctrl();
ffff80000080e65c:	49 89 df             	mov    r15,rbx
ffff80000080e65f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e664:	48 ba 44 b9 fe ff ff 	movabs rdx,0xfffffffffffeb944
ffff80000080e66b:	ff ff ff 
ffff80000080e66e:	48 01 da             	add    rdx,rbx
ffff80000080e671:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
            break;
ffff80000080e673:	eb 1a                	jmp    ffff80000080e68f <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:202
        case 0x3a:
            capslock();
ffff80000080e675:	49 89 df             	mov    r15,rbx
ffff80000080e678:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e67d:	48 ba 8b b9 fe ff ff 	movabs rdx,0xfffffffffffeb98b
ffff80000080e684:	ff ff ff 
ffff80000080e687:	48 01 da             	add    rdx,rbx
ffff80000080e68a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:203
            break;
ffff80000080e68c:	eb 01                	jmp    ffff80000080e68f <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:205
        default:
            break;
ffff80000080e68e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:208
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
ffff80000080e68f:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e693:	84 c0                	test   al,al
ffff80000080e695:	78 51                	js     ffff80000080e6e8 <key_proc+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:209
        char ch= to_ascii(scan1);
ffff80000080e697:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e69b:	0f be c0             	movsx  eax,al
ffff80000080e69e:	89 c7                	mov    edi,eax
ffff80000080e6a0:	49 89 df             	mov    r15,rbx
ffff80000080e6a3:	48 b8 d2 b9 fe ff ff 	movabs rax,0xfffffffffffeb9d2
ffff80000080e6aa:	ff ff ff 
ffff80000080e6ad:	48 01 d8             	add    rax,rbx
ffff80000080e6b0:	ff d0                	call   rax
ffff80000080e6b2:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:210
        unsigned long args[]={(unsigned long) &ch, 1};
ffff80000080e6b5:	48 8d 45 e7          	lea    rax,[rbp-0x19]
ffff80000080e6b9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000080e6bd:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffff80000080e6c4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:212
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
ffff80000080e6c5:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffff80000080e6c9:	48 89 c2             	mov    rdx,rax
ffff80000080e6cc:	be 03 00 00 00       	mov    esi,0x3
ffff80000080e6d1:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e6d6:	49 89 df             	mov    r15,rbx
ffff80000080e6d9:	48 b8 5d 76 fe ff ff 	movabs rax,0xfffffffffffe765d
ffff80000080e6e0:	ff ff ff 
ffff80000080e6e3:	48 01 d8             	add    rax,rbx
ffff80000080e6e6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
ffff80000080e6e8:	49 89 df             	mov    r15,rbx
ffff80000080e6eb:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e6f0:	48 ba 46 77 fe ff ff 	movabs rdx,0xfffffffffffe7746
ffff80000080e6f7:	ff ff ff 
ffff80000080e6fa:	48 01 da             	add    rdx,rbx
ffff80000080e6fd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    asm volatile("leave\r\n iretq");
ffff80000080e6ff:	c9                   	leave  
ffff80000080e700:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
}
ffff80000080e702:	90                   	nop
ffff80000080e703:	48 83 c4 20          	add    rsp,0x20
ffff80000080e707:	5b                   	pop    rbx
ffff80000080e708:	41 5f                	pop    r15
ffff80000080e70a:	5d                   	pop    rbp
ffff80000080e70b:	c3                   	ret    

ffff80000080e70c <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:236

char sys_analyse_key()
{
ffff80000080e70c:	f3 0f 1e fa          	endbr64 
ffff80000080e710:	55                   	push   rbp
ffff80000080e711:	48 89 e5             	mov    rbp,rsp
ffff80000080e714:	41 57                	push   r15
ffff80000080e716:	53                   	push   rbx
ffff80000080e717:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e71b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e71b <sys_analyse_key+0xf>
ffff80000080e722:	49 bb 0d 42 01 00 00 	movabs r11,0x1420d
ffff80000080e729:	00 00 00 
ffff80000080e72c:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    if(key_bufq.tail==key_bufq.head)return -1;
ffff80000080e72f:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e736:	ff ff ff 
ffff80000080e739:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e73d:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000080e740:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e747:	ff ff ff 
ffff80000080e74a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e74e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e751:	39 c2                	cmp    edx,eax
ffff80000080e753:	75 0a                	jne    ffff80000080e75f <sys_analyse_key+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237 (discriminator 1)
ffff80000080e755:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e75a:	e9 b1 01 00 00       	jmp    ffff80000080e910 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    char c=key_buf[key_bufq.head];
ffff80000080e75f:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e766:	ff ff ff 
ffff80000080e769:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e76d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e770:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff80000080e777:	ff ff ff 
ffff80000080e77a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e77e:	48 98                	cdqe   
ffff80000080e780:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080e784:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
ffff80000080e787:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e78e:	ff ff ff 
ffff80000080e791:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e795:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e798:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e79b:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e7a2:	ff ff ff 
ffff80000080e7a5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e7a9:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e7ac:	89 d0                	mov    eax,edx
ffff80000080e7ae:	99                   	cdq    
ffff80000080e7af:	f7 f9                	idiv   ecx
ffff80000080e7b1:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080e7b8:	ff ff ff 
ffff80000080e7bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e7bf:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
ffff80000080e7c2:	48 b8 6e d8 ff ff ff 	movabs rax,0xffffffffffffd86e
ffff80000080e7c9:	ff ff ff 
ffff80000080e7cc:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e7d0:	48 89 c7             	mov    rdi,rax
ffff80000080e7d3:	49 89 df             	mov    r15,rbx
ffff80000080e7d6:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e7db:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080e7e2:	ff ff ff 
ffff80000080e7e5:	48 01 da             	add    rdx,rbx
ffff80000080e7e8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242
    char res[33]={0};
ffff80000080e7ea:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080e7f1:	00 
ffff80000080e7f2:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080e7f9:	00 
ffff80000080e7fa:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080e801:	00 
ffff80000080e802:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080e809:	00 
ffff80000080e80a:	c6 45 e0 00          	mov    BYTE PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:243
    itoa(res,16,c);
ffff80000080e80e:	0f be 55 ef          	movsx  edx,BYTE PTR [rbp-0x11]
ffff80000080e812:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e816:	be 10 00 00 00       	mov    esi,0x10
ffff80000080e81b:	48 89 c7             	mov    rdi,rax
ffff80000080e81e:	49 89 df             	mov    r15,rbx
ffff80000080e821:	48 b8 1a ed fd ff ff 	movabs rax,0xfffffffffffded1a
ffff80000080e828:	ff ff ff 
ffff80000080e82b:	48 01 d8             	add    rax,rbx
ffff80000080e82e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:244
    printf(res);
ffff80000080e830:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e834:	48 89 c7             	mov    rdi,rax
ffff80000080e837:	49 89 df             	mov    r15,rbx
ffff80000080e83a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e83f:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080e846:	ff ff ff 
ffff80000080e849:	48 01 da             	add    rdx,rbx
ffff80000080e84c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:245
    if(c&FLAG_BREAK){
ffff80000080e84e:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff80000080e852:	79 32                	jns    ffff80000080e886 <sys_analyse_key+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:246
        printf("\n");
ffff80000080e854:	48 b8 79 d8 ff ff ff 	movabs rax,0xffffffffffffd879
ffff80000080e85b:	ff ff ff 
ffff80000080e85e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e862:	48 89 c7             	mov    rdi,rax
ffff80000080e865:	49 89 df             	mov    r15,rbx
ffff80000080e868:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e86d:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080e874:	ff ff ff 
ffff80000080e877:	48 01 da             	add    rdx,rbx
ffff80000080e87a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:247
        return -1;
ffff80000080e87c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e881:	e9 8a 00 00 00       	jmp    ffff80000080e910 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:249
    }
    c= to_ascii(c&0x7f);
ffff80000080e886:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e88a:	83 e0 7f             	and    eax,0x7f
ffff80000080e88d:	89 c7                	mov    edi,eax
ffff80000080e88f:	49 89 df             	mov    r15,rbx
ffff80000080e892:	48 b8 d2 b9 fe ff ff 	movabs rax,0xfffffffffffeb9d2
ffff80000080e899:	ff ff ff 
ffff80000080e89c:	48 01 d8             	add    rax,rbx
ffff80000080e89f:	ff d0                	call   rax
ffff80000080e8a1:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:250
    printf(" char:");
ffff80000080e8a4:	48 b8 7b d8 ff ff ff 	movabs rax,0xffffffffffffd87b
ffff80000080e8ab:	ff ff ff 
ffff80000080e8ae:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e8b2:	48 89 c7             	mov    rdi,rax
ffff80000080e8b5:	49 89 df             	mov    r15,rbx
ffff80000080e8b8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e8bd:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080e8c4:	ff ff ff 
ffff80000080e8c7:	48 01 da             	add    rdx,rbx
ffff80000080e8ca:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:251
    putchar(c);
ffff80000080e8cc:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e8d0:	89 c7                	mov    edi,eax
ffff80000080e8d2:	49 89 df             	mov    r15,rbx
ffff80000080e8d5:	48 b8 43 ee fd ff ff 	movabs rax,0xfffffffffffdee43
ffff80000080e8dc:	ff ff ff 
ffff80000080e8df:	48 01 d8             	add    rax,rbx
ffff80000080e8e2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:252
    printf("\n");
ffff80000080e8e4:	48 b8 79 d8 ff ff ff 	movabs rax,0xffffffffffffd879
ffff80000080e8eb:	ff ff ff 
ffff80000080e8ee:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e8f2:	48 89 c7             	mov    rdi,rax
ffff80000080e8f5:	49 89 df             	mov    r15,rbx
ffff80000080e8f8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e8fd:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080e904:	ff ff ff 
ffff80000080e907:	48 01 da             	add    rdx,rbx
ffff80000080e90a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:253
    return c;
ffff80000080e90c:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:254 (discriminator 1)
ffff80000080e910:	48 83 c4 30          	add    rsp,0x30
ffff80000080e914:	5b                   	pop    rbx
ffff80000080e915:	41 5f                	pop    r15
ffff80000080e917:	5d                   	pop    rbp
ffff80000080e918:	c3                   	ret    

ffff80000080e919 <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
        .read=async_read_disk,
        .write=async_write_disk
};
int disks[4];//四块硬盘的dev号
int init_disk()
{
ffff80000080e919:	f3 0f 1e fa          	endbr64 
ffff80000080e91d:	55                   	push   rbp
ffff80000080e91e:	48 89 e5             	mov    rbp,rsp
ffff80000080e921:	41 57                	push   r15
ffff80000080e923:	48 83 ec 08          	sub    rsp,0x8
ffff80000080e927:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080e927 <init_disk+0xe>
ffff80000080e92e:	49 bb 01 40 01 00 00 	movabs r11,0x14001
ffff80000080e935:	00 00 00 
ffff80000080e938:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    hd_iterate();
ffff80000080e93b:	49 89 d7             	mov    r15,rdx
ffff80000080e93e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e943:	48 b9 91 d0 fe ff ff 	movabs rcx,0xfffffffffffed091
ffff80000080e94a:	ff ff ff 
ffff80000080e94d:	48 01 d1             	add    rcx,rdx
ffff80000080e950:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    return 0;
ffff80000080e952:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:33
}
ffff80000080e957:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080e95b:	c9                   	leave  
ffff80000080e95c:	c3                   	ret    

ffff80000080e95d <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:36

int disk_int_handler_c()
{
ffff80000080e95d:	f3 0f 1e fa          	endbr64 
ffff80000080e961:	55                   	push   rbp
ffff80000080e962:	48 89 e5             	mov    rbp,rsp
ffff80000080e965:	41 57                	push   r15
ffff80000080e967:	53                   	push   rbx
ffff80000080e968:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e96c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e96c <disk_int_handler_c+0xf>
ffff80000080e973:	49 bb bc 3f 01 00 00 	movabs r11,0x13fbc
ffff80000080e97a:	00 00 00 
ffff80000080e97d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    if(running_req==NULL)
ffff80000080e980:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080e987:	ff ff ff 
ffff80000080e98a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e98e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e991:	48 85 c0             	test   rax,rax
ffff80000080e994:	75 0a                	jne    ffff80000080e9a0 <disk_int_handler_c+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40
    {
        //printf("err:null running dreq\n");
        return 1;//同步读写硬盘
ffff80000080e996:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080e99b:	e9 c6 02 00 00       	jmp    ffff80000080ec66 <disk_int_handler_c+0x309>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    }
    short *p=running_req->buf;
ffff80000080e9a0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080e9a7:	ff ff ff 
ffff80000080e9aa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e9ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e9b1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e9b5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:43
    int port=PORT_DISK_MAJOR;
ffff80000080e9b9:	c7 45 e4 f0 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:44
    if(running_req->disk==DISK_SLAVE_MAJOR||\
ffff80000080e9c0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080e9c7:	ff ff ff 
ffff80000080e9ca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e9ce:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e9d1:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e9d4:	83 f8 02             	cmp    eax,0x2
ffff80000080e9d7:	74 19                	je     ffff80000080e9f2 <disk_int_handler_c+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:45 (discriminator 1)
    running_req->disk==DISK_SLAVE_SLAVE)
ffff80000080e9d9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080e9e0:	ff ff ff 
ffff80000080e9e3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e9e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e9ea:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:44 (discriminator 1)
    if(running_req->disk==DISK_SLAVE_MAJOR||\
ffff80000080e9ed:	83 f8 03             	cmp    eax,0x3
ffff80000080e9f0:	75 07                	jne    ffff80000080e9f9 <disk_int_handler_c+0x9c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
        port=PORT_DISK_SLAVE;
ffff80000080e9f2:	c7 45 e4 70 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:47
    if(running_req->func==DISKREQ_READ)
ffff80000080e9f9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ea00:	ff ff ff 
ffff80000080ea03:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ea07:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ea0a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ea0c:	85 c0                	test   eax,eax
ffff80000080ea0e:	75 71                	jne    ffff80000080ea81 <disk_int_handler_c+0x124>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080ea10:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080ea17:	eb 2f                	jmp    ffff80000080ea48 <disk_int_handler_c+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
        {
            *p++=inw(port);
ffff80000080ea19:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080ea1c:	0f b7 c0             	movzx  eax,ax
ffff80000080ea1f:	89 c7                	mov    edi,eax
ffff80000080ea21:	49 89 df             	mov    r15,rbx
ffff80000080ea24:	48 b8 3b 77 fe ff ff 	movabs rax,0xfffffffffffe773b
ffff80000080ea2b:	ff ff ff 
ffff80000080ea2e:	48 01 d8             	add    rax,rbx
ffff80000080ea31:	ff d0                	call   rax
ffff80000080ea33:	89 c2                	mov    edx,eax
ffff80000080ea35:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ea39:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffff80000080ea3d:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080ea41:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51 (discriminator 3)
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080ea44:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51 (discriminator 1)
ffff80000080ea48:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ea4f:	ff ff ff 
ffff80000080ea52:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ea56:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ea59:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080ea5c:	c1 e0 08             	shl    eax,0x8
ffff80000080ea5f:	39 45 e0             	cmp    DWORD PTR [rbp-0x20],eax
ffff80000080ea62:	7c b5                	jl     ffff80000080ea19 <disk_int_handler_c+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:55
        }
        running_req->result=DISK_CHK_OK;
ffff80000080ea64:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ea6b:	ff ff ff 
ffff80000080ea6e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ea72:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ea75:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
ffff80000080ea7c:	e9 64 01 00 00       	jmp    ffff80000080ebe5 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    }else if(running_req->func==DISKREQ_WRITE)
ffff80000080ea81:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ea88:	ff ff ff 
ffff80000080ea8b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ea8f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ea92:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ea94:	83 f8 01             	cmp    eax,0x1
ffff80000080ea97:	75 74                	jne    ffff80000080eb0d <disk_int_handler_c+0x1b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58
    {
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080ea99:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080eaa0:	eb 32                	jmp    ffff80000080ead4 <disk_int_handler_c+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:59 (discriminator 3)
            outw(port,*p++);
ffff80000080eaa2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080eaa6:	48 8d 50 02          	lea    rdx,[rax+0x2]
ffff80000080eaaa:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080eaae:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080eab1:	0f b7 d0             	movzx  edx,ax
ffff80000080eab4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080eab7:	0f b7 c0             	movzx  eax,ax
ffff80000080eaba:	89 d6                	mov    esi,edx
ffff80000080eabc:	89 c7                	mov    edi,eax
ffff80000080eabe:	49 89 df             	mov    r15,rbx
ffff80000080eac1:	48 b8 25 77 fe ff ff 	movabs rax,0xfffffffffffe7725
ffff80000080eac8:	ff ff ff 
ffff80000080eacb:	48 01 d8             	add    rax,rbx
ffff80000080eace:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58 (discriminator 3)
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080ead0:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58 (discriminator 1)
ffff80000080ead4:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080eadb:	ff ff ff 
ffff80000080eade:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eae2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eae5:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080eae8:	c1 e0 08             	shl    eax,0x8
ffff80000080eaeb:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff80000080eaee:	7c b2                	jl     ffff80000080eaa2 <disk_int_handler_c+0x145>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        running_req->result=DISK_CHK_OK;
ffff80000080eaf0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080eaf7:	ff ff ff 
ffff80000080eafa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eafe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eb01:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
ffff80000080eb08:	e9 d8 00 00 00       	jmp    ffff80000080ebe5 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:61
    }else if(running_req->func==DISKREQ_CHECK)
ffff80000080eb0d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080eb14:	ff ff ff 
ffff80000080eb17:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eb1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eb1e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080eb20:	83 f8 02             	cmp    eax,0x2
ffff80000080eb23:	75 58                	jne    ffff80000080eb7d <disk_int_handler_c+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:63
    {
        char stat=inb(port+7);
ffff80000080eb25:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080eb28:	83 c0 07             	add    eax,0x7
ffff80000080eb2b:	0f b6 c0             	movzx  eax,al
ffff80000080eb2e:	89 c7                	mov    edi,eax
ffff80000080eb30:	49 89 df             	mov    r15,rbx
ffff80000080eb33:	48 b8 31 77 fe ff ff 	movabs rax,0xfffffffffffe7731
ffff80000080eb3a:	ff ff ff 
ffff80000080eb3d:	48 01 d8             	add    rax,rbx
ffff80000080eb40:	ff d0                	call   rax
ffff80000080eb42:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:64
        short dat=inw(port);
ffff80000080eb45:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080eb48:	0f b7 c0             	movzx  eax,ax
ffff80000080eb4b:	89 c7                	mov    edi,eax
ffff80000080eb4d:	49 89 df             	mov    r15,rbx
ffff80000080eb50:	48 b8 3b 77 fe ff ff 	movabs rax,0xfffffffffffe773b
ffff80000080eb57:	ff ff ff 
ffff80000080eb5a:	48 01 d8             	add    rax,rbx
ffff80000080eb5d:	ff d0                	call   rax
ffff80000080eb5f:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        if(1)
        {
            running_req->result=DISK_CHK_OK;
ffff80000080eb63:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080eb6a:	ff ff ff 
ffff80000080eb6d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eb71:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eb74:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
ffff80000080eb7b:	eb 68                	jmp    ffff80000080ebe5 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:75
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            running_req->result=DISK_CHK_ERR;
            request(running_req->disk,DISKREQ_RESET,0,0,0);
        }
    }else if(running_req->func==DISKREQ_RESET)
ffff80000080eb7d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080eb84:	ff ff ff 
ffff80000080eb87:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eb8b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eb8e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080eb90:	83 f8 03             	cmp    eax,0x3
ffff80000080eb93:	75 50                	jne    ffff80000080ebe5 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    {
        int stat=inb(port+7);
ffff80000080eb95:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080eb98:	83 c0 07             	add    eax,0x7
ffff80000080eb9b:	0f b6 c0             	movzx  eax,al
ffff80000080eb9e:	89 c7                	mov    edi,eax
ffff80000080eba0:	49 89 df             	mov    r15,rbx
ffff80000080eba3:	48 b8 31 77 fe ff ff 	movabs rax,0xfffffffffffe7731
ffff80000080ebaa:	ff ff ff 
ffff80000080ebad:	48 01 d8             	add    rax,rbx
ffff80000080ebb0:	ff d0                	call   rax
ffff80000080ebb2:	0f b6 c0             	movzx  eax,al
ffff80000080ebb5:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
        printf("reset disk done.\nstat now:%x\n",stat);
ffff80000080ebb8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ebbb:	89 c6                	mov    esi,eax
ffff80000080ebbd:	48 b8 82 d8 ff ff ff 	movabs rax,0xffffffffffffd882
ffff80000080ebc4:	ff ff ff 
ffff80000080ebc7:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ebcb:	48 89 c7             	mov    rdi,rax
ffff80000080ebce:	49 89 df             	mov    r15,rbx
ffff80000080ebd1:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ebd6:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080ebdd:	ff ff ff 
ffff80000080ebe0:	48 01 da             	add    rdx,rbx
ffff80000080ebe3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
    }
    running_req->stat=REQ_STAT_DONE;
ffff80000080ebe5:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ebec:	ff ff ff 
ffff80000080ebef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ebf3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ebf6:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    running_req->args->stat=REQ_STAT_EMPTY;
ffff80000080ebfd:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ec04:	ff ff ff 
ffff80000080ec07:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec0b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ec0e:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080ec12:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
ffff80000080ec19:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    running_devman_req->stat=REQ_STAT_DONE;
ffff80000080ec1c:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff80000080ec23:	ff ff ff 
ffff80000080ec26:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec2a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ec2d:	c7 80 ac 00 00 00 03 	mov    DWORD PTR [rax+0xac],0x3
ffff80000080ec34:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
    running_devman_req=NULL;
ffff80000080ec37:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff80000080ec3e:	ff ff ff 
ffff80000080ec41:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec45:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080ec4c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080ec53:	ff ff ff 
ffff80000080ec56:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec5a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    return 0;
ffff80000080ec61:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
}
ffff80000080ec66:	48 83 c4 20          	add    rsp,0x20
ffff80000080ec6a:	5b                   	pop    rbx
ffff80000080ec6b:	41 5f                	pop    r15
ffff80000080ec6d:	5d                   	pop    rbp
ffff80000080ec6e:	c3                   	ret    

ffff80000080ec6f <check_dreq_stat>:
check_dreq_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
int check_dreq_stat(int req_id)
{
ffff80000080ec6f:	f3 0f 1e fa          	endbr64 
ffff80000080ec73:	55                   	push   rbp
ffff80000080ec74:	48 89 e5             	mov    rbp,rsp
ffff80000080ec77:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ec77 <check_dreq_stat+0x8>
ffff80000080ec7e:	49 bb b1 3c 01 00 00 	movabs r11,0x13cb1
ffff80000080ec85:	00 00 00 
ffff80000080ec88:	4c 01 d8             	add    rax,r11
ffff80000080ec8b:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    return disk_reqs[req_id].stat;
ffff80000080ec8e:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff80000080ec95:	ff ff ff 
ffff80000080ec98:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080ec9c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080ec9f:	48 63 d0             	movsxd rdx,eax
ffff80000080eca2:	48 89 d0             	mov    rax,rdx
ffff80000080eca5:	48 01 c0             	add    rax,rax
ffff80000080eca8:	48 01 d0             	add    rax,rdx
ffff80000080ecab:	48 c1 e0 04          	shl    rax,0x4
ffff80000080ecaf:	48 01 c8             	add    rax,rcx
ffff80000080ecb2:	48 83 c0 1c          	add    rax,0x1c
ffff80000080ecb6:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
}
ffff80000080ecb8:	5d                   	pop    rbp
ffff80000080ecb9:	c3                   	ret    

ffff80000080ecba <request>:
request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
int request(int disk,int func,int lba,int secn,char *buf){
ffff80000080ecba:	f3 0f 1e fa          	endbr64 
ffff80000080ecbe:	55                   	push   rbp
ffff80000080ecbf:	48 89 e5             	mov    rbp,rsp
ffff80000080ecc2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ecc2 <request+0x8>
ffff80000080ecc9:	49 bb 66 3c 01 00 00 	movabs r11,0x13c66
ffff80000080ecd0:	00 00 00 
ffff80000080ecd3:	4c 01 d8             	add    rax,r11
ffff80000080ecd6:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080ecd9:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff80000080ecdc:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff80000080ecdf:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
ffff80000080ece2:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    if((tail+1)%MAX_DISK_REQUEST_COUNT==head)
ffff80000080ece6:	48 ba 0c bd bf ff ff 	movabs rdx,0xffffffffffbfbd0c
ffff80000080eced:	ff ff ff 
ffff80000080ecf0:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ecf3:	83 c2 01             	add    edx,0x1
ffff80000080ecf6:	48 63 ca             	movsxd rcx,edx
ffff80000080ecf9:	48 69 c9 89 88 88 88 	imul   rcx,rcx,0xffffffff88888889
ffff80000080ed00:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080ed04:	01 d1                	add    ecx,edx
ffff80000080ed06:	c1 f9 07             	sar    ecx,0x7
ffff80000080ed09:	89 d6                	mov    esi,edx
ffff80000080ed0b:	c1 fe 1f             	sar    esi,0x1f
ffff80000080ed0e:	29 f1                	sub    ecx,esi
ffff80000080ed10:	69 f1 f0 00 00 00    	imul   esi,ecx,0xf0
ffff80000080ed16:	89 d1                	mov    ecx,edx
ffff80000080ed18:	29 f1                	sub    ecx,esi
ffff80000080ed1a:	48 ba 08 bd bf ff ff 	movabs rdx,0xffffffffffbfbd08
ffff80000080ed21:	ff ff ff 
ffff80000080ed24:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ed27:	39 d1                	cmp    ecx,edx
ffff80000080ed29:	75 0a                	jne    ffff80000080ed35 <request+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    {
        return -1;
ffff80000080ed2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080ed30:	e9 9e 01 00 00       	jmp    ffff80000080eed3 <request+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97
    }
    disk_reqs[tail].disk=disk;
ffff80000080ed35:	48 ba 0c bd bf ff ff 	movabs rdx,0xffffffffffbfbd0c
ffff80000080ed3c:	ff ff ff 
ffff80000080ed3f:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ed42:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080ed49:	ff ff ff 
ffff80000080ed4c:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080ed50:	48 63 ca             	movsxd rcx,edx
ffff80000080ed53:	48 89 ca             	mov    rdx,rcx
ffff80000080ed56:	48 01 d2             	add    rdx,rdx
ffff80000080ed59:	48 01 ca             	add    rdx,rcx
ffff80000080ed5c:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ed60:	48 01 f2             	add    rdx,rsi
ffff80000080ed63:	48 8d 4a 04          	lea    rcx,[rdx+0x4]
ffff80000080ed67:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080ed6a:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98
    disk_reqs[tail].func=func;
ffff80000080ed6c:	48 ba 0c bd bf ff ff 	movabs rdx,0xffffffffffbfbd0c
ffff80000080ed73:	ff ff ff 
ffff80000080ed76:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ed79:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080ed80:	ff ff ff 
ffff80000080ed83:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080ed87:	48 63 ca             	movsxd rcx,edx
ffff80000080ed8a:	48 89 ca             	mov    rdx,rcx
ffff80000080ed8d:	48 01 d2             	add    rdx,rdx
ffff80000080ed90:	48 01 ca             	add    rdx,rcx
ffff80000080ed93:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ed97:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080ed9b:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080ed9e:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99
    disk_reqs[tail].lba=lba;
ffff80000080eda0:	48 ba 0c bd bf ff ff 	movabs rdx,0xffffffffffbfbd0c
ffff80000080eda7:	ff ff ff 
ffff80000080edaa:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080edad:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080edb4:	ff ff ff 
ffff80000080edb7:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080edbb:	48 63 ca             	movsxd rcx,edx
ffff80000080edbe:	48 89 ca             	mov    rdx,rcx
ffff80000080edc1:	48 01 d2             	add    rdx,rdx
ffff80000080edc4:	48 01 ca             	add    rdx,rcx
ffff80000080edc7:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080edcb:	48 01 f2             	add    rdx,rsi
ffff80000080edce:	48 8d 4a 08          	lea    rcx,[rdx+0x8]
ffff80000080edd2:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080edd5:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:100
    disk_reqs[tail].sec_n=secn;
ffff80000080edd7:	48 ba 0c bd bf ff ff 	movabs rdx,0xffffffffffbfbd0c
ffff80000080edde:	ff ff ff 
ffff80000080ede1:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ede4:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080edeb:	ff ff ff 
ffff80000080edee:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080edf2:	48 63 ca             	movsxd rcx,edx
ffff80000080edf5:	48 89 ca             	mov    rdx,rcx
ffff80000080edf8:	48 01 d2             	add    rdx,rdx
ffff80000080edfb:	48 01 ca             	add    rdx,rcx
ffff80000080edfe:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ee02:	48 01 f2             	add    rdx,rsi
ffff80000080ee05:	48 8d 4a 0c          	lea    rcx,[rdx+0xc]
ffff80000080ee09:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000080ee0c:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:101
    disk_reqs[tail].stat=REQ_STAT_READY;
ffff80000080ee0e:	48 ba 0c bd bf ff ff 	movabs rdx,0xffffffffffbfbd0c
ffff80000080ee15:	ff ff ff 
ffff80000080ee18:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ee1b:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080ee22:	ff ff ff 
ffff80000080ee25:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080ee29:	48 63 ca             	movsxd rcx,edx
ffff80000080ee2c:	48 89 ca             	mov    rdx,rcx
ffff80000080ee2f:	48 01 d2             	add    rdx,rdx
ffff80000080ee32:	48 01 ca             	add    rdx,rcx
ffff80000080ee35:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ee39:	48 01 f2             	add    rdx,rsi
ffff80000080ee3c:	48 83 c2 1c          	add    rdx,0x1c
ffff80000080ee40:	c7 02 01 00 00 00    	mov    DWORD PTR [rdx],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:102
    disk_reqs[tail].buf=buf;
ffff80000080ee46:	48 ba 0c bd bf ff ff 	movabs rdx,0xffffffffffbfbd0c
ffff80000080ee4d:	ff ff ff 
ffff80000080ee50:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ee53:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080ee5a:	ff ff ff 
ffff80000080ee5d:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080ee61:	48 63 ca             	movsxd rcx,edx
ffff80000080ee64:	48 89 ca             	mov    rdx,rcx
ffff80000080ee67:	48 01 d2             	add    rdx,rdx
ffff80000080ee6a:	48 01 ca             	add    rdx,rcx
ffff80000080ee6d:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ee71:	48 01 f2             	add    rdx,rsi
ffff80000080ee74:	48 8d 4a 10          	lea    rcx,[rdx+0x10]
ffff80000080ee78:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ee7c:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:103
    int r=tail;
ffff80000080ee7f:	48 ba 0c bd bf ff ff 	movabs rdx,0xffffffffffbfbd0c
ffff80000080ee86:	ff ff ff 
ffff80000080ee89:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ee8c:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:104
    tail=(tail+1)%MAX_DISK_REQUEST_COUNT;
ffff80000080ee8f:	48 ba 0c bd bf ff ff 	movabs rdx,0xffffffffffbfbd0c
ffff80000080ee96:	ff ff ff 
ffff80000080ee99:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ee9c:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000080ee9f:	48 63 d1             	movsxd rdx,ecx
ffff80000080eea2:	48 69 d2 89 88 88 88 	imul   rdx,rdx,0xffffffff88888889
ffff80000080eea9:	48 c1 ea 20          	shr    rdx,0x20
ffff80000080eead:	01 ca                	add    edx,ecx
ffff80000080eeaf:	c1 fa 07             	sar    edx,0x7
ffff80000080eeb2:	89 ce                	mov    esi,ecx
ffff80000080eeb4:	c1 fe 1f             	sar    esi,0x1f
ffff80000080eeb7:	29 f2                	sub    edx,esi
ffff80000080eeb9:	69 f2 f0 00 00 00    	imul   esi,edx,0xf0
ffff80000080eebf:	29 f1                	sub    ecx,esi
ffff80000080eec1:	89 ca                	mov    edx,ecx
ffff80000080eec3:	48 b9 0c bd bf ff ff 	movabs rcx,0xffffffffffbfbd0c
ffff80000080eeca:	ff ff ff 
ffff80000080eecd:	89 14 08             	mov    DWORD PTR [rax+rcx*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:105
    return r;
ffff80000080eed0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:106
}
ffff80000080eed3:	5d                   	pop    rbp
ffff80000080eed4:	c3                   	ret    

ffff80000080eed5 <execute_request>:
execute_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:107
int execute_request(){
ffff80000080eed5:	f3 0f 1e fa          	endbr64 
ffff80000080eed9:	55                   	push   rbp
ffff80000080eeda:	48 89 e5             	mov    rbp,rsp
ffff80000080eedd:	41 57                	push   r15
ffff80000080eedf:	48 83 ec 18          	sub    rsp,0x18
ffff80000080eee3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080eee3 <execute_request+0xe>
ffff80000080eeea:	49 bb 45 3a 01 00 00 	movabs r11,0x13a45
ffff80000080eef1:	00 00 00 
ffff80000080eef4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:109
    //查看是否有已经在运行的请求
    if(running_req!=NULL)
ffff80000080eef7:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080eefe:	ff ff ff 
ffff80000080ef01:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ef05:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ef08:	48 85 d2             	test   rdx,rdx
ffff80000080ef0b:	0f 84 a6 00 00 00    	je     ffff80000080efb7 <execute_request+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:111
    {
        running_req->time++;
ffff80000080ef11:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080ef18:	ff ff ff 
ffff80000080ef1b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ef1f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ef22:	8b 4a 24             	mov    ecx,DWORD PTR [rdx+0x24]
ffff80000080ef25:	83 c1 01             	add    ecx,0x1
ffff80000080ef28:	89 4a 24             	mov    DWORD PTR [rdx+0x24],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:112
        if(running_req->func!=DISKREQ_CHECK)
ffff80000080ef2b:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080ef32:	ff ff ff 
ffff80000080ef35:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ef39:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ef3c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080ef3e:	83 fa 02             	cmp    edx,0x2
ffff80000080ef41:	74 0a                	je     ffff80000080ef4d <execute_request+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:113
            return 2;
ffff80000080ef43:	b8 02 00 00 00       	mov    eax,0x2
ffff80000080ef48:	e9 c4 02 00 00       	jmp    ffff80000080f211 <execute_request+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:114
        if(running_req->time>MAX_DISK_CHKTIME)
ffff80000080ef4d:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080ef54:	ff ff ff 
ffff80000080ef57:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ef5b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ef5e:	8b 52 24             	mov    edx,DWORD PTR [rdx+0x24]
ffff80000080ef61:	83 fa 0a             	cmp    edx,0xa
ffff80000080ef64:	7e 47                	jle    ffff80000080efad <execute_request+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:117
        {
            //检测硬盘超时，视为没有硬盘连接
            running_req->result=DISK_CHK_ERR;
ffff80000080ef66:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080ef6d:	ff ff ff 
ffff80000080ef70:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ef74:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ef77:	c7 42 20 02 00 00 00 	mov    DWORD PTR [rdx+0x20],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:118
            running_req->stat=REQ_STAT_DONE;
ffff80000080ef7e:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080ef85:	ff ff ff 
ffff80000080ef88:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ef8c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ef8f:	c7 42 1c 03 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119
            running_req=NULL;
ffff80000080ef96:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080ef9d:	ff ff ff 
ffff80000080efa0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080efa4:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
ffff80000080efab:	eb 0a                	jmp    ffff80000080efb7 <execute_request+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
        }else
        {
            //未到时间继续等待
            return 2;
ffff80000080efad:	b8 02 00 00 00       	mov    eax,0x2
ffff80000080efb2:	e9 5a 02 00 00       	jmp    ffff80000080f211 <execute_request+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        }
    }
    if(head==tail)return 1;//检查是否为空
ffff80000080efb7:	48 ba 08 bd bf ff ff 	movabs rdx,0xffffffffffbfbd08
ffff80000080efbe:	ff ff ff 
ffff80000080efc1:	8b 0c 10             	mov    ecx,DWORD PTR [rax+rdx*1]
ffff80000080efc4:	48 ba 0c bd bf ff ff 	movabs rdx,0xffffffffffbfbd0c
ffff80000080efcb:	ff ff ff 
ffff80000080efce:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080efd1:	39 d1                	cmp    ecx,edx
ffff80000080efd3:	75 0a                	jne    ffff80000080efdf <execute_request+0x10a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126 (discriminator 1)
ffff80000080efd5:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080efda:	e9 32 02 00 00       	jmp    ffff80000080f211 <execute_request+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    running_req=&disk_reqs[head];
ffff80000080efdf:	48 ba 08 bd bf ff ff 	movabs rdx,0xffffffffffbfbd08
ffff80000080efe6:	ff ff ff 
ffff80000080efe9:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080efec:	48 63 ca             	movsxd rcx,edx
ffff80000080efef:	48 89 ca             	mov    rdx,rcx
ffff80000080eff2:	48 01 d2             	add    rdx,rdx
ffff80000080eff5:	48 01 ca             	add    rdx,rcx
ffff80000080eff8:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080effc:	48 b9 68 fd ff ff ff 	movabs rcx,0xfffffffffffffd68
ffff80000080f003:	ff ff ff 
ffff80000080f006:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080f00a:	48 01 d1             	add    rcx,rdx
ffff80000080f00d:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f014:	ff ff ff 
ffff80000080f017:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f01b:	48 89 0a             	mov    QWORD PTR [rdx],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
    head=(head+1)%MAX_DISK_REQUEST_COUNT;
ffff80000080f01e:	48 ba 08 bd bf ff ff 	movabs rdx,0xffffffffffbfbd08
ffff80000080f025:	ff ff ff 
ffff80000080f028:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080f02b:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000080f02e:	48 63 d1             	movsxd rdx,ecx
ffff80000080f031:	48 69 d2 89 88 88 88 	imul   rdx,rdx,0xffffffff88888889
ffff80000080f038:	48 c1 ea 20          	shr    rdx,0x20
ffff80000080f03c:	01 ca                	add    edx,ecx
ffff80000080f03e:	c1 fa 07             	sar    edx,0x7
ffff80000080f041:	89 ce                	mov    esi,ecx
ffff80000080f043:	c1 fe 1f             	sar    esi,0x1f
ffff80000080f046:	29 f2                	sub    edx,esi
ffff80000080f048:	69 f2 f0 00 00 00    	imul   esi,edx,0xf0
ffff80000080f04e:	29 f1                	sub    ecx,esi
ffff80000080f050:	89 ca                	mov    edx,ecx
ffff80000080f052:	48 b9 08 bd bf ff ff 	movabs rcx,0xffffffffffbfbd08
ffff80000080f059:	ff ff ff 
ffff80000080f05c:	89 14 08             	mov    DWORD PTR [rax+rcx*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:129
    running_req->stat=REQ_STAT_WORKING;
ffff80000080f05f:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f066:	ff ff ff 
ffff80000080f069:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f06d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f070:	c7 42 1c 02 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    //set_proc_stat(running_req->pid,TASK_SUSPENDED);
    int r=0;
ffff80000080f077:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:132
    switch (running_req->func)
ffff80000080f07e:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f085:	ff ff ff 
ffff80000080f088:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f08c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f08f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080f091:	83 fa 03             	cmp    edx,0x3
ffff80000080f094:	0f 84 37 01 00 00    	je     ffff80000080f1d1 <execute_request+0x2fc>
ffff80000080f09a:	83 fa 03             	cmp    edx,0x3
ffff80000080f09d:	0f 8f 5b 01 00 00    	jg     ffff80000080f1fe <execute_request+0x329>
ffff80000080f0a3:	83 fa 02             	cmp    edx,0x2
ffff80000080f0a6:	0f 84 f8 00 00 00    	je     ffff80000080f1a4 <execute_request+0x2cf>
ffff80000080f0ac:	83 fa 02             	cmp    edx,0x2
ffff80000080f0af:	0f 8f 49 01 00 00    	jg     ffff80000080f1fe <execute_request+0x329>
ffff80000080f0b5:	85 d2                	test   edx,edx
ffff80000080f0b7:	74 0a                	je     ffff80000080f0c3 <execute_request+0x1ee>
ffff80000080f0b9:	83 fa 01             	cmp    edx,0x1
ffff80000080f0bc:	74 77                	je     ffff80000080f135 <execute_request+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:150
        break;
    case DISKREQ_RESET:
        r=async_reset_disk(running_req->disk);
        break;
    default:
        break;
ffff80000080f0be:	e9 3b 01 00 00       	jmp    ffff80000080f1fe <execute_request+0x329>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f0c3:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f0ca:	ff ff ff 
ffff80000080f0cd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f0d1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
ffff80000080f0d4:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f0d8:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f0df:	ff ff ff 
ffff80000080f0e2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f0e6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
ffff80000080f0e9:	8b 52 0c             	mov    edx,DWORD PTR [rdx+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f0ec:	48 be b8 fe ff ff ff 	movabs rsi,0xfffffffffffffeb8
ffff80000080f0f3:	ff ff ff 
ffff80000080f0f6:	48 8b 34 30          	mov    rsi,QWORD PTR [rax+rsi*1]
ffff80000080f0fa:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
ffff80000080f0fd:	8b 76 08             	mov    esi,DWORD PTR [rsi+0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
ffff80000080f100:	41 89 f0             	mov    r8d,esi
ffff80000080f103:	48 be b8 fe ff ff ff 	movabs rsi,0xfffffffffffffeb8
ffff80000080f10a:	ff ff ff 
ffff80000080f10d:	48 8b 34 30          	mov    rsi,QWORD PTR [rax+rsi*1]
ffff80000080f111:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
ffff80000080f114:	8b 7e 04             	mov    edi,DWORD PTR [rsi+0x4]
ffff80000080f117:	44 89 c6             	mov    esi,r8d
ffff80000080f11a:	49 89 c7             	mov    r15,rax
ffff80000080f11d:	49 b8 3b c9 fe ff ff 	movabs r8,0xfffffffffffec93b
ffff80000080f124:	ff ff ff 
ffff80000080f127:	49 01 c0             	add    r8,rax
ffff80000080f12a:	41 ff d0             	call   r8
ffff80000080f12d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        break;
ffff80000080f130:	e9 ca 00 00 00       	jmp    ffff80000080f1ff <execute_request+0x32a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f135:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f13c:	ff ff ff 
ffff80000080f13f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f143:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
ffff80000080f146:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f14a:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f151:	ff ff ff 
ffff80000080f154:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f158:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
ffff80000080f15b:	8b 52 0c             	mov    edx,DWORD PTR [rdx+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080f15e:	48 be b8 fe ff ff ff 	movabs rsi,0xfffffffffffffeb8
ffff80000080f165:	ff ff ff 
ffff80000080f168:	48 8b 34 30          	mov    rsi,QWORD PTR [rax+rsi*1]
ffff80000080f16c:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
ffff80000080f16f:	8b 76 08             	mov    esi,DWORD PTR [rsi+0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
ffff80000080f172:	41 89 f0             	mov    r8d,esi
ffff80000080f175:	48 be b8 fe ff ff ff 	movabs rsi,0xfffffffffffffeb8
ffff80000080f17c:	ff ff ff 
ffff80000080f17f:	48 8b 34 30          	mov    rsi,QWORD PTR [rax+rsi*1]
ffff80000080f183:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
ffff80000080f186:	8b 7e 04             	mov    edi,DWORD PTR [rsi+0x4]
ffff80000080f189:	44 89 c6             	mov    esi,r8d
ffff80000080f18c:	49 89 c7             	mov    r15,rax
ffff80000080f18f:	49 b8 bf ca fe ff ff 	movabs r8,0xfffffffffffecabf
ffff80000080f196:	ff ff ff 
ffff80000080f199:	49 01 c0             	add    r8,rax
ffff80000080f19c:	41 ff d0             	call   r8
ffff80000080f19f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
        break;
ffff80000080f1a2:	eb 5b                	jmp    ffff80000080f1ff <execute_request+0x32a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
        r=async_check_disk(running_req->disk);
ffff80000080f1a4:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f1ab:	ff ff ff 
ffff80000080f1ae:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f1b2:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f1b5:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080f1b8:	89 d7                	mov    edi,edx
ffff80000080f1ba:	49 89 c7             	mov    r15,rax
ffff80000080f1bd:	48 ba a4 d3 fe ff ff 	movabs rdx,0xfffffffffffed3a4
ffff80000080f1c4:	ff ff ff 
ffff80000080f1c7:	48 01 c2             	add    rdx,rax
ffff80000080f1ca:	ff d2                	call   rdx
ffff80000080f1cc:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
        break;
ffff80000080f1cf:	eb 2e                	jmp    ffff80000080f1ff <execute_request+0x32a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147
        r=async_reset_disk(running_req->disk);
ffff80000080f1d1:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f1d8:	ff ff ff 
ffff80000080f1db:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f1df:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f1e2:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080f1e5:	89 d7                	mov    edi,edx
ffff80000080f1e7:	49 89 c7             	mov    r15,rax
ffff80000080f1ea:	48 ba ef c8 fe ff ff 	movabs rdx,0xfffffffffffec8ef
ffff80000080f1f1:	ff ff ff 
ffff80000080f1f4:	48 01 c2             	add    rdx,rax
ffff80000080f1f7:	ff d2                	call   rdx
ffff80000080f1f9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148
        break;
ffff80000080f1fc:	eb 01                	jmp    ffff80000080f1ff <execute_request+0x32a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:150
        break;
ffff80000080f1fe:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:152
    }
    if(r==-1)return -1;
ffff80000080f1ff:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff80000080f203:	75 07                	jne    ffff80000080f20c <execute_request+0x337>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:152 (discriminator 1)
ffff80000080f205:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f20a:	eb 05                	jmp    ffff80000080f211 <execute_request+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:153
    return 0;
ffff80000080f20c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:154
}
ffff80000080f211:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f215:	c9                   	leave  
ffff80000080f216:	c3                   	ret    

ffff80000080f217 <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:156
int async_reset_disk(int disk)
{
ffff80000080f217:	f3 0f 1e fa          	endbr64 
ffff80000080f21b:	55                   	push   rbp
ffff80000080f21c:	48 89 e5             	mov    rbp,rsp
ffff80000080f21f:	41 57                	push   r15
ffff80000080f221:	48 83 ec 18          	sub    rsp,0x18
ffff80000080f225:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f225 <async_reset_disk+0xe>
ffff80000080f22c:	49 bb 03 37 01 00 00 	movabs r11,0x13703
ffff80000080f233:	00 00 00 
ffff80000080f236:	4c 01 d8             	add    rax,r11
ffff80000080f239:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:157
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
ffff80000080f23c:	be 0c 00 00 00       	mov    esi,0xc
ffff80000080f241:	bf f6 03 00 00       	mov    edi,0x3f6
ffff80000080f246:	49 89 c7             	mov    r15,rax
ffff80000080f249:	48 ba 18 77 fe ff ff 	movabs rdx,0xfffffffffffe7718
ffff80000080f250:	ff ff ff 
ffff80000080f253:	48 01 c2             	add    rdx,rax
ffff80000080f256:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:158
    return 0;
ffff80000080f258:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:159
}
ffff80000080f25d:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f261:	c9                   	leave  
ffff80000080f262:	c3                   	ret    

ffff80000080f263 <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:161
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
ffff80000080f263:	f3 0f 1e fa          	endbr64 
ffff80000080f267:	55                   	push   rbp
ffff80000080f268:	48 89 e5             	mov    rbp,rsp
ffff80000080f26b:	41 57                	push   r15
ffff80000080f26d:	53                   	push   rbx
ffff80000080f26e:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f272:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f272 <async_read_disk+0xf>
ffff80000080f279:	49 bb b6 36 01 00 00 	movabs r11,0x136b6
ffff80000080f280:	00 00 00 
ffff80000080f283:	4c 01 db             	add    rbx,r11
ffff80000080f286:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080f289:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f28c:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080f28f:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:162
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080f293:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:163
    int slave_disk=0;
ffff80000080f299:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:164
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080f2a0:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080f2a4:	74 06                	je     ffff80000080f2ac <async_read_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:164 (discriminator 1)
ffff80000080f2a6:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f2aa:	75 06                	jne    ffff80000080f2b2 <async_read_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:165
        port=PORT_DISK_SLAVE;
ffff80000080f2ac:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080f2b2:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f2b6:	74 06                	je     ffff80000080f2be <async_read_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 1)
ffff80000080f2b8:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080f2bc:	75 07                	jne    ffff80000080f2c5 <async_read_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
        slave_disk=1;
ffff80000080f2be:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:168
    outb(port+2,sec_n);
ffff80000080f2c5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f2c8:	0f b6 d0             	movzx  edx,al
ffff80000080f2cb:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f2cf:	83 c0 02             	add    eax,0x2
ffff80000080f2d2:	0f b7 c0             	movzx  eax,ax
ffff80000080f2d5:	89 d6                	mov    esi,edx
ffff80000080f2d7:	89 c7                	mov    edi,eax
ffff80000080f2d9:	49 89 df             	mov    r15,rbx
ffff80000080f2dc:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f2e3:	ff ff ff 
ffff80000080f2e6:	48 01 d8             	add    rax,rbx
ffff80000080f2e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
    outb(port+3,lba&0xff);
ffff80000080f2eb:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f2ee:	0f b6 d0             	movzx  edx,al
ffff80000080f2f1:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f2f5:	83 c0 03             	add    eax,0x3
ffff80000080f2f8:	0f b7 c0             	movzx  eax,ax
ffff80000080f2fb:	89 d6                	mov    esi,edx
ffff80000080f2fd:	89 c7                	mov    edi,eax
ffff80000080f2ff:	49 89 df             	mov    r15,rbx
ffff80000080f302:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f309:	ff ff ff 
ffff80000080f30c:	48 01 d8             	add    rax,rbx
ffff80000080f30f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:170
    outb(port+4,(lba>>8)&0xff);
ffff80000080f311:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f314:	c1 e8 08             	shr    eax,0x8
ffff80000080f317:	0f b6 d0             	movzx  edx,al
ffff80000080f31a:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f31e:	83 c0 04             	add    eax,0x4
ffff80000080f321:	0f b7 c0             	movzx  eax,ax
ffff80000080f324:	89 d6                	mov    esi,edx
ffff80000080f326:	89 c7                	mov    edi,eax
ffff80000080f328:	49 89 df             	mov    r15,rbx
ffff80000080f32b:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f332:	ff ff ff 
ffff80000080f335:	48 01 d8             	add    rax,rbx
ffff80000080f338:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    outb(port+5,(lba>>16)&0xff);
ffff80000080f33a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f33d:	c1 e8 10             	shr    eax,0x10
ffff80000080f340:	0f b6 d0             	movzx  edx,al
ffff80000080f343:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f347:	83 c0 05             	add    eax,0x5
ffff80000080f34a:	0f b7 c0             	movzx  eax,ax
ffff80000080f34d:	89 d6                	mov    esi,edx
ffff80000080f34f:	89 c7                	mov    edi,eax
ffff80000080f351:	49 89 df             	mov    r15,rbx
ffff80000080f354:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f35b:	ff ff ff 
ffff80000080f35e:	48 01 d8             	add    rax,rbx
ffff80000080f361:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172
    char drv=slave_disk?0x10:0;
ffff80000080f363:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080f367:	74 07                	je     ffff80000080f370 <async_read_disk+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 1)
ffff80000080f369:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080f36e:	eb 05                	jmp    ffff80000080f375 <async_read_disk+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 2)
ffff80000080f370:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 4)
ffff80000080f375:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:173 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080f378:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f37b:	c1 e8 18             	shr    eax,0x18
ffff80000080f37e:	83 e0 0f             	and    eax,0xf
ffff80000080f381:	89 c2                	mov    edx,eax
ffff80000080f383:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080f387:	09 d0                	or     eax,edx
ffff80000080f389:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080f38c:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:174 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080f38f:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffff80000080f393:	0f b6 d0             	movzx  edx,al
ffff80000080f396:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f39a:	83 c0 06             	add    eax,0x6
ffff80000080f39d:	0f b7 c0             	movzx  eax,ax
ffff80000080f3a0:	89 d6                	mov    esi,edx
ffff80000080f3a2:	89 c7                	mov    edi,eax
ffff80000080f3a4:	49 89 df             	mov    r15,rbx
ffff80000080f3a7:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f3ae:	ff ff ff 
ffff80000080f3b1:	48 01 d8             	add    rax,rbx
ffff80000080f3b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:175 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
ffff80000080f3b6:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f3ba:	83 c0 07             	add    eax,0x7
ffff80000080f3bd:	0f b7 c0             	movzx  eax,ax
ffff80000080f3c0:	be 20 00 00 00       	mov    esi,0x20
ffff80000080f3c5:	89 c7                	mov    edi,eax
ffff80000080f3c7:	49 89 df             	mov    r15,rbx
ffff80000080f3ca:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f3d1:	ff ff ff 
ffff80000080f3d4:	48 01 d8             	add    rax,rbx
ffff80000080f3d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:195 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
ffff80000080f3d9:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:196 (discriminator 4)
}
ffff80000080f3de:	48 83 c4 30          	add    rsp,0x30
ffff80000080f3e2:	5b                   	pop    rbx
ffff80000080f3e3:	41 5f                	pop    r15
ffff80000080f3e5:	5d                   	pop    rbp
ffff80000080f3e6:	c3                   	ret    

ffff80000080f3e7 <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
ffff80000080f3e7:	f3 0f 1e fa          	endbr64 
ffff80000080f3eb:	55                   	push   rbp
ffff80000080f3ec:	48 89 e5             	mov    rbp,rsp
ffff80000080f3ef:	41 57                	push   r15
ffff80000080f3f1:	53                   	push   rbx
ffff80000080f3f2:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f3f6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f3f6 <async_write_disk+0xf>
ffff80000080f3fd:	49 bb 32 35 01 00 00 	movabs r11,0x13532
ffff80000080f404:	00 00 00 
ffff80000080f407:	4c 01 db             	add    rbx,r11
ffff80000080f40a:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080f40d:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f410:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080f413:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080f417:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    int slave_disk=0;
ffff80000080f41d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080f424:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080f428:	74 06                	je     ffff80000080f430 <async_write_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
ffff80000080f42a:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f42e:	75 06                	jne    ffff80000080f436 <async_write_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        port=PORT_DISK_SLAVE;
ffff80000080f430:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080f436:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f43a:	74 06                	je     ffff80000080f442 <async_write_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
ffff80000080f43c:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080f440:	75 07                	jne    ffff80000080f449 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        slave_disk=1;
ffff80000080f442:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    while (1)
    {
        byte t=inb(0x1f7);
ffff80000080f449:	bf f7 00 00 00       	mov    edi,0xf7
ffff80000080f44e:	49 89 df             	mov    r15,rbx
ffff80000080f451:	48 b8 31 77 fe ff ff 	movabs rax,0xfffffffffffe7731
ffff80000080f458:	ff ff ff 
ffff80000080f45b:	48 01 d8             	add    rax,rbx
ffff80000080f45e:	ff d0                	call   rax
ffff80000080f460:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
        //logf("istat:%x",t);
        byte err=t&1;
ffff80000080f463:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080f467:	83 e0 01             	and    eax,0x1
ffff80000080f46a:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
        if(err!=0)
ffff80000080f46d:	80 7d e6 00          	cmp    BYTE PTR [rbp-0x1a],0x0
ffff80000080f471:	74 0a                	je     ffff80000080f47d <async_write_disk+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:213
        {
            //printf("ERR iwriting disk\n");
            return -1;
ffff80000080f473:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f478:	e9 23 01 00 00       	jmp    ffff80000080f5a0 <async_write_disk+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:215
        }
        t&=0x88;
ffff80000080f47d:	80 65 e7 88          	and    BYTE PTR [rbp-0x19],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:216
        if(t==0x8)break;
ffff80000080f481:	80 7d e7 08          	cmp    BYTE PTR [rbp-0x19],0x8
ffff80000080f485:	74 02                	je     ffff80000080f489 <async_write_disk+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    {
ffff80000080f487:	eb c0                	jmp    ffff80000080f449 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:216
        if(t==0x8)break;
ffff80000080f489:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:218
    }
    outb(port+2,sec_n);
ffff80000080f48a:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f48d:	0f b6 d0             	movzx  edx,al
ffff80000080f490:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f494:	83 c0 02             	add    eax,0x2
ffff80000080f497:	0f b7 c0             	movzx  eax,ax
ffff80000080f49a:	89 d6                	mov    esi,edx
ffff80000080f49c:	89 c7                	mov    edi,eax
ffff80000080f49e:	49 89 df             	mov    r15,rbx
ffff80000080f4a1:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f4a8:	ff ff ff 
ffff80000080f4ab:	48 01 d8             	add    rax,rbx
ffff80000080f4ae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:219
    outb(port+3,lba&0xff);
ffff80000080f4b0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f4b3:	0f b6 d0             	movzx  edx,al
ffff80000080f4b6:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f4ba:	83 c0 03             	add    eax,0x3
ffff80000080f4bd:	0f b7 c0             	movzx  eax,ax
ffff80000080f4c0:	89 d6                	mov    esi,edx
ffff80000080f4c2:	89 c7                	mov    edi,eax
ffff80000080f4c4:	49 89 df             	mov    r15,rbx
ffff80000080f4c7:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f4ce:	ff ff ff 
ffff80000080f4d1:	48 01 d8             	add    rax,rbx
ffff80000080f4d4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:220
    outb(port+4,(lba>>8)&0xff);
ffff80000080f4d6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f4d9:	c1 e8 08             	shr    eax,0x8
ffff80000080f4dc:	0f b6 d0             	movzx  edx,al
ffff80000080f4df:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f4e3:	83 c0 04             	add    eax,0x4
ffff80000080f4e6:	0f b7 c0             	movzx  eax,ax
ffff80000080f4e9:	89 d6                	mov    esi,edx
ffff80000080f4eb:	89 c7                	mov    edi,eax
ffff80000080f4ed:	49 89 df             	mov    r15,rbx
ffff80000080f4f0:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f4f7:	ff ff ff 
ffff80000080f4fa:	48 01 d8             	add    rax,rbx
ffff80000080f4fd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    outb(port+5,(lba>>16)&0xff);
ffff80000080f4ff:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f502:	c1 e8 10             	shr    eax,0x10
ffff80000080f505:	0f b6 d0             	movzx  edx,al
ffff80000080f508:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f50c:	83 c0 05             	add    eax,0x5
ffff80000080f50f:	0f b7 c0             	movzx  eax,ax
ffff80000080f512:	89 d6                	mov    esi,edx
ffff80000080f514:	89 c7                	mov    edi,eax
ffff80000080f516:	49 89 df             	mov    r15,rbx
ffff80000080f519:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f520:	ff ff ff 
ffff80000080f523:	48 01 d8             	add    rax,rbx
ffff80000080f526:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
    char drv=slave_disk?0x10:0;
ffff80000080f528:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080f52c:	74 07                	je     ffff80000080f535 <async_write_disk+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 1)
ffff80000080f52e:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080f533:	eb 05                	jmp    ffff80000080f53a <async_write_disk+0x153>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 2)
ffff80000080f535:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 4)
ffff80000080f53a:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:223 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080f53d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f540:	c1 e8 18             	shr    eax,0x18
ffff80000080f543:	83 e0 0f             	and    eax,0xf
ffff80000080f546:	89 c2                	mov    edx,eax
ffff80000080f548:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffff80000080f54c:	09 d0                	or     eax,edx
ffff80000080f54e:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080f551:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:224 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080f554:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000080f558:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f55c:	83 c0 06             	add    eax,0x6
ffff80000080f55f:	0f b7 c0             	movzx  eax,ax
ffff80000080f562:	89 d6                	mov    esi,edx
ffff80000080f564:	89 c7                	mov    edi,eax
ffff80000080f566:	49 89 df             	mov    r15,rbx
ffff80000080f569:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f570:	ff ff ff 
ffff80000080f573:	48 01 d8             	add    rax,rbx
ffff80000080f576:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:225 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
ffff80000080f578:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f57c:	83 c0 07             	add    eax,0x7
ffff80000080f57f:	0f b7 c0             	movzx  eax,ax
ffff80000080f582:	be 30 00 00 00       	mov    esi,0x30
ffff80000080f587:	89 c7                	mov    edi,eax
ffff80000080f589:	49 89 df             	mov    r15,rbx
ffff80000080f58c:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080f593:	ff ff ff 
ffff80000080f596:	48 01 d8             	add    rax,rbx
ffff80000080f599:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
ffff80000080f59b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
}
ffff80000080f5a0:	48 83 c4 30          	add    rsp,0x30
ffff80000080f5a4:	5b                   	pop    rbx
ffff80000080f5a5:	41 5f                	pop    r15
ffff80000080f5a7:	5d                   	pop    rbp
ffff80000080f5a8:	c3                   	ret    

ffff80000080f5a9 <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:245
int read_disk(int disk, int lba, int secn, char *dest)
{
ffff80000080f5a9:	f3 0f 1e fa          	endbr64 
ffff80000080f5ad:	55                   	push   rbp
ffff80000080f5ae:	48 89 e5             	mov    rbp,rsp
ffff80000080f5b1:	41 57                	push   r15
ffff80000080f5b3:	53                   	push   rbx
ffff80000080f5b4:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f5b8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f5b8 <read_disk+0xf>
ffff80000080f5bf:	49 bb 70 33 01 00 00 	movabs r11,0x13370
ffff80000080f5c6:	00 00 00 
ffff80000080f5c9:	4c 01 db             	add    rbx,r11
ffff80000080f5cc:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080f5cf:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f5d2:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080f5d5:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    request(disk,DISKREQ_READ,lba,secn,dest);
ffff80000080f5d9:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff80000080f5dd:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080f5e0:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080f5e3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f5e6:	49 89 f0             	mov    r8,rsi
ffff80000080f5e9:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f5ee:	89 c7                	mov    edi,eax
ffff80000080f5f0:	49 89 df             	mov    r15,rbx
ffff80000080f5f3:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000080f5fa:	ff ff ff 
ffff80000080f5fd:	48 01 d8             	add    rax,rbx
ffff80000080f600:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:247
    int ret=read_disk_asm(lba,secn,dest);
ffff80000080f602:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f606:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080f609:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f60c:	89 ce                	mov    esi,ecx
ffff80000080f60e:	89 c7                	mov    edi,eax
ffff80000080f610:	49 89 df             	mov    r15,rbx
ffff80000080f613:	48 b8 54 d6 fe ff ff 	movabs rax,0xfffffffffffed654
ffff80000080f61a:	ff ff ff 
ffff80000080f61d:	48 01 d8             	add    rax,rbx
ffff80000080f620:	ff d0                	call   rax
ffff80000080f622:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:249
//    chk_result(ret);
    if(running_req){
ffff80000080f625:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f62c:	ff ff ff 
ffff80000080f62f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f633:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f636:	48 85 c0             	test   rax,rax
ffff80000080f639:	74 37                	je     ffff80000080f672 <read_disk+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:251

        running_req->stat=REQ_STAT_DONE;
ffff80000080f63b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f642:	ff ff ff 
ffff80000080f645:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f649:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f64c:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:252
        running_req->args->stat=REQ_STAT_EMPTY;
ffff80000080f653:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f65a:	ff ff ff 
ffff80000080f65d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f661:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f664:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080f668:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
ffff80000080f66f:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:255
    }
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080f672:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f679:	ff ff ff 
ffff80000080f67c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f680:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:256
    return ret;
ffff80000080f687:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:257
}
ffff80000080f68a:	48 83 c4 30          	add    rsp,0x30
ffff80000080f68e:	5b                   	pop    rbx
ffff80000080f68f:	41 5f                	pop    r15
ffff80000080f691:	5d                   	pop    rbp
ffff80000080f692:	c3                   	ret    

ffff80000080f693 <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:259
int write_disk(int disk, int lba, int secn, char *src)
{
ffff80000080f693:	f3 0f 1e fa          	endbr64 
ffff80000080f697:	55                   	push   rbp
ffff80000080f698:	48 89 e5             	mov    rbp,rsp
ffff80000080f69b:	41 57                	push   r15
ffff80000080f69d:	53                   	push   rbx
ffff80000080f69e:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f6a2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f6a2 <write_disk+0xf>
ffff80000080f6a9:	49 bb 86 32 01 00 00 	movabs r11,0x13286
ffff80000080f6b0:	00 00 00 
ffff80000080f6b3:	4c 01 db             	add    rbx,r11
ffff80000080f6b6:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080f6b9:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f6bc:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080f6bf:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:260
    request(disk,DISKREQ_WRITE,lba,secn,src);
ffff80000080f6c3:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff80000080f6c7:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080f6ca:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080f6cd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f6d0:	49 89 f0             	mov    r8,rsi
ffff80000080f6d3:	be 01 00 00 00       	mov    esi,0x1
ffff80000080f6d8:	89 c7                	mov    edi,eax
ffff80000080f6da:	49 89 df             	mov    r15,rbx
ffff80000080f6dd:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000080f6e4:	ff ff ff 
ffff80000080f6e7:	48 01 d8             	add    rax,rbx
ffff80000080f6ea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:261
    int ret=write_disk_asm(lba,secn,src);
ffff80000080f6ec:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f6f0:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080f6f3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f6f6:	89 ce                	mov    esi,ecx
ffff80000080f6f8:	89 c7                	mov    edi,eax
ffff80000080f6fa:	49 89 df             	mov    r15,rbx
ffff80000080f6fd:	48 b8 c8 d6 fe ff ff 	movabs rax,0xfffffffffffed6c8
ffff80000080f704:	ff ff ff 
ffff80000080f707:	48 01 d8             	add    rax,rbx
ffff80000080f70a:	ff d0                	call   rax
ffff80000080f70c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:263
//    chk_result(ret);
    if(running_req){
ffff80000080f70f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f716:	ff ff ff 
ffff80000080f719:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f71d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f720:	48 85 c0             	test   rax,rax
ffff80000080f723:	74 37                	je     ffff80000080f75c <write_disk+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:265

        running_req->stat=REQ_STAT_DONE;
ffff80000080f725:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f72c:	ff ff ff 
ffff80000080f72f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f733:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f736:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:266
        running_req->args->stat=REQ_STAT_EMPTY;
ffff80000080f73d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f744:	ff ff ff 
ffff80000080f747:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f74b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f74e:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080f752:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
ffff80000080f759:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:268
    }
    running_req=NULL;
ffff80000080f75c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f763:	ff ff ff 
ffff80000080f766:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f76a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:269
    return ret;
ffff80000080f771:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:270
}
ffff80000080f774:	48 83 c4 30          	add    rsp,0x30
ffff80000080f778:	5b                   	pop    rbx
ffff80000080f779:	41 5f                	pop    r15
ffff80000080f77b:	5d                   	pop    rbp
ffff80000080f77c:	c3                   	ret    

ffff80000080f77d <chk_result>:
chk_result():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:272
int chk_result(int r)
{
ffff80000080f77d:	f3 0f 1e fa          	endbr64 
ffff80000080f781:	55                   	push   rbp
ffff80000080f782:	48 89 e5             	mov    rbp,rsp
ffff80000080f785:	41 57                	push   r15
ffff80000080f787:	48 83 ec 18          	sub    rsp,0x18
ffff80000080f78b:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080f78b <chk_result+0xe>
ffff80000080f792:	49 bb 9d 31 01 00 00 	movabs r11,0x1319d
ffff80000080f799:	00 00 00 
ffff80000080f79c:	4c 01 da             	add    rdx,r11
ffff80000080f79f:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:273
    while(disk_reqs[r].stat!=REQ_STAT_DONE);
ffff80000080f7a2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:273 (discriminator 1)
ffff80000080f7a3:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080f7aa:	ff ff ff 
ffff80000080f7ad:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff80000080f7b1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f7b4:	48 63 c8             	movsxd rcx,eax
ffff80000080f7b7:	48 89 c8             	mov    rax,rcx
ffff80000080f7ba:	48 01 c0             	add    rax,rax
ffff80000080f7bd:	48 01 c8             	add    rax,rcx
ffff80000080f7c0:	48 c1 e0 04          	shl    rax,0x4
ffff80000080f7c4:	48 01 f0             	add    rax,rsi
ffff80000080f7c7:	48 83 c0 1c          	add    rax,0x1c
ffff80000080f7cb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f7cd:	83 f8 03             	cmp    eax,0x3
ffff80000080f7d0:	75 d1                	jne    ffff80000080f7a3 <chk_result+0x26>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:274
    if(disk_reqs[r].result==DISK_CHK_OK)
ffff80000080f7d2:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080f7d9:	ff ff ff 
ffff80000080f7dc:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff80000080f7e0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f7e3:	48 63 c8             	movsxd rcx,eax
ffff80000080f7e6:	48 89 c8             	mov    rax,rcx
ffff80000080f7e9:	48 01 c0             	add    rax,rax
ffff80000080f7ec:	48 01 c8             	add    rax,rcx
ffff80000080f7ef:	48 c1 e0 04          	shl    rax,0x4
ffff80000080f7f3:	48 01 f0             	add    rax,rsi
ffff80000080f7f6:	48 83 c0 20          	add    rax,0x20
ffff80000080f7fa:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f7fc:	83 f8 01             	cmp    eax,0x1
ffff80000080f7ff:	75 07                	jne    ffff80000080f808 <chk_result+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:275
        return 1;
ffff80000080f801:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080f806:	eb 2d                	jmp    ffff80000080f835 <chk_result+0xb8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:276
    comprintf("disk err\n");
ffff80000080f808:	48 b8 a0 d8 ff ff ff 	movabs rax,0xffffffffffffd8a0
ffff80000080f80f:	ff ff ff 
ffff80000080f812:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080f816:	48 89 c7             	mov    rdi,rax
ffff80000080f819:	49 89 d7             	mov    r15,rdx
ffff80000080f81c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f821:	48 b9 ac 0c ff ff ff 	movabs rcx,0xffffffffffff0cac
ffff80000080f828:	ff ff ff 
ffff80000080f82b:	48 01 d1             	add    rcx,rdx
ffff80000080f82e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:277
    return 0;
ffff80000080f830:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:278
}
ffff80000080f835:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f839:	c9                   	leave  
ffff80000080f83a:	c3                   	ret    

ffff80000080f83b <await_diskreq>:
await_diskreq():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:279
int await_diskreq(){
ffff80000080f83b:	f3 0f 1e fa          	endbr64 
ffff80000080f83f:	55                   	push   rbp
ffff80000080f840:	48 89 e5             	mov    rbp,rsp
ffff80000080f843:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f843 <await_diskreq+0x8>
ffff80000080f84a:	49 bb e5 30 01 00 00 	movabs r11,0x130e5
ffff80000080f851:	00 00 00 
ffff80000080f854:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:280
    while (running_req->stat!=REQ_STAT_DONE);
ffff80000080f857:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:280 (discriminator 1)
ffff80000080f858:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f85f:	ff ff ff 
ffff80000080f862:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f866:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f869:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff80000080f86c:	83 fa 03             	cmp    edx,0x3
ffff80000080f86f:	75 e7                	jne    ffff80000080f858 <await_diskreq+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:281
    if(running_req->result==DISK_CHK_OK)
ffff80000080f871:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080f878:	ff ff ff 
ffff80000080f87b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080f87f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f882:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
ffff80000080f885:	83 f8 01             	cmp    eax,0x1
ffff80000080f888:	75 07                	jne    ffff80000080f891 <await_diskreq+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:282
        return 1;
ffff80000080f88a:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080f88f:	eb 05                	jmp    ffff80000080f896 <await_diskreq+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:283
    return 0;
ffff80000080f891:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:285

}
ffff80000080f896:	5d                   	pop    rbp
ffff80000080f897:	c3                   	ret    

ffff80000080f898 <disk_existent>:
disk_existent():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:287
int disk_existent(int disk)
{
ffff80000080f898:	f3 0f 1e fa          	endbr64 
ffff80000080f89c:	55                   	push   rbp
ffff80000080f89d:	48 89 e5             	mov    rbp,rsp
ffff80000080f8a0:	41 57                	push   r15
ffff80000080f8a2:	48 83 ec 18          	sub    rsp,0x18
ffff80000080f8a6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f8a6 <disk_existent+0xe>
ffff80000080f8ad:	49 bb 82 30 01 00 00 	movabs r11,0x13082
ffff80000080f8b4:	00 00 00 
ffff80000080f8b7:	4c 01 d8             	add    rax,r11
ffff80000080f8ba:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:288
    switch (disk)
ffff80000080f8bd:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
ffff80000080f8c1:	0f 84 b8 00 00 00    	je     ffff80000080f97f <disk_existent+0xe7>
ffff80000080f8c7:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
ffff80000080f8cb:	0f 8f dc 00 00 00    	jg     ffff80000080f9ad <disk_existent+0x115>
ffff80000080f8d1:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
ffff80000080f8d5:	74 7a                	je     ffff80000080f951 <disk_existent+0xb9>
ffff80000080f8d7:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
ffff80000080f8db:	0f 8f cc 00 00 00    	jg     ffff80000080f9ad <disk_existent+0x115>
ffff80000080f8e1:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080f8e5:	74 0b                	je     ffff80000080f8f2 <disk_existent+0x5a>
ffff80000080f8e7:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
ffff80000080f8eb:	74 36                	je     ffff80000080f923 <disk_existent+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:306
        
    case DISK_SLAVE_SLAVE:
        return sys_find_dev("hd3")!=-1;
        break;
    default:
        break;
ffff80000080f8ed:	e9 bb 00 00 00       	jmp    ffff80000080f9ad <disk_existent+0x115>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:291
        return sys_find_dev("hd0")!=-1;
ffff80000080f8f2:	48 ba aa d8 ff ff ff 	movabs rdx,0xffffffffffffd8aa
ffff80000080f8f9:	ff ff ff 
ffff80000080f8fc:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080f900:	48 89 d7             	mov    rdi,rdx
ffff80000080f903:	49 89 c7             	mov    r15,rax
ffff80000080f906:	48 ba 42 30 fe ff ff 	movabs rdx,0xfffffffffffe3042
ffff80000080f90d:	ff ff ff 
ffff80000080f910:	48 01 c2             	add    rdx,rax
ffff80000080f913:	ff d2                	call   rdx
ffff80000080f915:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080f918:	0f 95 c0             	setne  al
ffff80000080f91b:	0f b6 c0             	movzx  eax,al
ffff80000080f91e:	e9 90 00 00 00       	jmp    ffff80000080f9b3 <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:295
        return sys_find_dev("hd1")!=-1;
ffff80000080f923:	48 ba ae d8 ff ff ff 	movabs rdx,0xffffffffffffd8ae
ffff80000080f92a:	ff ff ff 
ffff80000080f92d:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080f931:	48 89 d7             	mov    rdi,rdx
ffff80000080f934:	49 89 c7             	mov    r15,rax
ffff80000080f937:	48 ba 42 30 fe ff ff 	movabs rdx,0xfffffffffffe3042
ffff80000080f93e:	ff ff ff 
ffff80000080f941:	48 01 c2             	add    rdx,rax
ffff80000080f944:	ff d2                	call   rdx
ffff80000080f946:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080f949:	0f 95 c0             	setne  al
ffff80000080f94c:	0f b6 c0             	movzx  eax,al
ffff80000080f94f:	eb 62                	jmp    ffff80000080f9b3 <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:299
        return sys_find_dev("hd2")!=-1;
ffff80000080f951:	48 ba b2 d8 ff ff ff 	movabs rdx,0xffffffffffffd8b2
ffff80000080f958:	ff ff ff 
ffff80000080f95b:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080f95f:	48 89 d7             	mov    rdi,rdx
ffff80000080f962:	49 89 c7             	mov    r15,rax
ffff80000080f965:	48 ba 42 30 fe ff ff 	movabs rdx,0xfffffffffffe3042
ffff80000080f96c:	ff ff ff 
ffff80000080f96f:	48 01 c2             	add    rdx,rax
ffff80000080f972:	ff d2                	call   rdx
ffff80000080f974:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080f977:	0f 95 c0             	setne  al
ffff80000080f97a:	0f b6 c0             	movzx  eax,al
ffff80000080f97d:	eb 34                	jmp    ffff80000080f9b3 <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:303
        return sys_find_dev("hd3")!=-1;
ffff80000080f97f:	48 ba b6 d8 ff ff ff 	movabs rdx,0xffffffffffffd8b6
ffff80000080f986:	ff ff ff 
ffff80000080f989:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080f98d:	48 89 d7             	mov    rdi,rdx
ffff80000080f990:	49 89 c7             	mov    r15,rax
ffff80000080f993:	48 ba 42 30 fe ff ff 	movabs rdx,0xfffffffffffe3042
ffff80000080f99a:	ff ff ff 
ffff80000080f99d:	48 01 c2             	add    rdx,rax
ffff80000080f9a0:	ff d2                	call   rdx
ffff80000080f9a2:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080f9a5:	0f 95 c0             	setne  al
ffff80000080f9a8:	0f b6 c0             	movzx  eax,al
ffff80000080f9ab:	eb 06                	jmp    ffff80000080f9b3 <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:306
        break;
ffff80000080f9ad:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:308
    }
    return 0;
ffff80000080f9ae:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:309
}
ffff80000080f9b3:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f9b7:	c9                   	leave  
ffff80000080f9b8:	c3                   	ret    

ffff80000080f9b9 <hd_iterate>:
hd_iterate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:311
int hd_iterate()
{
ffff80000080f9b9:	f3 0f 1e fa          	endbr64 
ffff80000080f9bd:	55                   	push   rbp
ffff80000080f9be:	48 89 e5             	mov    rbp,rsp
ffff80000080f9c1:	41 57                	push   r15
ffff80000080f9c3:	53                   	push   rbx
ffff80000080f9c4:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
ffff80000080f9cb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f9cb <hd_iterate+0x12>
ffff80000080f9d2:	49 bb 5d 2f 01 00 00 	movabs r11,0x12f5d
ffff80000080f9d9:	00 00 00 
ffff80000080f9dc:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:315
    char *name;
    
    int r[4];
    r[0]=request(DISK_MAJOR_MAJOR,DISKREQ_CHECK,0,1,0);
ffff80000080f9df:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080f9e5:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080f9ea:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080f9ef:	be 02 00 00 00       	mov    esi,0x2
ffff80000080f9f4:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080f9f9:	49 89 df             	mov    r15,rbx
ffff80000080f9fc:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000080fa03:	ff ff ff 
ffff80000080fa06:	48 01 d8             	add    rax,rbx
ffff80000080fa09:	ff d0                	call   rax
ffff80000080fa0b:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:316
    r[1]=request(DISK_MAJOR_SLAVE,DISKREQ_CHECK,0,1,0);
ffff80000080fa0e:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080fa14:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080fa19:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080fa1e:	be 02 00 00 00       	mov    esi,0x2
ffff80000080fa23:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080fa28:	49 89 df             	mov    r15,rbx
ffff80000080fa2b:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000080fa32:	ff ff ff 
ffff80000080fa35:	48 01 d8             	add    rax,rbx
ffff80000080fa38:	ff d0                	call   rax
ffff80000080fa3a:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:317
    r[2]=request(DISK_SLAVE_MAJOR,DISKREQ_CHECK,0,1,0);
ffff80000080fa3d:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080fa43:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080fa48:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080fa4d:	be 02 00 00 00       	mov    esi,0x2
ffff80000080fa52:	bf 02 00 00 00       	mov    edi,0x2
ffff80000080fa57:	49 89 df             	mov    r15,rbx
ffff80000080fa5a:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000080fa61:	ff ff ff 
ffff80000080fa64:	48 01 d8             	add    rax,rbx
ffff80000080fa67:	ff d0                	call   rax
ffff80000080fa69:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:318
    r[3]=request(DISK_SLAVE_SLAVE,DISKREQ_CHECK,0,1,0);
ffff80000080fa6c:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080fa72:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080fa77:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080fa7c:	be 02 00 00 00       	mov    esi,0x2
ffff80000080fa81:	bf 03 00 00 00       	mov    edi,0x3
ffff80000080fa86:	49 89 df             	mov    r15,rbx
ffff80000080fa89:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000080fa90:	ff ff ff 
ffff80000080fa93:	48 01 d8             	add    rax,rbx
ffff80000080fa96:	ff d0                	call   rax
ffff80000080fa98:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:319
    for(int i=0;i<1;i++)
ffff80000080fa9b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080faa2:	e9 0f 02 00 00       	jmp    ffff80000080fcb6 <hd_iterate+0x2fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:322
    {
        int disk;
        switch (i)
ffff80000080faa7:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080faab:	74 3b                	je     ffff80000080fae8 <hd_iterate+0x12f>
ffff80000080faad:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080fab1:	7f 3e                	jg     ffff80000080faf1 <hd_iterate+0x138>
ffff80000080fab3:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080fab7:	74 26                	je     ffff80000080fadf <hd_iterate+0x126>
ffff80000080fab9:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080fabd:	7f 32                	jg     ffff80000080faf1 <hd_iterate+0x138>
ffff80000080fabf:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff80000080fac3:	74 08                	je     ffff80000080facd <hd_iterate+0x114>
ffff80000080fac5:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
ffff80000080fac9:	74 0b                	je     ffff80000080fad6 <hd_iterate+0x11d>
ffff80000080facb:	eb 24                	jmp    ffff80000080faf1 <hd_iterate+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:324
        {
        case 0:disk=DISK_MAJOR_MAJOR;break;
ffff80000080facd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080fad4:	eb 25                	jmp    ffff80000080fafb <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:325
        case 1:disk=DISK_MAJOR_SLAVE;break;
ffff80000080fad6:	c7 45 e0 01 00 00 00 	mov    DWORD PTR [rbp-0x20],0x1
ffff80000080fadd:	eb 1c                	jmp    ffff80000080fafb <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:326
        case 2:disk=DISK_SLAVE_MAJOR;break;
ffff80000080fadf:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [rbp-0x20],0x2
ffff80000080fae6:	eb 13                	jmp    ffff80000080fafb <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:327
        case 3:disk=DISK_SLAVE_SLAVE;break;
ffff80000080fae8:	c7 45 e0 03 00 00 00 	mov    DWORD PTR [rbp-0x20],0x3
ffff80000080faef:	eb 0a                	jmp    ffff80000080fafb <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:329
        default:
            return -1;
ffff80000080faf1:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080faf6:	e9 c5 01 00 00       	jmp    ffff80000080fcc0 <hd_iterate+0x307>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:332
            break;
        }
        if(chk_result(r[i]))//&&!disk_existent(disk)
ffff80000080fafb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fafe:	48 98                	cdqe   
ffff80000080fb00:	8b 44 85 c0          	mov    eax,DWORD PTR [rbp+rax*4-0x40]
ffff80000080fb04:	89 c7                	mov    edi,eax
ffff80000080fb06:	49 89 df             	mov    r15,rbx
ffff80000080fb09:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff80000080fb10:	ff ff ff 
ffff80000080fb13:	48 01 d8             	add    rax,rbx
ffff80000080fb16:	ff d0                	call   rax
ffff80000080fb18:	85 c0                	test   eax,eax
ffff80000080fb1a:	0f 84 b1 00 00 00    	je     ffff80000080fbd1 <hd_iterate+0x218>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:334
        {
            printf("disk %d checked.\n",i);
ffff80000080fb20:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fb23:	89 c6                	mov    esi,eax
ffff80000080fb25:	48 b8 ba d8 ff ff ff 	movabs rax,0xffffffffffffd8ba
ffff80000080fb2c:	ff ff ff 
ffff80000080fb2f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fb33:	48 89 c7             	mov    rdi,rax
ffff80000080fb36:	49 89 df             	mov    r15,rbx
ffff80000080fb39:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fb3e:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000080fb45:	ff ff ff 
ffff80000080fb48:	48 01 da             	add    rdx,rbx
ffff80000080fb4b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:336
            //新硬盘
            device hd={
ffff80000080fb4d:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
ffff80000080fb54:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fb59:	b9 15 00 00 00       	mov    ecx,0x15
ffff80000080fb5e:	48 89 d7             	mov    rdi,rdx
ffff80000080fb61:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
ffff80000080fb64:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fb67:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
ffff80000080fb6d:	c7 85 18 ff ff ff 01 	mov    DWORD PTR [rbp-0xe8],0x1
ffff80000080fb74:	00 00 00 
ffff80000080fb77:	c7 85 1c ff ff ff 01 	mov    DWORD PTR [rbp-0xe4],0x1
ffff80000080fb7e:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:340
                .type=DEV_TYPE_BLKDEV,
                .stype=DEV_STYPE_HD,
                .slave_dev=disk,
                .start_port=i<2?PORT_DISK_MAJOR:PORT_DISK_SLAVE
ffff80000080fb81:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
ffff80000080fb85:	7f 07                	jg     ffff80000080fb8e <hd_iterate+0x1d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:340 (discriminator 1)
ffff80000080fb87:	b8 f0 01 00 00       	mov    eax,0x1f0
ffff80000080fb8c:	eb 05                	jmp    ffff80000080fb93 <hd_iterate+0x1da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:340 (discriminator 2)
ffff80000080fb8e:	b8 70 01 00 00       	mov    eax,0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:336
            device hd={
ffff80000080fb93:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:342
            };
            disks[i]=reg_device(&hd);
ffff80000080fb99:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff80000080fba0:	48 89 c7             	mov    rdi,rax
ffff80000080fba3:	49 89 df             	mov    r15,rbx
ffff80000080fba6:	48 b8 4a 2b fe ff ff 	movabs rax,0xfffffffffffe2b4a
ffff80000080fbad:	ff ff ff 
ffff80000080fbb0:	48 01 d8             	add    rax,rbx
ffff80000080fbb3:	ff d0                	call   rax
ffff80000080fbb5:	48 ba 08 fe ff ff ff 	movabs rdx,0xfffffffffffffe08
ffff80000080fbbc:	ff ff ff 
ffff80000080fbbf:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080fbc3:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff80000080fbc6:	48 63 c9             	movsxd rcx,ecx
ffff80000080fbc9:	89 04 8a             	mov    DWORD PTR [rdx+rcx*4],eax
ffff80000080fbcc:	e9 e1 00 00 00       	jmp    ffff80000080fcb2 <hd_iterate+0x2f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:343
        }else if(!chk_result(r[i]))//&&disk_existent(disk)
ffff80000080fbd1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fbd4:	48 98                	cdqe   
ffff80000080fbd6:	8b 44 85 c0          	mov    eax,DWORD PTR [rbp+rax*4-0x40]
ffff80000080fbda:	89 c7                	mov    edi,eax
ffff80000080fbdc:	49 89 df             	mov    r15,rbx
ffff80000080fbdf:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff80000080fbe6:	ff ff ff 
ffff80000080fbe9:	48 01 d8             	add    rax,rbx
ffff80000080fbec:	ff d0                	call   rax
ffff80000080fbee:	85 c0                	test   eax,eax
ffff80000080fbf0:	0f 85 bc 00 00 00    	jne    ffff80000080fcb2 <hd_iterate+0x2f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:345
        {
            switch (i)
ffff80000080fbf6:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080fbfa:	74 5c                	je     ffff80000080fc58 <hd_iterate+0x29f>
ffff80000080fbfc:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080fc00:	7f 69                	jg     ffff80000080fc6b <hd_iterate+0x2b2>
ffff80000080fc02:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080fc06:	74 3c                	je     ffff80000080fc44 <hd_iterate+0x28b>
ffff80000080fc08:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080fc0c:	7f 5d                	jg     ffff80000080fc6b <hd_iterate+0x2b2>
ffff80000080fc0e:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff80000080fc12:	74 08                	je     ffff80000080fc1c <hd_iterate+0x263>
ffff80000080fc14:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
ffff80000080fc18:	74 16                	je     ffff80000080fc30 <hd_iterate+0x277>
ffff80000080fc1a:	eb 4f                	jmp    ffff80000080fc6b <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:347
            {
            case 0:name="hd0";break;
ffff80000080fc1c:	48 b8 aa d8 ff ff ff 	movabs rax,0xffffffffffffd8aa
ffff80000080fc23:	ff ff ff 
ffff80000080fc26:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fc2a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080fc2e:	eb 3b                	jmp    ffff80000080fc6b <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:348
            case 1:name="hd1";break;
ffff80000080fc30:	48 b8 ae d8 ff ff ff 	movabs rax,0xffffffffffffd8ae
ffff80000080fc37:	ff ff ff 
ffff80000080fc3a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fc3e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080fc42:	eb 27                	jmp    ffff80000080fc6b <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:349
            case 2:name="hd2";break;
ffff80000080fc44:	48 b8 b2 d8 ff ff ff 	movabs rax,0xffffffffffffd8b2
ffff80000080fc4b:	ff ff ff 
ffff80000080fc4e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fc52:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080fc56:	eb 13                	jmp    ffff80000080fc6b <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:350
            case 3:name="hd3";break;
ffff80000080fc58:	48 b8 b6 d8 ff ff ff 	movabs rax,0xffffffffffffd8b6
ffff80000080fc5f:	ff ff ff 
ffff80000080fc62:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fc66:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080fc6a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:353
            }
            //有硬盘被卸载了
            int devi=sys_find_dev(name);
ffff80000080fc6b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fc6f:	48 89 c7             	mov    rdi,rax
ffff80000080fc72:	49 89 df             	mov    r15,rbx
ffff80000080fc75:	48 b8 42 30 fe ff ff 	movabs rax,0xfffffffffffe3042
ffff80000080fc7c:	ff ff ff 
ffff80000080fc7f:	48 01 d8             	add    rax,rbx
ffff80000080fc82:	ff d0                	call   rax
ffff80000080fc84:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:354
            dispose_device(get_dev(devi));
ffff80000080fc87:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080fc8a:	89 c7                	mov    edi,eax
ffff80000080fc8c:	49 89 df             	mov    r15,rbx
ffff80000080fc8f:	48 b8 a7 39 fe ff ff 	movabs rax,0xfffffffffffe39a7
ffff80000080fc96:	ff ff ff 
ffff80000080fc99:	48 01 d8             	add    rax,rbx
ffff80000080fc9c:	ff d0                	call   rax
ffff80000080fc9e:	89 c7                	mov    edi,eax
ffff80000080fca0:	49 89 df             	mov    r15,rbx
ffff80000080fca3:	48 b8 b8 38 fe ff ff 	movabs rax,0xfffffffffffe38b8
ffff80000080fcaa:	ff ff ff 
ffff80000080fcad:	48 01 d8             	add    rax,rbx
ffff80000080fcb0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:319 (discriminator 2)
    for(int i=0;i<1;i++)
ffff80000080fcb2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:319 (discriminator 1)
ffff80000080fcb6:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff80000080fcba:	0f 8e e7 fd ff ff    	jle    ffff80000080faa7 <hd_iterate+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:358
        }

    }
}
ffff80000080fcc0:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
ffff80000080fcc7:	5b                   	pop    rbx
ffff80000080fcc8:	41 5f                	pop    r15
ffff80000080fcca:	5d                   	pop    rbp
ffff80000080fccb:	c3                   	ret    

ffff80000080fccc <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:361

int async_check_disk(int disk)
{
ffff80000080fccc:	f3 0f 1e fa          	endbr64 
ffff80000080fcd0:	55                   	push   rbp
ffff80000080fcd1:	48 89 e5             	mov    rbp,rsp
ffff80000080fcd4:	41 57                	push   r15
ffff80000080fcd6:	53                   	push   rbx
ffff80000080fcd7:	48 83 ec 20          	sub    rsp,0x20
ffff80000080fcdb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080fcdb <async_check_disk+0xf>
ffff80000080fce2:	49 bb 4d 2c 01 00 00 	movabs r11,0x12c4d
ffff80000080fce9:	00 00 00 
ffff80000080fcec:	4c 01 db             	add    rbx,r11
ffff80000080fcef:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:362
    unsigned short disknr=PORT_DISK_MAJOR;
ffff80000080fcf2:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:363
    unsigned short chkcmd=0xe0;
ffff80000080fcf8:	66 c7 45 ec e0 00    	mov    WORD PTR [rbp-0x14],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:364
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080fcfe:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080fd02:	74 06                	je     ffff80000080fd0a <async_check_disk+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:364 (discriminator 1)
ffff80000080fd04:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080fd08:	75 06                	jne    ffff80000080fd10 <async_check_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:365
        disknr=PORT_DISK_SLAVE;
ffff80000080fd0a:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:366
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
ffff80000080fd10:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080fd14:	74 06                	je     ffff80000080fd1c <async_check_disk+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:366 (discriminator 1)
ffff80000080fd16:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080fd1a:	75 06                	jne    ffff80000080fd22 <async_check_disk+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:367
        chkcmd=0xf0;
ffff80000080fd1c:	66 c7 45 ec f0 00    	mov    WORD PTR [rbp-0x14],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:368
    outb(disknr+2,1);
ffff80000080fd22:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080fd26:	83 c0 02             	add    eax,0x2
ffff80000080fd29:	0f b7 c0             	movzx  eax,ax
ffff80000080fd2c:	be 01 00 00 00       	mov    esi,0x1
ffff80000080fd31:	89 c7                	mov    edi,eax
ffff80000080fd33:	49 89 df             	mov    r15,rbx
ffff80000080fd36:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080fd3d:	ff ff ff 
ffff80000080fd40:	48 01 d8             	add    rax,rbx
ffff80000080fd43:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:369
    outb(disknr+3,0);
ffff80000080fd45:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080fd49:	83 c0 03             	add    eax,0x3
ffff80000080fd4c:	0f b7 c0             	movzx  eax,ax
ffff80000080fd4f:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fd54:	89 c7                	mov    edi,eax
ffff80000080fd56:	49 89 df             	mov    r15,rbx
ffff80000080fd59:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080fd60:	ff ff ff 
ffff80000080fd63:	48 01 d8             	add    rax,rbx
ffff80000080fd66:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:370
    outb(disknr+4,0);
ffff80000080fd68:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080fd6c:	83 c0 04             	add    eax,0x4
ffff80000080fd6f:	0f b7 c0             	movzx  eax,ax
ffff80000080fd72:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fd77:	89 c7                	mov    edi,eax
ffff80000080fd79:	49 89 df             	mov    r15,rbx
ffff80000080fd7c:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080fd83:	ff ff ff 
ffff80000080fd86:	48 01 d8             	add    rax,rbx
ffff80000080fd89:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:371
    outb(disknr+5,0);
ffff80000080fd8b:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080fd8f:	83 c0 05             	add    eax,0x5
ffff80000080fd92:	0f b7 c0             	movzx  eax,ax
ffff80000080fd95:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fd9a:	89 c7                	mov    edi,eax
ffff80000080fd9c:	49 89 df             	mov    r15,rbx
ffff80000080fd9f:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080fda6:	ff ff ff 
ffff80000080fda9:	48 01 d8             	add    rax,rbx
ffff80000080fdac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:372
    outb(disknr+6,chkcmd);//主硬盘
ffff80000080fdae:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffff80000080fdb2:	0f b6 d0             	movzx  edx,al
ffff80000080fdb5:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080fdb9:	83 c0 06             	add    eax,0x6
ffff80000080fdbc:	0f b7 c0             	movzx  eax,ax
ffff80000080fdbf:	89 d6                	mov    esi,edx
ffff80000080fdc1:	89 c7                	mov    edi,eax
ffff80000080fdc3:	49 89 df             	mov    r15,rbx
ffff80000080fdc6:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080fdcd:	ff ff ff 
ffff80000080fdd0:	48 01 d8             	add    rax,rbx
ffff80000080fdd3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:373
    outb(disknr+7,DISK_CMD_CHECK);
ffff80000080fdd5:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080fdd9:	83 c0 07             	add    eax,0x7
ffff80000080fddc:	0f b7 c0             	movzx  eax,ax
ffff80000080fddf:	be 90 00 00 00       	mov    esi,0x90
ffff80000080fde4:	89 c7                	mov    edi,eax
ffff80000080fde6:	49 89 df             	mov    r15,rbx
ffff80000080fde9:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000080fdf0:	ff ff ff 
ffff80000080fdf3:	48 01 d8             	add    rax,rbx
ffff80000080fdf6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:384
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
ffff80000080fdf8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:385
}
ffff80000080fdfd:	48 83 c4 20          	add    rsp,0x20
ffff80000080fe01:	5b                   	pop    rbx
ffff80000080fe02:	41 5f                	pop    r15
ffff80000080fe04:	5d                   	pop    rbp
ffff80000080fe05:	c3                   	ret    

ffff80000080fe06 <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:389

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(driver_args *args)
{
ffff80000080fe06:	f3 0f 1e fa          	endbr64 
ffff80000080fe0a:	55                   	push   rbp
ffff80000080fe0b:	48 89 e5             	mov    rbp,rsp
ffff80000080fe0e:	41 57                	push   r15
ffff80000080fe10:	53                   	push   rbx
ffff80000080fe11:	48 83 ec 20          	sub    rsp,0x20
ffff80000080fe15:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080fe15 <hd_do_req+0xf>
ffff80000080fe1c:	49 bb 13 2b 01 00 00 	movabs r11,0x12b13
ffff80000080fe23:	00 00 00 
ffff80000080fe26:	4c 01 db             	add    rbx,r11
ffff80000080fe29:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:390
    int diski=0;
ffff80000080fe2d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:391
    for(;disks[diski]!=args->dev;diski++);
ffff80000080fe34:	eb 04                	jmp    ffff80000080fe3a <hd_do_req+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:391 (discriminator 2)
ffff80000080fe36:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:391 (discriminator 1)
ffff80000080fe3a:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080fe41:	ff ff ff 
ffff80000080fe44:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080fe48:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080fe4b:	48 63 d2             	movsxd rdx,edx
ffff80000080fe4e:	8b 14 90             	mov    edx,DWORD PTR [rax+rdx*4]
ffff80000080fe51:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fe55:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
ffff80000080fe5b:	39 c2                	cmp    edx,eax
ffff80000080fe5d:	75 d7                	jne    ffff80000080fe36 <hd_do_req+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:392
    switch (args->cmd)
ffff80000080fe5f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fe63:	8b 80 a8 00 00 00    	mov    eax,DWORD PTR [rax+0xa8]
ffff80000080fe69:	83 f8 04             	cmp    eax,0x4
ffff80000080fe6c:	0f 84 8c 00 00 00    	je     ffff80000080fefe <hd_do_req+0xf8>
ffff80000080fe72:	83 f8 04             	cmp    eax,0x4
ffff80000080fe75:	0f 8f bd 00 00 00    	jg     ffff80000080ff38 <hd_do_req+0x132>
ffff80000080fe7b:	83 f8 02             	cmp    eax,0x2
ffff80000080fe7e:	74 0a                	je     ffff80000080fe8a <hd_do_req+0x84>
ffff80000080fe80:	83 f8 03             	cmp    eax,0x3
ffff80000080fe83:	74 3f                	je     ffff80000080fec4 <hd_do_req+0xbe>
ffff80000080fe85:	e9 ae 00 00 00       	jmp    ffff80000080ff38 <hd_do_req+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:395
    {
    case DRVF_READ:
        request(diski,DISKREQ_READ,args->lba,args->sec_c,args->dist_addr);
ffff80000080fe8a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fe8e:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080fe91:	48 98                	cdqe   
ffff80000080fe93:	48 89 c6             	mov    rsi,rax
ffff80000080fe96:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fe9a:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffff80000080fe9d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fea1:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080fea3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fea6:	49 89 f0             	mov    r8,rsi
ffff80000080fea9:	be 00 00 00 00       	mov    esi,0x0
ffff80000080feae:	89 c7                	mov    edi,eax
ffff80000080feb0:	49 89 df             	mov    r15,rbx
ffff80000080feb3:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000080feba:	ff ff ff 
ffff80000080febd:	48 01 d8             	add    rax,rbx
ffff80000080fec0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:396
        break;
ffff80000080fec2:	eb 7b                	jmp    ffff80000080ff3f <hd_do_req+0x139>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:398
    case DRVF_WRITE:
        request(diski,DISKREQ_WRITE,args->lba,args->sec_c,args->src_addr);
ffff80000080fec4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fec8:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080fecb:	48 98                	cdqe   
ffff80000080fecd:	48 89 c6             	mov    rsi,rax
ffff80000080fed0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fed4:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffff80000080fed7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fedb:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080fedd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fee0:	49 89 f0             	mov    r8,rsi
ffff80000080fee3:	be 01 00 00 00       	mov    esi,0x1
ffff80000080fee8:	89 c7                	mov    edi,eax
ffff80000080feea:	49 89 df             	mov    r15,rbx
ffff80000080feed:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000080fef4:	ff ff ff 
ffff80000080fef7:	48 01 d8             	add    rax,rbx
ffff80000080fefa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:399
        break;
ffff80000080fefc:	eb 41                	jmp    ffff80000080ff3f <hd_do_req+0x139>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:401
    case DRVF_CHK:
        request(diski,DISKREQ_CHECK,args->lba,args->sec_c,args->dist_addr);
ffff80000080fefe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff02:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080ff05:	48 98                	cdqe   
ffff80000080ff07:	48 89 c6             	mov    rsi,rax
ffff80000080ff0a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff0e:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffff80000080ff11:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff15:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080ff17:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ff1a:	49 89 f0             	mov    r8,rsi
ffff80000080ff1d:	be 02 00 00 00       	mov    esi,0x2
ffff80000080ff22:	89 c7                	mov    edi,eax
ffff80000080ff24:	49 89 df             	mov    r15,rbx
ffff80000080ff27:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000080ff2e:	ff ff ff 
ffff80000080ff31:	48 01 d8             	add    rax,rbx
ffff80000080ff34:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:402
        break;
ffff80000080ff36:	eb 07                	jmp    ffff80000080ff3f <hd_do_req+0x139>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:403
    default:return -1;
ffff80000080ff38:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080ff3d:	eb 28                	jmp    ffff80000080ff67 <hd_do_req+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:405
    }
    args->stat=REQ_STAT_WORKING;
ffff80000080ff3f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff43:	c7 80 ac 00 00 00 02 	mov    DWORD PTR [rax+0xac],0x2
ffff80000080ff4a:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:406
    running_devman_req=args;
ffff80000080ff4d:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff80000080ff54:	ff ff ff 
ffff80000080ff57:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ff5b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ff5f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:407
    return 0;
ffff80000080ff62:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:408
ffff80000080ff67:	48 83 c4 20          	add    rsp,0x20
ffff80000080ff6b:	5b                   	pop    rbx
ffff80000080ff6c:	41 5f                	pop    r15
ffff80000080ff6e:	5d                   	pop    rbp
ffff80000080ff6f:	c3                   	ret    

ffff80000080ff70 <disk_int_handler>:
disk_int_handler():
ffff80000080ff70:	e8 f9 a0 ff ff       	call   ffff80000080a06e <eoi>
ffff80000080ff75:	e8 e3 e9 ff ff       	call   ffff80000080e95d <disk_int_handler_c>
ffff80000080ff7a:	48 cf                	iretq  

ffff80000080ff7c <read_disk_asm>:
read_disk_asm():
ffff80000080ff7c:	55                   	push   rbp
ffff80000080ff7d:	48 89 e5             	mov    rbp,rsp
ffff80000080ff80:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080ff84:	31 c9                	xor    ecx,ecx
ffff80000080ff86:	48 89 f8             	mov    rax,rdi
ffff80000080ff89:	48 89 f1             	mov    rcx,rsi
ffff80000080ff8c:	48 89 d3             	mov    rbx,rdx
ffff80000080ff8f:	48 89 c6             	mov    rsi,rax
ffff80000080ff92:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080ff96:	88 c8                	mov    al,cl
ffff80000080ff98:	ee                   	out    dx,al
ffff80000080ff99:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080ff9d:	89 f0                	mov    eax,esi
ffff80000080ff9f:	ee                   	out    dx,al
ffff80000080ffa0:	66 ff c2             	inc    dx
ffff80000080ffa3:	c1 e8 08             	shr    eax,0x8
ffff80000080ffa6:	ee                   	out    dx,al
ffff80000080ffa7:	66 ff c2             	inc    dx
ffff80000080ffaa:	c1 e8 08             	shr    eax,0x8
ffff80000080ffad:	ee                   	out    dx,al
ffff80000080ffae:	66 ff c2             	inc    dx
ffff80000080ffb1:	66 c1 e8 08          	shr    ax,0x8
ffff80000080ffb5:	24 0f                	and    al,0xf
ffff80000080ffb7:	0c e0                	or     al,0xe0
ffff80000080ffb9:	ee                   	out    dx,al
ffff80000080ffba:	66 ff c2             	inc    dx
ffff80000080ffbd:	b0 20                	mov    al,0x20
ffff80000080ffbf:	ee                   	out    dx,al

ffff80000080ffc0 <read_disk_asm.wait>:
read_disk_asm.wait():
ffff80000080ffc0:	90                   	nop
ffff80000080ffc1:	ec                   	in     al,dx
ffff80000080ffc2:	24 88                	and    al,0x88
ffff80000080ffc4:	3c 08                	cmp    al,0x8
ffff80000080ffc6:	75 f8                	jne    ffff80000080ffc0 <read_disk_asm.wait>
ffff80000080ffc8:	66 89 d7             	mov    di,dx
ffff80000080ffcb:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080ffcf:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080ffd3 <read_disk_asm.read>:
read_disk_asm.read():
ffff80000080ffd3:	66 ed                	in     ax,dx
ffff80000080ffd5:	66 89 03             	mov    WORD PTR [rbx],ax
ffff80000080ffd8:	48 83 c3 02          	add    rbx,0x2
ffff80000080ffdc:	e2 f5                	loop   ffff80000080ffd3 <read_disk_asm.read>
ffff80000080ffde:	c9                   	leave  
ffff80000080ffdf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ffe4:	c3                   	ret    

ffff80000080ffe5 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
ffff80000080ffe5:	66 ba f1 01          	mov    dx,0x1f1
ffff80000080ffe9:	48 31 c0             	xor    rax,rax
ffff80000080ffec:	66 ed                	in     ax,dx
ffff80000080ffee:	c9                   	leave  
ffff80000080ffef:	c3                   	ret    

ffff80000080fff0 <write_disk_asm>:
write_disk_asm():
ffff80000080fff0:	55                   	push   rbp
ffff80000080fff1:	48 89 e5             	mov    rbp,rsp
ffff80000080fff4:	48 89 f8             	mov    rax,rdi
ffff80000080fff7:	48 89 f1             	mov    rcx,rsi
ffff80000080fffa:	48 89 d3             	mov    rbx,rdx
ffff80000080fffd:	50                   	push   rax
ffff80000080fffe:	66 ba f2 01          	mov    dx,0x1f2
ffff800000810002:	88 c8                	mov    al,cl
ffff800000810004:	ee                   	out    dx,al
ffff800000810005:	58                   	pop    rax
ffff800000810006:	66 ba f3 01          	mov    dx,0x1f3
ffff80000081000a:	ee                   	out    dx,al
ffff80000081000b:	c1 e8 08             	shr    eax,0x8
ffff80000081000e:	66 ba f4 01          	mov    dx,0x1f4
ffff800000810012:	ee                   	out    dx,al
ffff800000810013:	c1 e8 08             	shr    eax,0x8
ffff800000810016:	66 ba f5 01          	mov    dx,0x1f5
ffff80000081001a:	ee                   	out    dx,al
ffff80000081001b:	c1 e8 08             	shr    eax,0x8
ffff80000081001e:	24 0f                	and    al,0xf
ffff800000810020:	0c e0                	or     al,0xe0
ffff800000810022:	66 ba f6 01          	mov    dx,0x1f6
ffff800000810026:	ee                   	out    dx,al
ffff800000810027:	66 ba f7 01          	mov    dx,0x1f7
ffff80000081002b:	b0 30                	mov    al,0x30
ffff80000081002d:	ee                   	out    dx,al

ffff80000081002e <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
ffff80000081002e:	90                   	nop
ffff80000081002f:	ec                   	in     al,dx
ffff800000810030:	24 88                	and    al,0x88
ffff800000810032:	3c 08                	cmp    al,0x8
ffff800000810034:	75 f8                	jne    ffff80000081002e <write_disk_asm.not_ready2>
ffff800000810036:	48 c1 e1 08          	shl    rcx,0x8
ffff80000081003a:	66 ba f0 01          	mov    dx,0x1f0

ffff80000081003e <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
ffff80000081003e:	66 8b 03             	mov    ax,WORD PTR [rbx]
ffff800000810041:	66 ef                	out    dx,ax
ffff800000810043:	83 c3 02             	add    ebx,0x2
ffff800000810046:	e2 f6                	loop   ffff80000081003e <write_disk_asm.go_on_write>
ffff800000810048:	c9                   	leave  
ffff800000810049:	c3                   	ret    

ffff80000081004a <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:12
#include "memory.h"
#include "proc.h"
#include "devman.h"

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
ffff80000081004a:	f3 0f 1e fa          	endbr64 
ffff80000081004e:	55                   	push   rbp
ffff80000081004f:	48 89 e5             	mov    rbp,rsp
ffff800000810052:	41 57                	push   r15
ffff800000810054:	53                   	push   rbx
ffff800000810055:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff80000081005c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081005c <DISK1_FAT32_read_FAT_Entry+0x12>
ffff800000810063:	49 bb cc 28 01 00 00 	movabs r11,0x128cc
ffff80000081006a:	00 00 00 
ffff80000081006d:	4c 01 db             	add    rbx,r11
ffff800000810070:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
ffff800000810077:	89 b5 d4 fd ff ff    	mov    DWORD PTR [rbp-0x22c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:14
	unsigned int buf[128];
	memset(buf,0,512);
ffff80000081007d:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000810084:	ba 00 02 00 00       	mov    edx,0x200
ffff800000810089:	be 00 00 00 00       	mov    esi,0x0
ffff80000081008e:	48 89 c7             	mov    rdi,rax
ffff800000810091:	49 89 df             	mov    r15,rbx
ffff800000810094:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff80000081009b:	ff ff ff 
ffff80000081009e:	48 01 d8             	add    rax,rbx
ffff8000008100a1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:15
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + (fat_entry >> 7),1,(unsigned char *)buf);
ffff8000008100a3:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff8000008100aa:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008100ae:	89 c2                	mov    edx,eax
ffff8000008100b0:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff8000008100b6:	c1 e8 07             	shr    eax,0x7
ffff8000008100b9:	01 d0                	add    eax,edx
ffff8000008100bb:	89 c2                	mov    edx,eax
ffff8000008100bd:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff8000008100c4:	49 89 c0             	mov    r8,rax
ffff8000008100c7:	b9 01 00 00 00       	mov    ecx,0x1
ffff8000008100cc:	be 00 00 00 00       	mov    esi,0x0
ffff8000008100d1:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008100d6:	49 89 df             	mov    r15,rbx
ffff8000008100d9:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff8000008100e0:	ff ff ff 
ffff8000008100e3:	48 01 d8             	add    rax,rbx
ffff8000008100e6:	ff d0                	call   rax
ffff8000008100e8:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:16
    chk_result(r);
ffff8000008100eb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008100ee:	89 c7                	mov    edi,eax
ffff8000008100f0:	49 89 df             	mov    r15,rbx
ffff8000008100f3:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff8000008100fa:	ff ff ff 
ffff8000008100fd:	48 01 d8             	add    rax,rbx
ffff800000810100:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%#010x\n",fat_entry,buf[fat_entry & 0x7f]);
ffff800000810102:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff800000810108:	83 e0 7f             	and    eax,0x7f
ffff80000081010b:	89 c0                	mov    eax,eax
ffff80000081010d:	8b 94 85 e0 fd ff ff 	mov    edx,DWORD PTR [rbp+rax*4-0x220]
ffff800000810114:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000081011a:	89 c6                	mov    esi,eax
ffff80000081011c:	48 b8 d0 d8 ff ff ff 	movabs rax,0xffffffffffffd8d0
ffff800000810123:	ff ff ff 
ffff800000810126:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081012a:	48 89 c7             	mov    rdi,rax
ffff80000081012d:	49 89 df             	mov    r15,rbx
ffff800000810130:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810135:	48 b9 94 ee fd ff ff 	movabs rcx,0xfffffffffffdee94
ffff80000081013c:	ff ff ff 
ffff80000081013f:	48 01 d9             	add    rcx,rbx
ffff800000810142:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:18
	return buf[fat_entry & 0x7f] & 0x0fffffff;
ffff800000810144:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000081014a:	83 e0 7f             	and    eax,0x7f
ffff80000081014d:	89 c0                	mov    eax,eax
ffff80000081014f:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff800000810156:	25 ff ff ff 0f       	and    eax,0xfffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
}
ffff80000081015b:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff800000810162:	5b                   	pop    rbx
ffff800000810163:	41 5f                	pop    r15
ffff800000810165:	5d                   	pop    rbp
ffff800000810166:	c3                   	ret    

ffff800000810167 <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:23


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
ffff800000810167:	f3 0f 1e fa          	endbr64 
ffff80000081016b:	55                   	push   rbp
ffff80000081016c:	48 89 e5             	mov    rbp,rsp
ffff80000081016f:	41 57                	push   r15
ffff800000810171:	53                   	push   rbx
ffff800000810172:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff800000810179:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810179 <DISK1_FAT32_write_FAT_Entry+0x12>
ffff800000810180:	49 bb af 27 01 00 00 	movabs r11,0x127af
ffff800000810187:	00 00 00 
ffff80000081018a:	4c 01 db             	add    rbx,r11
ffff80000081018d:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
ffff800000810194:	89 b5 d4 fd ff ff    	mov    DWORD PTR [rbp-0x22c],esi
ffff80000081019a:	89 95 d0 fd ff ff    	mov    DWORD PTR [rbp-0x230],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:27
	unsigned int buf[128];
	int i;

	memset(buf,0,512);
ffff8000008101a0:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff8000008101a7:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008101ac:	be 00 00 00 00       	mov    esi,0x0
ffff8000008101b1:	48 89 c7             	mov    rdi,rax
ffff8000008101b4:	49 89 df             	mov    r15,rbx
ffff8000008101b7:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff8000008101be:	ff ff ff 
ffff8000008101c1:	48 01 d8             	add    rax,rbx
ffff8000008101c4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:28
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + (fat_entry >> 7),1,(unsigned char *)buf);
ffff8000008101c6:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff8000008101cd:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008101d1:	89 c2                	mov    edx,eax
ffff8000008101d3:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff8000008101d9:	c1 e8 07             	shr    eax,0x7
ffff8000008101dc:	01 d0                	add    eax,edx
ffff8000008101de:	89 c2                	mov    edx,eax
ffff8000008101e0:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff8000008101e7:	49 89 c0             	mov    r8,rax
ffff8000008101ea:	b9 01 00 00 00       	mov    ecx,0x1
ffff8000008101ef:	be 00 00 00 00       	mov    esi,0x0
ffff8000008101f4:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008101f9:	49 89 df             	mov    r15,rbx
ffff8000008101fc:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff800000810203:	ff ff ff 
ffff800000810206:	48 01 d8             	add    rax,rbx
ffff800000810209:	ff d0                	call   rax
ffff80000081020b:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:29
    chk_result(r);
ffff80000081020e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000810211:	89 c7                	mov    edi,eax
ffff800000810213:	49 89 df             	mov    r15,rbx
ffff800000810216:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff80000081021d:	ff ff ff 
ffff800000810220:	48 01 d8             	add    rax,rbx
ffff800000810223:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
ffff800000810225:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000081022b:	83 e0 7f             	and    eax,0x7f
ffff80000081022e:	89 c0                	mov    eax,eax
ffff800000810230:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff800000810237:	25 00 00 00 f0       	and    eax,0xf0000000
ffff80000081023c:	89 c6                	mov    esi,eax
ffff80000081023e:	8b 85 d0 fd ff ff    	mov    eax,DWORD PTR [rbp-0x230]
ffff800000810244:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff800000810249:	89 c1                	mov    ecx,eax
ffff80000081024b:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff800000810251:	83 e0 7f             	and    eax,0x7f
ffff800000810254:	89 c2                	mov    edx,eax
ffff800000810256:	89 f0                	mov    eax,esi
ffff800000810258:	09 c8                	or     eax,ecx
ffff80000081025a:	89 d2                	mov    edx,edx
ffff80000081025c:	89 84 95 e0 fd ff ff 	mov    DWORD PTR [rbp+rdx*4-0x220],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32

	for(i = 0;i < fsbi->NumFATs;i++){
ffff800000810263:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000081026a:	eb 7b                	jmp    ffff8000008102e7 <DISK1_FAT32_write_FAT_Entry+0x180>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33 (discriminator 3)
        int r1=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7),1,(unsigned char *)buf);
ffff80000081026c:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff800000810273:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000810277:	89 c1                	mov    ecx,eax
ffff800000810279:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff800000810280:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000810284:	89 c2                	mov    edx,eax
ffff800000810286:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810289:	48 98                	cdqe   
ffff80000081028b:	0f af c2             	imul   eax,edx
ffff80000081028e:	8d 14 01             	lea    edx,[rcx+rax*1]
ffff800000810291:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff800000810297:	c1 e8 07             	shr    eax,0x7
ffff80000081029a:	01 d0                	add    eax,edx
ffff80000081029c:	89 c2                	mov    edx,eax
ffff80000081029e:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff8000008102a5:	49 89 c0             	mov    r8,rax
ffff8000008102a8:	b9 01 00 00 00       	mov    ecx,0x1
ffff8000008102ad:	be 01 00 00 00       	mov    esi,0x1
ffff8000008102b2:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008102b7:	49 89 df             	mov    r15,rbx
ffff8000008102ba:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff8000008102c1:	ff ff ff 
ffff8000008102c4:	48 01 d8             	add    rax,rbx
ffff8000008102c7:	ff d0                	call   rax
ffff8000008102c9:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 3)
        chk_result(r1);
ffff8000008102cc:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008102cf:	89 c7                	mov    edi,eax
ffff8000008102d1:	49 89 df             	mov    r15,rbx
ffff8000008102d4:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff8000008102db:	ff ff ff 
ffff8000008102de:	48 01 d8             	add    rax,rbx
ffff8000008102e1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
ffff8000008102e3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32 (discriminator 1)
ffff8000008102e7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008102ea:	48 63 d0             	movsxd rdx,eax
ffff8000008102ed:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff8000008102f4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008102f8:	48 39 c2             	cmp    rdx,rax
ffff8000008102fb:	0f 82 6b ff ff ff    	jb     ffff80000081026c <DISK1_FAT32_write_FAT_Entry+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:36
    }
	return 1;
ffff800000810301:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:37
}
ffff800000810306:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff80000081030d:	5b                   	pop    rbx
ffff80000081030e:	41 5f                	pop    r15
ffff800000810310:	5d                   	pop    rbp
ffff800000810311:	c3                   	ret    

ffff800000810312 <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:41


long FAT32_open(struct index_node * inode,struct file * filp)
{
ffff800000810312:	f3 0f 1e fa          	endbr64 
ffff800000810316:	55                   	push   rbp
ffff800000810317:	48 89 e5             	mov    rbp,rsp
ffff80000081031a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081031a <FAT32_open+0x8>
ffff800000810321:	49 bb 0e 26 01 00 00 	movabs r11,0x1260e
ffff800000810328:	00 00 00 
ffff80000081032b:	4c 01 d8             	add    rax,r11
ffff80000081032e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810332:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:42
	return 1;
ffff800000810336:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:43
}
ffff80000081033b:	5d                   	pop    rbp
ffff80000081033c:	c3                   	ret    

ffff80000081033d <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:47


long FAT32_close(struct index_node * inode,struct file * filp)
{
ffff80000081033d:	f3 0f 1e fa          	endbr64 
ffff800000810341:	55                   	push   rbp
ffff800000810342:	48 89 e5             	mov    rbp,rsp
ffff800000810345:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810345 <FAT32_close+0x8>
ffff80000081034c:	49 bb e3 25 01 00 00 	movabs r11,0x125e3
ffff800000810353:	00 00 00 
ffff800000810356:	4c 01 d8             	add    rax,r11
ffff800000810359:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081035d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:48
	return 1;
ffff800000810361:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:49
}
ffff800000810366:	5d                   	pop    rbp
ffff800000810367:	c3                   	ret    

ffff800000810368 <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:53


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000810368:	f3 0f 1e fa          	endbr64 
ffff80000081036c:	55                   	push   rbp
ffff80000081036d:	48 89 e5             	mov    rbp,rsp
ffff800000810370:	41 57                	push   r15
ffff800000810372:	53                   	push   rbx
ffff800000810373:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000810377:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810377 <FAT32_read+0xf>
ffff80000081037e:	49 bb b1 25 01 00 00 	movabs r11,0x125b1
ffff800000810385:	00 00 00 
ffff800000810388:	4c 01 db             	add    rbx,r11
ffff80000081038b:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000081038f:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff800000810393:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffff80000081039a:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:54
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff8000008103a1:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008103a5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008103a9:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008103ad:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008103b1:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:55
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff8000008103b5:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008103b9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008103bd:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008103c1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008103c5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008103c9:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:57

	unsigned long cluster = finode->first_cluster;
ffff8000008103cd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008103d1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008103d4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:58
	unsigned long sector = 0;
ffff8000008103d8:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff8000008103df:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:59
	int i,length = 0;
ffff8000008103e0:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60
	long retval = 0;
ffff8000008103e7:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff8000008103ee:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	int index = *position / fsbi->bytes_per_cluster;
ffff8000008103ef:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008103f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008103f9:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008103fd:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff800000810401:	48 99                	cqo    
ffff800000810403:	48 f7 fe             	idiv   rsi
ffff800000810406:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	long offset = *position % fsbi->bytes_per_cluster;
ffff800000810409:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810410:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810413:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000810417:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081041b:	48 99                	cqo    
ffff80000081041d:	48 f7 f9             	idiv   rcx
ffff800000810420:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:63
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000810424:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810428:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081042c:	be 00 00 00 00       	mov    esi,0x0
ffff800000810431:	48 89 c7             	mov    rdi,rax
ffff800000810434:	49 89 df             	mov    r15,rbx
ffff800000810437:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081043c:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000810443:	ff ff ff 
ffff800000810446:	48 01 da             	add    rdx,rbx
ffff800000810449:	ff d2                	call   rdx
ffff80000081044b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65

	if(!cluster)
ffff80000081044f:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000810454:	75 0c                	jne    ffff800000810462 <FAT32_read+0xfa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:66
		return -EFAULT;
ffff800000810456:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000081045d:	e9 8c 02 00 00       	jmp    ffff8000008106ee <FAT32_read+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67
	for(i = 0;i < index;i++)
ffff800000810462:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000810469:	eb 2b                	jmp    ffff800000810496 <FAT32_read+0x12e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000081046b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081046f:	89 c2                	mov    edx,eax
ffff800000810471:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810475:	89 d6                	mov    esi,edx
ffff800000810477:	48 89 c7             	mov    rdi,rax
ffff80000081047a:	49 89 df             	mov    r15,rbx
ffff80000081047d:	48 b8 22 d7 fe ff ff 	movabs rax,0xfffffffffffed722
ffff800000810484:	ff ff ff 
ffff800000810487:	48 01 d8             	add    rax,rbx
ffff80000081048a:	ff d0                	call   rax
ffff80000081048c:	89 c0                	mov    eax,eax
ffff80000081048e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67 (discriminator 3)
	for(i = 0;i < index;i++)
ffff800000810492:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67 (discriminator 1)
ffff800000810496:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810499:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000081049c:	7c cd                	jl     ffff80000081046b <FAT32_read+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70

	if(*position + count > filp->dentry->dir_inode->file_size)
ffff80000081049e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008104a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008104a8:	48 89 c2             	mov    rdx,rax
ffff8000008104ab:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008104b2:	48 01 c2             	add    rdx,rax
ffff8000008104b5:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008104b9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008104bd:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008104c1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008104c4:	48 39 c2             	cmp    rdx,rax
ffff8000008104c7:	76 35                	jbe    ffff8000008104fe <FAT32_read+0x196>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:71
		index = count = filp->dentry->dir_inode->file_size - *position;
ffff8000008104c9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008104cd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008104d1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008104d5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008104d8:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008104df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008104e2:	48 89 c1             	mov    rcx,rax
ffff8000008104e5:	48 89 d0             	mov    rax,rdx
ffff8000008104e8:	48 29 c8             	sub    rax,rcx
ffff8000008104eb:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff8000008104f2:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008104f9:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff8000008104fc:	eb 0a                	jmp    ffff800000810508 <FAT32_read+0x1a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73
	else
		index = count;
ffff8000008104fe:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810505:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:79

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
ffff800000810508:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081050c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810510:	89 c2                	mov    edx,eax
ffff800000810512:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810516:	be 00 00 00 00       	mov    esi,0x0
ffff80000081051b:	48 89 c7             	mov    rdi,rax
ffff80000081051e:	49 89 df             	mov    r15,rbx
ffff800000810521:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000810528:	ff ff ff 
ffff80000081052b:	48 01 d8             	add    rax,rbx
ffff80000081052e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:80
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000810530:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810534:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000810538:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081053c:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000810540:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810544:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810548:	48 0f af c2          	imul   rax,rdx
ffff80000081054c:	48 01 c8             	add    rax,rcx
ffff80000081054f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:81
        int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
ffff800000810553:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810557:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081055b:	89 c1                	mov    ecx,eax
ffff80000081055d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810561:	89 c2                	mov    edx,eax
ffff800000810563:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810567:	49 89 c0             	mov    r8,rax
ffff80000081056a:	be 00 00 00 00       	mov    esi,0x0
ffff80000081056f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810574:	49 89 df             	mov    r15,rbx
ffff800000810577:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000081057e:	ff ff ff 
ffff800000810581:	48 01 d8             	add    rax,rbx
ffff800000810584:	ff d0                	call   rax
ffff800000810586:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:82
		if(!chk_result(r))
ffff800000810589:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000081058c:	89 c7                	mov    edi,eax
ffff80000081058e:	49 89 df             	mov    r15,rbx
ffff800000810591:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff800000810598:	ff ff ff 
ffff80000081059b:	48 01 d8             	add    rax,rbx
ffff80000081059e:	ff d0                	call   rax
ffff8000008105a0:	85 c0                	test   eax,eax
ffff8000008105a2:	75 35                	jne    ffff8000008105d9 <FAT32_read+0x271>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:84
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
ffff8000008105a4:	48 b8 00 d9 ff ff ff 	movabs rax,0xffffffffffffd900
ffff8000008105ab:	ff ff ff 
ffff8000008105ae:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008105b2:	48 89 c7             	mov    rdi,rax
ffff8000008105b5:	49 89 df             	mov    r15,rbx
ffff8000008105b8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008105bd:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff8000008105c4:	ff ff ff 
ffff8000008105c7:	48 01 da             	add    rdx,rbx
ffff8000008105ca:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:85
			retval = -EIO;
ffff8000008105cc:	48 c7 45 d8 e3 ff ff 	mov    QWORD PTR [rbp-0x28],0xffffffffffffffe3
ffff8000008105d3:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86
			break;
ffff8000008105d4:	e9 e7 00 00 00       	jmp    ffff8000008106c0 <FAT32_read+0x358>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:89
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff8000008105d9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008105dc:	48 63 d0             	movsxd rdx,eax
ffff8000008105df:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008105e3:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008105e7:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff8000008105eb:	48 39 c2             	cmp    rdx,rax
ffff8000008105ee:	48 0f 4e c2          	cmovle rax,rdx
ffff8000008105f2:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:91

		if((unsigned long)buf < MAX_TASKS)
ffff8000008105f5:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008105f9:	48 83 f8 1f          	cmp    rax,0x1f
ffff8000008105fd:	77 2c                	ja     ffff80000081062b <FAT32_read+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:92
			memcpy(buffer + offset,buf,length);
ffff8000008105ff:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000810602:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff800000810606:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000081060a:	48 01 c1             	add    rcx,rax
ffff80000081060d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000810611:	48 89 c6             	mov    rsi,rax
ffff800000810614:	48 89 cf             	mov    rdi,rcx
ffff800000810617:	49 89 df             	mov    r15,rbx
ffff80000081061a:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000810621:	ff ff ff 
ffff800000810624:	48 01 d8             	add    rax,rbx
ffff800000810627:	ff d0                	call   rax
ffff800000810629:	eb 2a                	jmp    ffff800000810655 <FAT32_read+0x2ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:94
		else
			memcpy(buffer + offset,buf,length);
ffff80000081062b:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000081062e:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff800000810632:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810636:	48 01 c1             	add    rcx,rax
ffff800000810639:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000081063d:	48 89 c6             	mov    rsi,rax
ffff800000810640:	48 89 cf             	mov    rdi,rcx
ffff800000810643:	49 89 df             	mov    r15,rbx
ffff800000810646:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff80000081064d:	ff ff ff 
ffff800000810650:	48 01 d8             	add    rax,rbx
ffff800000810653:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:96

		index -= length;
ffff800000810655:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000810658:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:97
		buf += length;
ffff80000081065b:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000081065e:	48 98                	cdqe   
ffff800000810660:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98
		offset -= offset;
ffff800000810664:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000081066b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:99
		*position += length;
ffff80000081066c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810673:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810676:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000810679:	48 98                	cdqe   
ffff80000081067b:	48 01 c2             	add    rdx,rax
ffff80000081067e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810685:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
ffff800000810688:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000081068c:	74 32                	je     ffff8000008106c0 <FAT32_read+0x358>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100 (discriminator 1)
ffff80000081068e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810692:	89 c2                	mov    edx,eax
ffff800000810694:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810698:	89 d6                	mov    esi,edx
ffff80000081069a:	48 89 c7             	mov    rdi,rax
ffff80000081069d:	49 89 df             	mov    r15,rbx
ffff8000008106a0:	48 b8 22 d7 fe ff ff 	movabs rax,0xfffffffffffed722
ffff8000008106a7:	ff ff ff 
ffff8000008106aa:	48 01 d8             	add    rax,rbx
ffff8000008106ad:	ff d0                	call   rax
ffff8000008106af:	89 c0                	mov    eax,eax
ffff8000008106b1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff8000008106b5:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff8000008106ba:	0f 85 48 fe ff ff    	jne    ffff800000810508 <FAT32_read+0x1a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102

    kmfree(buffer);
ffff8000008106c0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008106c4:	48 89 c7             	mov    rdi,rax
ffff8000008106c7:	49 89 df             	mov    r15,rbx
ffff8000008106ca:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff8000008106d1:	ff ff ff 
ffff8000008106d4:	48 01 d8             	add    rax,rbx
ffff8000008106d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:103
	if(!index)
ffff8000008106d9:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff8000008106dd:	75 0b                	jne    ffff8000008106ea <FAT32_read+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104
		retval = count;
ffff8000008106df:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008106e6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
	return retval;
ffff8000008106ea:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
}
ffff8000008106ee:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff8000008106f2:	5b                   	pop    rbx
ffff8000008106f3:	41 5f                	pop    r15
ffff8000008106f5:	5d                   	pop    rbp
ffff8000008106f6:	c3                   	ret    

ffff8000008106f7 <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:110


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
ffff8000008106f7:	f3 0f 1e fa          	endbr64 
ffff8000008106fb:	55                   	push   rbp
ffff8000008106fc:	48 89 e5             	mov    rbp,rsp
ffff8000008106ff:	41 57                	push   r15
ffff800000810701:	53                   	push   rbx
ffff800000810702:	48 81 ec 30 02 00 00 	sub    rsp,0x230
ffff800000810709:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810709 <FAT32_find_available_cluster+0x12>
ffff800000810710:	49 bb 1f 22 01 00 00 	movabs r11,0x1221f
ffff800000810717:	00 00 00 
ffff80000081071a:	4c 01 db             	add    rbx,r11
ffff80000081071d:	48 89 bd c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:113
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
ffff800000810724:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffff80000081072b:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000081072f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
ffff800000810733:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000081073a:	e9 a5 00 00 00       	jmp    ffff8000008107e4 <FAT32_find_available_cluster+0xed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120
	{
		memset(buf,0,512);
ffff80000081073f:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
ffff800000810746:	ba 00 02 00 00       	mov    edx,0x200
ffff80000081074b:	be 00 00 00 00       	mov    esi,0x0
ffff800000810750:	48 89 c7             	mov    rdi,rax
ffff800000810753:	49 89 df             	mov    r15,rbx
ffff800000810756:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff80000081075d:	ff ff ff 
ffff800000810760:	48 01 d8             	add    rax,rbx
ffff800000810763:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:121
		int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + i,1,(unsigned char *)buf);
ffff800000810765:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffff80000081076c:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000810770:	89 c2                	mov    edx,eax
ffff800000810772:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810775:	01 d0                	add    eax,edx
ffff800000810777:	89 c2                	mov    edx,eax
ffff800000810779:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
ffff800000810780:	49 89 c0             	mov    r8,rax
ffff800000810783:	b9 01 00 00 00       	mov    ecx,0x1
ffff800000810788:	be 00 00 00 00       	mov    esi,0x0
ffff80000081078d:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810792:	49 89 df             	mov    r15,rbx
ffff800000810795:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000081079c:	ff ff ff 
ffff80000081079f:	48 01 d8             	add    rax,rbx
ffff8000008107a2:	ff d0                	call   rax
ffff8000008107a4:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123

		for(j = 0;j < 128;j++)
ffff8000008107a7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008107ae:	eb 2a                	jmp    ffff8000008107da <FAT32_find_available_cluster+0xe3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125
		{
			if((buf[j] & 0x0fffffff) == 0)
ffff8000008107b0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008107b3:	48 98                	cdqe   
ffff8000008107b5:	8b 84 85 d0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x230]
ffff8000008107bc:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff8000008107c1:	85 c0                	test   eax,eax
ffff8000008107c3:	75 11                	jne    ffff8000008107d6 <FAT32_find_available_cluster+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:126
				return (i << 7) + j;
ffff8000008107c5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008107c8:	c1 e0 07             	shl    eax,0x7
ffff8000008107cb:	89 c2                	mov    edx,eax
ffff8000008107cd:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008107d0:	01 d0                	add    eax,edx
ffff8000008107d2:	48 98                	cdqe   
ffff8000008107d4:	eb 22                	jmp    ffff8000008107f8 <FAT32_find_available_cluster+0x101>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123 (discriminator 2)
		for(j = 0;j < 128;j++)
ffff8000008107d6:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123 (discriminator 1)
ffff8000008107da:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
ffff8000008107de:	7e d0                	jle    ffff8000008107b0 <FAT32_find_available_cluster+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
ffff8000008107e0:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118 (discriminator 1)
ffff8000008107e4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008107e7:	48 98                	cdqe   
ffff8000008107e9:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008107ed:	0f 87 4c ff ff ff    	ja     ffff80000081073f <FAT32_find_available_cluster+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:129
		}
	}
	return 0;
ffff8000008107f3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:130 (discriminator 1)
}
ffff8000008107f8:	48 81 c4 30 02 00 00 	add    rsp,0x230
ffff8000008107ff:	5b                   	pop    rbx
ffff800000810800:	41 5f                	pop    r15
ffff800000810802:	5d                   	pop    rbp
ffff800000810803:	c3                   	ret    

ffff800000810804 <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:134


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000810804:	f3 0f 1e fa          	endbr64 
ffff800000810808:	55                   	push   rbp
ffff800000810809:	48 89 e5             	mov    rbp,rsp
ffff80000081080c:	41 57                	push   r15
ffff80000081080e:	53                   	push   rbx
ffff80000081080f:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff800000810816:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810816 <FAT32_write+0x12>
ffff80000081081d:	49 bb 12 21 01 00 00 	movabs r11,0x12112
ffff800000810824:	00 00 00 
ffff800000810827:	4c 01 db             	add    rbx,r11
ffff80000081082a:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
ffff800000810831:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
ffff800000810838:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
ffff80000081083f:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:135
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff800000810846:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000081084d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810851:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810855:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000810859:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000081085d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810864:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810868:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081086c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810870:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810874:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:138

	unsigned long cluster = finode->first_cluster;
ffff800000810878:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081087c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081087f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:139
	unsigned long next_cluster = 0;
ffff800000810883:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000081088a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140
	unsigned long sector = 0;
ffff80000081088b:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000810892:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	int i,length = 0;
ffff800000810893:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	long retval = 0;
ffff80000081089a:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008108a1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:143
	long flags = 0;
ffff8000008108a2:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008108a9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144
	int index = *position / fsbi->bytes_per_cluster;
ffff8000008108aa:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008108b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008108b4:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008108b8:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff8000008108bc:	48 99                	cqo    
ffff8000008108be:	48 f7 fe             	idiv   rsi
ffff8000008108c1:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	long offset = *position % fsbi->bytes_per_cluster;
ffff8000008108c4:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008108cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008108ce:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008108d2:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff8000008108d6:	48 99                	cqo    
ffff8000008108d8:	48 f7 f9             	idiv   rcx
ffff8000008108db:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff8000008108df:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008108e3:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008108e7:	be 00 00 00 00       	mov    esi,0x0
ffff8000008108ec:	48 89 c7             	mov    rdi,rax
ffff8000008108ef:	49 89 df             	mov    r15,rbx
ffff8000008108f2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008108f7:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff8000008108fe:	ff ff ff 
ffff800000810901:	48 01 da             	add    rdx,rbx
ffff800000810904:	ff d2                	call   rdx
ffff800000810906:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:148

	if(!cluster)
ffff80000081090a:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000081090f:	75 27                	jne    ffff800000810938 <FAT32_write+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:150
	{
		cluster = FAT32_find_available_cluster(fsbi);
ffff800000810911:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810915:	48 89 c7             	mov    rdi,rax
ffff800000810918:	49 89 df             	mov    r15,rbx
ffff80000081091b:	48 b8 cf dd fe ff ff 	movabs rax,0xfffffffffffeddcf
ffff800000810922:	ff ff ff 
ffff800000810925:	48 01 d8             	add    rax,rbx
ffff800000810928:	ff d0                	call   rax
ffff80000081092a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:151
		flags = 1;
ffff80000081092e:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff800000810935:	00 
ffff800000810936:	eb 3c                	jmp    ffff800000810974 <FAT32_write+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154
	}
	else
		for(i = 0;i < index;i++)
ffff800000810938:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000081093f:	eb 2b                	jmp    ffff80000081096c <FAT32_write+0x168>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810941:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810945:	89 c2                	mov    edx,eax
ffff800000810947:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081094b:	89 d6                	mov    esi,edx
ffff80000081094d:	48 89 c7             	mov    rdi,rax
ffff800000810950:	49 89 df             	mov    r15,rbx
ffff800000810953:	48 b8 22 d7 fe ff ff 	movabs rax,0xfffffffffffed722
ffff80000081095a:	ff ff ff 
ffff80000081095d:	48 01 d8             	add    rax,rbx
ffff800000810960:	ff d0                	call   rax
ffff800000810962:	89 c0                	mov    eax,eax
ffff800000810964:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154 (discriminator 3)
		for(i = 0;i < index;i++)
ffff800000810968:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154 (discriminator 1)
ffff80000081096c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081096f:	3b 45 c4             	cmp    eax,DWORD PTR [rbp-0x3c]
ffff800000810972:	7c cd                	jl     ffff800000810941 <FAT32_write+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:157

	if(!cluster)
ffff800000810974:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000810979:	75 25                	jne    ffff8000008109a0 <FAT32_write+0x19c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:159
	{
        kmfree(buffer);
ffff80000081097b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081097f:	48 89 c7             	mov    rdi,rax
ffff800000810982:	49 89 df             	mov    r15,rbx
ffff800000810985:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000081098c:	ff ff ff 
ffff80000081098f:	48 01 d8             	add    rax,rbx
ffff800000810992:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160
		return -ENOSPC;
ffff800000810994:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000081099b:	e9 1d 04 00 00       	jmp    ffff800000810dbd <FAT32_write+0x5b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:163
	}

	if(flags)
ffff8000008109a0:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff8000008109a5:	74 60                	je     ffff800000810a07 <FAT32_write+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:165
	{
		finode->first_cluster = cluster;
ffff8000008109a7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008109ab:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008109af:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:166
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff8000008109b2:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008109b9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008109bd:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008109c1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008109c5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008109c9:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008109cd:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008109d4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008109d8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008109dc:	48 89 c7             	mov    rdi,rax
ffff8000008109df:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:167
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
ffff8000008109e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008109e5:	89 c1                	mov    ecx,eax
ffff8000008109e7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008109eb:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff8000008109f0:	89 ce                	mov    esi,ecx
ffff8000008109f2:	48 89 c7             	mov    rdi,rax
ffff8000008109f5:	49 89 df             	mov    r15,rbx
ffff8000008109f8:	48 b8 3f d8 fe ff ff 	movabs rax,0xfffffffffffed83f
ffff8000008109ff:	ff ff ff 
ffff800000810a02:	48 01 d8             	add    rax,rbx
ffff800000810a05:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:170
	}

	index = count;
ffff800000810a07:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000810a0e:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:174

	do
	{
		if(!flags)
ffff800000810a11:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000810a16:	0f 85 d1 00 00 00    	jne    ffff800000810aed <FAT32_write+0x2e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:176
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
ffff800000810a1c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810a20:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810a24:	89 c2                	mov    edx,eax
ffff800000810a26:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a2a:	be 00 00 00 00       	mov    esi,0x0
ffff800000810a2f:	48 89 c7             	mov    rdi,rax
ffff800000810a32:	49 89 df             	mov    r15,rbx
ffff800000810a35:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000810a3c:	ff ff ff 
ffff800000810a3f:	48 01 d8             	add    rax,rbx
ffff800000810a42:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:177
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000810a44:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810a48:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000810a4c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810a50:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000810a54:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810a58:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810a5c:	48 0f af c2          	imul   rax,rdx
ffff800000810a60:	48 01 c8             	add    rax,rcx
ffff800000810a63:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:178
            int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
ffff800000810a67:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810a6b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810a6f:	89 c1                	mov    ecx,eax
ffff800000810a71:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810a75:	89 c2                	mov    edx,eax
ffff800000810a77:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a7b:	49 89 c0             	mov    r8,rax
ffff800000810a7e:	be 00 00 00 00       	mov    esi,0x0
ffff800000810a83:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810a88:	49 89 df             	mov    r15,rbx
ffff800000810a8b:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff800000810a92:	ff ff ff 
ffff800000810a95:	48 01 d8             	add    rax,rbx
ffff800000810a98:	ff d0                	call   rax
ffff800000810a9a:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:180

			if(!chk_result(r))
ffff800000810a9d:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff800000810aa0:	89 c7                	mov    edi,eax
ffff800000810aa2:	49 89 df             	mov    r15,rbx
ffff800000810aa5:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff800000810aac:	ff ff ff 
ffff800000810aaf:	48 01 d8             	add    rax,rbx
ffff800000810ab2:	ff d0                	call   rax
ffff800000810ab4:	85 c0                	test   eax,eax
ffff800000810ab6:	75 35                	jne    ffff800000810aed <FAT32_write+0x2e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:182
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
ffff800000810ab8:	48 b8 30 d9 ff ff ff 	movabs rax,0xffffffffffffd930
ffff800000810abf:	ff ff ff 
ffff800000810ac2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810ac6:	48 89 c7             	mov    rdi,rax
ffff800000810ac9:	49 89 df             	mov    r15,rbx
ffff800000810acc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810ad1:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff800000810ad8:	ff ff ff 
ffff800000810adb:	48 01 da             	add    rdx,rbx
ffff800000810ade:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
				retval = -EIO;
ffff800000810ae0:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff800000810ae7:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:184
				break;
ffff800000810ae8:	e9 33 02 00 00       	jmp    ffff800000810d20 <FAT32_write+0x51c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:188
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff800000810aed:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000810af0:	48 63 d0             	movsxd rdx,eax
ffff800000810af3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810af7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810afb:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffff800000810aff:	48 39 c2             	cmp    rdx,rax
ffff800000810b02:	48 0f 4e c2          	cmovle rax,rdx
ffff800000810b06:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:190

		if((unsigned long)buf < MAX_TASKS)
ffff800000810b09:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810b10:	48 83 f8 1f          	cmp    rax,0x1f
ffff800000810b14:	77 2f                	ja     ffff800000810b45 <FAT32_write+0x341>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:191
			memcpy(buf,buffer + offset,length);
ffff800000810b16:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000810b19:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff800000810b1d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b21:	48 01 c1             	add    rcx,rax
ffff800000810b24:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810b2b:	48 89 ce             	mov    rsi,rcx
ffff800000810b2e:	48 89 c7             	mov    rdi,rax
ffff800000810b31:	49 89 df             	mov    r15,rbx
ffff800000810b34:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000810b3b:	ff ff ff 
ffff800000810b3e:	48 01 d8             	add    rax,rbx
ffff800000810b41:	ff d0                	call   rax
ffff800000810b43:	eb 2d                	jmp    ffff800000810b72 <FAT32_write+0x36e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:193
		else
			memcpy(buf,buffer + offset,length);
ffff800000810b45:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000810b48:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff800000810b4c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b50:	48 01 c1             	add    rcx,rax
ffff800000810b53:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810b5a:	48 89 ce             	mov    rsi,rcx
ffff800000810b5d:	48 89 c7             	mov    rdi,rax
ffff800000810b60:	49 89 df             	mov    r15,rbx
ffff800000810b63:	48 b8 4d 11 ff ff ff 	movabs rax,0xffffffffffff114d
ffff800000810b6a:	ff ff ff 
ffff800000810b6d:	48 01 d8             	add    rax,rbx
ffff800000810b70:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:195

		int r=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
ffff800000810b72:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810b76:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810b7a:	89 c1                	mov    ecx,eax
ffff800000810b7c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810b80:	89 c2                	mov    edx,eax
ffff800000810b82:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b86:	49 89 c0             	mov    r8,rax
ffff800000810b89:	be 01 00 00 00       	mov    esi,0x1
ffff800000810b8e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810b93:	49 89 df             	mov    r15,rbx
ffff800000810b96:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff800000810b9d:	ff ff ff 
ffff800000810ba0:	48 01 d8             	add    rax,rbx
ffff800000810ba3:	ff d0                	call   rax
ffff800000810ba5:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:196
        if(!chk_result(r))
ffff800000810ba8:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
ffff800000810bab:	89 c7                	mov    edi,eax
ffff800000810bad:	49 89 df             	mov    r15,rbx
ffff800000810bb0:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff800000810bb7:	ff ff ff 
ffff800000810bba:	48 01 d8             	add    rax,rbx
ffff800000810bbd:	ff d0                	call   rax
ffff800000810bbf:	85 c0                	test   eax,eax
ffff800000810bc1:	75 35                	jne    ffff800000810bf8 <FAT32_write+0x3f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
ffff800000810bc3:	48 b8 60 d9 ff ff ff 	movabs rax,0xffffffffffffd960
ffff800000810bca:	ff ff ff 
ffff800000810bcd:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810bd1:	48 89 c7             	mov    rdi,rax
ffff800000810bd4:	49 89 df             	mov    r15,rbx
ffff800000810bd7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810bdc:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff800000810be3:	ff ff ff 
ffff800000810be6:	48 01 da             	add    rdx,rbx
ffff800000810be9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:199
			retval = -EIO;
ffff800000810beb:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff800000810bf2:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:200
			break;
ffff800000810bf3:	e9 28 01 00 00       	jmp    ffff800000810d20 <FAT32_write+0x51c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
		}

		index -= length;
ffff800000810bf8:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000810bfb:	29 45 c4             	sub    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:204
		buf += length;
ffff800000810bfe:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000810c01:	48 98                	cdqe   
ffff800000810c03:	48 01 85 70 ff ff ff 	add    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:205
		offset -= offset;
ffff800000810c0a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000810c11:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:206
		*position += length;
ffff800000810c12:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810c19:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810c1c:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000810c1f:	48 98                	cdqe   
ffff800000810c21:	48 01 c2             	add    rdx,rax
ffff800000810c24:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810c2b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:208

		if(index)
ffff800000810c2e:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000810c32:	0f 84 e7 00 00 00    	je     ffff800000810d1f <FAT32_write+0x51b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:209
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810c38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810c3c:	89 c2                	mov    edx,eax
ffff800000810c3e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810c42:	89 d6                	mov    esi,edx
ffff800000810c44:	48 89 c7             	mov    rdi,rax
ffff800000810c47:	49 89 df             	mov    r15,rbx
ffff800000810c4a:	48 b8 22 d7 fe ff ff 	movabs rax,0xfffffffffffed722
ffff800000810c51:	ff ff ff 
ffff800000810c54:	48 01 d8             	add    rax,rbx
ffff800000810c57:	ff d0                	call   rax
ffff800000810c59:	89 c0                	mov    eax,eax
ffff800000810c5b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:213
		else
			break;

		if(next_cluster >= 0x0ffffff8)
ffff800000810c5f:	48 81 7d a0 f7 ff ff 	cmp    QWORD PTR [rbp-0x60],0xffffff7
ffff800000810c66:	0f 
ffff800000810c67:	0f 86 a6 00 00 00    	jbe    ffff800000810d13 <FAT32_write+0x50f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:215
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
ffff800000810c6d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810c71:	48 89 c7             	mov    rdi,rax
ffff800000810c74:	49 89 df             	mov    r15,rbx
ffff800000810c77:	48 b8 cf dd fe ff ff 	movabs rax,0xfffffffffffeddcf
ffff800000810c7e:	ff ff ff 
ffff800000810c81:	48 01 d8             	add    rax,rbx
ffff800000810c84:	ff d0                	call   rax
ffff800000810c86:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:216
			if(!next_cluster)
ffff800000810c8a:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff800000810c8f:	75 25                	jne    ffff800000810cb6 <FAT32_write+0x4b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:218
			{
                kmfree(buffer);
ffff800000810c91:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c95:	48 89 c7             	mov    rdi,rax
ffff800000810c98:	49 89 df             	mov    r15,rbx
ffff800000810c9b:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000810ca2:	ff ff ff 
ffff800000810ca5:	48 01 d8             	add    rax,rbx
ffff800000810ca8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:219
				return -ENOSPC;
ffff800000810caa:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff800000810cb1:	e9 07 01 00 00       	jmp    ffff800000810dbd <FAT32_write+0x5b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
ffff800000810cb6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810cba:	89 c2                	mov    edx,eax
ffff800000810cbc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810cc0:	89 c1                	mov    ecx,eax
ffff800000810cc2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810cc6:	89 ce                	mov    esi,ecx
ffff800000810cc8:	48 89 c7             	mov    rdi,rax
ffff800000810ccb:	49 89 df             	mov    r15,rbx
ffff800000810cce:	48 b8 3f d8 fe ff ff 	movabs rax,0xfffffffffffed83f
ffff800000810cd5:	ff ff ff 
ffff800000810cd8:	48 01 d8             	add    rax,rbx
ffff800000810cdb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:223
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
ffff800000810cdd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810ce1:	89 c1                	mov    ecx,eax
ffff800000810ce3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810ce7:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff800000810cec:	89 ce                	mov    esi,ecx
ffff800000810cee:	48 89 c7             	mov    rdi,rax
ffff800000810cf1:	49 89 df             	mov    r15,rbx
ffff800000810cf4:	48 b8 3f d8 fe ff ff 	movabs rax,0xfffffffffffed83f
ffff800000810cfb:	ff ff ff 
ffff800000810cfe:	48 01 d8             	add    rax,rbx
ffff800000810d01:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:224
			cluster = next_cluster;
ffff800000810d03:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810d07:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:225
			flags = 1;
ffff800000810d0b:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff800000810d12:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:228
		}

	}while(index);
ffff800000810d13:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000810d17:	0f 85 f4 fc ff ff    	jne    ffff800000810a11 <FAT32_write+0x20d>
ffff800000810d1d:	eb 01                	jmp    ffff800000810d20 <FAT32_write+0x51c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:211
			break;
ffff800000810d1f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:230

	if(*position > filp->dentry->dir_inode->file_size)
ffff800000810d20:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810d27:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810d2a:	48 89 c2             	mov    rdx,rax
ffff800000810d2d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810d34:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810d38:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810d3c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810d3f:	48 39 c2             	cmp    rdx,rax
ffff800000810d42:	76 4b                	jbe    ffff800000810d8f <FAT32_write+0x58b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:232
	{
		filp->dentry->dir_inode->file_size = *position;
ffff800000810d44:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810d4b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810d4e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810d55:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810d59:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810d5d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:233
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff800000810d60:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810d67:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810d6b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810d6f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810d73:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000810d77:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000810d7b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810d82:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810d86:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810d8a:	48 89 c7             	mov    rdi,rax
ffff800000810d8d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
	}

    kmfree(buffer);
ffff800000810d8f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d93:	48 89 c7             	mov    rdi,rax
ffff800000810d96:	49 89 df             	mov    r15,rbx
ffff800000810d99:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000810da0:	ff ff ff 
ffff800000810da3:	48 01 d8             	add    rax,rbx
ffff800000810da6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:237
	if(!index)
ffff800000810da8:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000810dac:	75 0b                	jne    ffff800000810db9 <FAT32_write+0x5b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:238
		retval = count;
ffff800000810dae:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000810db5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:239
	return retval;
ffff800000810db9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:240
}
ffff800000810dbd:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff800000810dc4:	5b                   	pop    rbx
ffff800000810dc5:	41 5f                	pop    r15
ffff800000810dc7:	5d                   	pop    rbp
ffff800000810dc8:	c3                   	ret    

ffff800000810dc9 <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:244


long FAT32_lseek(struct file * filp,long offset,long origin)
{
ffff800000810dc9:	f3 0f 1e fa          	endbr64 
ffff800000810dcd:	55                   	push   rbp
ffff800000810dce:	48 89 e5             	mov    rbp,rsp
ffff800000810dd1:	41 57                	push   r15
ffff800000810dd3:	48 83 ec 38          	sub    rsp,0x38
ffff800000810dd7:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff800000810dd7 <FAT32_lseek+0xe>
ffff800000810dde:	49 bb 51 1b 01 00 00 	movabs r11,0x11b51
ffff800000810de5:	00 00 00 
ffff800000810de8:	4c 01 d9             	add    rcx,r11
ffff800000810deb:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000810def:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000810df3:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:245
	struct index_node *inode = filp->dentry->dir_inode;
ffff800000810df7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810dfb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810dff:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810e03:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:246
	long pos = 0;
ffff800000810e07:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000810e0e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:248

	switch(origin)
ffff800000810e0f:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff800000810e14:	74 21                	je     ffff800000810e37 <FAT32_lseek+0x6e>
ffff800000810e16:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff800000810e1b:	7f 4a                	jg     ffff800000810e67 <FAT32_lseek+0x9e>
ffff800000810e1d:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000810e22:	74 09                	je     ffff800000810e2d <FAT32_lseek+0x64>
ffff800000810e24:	48 83 7d c8 01       	cmp    QWORD PTR [rbp-0x38],0x1
ffff800000810e29:	74 20                	je     ffff800000810e4b <FAT32_lseek+0x82>
ffff800000810e2b:	eb 3a                	jmp    ffff800000810e67 <FAT32_lseek+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:251
	{
		case SEEK_SET:
				pos = offset;
ffff800000810e2d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810e31:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:252
			break;
ffff800000810e35:	eb 39                	jmp    ffff800000810e70 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:255

		case SEEK_CUR:
				pos =  filp->position + offset;
ffff800000810e37:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810e3b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810e3e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810e42:	48 01 d0             	add    rax,rdx
ffff800000810e45:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:256
			break;
ffff800000810e49:	eb 25                	jmp    ffff800000810e70 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:259

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
ffff800000810e4b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810e4f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810e53:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810e57:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810e5a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810e5e:	48 01 d0             	add    rax,rdx
ffff800000810e61:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:260
			break;
ffff800000810e65:	eb 09                	jmp    ffff800000810e70 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:263

		default:
			return -EINVAL;
ffff800000810e67:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff800000810e6e:	eb 69                	jmp    ffff800000810ed9 <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:267
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
ffff800000810e70:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000810e75:	78 18                	js     ffff800000810e8f <FAT32_lseek+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:267 (discriminator 1)
ffff800000810e77:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810e7b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810e7f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810e83:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810e86:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810e8a:	48 39 c2             	cmp    rdx,rax
ffff800000810e8d:	73 09                	jae    ffff800000810e98 <FAT32_lseek+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:268
		return -EOVERFLOW;
ffff800000810e8f:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
ffff800000810e96:	eb 41                	jmp    ffff800000810ed9 <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:270

	filp->position = pos;
ffff800000810e98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810e9c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000810ea0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:271
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
ffff800000810ea3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810ea7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810eaa:	48 89 c6             	mov    rsi,rax
ffff800000810ead:	48 b8 90 d9 ff ff ff 	movabs rax,0xffffffffffffd990
ffff800000810eb4:	ff ff ff 
ffff800000810eb7:	48 8d 04 01          	lea    rax,[rcx+rax*1]
ffff800000810ebb:	48 89 c7             	mov    rdi,rax
ffff800000810ebe:	49 89 cf             	mov    r15,rcx
ffff800000810ec1:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810ec6:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff800000810ecd:	ff ff ff 
ffff800000810ed0:	48 01 ca             	add    rdx,rcx
ffff800000810ed3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:273

	return pos;
ffff800000810ed5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:274
}
ffff800000810ed9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000810edd:	c9                   	leave  
ffff800000810ede:	c3                   	ret    

ffff800000810edf <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:278


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
ffff800000810edf:	f3 0f 1e fa          	endbr64 
ffff800000810ee3:	55                   	push   rbp
ffff800000810ee4:	48 89 e5             	mov    rbp,rsp
ffff800000810ee7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810ee7 <FAT32_ioctl+0x8>
ffff800000810eee:	49 bb 41 1a 01 00 00 	movabs r11,0x11a41
ffff800000810ef5:	00 00 00 
ffff800000810ef8:	4c 01 d8             	add    rax,r11
ffff800000810efb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810eff:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000810f03:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000810f07:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000810f0b:	90                   	nop
ffff800000810f0c:	5d                   	pop    rbp
ffff800000810f0d:	c3                   	ret    

ffff800000810f0e <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
ffff800000810f0e:	f3 0f 1e fa          	endbr64 
ffff800000810f12:	55                   	push   rbp
ffff800000810f13:	48 89 e5             	mov    rbp,rsp
ffff800000810f16:	41 57                	push   r15
ffff800000810f18:	53                   	push   rbx
ffff800000810f19:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000810f1d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810f1d <FAT32_readdir+0xf>
ffff800000810f24:	49 bb 0b 1a 01 00 00 	movabs r11,0x11a0b
ffff800000810f2b:	00 00 00 
ffff800000810f2e:	4c 01 db             	add    rbx,r11
ffff800000810f31:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000810f35:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff800000810f39:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:282
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff800000810f40:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810f44:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810f48:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810f4c:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000810f50:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:283
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff800000810f54:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810f58:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810f5c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810f60:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810f64:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810f68:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285

	unsigned int cluster = 0;
ffff800000810f6c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	unsigned long sector = 0;
ffff800000810f73:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff800000810f7a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:287
	unsigned char * buf =NULL; 
ffff800000810f7b:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000810f82:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288
	char *name = NULL;
ffff800000810f83:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000810f8a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	int namelen = 0;
ffff800000810f8b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	int i = 0,j = 0,x = 0,y = 0;
ffff800000810f92:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000810f99:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000810fa0:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000810fa7:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:291
	struct FAT32_Directory * tmpdentry = NULL;
ffff800000810fae:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff800000810fb5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:292
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000810fb6:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000810fbd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:294

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000810fbe:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810fc2:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810fc6:	be 00 00 00 00       	mov    esi,0x0
ffff800000810fcb:	48 89 c7             	mov    rdi,rax
ffff800000810fce:	49 89 df             	mov    r15,rbx
ffff800000810fd1:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810fd6:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000810fdd:	ff ff ff 
ffff800000810fe0:	48 01 da             	add    rdx,rbx
ffff800000810fe3:	ff d2                	call   rdx
ffff800000810fe5:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:296

	cluster = finode->first_cluster;
ffff800000810fe9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810fed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810ff0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298

	j = filp->position/fsbi->bytes_per_cluster;
ffff800000810ff3:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810ff7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810ffa:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810ffe:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff800000811002:	48 99                	cqo    
ffff800000811004:	48 f7 fe             	idiv   rsi
ffff800000811007:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300
	
	for(i = 0;i<j;i++)
ffff80000081100a:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000811011:	eb 60                	jmp    ffff800000811073 <FAT32_readdir+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:302
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000811013:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811016:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081101a:	89 d6                	mov    esi,edx
ffff80000081101c:	48 89 c7             	mov    rdi,rax
ffff80000081101f:	49 89 df             	mov    r15,rbx
ffff800000811022:	48 b8 22 d7 fe ff ff 	movabs rax,0xfffffffffffed722
ffff800000811029:	ff ff ff 
ffff80000081102c:	48 01 d8             	add    rax,rbx
ffff80000081102f:	ff d0                	call   rax
ffff800000811031:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303
		if(cluster > 0x0ffffff7)
ffff800000811034:	81 7d ec f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff7
ffff80000081103b:	76 32                	jbe    ffff80000081106f <FAT32_readdir+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:305
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
ffff80000081103d:	48 b8 b8 d9 ff ff ff 	movabs rax,0xffffffffffffd9b8
ffff800000811044:	ff ff ff 
ffff800000811047:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081104b:	48 89 c7             	mov    rdi,rax
ffff80000081104e:	49 89 df             	mov    r15,rbx
ffff800000811051:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811056:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff80000081105d:	ff ff ff 
ffff800000811060:	48 01 da             	add    rdx,rbx
ffff800000811063:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:306
			return NULL;
ffff800000811065:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081106a:	e9 1a 06 00 00       	jmp    ffff800000811689 <FAT32_readdir+0x77b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300 (discriminator 2)
	for(i = 0;i<j;i++)
ffff80000081106f:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300 (discriminator 1)
ffff800000811073:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000811076:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000811079:	7c 98                	jl     ffff800000811013 <FAT32_readdir+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:310
		}
	}

next_cluster:
ffff80000081107b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:311
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000081107c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811080:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000811084:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811087:	83 e8 02             	sub    eax,0x2
ffff80000081108a:	89 c1                	mov    ecx,eax
ffff80000081108c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811090:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811094:	48 0f af c1          	imul   rax,rcx
ffff800000811098:	48 01 d0             	add    rax,rdx
ffff80000081109b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:312
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff80000081109f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008110a3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008110a7:	89 c1                	mov    ecx,eax
ffff8000008110a9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008110ad:	89 c2                	mov    edx,eax
ffff8000008110af:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008110b3:	49 89 c0             	mov    r8,rax
ffff8000008110b6:	be 00 00 00 00       	mov    esi,0x0
ffff8000008110bb:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008110c0:	49 89 df             	mov    r15,rbx
ffff8000008110c3:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff8000008110ca:	ff ff ff 
ffff8000008110cd:	48 01 d8             	add    rax,rbx
ffff8000008110d0:	ff d0                	call   rax
ffff8000008110d2:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
    if(!chk_result(r))
ffff8000008110d5:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff8000008110d8:	89 c7                	mov    edi,eax
ffff8000008110da:	49 89 df             	mov    r15,rbx
ffff8000008110dd:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff8000008110e4:	ff ff ff 
ffff8000008110e7:	48 01 d8             	add    rax,rbx
ffff8000008110ea:	ff d0                	call   rax
ffff8000008110ec:	85 c0                	test   eax,eax
ffff8000008110ee:	75 4b                	jne    ffff80000081113b <FAT32_readdir+0x22d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:315
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
ffff8000008110f0:	48 b8 e0 d9 ff ff ff 	movabs rax,0xffffffffffffd9e0
ffff8000008110f7:	ff ff ff 
ffff8000008110fa:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008110fe:	48 89 c7             	mov    rdi,rax
ffff800000811101:	49 89 df             	mov    r15,rbx
ffff800000811104:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811109:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff800000811110:	ff ff ff 
ffff800000811113:	48 01 da             	add    rdx,rbx
ffff800000811116:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:316
        kmfree(buf);
ffff800000811118:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081111c:	48 89 c7             	mov    rdi,rax
ffff80000081111f:	49 89 df             	mov    r15,rbx
ffff800000811122:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000811129:	ff ff ff 
ffff80000081112c:	48 01 d8             	add    rax,rbx
ffff80000081112f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:317
		return NULL;
ffff800000811131:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811136:	e9 4e 05 00 00       	jmp    ffff800000811689 <FAT32_readdir+0x77b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
ffff80000081113b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081113f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811142:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000811146:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081114a:	48 99                	cqo    
ffff80000081114c:	48 f7 f9             	idiv   rcx
ffff80000081114f:	48 89 d0             	mov    rax,rdx
ffff800000811152:	48 89 c2             	mov    rdx,rax
ffff800000811155:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811159:	48 01 d0             	add    rax,rdx
ffff80000081115c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff800000811160:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811164:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811167:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000081116b:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081116f:	48 99                	cqo    
ffff800000811171:	48 f7 f9             	idiv   rcx
ffff800000811174:	48 89 d0             	mov    rax,rdx
ffff800000811177:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffff80000081117a:	e9 66 04 00 00       	jmp    ffff8000008115e5 <FAT32_readdir+0x6d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff80000081117f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811183:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811187:	3c 0f                	cmp    al,0xf
ffff800000811189:	0f 84 37 04 00 00    	je     ffff8000008115c6 <FAT32_readdir+0x6b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff80000081118f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811193:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811196:	3c e5                	cmp    al,0xe5
ffff800000811198:	0f 84 2b 04 00 00    	je     ffff8000008115c9 <FAT32_readdir+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326 (discriminator 2)
ffff80000081119e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008111a2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008111a5:	84 c0                	test   al,al
ffff8000008111a7:	0f 84 1c 04 00 00    	je     ffff8000008115c9 <FAT32_readdir+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326 (discriminator 4)
ffff8000008111ad:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008111b1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008111b4:	3c 05                	cmp    al,0x5
ffff8000008111b6:	0f 84 0d 04 00 00    	je     ffff8000008115c9 <FAT32_readdir+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329
			continue;

		namelen = 0;
ffff8000008111bc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008111c3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008111c7:	48 83 e8 20          	sub    rax,0x20
ffff8000008111cb:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff8000008111cf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008111d3:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008111d7:	3c 0f                	cmp    al,0xf
ffff8000008111d9:	0f 85 44 02 00 00    	jne    ffff800000811423 <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 1)
ffff8000008111df:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008111e3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008111e6:	3c e5                	cmp    al,0xe5
ffff8000008111e8:	0f 84 35 02 00 00    	je     ffff800000811423 <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 2)
ffff8000008111ee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008111f2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008111f5:	84 c0                	test   al,al
ffff8000008111f7:	0f 84 26 02 00 00    	je     ffff800000811423 <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 3)
ffff8000008111fd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811201:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811204:	3c 05                	cmp    al,0x5
ffff800000811206:	0f 84 17 02 00 00    	je     ffff800000811423 <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334
		{
			j = 0;
ffff80000081120c:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff800000811213:	eb 1a                	jmp    ffff80000081122f <FAT32_readdir+0x321>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
			{
				j++;
ffff800000811215:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:339
				if(tmpldentry->LDIR_Ord & 0x40)
ffff800000811219:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081121d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811220:	0f b6 c0             	movzx  eax,al
ffff800000811223:	83 e0 40             	and    eax,0x40
ffff800000811226:	85 c0                	test   eax,eax
ffff800000811228:	75 34                	jne    ffff80000081125e <FAT32_readdir+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:341
					break;
				tmpldentry --;
ffff80000081122a:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081122f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811233:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811237:	3c 0f                	cmp    al,0xf
ffff800000811239:	75 24                	jne    ffff80000081125f <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 1)
ffff80000081123b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081123f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811242:	3c e5                	cmp    al,0xe5
ffff800000811244:	74 19                	je     ffff80000081125f <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 2)
ffff800000811246:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081124a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081124d:	84 c0                	test   al,al
ffff80000081124f:	74 0e                	je     ffff80000081125f <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 3)
ffff800000811251:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811255:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811258:	3c 05                	cmp    al,0x5
ffff80000081125a:	75 b9                	jne    ffff800000811215 <FAT32_readdir+0x307>
ffff80000081125c:	eb 01                	jmp    ffff80000081125f <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:340
					break;
ffff80000081125e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:344
			}

			name = kmalloc(j * 13 + 1, 0);
ffff80000081125f:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000811262:	89 d0                	mov    eax,edx
ffff800000811264:	01 c0                	add    eax,eax
ffff800000811266:	01 d0                	add    eax,edx
ffff800000811268:	c1 e0 02             	shl    eax,0x2
ffff80000081126b:	01 d0                	add    eax,edx
ffff80000081126d:	83 c0 01             	add    eax,0x1
ffff800000811270:	be 00 00 00 00       	mov    esi,0x0
ffff800000811275:	89 c7                	mov    edi,eax
ffff800000811277:	49 89 df             	mov    r15,rbx
ffff80000081127a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081127f:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000811286:	ff ff ff 
ffff800000811289:	48 01 da             	add    rdx,rbx
ffff80000081128c:	ff d2                	call   rdx
ffff80000081128e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345
			memset(name,0,j*13+1);
ffff800000811292:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000811295:	89 d0                	mov    eax,edx
ffff800000811297:	01 c0                	add    eax,eax
ffff800000811299:	01 d0                	add    eax,edx
ffff80000081129b:	c1 e0 02             	shl    eax,0x2
ffff80000081129e:	01 d0                	add    eax,edx
ffff8000008112a0:	83 c0 01             	add    eax,0x1
ffff8000008112a3:	89 c2                	mov    edx,eax
ffff8000008112a5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008112a9:	be 00 00 00 00       	mov    esi,0x0
ffff8000008112ae:	48 89 c7             	mov    rdi,rax
ffff8000008112b1:	49 89 df             	mov    r15,rbx
ffff8000008112b4:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff8000008112bb:	ff ff ff 
ffff8000008112be:	48 01 d8             	add    rax,rbx
ffff8000008112c1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008112c3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008112c7:	48 83 e8 20          	sub    rax,0x20
ffff8000008112cb:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348

			for(x = 0;x<j;x++,tmpldentry --)
ffff8000008112cf:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008112d6:	e9 37 01 00 00       	jmp    ffff800000811412 <FAT32_readdir+0x504>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350
			{
				for(y = 0;y<5;y++)
ffff8000008112db:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008112e2:	eb 53                	jmp    ffff800000811337 <FAT32_readdir+0x429>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff8000008112e4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008112e8:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008112eb:	48 63 d2             	movsxd rdx,edx
ffff8000008112ee:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008112f3:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008112f7:	74 3a                	je     ffff800000811333 <FAT32_readdir+0x425>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351 (discriminator 1)
ffff8000008112f9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008112fd:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000811300:	48 63 d2             	movsxd rdx,edx
ffff800000811303:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000811308:	66 85 c0             	test   ax,ax
ffff80000081130b:	74 26                	je     ffff800000811333 <FAT32_readdir+0x425>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
ffff80000081130d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811311:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000811314:	48 63 d2             	movsxd rdx,edx
ffff800000811317:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff80000081131c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081131f:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811322:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000811325:	48 63 d0             	movsxd rdx,eax
ffff800000811328:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081132c:	48 01 d0             	add    rax,rdx
ffff80000081132f:	89 ca                	mov    edx,ecx
ffff800000811331:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 2)
				for(y = 0;y<5;y++)
ffff800000811333:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 1)
ffff800000811337:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
ffff80000081133b:	7e a7                	jle    ffff8000008112e4 <FAT32_readdir+0x3d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354

				for(y = 0;y<6;y++)
ffff80000081133d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000811344:	eb 53                	jmp    ffff800000811399 <FAT32_readdir+0x48b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000811346:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081134a:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081134d:	48 63 d2             	movsxd rdx,edx
ffff800000811350:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000811355:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000811359:	74 3a                	je     ffff800000811395 <FAT32_readdir+0x487>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355 (discriminator 1)
ffff80000081135b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081135f:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000811362:	48 63 d2             	movsxd rdx,edx
ffff800000811365:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff80000081136a:	66 85 c0             	test   ax,ax
ffff80000081136d:	74 26                	je     ffff800000811395 <FAT32_readdir+0x487>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
ffff80000081136f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811373:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000811376:	48 63 d2             	movsxd rdx,edx
ffff800000811379:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff80000081137e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000811381:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811384:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000811387:	48 63 d0             	movsxd rdx,eax
ffff80000081138a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081138e:	48 01 d0             	add    rax,rdx
ffff800000811391:	89 ca                	mov    edx,ecx
ffff800000811393:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354 (discriminator 2)
				for(y = 0;y<6;y++)
ffff800000811395:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354 (discriminator 1)
ffff800000811399:	83 7d cc 05          	cmp    DWORD PTR [rbp-0x34],0x5
ffff80000081139d:	7e a7                	jle    ffff800000811346 <FAT32_readdir+0x438>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358

				for(y = 0;y<2;y++)
ffff80000081139f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008113a6:	eb 5b                	jmp    ffff800000811403 <FAT32_readdir+0x4f5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:359
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff8000008113a8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008113ac:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008113af:	48 63 d2             	movsxd rdx,edx
ffff8000008113b2:	48 83 c2 08          	add    rdx,0x8
ffff8000008113b6:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff8000008113bb:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008113bf:	74 3e                	je     ffff8000008113ff <FAT32_readdir+0x4f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:359 (discriminator 1)
ffff8000008113c1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008113c5:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008113c8:	48 63 d2             	movsxd rdx,edx
ffff8000008113cb:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008113d0:	66 85 c0             	test   ax,ax
ffff8000008113d3:	74 2a                	je     ffff8000008113ff <FAT32_readdir+0x4f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
ffff8000008113d5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008113d9:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008113dc:	48 63 d2             	movsxd rdx,edx
ffff8000008113df:	48 83 c2 08          	add    rdx,0x8
ffff8000008113e3:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff8000008113e8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008113eb:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008113ee:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008113f1:	48 63 d0             	movsxd rdx,eax
ffff8000008113f4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008113f8:	48 01 d0             	add    rax,rdx
ffff8000008113fb:	89 ca                	mov    edx,ecx
ffff8000008113fd:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358 (discriminator 2)
				for(y = 0;y<2;y++)
ffff8000008113ff:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358 (discriminator 1)
ffff800000811403:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
ffff800000811407:	7e 9f                	jle    ffff8000008113a8 <FAT32_readdir+0x49a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
ffff800000811409:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
ffff80000081140d:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 1)
ffff800000811412:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000811415:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000811418:	0f 8c bd fe ff ff    	jl     ffff8000008112db <FAT32_readdir+0x3cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:362
			}
			goto find_lookup_success;
ffff80000081141e:	e9 2c 02 00 00       	jmp    ffff80000081164f <FAT32_readdir+0x741>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365
		}

		name = kmalloc(15, 0);
ffff800000811423:	be 00 00 00 00       	mov    esi,0x0
ffff800000811428:	bf 0f 00 00 00       	mov    edi,0xf
ffff80000081142d:	49 89 df             	mov    r15,rbx
ffff800000811430:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811435:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff80000081143c:	ff ff ff 
ffff80000081143f:	48 01 da             	add    rdx,rbx
ffff800000811442:	ff d2                	call   rdx
ffff800000811444:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366
		memset(name,0,15);
ffff800000811448:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081144c:	ba 0f 00 00 00       	mov    edx,0xf
ffff800000811451:	be 00 00 00 00       	mov    esi,0x0
ffff800000811456:	48 89 c7             	mov    rdi,rax
ffff800000811459:	49 89 df             	mov    r15,rbx
ffff80000081145c:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000811463:	ff ff ff 
ffff800000811466:	48 01 d8             	add    rax,rbx
ffff800000811469:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
		//short file/dir base name compare
		for(x=0;x<8;x++)
ffff80000081146b:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000811472:	eb 74                	jmp    ffff8000008114e8 <FAT32_readdir+0x5da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000811474:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000811478:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081147b:	48 98                	cdqe   
ffff80000081147d:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811481:	3c 20                	cmp    al,0x20
ffff800000811483:	74 6b                	je     ffff8000008114f0 <FAT32_readdir+0x5e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:372
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000811485:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811489:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000081148d:	0f b6 c0             	movzx  eax,al
ffff800000811490:	83 e0 08             	and    eax,0x8
ffff800000811493:	85 c0                	test   eax,eax
ffff800000811495:	74 29                	je     ffff8000008114c0 <FAT32_readdir+0x5b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:373
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000811497:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081149b:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081149e:	48 98                	cdqe   
ffff8000008114a0:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008114a4:	8d 48 20             	lea    ecx,[rax+0x20]
ffff8000008114a7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008114aa:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008114ad:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008114b0:	48 63 d0             	movsxd rdx,eax
ffff8000008114b3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008114b7:	48 01 d0             	add    rax,rdx
ffff8000008114ba:	89 ca                	mov    edx,ecx
ffff8000008114bc:	88 10                	mov    BYTE PTR [rax],dl
ffff8000008114be:	eb 24                	jmp    ffff8000008114e4 <FAT32_readdir+0x5d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:375
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff8000008114c0:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008114c4:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008114c7:	48 98                	cdqe   
ffff8000008114c9:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff8000008114cd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008114d0:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008114d3:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008114d6:	48 63 d0             	movsxd rdx,eax
ffff8000008114d9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008114dd:	48 01 d0             	add    rax,rdx
ffff8000008114e0:	89 ca                	mov    edx,ecx
ffff8000008114e2:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368 (discriminator 2)
		for(x=0;x<8;x++)
ffff8000008114e4:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368 (discriminator 1)
ffff8000008114e8:	83 7d d0 07          	cmp    DWORD PTR [rbp-0x30],0x7
ffff8000008114ec:	7e 86                	jle    ffff800000811474 <FAT32_readdir+0x566>
ffff8000008114ee:	eb 01                	jmp    ffff8000008114f1 <FAT32_readdir+0x5e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:371
				break;
ffff8000008114f0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:378
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
ffff8000008114f1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008114f5:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008114f9:	0f b6 c0             	movzx  eax,al
ffff8000008114fc:	83 e0 10             	and    eax,0x10
ffff8000008114ff:	85 c0                	test   eax,eax
ffff800000811501:	0f 85 44 01 00 00    	jne    ffff80000081164b <FAT32_readdir+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381
			goto find_lookup_success;

		name[namelen++] = '.';
ffff800000811507:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081150a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081150d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000811510:	48 63 d0             	movsxd rdx,eax
ffff800000811513:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811517:	48 01 d0             	add    rax,rdx
ffff80000081151a:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384

		//short file ext name compare
		for(x=8;x<11;x++)
ffff80000081151d:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
ffff800000811524:	eb 74                	jmp    ffff80000081159a <FAT32_readdir+0x68c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000811526:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081152a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081152d:	48 98                	cdqe   
ffff80000081152f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811533:	3c 20                	cmp    al,0x20
ffff800000811535:	74 6b                	je     ffff8000008115a2 <FAT32_readdir+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:388
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000811537:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081153b:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000081153f:	0f b6 c0             	movzx  eax,al
ffff800000811542:	83 e0 10             	and    eax,0x10
ffff800000811545:	85 c0                	test   eax,eax
ffff800000811547:	74 29                	je     ffff800000811572 <FAT32_readdir+0x664>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:389
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000811549:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081154d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000811550:	48 98                	cdqe   
ffff800000811552:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811556:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000811559:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081155c:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081155f:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000811562:	48 63 d0             	movsxd rdx,eax
ffff800000811565:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811569:	48 01 d0             	add    rax,rdx
ffff80000081156c:	89 ca                	mov    edx,ecx
ffff80000081156e:	88 10                	mov    BYTE PTR [rax],dl
ffff800000811570:	eb 24                	jmp    ffff800000811596 <FAT32_readdir+0x688>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000811572:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000811576:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000811579:	48 98                	cdqe   
ffff80000081157b:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff80000081157f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000811582:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811585:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000811588:	48 63 d0             	movsxd rdx,eax
ffff80000081158b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081158f:	48 01 d0             	add    rax,rdx
ffff800000811592:	89 ca                	mov    edx,ecx
ffff800000811594:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384 (discriminator 2)
		for(x=8;x<11;x++)
ffff800000811596:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384 (discriminator 1)
ffff80000081159a:	83 7d d0 0a          	cmp    DWORD PTR [rbp-0x30],0xa
ffff80000081159e:	7e 86                	jle    ffff800000811526 <FAT32_readdir+0x618>
ffff8000008115a0:	eb 01                	jmp    ffff8000008115a3 <FAT32_readdir+0x695>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:387
				break;
ffff8000008115a2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
		}
		if(x == 8)
ffff8000008115a3:	83 7d d0 08          	cmp    DWORD PTR [rbp-0x30],0x8
ffff8000008115a7:	0f 85 a1 00 00 00    	jne    ffff80000081164e <FAT32_readdir+0x740>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:394
			name[--namelen] = 0;
ffff8000008115ad:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffff8000008115b1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008115b4:	48 63 d0             	movsxd rdx,eax
ffff8000008115b7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008115bb:	48 01 d0             	add    rax,rdx
ffff8000008115be:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
		goto find_lookup_success;
ffff8000008115c1:	e9 88 00 00 00       	jmp    ffff80000081164e <FAT32_readdir+0x740>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:325
			continue;
ffff8000008115c6:	90                   	nop
ffff8000008115c7:	eb 01                	jmp    ffff8000008115ca <FAT32_readdir+0x6bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
			continue;
ffff8000008115c9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff8000008115ca:	83 45 d8 20          	add    DWORD PTR [rbp-0x28],0x20
ffff8000008115ce:	48 83 45 c0 20       	add    QWORD PTR [rbp-0x40],0x20
ffff8000008115d3:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008115d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008115da:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff8000008115de:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008115e2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322 (discriminator 1)
ffff8000008115e5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008115e8:	48 63 d0             	movsxd rdx,eax
ffff8000008115eb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008115ef:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008115f3:	48 39 c2             	cmp    rdx,rax
ffff8000008115f6:	0f 8c 83 fb ff ff    	jl     ffff80000081117f <FAT32_readdir+0x271>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:398
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff8000008115fc:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008115ff:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811603:	89 d6                	mov    esi,edx
ffff800000811605:	48 89 c7             	mov    rdi,rax
ffff800000811608:	49 89 df             	mov    r15,rbx
ffff80000081160b:	48 b8 22 d7 fe ff ff 	movabs rax,0xfffffffffffed722
ffff800000811612:	ff ff ff 
ffff800000811615:	48 01 d8             	add    rax,rbx
ffff800000811618:	ff d0                	call   rax
ffff80000081161a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:399
	if(cluster < 0x0ffffff7)
ffff80000081161d:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000811624:	77 05                	ja     ffff80000081162b <FAT32_readdir+0x71d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400
		goto next_cluster;
ffff800000811626:	e9 51 fa ff ff       	jmp    ffff80000081107c <FAT32_readdir+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:402

    kmfree(buf);
ffff80000081162b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081162f:	48 89 c7             	mov    rdi,rax
ffff800000811632:	49 89 df             	mov    r15,rbx
ffff800000811635:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000081163c:	ff ff ff 
ffff80000081163f:	48 01 d8             	add    rax,rbx
ffff800000811642:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:403
	return NULL;
ffff800000811644:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811649:	eb 3e                	jmp    ffff800000811689 <FAT32_readdir+0x77b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:379
			goto find_lookup_success;
ffff80000081164b:	90                   	nop
ffff80000081164c:	eb 01                	jmp    ffff80000081164f <FAT32_readdir+0x741>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
		goto find_lookup_success;
ffff80000081164e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:407

find_lookup_success:

	filp->position += 32;
ffff80000081164f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811653:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811656:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff80000081165a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081165e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:408
	return filler(dirent,name,namelen,0,0);
ffff800000811661:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000811664:	48 63 d0             	movsxd rdx,eax
ffff800000811667:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000081166b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000081166f:	4c 8b 8d 78 ff ff ff 	mov    r9,QWORD PTR [rbp-0x88]
ffff800000811676:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000081167c:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000811681:	48 89 c7             	mov    rdi,rax
ffff800000811684:	41 ff d1             	call   r9
ffff800000811687:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:409
}
ffff800000811689:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000081168d:	5b                   	pop    rbx
ffff80000081168e:	41 5f                	pop    r15
ffff800000811690:	5d                   	pop    rbp
ffff800000811691:	c3                   	ret    

ffff800000811692 <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:426
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff800000811692:	f3 0f 1e fa          	endbr64 
ffff800000811696:	55                   	push   rbp
ffff800000811697:	48 89 e5             	mov    rbp,rsp
ffff80000081169a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081169a <FAT32_create+0x8>
ffff8000008116a1:	49 bb 8e 12 01 00 00 	movabs r11,0x1128e
ffff8000008116a8:	00 00 00 
ffff8000008116ab:	4c 01 d8             	add    rax,r11
ffff8000008116ae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008116b2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008116b6:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff8000008116b9:	90                   	nop
ffff8000008116ba:	5d                   	pop    rbp
ffff8000008116bb:	c3                   	ret    

ffff8000008116bc <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:430


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
ffff8000008116bc:	f3 0f 1e fa          	endbr64 
ffff8000008116c0:	55                   	push   rbp
ffff8000008116c1:	48 89 e5             	mov    rbp,rsp
ffff8000008116c4:	41 57                	push   r15
ffff8000008116c6:	53                   	push   rbx
ffff8000008116c7:	48 83 ec 60          	sub    rsp,0x60
ffff8000008116cb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008116cb <FAT32_lookup+0xf>
ffff8000008116d2:	49 bb 5d 12 01 00 00 	movabs r11,0x1125d
ffff8000008116d9:	00 00 00 
ffff8000008116dc:	4c 01 db             	add    rbx,r11
ffff8000008116df:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff8000008116e3:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:431
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
ffff8000008116e7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008116eb:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008116ef:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
ffff8000008116f3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008116f7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008116fb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008116ff:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434

	unsigned int cluster = 0;
ffff800000811703:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:435
	unsigned long sector = 0;
ffff80000081170a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000811711:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436
	unsigned char * buf =NULL; 
ffff800000811712:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff800000811719:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	int i = 0,j = 0,x = 0;
ffff80000081171a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000811721:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000811728:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:438
	struct FAT32_Directory * tmpdentry = NULL;
ffff80000081172f:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000811736:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:439
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000811737:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000081173e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:440
	struct index_node * p = NULL;
ffff80000081173f:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000811746:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:442

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000811747:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081174b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081174f:	be 00 00 00 00       	mov    esi,0x0
ffff800000811754:	48 89 c7             	mov    rdi,rax
ffff800000811757:	49 89 df             	mov    r15,rbx
ffff80000081175a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081175f:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000811766:	ff ff ff 
ffff800000811769:	48 01 da             	add    rdx,rbx
ffff80000081176c:	ff d2                	call   rdx
ffff80000081176e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:444

	cluster = finode->first_cluster;
ffff800000811772:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811776:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811779:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:447

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000081177c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811780:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000811784:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811787:	83 e8 02             	sub    eax,0x2
ffff80000081178a:	89 c1                	mov    ecx,eax
ffff80000081178c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811790:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811794:	48 0f af c1          	imul   rax,rcx
ffff800000811798:	48 01 d0             	add    rax,rdx
ffff80000081179b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:448
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
ffff80000081179f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008117a3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008117a6:	89 c6                	mov    esi,eax
ffff8000008117a8:	48 b8 10 da ff ff ff 	movabs rax,0xffffffffffffda10
ffff8000008117af:	ff ff ff 
ffff8000008117b2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008117b6:	48 89 c7             	mov    rdi,rax
ffff8000008117b9:	49 89 df             	mov    r15,rbx
ffff8000008117bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008117c1:	48 b9 94 ee fd ff ff 	movabs rcx,0xfffffffffffdee94
ffff8000008117c8:	ff ff ff 
ffff8000008117cb:	48 01 d9             	add    rcx,rbx
ffff8000008117ce:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff8000008117d0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008117d4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008117d8:	89 c1                	mov    ecx,eax
ffff8000008117da:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008117de:	89 c2                	mov    edx,eax
ffff8000008117e0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008117e4:	49 89 c0             	mov    r8,rax
ffff8000008117e7:	be 00 00 00 00       	mov    esi,0x0
ffff8000008117ec:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008117f1:	49 89 df             	mov    r15,rbx
ffff8000008117f4:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff8000008117fb:	ff ff ff 
ffff8000008117fe:	48 01 d8             	add    rax,rbx
ffff800000811801:	ff d0                	call   rax
ffff800000811803:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
    if(!chk_result(r))
ffff800000811806:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000811809:	89 c7                	mov    edi,eax
ffff80000081180b:	49 89 df             	mov    r15,rbx
ffff80000081180e:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff800000811815:	ff ff ff 
ffff800000811818:	48 01 d8             	add    rax,rbx
ffff80000081181b:	ff d0                	call   rax
ffff80000081181d:	85 c0                	test   eax,eax
ffff80000081181f:	75 4b                	jne    ffff80000081186c <FAT32_lookup+0x1b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:452
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
ffff800000811821:	48 b8 38 da ff ff ff 	movabs rax,0xffffffffffffda38
ffff800000811828:	ff ff ff 
ffff80000081182b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081182f:	48 89 c7             	mov    rdi,rax
ffff800000811832:	49 89 df             	mov    r15,rbx
ffff800000811835:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081183a:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff800000811841:	ff ff ff 
ffff800000811844:	48 01 da             	add    rdx,rbx
ffff800000811847:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:453
        kmfree(buf);
ffff800000811849:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081184d:	48 89 c7             	mov    rdi,rax
ffff800000811850:	49 89 df             	mov    r15,rbx
ffff800000811853:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000081185a:	ff ff ff 
ffff80000081185d:	48 01 d8             	add    rax,rbx
ffff800000811860:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:454
		return NULL;
ffff800000811862:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811867:	e9 5f 08 00 00       	jmp    ffff8000008120cb <FAT32_lookup+0xa0f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:457
	}

	tmpdentry = (struct FAT32_Directory *)buf;
ffff80000081186c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811870:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000811874:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000081187b:	e9 9d 05 00 00       	jmp    ffff800000811e1d <FAT32_lookup+0x761>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:461
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff800000811880:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811884:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811888:	3c 0f                	cmp    al,0xf
ffff80000081188a:	0f 84 59 05 00 00    	je     ffff800000811de9 <FAT32_lookup+0x72d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff800000811890:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811894:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811897:	3c e5                	cmp    al,0xe5
ffff800000811899:	0f 84 4d 05 00 00    	je     ffff800000811dec <FAT32_lookup+0x730>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463 (discriminator 2)
ffff80000081189f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008118a3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008118a6:	84 c0                	test   al,al
ffff8000008118a8:	0f 84 3e 05 00 00    	je     ffff800000811dec <FAT32_lookup+0x730>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463 (discriminator 4)
ffff8000008118ae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008118b2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008118b5:	3c 05                	cmp    al,0x5
ffff8000008118b7:	0f 84 2f 05 00 00    	je     ffff800000811dec <FAT32_lookup+0x730>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008118bd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008118c1:	48 83 e8 20          	sub    rax,0x20
ffff8000008118c5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467
		j = 0;
ffff8000008118c9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff8000008118d0:	e9 88 01 00 00       	jmp    ffff800000811a5d <FAT32_lookup+0x3a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472
		{
			for(x=0;x<5;x++)
ffff8000008118d5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008118dc:	eb 6a                	jmp    ffff800000811948 <FAT32_lookup+0x28c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:474
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
ffff8000008118de:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008118e2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008118e5:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008118e8:	7e 15                	jle    ffff8000008118ff <FAT32_lookup+0x243>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:474 (discriminator 1)
ffff8000008118ea:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008118ee:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008118f1:	48 63 d2             	movsxd rdx,edx
ffff8000008118f4:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008118f9:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008118fd:	74 44                	je     ffff800000811943 <FAT32_lookup+0x287>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
ffff8000008118ff:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811903:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811906:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811909:	0f 8f e0 04 00 00    	jg     ffff800000811def <FAT32_lookup+0x733>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476 (discriminator 1)
ffff80000081190f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811913:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811916:	48 63 d2             	movsxd rdx,edx
ffff800000811919:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff80000081191e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811922:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000811925:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811928:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081192b:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff80000081192e:	48 98                	cdqe   
ffff800000811930:	48 01 f0             	add    rax,rsi
ffff800000811933:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811936:	66 98                	cbw    
ffff800000811938:	66 39 c1             	cmp    cx,ax
ffff80000081193b:	0f 85 ae 04 00 00    	jne    ffff800000811def <FAT32_lookup+0x733>
ffff800000811941:	eb 01                	jmp    ffff800000811944 <FAT32_lookup+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475
					continue;
ffff800000811943:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472 (discriminator 2)
			for(x=0;x<5;x++)
ffff800000811944:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472 (discriminator 1)
ffff800000811948:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
ffff80000081194c:	7e 90                	jle    ffff8000008118de <FAT32_lookup+0x222>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
ffff80000081194e:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000811955:	eb 6a                	jmp    ffff8000008119c1 <FAT32_lookup+0x305>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:481
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
ffff800000811957:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081195b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081195e:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811961:	7e 15                	jle    ffff800000811978 <FAT32_lookup+0x2bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:481 (discriminator 1)
ffff800000811963:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811967:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000081196a:	48 63 d2             	movsxd rdx,edx
ffff80000081196d:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000811972:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000811976:	74 44                	je     ffff8000008119bc <FAT32_lookup+0x300>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000811978:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081197c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081197f:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811982:	0f 8f 6a 04 00 00    	jg     ffff800000811df2 <FAT32_lookup+0x736>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483 (discriminator 1)
ffff800000811988:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081198c:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000081198f:	48 63 d2             	movsxd rdx,edx
ffff800000811992:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff800000811997:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081199b:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000081199e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008119a1:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008119a4:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff8000008119a7:	48 98                	cdqe   
ffff8000008119a9:	48 01 f0             	add    rax,rsi
ffff8000008119ac:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008119af:	66 98                	cbw    
ffff8000008119b1:	66 39 c1             	cmp    cx,ax
ffff8000008119b4:	0f 85 38 04 00 00    	jne    ffff800000811df2 <FAT32_lookup+0x736>
ffff8000008119ba:	eb 01                	jmp    ffff8000008119bd <FAT32_lookup+0x301>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482
					continue;
ffff8000008119bc:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479 (discriminator 2)
			for(x=0;x<6;x++)
ffff8000008119bd:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479 (discriminator 1)
ffff8000008119c1:	83 7d e0 05          	cmp    DWORD PTR [rbp-0x20],0x5
ffff8000008119c5:	7e 90                	jle    ffff800000811957 <FAT32_lookup+0x29b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
ffff8000008119c7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008119ce:	eb 72                	jmp    ffff800000811a42 <FAT32_lookup+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:488
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
ffff8000008119d0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008119d4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008119d7:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008119da:	7e 19                	jle    ffff8000008119f5 <FAT32_lookup+0x339>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:488 (discriminator 1)
ffff8000008119dc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008119e0:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008119e3:	48 63 d2             	movsxd rdx,edx
ffff8000008119e6:	48 83 c2 08          	add    rdx,0x8
ffff8000008119ea:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff8000008119ef:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008119f3:	74 48                	je     ffff800000811a3d <FAT32_lookup+0x381>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
ffff8000008119f5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008119f9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008119fc:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008119ff:	0f 8f f0 03 00 00    	jg     ffff800000811df5 <FAT32_lookup+0x739>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490 (discriminator 1)
ffff800000811a05:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811a09:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811a0c:	48 63 d2             	movsxd rdx,edx
ffff800000811a0f:	48 83 c2 08          	add    rdx,0x8
ffff800000811a13:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000811a18:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811a1c:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000811a1f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811a22:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811a25:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000811a28:	48 98                	cdqe   
ffff800000811a2a:	48 01 f0             	add    rax,rsi
ffff800000811a2d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811a30:	66 98                	cbw    
ffff800000811a32:	66 39 c1             	cmp    cx,ax
ffff800000811a35:	0f 85 ba 03 00 00    	jne    ffff800000811df5 <FAT32_lookup+0x739>
ffff800000811a3b:	eb 01                	jmp    ffff800000811a3e <FAT32_lookup+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:489
					continue;
ffff800000811a3d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486 (discriminator 2)
			for(x=0;x<2;x++)
ffff800000811a3e:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486 (discriminator 1)
ffff800000811a42:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffff800000811a46:	7e 88                	jle    ffff8000008119d0 <FAT32_lookup+0x314>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:494
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
ffff800000811a48:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811a4c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811a4f:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811a52:	0f 8d 2e 04 00 00    	jge    ffff800000811e86 <FAT32_lookup+0x7ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:499
			{
				goto find_lookup_success;
			}

			tmpldentry --;
ffff800000811a58:	48 83 6d d0 20       	sub    QWORD PTR [rbp-0x30],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000811a5d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811a61:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811a65:	3c 0f                	cmp    al,0xf
ffff800000811a67:	75 0f                	jne    ffff800000811a78 <FAT32_lookup+0x3bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470 (discriminator 1)
ffff800000811a69:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811a6d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811a70:	3c e5                	cmp    al,0xe5
ffff800000811a72:	0f 85 5d fe ff ff    	jne    ffff8000008118d5 <FAT32_lookup+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:503
		}

		//short file/dir base name compare
		j = 0;
ffff800000811a78:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504
		for(x=0;x<8;x++)
ffff800000811a7f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000811a86:	e9 f4 01 00 00       	jmp    ffff800000811c7f <FAT32_lookup+0x5c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:506
		{
			switch(tmpdentry->DIR_Name[x])
ffff800000811a8b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811a8f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811a92:	48 98                	cdqe   
ffff800000811a94:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811a98:	0f b6 c0             	movzx  eax,al
ffff800000811a9b:	83 f8 7a             	cmp    eax,0x7a
ffff800000811a9e:	0f 8f d0 01 00 00    	jg     ffff800000811c74 <FAT32_lookup+0x5b8>
ffff800000811aa4:	83 f8 61             	cmp    eax,0x61
ffff800000811aa7:	0f 8d e6 00 00 00    	jge    ffff800000811b93 <FAT32_lookup+0x4d7>
ffff800000811aad:	83 f8 5a             	cmp    eax,0x5a
ffff800000811ab0:	0f 8f be 01 00 00    	jg     ffff800000811c74 <FAT32_lookup+0x5b8>
ffff800000811ab6:	83 f8 41             	cmp    eax,0x41
ffff800000811ab9:	0f 8d d4 00 00 00    	jge    ffff800000811b93 <FAT32_lookup+0x4d7>
ffff800000811abf:	83 f8 20             	cmp    eax,0x20
ffff800000811ac2:	74 1a                	je     ffff800000811ade <FAT32_lookup+0x422>
ffff800000811ac4:	83 f8 20             	cmp    eax,0x20
ffff800000811ac7:	0f 8c a7 01 00 00    	jl     ffff800000811c74 <FAT32_lookup+0x5b8>
ffff800000811acd:	83 e8 30             	sub    eax,0x30
ffff800000811ad0:	83 f8 09             	cmp    eax,0x9
ffff800000811ad3:	0f 87 9b 01 00 00    	ja     ffff800000811c74 <FAT32_lookup+0x5b8>
ffff800000811ad9:	e9 53 01 00 00       	jmp    ffff800000811c31 <FAT32_lookup+0x575>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:509
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000811ade:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811ae2:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811ae6:	0f b6 c0             	movzx  eax,al
ffff800000811ae9:	83 e0 10             	and    eax,0x10
ffff800000811aec:	85 c0                	test   eax,eax
ffff800000811aee:	75 50                	jne    ffff800000811b40 <FAT32_lookup+0x484>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:511
					{
						if(dest_dentry->name[j]=='.')
ffff800000811af0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811af4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811af7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811afa:	48 98                	cdqe   
ffff800000811afc:	48 01 d0             	add    rax,rdx
ffff800000811aff:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811b02:	3c 2e                	cmp    al,0x2e
ffff800000811b04:	0f 84 70 01 00 00    	je     ffff800000811c7a <FAT32_lookup+0x5be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:513
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811b0a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811b0e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811b11:	48 98                	cdqe   
ffff800000811b13:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811b17:	0f b6 d0             	movzx  edx,al
ffff800000811b1a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811b1e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811b21:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811b24:	48 98                	cdqe   
ffff800000811b26:	48 01 c8             	add    rax,rcx
ffff800000811b29:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811b2c:	0f be c0             	movsx  eax,al
ffff800000811b2f:	39 c2                	cmp    edx,eax
ffff800000811b31:	0f 85 c1 02 00 00    	jne    ffff800000811df8 <FAT32_lookup+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:515
						{
							j++;
ffff800000811b37:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:516
							break;
ffff800000811b3b:	e9 3b 01 00 00       	jmp    ffff800000811c7b <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:523
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811b40:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811b44:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811b47:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811b4a:	7d 32                	jge    ffff800000811b7e <FAT32_lookup+0x4c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:523 (discriminator 1)
ffff800000811b4c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811b50:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811b53:	48 98                	cdqe   
ffff800000811b55:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811b59:	0f b6 d0             	movzx  edx,al
ffff800000811b5c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811b60:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811b63:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811b66:	48 98                	cdqe   
ffff800000811b68:	48 01 c8             	add    rax,rcx
ffff800000811b6b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811b6e:	0f be c0             	movsx  eax,al
ffff800000811b71:	39 c2                	cmp    edx,eax
ffff800000811b73:	75 09                	jne    ffff800000811b7e <FAT32_lookup+0x4c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:525
						{
							j++;
ffff800000811b75:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:526
							break;
ffff800000811b79:	e9 fd 00 00 00       	jmp    ffff800000811c7b <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:528
						}
						else if(j == dest_dentry->name_length)
ffff800000811b7e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811b82:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811b85:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811b88:	0f 85 6d 02 00 00    	jne    ffff800000811dfb <FAT32_lookup+0x73f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:529
							continue;
ffff800000811b8e:	e9 e8 00 00 00       	jmp    ffff800000811c7b <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:536
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000811b93:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811b97:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000811b9b:	0f b6 c0             	movzx  eax,al
ffff800000811b9e:	83 e0 08             	and    eax,0x8
ffff800000811ba1:	85 c0                	test   eax,eax
ffff800000811ba3:	74 49                	je     ffff800000811bee <FAT32_lookup+0x532>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000811ba5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811ba9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811bac:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811baf:	0f 8d 49 02 00 00    	jge    ffff800000811dfe <FAT32_lookup+0x742>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537 (discriminator 1)
ffff800000811bb5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811bb9:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811bbc:	48 98                	cdqe   
ffff800000811bbe:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811bc2:	0f b6 c0             	movzx  eax,al
ffff800000811bc5:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000811bc8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811bcc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811bcf:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811bd2:	48 98                	cdqe   
ffff800000811bd4:	48 01 c8             	add    rax,rcx
ffff800000811bd7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811bda:	0f be c0             	movsx  eax,al
ffff800000811bdd:	39 c2                	cmp    edx,eax
ffff800000811bdf:	0f 85 19 02 00 00    	jne    ffff800000811dfe <FAT32_lookup+0x742>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:539
						{
							j++;
ffff800000811be5:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:540
							break;
ffff800000811be9:	e9 8d 00 00 00       	jmp    ffff800000811c7b <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:546
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811bee:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811bf2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811bf5:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811bf8:	0f 8d 03 02 00 00    	jge    ffff800000811e01 <FAT32_lookup+0x745>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:546 (discriminator 1)
ffff800000811bfe:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811c02:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811c05:	48 98                	cdqe   
ffff800000811c07:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811c0b:	0f b6 d0             	movzx  edx,al
ffff800000811c0e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811c12:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811c15:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811c18:	48 98                	cdqe   
ffff800000811c1a:	48 01 c8             	add    rax,rcx
ffff800000811c1d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811c20:	0f be c0             	movsx  eax,al
ffff800000811c23:	39 c2                	cmp    edx,eax
ffff800000811c25:	0f 85 d6 01 00 00    	jne    ffff800000811e01 <FAT32_lookup+0x745>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:548
						{
							j++;
ffff800000811c2b:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:549
							break;
ffff800000811c2f:	eb 4a                	jmp    ffff800000811c7b <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:556
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811c31:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811c35:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811c38:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811c3b:	0f 8d c3 01 00 00    	jge    ffff800000811e04 <FAT32_lookup+0x748>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:556 (discriminator 1)
ffff800000811c41:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811c45:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811c48:	48 98                	cdqe   
ffff800000811c4a:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811c4e:	0f b6 d0             	movzx  edx,al
ffff800000811c51:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811c55:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811c58:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811c5b:	48 98                	cdqe   
ffff800000811c5d:	48 01 c8             	add    rax,rcx
ffff800000811c60:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811c63:	0f be c0             	movsx  eax,al
ffff800000811c66:	39 c2                	cmp    edx,eax
ffff800000811c68:	0f 85 96 01 00 00    	jne    ffff800000811e04 <FAT32_lookup+0x748>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:558
					{
						j++;
ffff800000811c6e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:559
						break;
ffff800000811c72:	eb 07                	jmp    ffff800000811c7b <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:565
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
ffff800000811c74:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:566
					break;
ffff800000811c78:	eb 01                	jmp    ffff800000811c7b <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
							continue;
ffff800000811c7a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000811c7b:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504 (discriminator 1)
ffff800000811c7f:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
ffff800000811c83:	0f 8e 02 fe ff ff    	jle    ffff800000811a8b <FAT32_lookup+0x3cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000811c89:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811c8d:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811c91:	0f b6 c0             	movzx  eax,al
ffff800000811c94:	83 e0 10             	and    eax,0x10
ffff800000811c97:	85 c0                	test   eax,eax
ffff800000811c99:	0f 85 ea 01 00 00    	jne    ffff800000811e89 <FAT32_lookup+0x7cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:572
		{
			j++;
ffff800000811c9f:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573
			for(x=8;x<11;x++)
ffff800000811ca3:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
ffff800000811caa:	e9 2b 01 00 00       	jmp    ffff800000811dda <FAT32_lookup+0x71e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:575
			{
				switch(tmpdentry->DIR_Name[x])
ffff800000811caf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811cb3:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811cb6:	48 98                	cdqe   
ffff800000811cb8:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811cbc:	0f b6 c0             	movzx  eax,al
ffff800000811cbf:	83 f8 7a             	cmp    eax,0x7a
ffff800000811cc2:	0f 8f 3f 01 00 00    	jg     ffff800000811e07 <FAT32_lookup+0x74b>
ffff800000811cc8:	83 f8 61             	cmp    eax,0x61
ffff800000811ccb:	7d 2e                	jge    ffff800000811cfb <FAT32_lookup+0x63f>
ffff800000811ccd:	83 f8 5a             	cmp    eax,0x5a
ffff800000811cd0:	0f 8f 31 01 00 00    	jg     ffff800000811e07 <FAT32_lookup+0x74b>
ffff800000811cd6:	83 f8 41             	cmp    eax,0x41
ffff800000811cd9:	7d 20                	jge    ffff800000811cfb <FAT32_lookup+0x63f>
ffff800000811cdb:	83 f8 20             	cmp    eax,0x20
ffff800000811cde:	0f 84 c4 00 00 00    	je     ffff800000811da8 <FAT32_lookup+0x6ec>
ffff800000811ce4:	83 f8 20             	cmp    eax,0x20
ffff800000811ce7:	0f 8c 1a 01 00 00    	jl     ffff800000811e07 <FAT32_lookup+0x74b>
ffff800000811ced:	83 e8 30             	sub    eax,0x30
ffff800000811cf0:	83 f8 09             	cmp    eax,0x9
ffff800000811cf3:	0f 87 0e 01 00 00    	ja     ffff800000811e07 <FAT32_lookup+0x74b>
ffff800000811cf9:	eb 7e                	jmp    ffff800000811d79 <FAT32_lookup+0x6bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:579
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000811cfb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811cff:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000811d03:	0f b6 c0             	movzx  eax,al
ffff800000811d06:	83 e0 10             	and    eax,0x10
ffff800000811d09:	85 c0                	test   eax,eax
ffff800000811d0b:	74 39                	je     ffff800000811d46 <FAT32_lookup+0x68a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:580
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000811d0d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811d11:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811d14:	48 98                	cdqe   
ffff800000811d16:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811d1a:	0f b6 c0             	movzx  eax,al
ffff800000811d1d:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000811d20:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811d24:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811d27:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811d2a:	48 98                	cdqe   
ffff800000811d2c:	48 01 c8             	add    rax,rcx
ffff800000811d2f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811d32:	0f be c0             	movsx  eax,al
ffff800000811d35:	39 c2                	cmp    edx,eax
ffff800000811d37:	0f 85 cd 00 00 00    	jne    ffff800000811e0a <FAT32_lookup+0x74e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:582
							{
								j++;
ffff800000811d3d:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:583
								break;
ffff800000811d41:	e9 90 00 00 00       	jmp    ffff800000811dd6 <FAT32_lookup+0x71a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:589
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811d46:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811d4a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811d4d:	48 98                	cdqe   
ffff800000811d4f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811d53:	0f b6 d0             	movzx  edx,al
ffff800000811d56:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811d5a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811d5d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811d60:	48 98                	cdqe   
ffff800000811d62:	48 01 c8             	add    rax,rcx
ffff800000811d65:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811d68:	0f be c0             	movsx  eax,al
ffff800000811d6b:	39 c2                	cmp    edx,eax
ffff800000811d6d:	0f 85 9a 00 00 00    	jne    ffff800000811e0d <FAT32_lookup+0x751>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:591
							{
								j++;
ffff800000811d73:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:592
								break;
ffff800000811d77:	eb 5d                	jmp    ffff800000811dd6 <FAT32_lookup+0x71a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:599
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811d79:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811d7d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811d80:	48 98                	cdqe   
ffff800000811d82:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811d86:	0f b6 d0             	movzx  edx,al
ffff800000811d89:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811d8d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811d90:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811d93:	48 98                	cdqe   
ffff800000811d95:	48 01 c8             	add    rax,rcx
ffff800000811d98:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811d9b:	0f be c0             	movsx  eax,al
ffff800000811d9e:	39 c2                	cmp    edx,eax
ffff800000811da0:	75 6e                	jne    ffff800000811e10 <FAT32_lookup+0x754>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:601
						{
							j++;
ffff800000811da2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:602
							break;
ffff800000811da6:	eb 2e                	jmp    ffff800000811dd6 <FAT32_lookup+0x71a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:608
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811da8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811dac:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811daf:	48 98                	cdqe   
ffff800000811db1:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811db5:	0f b6 d0             	movzx  edx,al
ffff800000811db8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811dbc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811dbf:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811dc2:	48 98                	cdqe   
ffff800000811dc4:	48 01 c8             	add    rax,rcx
ffff800000811dc7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811dca:	0f be c0             	movsx  eax,al
ffff800000811dcd:	39 c2                	cmp    edx,eax
ffff800000811dcf:	75 42                	jne    ffff800000811e13 <FAT32_lookup+0x757>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:610
						{
							j++;
ffff800000811dd1:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:611
							break;
ffff800000811dd5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573 (discriminator 2)
			for(x=8;x<11;x++)
ffff800000811dd6:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573 (discriminator 1)
ffff800000811dda:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
ffff800000811dde:	0f 8e cb fe ff ff    	jle    ffff800000811caf <FAT32_lookup+0x5f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:621
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
ffff800000811de4:	e9 a0 00 00 00       	jmp    ffff800000811e89 <FAT32_lookup+0x7cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:462
			continue;
ffff800000811de9:	90                   	nop
ffff800000811dea:	eb 28                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464
			continue;
ffff800000811dec:	90                   	nop
ffff800000811ded:	eb 25                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477
					goto continue_cmp_fail;
ffff800000811def:	90                   	nop
ffff800000811df0:	eb 22                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484
					goto continue_cmp_fail;
ffff800000811df2:	90                   	nop
ffff800000811df3:	eb 1f                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:491
					goto continue_cmp_fail;
ffff800000811df5:	90                   	nop
ffff800000811df6:	eb 1c                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:519
							goto continue_cmp_fail;
ffff800000811df8:	90                   	nop
ffff800000811df9:	eb 19                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:531
							goto continue_cmp_fail;
ffff800000811dfb:	90                   	nop
ffff800000811dfc:	eb 16                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:543
							goto continue_cmp_fail;
ffff800000811dfe:	90                   	nop
ffff800000811dff:	eb 13                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:552
							goto continue_cmp_fail;
ffff800000811e01:	90                   	nop
ffff800000811e02:	eb 10                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:562
						goto continue_cmp_fail;
ffff800000811e04:	90                   	nop
ffff800000811e05:	eb 0d                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:617
						goto continue_cmp_fail;
ffff800000811e07:	90                   	nop
ffff800000811e08:	eb 0a                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:586
								goto continue_cmp_fail;
ffff800000811e0a:	90                   	nop
ffff800000811e0b:	eb 07                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:595
								goto continue_cmp_fail;
ffff800000811e0d:	90                   	nop
ffff800000811e0e:	eb 04                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:605
							goto continue_cmp_fail;
ffff800000811e10:	90                   	nop
ffff800000811e11:	eb 01                	jmp    ffff800000811e14 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:614
							goto continue_cmp_fail;
ffff800000811e13:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000811e14:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
ffff800000811e18:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 1)
ffff800000811e1d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000811e20:	48 63 d0             	movsxd rdx,eax
ffff800000811e23:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811e27:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811e2b:	48 39 c2             	cmp    rdx,rax
ffff800000811e2e:	0f 8c 4c fa ff ff    	jl     ffff800000811880 <FAT32_lookup+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:626

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000811e34:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811e37:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811e3b:	89 d6                	mov    esi,edx
ffff800000811e3d:	48 89 c7             	mov    rdi,rax
ffff800000811e40:	49 89 df             	mov    r15,rbx
ffff800000811e43:	48 b8 22 d7 fe ff ff 	movabs rax,0xfffffffffffed722
ffff800000811e4a:	ff ff ff 
ffff800000811e4d:	48 01 d8             	add    rax,rbx
ffff800000811e50:	ff d0                	call   rax
ffff800000811e52:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627
	if(cluster < 0x0ffffff7)
ffff800000811e55:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000811e5c:	77 05                	ja     ffff800000811e63 <FAT32_lookup+0x7a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:628
		goto next_cluster;
ffff800000811e5e:	e9 19 f9 ff ff       	jmp    ffff80000081177c <FAT32_lookup+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:630

    kmfree(buf);
ffff800000811e63:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811e67:	48 89 c7             	mov    rdi,rax
ffff800000811e6a:	49 89 df             	mov    r15,rbx
ffff800000811e6d:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000811e74:	ff ff ff 
ffff800000811e77:	48 01 d8             	add    rax,rbx
ffff800000811e7a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631
	return NULL;
ffff800000811e7c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811e81:	e9 45 02 00 00       	jmp    ffff8000008120cb <FAT32_lookup+0xa0f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:496
				goto find_lookup_success;
ffff800000811e86:	90                   	nop
ffff800000811e87:	eb 01                	jmp    ffff800000811e8a <FAT32_lookup+0x7ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:621
		goto find_lookup_success;
ffff800000811e89:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634

find_lookup_success:
	p = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff800000811e8a:	be 00 00 00 00       	mov    esi,0x0
ffff800000811e8f:	bf 38 00 00 00       	mov    edi,0x38
ffff800000811e94:	49 89 df             	mov    r15,rbx
ffff800000811e97:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811e9c:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000811ea3:	ff ff ff 
ffff800000811ea6:	48 01 da             	add    rdx,rbx
ffff800000811ea9:	ff d2                	call   rdx
ffff800000811eab:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635
	memset(p,0,sizeof(struct index_node));
ffff800000811eaf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811eb3:	ba 38 00 00 00       	mov    edx,0x38
ffff800000811eb8:	be 00 00 00 00       	mov    esi,0x0
ffff800000811ebd:	48 89 c7             	mov    rdi,rax
ffff800000811ec0:	49 89 df             	mov    r15,rbx
ffff800000811ec3:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000811eca:	ff ff ff 
ffff800000811ecd:	48 01 d8             	add    rax,rbx
ffff800000811ed0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636
	p->file_size = tmpdentry->DIR_FileSize;
ffff800000811ed2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811ed6:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff800000811ed9:	89 c2                	mov    edx,eax
ffff800000811edb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811edf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000811ee2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811ee6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811ee9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811eed:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811ef1:	48 01 d0             	add    rax,rdx
ffff800000811ef4:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000811ef8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811efc:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811f00:	48 89 c1             	mov    rcx,rax
ffff800000811f03:	48 89 d0             	mov    rax,rdx
ffff800000811f06:	ba 00 00 00 00       	mov    edx,0x0
ffff800000811f0b:	48 f7 f1             	div    rcx
ffff800000811f0e:	48 89 c2             	mov    rdx,rax
ffff800000811f11:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811f15:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
ffff800000811f19:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811f1d:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811f21:	0f b6 c0             	movzx  eax,al
ffff800000811f24:	83 e0 10             	and    eax,0x10
ffff800000811f27:	85 c0                	test   eax,eax
ffff800000811f29:	74 07                	je     ffff800000811f32 <FAT32_lookup+0x876>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 1)
ffff800000811f2b:	ba 02 00 00 00       	mov    edx,0x2
ffff800000811f30:	eb 05                	jmp    ffff800000811f37 <FAT32_lookup+0x87b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 2)
ffff800000811f32:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 4)
ffff800000811f37:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811f3b:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 4)
	p->sb = parent_inode->sb;
ffff800000811f3f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811f43:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff800000811f47:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811f4b:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
ffff800000811f4f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811f53:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff800000811f5a:	ff ff ff 
ffff800000811f5d:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811f61:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
ffff800000811f65:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811f69:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff800000811f70:	ff ff ff 
ffff800000811f73:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811f77:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:643 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff800000811f7b:	be 00 00 00 00       	mov    esi,0x0
ffff800000811f80:	bf 20 00 00 00       	mov    edi,0x20
ffff800000811f85:	49 89 df             	mov    r15,rbx
ffff800000811f88:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811f8d:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000811f94:	ff ff ff 
ffff800000811f97:	48 01 da             	add    rdx,rbx
ffff800000811f9a:	ff d2                	call   rdx
ffff800000811f9c:	48 89 c2             	mov    rdx,rax
ffff800000811f9f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811fa3:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000811fa7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811fab:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000811faf:	ba 20 00 00 00       	mov    edx,0x20
ffff800000811fb4:	be 00 00 00 00       	mov    esi,0x0
ffff800000811fb9:	48 89 c7             	mov    rdi,rax
ffff800000811fbc:	49 89 df             	mov    r15,rbx
ffff800000811fbf:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000811fc6:	ff ff ff 
ffff800000811fc9:	48 01 d8             	add    rax,rbx
ffff800000811fcc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	finode = p->private_index_info;
ffff800000811fce:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811fd2:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000811fd6:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:647 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
ffff800000811fda:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811fde:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000811fe2:	0f b7 c0             	movzx  eax,ax
ffff800000811fe5:	c1 e0 10             	shl    eax,0x10
ffff800000811fe8:	89 c2                	mov    edx,eax
ffff800000811fea:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811fee:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
ffff800000811ff2:	0f b7 c0             	movzx  eax,ax
ffff800000811ff5:	09 d0                	or     eax,edx
ffff800000811ff7:	48 98                	cdqe   
ffff800000811ff9:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff800000811ffe:	48 89 c2             	mov    rdx,rax
ffff800000812001:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812005:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)
	finode->dentry_location = cluster;
ffff800000812008:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081200b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081200f:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
ffff800000812013:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812017:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffff80000081201b:	48 c1 f8 05          	sar    rax,0x5
ffff80000081201f:	48 89 c2             	mov    rdx,rax
ffff800000812022:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812026:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:650 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
ffff80000081202a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081202e:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
ffff800000812032:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812036:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
ffff80000081203a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081203e:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
ffff800000812042:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812046:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
ffff80000081204a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081204e:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
ffff800000812052:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812056:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:653 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
ffff80000081205a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081205e:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff800000812062:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812066:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:655 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
ffff80000081206a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081206e:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000812072:	66 c1 e8 0c          	shr    ax,0xc
ffff800000812076:	66 85 c0             	test   ax,ax
ffff800000812079:	74 27                	je     ffff8000008120a2 <FAT32_lookup+0x9e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:655 (discriminator 1)
ffff80000081207b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081207f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812083:	83 e0 01             	and    eax,0x1
ffff800000812086:	48 85 c0             	test   rax,rax
ffff800000812089:	74 17                	je     ffff8000008120a2 <FAT32_lookup+0x9e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:657
	{
		p->attribute |= FS_ATTR_DEVICE;
ffff80000081208b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081208f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812093:	48 83 c8 04          	or     rax,0x4
ffff800000812097:	48 89 c2             	mov    rdx,rax
ffff80000081209a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081209e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:660
	}

	dest_dentry->dir_inode = p;
ffff8000008120a2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008120a6:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008120aa:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:661
    kmfree(buf);
ffff8000008120ae:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008120b2:	48 89 c7             	mov    rdi,rax
ffff8000008120b5:	49 89 df             	mov    r15,rbx
ffff8000008120b8:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff8000008120bf:	ff ff ff 
ffff8000008120c2:	48 01 d8             	add    rax,rbx
ffff8000008120c5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:662
	return dest_dentry;	
ffff8000008120c7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:663
}
ffff8000008120cb:	48 83 c4 60          	add    rsp,0x60
ffff8000008120cf:	5b                   	pop    rbx
ffff8000008120d0:	41 5f                	pop    r15
ffff8000008120d2:	5d                   	pop    rbp
ffff8000008120d3:	c3                   	ret    

ffff8000008120d4 <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:667


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff8000008120d4:	f3 0f 1e fa          	endbr64 
ffff8000008120d8:	55                   	push   rbp
ffff8000008120d9:	48 89 e5             	mov    rbp,rsp
ffff8000008120dc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008120dc <FAT32_mkdir+0x8>
ffff8000008120e3:	49 bb 4c 08 01 00 00 	movabs r11,0x1084c
ffff8000008120ea:	00 00 00 
ffff8000008120ed:	4c 01 d8             	add    rax,r11
ffff8000008120f0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008120f4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008120f8:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff8000008120fb:	90                   	nop
ffff8000008120fc:	5d                   	pop    rbp
ffff8000008120fd:	c3                   	ret    

ffff8000008120fe <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:671


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
ffff8000008120fe:	f3 0f 1e fa          	endbr64 
ffff800000812102:	55                   	push   rbp
ffff800000812103:	48 89 e5             	mov    rbp,rsp
ffff800000812106:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812106 <FAT32_rmdir+0x8>
ffff80000081210d:	49 bb 22 08 01 00 00 	movabs r11,0x10822
ffff800000812114:	00 00 00 
ffff800000812117:	4c 01 d8             	add    rax,r11
ffff80000081211a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081211e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000812122:	90                   	nop
ffff800000812123:	5d                   	pop    rbp
ffff800000812124:	c3                   	ret    

ffff800000812125 <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:674

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
ffff800000812125:	f3 0f 1e fa          	endbr64 
ffff800000812129:	55                   	push   rbp
ffff80000081212a:	48 89 e5             	mov    rbp,rsp
ffff80000081212d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081212d <FAT32_rename+0x8>
ffff800000812134:	49 bb fb 07 01 00 00 	movabs r11,0x107fb
ffff80000081213b:	00 00 00 
ffff80000081213e:	4c 01 d8             	add    rax,r11
ffff800000812141:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812145:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000812149:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081214d:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000812151:	90                   	nop
ffff800000812152:	5d                   	pop    rbp
ffff800000812153:	c3                   	ret    

ffff800000812154 <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:677

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff800000812154:	f3 0f 1e fa          	endbr64 
ffff800000812158:	55                   	push   rbp
ffff800000812159:	48 89 e5             	mov    rbp,rsp
ffff80000081215c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081215c <FAT32_getattr+0x8>
ffff800000812163:	49 bb cc 07 01 00 00 	movabs r11,0x107cc
ffff80000081216a:	00 00 00 
ffff80000081216d:	4c 01 d8             	add    rax,r11
ffff800000812170:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812174:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000812178:	90                   	nop
ffff800000812179:	5d                   	pop    rbp
ffff80000081217a:	c3                   	ret    

ffff80000081217b <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:680

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff80000081217b:	f3 0f 1e fa          	endbr64 
ffff80000081217f:	55                   	push   rbp
ffff800000812180:	48 89 e5             	mov    rbp,rsp
ffff800000812183:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812183 <FAT32_setattr+0x8>
ffff80000081218a:	49 bb a5 07 01 00 00 	movabs r11,0x107a5
ffff800000812191:	00 00 00 
ffff800000812194:	4c 01 d8             	add    rax,r11
ffff800000812197:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081219b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081219f:	90                   	nop
ffff8000008121a0:	5d                   	pop    rbp
ffff8000008121a1:	c3                   	ret    

ffff8000008121a2 <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:695
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
ffff8000008121a2:	f3 0f 1e fa          	endbr64 
ffff8000008121a6:	55                   	push   rbp
ffff8000008121a7:	48 89 e5             	mov    rbp,rsp
ffff8000008121aa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008121aa <FAT32_compare+0x8>
ffff8000008121b1:	49 bb 7e 07 01 00 00 	movabs r11,0x1077e
ffff8000008121b8:	00 00 00 
ffff8000008121bb:	4c 01 d8             	add    rax,r11
ffff8000008121be:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008121c2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008121c6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008121ca:	90                   	nop
ffff8000008121cb:	5d                   	pop    rbp
ffff8000008121cc:	c3                   	ret    

ffff8000008121cd <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:696
long FAT32_hash(struct dir_entry * dentry,char * filename){}
ffff8000008121cd:	f3 0f 1e fa          	endbr64 
ffff8000008121d1:	55                   	push   rbp
ffff8000008121d2:	48 89 e5             	mov    rbp,rsp
ffff8000008121d5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008121d5 <FAT32_hash+0x8>
ffff8000008121dc:	49 bb 53 07 01 00 00 	movabs r11,0x10753
ffff8000008121e3:	00 00 00 
ffff8000008121e6:	4c 01 d8             	add    rax,r11
ffff8000008121e9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008121ed:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008121f1:	90                   	nop
ffff8000008121f2:	5d                   	pop    rbp
ffff8000008121f3:	c3                   	ret    

ffff8000008121f4 <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:697
long FAT32_release(struct dir_entry * dentry){}
ffff8000008121f4:	f3 0f 1e fa          	endbr64 
ffff8000008121f8:	55                   	push   rbp
ffff8000008121f9:	48 89 e5             	mov    rbp,rsp
ffff8000008121fc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008121fc <FAT32_release+0x8>
ffff800000812203:	49 bb 2c 07 01 00 00 	movabs r11,0x1072c
ffff80000081220a:	00 00 00 
ffff80000081220d:	4c 01 d8             	add    rax,r11
ffff800000812210:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812214:	90                   	nop
ffff800000812215:	5d                   	pop    rbp
ffff800000812216:	c3                   	ret    

ffff800000812217 <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:698
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
ffff800000812217:	f3 0f 1e fa          	endbr64 
ffff80000081221b:	55                   	push   rbp
ffff80000081221c:	48 89 e5             	mov    rbp,rsp
ffff80000081221f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081221f <FAT32_iput+0x8>
ffff800000812226:	49 bb 09 07 01 00 00 	movabs r11,0x10709
ffff80000081222d:	00 00 00 
ffff800000812230:	4c 01 d8             	add    rax,r11
ffff800000812233:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812237:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081223b:	90                   	nop
ffff80000081223c:	5d                   	pop    rbp
ffff80000081223d:	c3                   	ret    

ffff80000081223e <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:710
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
ffff80000081223e:	f3 0f 1e fa          	endbr64 
ffff800000812242:	55                   	push   rbp
ffff800000812243:	48 89 e5             	mov    rbp,rsp
ffff800000812246:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812246 <fat32_write_superblock+0x8>
ffff80000081224d:	49 bb e2 06 01 00 00 	movabs r11,0x106e2
ffff800000812254:	00 00 00 
ffff800000812257:	4c 01 d8             	add    rax,r11
ffff80000081225a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081225e:	90                   	nop
ffff80000081225f:	5d                   	pop    rbp
ffff800000812260:	c3                   	ret    

ffff800000812261 <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:713

void fat32_put_superblock(struct super_block * sb)
{
ffff800000812261:	f3 0f 1e fa          	endbr64 
ffff800000812265:	55                   	push   rbp
ffff800000812266:	48 89 e5             	mov    rbp,rsp
ffff800000812269:	41 57                	push   r15
ffff80000081226b:	53                   	push   rbx
ffff80000081226c:	48 83 ec 10          	sub    rsp,0x10
ffff800000812270:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812270 <fat32_put_superblock+0xf>
ffff800000812277:	49 bb b8 06 01 00 00 	movabs r11,0x106b8
ffff80000081227e:	00 00 00 
ffff800000812281:	4c 01 db             	add    rbx,r11
ffff800000812284:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714
    kmfree(sb->private_sb_info);
ffff800000812288:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081228c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812290:	48 89 c7             	mov    rdi,rax
ffff800000812293:	49 89 df             	mov    r15,rbx
ffff800000812296:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff80000081229d:	ff ff ff 
ffff8000008122a0:	48 01 d8             	add    rax,rbx
ffff8000008122a3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
    kmfree(sb->root->dir_inode->private_index_info);
ffff8000008122a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008122a9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008122ac:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008122b0:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008122b4:	48 89 c7             	mov    rdi,rax
ffff8000008122b7:	49 89 df             	mov    r15,rbx
ffff8000008122ba:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff8000008122c1:	ff ff ff 
ffff8000008122c4:	48 01 d8             	add    rax,rbx
ffff8000008122c7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:716
    kmfree(sb->root->dir_inode);
ffff8000008122c9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008122cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008122d0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008122d4:	48 89 c7             	mov    rdi,rax
ffff8000008122d7:	49 89 df             	mov    r15,rbx
ffff8000008122da:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff8000008122e1:	ff ff ff 
ffff8000008122e4:	48 01 d8             	add    rax,rbx
ffff8000008122e7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:717
    kmfree(sb->root);
ffff8000008122e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008122ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008122f0:	48 89 c7             	mov    rdi,rax
ffff8000008122f3:	49 89 df             	mov    r15,rbx
ffff8000008122f6:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff8000008122fd:	ff ff ff 
ffff800000812300:	48 01 d8             	add    rax,rbx
ffff800000812303:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:718
    kmfree(sb);
ffff800000812305:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812309:	48 89 c7             	mov    rdi,rax
ffff80000081230c:	49 89 df             	mov    r15,rbx
ffff80000081230f:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000812316:	ff ff ff 
ffff800000812319:	48 01 d8             	add    rax,rbx
ffff80000081231c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719
}
ffff80000081231e:	90                   	nop
ffff80000081231f:	48 83 c4 10          	add    rsp,0x10
ffff800000812323:	5b                   	pop    rbx
ffff800000812324:	41 5f                	pop    r15
ffff800000812326:	5d                   	pop    rbp
ffff800000812327:	c3                   	ret    

ffff800000812328 <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:722

void fat32_write_inode(struct index_node * inode)
{
ffff800000812328:	f3 0f 1e fa          	endbr64 
ffff80000081232c:	55                   	push   rbp
ffff80000081232d:	48 89 e5             	mov    rbp,rsp
ffff800000812330:	41 57                	push   r15
ffff800000812332:	53                   	push   rbx
ffff800000812333:	48 83 ec 40          	sub    rsp,0x40
ffff800000812337:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812337 <fat32_write_inode+0xf>
ffff80000081233e:	49 bb f1 05 01 00 00 	movabs r11,0x105f1
ffff800000812345:	00 00 00 
ffff800000812348:	4c 01 db             	add    rbx,r11
ffff80000081234b:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723
	struct FAT32_Directory * fdentry = NULL;
ffff80000081234f:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000812356:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:724
	struct FAT32_Directory * buf = NULL;
ffff800000812357:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000081235e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:725
	struct FAT32_inode_info * finode = inode->private_index_info;
ffff80000081235f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812363:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000812367:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:726
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
ffff80000081236b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081236f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812373:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812377:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:727
	unsigned long sector = 0;
ffff80000081237b:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000812382:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:729

	if(finode->dentry_location == 0)
ffff800000812383:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812387:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000081238b:	48 85 c0             	test   rax,rax
ffff80000081238e:	75 2d                	jne    ffff8000008123bd <fat32_write_inode+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:731
	{
		printf("FS ERROR:write root inode!\n");	
ffff800000812390:	48 b8 64 da ff ff ff 	movabs rax,0xffffffffffffda64
ffff800000812397:	ff ff ff 
ffff80000081239a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081239e:	48 89 c7             	mov    rdi,rax
ffff8000008123a1:	49 89 df             	mov    r15,rbx
ffff8000008123a4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008123a9:	48 ba 94 ee fd ff ff 	movabs rdx,0xfffffffffffdee94
ffff8000008123b0:	ff ff ff 
ffff8000008123b3:	48 01 da             	add    rdx,rbx
ffff8000008123b6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
		return ;
ffff8000008123b8:	e9 8b 01 00 00       	jmp    ffff800000812548 <fat32_write_inode+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:735
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
ffff8000008123bd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008123c1:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff8000008123c5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008123c9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008123cd:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff8000008123d1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008123d5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008123d9:	48 0f af c2          	imul   rax,rdx
ffff8000008123dd:	48 01 c8             	add    rax,rcx
ffff8000008123e0:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:736
	buf = (struct FAT32_Directory *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff8000008123e4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008123e8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008123ec:	be 00 00 00 00       	mov    esi,0x0
ffff8000008123f1:	48 89 c7             	mov    rdi,rax
ffff8000008123f4:	49 89 df             	mov    r15,rbx
ffff8000008123f7:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008123fc:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000812403:	ff ff ff 
ffff800000812406:	48 01 da             	add    rdx,rbx
ffff800000812409:	ff d2                	call   rdx
ffff80000081240b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:737
	memset(buf,0,fsbi->bytes_per_cluster);
ffff80000081240f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812413:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812417:	89 c2                	mov    edx,eax
ffff800000812419:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081241d:	be 00 00 00 00       	mov    esi,0x0
ffff800000812422:	48 89 c7             	mov    rdi,rax
ffff800000812425:	49 89 df             	mov    r15,rbx
ffff800000812428:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff80000081242f:	ff ff ff 
ffff800000812432:	48 01 d8             	add    rax,rbx
ffff800000812435:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:738
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff800000812437:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081243b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081243f:	89 c1                	mov    ecx,eax
ffff800000812441:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812445:	89 c2                	mov    edx,eax
ffff800000812447:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081244b:	49 89 c0             	mov    r8,rax
ffff80000081244e:	be 00 00 00 00       	mov    esi,0x0
ffff800000812453:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812458:	49 89 df             	mov    r15,rbx
ffff80000081245b:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff800000812462:	ff ff ff 
ffff800000812465:	48 01 d8             	add    rax,rbx
ffff800000812468:	ff d0                	call   rax
ffff80000081246a:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739
    chk_result(r);
ffff80000081246d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000812470:	89 c7                	mov    edi,eax
ffff800000812472:	49 89 df             	mov    r15,rbx
ffff800000812475:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff80000081247c:	ff ff ff 
ffff80000081247f:	48 01 d8             	add    rax,rbx
ffff800000812482:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
    fdentry = buf+finode->dentry_position;
ffff800000812484:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812488:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081248c:	48 c1 e0 05          	shl    rax,0x5
ffff800000812490:	48 89 c2             	mov    rdx,rax
ffff800000812493:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812497:	48 01 d0             	add    rax,rdx
ffff80000081249a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
ffff80000081249e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008124a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008124a5:	89 c2                	mov    edx,eax
ffff8000008124a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008124ab:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
ffff8000008124ae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008124b2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008124b5:	89 c2                	mov    edx,eax
ffff8000008124b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008124bb:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:745
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
ffff8000008124bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008124c3:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008124c7:	66 25 00 f0          	and    ax,0xf000
ffff8000008124cb:	89 c2                	mov    edx,eax
ffff8000008124cd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008124d1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008124d4:	48 c1 e8 10          	shr    rax,0x10
ffff8000008124d8:	09 c2                	or     edx,eax
ffff8000008124da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008124de:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:747

	int r1=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff8000008124e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008124e6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008124ea:	89 c1                	mov    ecx,eax
ffff8000008124ec:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008124f0:	89 c2                	mov    edx,eax
ffff8000008124f2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008124f6:	49 89 c0             	mov    r8,rax
ffff8000008124f9:	be 01 00 00 00       	mov    esi,0x1
ffff8000008124fe:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812503:	49 89 df             	mov    r15,rbx
ffff800000812506:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000081250d:	ff ff ff 
ffff800000812510:	48 01 d8             	add    rax,rbx
ffff800000812513:	ff d0                	call   rax
ffff800000812515:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:748
    chk_result(r1);
ffff800000812518:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff80000081251b:	89 c7                	mov    edi,eax
ffff80000081251d:	49 89 df             	mov    r15,rbx
ffff800000812520:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff800000812527:	ff ff ff 
ffff80000081252a:	48 01 d8             	add    rax,rbx
ffff80000081252d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:749
    kmfree(buf);
ffff80000081252f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812533:	48 89 c7             	mov    rdi,rax
ffff800000812536:	49 89 df             	mov    r15,rbx
ffff800000812539:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000812540:	ff ff ff 
ffff800000812543:	48 01 d8             	add    rax,rbx
ffff800000812546:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:750
}
ffff800000812548:	48 83 c4 40          	add    rsp,0x40
ffff80000081254c:	5b                   	pop    rbx
ffff80000081254d:	41 5f                	pop    r15
ffff80000081254f:	5d                   	pop    rbp
ffff800000812550:	c3                   	ret    

ffff800000812551 <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:761

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff800000812551:	f3 0f 1e fa          	endbr64 
ffff800000812555:	55                   	push   rbp
ffff800000812556:	48 89 e5             	mov    rbp,rsp
ffff800000812559:	41 57                	push   r15
ffff80000081255b:	53                   	push   rbx
ffff80000081255c:	48 83 ec 50          	sub    rsp,0x50
ffff800000812560:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812560 <fat32_read_superblock+0xf>
ffff800000812567:	49 bb c8 03 01 00 00 	movabs r11,0x103c8
ffff80000081256e:	00 00 00 
ffff800000812571:	4c 01 db             	add    rbx,r11
ffff800000812574:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff800000812578:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:762
	struct super_block * sbp = NULL;
ffff80000081257c:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000812583:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763
	struct FAT32_inode_info * finode = NULL;
ffff800000812584:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000081258b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:764
	struct FAT32_BootSector * fbs = NULL;
ffff80000081258c:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000812593:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:765
	struct FAT32_sb_info * fsbi = NULL;
ffff800000812594:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000081259b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:768

	////super block
	sbp = (struct super_block *) kmalloc(sizeof(struct super_block), 0);
ffff80000081259c:	be 00 00 00 00       	mov    esi,0x0
ffff8000008125a1:	bf 18 00 00 00       	mov    edi,0x18
ffff8000008125a6:	49 89 df             	mov    r15,rbx
ffff8000008125a9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008125ae:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff8000008125b5:	ff ff ff 
ffff8000008125b8:	48 01 da             	add    rdx,rbx
ffff8000008125bb:	ff d2                	call   rdx
ffff8000008125bd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:769
	memset(sbp,0,sizeof(struct super_block));
ffff8000008125c1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008125c5:	ba 18 00 00 00       	mov    edx,0x18
ffff8000008125ca:	be 00 00 00 00       	mov    esi,0x0
ffff8000008125cf:	48 89 c7             	mov    rdi,rax
ffff8000008125d2:	49 89 df             	mov    r15,rbx
ffff8000008125d5:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff8000008125dc:	ff ff ff 
ffff8000008125df:	48 01 d8             	add    rax,rbx
ffff8000008125e2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771

	sbp->sb_ops = &FAT32_sb_ops;
ffff8000008125e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008125e8:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff8000008125ef:	ff ff ff 
ffff8000008125f2:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008125f6:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
	sbp->private_sb_info = (struct FAT32_sb_info *) kmalloc(sizeof(struct FAT32_sb_info), 0);
ffff8000008125fa:	be 00 00 00 00       	mov    esi,0x0
ffff8000008125ff:	bf 60 00 00 00       	mov    edi,0x60
ffff800000812604:	49 89 df             	mov    r15,rbx
ffff800000812607:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081260c:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000812613:	ff ff ff 
ffff800000812616:	48 01 da             	add    rdx,rbx
ffff800000812619:	ff d2                	call   rdx
ffff80000081261b:	48 89 c2             	mov    rdx,rax
ffff80000081261e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812622:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:773
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
ffff800000812626:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081262a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081262e:	ba 60 00 00 00       	mov    edx,0x60
ffff800000812633:	be 00 00 00 00       	mov    esi,0x0
ffff800000812638:	48 89 c7             	mov    rdi,rax
ffff80000081263b:	49 89 df             	mov    r15,rbx
ffff80000081263e:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000812645:	ff ff ff 
ffff800000812648:	48 01 d8             	add    rax,rbx
ffff80000081264b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
ffff80000081264d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000812651:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
 	fsbi = sbp->private_sb_info;
ffff800000812655:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812659:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081265d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->start_sector = DPTE->start_LBA;
ffff800000812661:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812665:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812668:	89 c2                	mov    edx,eax
ffff80000081266a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081266e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->sector_count = DPTE->sectors_limit;
ffff800000812671:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812675:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000812678:	89 c2                	mov    edx,eax
ffff80000081267a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081267e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
ffff800000812682:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812686:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff80000081268a:	0f b6 d0             	movzx  edx,al
ffff80000081268d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812691:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
ffff800000812695:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812699:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff80000081269d:	0f b6 d0             	movzx  edx,al
ffff8000008126a0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008126a4:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff8000008126a8:	0f b7 c0             	movzx  eax,ax
ffff8000008126ab:	0f af c2             	imul   eax,edx
ffff8000008126ae:	48 63 d0             	movsxd rdx,eax
ffff8000008126b1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008126b5:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
ffff8000008126b9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008126bd:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff8000008126c1:	0f b7 d0             	movzx  edx,ax
ffff8000008126c4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008126c8:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:783
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
ffff8000008126cc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008126d0:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff8000008126d3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008126d7:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff8000008126db:	0f b7 c0             	movzx  eax,ax
ffff8000008126de:	8d 0c 02             	lea    ecx,[rdx+rax*1]
ffff8000008126e1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008126e5:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff8000008126e8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008126ec:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff8000008126f0:	0f b6 c0             	movzx  eax,al
ffff8000008126f3:	0f af c2             	imul   eax,edx
ffff8000008126f6:	01 c8                	add    eax,ecx
ffff8000008126f8:	89 c2                	mov    edx,eax
ffff8000008126fa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008126fe:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:784
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
ffff800000812702:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812706:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000812709:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081270d:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff800000812711:	0f b7 c0             	movzx  eax,ax
ffff800000812714:	01 d0                	add    eax,edx
ffff800000812716:	89 c2                	mov    edx,eax
ffff800000812718:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081271c:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:785
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
ffff800000812720:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812724:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000812727:	89 c2                	mov    edx,eax
ffff800000812729:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081272d:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:786
	fsbi->NumFATs = fbs->BPB_NumFATs;
ffff800000812731:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812735:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000812739:	0f b6 d0             	movzx  edx,al
ffff80000081273c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812740:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:787
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
ffff800000812744:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812748:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff80000081274c:	0f b7 d0             	movzx  edx,ax
ffff80000081274f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812753:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:788
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
ffff800000812757:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081275b:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff80000081275f:	0f b7 d0             	movzx  edx,ax
ffff800000812762:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812766:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:790
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
ffff80000081276a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081276e:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
ffff800000812771:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812775:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000812779:	0f b7 d0             	movzx  edx,ax
ffff80000081277c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812780:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000812784:	0f b7 c0             	movzx  eax,ax
ffff800000812787:	89 c6                	mov    esi,eax
ffff800000812789:	48 b8 80 da ff ff ff 	movabs rax,0xffffffffffffda80
ffff800000812790:	ff ff ff 
ffff800000812793:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000812797:	48 89 c7             	mov    rdi,rax
ffff80000081279a:	49 89 df             	mov    r15,rbx
ffff80000081279d:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008127a2:	49 b8 94 ee fd ff ff 	movabs r8,0xfffffffffffdee94
ffff8000008127a9:	ff ff ff 
ffff8000008127ac:	49 01 d8             	add    r8,rbx
ffff8000008127af:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:793
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmalloc(sizeof(struct FAT32_FSInfo), 0);
ffff8000008127b2:	be 00 00 00 00       	mov    esi,0x0
ffff8000008127b7:	bf 00 02 00 00       	mov    edi,0x200
ffff8000008127bc:	49 89 df             	mov    r15,rbx
ffff8000008127bf:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008127c4:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff8000008127cb:	ff ff ff 
ffff8000008127ce:	48 01 da             	add    rdx,rbx
ffff8000008127d1:	ff d2                	call   rdx
ffff8000008127d3:	48 89 c2             	mov    rdx,rax
ffff8000008127d6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008127da:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	memset(fsbi->fat_fsinfo,0,512);
ffff8000008127de:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008127e2:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff8000008127e6:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008127eb:	be 00 00 00 00       	mov    esi,0x0
ffff8000008127f0:	48 89 c7             	mov    rdi,rax
ffff8000008127f3:	49 89 df             	mov    r15,rbx
ffff8000008127f6:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff8000008127fd:	ff ff ff 
ffff800000812800:	48 01 d8             	add    rax,rbx
ffff800000812803:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:795
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,DPTE->start_LBA + fbs->BPB_FSInfo,1,(unsigned char *)fsbi->fat_fsinfo);
ffff800000812805:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812809:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff80000081280d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812811:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff800000812814:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812818:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff80000081281c:	0f b7 c0             	movzx  eax,ax
ffff80000081281f:	01 c8                	add    eax,ecx
ffff800000812821:	49 89 d0             	mov    r8,rdx
ffff800000812824:	b9 01 00 00 00       	mov    ecx,0x1
ffff800000812829:	89 c2                	mov    edx,eax
ffff80000081282b:	be 00 00 00 00       	mov    esi,0x0
ffff800000812830:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812835:	49 89 df             	mov    r15,rbx
ffff800000812838:	48 b8 92 c3 fe ff ff 	movabs rax,0xfffffffffffec392
ffff80000081283f:	ff ff ff 
ffff800000812842:	48 01 d8             	add    rax,rbx
ffff800000812845:	ff d0                	call   rax
ffff800000812847:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:796
    chk_result(r);
ffff80000081284a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000081284d:	89 c7                	mov    edi,eax
ffff80000081284f:	49 89 df             	mov    r15,rbx
ffff800000812852:	48 b8 55 ce fe ff ff 	movabs rax,0xfffffffffffece55
ffff800000812859:	ff ff ff 
ffff80000081285c:	48 01 d8             	add    rax,rbx
ffff80000081285f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:797
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
ffff800000812861:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812865:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000812869:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
ffff80000081286f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812873:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000812877:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
ffff80000081287d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812881:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000812885:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812887:	89 c6                	mov    esi,eax
ffff800000812889:	48 b8 c8 da ff ff ff 	movabs rax,0xffffffffffffdac8
ffff800000812890:	ff ff ff 
ffff800000812893:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000812897:	48 89 c7             	mov    rdi,rax
ffff80000081289a:	49 89 df             	mov    r15,rbx
ffff80000081289d:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008128a2:	49 b8 94 ee fd ff ff 	movabs r8,0xfffffffffffdee94
ffff8000008128a9:	ff ff ff 
ffff8000008128ac:	49 01 d8             	add    r8,rbx
ffff8000008128af:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:800
	
	////directory entry
	sbp->root = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff8000008128b2:	be 00 00 00 00       	mov    esi,0x0
ffff8000008128b7:	bf 58 00 00 00       	mov    edi,0x58
ffff8000008128bc:	49 89 df             	mov    r15,rbx
ffff8000008128bf:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008128c4:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff8000008128cb:	ff ff ff 
ffff8000008128ce:	48 01 da             	add    rdx,rbx
ffff8000008128d1:	ff d2                	call   rdx
ffff8000008128d3:	48 89 c2             	mov    rdx,rax
ffff8000008128d6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008128da:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801
	memset(sbp->root,0,sizeof(struct dir_entry));
ffff8000008128dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008128e1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008128e4:	ba 58 00 00 00       	mov    edx,0x58
ffff8000008128e9:	be 00 00 00 00       	mov    esi,0x0
ffff8000008128ee:	48 89 c7             	mov    rdi,rax
ffff8000008128f1:	49 89 df             	mov    r15,rbx
ffff8000008128f4:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff8000008128fb:	ff ff ff 
ffff8000008128fe:	48 01 d8             	add    rax,rbx
ffff800000812901:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:803

	list_init(&sbp->root->child_node);
ffff800000812903:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812907:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081290a:	48 83 c0 10          	add    rax,0x10
ffff80000081290e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000812912:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812916:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000081291d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812921:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000812928:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000812929:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:804
	list_init(&sbp->root->subdirs_list);
ffff80000081292a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081292e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812931:	48 83 c0 28          	add    rax,0x28
ffff800000812935:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000812939:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081293d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000812944:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812948:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000081294f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000812950:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:805
	sbp->root->parent = sbp->root;
ffff800000812951:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812955:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812958:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000081295c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000081295f:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806
	sbp->root->dir_ops = &FAT32_dentry_ops;
ffff800000812963:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812967:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081296a:	48 ba 20 ff ff ff ff 	movabs rdx,0xffffffffffffff20
ffff800000812971:	ff ff ff 
ffff800000812974:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812978:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	sbp->root->name = (char *) kmalloc(2, 0);
ffff80000081297c:	be 00 00 00 00       	mov    esi,0x0
ffff800000812981:	bf 02 00 00 00       	mov    edi,0x2
ffff800000812986:	49 89 df             	mov    r15,rbx
ffff800000812989:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081298e:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000812995:	ff ff ff 
ffff800000812998:	48 01 da             	add    rdx,rbx
ffff80000081299b:	ff d2                	call   rdx
ffff80000081299d:	48 89 c2             	mov    rdx,rax
ffff8000008129a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008129a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008129a7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:808
	sbp->root->name[0] = '/';
ffff8000008129aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008129ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008129b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008129b4:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:809
	sbp->root->name_length = 1;
ffff8000008129b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008129bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008129be:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812

	////index node
	sbp->root->dir_inode = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff8000008129c5:	be 00 00 00 00       	mov    esi,0x0
ffff8000008129ca:	bf 38 00 00 00       	mov    edi,0x38
ffff8000008129cf:	49 89 df             	mov    r15,rbx
ffff8000008129d2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008129d7:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff8000008129de:	ff ff ff 
ffff8000008129e1:	48 01 da             	add    rdx,rbx
ffff8000008129e4:	ff d2                	call   rdx
ffff8000008129e6:	48 89 c2             	mov    rdx,rax
ffff8000008129e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008129ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008129f0:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:813
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
ffff8000008129f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008129f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008129fb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008129ff:	ba 38 00 00 00       	mov    edx,0x38
ffff800000812a04:	be 00 00 00 00       	mov    esi,0x0
ffff800000812a09:	48 89 c7             	mov    rdi,rax
ffff800000812a0c:	49 89 df             	mov    r15,rbx
ffff800000812a0f:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000812a16:	ff ff ff 
ffff800000812a19:	48 01 d8             	add    rax,rbx
ffff800000812a1c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:814
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
ffff800000812a1e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812a22:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812a25:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812a29:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff800000812a30:	ff ff ff 
ffff800000812a33:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812a37:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:815
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
ffff800000812a3b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812a3f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812a42:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812a46:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff800000812a4d:	ff ff ff 
ffff800000812a50:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812a54:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816
	sbp->root->dir_inode->file_size = 0;
ffff800000812a58:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812a5c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812a5f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812a63:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000812a6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812a6e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812a71:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812a75:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812a78:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812a7c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812a80:	48 01 d0             	add    rax,rdx
ffff800000812a83:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000812a87:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812a8b:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812a8f:	48 89 c6             	mov    rsi,rax
ffff800000812a92:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812a96:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812a99:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffff800000812a9d:	48 89 d0             	mov    rax,rdx
ffff800000812aa0:	ba 00 00 00 00       	mov    edx,0x0
ffff800000812aa5:	48 f7 f6             	div    rsi
ffff800000812aa8:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:818
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
ffff800000812aac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812ab0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812ab3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812ab7:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff800000812abe:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:819
	sbp->root->dir_inode->sb = sbp;
ffff800000812abf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812ac3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812ac6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812aca:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000812ace:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff800000812ad2:	be 00 00 00 00       	mov    esi,0x0
ffff800000812ad7:	bf 20 00 00 00       	mov    edi,0x20
ffff800000812adc:	49 89 df             	mov    r15,rbx
ffff800000812adf:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812ae4:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000812aeb:	ff ff ff 
ffff800000812aee:	48 01 da             	add    rdx,rbx
ffff800000812af1:	ff d2                	call   rdx
ffff800000812af3:	48 89 c2             	mov    rdx,rax
ffff800000812af6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812afa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812afd:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812b01:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000812b05:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b09:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812b0c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812b10:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000812b14:	ba 20 00 00 00       	mov    edx,0x20
ffff800000812b19:	be 00 00 00 00       	mov    esi,0x0
ffff800000812b1e:	48 89 c7             	mov    rdi,rax
ffff800000812b21:	49 89 df             	mov    r15,rbx
ffff800000812b24:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000812b2b:	ff ff ff 
ffff800000812b2e:	48 01 d8             	add    rax,rbx
ffff800000812b31:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
ffff800000812b33:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b37:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812b3a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812b3e:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000812b42:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:825
	finode->first_cluster = fbs->BPB_RootClus;
ffff800000812b46:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812b4a:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff800000812b4d:	89 c2                	mov    edx,eax
ffff800000812b4f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b53:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:826
	finode->dentry_location = 0;
ffff800000812b56:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b5a:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff800000812b61:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827
	finode->dentry_position = 0; 
ffff800000812b62:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b66:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000812b6d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:828
	finode->create_date = 0;
ffff800000812b6e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b72:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:829
	finode->create_time = 0;
ffff800000812b78:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b7c:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:830
	finode->write_date = 0;
ffff800000812b82:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b86:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:831
	finode->write_time = 0;
ffff800000812b8c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b90:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:833

	return sbp;
ffff800000812b96:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:834
}
ffff800000812b9a:	48 83 c4 50          	add    rsp,0x50
ffff800000812b9e:	5b                   	pop    rbx
ffff800000812b9f:	41 5f                	pop    r15
ffff800000812ba1:	5d                   	pop    rbp
ffff800000812ba2:	c3                   	ret    

ffff800000812ba3 <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:846
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};

void DISK1_FAT32_FS_init()
{
ffff800000812ba3:	f3 0f 1e fa          	endbr64 
ffff800000812ba7:	55                   	push   rbp
ffff800000812ba8:	48 89 e5             	mov    rbp,rsp
ffff800000812bab:	41 57                	push   r15
ffff800000812bad:	53                   	push   rbx
ffff800000812bae:	48 81 ec 10 04 00 00 	sub    rsp,0x410
ffff800000812bb5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812bb5 <DISK1_FAT32_FS_init+0x12>
ffff800000812bbc:	49 bb 73 fd 00 00 00 	movabs r11,0xfd73
ffff800000812bc3:	00 00 00 
ffff800000812bc6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:849
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
ffff800000812bc9:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000812bd0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:850
	struct Disk_Partition_Table DPT = {0};
ffff800000812bd1:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000812bd8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812bdd:	b9 40 00 00 00       	mov    ecx,0x40
ffff800000812be2:	48 89 d7             	mov    rdi,rdx
ffff800000812be5:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:852

	register_filesystem(&FAT32_fs_type);
ffff800000812be8:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000812bef:	ff ff ff 
ffff800000812bf2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000812bf6:	48 89 c7             	mov    rdi,rax
ffff800000812bf9:	49 89 df             	mov    r15,rbx
ffff800000812bfc:	48 b8 c7 9e fe ff ff 	movabs rax,0xfffffffffffe9ec7
ffff800000812c03:	ff ff ff 
ffff800000812c06:	48 01 d8             	add    rax,rbx
ffff800000812c09:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:854
	
	memset(buf,0,512);
ffff800000812c0b:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000812c12:	ba 00 02 00 00       	mov    edx,0x200
ffff800000812c17:	be 00 00 00 00       	mov    esi,0x0
ffff800000812c1c:	48 89 c7             	mov    rdi,rax
ffff800000812c1f:	49 89 df             	mov    r15,rbx
ffff800000812c22:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000812c29:	ff ff ff 
ffff800000812c2c:	48 01 d8             	add    rax,rbx
ffff800000812c2f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:856

    read_disk(DISK_MAJOR_MAJOR, 0, 1, buf);/*rint r= equest(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
ffff800000812c31:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000812c38:	48 89 c1             	mov    rcx,rax
ffff800000812c3b:	ba 01 00 00 00       	mov    edx,0x1
ffff800000812c40:	be 00 00 00 00       	mov    esi,0x0
ffff800000812c45:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812c4a:	49 89 df             	mov    r15,rbx
ffff800000812c4d:	48 b8 81 cc fe ff ff 	movabs rax,0xfffffffffffecc81
ffff800000812c54:	ff ff ff 
ffff800000812c57:	48 01 d8             	add    rax,rbx
ffff800000812c5a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:858
    chk_result(r);*/
    DPT = *(struct Disk_Partition_Table *)buf;
ffff800000812c5c:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000812c63:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
ffff800000812c6a:	48 89 d6             	mov    rsi,rdx
ffff800000812c6d:	ba 40 00 00 00       	mov    edx,0x40
ffff800000812c72:	48 89 c7             	mov    rdi,rax
ffff800000812c75:	48 89 d1             	mov    rcx,rdx
ffff800000812c78:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:859
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
ffff800000812c7b:	0f b6 85 a2 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x25e]
ffff800000812c82:	0f b6 d0             	movzx  edx,al
ffff800000812c85:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000812c8b:	89 c6                	mov    esi,eax
ffff800000812c8d:	48 b8 10 db ff ff ff 	movabs rax,0xffffffffffffdb10
ffff800000812c94:	ff ff ff 
ffff800000812c97:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000812c9b:	48 89 c7             	mov    rdi,rax
ffff800000812c9e:	49 89 df             	mov    r15,rbx
ffff800000812ca1:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812ca6:	48 b9 94 ee fd ff ff 	movabs rcx,0xfffffffffffdee94
ffff800000812cad:	ff ff ff 
ffff800000812cb0:	48 01 d9             	add    rcx,rbx
ffff800000812cb3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:861

	memset(buf,0,512);
ffff800000812cb5:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000812cbc:	ba 00 02 00 00       	mov    edx,0x200
ffff800000812cc1:	be 00 00 00 00       	mov    esi,0x0
ffff800000812cc6:	48 89 c7             	mov    rdi,rax
ffff800000812cc9:	49 89 df             	mov    r15,rbx
ffff800000812ccc:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff800000812cd3:	ff ff ff 
ffff800000812cd6:	48 01 d8             	add    rax,rbx
ffff800000812cd9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:862
    read_disk(DISK_MAJOR_MAJOR, DPT.DPTE[0].start_LBA, 1, buf);
ffff800000812cdb:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000812ce1:	89 c6                	mov    esi,eax
ffff800000812ce3:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000812cea:	48 89 c1             	mov    rcx,rax
ffff800000812ced:	ba 01 00 00 00       	mov    edx,0x1
ffff800000812cf2:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812cf7:	49 89 df             	mov    r15,rbx
ffff800000812cfa:	48 b8 81 cc fe ff ff 	movabs rax,0xfffffffffffecc81
ffff800000812d01:	ff ff ff 
ffff800000812d04:	48 01 d8             	add    rax,rbx
ffff800000812d07:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:867
	/*int r1=request(DISK_MAJOR_MAJOR,DISKREQ_READ,DPT.DPTE[0].start_LBA,1,(unsigned char *)buf);
    chk_result(r1);*/

    //挂载新文件系统到/mnt
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
ffff800000812d09:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000812d10:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000812d17:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
ffff800000812d1e:	48 89 c2             	mov    rdx,rax
ffff800000812d21:	48 89 ce             	mov    rsi,rcx
ffff800000812d24:	48 b8 0a db ff ff ff 	movabs rax,0xffffffffffffdb0a
ffff800000812d2b:	ff ff ff 
ffff800000812d2e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000812d32:	48 89 c7             	mov    rdi,rax
ffff800000812d35:	49 89 df             	mov    r15,rbx
ffff800000812d38:	48 b8 1a 9e fe ff ff 	movabs rax,0xfffffffffffe9e1a
ffff800000812d3f:	ff ff ff 
ffff800000812d42:	48 01 d8             	add    rax,rbx
ffff800000812d45:	ff d0                	call   rax
ffff800000812d47:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:868
    fat32_sb->root=dmnt;
ffff800000812d4b:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000812d52:	ff ff ff 
ffff800000812d55:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000812d59:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812d5c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812d60:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:870
//    list_add_to_behind(&root_sb->root->subdirs_list,ddev);//把dev文件夹挂到新的rfs下
}
ffff800000812d63:	90                   	nop
ffff800000812d64:	48 81 c4 10 04 00 00 	add    rsp,0x410
ffff800000812d6b:	5b                   	pop    rbx
ffff800000812d6c:	41 5f                	pop    r15
ffff800000812d6e:	5d                   	pop    rbp
ffff800000812d6f:	c3                   	ret    

ffff800000812d70 <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
ffff800000812d70:	f3 0f 1e fa          	endbr64 
ffff800000812d74:	55                   	push   rbp
ffff800000812d75:	48 89 e5             	mov    rbp,rsp
ffff800000812d78:	41 57                	push   r15
ffff800000812d7a:	53                   	push   rbx
ffff800000812d7b:	48 83 ec 30          	sub    rsp,0x30
ffff800000812d7f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812d7f <close_tty+0xf>
ffff800000812d86:	49 bb a9 fb 00 00 00 	movabs r11,0xfba9
ffff800000812d8d:	00 00 00 
ffff800000812d90:	4c 01 db             	add    rbx,r11
ffff800000812d93:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000812d97:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000812d9b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812d9f:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812da3:	48 83 c0 18          	add    rax,0x18
ffff800000812da7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000812dab:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812daf:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812db3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000812db7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812dbb:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812dbf:	48 83 c0 30          	add    rax,0x30
ffff800000812dc3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
ffff800000812dc7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812dcb:	48 89 c7             	mov    rdi,rax
ffff800000812dce:	49 89 df             	mov    r15,rbx
ffff800000812dd1:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000812dd8:	ff ff ff 
ffff800000812ddb:	48 01 d8             	add    rax,rbx
ffff800000812dde:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
ffff800000812de0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812de4:	48 89 c7             	mov    rdi,rax
ffff800000812de7:	49 89 df             	mov    r15,rbx
ffff800000812dea:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000812df1:	ff ff ff 
ffff800000812df4:	48 01 d8             	add    rax,rbx
ffff800000812df7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
ffff800000812df9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812dfd:	48 89 c7             	mov    rdi,rax
ffff800000812e00:	49 89 df             	mov    r15,rbx
ffff800000812e03:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000812e0a:	ff ff ff 
ffff800000812e0d:	48 01 d8             	add    rax,rbx
ffff800000812e10:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
ffff800000812e12:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812e16:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812e1a:	48 89 c7             	mov    rdi,rax
ffff800000812e1d:	49 89 df             	mov    r15,rbx
ffff800000812e20:	48 b8 de fa fd ff ff 	movabs rax,0xfffffffffffdfade
ffff800000812e27:	ff ff ff 
ffff800000812e2a:	48 01 d8             	add    rax,rbx
ffff800000812e2d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
ffff800000812e2f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
ffff800000812e34:	48 83 c4 30          	add    rsp,0x30
ffff800000812e38:	5b                   	pop    rbx
ffff800000812e39:	41 5f                	pop    r15
ffff800000812e3b:	5d                   	pop    rbp
ffff800000812e3c:	c3                   	ret    

ffff800000812e3d <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
ffff800000812e3d:	f3 0f 1e fa          	endbr64 
ffff800000812e41:	55                   	push   rbp
ffff800000812e42:	48 89 e5             	mov    rbp,rsp
ffff800000812e45:	41 57                	push   r15
ffff800000812e47:	53                   	push   rbx
ffff800000812e48:	48 83 ec 20          	sub    rsp,0x20
ffff800000812e4c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812e4c <init_tty+0xf>
ffff800000812e53:	49 bb dc fa 00 00 00 	movabs r11,0xfadc
ffff800000812e5a:	00 00 00 
ffff800000812e5d:	4c 01 db             	add    rbx,r11
ffff800000812e60:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000812e64:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc();
ffff800000812e68:	49 89 df             	mov    r15,rbx
ffff800000812e6b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812e70:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000812e77:	ff ff ff 
ffff800000812e7a:	48 01 da             	add    rdx,rbx
ffff800000812e7d:	ff d2                	call   rdx
ffff800000812e7f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc();
ffff800000812e83:	49 89 df             	mov    r15,rbx
ffff800000812e86:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812e8b:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000812e92:	ff ff ff 
ffff800000812e95:	48 01 da             	add    rdx,rbx
ffff800000812e98:	ff d2                	call   rdx
ffff800000812e9a:	48 89 c2             	mov    rdx,rax
ffff800000812e9d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812ea1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc();
ffff800000812ea5:	49 89 df             	mov    r15,rbx
ffff800000812ea8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812ead:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000812eb4:	ff ff ff 
ffff800000812eb7:	48 01 da             	add    rdx,rbx
ffff800000812eba:	ff d2                	call   rdx
ffff800000812ebc:	48 89 c2             	mov    rdx,rax
ffff800000812ebf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812ec3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc();
ffff800000812ec6:	49 89 df             	mov    r15,rbx
ffff800000812ec9:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812ece:	48 ba 6f f7 fd ff ff 	movabs rdx,0xfffffffffffdf76f
ffff800000812ed5:	ff ff ff 
ffff800000812ed8:	48 01 da             	add    rdx,rbx
ffff800000812edb:	ff d2                	call   rdx
ffff800000812edd:	48 89 c2             	mov    rdx,rax
ffff800000812ee0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812ee4:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
ffff800000812ee8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812eec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
ffff800000812ef3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812ef7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
ffff800000812efe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812f02:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
ffff800000812f09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812f0d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
ffff800000812f14:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812f18:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
ffff800000812f1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812f23:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
ffff800000812f2a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812f2e:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
ffff800000812f35:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812f39:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
ffff800000812f40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812f44:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
ffff800000812f4b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812f4f:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff800000812f56:	ff ff ff 
ffff800000812f59:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812f5d:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
ffff800000812f61:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812f65:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff800000812f6c:	ff ff ff 
ffff800000812f6f:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812f73:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
ffff800000812f77:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812f7b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000812f7f:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
ffff800000812f83:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
ffff800000812f88:	48 83 c4 20          	add    rsp,0x20
ffff800000812f8c:	5b                   	pop    rbx
ffff800000812f8d:	41 5f                	pop    r15
ffff800000812f8f:	5d                   	pop    rbp
ffff800000812f90:	c3                   	ret    

ffff800000812f91 <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000812f91:	f3 0f 1e fa          	endbr64 
ffff800000812f95:	55                   	push   rbp
ffff800000812f96:	48 89 e5             	mov    rbp,rsp
ffff800000812f99:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812f99 <read_tty+0x8>
ffff800000812fa0:	49 bb 8f f9 00 00 00 	movabs r11,0xf98f
ffff800000812fa7:	00 00 00 
ffff800000812faa:	4c 01 d8             	add    rax,r11
ffff800000812fad:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812fb1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000812fb5:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000812fb9:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000812fbd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812fc1:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812fc5:	48 83 c0 18          	add    rax,0x18
ffff800000812fc9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
ffff800000812fcd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000812fd4:	eb 6e                	jmp    ffff800000813044 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
ffff800000812fd6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812fda:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000812fdd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812fe1:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000812fe4:	39 c2                	cmp    edx,eax
ffff800000812fe6:	75 0b                	jne    ffff800000812ff3 <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
ffff800000812fe8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812fec:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
ffff800000812ff3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812ff7:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000812ffa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812ffe:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000813001:	39 c2                	cmp    edx,eax
ffff800000813003:	75 02                	jne    ffff800000813007 <read_tty+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
ffff800000813005:	eb 3d                	jmp    ffff800000813044 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
ffff800000813007:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081300b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081300e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813012:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000813015:	48 98                	cdqe   
ffff800000813017:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000081301b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081301e:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813021:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000813024:	48 63 d0             	movsxd rdx,eax
ffff800000813027:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081302b:	48 01 c2             	add    rdx,rax
ffff80000081302e:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000813031:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
ffff800000813033:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813037:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000081303a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081303d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813041:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000813044:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813047:	48 98                	cdqe   
ffff800000813049:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000081304d:	77 87                	ja     ffff800000812fd6 <read_tty+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
ffff80000081304f:	90                   	nop
ffff800000813050:	5d                   	pop    rbp
ffff800000813051:	c3                   	ret    

ffff800000813052 <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000813052:	f3 0f 1e fa          	endbr64 
ffff800000813056:	55                   	push   rbp
ffff800000813057:	48 89 e5             	mov    rbp,rsp
ffff80000081305a:	41 57                	push   r15
ffff80000081305c:	48 83 ec 48          	sub    rsp,0x48
ffff800000813060:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813060 <write_tty+0xe>
ffff800000813067:	49 bb c8 f8 00 00 00 	movabs r11,0xf8c8
ffff80000081306e:	00 00 00 
ffff800000813071:	4c 01 d8             	add    rax,r11
ffff800000813074:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000813078:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000081307c:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000813080:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000813084:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000813088:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081308c:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
ffff800000813090:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
ffff800000813097:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081309b:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081309e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff8000008130a1:	eb 5b                	jmp    ffff8000008130fe <write_tty+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
ffff8000008130a3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008130a7:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008130aa:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008130ae:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff8000008130b1:	39 d1                	cmp    ecx,edx
ffff8000008130b3:	75 0b                	jne    ffff8000008130c0 <write_tty+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
ffff8000008130b5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008130b9:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
ffff8000008130c0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008130c3:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008130c6:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff8000008130c9:	48 63 ca             	movsxd rcx,edx
ffff8000008130cc:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008130d0:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008130d4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008130d8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008130db:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008130df:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008130e2:	48 63 d2             	movsxd rdx,edx
ffff8000008130e5:	48 01 d1             	add    rcx,rdx
ffff8000008130e8:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff8000008130eb:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
ffff8000008130ed:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008130f1:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008130f4:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008130f7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008130fb:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff8000008130fe:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000813101:	48 63 d2             	movsxd rdx,edx
ffff800000813104:	48 39 55 b8          	cmp    QWORD PTR [rbp-0x48],rdx
ffff800000813108:	77 99                	ja     ffff8000008130a3 <write_tty+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff80000081310a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081310e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000813111:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000813114:	48 63 d2             	movsxd rdx,edx
ffff800000813117:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000081311b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000081311f:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffff800000813123:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000813128:	49 89 c7             	mov    r15,rax
ffff80000081312b:	49 b8 90 98 fe ff ff 	movabs r8,0xfffffffffffe9890
ffff800000813132:	ff ff ff 
ffff800000813135:	49 01 c0             	add    r8,rax
ffff800000813138:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
ffff80000081313b:	90                   	nop
ffff80000081313c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000813140:	c9                   	leave  
ffff800000813141:	c3                   	ret    

ffff800000813142 <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
ffff800000813142:	f3 0f 1e fa          	endbr64 
ffff800000813146:	55                   	push   rbp
ffff800000813147:	48 89 e5             	mov    rbp,rsp
ffff80000081314a:	41 57                	push   r15
ffff80000081314c:	48 83 ec 58          	sub    rsp,0x58
ffff800000813150:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813150 <ioctl_tty+0xe>
ffff800000813157:	49 bb d8 f7 00 00 00 	movabs r11,0xf7d8
ffff80000081315e:	00 00 00 
ffff800000813161:	4c 01 d8             	add    rax,r11
ffff800000813164:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000813168:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000081316c:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffff800000813170:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000813174:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000813178:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081317c:	48 83 c2 30          	add    rdx,0x30
ffff800000813180:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000813184:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000813188:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081318c:	48 83 c2 18          	add    rdx,0x18
ffff800000813190:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
ffff800000813194:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
ffff80000081319b:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000081319f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008131a2:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
ffff8000008131a6:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008131aa:	48 83 c2 08          	add    rdx,0x8
ffff8000008131ae:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008131b1:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
ffff8000008131b5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008131b9:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008131bc:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
ffff8000008131bf:	c7 45 c0 ff ff ff ff 	mov    DWORD PTR [rbp-0x40],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
ffff8000008131c6:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff8000008131cb:	0f 84 b8 01 00 00    	je     ffff800000813389 <ioctl_tty+0x247>
ffff8000008131d1:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff8000008131d6:	0f 87 b8 01 00 00    	ja     ffff800000813394 <ioctl_tty+0x252>
ffff8000008131dc:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff8000008131e1:	0f 84 0f 01 00 00    	je     ffff8000008132f6 <ioctl_tty+0x1b4>
ffff8000008131e7:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff8000008131ec:	0f 87 a2 01 00 00    	ja     ffff800000813394 <ioctl_tty+0x252>
ffff8000008131f2:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff8000008131f7:	74 6b                	je     ffff800000813264 <ioctl_tty+0x122>
ffff8000008131f9:	48 83 7d a8 01       	cmp    QWORD PTR [rbp-0x58],0x1
ffff8000008131fe:	0f 84 a2 00 00 00    	je     ffff8000008132a6 <ioctl_tty+0x164>
ffff800000813204:	e9 8b 01 00 00       	jmp    ffff800000813394 <ioctl_tty+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
ffff800000813209:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081320d:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000813210:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813214:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000813217:	39 d1                	cmp    ecx,edx
ffff800000813219:	75 0b                	jne    ffff800000813226 <ioctl_tty+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
ffff80000081321b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081321f:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
ffff800000813226:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000813229:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081322c:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff80000081322f:	48 63 ca             	movsxd rcx,edx
ffff800000813232:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000813236:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000081323a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081323e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000813241:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813245:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000813248:	48 63 d2             	movsxd rdx,edx
ffff80000081324b:	48 01 d1             	add    rcx,rdx
ffff80000081324e:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff800000813251:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
ffff800000813253:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813257:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081325a:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081325d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813261:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
ffff800000813264:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000813267:	48 63 d2             	movsxd rdx,edx
ffff80000081326a:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff80000081326e:	77 99                	ja     ffff800000813209 <ioctl_tty+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff800000813270:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813274:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000813277:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000081327a:	48 63 d2             	movsxd rdx,edx
ffff80000081327d:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000813281:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000813285:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffff800000813289:	b9 00 00 00 00       	mov    ecx,0x0
ffff80000081328e:	49 89 c7             	mov    r15,rax
ffff800000813291:	49 b8 90 98 fe ff ff 	movabs r8,0xfffffffffffe9890
ffff800000813298:	ff ff ff 
ffff80000081329b:	49 01 c0             	add    r8,rax
ffff80000081329e:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
ffff8000008132a1:	e9 f7 00 00 00       	jmp    ffff80000081339d <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
ffff8000008132a6:	be c1 00 00 00       	mov    esi,0xc1
ffff8000008132ab:	48 ba 2e db ff ff ff 	movabs rdx,0xffffffffffffdb2e
ffff8000008132b2:	ff ff ff 
ffff8000008132b5:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff8000008132b9:	48 89 d7             	mov    rdi,rdx
ffff8000008132bc:	49 89 c7             	mov    r15,rax
ffff8000008132bf:	48 ba 83 a3 fe ff ff 	movabs rdx,0xfffffffffffea383
ffff8000008132c6:	ff ff ff 
ffff8000008132c9:	48 01 c2             	add    rdx,rax
ffff8000008132cc:	ff d2                	call   rdx
ffff8000008132ce:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
ffff8000008132d1:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff8000008132d5:	75 0c                	jne    ffff8000008132e3 <ioctl_tty+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
ffff8000008132d7:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008132de:	e9 bf 00 00 00       	jmp    ffff8000008133a2 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
ffff8000008132e3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008132e7:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008132eb:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff8000008132ee:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
ffff8000008132f1:	e9 a7 00 00 00       	jmp    ffff80000081339d <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
ffff8000008132f6:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008132fa:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008132fe:	8b 52 48             	mov    edx,DWORD PTR [rdx+0x48]
ffff800000813301:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
ffff800000813304:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000813308:	75 0c                	jne    ffff800000813316 <ioctl_tty+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
ffff80000081330a:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000813311:	e9 8c 00 00 00       	jmp    ffff8000008133a2 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
ffff800000813316:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000813319:	89 d7                	mov    edi,edx
ffff80000081331b:	49 89 c7             	mov    r15,rax
ffff80000081331e:	48 ba 37 aa fe ff ff 	movabs rdx,0xfffffffffffeaa37
ffff800000813325:	ff ff ff 
ffff800000813328:	48 01 c2             	add    rdx,rax
ffff80000081332b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
ffff80000081332d:	eb 5a                	jmp    ffff800000813389 <ioctl_tty+0x247>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
ffff80000081332f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813333:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000813336:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081333a:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000081333d:	39 c2                	cmp    edx,eax
ffff80000081333f:	75 0b                	jne    ffff80000081334c <ioctl_tty+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
ffff800000813341:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813345:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
ffff80000081334c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081334f:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813352:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000813355:	48 63 d0             	movsxd rdx,eax
ffff800000813358:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081335c:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff800000813360:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813364:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000813367:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081336b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081336e:	48 98                	cdqe   
ffff800000813370:	48 01 c2             	add    rdx,rax
ffff800000813373:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000813376:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
ffff800000813378:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081337c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081337f:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813382:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813386:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
ffff800000813389:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081338c:	48 98                	cdqe   
ffff80000081338e:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff800000813392:	77 9b                	ja     ffff80000081332f <ioctl_tty+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
ffff800000813394:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000081339b:	eb 05                	jmp    ffff8000008133a2 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
ffff80000081339d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
ffff8000008133a2:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008133a6:	c9                   	leave  
ffff8000008133a7:	c3                   	ret    

ffff8000008133a8 <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
ffff8000008133a8:	f3 0f 1e fa          	endbr64 
ffff8000008133ac:	55                   	push   rbp
ffff8000008133ad:	48 89 e5             	mov    rbp,rsp
ffff8000008133b0:	41 57                	push   r15
ffff8000008133b2:	53                   	push   rbx
ffff8000008133b3:	48 83 ec 10          	sub    rsp,0x10
ffff8000008133b7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008133b7 <init_com+0xf>
ffff8000008133be:	49 bb 71 f5 00 00 00 	movabs r11,0xf571
ffff8000008133c5:	00 00 00 
ffff8000008133c8:	4c 01 db             	add    rbx,r11
ffff8000008133cb:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
ffff8000008133ce:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008133d1:	83 c0 01             	add    eax,0x1
ffff8000008133d4:	0f b7 c0             	movzx  eax,ax
ffff8000008133d7:	be 00 00 00 00       	mov    esi,0x0
ffff8000008133dc:	89 c7                	mov    edi,eax
ffff8000008133de:	49 89 df             	mov    r15,rbx
ffff8000008133e1:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff8000008133e8:	ff ff ff 
ffff8000008133eb:	48 01 d8             	add    rax,rbx
ffff8000008133ee:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
ffff8000008133f0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008133f3:	83 c0 03             	add    eax,0x3
ffff8000008133f6:	0f b7 c0             	movzx  eax,ax
ffff8000008133f9:	be 80 00 00 00       	mov    esi,0x80
ffff8000008133fe:	89 c7                	mov    edi,eax
ffff800000813400:	49 89 df             	mov    r15,rbx
ffff800000813403:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000081340a:	ff ff ff 
ffff80000081340d:	48 01 d8             	add    rax,rbx
ffff800000813410:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
ffff800000813412:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000813415:	0f b7 c0             	movzx  eax,ax
ffff800000813418:	be 03 00 00 00       	mov    esi,0x3
ffff80000081341d:	89 c7                	mov    edi,eax
ffff80000081341f:	49 89 df             	mov    r15,rbx
ffff800000813422:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff800000813429:	ff ff ff 
ffff80000081342c:	48 01 d8             	add    rax,rbx
ffff80000081342f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
ffff800000813431:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000813434:	83 c0 01             	add    eax,0x1
ffff800000813437:	0f b7 c0             	movzx  eax,ax
ffff80000081343a:	be 00 00 00 00       	mov    esi,0x0
ffff80000081343f:	89 c7                	mov    edi,eax
ffff800000813441:	49 89 df             	mov    r15,rbx
ffff800000813444:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000081344b:	ff ff ff 
ffff80000081344e:	48 01 d8             	add    rax,rbx
ffff800000813451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
ffff800000813453:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000813456:	83 c0 03             	add    eax,0x3
ffff800000813459:	0f b7 c0             	movzx  eax,ax
ffff80000081345c:	be 03 00 00 00       	mov    esi,0x3
ffff800000813461:	89 c7                	mov    edi,eax
ffff800000813463:	49 89 df             	mov    r15,rbx
ffff800000813466:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000081346d:	ff ff ff 
ffff800000813470:	48 01 d8             	add    rax,rbx
ffff800000813473:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
ffff800000813475:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000813478:	83 c0 02             	add    eax,0x2
ffff80000081347b:	0f b7 c0             	movzx  eax,ax
ffff80000081347e:	be 87 00 00 00       	mov    esi,0x87
ffff800000813483:	89 c7                	mov    edi,eax
ffff800000813485:	49 89 df             	mov    r15,rbx
ffff800000813488:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff80000081348f:	ff ff ff 
ffff800000813492:	48 01 d8             	add    rax,rbx
ffff800000813495:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
ffff800000813497:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081349a:	83 c0 04             	add    eax,0x4
ffff80000081349d:	0f b7 c0             	movzx  eax,ax
ffff8000008134a0:	be 0b 00 00 00       	mov    esi,0xb
ffff8000008134a5:	89 c7                	mov    edi,eax
ffff8000008134a7:	49 89 df             	mov    r15,rbx
ffff8000008134aa:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff8000008134b1:	ff ff ff 
ffff8000008134b4:	48 01 d8             	add    rax,rbx
ffff8000008134b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
ffff8000008134b9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008134bc:	83 c0 04             	add    eax,0x4
ffff8000008134bf:	0f b7 c0             	movzx  eax,ax
ffff8000008134c2:	be 0f 00 00 00       	mov    esi,0xf
ffff8000008134c7:	89 c7                	mov    edi,eax
ffff8000008134c9:	49 89 df             	mov    r15,rbx
ffff8000008134cc:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff8000008134d3:	ff ff ff 
ffff8000008134d6:	48 01 d8             	add    rax,rbx
ffff8000008134d9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
ffff8000008134db:	90                   	nop
ffff8000008134dc:	48 83 c4 10          	add    rsp,0x10
ffff8000008134e0:	5b                   	pop    rbx
ffff8000008134e1:	41 5f                	pop    r15
ffff8000008134e3:	5d                   	pop    rbp
ffff8000008134e4:	c3                   	ret    

ffff8000008134e5 <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
ffff8000008134e5:	f3 0f 1e fa          	endbr64 
ffff8000008134e9:	55                   	push   rbp
ffff8000008134ea:	48 89 e5             	mov    rbp,rsp
ffff8000008134ed:	41 57                	push   r15
ffff8000008134ef:	53                   	push   rbx
ffff8000008134f0:	48 83 ec 20          	sub    rsp,0x20
ffff8000008134f4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008134f4 <com_putchar+0xf>
ffff8000008134fb:	49 bb 34 f4 00 00 00 	movabs r11,0xf434
ffff800000813502:	00 00 00 
ffff800000813505:	4c 01 db             	add    rbx,r11
ffff800000813508:	89 f8                	mov    eax,edi
ffff80000081350a:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000081350d:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
ffff800000813511:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000813514:	83 c0 05             	add    eax,0x5
ffff800000813517:	0f b6 c0             	movzx  eax,al
ffff80000081351a:	89 c7                	mov    edi,eax
ffff80000081351c:	49 89 df             	mov    r15,rbx
ffff80000081351f:	48 b8 31 77 fe ff ff 	movabs rax,0xfffffffffffe7731
ffff800000813526:	ff ff ff 
ffff800000813529:	48 01 d8             	add    rax,rbx
ffff80000081352c:	ff d0                	call   rax
ffff80000081352e:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
ffff800000813531:	80 65 ef 20          	and    BYTE PTR [rbp-0x11],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
ffff800000813535:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000813539:	74 d6                	je     ffff800000813511 <com_putchar+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
ffff80000081353b:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000081353f:	0f b6 d0             	movzx  edx,al
ffff800000813542:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000813545:	0f b7 c0             	movzx  eax,ax
ffff800000813548:	89 d6                	mov    esi,edx
ffff80000081354a:	89 c7                	mov    edi,eax
ffff80000081354c:	49 89 df             	mov    r15,rbx
ffff80000081354f:	48 b8 18 77 fe ff ff 	movabs rax,0xfffffffffffe7718
ffff800000813556:	ff ff ff 
ffff800000813559:	48 01 d8             	add    rax,rbx
ffff80000081355c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
ffff80000081355e:	90                   	nop
ffff80000081355f:	48 83 c4 20          	add    rsp,0x20
ffff800000813563:	5b                   	pop    rbx
ffff800000813564:	41 5f                	pop    r15
ffff800000813566:	5d                   	pop    rbp
ffff800000813567:	c3                   	ret    

ffff800000813568 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
ffff800000813568:	f3 0f 1e fa          	endbr64 
ffff80000081356c:	55                   	push   rbp
ffff80000081356d:	48 89 e5             	mov    rbp,rsp
ffff800000813570:	41 57                	push   r15
ffff800000813572:	53                   	push   rbx
ffff800000813573:	48 83 ec 10          	sub    rsp,0x10
ffff800000813577:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000813577 <com_puts+0xf>
ffff80000081357e:	49 bb b1 f3 00 00 00 	movabs r11,0xf3b1
ffff800000813585:	00 00 00 
ffff800000813588:	4c 01 db             	add    rbx,r11
ffff80000081358b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000081358f:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
ffff800000813592:	eb 2a                	jmp    ffff8000008135be <com_puts+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
ffff800000813594:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813598:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081359b:	66 98                	cbw    
ffff80000081359d:	0f b7 c0             	movzx  eax,ax
ffff8000008135a0:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff8000008135a3:	89 d6                	mov    esi,edx
ffff8000008135a5:	89 c7                	mov    edi,eax
ffff8000008135a7:	49 89 df             	mov    r15,rbx
ffff8000008135aa:	48 b8 bd 0b ff ff ff 	movabs rax,0xffffffffffff0bbd
ffff8000008135b1:	ff ff ff 
ffff8000008135b4:	48 01 d8             	add    rax,rbx
ffff8000008135b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
ffff8000008135b9:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
ffff8000008135be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008135c2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008135c5:	84 c0                	test   al,al
ffff8000008135c7:	75 cb                	jne    ffff800000813594 <com_puts+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
ffff8000008135c9:	90                   	nop
ffff8000008135ca:	90                   	nop
ffff8000008135cb:	48 83 c4 10          	add    rsp,0x10
ffff8000008135cf:	5b                   	pop    rbx
ffff8000008135d0:	41 5f                	pop    r15
ffff8000008135d2:	5d                   	pop    rbp
ffff8000008135d3:	c3                   	ret    

ffff8000008135d4 <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
ffff8000008135d4:	f3 0f 1e fa          	endbr64 
ffff8000008135d8:	55                   	push   rbp
ffff8000008135d9:	48 89 e5             	mov    rbp,rsp
ffff8000008135dc:	41 57                	push   r15
ffff8000008135de:	53                   	push   rbx
ffff8000008135df:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff8000008135e6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008135e6 <comprintf+0x12>
ffff8000008135ed:	49 bb 42 f3 00 00 00 	movabs r11,0xf342
ffff8000008135f4:	00 00 00 
ffff8000008135f7:	4c 01 db             	add    rbx,r11
ffff8000008135fa:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
ffff800000813601:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000813608:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff80000081360f:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000813616:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff80000081361d:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000813624:	84 c0                	test   al,al
ffff800000813626:	74 23                	je     ffff80000081364b <comprintf+0x77>
ffff800000813628:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff80000081362f:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000813633:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000813637:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff80000081363b:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff80000081363f:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000813643:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000813647:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
ffff80000081364b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000813652:	48 89 c7             	mov    rdi,rax
ffff800000813655:	49 89 df             	mov    r15,rbx
ffff800000813658:	48 b8 1e 15 ff ff ff 	movabs rax,0xffffffffffff151e
ffff80000081365f:	ff ff ff 
ffff800000813662:	48 01 d8             	add    rax,rbx
ffff800000813665:	ff d0                	call   rax
ffff800000813667:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff80000081366c:	0f 8f f6 03 00 00    	jg     ffff800000813a68 <comprintf+0x494>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
ffff800000813672:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000813679:	ff ff ff 
ffff80000081367c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000813680:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
ffff800000813687:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081368e:	ba 00 04 00 00       	mov    edx,0x400
ffff800000813693:	be 00 00 00 00       	mov    esi,0x0
ffff800000813698:	48 89 c7             	mov    rdi,rax
ffff80000081369b:	49 89 df             	mov    r15,rbx
ffff80000081369e:	48 b8 fc 11 ff ff ff 	movabs rax,0xffffffffffff11fc
ffff8000008136a5:	ff ff ff 
ffff8000008136a8:	48 01 d8             	add    rax,rbx
ffff8000008136ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
ffff8000008136ad:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008136b4:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
ffff8000008136bb:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008136c2:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
ffff8000008136c9:	c7 85 f0 fe ff ff 08 	mov    DWORD PTR [rbp-0x110],0x8
ffff8000008136d0:	00 00 00 
ffff8000008136d3:	c7 85 f4 fe ff ff 30 	mov    DWORD PTR [rbp-0x10c],0x30
ffff8000008136da:	00 00 00 
ffff8000008136dd:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff8000008136e1:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffff8000008136e8:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff8000008136ef:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
ffff8000008136f6:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008136fd:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000813704:	e9 2a 03 00 00       	jmp    ffff800000813a33 <comprintf+0x45f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000813709:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813710:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813713:	3c 25                	cmp    al,0x25
ffff800000813715:	0f 85 e5 02 00 00    	jne    ffff800000813a00 <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
ffff80000081371b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813722:	48 83 c0 01          	add    rax,0x1
ffff800000813726:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813729:	84 c0                	test   al,al
ffff80000081372b:	0f 84 cf 02 00 00    	je     ffff800000813a00 <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
ffff800000813731:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000813738:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000813739:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813740:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813743:	3c 78                	cmp    al,0x78
ffff800000813745:	75 70                	jne    ffff8000008137b7 <comprintf+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
ffff800000813747:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081374d:	83 f8 2f             	cmp    eax,0x2f
ffff800000813750:	77 23                	ja     ffff800000813775 <comprintf+0x1a1>
ffff800000813752:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000813759:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081375f:	89 d2                	mov    edx,edx
ffff800000813761:	48 01 d0             	add    rax,rdx
ffff800000813764:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081376a:	83 c2 08             	add    edx,0x8
ffff80000081376d:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000813773:	eb 12                	jmp    ffff800000813787 <comprintf+0x1b3>
ffff800000813775:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081377c:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813780:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000813787:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813789:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
ffff80000081378f:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000813795:	48 63 d0             	movsxd rdx,eax
ffff800000813798:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081379f:	48 89 d6             	mov    rsi,rdx
ffff8000008137a2:	48 89 c7             	mov    rdi,rax
ffff8000008137a5:	49 89 df             	mov    r15,rbx
ffff8000008137a8:	48 b8 71 19 ff ff ff 	movabs rax,0xffffffffffff1971
ffff8000008137af:	ff ff ff 
ffff8000008137b2:	48 01 d8             	add    rax,rbx
ffff8000008137b5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008137b7:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008137be:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008137c1:	3c 6c                	cmp    al,0x6c
ffff8000008137c3:	75 76                	jne    ffff80000081383b <comprintf+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                int v=va_arg(vargs,unsigned long);
ffff8000008137c5:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008137cb:	83 f8 2f             	cmp    eax,0x2f
ffff8000008137ce:	77 23                	ja     ffff8000008137f3 <comprintf+0x21f>
ffff8000008137d0:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008137d7:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008137dd:	89 d2                	mov    edx,edx
ffff8000008137df:	48 01 d0             	add    rax,rdx
ffff8000008137e2:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008137e8:	83 c2 08             	add    edx,0x8
ffff8000008137eb:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008137f1:	eb 12                	jmp    ffff800000813805 <comprintf+0x231>
ffff8000008137f3:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008137fa:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008137fe:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000813805:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813808:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprint_hex(tmp,v);
ffff80000081380e:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
ffff800000813814:	48 63 d0             	movsxd rdx,eax
ffff800000813817:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081381e:	48 89 d6             	mov    rsi,rdx
ffff800000813821:	48 89 c7             	mov    rdi,rax
ffff800000813824:	49 89 df             	mov    r15,rbx
ffff800000813827:	48 b8 71 19 ff ff ff 	movabs rax,0xffffffffffff1971
ffff80000081382e:	ff ff ff 
ffff800000813831:	48 01 d8             	add    rax,rbx
ffff800000813834:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000813836:	e9 f0 01 00 00       	jmp    ffff800000813a2b <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='s'){
ffff80000081383b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813842:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813845:	3c 73                	cmp    al,0x73
ffff800000813847:	75 75                	jne    ffff8000008138be <comprintf+0x2ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
ffff800000813849:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081384f:	83 f8 2f             	cmp    eax,0x2f
ffff800000813852:	77 23                	ja     ffff800000813877 <comprintf+0x2a3>
ffff800000813854:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000081385b:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000813861:	89 d2                	mov    edx,edx
ffff800000813863:	48 01 d0             	add    rax,rdx
ffff800000813866:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081386c:	83 c2 08             	add    edx,0x8
ffff80000081386f:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000813875:	eb 12                	jmp    ffff800000813889 <comprintf+0x2b5>
ffff800000813877:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081387e:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813882:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000813889:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081388c:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprintn(tmp,v);
ffff800000813893:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff80000081389a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008138a1:	48 89 d6             	mov    rsi,rdx
ffff8000008138a4:	48 89 c7             	mov    rdi,rax
ffff8000008138a7:	49 89 df             	mov    r15,rbx
ffff8000008138aa:	48 b8 ff 19 ff ff ff 	movabs rax,0xffffffffffff19ff
ffff8000008138b1:	ff ff ff 
ffff8000008138b4:	48 01 d8             	add    rax,rbx
ffff8000008138b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008138b9:	e9 6d 01 00 00       	jmp    ffff800000813a2b <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='d'){
ffff8000008138be:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008138c5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008138c8:	3c 64                	cmp    al,0x64
ffff8000008138ca:	75 76                	jne    ffff800000813942 <comprintf+0x36e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char* v=va_arg(vargs,char*);
ffff8000008138cc:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008138d2:	83 f8 2f             	cmp    eax,0x2f
ffff8000008138d5:	77 23                	ja     ffff8000008138fa <comprintf+0x326>
ffff8000008138d7:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008138de:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008138e4:	89 d2                	mov    edx,edx
ffff8000008138e6:	48 01 d0             	add    rax,rdx
ffff8000008138e9:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008138ef:	83 c2 08             	add    edx,0x8
ffff8000008138f2:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008138f8:	eb 12                	jmp    ffff80000081390c <comprintf+0x338>
ffff8000008138fa:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813901:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813905:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff80000081390c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081390f:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:90
                sprint_decimal(tmp,v);
ffff800000813916:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081391d:	89 c2                	mov    edx,eax
ffff80000081391f:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813926:	89 d6                	mov    esi,edx
ffff800000813928:	48 89 c7             	mov    rdi,rax
ffff80000081392b:	49 89 df             	mov    r15,rbx
ffff80000081392e:	48 b8 b6 18 ff ff ff 	movabs rax,0xffffffffffff18b6
ffff800000813935:	ff ff ff 
ffff800000813938:	48 01 d8             	add    rax,rbx
ffff80000081393b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff80000081393d:	e9 e9 00 00 00       	jmp    ffff800000813a2b <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
            }else if(*pstr=='c'){
ffff800000813942:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813949:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081394c:	3c 63                	cmp    al,0x63
ffff80000081394e:	75 02                	jne    ffff800000813952 <comprintf+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                char v=va_arg(vargs,char);
ffff800000813950:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:94
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
ffff800000813952:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813959:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081395c:	3c 70                	cmp    al,0x70
ffff80000081395e:	75 73                	jne    ffff8000008139d3 <comprintf+0x3ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
                int v=va_arg(vargs,addr_t);
ffff800000813960:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000813966:	83 f8 2f             	cmp    eax,0x2f
ffff800000813969:	77 23                	ja     ffff80000081398e <comprintf+0x3ba>
ffff80000081396b:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000813972:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000813978:	89 d2                	mov    edx,edx
ffff80000081397a:	48 01 d0             	add    rax,rdx
ffff80000081397d:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000813983:	83 c2 08             	add    edx,0x8
ffff800000813986:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff80000081398c:	eb 12                	jmp    ffff8000008139a0 <comprintf+0x3cc>
ffff80000081398e:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813995:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813999:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008139a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008139a3:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:96
                sprint_hex(tmp,v);
ffff8000008139a9:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff8000008139af:	48 63 d0             	movsxd rdx,eax
ffff8000008139b2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008139b9:	48 89 d6             	mov    rsi,rdx
ffff8000008139bc:	48 89 c7             	mov    rdi,rax
ffff8000008139bf:	49 89 df             	mov    r15,rbx
ffff8000008139c2:	48 b8 71 19 ff ff ff 	movabs rax,0xffffffffffff1971
ffff8000008139c9:	ff ff ff 
ffff8000008139cc:	48 01 d8             	add    rax,rbx
ffff8000008139cf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008139d1:	eb 58                	jmp    ffff800000813a2b <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
            }else{
                    sprintchar(tmp,*pstr);
ffff8000008139d3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008139da:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008139dd:	0f be d0             	movsx  edx,al
ffff8000008139e0:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008139e7:	89 d6                	mov    esi,edx
ffff8000008139e9:	48 89 c7             	mov    rdi,rax
ffff8000008139ec:	49 89 df             	mov    r15,rbx
ffff8000008139ef:	48 b8 77 18 ff ff ff 	movabs rax,0xffffffffffff1877
ffff8000008139f6:	ff ff ff 
ffff8000008139f9:	48 01 d8             	add    rax,rbx
ffff8000008139fc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008139fe:	eb 2b                	jmp    ffff800000813a2b <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:101
                }
        }else{
            sprintchar(tmp,*pstr);
ffff800000813a00:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813a07:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813a0a:	0f be d0             	movsx  edx,al
ffff800000813a0d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813a14:	89 d6                	mov    esi,edx
ffff800000813a16:	48 89 c7             	mov    rdi,rax
ffff800000813a19:	49 89 df             	mov    r15,rbx
ffff800000813a1c:	48 b8 77 18 ff ff ff 	movabs rax,0xffffffffffff1877
ffff800000813a23:	ff ff ff 
ffff800000813a26:	48 01 d8             	add    rax,rbx
ffff800000813a29:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000813a2b:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000813a32:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
ffff800000813a33:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813a3a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813a3d:	84 c0                	test   al,al
ffff800000813a3f:	0f 85 c4 fc ff ff    	jne    ffff800000813709 <comprintf+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:105
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
ffff800000813a45:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813a4c:	be f8 03 00 00       	mov    esi,0x3f8
ffff800000813a51:	48 89 c7             	mov    rdi,rax
ffff800000813a54:	49 89 df             	mov    r15,rbx
ffff800000813a57:	48 b8 40 0c ff ff ff 	movabs rax,0xffffffffffff0c40
ffff800000813a5e:	ff ff ff 
ffff800000813a61:	48 01 d8             	add    rax,rbx
ffff800000813a64:	ff d0                	call   rax
ffff800000813a66:	eb 01                	jmp    ffff800000813a69 <comprintf+0x495>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
ffff800000813a68:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:106
ffff800000813a69:	48 81 c4 10 01 00 00 	add    rsp,0x110
ffff800000813a70:	5b                   	pop    rbx
ffff800000813a71:	41 5f                	pop    r15
ffff800000813a73:	5d                   	pop    rbp
ffff800000813a74:	c3                   	ret    

ffff800000813a75 <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
ffff800000813a75:	f3 0f 1e fa          	endbr64 
ffff800000813a79:	55                   	push   rbp
ffff800000813a7a:	48 89 e5             	mov    rbp,rsp
ffff800000813a7d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000813a81:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000813a85:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
ffff800000813a88:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813a8c:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
ffff800000813a8f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000813a96:	eb 1b                	jmp    ffff800000813ab3 <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
ffff800000813a98:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813a9c:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813a9f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813aa3:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
ffff800000813aa5:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
ffff800000813aaa:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
ffff800000813aaf:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
ffff800000813ab3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813ab6:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000813ab9:	77 dd                	ja     ffff800000813a98 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
ffff800000813abb:	90                   	nop
ffff800000813abc:	90                   	nop
ffff800000813abd:	5d                   	pop    rbp
ffff800000813abe:	c3                   	ret    

ffff800000813abf <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
ffff800000813abf:	f3 0f 1e fa          	endbr64 
ffff800000813ac3:	55                   	push   rbp
ffff800000813ac4:	48 89 e5             	mov    rbp,rsp
ffff800000813ac7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000813acb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000813acf:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
ffff800000813ad2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000813ad9:	eb 3a                	jmp    ffff800000813b15 <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
ffff800000813adb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813adf:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813ae2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813ae6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813ae9:	38 c2                	cmp    dl,al
ffff800000813aeb:	74 1a                	je     ffff800000813b07 <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
ffff800000813aed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813af1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813af4:	0f b6 d0             	movzx  edx,al
ffff800000813af7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813afb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813afe:	0f b6 c8             	movzx  ecx,al
ffff800000813b01:	89 d0                	mov    eax,edx
ffff800000813b03:	29 c8                	sub    eax,ecx
ffff800000813b05:	eb 1b                	jmp    ffff800000813b22 <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
ffff800000813b07:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
ffff800000813b0c:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
ffff800000813b11:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
ffff800000813b15:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813b18:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffff800000813b1b:	7c be                	jl     ffff800000813adb <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
ffff800000813b1d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
ffff800000813b22:	5d                   	pop    rbp
ffff800000813b23:	c3                   	ret    

ffff800000813b24 <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
ffff800000813b24:	f3 0f 1e fa          	endbr64 
ffff800000813b28:	55                   	push   rbp
ffff800000813b29:	48 89 e5             	mov    rbp,rsp
ffff800000813b2c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000813b30:	89 f0                	mov    eax,esi
ffff800000813b32:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffff800000813b35:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
ffff800000813b38:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000813b3f:	eb 16                	jmp    ffff800000813b57 <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
ffff800000813b41:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813b45:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000813b49:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000813b4d:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff800000813b51:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
ffff800000813b53:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
ffff800000813b57:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813b5a:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff800000813b5d:	72 e2                	jb     ffff800000813b41 <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
ffff800000813b5f:	90                   	nop
ffff800000813b60:	90                   	nop
ffff800000813b61:	5d                   	pop    rbp
ffff800000813b62:	c3                   	ret    

ffff800000813b63 <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
ffff800000813b63:	f3 0f 1e fa          	endbr64 
ffff800000813b67:	55                   	push   rbp
ffff800000813b68:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
ffff800000813b6b:	48 b8 40 ea 41 00 00 	movabs rax,0xffff80000041ea40
ffff800000813b72:	80 ff ff 
ffff800000813b75:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
ffff800000813b77:	5d                   	pop    rbp
ffff800000813b78:	c3                   	ret    

ffff800000813b79 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
ffff800000813b79:	f3 0f 1e fa          	endbr64 
ffff800000813b7d:	55                   	push   rbp
ffff800000813b7e:	48 89 e5             	mov    rbp,rsp
ffff800000813b81:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813b85:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000813b89:	eb 1d                	jmp    ffff800000813ba8 <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
ffff800000813b8b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000813b8f:	48 8d 42 01          	lea    rax,[rdx+0x1]
ffff800000813b93:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff800000813b97:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813b9b:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffff800000813b9f:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffff800000813ba3:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000813ba6:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000813ba8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813bac:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813baf:	84 c0                	test   al,al
ffff800000813bb1:	75 d8                	jne    ffff800000813b8b <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
ffff800000813bb3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813bb7:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
ffff800000813bba:	90                   	nop
ffff800000813bbb:	5d                   	pop    rbp
ffff800000813bbc:	c3                   	ret    

ffff800000813bbd <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
ffff800000813bbd:	f3 0f 1e fa          	endbr64 
ffff800000813bc1:	55                   	push   rbp
ffff800000813bc2:	48 89 e5             	mov    rbp,rsp
ffff800000813bc5:	48 83 ec 30          	sub    rsp,0x30
ffff800000813bc9:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000813bcd:	89 f0                	mov    eax,esi
ffff800000813bcf:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
ffff800000813bd2:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000813bd7:	0f 84 fa 00 00 00    	je     ffff800000813cd7 <strtok+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
ffff800000813bdd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813be1:	48 89 c6             	mov    rsi,rax
ffff800000813be4:	48 b8 60 ea 41 00 00 	movabs rax,0xffff80000041ea60
ffff800000813beb:	80 ff ff 
ffff800000813bee:	48 89 c7             	mov    rdi,rax
ffff800000813bf1:	48 b8 79 3b 81 00 00 	movabs rax,0xffff800000813b79
ffff800000813bf8:	80 ff ff 
ffff800000813bfb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
ffff800000813bfd:	48 b8 60 ea 41 00 00 	movabs rax,0xffff80000041ea60
ffff800000813c04:	80 ff ff 
ffff800000813c07:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
ffff800000813c0b:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813c12:	80 ff ff 
ffff800000813c15:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffff800000813c1b:	eb 2a                	jmp    ffff800000813c47 <strtok+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
ffff800000813c1d:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813c24:	80 ff ff 
ffff800000813c27:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813c29:	83 c0 01             	add    eax,0x1
ffff800000813c2c:	99                   	cdq    
ffff800000813c2d:	c1 ea 17             	shr    edx,0x17
ffff800000813c30:	01 d0                	add    eax,edx
ffff800000813c32:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813c37:	29 d0                	sub    eax,edx
ffff800000813c39:	89 c2                	mov    edx,eax
ffff800000813c3b:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813c42:	80 ff ff 
ffff800000813c45:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
ffff800000813c47:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813c4e:	80 ff ff 
ffff800000813c51:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813c53:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813c5a:	80 ff ff 
ffff800000813c5d:	48 98                	cdqe   
ffff800000813c5f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813c63:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000813c66:	74 20                	je     ffff800000813c88 <strtok+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
ffff800000813c68:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813c6f:	80 ff ff 
ffff800000813c72:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813c74:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813c7b:	80 ff ff 
ffff800000813c7e:	48 98                	cdqe   
ffff800000813c80:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813c84:	84 c0                	test   al,al
ffff800000813c86:	75 95                	jne    ffff800000813c1d <strtok+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
ffff800000813c88:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813c8f:	80 ff ff 
ffff800000813c92:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813c94:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813c9b:	80 ff ff 
ffff800000813c9e:	48 98                	cdqe   
ffff800000813ca0:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
ffff800000813ca4:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813cab:	80 ff ff 
ffff800000813cae:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813cb0:	83 c0 01             	add    eax,0x1
ffff800000813cb3:	99                   	cdq    
ffff800000813cb4:	c1 ea 17             	shr    edx,0x17
ffff800000813cb7:	01 d0                	add    eax,edx
ffff800000813cb9:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813cbe:	29 d0                	sub    eax,edx
ffff800000813cc0:	89 c2                	mov    edx,eax
ffff800000813cc2:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813cc9:	80 ff ff 
ffff800000813ccc:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
ffff800000813cce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813cd2:	e9 ee 00 00 00       	jmp    ffff800000813dc5 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
ffff800000813cd7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
ffff800000813cde:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813ce5:	80 ff ff 
ffff800000813ce8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813cea:	48 98                	cdqe   
ffff800000813cec:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813cf3:	80 ff ff 
ffff800000813cf6:	48 01 d0             	add    rax,rdx
ffff800000813cf9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
ffff800000813cfd:	eb 2e                	jmp    ffff800000813d2d <strtok+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
ffff800000813cff:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813d06:	80 ff ff 
ffff800000813d09:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813d0b:	83 c0 01             	add    eax,0x1
ffff800000813d0e:	99                   	cdq    
ffff800000813d0f:	c1 ea 17             	shr    edx,0x17
ffff800000813d12:	01 d0                	add    eax,edx
ffff800000813d14:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813d19:	29 d0                	sub    eax,edx
ffff800000813d1b:	89 c2                	mov    edx,eax
ffff800000813d1d:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813d24:	80 ff ff 
ffff800000813d27:	89 10                	mov    DWORD PTR [rax],edx
ffff800000813d29:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
ffff800000813d2d:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813d34:	80 ff ff 
ffff800000813d37:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813d39:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813d40:	80 ff ff 
ffff800000813d43:	48 98                	cdqe   
ffff800000813d45:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813d49:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000813d4c:	74 20                	je     ffff800000813d6e <strtok+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
ffff800000813d4e:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813d55:	80 ff ff 
ffff800000813d58:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813d5a:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813d61:	80 ff ff 
ffff800000813d64:	48 98                	cdqe   
ffff800000813d66:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813d6a:	84 c0                	test   al,al
ffff800000813d6c:	75 91                	jne    ffff800000813cff <strtok+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
ffff800000813d6e:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813d75:	80 ff ff 
ffff800000813d78:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813d7a:	48 ba 60 ea 41 00 00 	movabs rdx,0xffff80000041ea60
ffff800000813d81:	80 ff ff 
ffff800000813d84:	48 98                	cdqe   
ffff800000813d86:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
ffff800000813d8a:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813d91:	80 ff ff 
ffff800000813d94:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813d96:	83 c0 01             	add    eax,0x1
ffff800000813d99:	99                   	cdq    
ffff800000813d9a:	c1 ea 17             	shr    edx,0x17
ffff800000813d9d:	01 d0                	add    eax,edx
ffff800000813d9f:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813da4:	29 d0                	sub    eax,edx
ffff800000813da6:	89 c2                	mov    edx,eax
ffff800000813da8:	48 b8 60 ec 41 00 00 	movabs rax,0xffff80000041ec60
ffff800000813daf:	80 ff ff 
ffff800000813db2:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
ffff800000813db4:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000813db8:	74 06                	je     ffff800000813dc0 <strtok+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
ffff800000813dba:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813dbe:	eb 05                	jmp    ffff800000813dc5 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
ffff800000813dc0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
ffff800000813dc5:	c9                   	leave  
ffff800000813dc6:	c3                   	ret    

ffff800000813dc7 <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
ffff800000813dc7:	f3 0f 1e fa          	endbr64 
ffff800000813dcb:	55                   	push   rbp
ffff800000813dcc:	48 89 e5             	mov    rbp,rsp
ffff800000813dcf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813dd3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000813dd7:	eb 3c                	jmp    ffff800000813e15 <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
ffff800000813dd9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813ddd:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813de0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813de4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813de7:	38 c2                	cmp    dl,al
ffff800000813de9:	7e 07                	jle    ffff800000813df2 <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
ffff800000813deb:	b8 01 00 00 00       	mov    eax,0x1
ffff800000813df0:	eb 52                	jmp    ffff800000813e44 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
ffff800000813df2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813df6:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813df9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813dfd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813e00:	38 c2                	cmp    dl,al
ffff800000813e02:	7d 07                	jge    ffff800000813e0b <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
ffff800000813e04:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000813e09:	eb 39                	jmp    ffff800000813e44 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
ffff800000813e0b:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
ffff800000813e10:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000813e15:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813e19:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813e1c:	84 c0                	test   al,al
ffff800000813e1e:	74 0b                	je     ffff800000813e2b <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
ffff800000813e20:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813e24:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813e27:	84 c0                	test   al,al
ffff800000813e29:	75 ae                	jne    ffff800000813dd9 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
ffff800000813e2b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813e2f:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813e32:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813e36:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813e39:	38 c2                	cmp    dl,al
ffff800000813e3b:	75 07                	jne    ffff800000813e44 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
ffff800000813e3d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000813e42:	eb 00                	jmp    ffff800000813e44 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
ffff800000813e44:	5d                   	pop    rbp
ffff800000813e45:	c3                   	ret    

ffff800000813e46 <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
ffff800000813e46:	f3 0f 1e fa          	endbr64 
ffff800000813e4a:	55                   	push   rbp
ffff800000813e4b:	48 89 e5             	mov    rbp,rsp
ffff800000813e4e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
ffff800000813e52:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
ffff800000813e59:	eb 09                	jmp    ffff800000813e64 <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
ffff800000813e5b:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffff800000813e60:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
ffff800000813e64:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813e68:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813e6b:	84 c0                	test   al,al
ffff800000813e6d:	75 ec                	jne    ffff800000813e5b <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
ffff800000813e6f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
ffff800000813e72:	5d                   	pop    rbp
ffff800000813e73:	c3                   	ret    

ffff800000813e74 <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
ffff800000813e74:	f3 0f 1e fa          	endbr64 
ffff800000813e78:	55                   	push   rbp
ffff800000813e79:	48 89 e5             	mov    rbp,rsp
ffff800000813e7c:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000813e83:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000813e8a:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffff800000813e91:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffff800000813e98:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffff800000813e9f:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffff800000813ea6:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffff800000813ead:	84 c0                	test   al,al
ffff800000813eaf:	74 20                	je     ffff800000813ed1 <sprintf+0x5d>
ffff800000813eb1:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffff800000813eb5:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffff800000813eb9:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffff800000813ebd:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffff800000813ec1:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffff800000813ec5:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffff800000813ec9:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffff800000813ecd:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
ffff800000813ed1:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000813ed8:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
ffff800000813edf:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000813ee6:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
ffff800000813eed:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff800000813ef4:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000813ef7:	eb 39                	jmp    ffff800000813f32 <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
ffff800000813ef9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813f00:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813f03:	3c 25                	cmp    al,0x25
ffff800000813f05:	75 15                	jne    ffff800000813f1c <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
ffff800000813f07:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000813f0e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813f11:	3c 25                	cmp    al,0x25
ffff800000813f13:	74 07                	je     ffff800000813f1c <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
ffff800000813f15:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
ffff800000813f1c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813f23:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
ffff800000813f2a:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000813f31:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000813f32:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813f39:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813f3c:	3c 0a                	cmp    al,0xa
ffff800000813f3e:	75 b9                	jne    ffff800000813ef9 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
ffff800000813f40:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
ffff800000813f47:	00 00 00 
ffff800000813f4a:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
ffff800000813f51:	00 00 00 
ffff800000813f54:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000813f58:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff800000813f5f:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffff800000813f66:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
ffff800000813f6d:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000813f74:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff800000813f7b:	e9 09 02 00 00       	jmp    ffff800000814189 <sprintf+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000813f80:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813f87:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813f8a:	3c 25                	cmp    al,0x25
ffff800000813f8c:	0f 85 ca 01 00 00    	jne    ffff80000081415c <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
ffff800000813f92:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813f99:	48 83 c0 01          	add    rax,0x1
ffff800000813f9d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813fa0:	84 c0                	test   al,al
ffff800000813fa2:	0f 84 b4 01 00 00    	je     ffff80000081415c <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
ffff800000813fa8:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000813faf:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813fb0:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813fb7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813fba:	3c 78                	cmp    al,0x78
ffff800000813fbc:	75 6f                	jne    ffff80000081402d <sprintf+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
ffff800000813fbe:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000813fc4:	83 f8 2f             	cmp    eax,0x2f
ffff800000813fc7:	77 23                	ja     ffff800000813fec <sprintf+0x178>
ffff800000813fc9:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000813fd0:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813fd6:	89 d2                	mov    edx,edx
ffff800000813fd8:	48 01 d0             	add    rax,rdx
ffff800000813fdb:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813fe1:	83 c2 08             	add    edx,0x8
ffff800000813fe4:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813fea:	eb 12                	jmp    ffff800000813ffe <sprintf+0x18a>
ffff800000813fec:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000813ff3:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813ff7:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000813ffe:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814000:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
ffff800000814006:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff80000081400c:	48 63 d0             	movsxd rdx,eax
ffff80000081400f:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814016:	48 89 d6             	mov    rsi,rdx
ffff800000814019:	48 89 c7             	mov    rdi,rax
ffff80000081401c:	48 b8 99 42 81 00 00 	movabs rax,0xffff800000814299
ffff800000814023:	80 ff ff 
ffff800000814026:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000814028:	e9 54 01 00 00       	jmp    ffff800000814181 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
ffff80000081402d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814034:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814037:	3c 73                	cmp    al,0x73
ffff800000814039:	75 6f                	jne    ffff8000008140aa <sprintf+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
ffff80000081403b:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000814041:	83 f8 2f             	cmp    eax,0x2f
ffff800000814044:	77 23                	ja     ffff800000814069 <sprintf+0x1f5>
ffff800000814046:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081404d:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000814053:	89 d2                	mov    edx,edx
ffff800000814055:	48 01 d0             	add    rax,rdx
ffff800000814058:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081405e:	83 c2 08             	add    edx,0x8
ffff800000814061:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000814067:	eb 12                	jmp    ffff80000081407b <sprintf+0x207>
ffff800000814069:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000814070:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000814074:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff80000081407b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081407e:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
ffff800000814085:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff80000081408c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814093:	48 89 d6             	mov    rsi,rdx
ffff800000814096:	48 89 c7             	mov    rdi,rax
ffff800000814099:	48 b8 27 43 81 00 00 	movabs rax,0xffff800000814327
ffff8000008140a0:	80 ff ff 
ffff8000008140a3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008140a5:	e9 d7 00 00 00       	jmp    ffff800000814181 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
ffff8000008140aa:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008140b1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008140b4:	3c 64                	cmp    al,0x64
ffff8000008140b6:	75 6d                	jne    ffff800000814125 <sprintf+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
ffff8000008140b8:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008140be:	83 f8 2f             	cmp    eax,0x2f
ffff8000008140c1:	77 23                	ja     ffff8000008140e6 <sprintf+0x272>
ffff8000008140c3:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008140ca:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008140d0:	89 d2                	mov    edx,edx
ffff8000008140d2:	48 01 d0             	add    rax,rdx
ffff8000008140d5:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008140db:	83 c2 08             	add    edx,0x8
ffff8000008140de:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff8000008140e4:	eb 12                	jmp    ffff8000008140f8 <sprintf+0x284>
ffff8000008140e6:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008140ed:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008140f1:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008140f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008140fb:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
ffff800000814102:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000814109:	89 c2                	mov    edx,eax
ffff80000081410b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814112:	89 d6                	mov    esi,edx
ffff800000814114:	48 89 c7             	mov    rdi,rax
ffff800000814117:	48 b8 de 41 81 00 00 	movabs rax,0xffff8000008141de
ffff80000081411e:	80 ff ff 
ffff800000814121:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000814123:	eb 5c                	jmp    ffff800000814181 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
ffff800000814125:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081412c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081412f:	3c 63                	cmp    al,0x63
ffff800000814131:	75 02                	jne    ffff800000814135 <sprintf+0x2c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
ffff800000814133:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
ffff800000814135:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081413c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081413f:	0f be d0             	movsx  edx,al
ffff800000814142:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814149:	89 d6                	mov    esi,edx
ffff80000081414b:	48 89 c7             	mov    rdi,rax
ffff80000081414e:	48 b8 9f 41 81 00 00 	movabs rax,0xffff80000081419f
ffff800000814155:	80 ff ff 
ffff800000814158:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff80000081415a:	eb 25                	jmp    ffff800000814181 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
ffff80000081415c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814163:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814166:	0f be d0             	movsx  edx,al
ffff800000814169:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814170:	89 d6                	mov    esi,edx
ffff800000814172:	48 89 c7             	mov    rdi,rax
ffff800000814175:	48 b8 9f 41 81 00 00 	movabs rax,0xffff80000081419f
ffff80000081417c:	80 ff ff 
ffff80000081417f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff800000814181:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000814188:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
ffff800000814189:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814190:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814193:	84 c0                	test   al,al
ffff800000814195:	0f 85 e5 fd ff ff    	jne    ffff800000813f80 <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
ffff80000081419b:	90                   	nop
ffff80000081419c:	90                   	nop
ffff80000081419d:	c9                   	leave  
ffff80000081419e:	c3                   	ret    

ffff80000081419f <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
ffff80000081419f:	f3 0f 1e fa          	endbr64 
ffff8000008141a3:	55                   	push   rbp
ffff8000008141a4:	48 89 e5             	mov    rbp,rsp
ffff8000008141a7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008141ab:	89 f0                	mov    eax,esi
ffff8000008141ad:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff8000008141b0:	eb 05                	jmp    ffff8000008141b7 <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
ffff8000008141b2:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff8000008141b7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008141bb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008141be:	84 c0                	test   al,al
ffff8000008141c0:	75 f0                	jne    ffff8000008141b2 <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
ffff8000008141c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008141c6:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008141ca:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008141ce:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
ffff8000008141d2:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
ffff8000008141d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008141d8:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
ffff8000008141db:	90                   	nop
ffff8000008141dc:	5d                   	pop    rbp
ffff8000008141dd:	c3                   	ret    

ffff8000008141de <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
ffff8000008141de:	f3 0f 1e fa          	endbr64 
ffff8000008141e2:	55                   	push   rbp
ffff8000008141e3:	48 89 e5             	mov    rbp,rsp
ffff8000008141e6:	48 83 ec 30          	sub    rsp,0x30
ffff8000008141ea:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008141ee:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
ffff8000008141f1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff8000008141f8:	eb 65                	jmp    ffff80000081425f <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
ffff8000008141fa:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008141fd:	48 63 c2             	movsxd rax,edx
ffff800000814200:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
ffff800000814207:	48 c1 e8 20          	shr    rax,0x20
ffff80000081420b:	c1 f8 02             	sar    eax,0x2
ffff80000081420e:	89 d6                	mov    esi,edx
ffff800000814210:	c1 fe 1f             	sar    esi,0x1f
ffff800000814213:	29 f0                	sub    eax,esi
ffff800000814215:	89 c1                	mov    ecx,eax
ffff800000814217:	89 c8                	mov    eax,ecx
ffff800000814219:	c1 e0 02             	shl    eax,0x2
ffff80000081421c:	01 c8                	add    eax,ecx
ffff80000081421e:	01 c0                	add    eax,eax
ffff800000814220:	89 d1                	mov    ecx,edx
ffff800000814222:	29 c1                	sub    ecx,eax
ffff800000814224:	89 c8                	mov    eax,ecx
ffff800000814226:	83 c0 30             	add    eax,0x30
ffff800000814229:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
ffff80000081422c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081422f:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000814232:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000814235:	48 98                	cdqe   
ffff800000814237:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff80000081423b:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
ffff80000081423f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000814242:	48 63 d0             	movsxd rdx,eax
ffff800000814245:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
ffff80000081424c:	48 c1 ea 20          	shr    rdx,0x20
ffff800000814250:	c1 fa 02             	sar    edx,0x2
ffff800000814253:	c1 f8 1f             	sar    eax,0x1f
ffff800000814256:	89 c1                	mov    ecx,eax
ffff800000814258:	89 d0                	mov    eax,edx
ffff80000081425a:	29 c8                	sub    eax,ecx
ffff80000081425c:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff80000081425f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000814262:	83 f8 0f             	cmp    eax,0xf
ffff800000814265:	76 93                	jbe    ffff8000008141fa <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
ffff800000814267:	eb 26                	jmp    ffff80000081428f <sprint_decimal+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
ffff800000814269:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff80000081426d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000814270:	48 98                	cdqe   
ffff800000814272:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000814277:	0f be d0             	movsx  edx,al
ffff80000081427a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081427e:	89 d6                	mov    esi,edx
ffff800000814280:	48 89 c7             	mov    rdi,rax
ffff800000814283:	48 b8 9f 41 81 00 00 	movabs rax,0xffff80000081419f
ffff80000081428a:	80 ff ff 
ffff80000081428d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
ffff80000081428f:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000814293:	7f d4                	jg     ffff800000814269 <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
ffff800000814295:	90                   	nop
ffff800000814296:	90                   	nop
ffff800000814297:	c9                   	leave  
ffff800000814298:	c3                   	ret    

ffff800000814299 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long c)
{
ffff800000814299:	f3 0f 1e fa          	endbr64 
ffff80000081429d:	55                   	push   rbp
ffff80000081429e:	48 89 e5             	mov    rbp,rsp
ffff8000008142a1:	48 83 ec 30          	sub    rsp,0x30
ffff8000008142a5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008142a9:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[22];
    int p=0;
ffff8000008142ad:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<10){
ffff8000008142b4:	eb 39                	jmp    ffff8000008142ef <sprint_hex+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
ffff8000008142b6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008142ba:	83 e0 0f             	and    eax,0xf
ffff8000008142bd:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
ffff8000008142c0:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
ffff8000008142c4:	76 06                	jbe    ffff8000008142cc <sprint_hex+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
ffff8000008142c6:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
ffff8000008142ca:	eb 04                	jmp    ffff8000008142d0 <sprint_hex+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
ffff8000008142cc:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
ffff8000008142d0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008142d3:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008142d6:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff8000008142d9:	48 98                	cdqe   
ffff8000008142db:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff8000008142df:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
ffff8000008142e3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008142e7:	48 c1 e8 04          	shr    rax,0x4
ffff8000008142eb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<10){
ffff8000008142ef:	83 7d fc 09          	cmp    DWORD PTR [rbp-0x4],0x9
ffff8000008142f3:	7e c1                	jle    ffff8000008142b6 <sprint_hex+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
ffff8000008142f5:	eb 26                	jmp    ffff80000081431d <sprint_hex+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
ffff8000008142f7:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff8000008142fb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008142fe:	48 98                	cdqe   
ffff800000814300:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000814305:	0f be d0             	movsx  edx,al
ffff800000814308:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081430c:	89 d6                	mov    esi,edx
ffff80000081430e:	48 89 c7             	mov    rdi,rax
ffff800000814311:	48 b8 9f 41 81 00 00 	movabs rax,0xffff80000081419f
ffff800000814318:	80 ff ff 
ffff80000081431b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
ffff80000081431d:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000814321:	7f d4                	jg     ffff8000008142f7 <sprint_hex+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
ffff800000814323:	90                   	nop
ffff800000814324:	90                   	nop
ffff800000814325:	c9                   	leave  
ffff800000814326:	c3                   	ret    

ffff800000814327 <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
ffff800000814327:	f3 0f 1e fa          	endbr64 
ffff80000081432b:	55                   	push   rbp
ffff80000081432c:	48 89 e5             	mov    rbp,rsp
ffff80000081432f:	48 83 ec 10          	sub    rsp,0x10
ffff800000814333:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000814337:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff80000081433b:	eb 27                	jmp    ffff800000814364 <sprintn+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
ffff80000081433d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000814341:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000814345:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000814349:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081434c:	0f be d0             	movsx  edx,al
ffff80000081434f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000814353:	89 d6                	mov    esi,edx
ffff800000814355:	48 89 c7             	mov    rdi,rax
ffff800000814358:	48 b8 9f 41 81 00 00 	movabs rax,0xffff80000081419f
ffff80000081435f:	80 ff ff 
ffff800000814362:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff800000814364:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000814368:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081436b:	84 c0                	test   al,al
ffff80000081436d:	75 ce                	jne    ffff80000081433d <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
ffff80000081436f:	90                   	nop
ffff800000814370:	90                   	nop
ffff800000814371:	c9                   	leave  
ffff800000814372:	c3                   	ret    
ffff800000814373:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000081437a:	00 00 00 
ffff80000081437d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff800000814380 <create_zero>:
create_zero():
ffff800000814380:	e8 f5 2b ff ff       	call   ffff800000806f7a <req_proc>
ffff800000814385:	83 f8 ff             	cmp    eax,0xffffffff
ffff800000814388:	74 0c                	je     ffff800000814396 <create_zero.retu>
ffff80000081438a:	e8 3c 2d ff ff       	call   ffff8000008070cb <set_proc>
ffff80000081438f:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
ffff800000814393:	83 c4 40             	add    esp,0x40

ffff800000814396 <create_zero.retu>:
create_zero.retu():
ffff800000814396:	c3                   	ret    

ffff800000814397 <switch_proc_asm>:
save_context():
ffff800000814397:	67 8b 44 24 24       	mov    eax,DWORD PTR [esp+0x24]
ffff80000081439c:	83 c0 44             	add    eax,0x44
ffff80000081439f:	b9 08 00 00 00       	mov    ecx,0x8
ffff8000008143a4:	89 e7                	mov    edi,esp

ffff8000008143a6 <save_context.loops>:
save_context.loops():
ffff8000008143a6:	67 8b 17             	mov    edx,DWORD PTR [edi]
ffff8000008143a9:	67 89 10             	mov    DWORD PTR [eax],edx
ffff8000008143ac:	83 c7 04             	add    edi,0x4
ffff8000008143af:	83 e8 04             	sub    eax,0x4
ffff8000008143b2:	e2 f2                	loop   ffff8000008143a6 <save_context.loops>
ffff8000008143b4:	5b                   	pop    rbx
ffff8000008143b5:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff8000008143ba:	67 89 58 24          	mov    DWORD PTR [eax+0x24],ebx
ffff8000008143be:	67 48 8b 1c 24       	mov    rbx,QWORD PTR [esp]
ffff8000008143c3:	67 89 58 20          	mov    DWORD PTR [eax+0x20],ebx
ffff8000008143c7:	c3                   	ret    

ffff8000008143c8 <desc>:
	...

ffff8000008143d0 <ret_sys_call>:
ret_sys_call():
ffff8000008143d0:	58                   	pop    rax
ffff8000008143d1:	8e d8                	mov    ds,eax
ffff8000008143d3:	58                   	pop    rax
ffff8000008143d4:	8e c0                	mov    es,eax
ffff8000008143d6:	41 5f                	pop    r15
ffff8000008143d8:	41 5e                	pop    r14
ffff8000008143da:	41 5d                	pop    r13
ffff8000008143dc:	41 5c                	pop    r12
ffff8000008143de:	41 5b                	pop    r11
ffff8000008143e0:	41 5a                	pop    r10
ffff8000008143e2:	41 59                	pop    r9
ffff8000008143e4:	41 58                	pop    r8
ffff8000008143e6:	5e                   	pop    rsi
ffff8000008143e7:	5f                   	pop    rdi
ffff8000008143e8:	5a                   	pop    rdx
ffff8000008143e9:	59                   	pop    rcx
ffff8000008143ea:	5b                   	pop    rbx
ffff8000008143eb:	58                   	pop    rax

ffff8000008143ec <tmp>:
tmp():
ffff8000008143ec:	48 0f 07             	sysretq 

ffff8000008143ef <ret_normal_proc>:
ret_normal_proc():
ffff8000008143ef:	58                   	pop    rax
ffff8000008143f0:	8e d8                	mov    ds,eax
ffff8000008143f2:	58                   	pop    rax
ffff8000008143f3:	8e c0                	mov    es,eax
ffff8000008143f5:	41 5f                	pop    r15
ffff8000008143f7:	41 5e                	pop    r14
ffff8000008143f9:	41 5d                	pop    r13
ffff8000008143fb:	41 5c                	pop    r12
ffff8000008143fd:	41 5b                	pop    r11
ffff8000008143ff:	41 5a                	pop    r10
ffff800000814401:	41 59                	pop    r9
ffff800000814403:	41 58                	pop    r8
ffff800000814405:	5e                   	pop    rsi
ffff800000814406:	5f                   	pop    rdi
ffff800000814407:	5a                   	pop    rdx
ffff800000814408:	59                   	pop    rcx
ffff800000814409:	5b                   	pop    rbx
ffff80000081440a:	58                   	pop    rax
ffff80000081440b:	c3                   	ret    

ffff80000081440c <move_to_user_mode>:
move_to_user_mode():
ffff80000081440c:	48 b9 1c 44 81 00 00 	movabs rcx,0xffff80000081441c
ffff800000814413:	80 ff ff 
ffff800000814416:	9c                   	pushf  
ffff800000814417:	41 5b                	pop    r11
ffff800000814419:	48 0f 07             	sysretq 

ffff80000081441c <move_to_user_mode.result>:
move_to_user_mode.result():
ffff80000081441c:	b8 2b 00 00 00       	mov    eax,0x2b
ffff800000814421:	8e c0                	mov    es,eax
ffff800000814423:	8e d8                	mov    ds,eax
ffff800000814425:	8e e0                	mov    fs,eax
ffff800000814427:	8e e8                	mov    gs,eax
ffff800000814429:	c3                   	ret    
