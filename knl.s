
bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

ffff800000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:13
#include "kb.h"
#include "framebuffer.h"

gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
ffff800000800000:	f3 0f 1e fa          	endbr64 
ffff800000800004:	55                   	push   rbp
ffff800000800005:	48 89 e5             	mov    rbp,rsp
ffff800000800008:	41 57                	push   r15
ffff80000080000a:	53                   	push   rbx
ffff80000080000b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080000f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080000f <init_int+0xf>
ffff800000800016:	49 bb e9 da 11 00 00 	movabs r11,0x11dae9
ffff80000080001d:	00 00 00 
ffff800000800020:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:15
    //asm volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800023:	48 b8 30 ff ff ff ff 	movabs rax,0xffffffffffffff30
ffff80000080002a:	ff ff ff 
ffff80000080002d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800031:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800036:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080003b:	48 89 c6             	mov    rsi,rax
ffff80000080003e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000800043:	49 89 df             	mov    r15,rbx
ffff800000800046:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff80000080004d:	ff ff ff 
ffff800000800050:	48 01 d8             	add    rax,rbx
ffff800000800053:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800055:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080005c:	ff ff ff 
ffff80000080005f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800063:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800068:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080006d:	48 89 c6             	mov    rsi,rax
ffff800000800070:	bf 01 00 00 00       	mov    edi,0x1
ffff800000800075:	49 89 df             	mov    r15,rbx
ffff800000800078:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff80000080007f:	ff ff ff 
ffff800000800082:	48 01 d8             	add    rax,rbx
ffff800000800085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800087:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080008e:	ff ff ff 
ffff800000800091:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800095:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080009a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080009f:	48 89 c6             	mov    rsi,rax
ffff8000008000a2:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008000a7:	49 89 df             	mov    r15,rbx
ffff8000008000aa:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff8000008000b1:	ff ff ff 
ffff8000008000b4:	48 01 d8             	add    rax,rbx
ffff8000008000b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000b9:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008000c0:	ff ff ff 
ffff8000008000c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000c7:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000cc:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008000d1:	48 89 c6             	mov    rsi,rax
ffff8000008000d4:	bf 03 00 00 00       	mov    edi,0x3
ffff8000008000d9:	49 89 df             	mov    r15,rbx
ffff8000008000dc:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff8000008000e3:	ff ff ff 
ffff8000008000e6:	48 01 d8             	add    rax,rbx
ffff8000008000e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000eb:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff8000008000f2:	ff ff ff 
ffff8000008000f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000f9:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000fe:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800103:	48 89 c6             	mov    rsi,rax
ffff800000800106:	bf 04 00 00 00       	mov    edi,0x4
ffff80000080010b:	49 89 df             	mov    r15,rbx
ffff80000080010e:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff800000800115:	ff ff ff 
ffff800000800118:	48 01 d8             	add    rax,rbx
ffff80000080011b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080011d:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000800124:	ff ff ff 
ffff800000800127:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080012b:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800130:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800135:	48 89 c6             	mov    rsi,rax
ffff800000800138:	bf 05 00 00 00       	mov    edi,0x5
ffff80000080013d:	49 89 df             	mov    r15,rbx
ffff800000800140:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff800000800147:	ff ff ff 
ffff80000080014a:	48 01 d8             	add    rax,rbx
ffff80000080014d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080014f:	48 b8 60 ff ff ff ff 	movabs rax,0xffffffffffffff60
ffff800000800156:	ff ff ff 
ffff800000800159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080015d:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800162:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800167:	48 89 c6             	mov    rsi,rax
ffff80000080016a:	bf 06 00 00 00       	mov    edi,0x6
ffff80000080016f:	49 89 df             	mov    r15,rbx
ffff800000800172:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff800000800179:	ff ff ff 
ffff80000080017c:	48 01 d8             	add    rax,rbx
ffff80000080017f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800181:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000800188:	ff ff ff 
ffff80000080018b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080018f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800194:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800199:	48 89 c6             	mov    rsi,rax
ffff80000080019c:	bf 07 00 00 00       	mov    edi,0x7
ffff8000008001a1:	49 89 df             	mov    r15,rbx
ffff8000008001a4:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff8000008001ab:	ff ff ff 
ffff8000008001ae:	48 01 d8             	add    rax,rbx
ffff8000008001b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
ffff8000008001b3:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff8000008001ba:	ff ff ff 
ffff8000008001bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001c1:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001c6:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001cb:	48 89 c6             	mov    rsi,rax
ffff8000008001ce:	bf 08 00 00 00       	mov    edi,0x8
ffff8000008001d3:	49 89 df             	mov    r15,rbx
ffff8000008001d6:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff8000008001dd:	ff ff ff 
ffff8000008001e0:	48 01 d8             	add    rax,rbx
ffff8000008001e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008001e5:	48 b8 20 fe ff ff ff 	movabs rax,0xfffffffffffffe20
ffff8000008001ec:	ff ff ff 
ffff8000008001ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001f3:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001f8:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001fd:	48 89 c6             	mov    rsi,rax
ffff800000800200:	bf 09 00 00 00       	mov    edi,0x9
ffff800000800205:	49 89 df             	mov    r15,rbx
ffff800000800208:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff80000080020f:	ff ff ff 
ffff800000800212:	48 01 d8             	add    rax,rbx
ffff800000800215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800217:	48 b8 d0 ff ff ff ff 	movabs rax,0xffffffffffffffd0
ffff80000080021e:	ff ff ff 
ffff800000800221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800225:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080022a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080022f:	48 89 c6             	mov    rsi,rax
ffff800000800232:	bf 0a 00 00 00       	mov    edi,0xa
ffff800000800237:	49 89 df             	mov    r15,rbx
ffff80000080023a:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff800000800241:	ff ff ff 
ffff800000800244:	48 01 d8             	add    rax,rbx
ffff800000800247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800249:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff800000800250:	ff ff ff 
ffff800000800253:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800257:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080025c:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800261:	48 89 c6             	mov    rsi,rax
ffff800000800264:	bf 0b 00 00 00       	mov    edi,0xb
ffff800000800269:	49 89 df             	mov    r15,rbx
ffff80000080026c:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff800000800273:	ff ff ff 
ffff800000800276:	48 01 d8             	add    rax,rbx
ffff800000800279:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
ffff80000080027b:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff800000800282:	ff ff ff 
ffff800000800285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800289:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080028e:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800293:	48 89 c6             	mov    rsi,rax
ffff800000800296:	bf 0c 00 00 00       	mov    edi,0xc
ffff80000080029b:	49 89 df             	mov    r15,rbx
ffff80000080029e:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff8000008002a5:	ff ff ff 
ffff8000008002a8:	48 01 d8             	add    rax,rbx
ffff8000008002ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002ad:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008002b4:	ff ff ff 
ffff8000008002b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002bb:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002c0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002c5:	48 89 c6             	mov    rsi,rax
ffff8000008002c8:	bf 0d 00 00 00       	mov    edi,0xd
ffff8000008002cd:	49 89 df             	mov    r15,rbx
ffff8000008002d0:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff8000008002d7:	ff ff ff 
ffff8000008002da:	48 01 d8             	add    rax,rbx
ffff8000008002dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002df:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff8000008002e6:	ff ff ff 
ffff8000008002e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002ed:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002f2:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002f7:	48 89 c6             	mov    rsi,rax
ffff8000008002fa:	bf 0e 00 00 00       	mov    edi,0xe
ffff8000008002ff:	49 89 df             	mov    r15,rbx
ffff800000800302:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff800000800309:	ff ff ff 
ffff80000080030c:	48 01 d8             	add    rax,rbx
ffff80000080030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800311:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000800318:	ff ff ff 
ffff80000080031b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080031f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800324:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800329:	48 89 c6             	mov    rsi,rax
ffff80000080032c:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000800331:	49 89 df             	mov    r15,rbx
ffff800000800334:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff80000080033b:	ff ff ff 
ffff80000080033e:	48 01 d8             	add    rax,rbx
ffff800000800341:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800343:	48 b8 68 ff ff ff ff 	movabs rax,0xffffffffffffff68
ffff80000080034a:	ff ff ff 
ffff80000080034d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800351:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800356:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080035b:	48 89 c6             	mov    rsi,rax
ffff80000080035e:	bf 10 00 00 00       	mov    edi,0x10
ffff800000800363:	49 89 df             	mov    r15,rbx
ffff800000800366:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff80000080036d:	ff ff ff 
ffff800000800370:	48 01 d8             	add    rax,rbx
ffff800000800373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32
    for (int i=17;i<48;i++)
ffff800000800375:	c7 45 ec 11 00 00 00 	mov    DWORD PTR [rbp-0x14],0x11
ffff80000080037c:	eb 39                	jmp    ffff8000008003b7 <init_int+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff80000080037e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000800385:	ff ff ff 
ffff800000800388:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080038c:	48 89 c6             	mov    rsi,rax
ffff80000080038f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000800392:	0f b6 c0             	movzx  eax,al
ffff800000800395:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff80000080039a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080039f:	89 c7                	mov    edi,eax
ffff8000008003a1:	49 89 df             	mov    r15,rbx
ffff8000008003a4:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff8000008003ab:	ff ff ff 
ffff8000008003ae:	48 01 d8             	add    rax,rbx
ffff8000008003b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 3)
    for (int i=17;i<48;i++)
ffff8000008003b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 1)
ffff8000008003b7:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff8000008003bb:	7e c1                	jle    ffff80000080037e <init_int+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003bd:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff8000008003c4:	ff ff ff 
ffff8000008003c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003cb:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff8000008003d0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008003d5:	48 89 c6             	mov    rsi,rax
ffff8000008003d8:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008003dd:	49 89 df             	mov    r15,rbx
ffff8000008003e0:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff8000008003e7:	ff ff ff 
ffff8000008003ea:	48 01 d8             	add    rax,rbx
ffff8000008003ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003ef:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff8000008003f6:	ff ff ff 
ffff8000008003f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003fd:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800402:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800407:	48 89 c6             	mov    rsi,rax
ffff80000080040a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080040f:	49 89 df             	mov    r15,rbx
ffff800000800412:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff800000800419:	ff ff ff 
ffff80000080041c:	48 01 d8             	add    rax,rbx
ffff80000080041f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff800000800421:	48 b8 f8 ff ff ff ff 	movabs rax,0xfffffffffffffff8
ffff800000800428:	ff ff ff 
ffff80000080042b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080042f:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800434:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800439:	48 89 c6             	mov    rsi,rax
ffff80000080043c:	bf 2e 00 00 00       	mov    edi,0x2e
ffff800000800441:	49 89 df             	mov    r15,rbx
ffff800000800444:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff80000080044b:	ff ff ff 
ffff80000080044e:	48 01 d8             	add    rax,rbx
ffff800000800451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:37
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
ffff800000800453:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff80000080045a:	ff ff ff 
ffff80000080045d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800461:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800466:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080046b:	48 89 c6             	mov    rsi,rax
ffff80000080046e:	bf 80 00 00 00       	mov    edi,0x80
ffff800000800473:	49 89 df             	mov    r15,rbx
ffff800000800476:	48 b8 da 2a ee ff ff 	movabs rax,0xffffffffffee2ada
ffff80000080047d:	ff ff ff 
ffff800000800480:	48 01 d8             	add    rax,rbx
ffff800000800483:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:42
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
ffff800000800485:	be 11 00 00 00       	mov    esi,0x11
ffff80000080048a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080048f:	49 89 df             	mov    r15,rbx
ffff800000800492:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000800499:	ff ff ff 
ffff80000080049c:	48 01 d8             	add    rax,rbx
ffff80000080049f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:43
	outb(0xA0,0x11);
ffff8000008004a1:	be 11 00 00 00       	mov    esi,0x11
ffff8000008004a6:	bf a0 00 00 00       	mov    edi,0xa0
ffff8000008004ab:	49 89 df             	mov    r15,rbx
ffff8000008004ae:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008004b5:	ff ff ff 
ffff8000008004b8:	48 01 d8             	add    rax,rbx
ffff8000008004bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:45
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
ffff8000008004bd:	be 20 00 00 00       	mov    esi,0x20
ffff8000008004c2:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004c7:	49 89 df             	mov    r15,rbx
ffff8000008004ca:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008004d1:	ff ff ff 
ffff8000008004d4:	48 01 d8             	add    rax,rbx
ffff8000008004d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:46
	outb(0xA1,0x28);
ffff8000008004d9:	be 28 00 00 00       	mov    esi,0x28
ffff8000008004de:	bf a1 00 00 00       	mov    edi,0xa1
ffff8000008004e3:	49 89 df             	mov    r15,rbx
ffff8000008004e6:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008004ed:	ff ff ff 
ffff8000008004f0:	48 01 d8             	add    rax,rbx
ffff8000008004f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:48
	//ICW3
	outb(0x21,0x04);
ffff8000008004f5:	be 04 00 00 00       	mov    esi,0x4
ffff8000008004fa:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004ff:	49 89 df             	mov    r15,rbx
ffff800000800502:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000800509:	ff ff ff 
ffff80000080050c:	48 01 d8             	add    rax,rbx
ffff80000080050f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:49
	outb(0xA1,0x02);
ffff800000800511:	be 02 00 00 00       	mov    esi,0x2
ffff800000800516:	bf a1 00 00 00       	mov    edi,0xa1
ffff80000080051b:	49 89 df             	mov    r15,rbx
ffff80000080051e:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000800525:	ff ff ff 
ffff800000800528:	48 01 d8             	add    rax,rbx
ffff80000080052b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:51
	//ICW4
	outb(0x21,0x01);
ffff80000080052d:	be 01 00 00 00       	mov    esi,0x1
ffff800000800532:	bf 21 00 00 00       	mov    edi,0x21
ffff800000800537:	49 89 df             	mov    r15,rbx
ffff80000080053a:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000800541:	ff ff ff 
ffff800000800544:	48 01 d8             	add    rax,rbx
ffff800000800547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:52
	outb(0xA1,0x01);
ffff800000800549:	be 01 00 00 00       	mov    esi,0x1
ffff80000080054e:	bf a1 00 00 00       	mov    edi,0xa1
ffff800000800553:	49 89 df             	mov    r15,rbx
ffff800000800556:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080055d:	ff ff ff 
ffff800000800560:	48 01 d8             	add    rax,rbx
ffff800000800563:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:54

    turn_on_int();
ffff800000800565:	49 89 df             	mov    r15,rbx
ffff800000800568:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080056d:	48 ba 22 a3 ee ff ff 	movabs rdx,0xffffffffffeea322
ffff800000800574:	ff ff ff 
ffff800000800577:	48 01 da             	add    rdx,rbx
ffff80000080057a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:58


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
ffff80000080057c:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000800583:	ff ff ff 
ffff800000800586:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080058a:	48 89 c6             	mov    rsi,rax
ffff80000080058d:	b8 82 00 00 c0       	mov    eax,0xc0000082
ffff800000800592:	48 89 c7             	mov    rdi,rax
ffff800000800595:	49 89 df             	mov    r15,rbx
ffff800000800598:	48 b8 6f 33 ee ff ff 	movabs rax,0xffffffffffee336f
ffff80000080059f:	ff ff ff 
ffff8000008005a2:	48 01 d8             	add    rax,rbx
ffff8000008005a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:60
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
ffff8000008005a7:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
ffff8000008005ae:	b8 84 00 00 c0       	mov    eax,0xc0000084
ffff8000008005b3:	48 89 c7             	mov    rdi,rax
ffff8000008005b6:	49 89 df             	mov    r15,rbx
ffff8000008005b9:	48 b8 6f 33 ee ff ff 	movabs rax,0xffffffffffee336f
ffff8000008005c0:	ff ff ff 
ffff8000008005c3:	48 01 d8             	add    rax,rbx
ffff8000008005c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:61
}
ffff8000008005c8:	90                   	nop
ffff8000008005c9:	48 83 c4 10          	add    rsp,0x10
ffff8000008005cd:	5b                   	pop    rbx
ffff8000008005ce:	41 5f                	pop    r15
ffff8000008005d0:	5d                   	pop    rbp
ffff8000008005d1:	c3                   	ret    

ffff8000008005d2 <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:63
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
ffff8000008005d2:	f3 0f 1e fa          	endbr64 
ffff8000008005d6:	55                   	push   rbp
ffff8000008005d7:	48 89 e5             	mov    rbp,rsp
ffff8000008005da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008005da <set_gate+0x8>
ffff8000008005e1:	49 bb 1e d5 11 00 00 	movabs r11,0x11d51e
ffff8000008005e8:	00 00 00 
ffff8000008005eb:	4c 01 d8             	add    rax,r11
ffff8000008005ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008005f2:	89 d6                	mov    esi,edx
ffff8000008005f4:	89 ca                	mov    edx,ecx
ffff8000008005f6:	89 f9                	mov    ecx,edi
ffff8000008005f8:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
ffff8000008005fb:	89 f1                	mov    ecx,esi
ffff8000008005fd:	66 89 4d f8          	mov    WORD PTR [rbp-0x8],cx
ffff800000800601:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:70
    idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector;
#else
    offset|=KNL_BASE;//中断必须在内核空间
ffff800000800605:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080060c:	80 ff ff 
ffff80000080060f:	48 09 55 f0          	or     QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_low=offset&0xffff;
ffff800000800613:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000080061a:	ff ff ff 
ffff80000080061d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000800624:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800628:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080062c:	48 01 ca             	add    rdx,rcx
ffff80000080062f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000800633:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_mid=(offset>>16)&0xffff;
ffff800000800636:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080063a:	48 89 d1             	mov    rcx,rdx
ffff80000080063d:	48 c1 e9 10          	shr    rcx,0x10
ffff800000800641:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800648:	ff ff ff 
ffff80000080064b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080064f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000800652:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800656:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080065a:	48 01 f2             	add    rdx,rsi
ffff80000080065d:	66 89 4a 06          	mov    WORD PTR [rdx+0x6],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].offset_high=(offset>>32);//0x0000ffff;
ffff800000800661:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000800665:	48 89 d1             	mov    rcx,rdx
ffff800000800668:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080066c:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800673:	ff ff ff 
ffff800000800676:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080067a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080067d:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800681:	48 c1 e2 04          	shl    rdx,0x4
ffff800000800685:	48 01 f2             	add    rdx,rsi
ffff800000800688:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].attr=attr|1;//1是ist索引
ffff80000080068b:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800692:	ff ff ff 
ffff800000800695:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800699:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080069c:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006a0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006a4:	48 01 ca             	add    rdx,rcx
ffff8000008006a7:	0f b7 4d ec          	movzx  ecx,WORD PTR [rbp-0x14]
ffff8000008006ab:	83 c9 01             	or     ecx,0x1
ffff8000008006ae:	66 89 4a 04          	mov    WORD PTR [rdx+0x4],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].selector=selector;
ffff8000008006b2:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff8000008006b9:	ff ff ff 
ffff8000008006bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008006c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008006c3:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006c7:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006cb:	48 01 d1             	add    rcx,rdx
ffff8000008006ce:	0f b7 55 f8          	movzx  edx,WORD PTR [rbp-0x8]
ffff8000008006d2:	66 89 51 02          	mov    WORD PTR [rcx+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:76
    idt[index].rsvd=0;
ffff8000008006d6:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff8000008006dd:	ff ff ff 
ffff8000008006e0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008006e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008006e7:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffff8000008006eb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008006ef:	48 01 d0             	add    rax,rdx
ffff8000008006f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:78
#endif
}
ffff8000008006f9:	90                   	nop
ffff8000008006fa:	5d                   	pop    rbp
ffff8000008006fb:	c3                   	ret    

ffff8000008006fc <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:80

void divide_err(){
ffff8000008006fc:	f3 0f 1e fa          	endbr64 
ffff800000800700:	55                   	push   rbp
ffff800000800701:	48 89 e5             	mov    rbp,rsp
ffff800000800704:	41 57                	push   r15
ffff800000800706:	48 83 ec 08          	sub    rsp,0x8
ffff80000080070a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080070a <divide_err+0xe>
ffff800000800711:	49 bb ee d3 11 00 00 	movabs r11,0x11d3ee
ffff800000800718:	00 00 00 
ffff80000080071b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:81
    asm("cli");
ffff80000080071e:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:83
    //puts("divide err");
    eoi();
ffff80000080071f:	49 89 d7             	mov    r15,rdx
ffff800000800722:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800727:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff80000080072e:	ff ff ff 
ffff800000800731:	48 01 d1             	add    rcx,rdx
ffff800000800734:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800736:	fb                   	sti    
ffff800000800737:	c9                   	leave  
ffff800000800738:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:85
}
ffff80000080073a:	90                   	nop
ffff80000080073b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080073f:	c9                   	leave  
ffff800000800740:	c3                   	ret    

ffff800000800741 <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:87

void debug(){
ffff800000800741:	f3 0f 1e fa          	endbr64 
ffff800000800745:	55                   	push   rbp
ffff800000800746:	48 89 e5             	mov    rbp,rsp
ffff800000800749:	41 57                	push   r15
ffff80000080074b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080074f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080074f <debug+0xe>
ffff800000800756:	49 bb a9 d3 11 00 00 	movabs r11,0x11d3a9
ffff80000080075d:	00 00 00 
ffff800000800760:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:88
    asm("cli");
ffff800000800763:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:90
    //puts("debug");
    eoi();
ffff800000800764:	49 89 d7             	mov    r15,rdx
ffff800000800767:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080076c:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800773:	ff ff ff 
ffff800000800776:	48 01 d1             	add    rcx,rdx
ffff800000800779:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080077b:	fb                   	sti    
ffff80000080077c:	c9                   	leave  
ffff80000080077d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
}
ffff80000080077f:	90                   	nop
ffff800000800780:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800784:	c9                   	leave  
ffff800000800785:	c3                   	ret    

ffff800000800786 <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
void default_int_proc(){
ffff800000800786:	f3 0f 1e fa          	endbr64 
ffff80000080078a:	55                   	push   rbp
ffff80000080078b:	48 89 e5             	mov    rbp,rsp
ffff80000080078e:	41 57                	push   r15
ffff800000800790:	48 83 ec 08          	sub    rsp,0x8
ffff800000800794:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800794 <default_int_proc+0xe>
ffff80000080079b:	49 bb 64 d3 11 00 00 	movabs r11,0x11d364
ffff8000008007a2:	00 00 00 
ffff8000008007a5:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:94
    asm("cli");
ffff8000008007a8:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:96
    //puts("default_int_proc");
    eoi();
ffff8000008007a9:	49 89 d7             	mov    r15,rdx
ffff8000008007ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007b1:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff8000008007b8:	ff ff ff 
ffff8000008007bb:	48 01 d1             	add    rcx,rdx
ffff8000008007be:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008007c0:	fb                   	sti    
ffff8000008007c1:	c9                   	leave  
ffff8000008007c2:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
}
ffff8000008007c4:	90                   	nop
ffff8000008007c5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008007c9:	c9                   	leave  
ffff8000008007ca:	c3                   	ret    

ffff8000008007cb <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
void breakpoint(){
ffff8000008007cb:	f3 0f 1e fa          	endbr64 
ffff8000008007cf:	55                   	push   rbp
ffff8000008007d0:	48 89 e5             	mov    rbp,rsp
ffff8000008007d3:	41 57                	push   r15
ffff8000008007d5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008007d9:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008007d9 <breakpoint+0xe>
ffff8000008007e0:	49 bb 1f d3 11 00 00 	movabs r11,0x11d31f
ffff8000008007e7:	00 00 00 
ffff8000008007ea:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:100
    asm("cli");
ffff8000008007ed:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:102
    //puts("breakpoint");
    eoi();
ffff8000008007ee:	49 89 d7             	mov    r15,rdx
ffff8000008007f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007f6:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff8000008007fd:	ff ff ff 
ffff800000800800:	48 01 d1             	add    rcx,rdx
ffff800000800803:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800805:	fb                   	sti    
ffff800000800806:	c9                   	leave  
ffff800000800807:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
}
ffff800000800809:	90                   	nop
ffff80000080080a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080080e:	c9                   	leave  
ffff80000080080f:	c3                   	ret    

ffff800000800810 <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
void overflow(){
ffff800000800810:	f3 0f 1e fa          	endbr64 
ffff800000800814:	55                   	push   rbp
ffff800000800815:	48 89 e5             	mov    rbp,rsp
ffff800000800818:	41 57                	push   r15
ffff80000080081a:	48 83 ec 08          	sub    rsp,0x8
ffff80000080081e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080081e <overflow+0xe>
ffff800000800825:	49 bb da d2 11 00 00 	movabs r11,0x11d2da
ffff80000080082c:	00 00 00 
ffff80000080082f:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:106
    asm("cli");
ffff800000800832:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:108
    //puts("overflow");
    eoi();
ffff800000800833:	49 89 d7             	mov    r15,rdx
ffff800000800836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080083b:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800842:	ff ff ff 
ffff800000800845:	48 01 d1             	add    rcx,rdx
ffff800000800848:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080084a:	fb                   	sti    
ffff80000080084b:	c9                   	leave  
ffff80000080084c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
}
ffff80000080084e:	90                   	nop
ffff80000080084f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800853:	c9                   	leave  
ffff800000800854:	c3                   	ret    

ffff800000800855 <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
void bounds(){
ffff800000800855:	f3 0f 1e fa          	endbr64 
ffff800000800859:	55                   	push   rbp
ffff80000080085a:	48 89 e5             	mov    rbp,rsp
ffff80000080085d:	41 57                	push   r15
ffff80000080085f:	48 83 ec 08          	sub    rsp,0x8
ffff800000800863:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800863 <bounds+0xe>
ffff80000080086a:	49 bb 95 d2 11 00 00 	movabs r11,0x11d295
ffff800000800871:	00 00 00 
ffff800000800874:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:112
    asm("cli");
ffff800000800877:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:114
    //puts("bounds");
    eoi();
ffff800000800878:	49 89 d7             	mov    r15,rdx
ffff80000080087b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800880:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800887:	ff ff ff 
ffff80000080088a:	48 01 d1             	add    rcx,rdx
ffff80000080088d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080088f:	fb                   	sti    
ffff800000800890:	c9                   	leave  
ffff800000800891:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
}
ffff800000800893:	90                   	nop
ffff800000800894:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800898:	c9                   	leave  
ffff800000800899:	c3                   	ret    

ffff80000080089a <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:117
void undefined_operator(){
ffff80000080089a:	f3 0f 1e fa          	endbr64 
ffff80000080089e:	55                   	push   rbp
ffff80000080089f:	48 89 e5             	mov    rbp,rsp
ffff8000008008a2:	41 57                	push   r15
ffff8000008008a4:	53                   	push   rbx
ffff8000008008a5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008008a5 <undefined_operator+0xb>
ffff8000008008ac:	49 bb 53 d2 11 00 00 	movabs r11,0x11d253
ffff8000008008b3:	00 00 00 
ffff8000008008b6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:119
    //puts("undef operator");
    eoi();
ffff8000008008b9:	49 89 df             	mov    r15,rbx
ffff8000008008bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008c1:	48 ba 16 a3 ee ff ff 	movabs rdx,0xffffffffffeea316
ffff8000008008c8:	ff ff ff 
ffff8000008008cb:	48 01 da             	add    rdx,rbx
ffff8000008008ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    report_back_trace_of_err();
ffff8000008008d0:	49 89 df             	mov    r15,rbx
ffff8000008008d3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008d8:	48 ba 46 a3 ee ff ff 	movabs rdx,0xffffffffffeea346
ffff8000008008df:	ff ff ff 
ffff8000008008e2:	48 01 da             	add    rdx,rbx
ffff8000008008e5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
ffff8000008008e7:	eb fe                	jmp    ffff8000008008e7 <undefined_operator+0x4d>
ffff8000008008e9:	c9                   	leave  
ffff8000008008ea:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
}
ffff8000008008ec:	90                   	nop
ffff8000008008ed:	5b                   	pop    rbx
ffff8000008008ee:	41 5f                	pop    r15
ffff8000008008f0:	5d                   	pop    rbp
ffff8000008008f1:	c3                   	ret    

ffff8000008008f2 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
void coprocessor_notexist(){
ffff8000008008f2:	f3 0f 1e fa          	endbr64 
ffff8000008008f6:	55                   	push   rbp
ffff8000008008f7:	48 89 e5             	mov    rbp,rsp
ffff8000008008fa:	41 57                	push   r15
ffff8000008008fc:	48 83 ec 08          	sub    rsp,0x8
ffff800000800900:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800900 <coprocessor_notexist+0xe>
ffff800000800907:	49 bb f8 d1 11 00 00 	movabs r11,0x11d1f8
ffff80000080090e:	00 00 00 
ffff800000800911:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:124
    asm("cli");
ffff800000800914:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:126
    //puts("coprocessor doesnt exist");
    eoi();
ffff800000800915:	49 89 d7             	mov    r15,rdx
ffff800000800918:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080091d:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800924:	ff ff ff 
ffff800000800927:	48 01 d1             	add    rcx,rdx
ffff80000080092a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080092c:	fb                   	sti    
ffff80000080092d:	c9                   	leave  
ffff80000080092e:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:128
}
ffff800000800930:	90                   	nop
ffff800000800931:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800935:	c9                   	leave  
ffff800000800936:	c3                   	ret    

ffff800000800937 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
void double_ints(){
ffff800000800937:	f3 0f 1e fa          	endbr64 
ffff80000080093b:	55                   	push   rbp
ffff80000080093c:	48 89 e5             	mov    rbp,rsp
ffff80000080093f:	41 57                	push   r15
ffff800000800941:	48 83 ec 08          	sub    rsp,0x8
ffff800000800945:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800945 <double_ints+0xe>
ffff80000080094c:	49 bb b3 d1 11 00 00 	movabs r11,0x11d1b3
ffff800000800953:	00 00 00 
ffff800000800956:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:130
    asm("cli");
ffff800000800959:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:132
    //puts("double interrupts");
    eoi();
ffff80000080095a:	49 89 d7             	mov    r15,rdx
ffff80000080095d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800962:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800969:	ff ff ff 
ffff80000080096c:	48 01 d1             	add    rcx,rdx
ffff80000080096f:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800971:	fb                   	sti    
ffff800000800972:	c9                   	leave  
ffff800000800973:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:134
}
ffff800000800975:	90                   	nop
ffff800000800976:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080097a:	c9                   	leave  
ffff80000080097b:	c3                   	ret    

ffff80000080097c <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:135
void coprocessor_seg_overbound(){
ffff80000080097c:	f3 0f 1e fa          	endbr64 
ffff800000800980:	55                   	push   rbp
ffff800000800981:	48 89 e5             	mov    rbp,rsp
ffff800000800984:	41 57                	push   r15
ffff800000800986:	48 83 ec 08          	sub    rsp,0x8
ffff80000080098a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080098a <coprocessor_seg_overbound+0xe>
ffff800000800991:	49 bb 6e d1 11 00 00 	movabs r11,0x11d16e
ffff800000800998:	00 00 00 
ffff80000080099b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:137
    //puts("coprocessfor seg overdound");
    eoi();
ffff80000080099e:	49 89 d7             	mov    r15,rdx
ffff8000008009a1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009a6:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff8000008009ad:	ff ff ff 
ffff8000008009b0:	48 01 d1             	add    rcx,rdx
ffff8000008009b3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
    __asm__ volatile ("leave \r\n iretq");
ffff8000008009b5:	c9                   	leave  
ffff8000008009b6:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:139
}
ffff8000008009b8:	90                   	nop
ffff8000008009b9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008009bd:	c9                   	leave  
ffff8000008009be:	c3                   	ret    

ffff8000008009bf <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
void invalid_tss(){
ffff8000008009bf:	f3 0f 1e fa          	endbr64 
ffff8000008009c3:	55                   	push   rbp
ffff8000008009c4:	48 89 e5             	mov    rbp,rsp
ffff8000008009c7:	41 57                	push   r15
ffff8000008009c9:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009cd:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009cd <invalid_tss+0xe>
ffff8000008009d4:	49 bb 2b d1 11 00 00 	movabs r11,0x11d12b
ffff8000008009db:	00 00 00 
ffff8000008009de:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:141
    asm("cli");
ffff8000008009e1:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:143
    //puts("invalid tss");
    eoi();
ffff8000008009e2:	49 89 d7             	mov    r15,rdx
ffff8000008009e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009ea:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff8000008009f1:	ff ff ff 
ffff8000008009f4:	48 01 d1             	add    rcx,rdx
ffff8000008009f7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008009f9:	fb                   	sti    
ffff8000008009fa:	c9                   	leave  
ffff8000008009fb:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:145
}
ffff8000008009fd:	90                   	nop
ffff8000008009fe:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a02:	c9                   	leave  
ffff800000800a03:	c3                   	ret    

ffff800000800a04 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
void segment_notexist(){
ffff800000800a04:	f3 0f 1e fa          	endbr64 
ffff800000800a08:	55                   	push   rbp
ffff800000800a09:	48 89 e5             	mov    rbp,rsp
ffff800000800a0c:	41 57                	push   r15
ffff800000800a0e:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a12:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a12 <segment_notexist+0xe>
ffff800000800a19:	49 bb e6 d0 11 00 00 	movabs r11,0x11d0e6
ffff800000800a20:	00 00 00 
ffff800000800a23:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:147
    asm("cli");
ffff800000800a26:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:149
    //puts("seg nonexistent");
    eoi();
ffff800000800a27:	49 89 d7             	mov    r15,rdx
ffff800000800a2a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a2f:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800a36:	ff ff ff 
ffff800000800a39:	48 01 d1             	add    rcx,rdx
ffff800000800a3c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a3e:	fb                   	sti    
ffff800000800a3f:	c9                   	leave  
ffff800000800a40:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:151
}
ffff800000800a42:	90                   	nop
ffff800000800a43:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a47:	c9                   	leave  
ffff800000800a48:	c3                   	ret    

ffff800000800a49 <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
void stackseg_overbound(){
ffff800000800a49:	f3 0f 1e fa          	endbr64 
ffff800000800a4d:	55                   	push   rbp
ffff800000800a4e:	48 89 e5             	mov    rbp,rsp
ffff800000800a51:	41 57                	push   r15
ffff800000800a53:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a57:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a57 <stackseg_overbound+0xe>
ffff800000800a5e:	49 bb a1 d0 11 00 00 	movabs r11,0x11d0a1
ffff800000800a65:	00 00 00 
ffff800000800a68:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:153
    asm("cli");
ffff800000800a6b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:155
    //puts("stack seg overbound");
    eoi();
ffff800000800a6c:	49 89 d7             	mov    r15,rdx
ffff800000800a6f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a74:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800a7b:	ff ff ff 
ffff800000800a7e:	48 01 d1             	add    rcx,rdx
ffff800000800a81:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a83:	fb                   	sti    
ffff800000800a84:	c9                   	leave  
ffff800000800a85:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:157
}
ffff800000800a87:	90                   	nop
ffff800000800a88:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a8c:	c9                   	leave  
ffff800000800a8d:	c3                   	ret    

ffff800000800a8e <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:158
void general_protect(){
ffff800000800a8e:	f3 0f 1e fa          	endbr64 
ffff800000800a92:	55                   	push   rbp
ffff800000800a93:	48 89 e5             	mov    rbp,rsp
ffff800000800a96:	41 57                	push   r15
ffff800000800a98:	48 83 ec 18          	sub    rsp,0x18
ffff800000800a9c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a9c <general_protect+0xe>
ffff800000800aa3:	49 bb 5c d0 11 00 00 	movabs r11,0x11d05c
ffff800000800aaa:	00 00 00 
ffff800000800aad:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:160
    //print("general protect.");
    int err_code=0;
ffff800000800ab0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:178
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
ffff800000800ab7:	49 89 d7             	mov    r15,rdx
ffff800000800aba:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800abf:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800ac6:	ff ff ff 
ffff800000800ac9:	48 01 d1             	add    rcx,rdx
ffff800000800acc:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:179
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
ffff800000800ace:	c9                   	leave  
ffff800000800acf:	48 83 c4 08          	add    rsp,0x8
ffff800000800ad3:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:180
}
ffff800000800ad5:	90                   	nop
ffff800000800ad6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800ada:	c9                   	leave  
ffff800000800adb:	c3                   	ret    

ffff800000800adc <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:182

void coprocessor_err(){
ffff800000800adc:	f3 0f 1e fa          	endbr64 
ffff800000800ae0:	55                   	push   rbp
ffff800000800ae1:	48 89 e5             	mov    rbp,rsp
ffff800000800ae4:	41 57                	push   r15
ffff800000800ae6:	48 83 ec 08          	sub    rsp,0x8
ffff800000800aea:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800aea <coprocessor_err+0xe>
ffff800000800af1:	49 bb 0e d0 11 00 00 	movabs r11,0x11d00e
ffff800000800af8:	00 00 00 
ffff800000800afb:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:183
    asm("cli");
ffff800000800afe:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:185
    //puts("coprocessor err");
    eoi();
ffff800000800aff:	49 89 d7             	mov    r15,rdx
ffff800000800b02:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800b07:	48 b9 16 a3 ee ff ff 	movabs rcx,0xffffffffffeea316
ffff800000800b0e:	ff ff ff 
ffff800000800b11:	48 01 d1             	add    rcx,rdx
ffff800000800b14:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800b16:	fb                   	sti    
ffff800000800b17:	c9                   	leave  
ffff800000800b18:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:187
}
ffff800000800b1a:	90                   	nop
ffff800000800b1b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800b1f:	c9                   	leave  
ffff800000800b20:	c3                   	ret    

ffff800000800b21 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:206

xchg rcx to r10

*/
int syscall(long a, long b, long c, long d, long e, long f)
{
ffff800000800b21:	f3 0f 1e fa          	endbr64 
ffff800000800b25:	55                   	push   rbp
ffff800000800b26:	48 89 e5             	mov    rbp,rsp
ffff800000800b29:	41 57                	push   r15
ffff800000800b2b:	53                   	push   rbx
ffff800000800b2c:	48 83 ec 40          	sub    rsp,0x40
ffff800000800b30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800b30 <syscall+0xf>
ffff800000800b37:	49 bb c8 cf 11 00 00 	movabs r11,0x11cfc8
ffff800000800b3e:	00 00 00 
ffff800000800b41:	4c 01 db             	add    rbx,r11
ffff800000800b44:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000800b48:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000800b4c:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000800b50:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff800000800b54:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
ffff800000800b58:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:208
    unsigned long num;
    asm volatile("":"=a"(num));//这样rax中存的参数就到这了
ffff800000800b5c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:209
    switch (num)
ffff800000800b60:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800b64:	48 83 e8 05          	sub    rax,0x5
ffff800000800b68:	48 83 f8 5f          	cmp    rax,0x5f
ffff800000800b6c:	0f 87 ec 02 00 00    	ja     ffff800000800e5e <syscall+0x33d>
ffff800000800b72:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800b79:	00 
ffff800000800b7a:	48 8d 05 1f a1 11 00 	lea    rax,[rip+0x11a11f]        # ffff80000091aca0 <filesystem+0x20>
ffff800000800b81:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800b85:	48 8d 15 14 a1 11 00 	lea    rdx,[rip+0x11a114]        # ffff80000091aca0 <filesystem+0x20>
ffff800000800b8c:	48 01 d0             	add    rax,rdx
ffff800000800b8f:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:216
        // case 0:return reg_device(a);
        // case 1:return dispose_device(a);
        // case 2:return reg_driver(a);
        // case 3:return dispose_driver(a);
        // case 4:return call_drv_func(a,b,c);
        case 5:return req_page_at(a,b);
ffff800000800b92:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800b96:	89 c2                	mov    edx,eax
ffff800000800b98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800b9c:	89 d6                	mov    esi,edx
ffff800000800b9e:	48 89 c7             	mov    rdi,rax
ffff800000800ba1:	49 89 df             	mov    r15,rbx
ffff800000800ba4:	48 b8 88 54 ee ff ff 	movabs rax,0xffffffffffee5488
ffff800000800bab:	ff ff ff 
ffff800000800bae:	48 01 d8             	add    rax,rbx
ffff800000800bb1:	ff d0                	call   rax
ffff800000800bb3:	e9 a6 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:217
        case 6:return free_page(a);
ffff800000800bb8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bbc:	48 89 c7             	mov    rdi,rax
ffff800000800bbf:	49 89 df             	mov    r15,rbx
ffff800000800bc2:	48 b8 7c 51 ee ff ff 	movabs rax,0xffffffffffee517c
ffff800000800bc9:	ff ff ff 
ffff800000800bcc:	48 01 d8             	add    rax,rbx
ffff800000800bcf:	ff d0                	call   rax
ffff800000800bd1:	e9 88 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:218
        case 7:return reg_proc(a, b, c);
ffff800000800bd6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800bda:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000800bde:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800be2:	48 89 ce             	mov    rsi,rcx
ffff800000800be5:	48 89 c7             	mov    rdi,rax
ffff800000800be8:	49 89 df             	mov    r15,rbx
ffff800000800beb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800bf0:	48 b9 da 80 ee ff ff 	movabs rcx,0xffffffffffee80da
ffff800000800bf7:	ff ff ff 
ffff800000800bfa:	48 01 d9             	add    rcx,rbx
ffff800000800bfd:	ff d1                	call   rcx
ffff800000800bff:	e9 5a 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        case 8:del_proc(a);
ffff800000800c04:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c08:	89 c7                	mov    edi,eax
ffff800000800c0a:	49 89 df             	mov    r15,rbx
ffff800000800c0d:	48 b8 8b 7d ee ff ff 	movabs rax,0xffffffffffee7d8b
ffff800000800c14:	ff ff ff 
ffff800000800c17:	48 01 d8             	add    rax,rbx
ffff800000800c1a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 10:chk_vm(a,b);
ffff800000800c1c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c20:	89 c2                	mov    edx,eax
ffff800000800c22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c26:	89 d6                	mov    esi,edx
ffff800000800c28:	89 c7                	mov    edi,eax
ffff800000800c2a:	49 89 df             	mov    r15,rbx
ffff800000800c2d:	48 b8 ba 55 ee ff ff 	movabs rax,0xffffffffffee55ba
ffff800000800c34:	ff ff ff 
ffff800000800c37:	48 01 d8             	add    rax,rbx
ffff800000800c3a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 11:return sys_open(a,b);
ffff800000800c3c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c40:	89 c2                	mov    edx,eax
ffff800000800c42:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c46:	89 d6                	mov    esi,edx
ffff800000800c48:	48 89 c7             	mov    rdi,rax
ffff800000800c4b:	49 89 df             	mov    r15,rbx
ffff800000800c4e:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff800000800c55:	ff ff ff 
ffff800000800c58:	48 01 d8             	add    rax,rbx
ffff800000800c5b:	ff d0                	call   rax
ffff800000800c5d:	e9 fc 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 12:return sys_close(a);
ffff800000800c62:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c66:	89 c7                	mov    edi,eax
ffff800000800c68:	49 89 df             	mov    r15,rbx
ffff800000800c6b:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff800000800c72:	ff ff ff 
ffff800000800c75:	48 01 d8             	add    rax,rbx
ffff800000800c78:	ff d0                	call   rax
ffff800000800c7a:	e9 df 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 13:return sys_read(a,b,c);
ffff800000800c7f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c83:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800c87:	89 d1                	mov    ecx,edx
ffff800000800c89:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800c8d:	48 89 c6             	mov    rsi,rax
ffff800000800c90:	89 cf                	mov    edi,ecx
ffff800000800c92:	49 89 df             	mov    r15,rbx
ffff800000800c95:	48 b8 5a e4 ee ff ff 	movabs rax,0xffffffffffeee45a
ffff800000800c9c:	ff ff ff 
ffff800000800c9f:	48 01 d8             	add    rax,rbx
ffff800000800ca2:	ff d0                	call   rax
ffff800000800ca4:	e9 b5 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 14:return sys_write(a,b,c);
ffff800000800ca9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800cad:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800cb1:	89 d1                	mov    ecx,edx
ffff800000800cb3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800cb7:	48 89 c6             	mov    rsi,rax
ffff800000800cba:	89 cf                	mov    edi,ecx
ffff800000800cbc:	49 89 df             	mov    r15,rbx
ffff800000800cbf:	48 b8 28 e5 ee ff ff 	movabs rax,0xffffffffffeee528
ffff800000800cc6:	ff ff ff 
ffff800000800cc9:	48 01 d8             	add    rax,rbx
ffff800000800ccc:	ff d0                	call   rax
ffff800000800cce:	e9 8b 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:225
        case 15:return sys_lseek(a,b,c);
ffff800000800cd3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800cd7:	89 c2                	mov    edx,eax
ffff800000800cd9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800cdd:	89 c1                	mov    ecx,eax
ffff800000800cdf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800ce3:	48 89 c6             	mov    rsi,rax
ffff800000800ce6:	89 cf                	mov    edi,ecx
ffff800000800ce8:	49 89 df             	mov    r15,rbx
ffff800000800ceb:	48 b8 f6 e5 ee ff ff 	movabs rax,0xffffffffffeee5f6
ffff800000800cf2:	ff ff ff 
ffff800000800cf5:	48 01 d8             	add    rax,rbx
ffff800000800cf8:	ff d0                	call   rax
ffff800000800cfa:	e9 5f 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:229
        // case 16:return sys_tell(a);
        // case 17:return reg_vol(a,b,c);
        // case 18:return free_vol(a);
        case 19:return execute(a, NULL);
ffff800000800cff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d03:	be 00 00 00 00       	mov    esi,0x0
ffff800000800d08:	48 89 c7             	mov    rdi,rax
ffff800000800d0b:	49 89 df             	mov    r15,rbx
ffff800000800d0e:	48 b8 8c a6 ee ff ff 	movabs rax,0xffffffffffeea68c
ffff800000800d15:	ff ff ff 
ffff800000800d18:	48 01 d8             	add    rax,rbx
ffff800000800d1b:	ff d0                	call   rax
ffff800000800d1d:	e9 3c 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:230
        case SYSCALL_EXIT:return sys_exit(a);
ffff800000800d22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d26:	89 c7                	mov    edi,eax
ffff800000800d28:	49 89 df             	mov    r15,rbx
ffff800000800d2b:	48 b8 60 80 ee ff ff 	movabs rax,0xffffffffffee8060
ffff800000800d32:	ff ff ff 
ffff800000800d35:	48 01 d8             	add    rax,rbx
ffff800000800d38:	ff d0                	call   rax
ffff800000800d3a:	e9 1f 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:231
        case SYSCALL_CALL:return exec_call(a);
ffff800000800d3f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d43:	48 89 c7             	mov    rdi,rax
ffff800000800d46:	49 89 df             	mov    r15,rbx
ffff800000800d49:	48 b8 8f aa ee ff ff 	movabs rax,0xffffffffffeeaa8f
ffff800000800d50:	ff ff ff 
ffff800000800d53:	48 01 d8             	add    rax,rbx
ffff800000800d56:	ff d0                	call   rax
ffff800000800d58:	e9 01 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        // case SYSCALL_MKFIFO:return sys_mkfifo(a);
        case SYSCALL_MALLOC:return sys_malloc(a);
ffff800000800d5d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d61:	48 89 c7             	mov    rdi,rax
ffff800000800d64:	49 89 df             	mov    r15,rbx
ffff800000800d67:	48 b8 be 83 ee ff ff 	movabs rax,0xffffffffffee83be
ffff800000800d6e:	ff ff ff 
ffff800000800d71:	48 01 d8             	add    rax,rbx
ffff800000800d74:	ff d0                	call   rax
ffff800000800d76:	e9 e3 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_FREE:return sys_free(a);
ffff800000800d7b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d7f:	89 c7                	mov    edi,eax
ffff800000800d81:	49 89 df             	mov    r15,rbx
ffff800000800d84:	48 b8 ab 85 ee ff ff 	movabs rax,0xffffffffffee85ab
ffff800000800d8b:	ff ff ff 
ffff800000800d8e:	48 01 d8             	add    rax,rbx
ffff800000800d91:	ff d0                	call   rax
ffff800000800d93:	e9 c6 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:235
        case SYSCALL_KB_READC:return sys_analyse_key();
ffff800000800d98:	49 89 df             	mov    r15,rbx
ffff800000800d9b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800da0:	48 ba bc 08 ef ff ff 	movabs rdx,0xffffffffffef08bc
ffff800000800da7:	ff ff ff 
ffff800000800daa:	48 01 da             	add    rdx,rbx
ffff800000800dad:	ff d2                	call   rdx
ffff800000800daf:	0f be c0             	movsx  eax,al
ffff800000800db2:	e9 a7 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        // case SYSCALL_FIND_DEV:return sys_find_dev(a);
        case SYSCALL_FORK:return sys_fork();
ffff800000800db7:	49 89 df             	mov    r15,rbx
ffff800000800dba:	48 b8 d2 89 ee ff ff 	movabs rax,0xffffffffffee89d2
ffff800000800dc1:	ff ff ff 
ffff800000800dc4:	48 01 d8             	add    rax,rbx
ffff800000800dc7:	ff d0                	call   rax
ffff800000800dc9:	e9 90 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:238
        case SYSCALL_EXECVE:return sys_execve(a, b, c);
ffff800000800dce:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800dd2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800dd6:	89 c1                	mov    ecx,eax
ffff800000800dd8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800ddc:	89 ce                	mov    esi,ecx
ffff800000800dde:	48 89 c7             	mov    rdi,rax
ffff800000800de1:	49 89 df             	mov    r15,rbx
ffff800000800de4:	48 b8 80 a7 ee ff ff 	movabs rax,0xffffffffffeea780
ffff800000800deb:	ff ff ff 
ffff800000800dee:	48 01 d8             	add    rax,rbx
ffff800000800df1:	ff d0                	call   rax
ffff800000800df3:	eb 69                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        // case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
        case SYSCALL_WAIT:return sys_wait(a,b,c);
ffff800000800df5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800df9:	89 c6                	mov    esi,eax
ffff800000800dfb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800dff:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800e03:	89 d1                	mov    ecx,edx
ffff800000800e05:	89 f2                	mov    edx,esi
ffff800000800e07:	48 89 c6             	mov    rsi,rax
ffff800000800e0a:	89 cf                	mov    edi,ecx
ffff800000800e0c:	49 89 df             	mov    r15,rbx
ffff800000800e0f:	48 b8 3f e7 ee ff ff 	movabs rax,0xffffffffffeee73f
ffff800000800e16:	ff ff ff 
ffff800000800e19:	48 01 d8             	add    rax,rbx
ffff800000800e1c:	ff d0                	call   rax
ffff800000800e1e:	eb 3e                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:241
        case SYSCALL_MMAP:return sys_mmap(a,b,c,d,e,f);
ffff800000800e20:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000800e24:	41 89 c0             	mov    r8d,eax
ffff800000800e27:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000800e2b:	89 c7                	mov    edi,eax
ffff800000800e2d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000800e31:	89 c1                	mov    ecx,eax
ffff800000800e33:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800e37:	89 c2                	mov    edx,eax
ffff800000800e39:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000800e3d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e41:	45 89 c1             	mov    r9d,r8d
ffff800000800e44:	41 89 f8             	mov    r8d,edi
ffff800000800e47:	48 89 c7             	mov    rdi,rax
ffff800000800e4a:	49 89 df             	mov    r15,rbx
ffff800000800e4d:	48 b8 5a ed ee ff ff 	movabs rax,0xffffffffffeeed5a
ffff800000800e54:	ff ff ff 
ffff800000800e57:	48 01 d8             	add    rax,rbx
ffff800000800e5a:	ff d0                	call   rax
ffff800000800e5c:	eb 00                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:247
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
ffff800000800e5e:	48 83 c4 40          	add    rsp,0x40
ffff800000800e62:	5b                   	pop    rbx
ffff800000800e63:	41 5f                	pop    r15
ffff800000800e65:	5d                   	pop    rbp
ffff800000800e66:	c3                   	ret    

ffff800000800e67 <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:249
void wrmsr(unsigned long address,unsigned long value)
{
ffff800000800e67:	f3 0f 1e fa          	endbr64 
ffff800000800e6b:	55                   	push   rbp
ffff800000800e6c:	48 89 e5             	mov    rbp,rsp
ffff800000800e6f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800e6f <wrmsr+0x8>
ffff800000800e76:	49 bb 89 cc 11 00 00 	movabs r11,0x11cc89
ffff800000800e7d:	00 00 00 
ffff800000800e80:	4c 01 d8             	add    rax,r11
ffff800000800e83:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000800e87:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
ffff800000800e8b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800e8f:	48 c1 e8 20          	shr    rax,0x20
ffff800000800e93:	48 89 c2             	mov    rdx,rax
ffff800000800e96:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800e9a:	89 c0                	mov    eax,eax
ffff800000800e9c:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000800ea0:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:251
ffff800000800ea2:	90                   	nop
ffff800000800ea3:	5d                   	pop    rbp
ffff800000800ea4:	c3                   	ret    

ffff800000800ea5 <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:24
#include "ramdisk.h"
#include "ramfs.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
ffff800000800ea5:	f3 0f 1e fa          	endbr64 
ffff800000800ea9:	55                   	push   rbp
ffff800000800eaa:	48 89 e5             	mov    rbp,rsp
ffff800000800ead:	41 57                	push   r15
ffff800000800eaf:	53                   	push   rbx
ffff800000800eb0:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000800eb7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800eb7 <main+0x12>
ffff800000800ebe:	49 bb 41 cc 11 00 00 	movabs r11,0x11cc41
ffff800000800ec5:	00 00 00 
ffff800000800ec8:	4c 01 db             	add    rbx,r11
ffff800000800ecb:	89 bd fc fe ff ff    	mov    DWORD PTR [rbp-0x104],edi
ffff800000800ed1:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26

    struct multiboot_header* mbi=0ul;
ffff800000800ed8:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000800edf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    mbi=(struct multiboot_header*)addr;
ffff800000800ee0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800ee7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:28
    init_logging();
ffff800000800eeb:	49 89 df             	mov    r15,rbx
ffff800000800eee:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800ef3:	48 ba 2e 3a ee ff ff 	movabs rdx,0xffffffffffee3a2e
ffff800000800efa:	ff ff ff 
ffff800000800efd:	48 01 da             	add    rdx,rbx
ffff800000800f00:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
ffff800000800f02:	bf f8 03 00 00       	mov    edi,0x3f8
ffff800000800f07:	49 89 df             	mov    r15,rbx
ffff800000800f0a:	48 b8 9f 49 ef ff ff 	movabs rax,0xffffffffffef499f
ffff800000800f11:	ff ff ff 
ffff800000800f14:	48 01 d8             	add    rax,rbx
ffff800000800f17:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:39
    comprintf("\rgamessis os loaded.\r\n");
ffff800000800f19:	48 b8 a8 d4 ff ff ff 	movabs rax,0xffffffffffffd4a8
ffff800000800f20:	ff ff ff 
ffff800000800f23:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000800f27:	48 89 c7             	mov    rdi,rax
ffff800000800f2a:	49 89 df             	mov    r15,rbx
ffff800000800f2d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800f32:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff800000800f39:	ff ff ff 
ffff800000800f3c:	48 01 da             	add    rdx,rbx
ffff800000800f3f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:41
	unsigned size;
    size = *(unsigned long*)addr;
ffff800000800f41:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800f48:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000800f4b:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
ffff800000800f4e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800f55:	48 83 c0 08          	add    rax,0x8
ffff800000800f59:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000800f5d:	e9 93 02 00 00       	jmp    ffff8000008011f5 <main+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
		switch (tag->type)
ffff800000800f62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800f66:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000800f68:	83 f8 08             	cmp    eax,0x8
ffff800000800f6b:	0f 87 71 02 00 00    	ja     ffff8000008011e2 <main+0x33d>
ffff800000800f71:	89 c0                	mov    eax,eax
ffff800000800f73:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800f7a:	00 
ffff800000800f7b:	48 8d 05 7e a0 11 00 	lea    rax,[rip+0x11a07e]        # ffff80000091b000 <.LC4+0x11>
ffff800000800f82:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800f86:	48 8d 15 73 a0 11 00 	lea    rdx,[rip+0x11a073]        # ffff80000091b000 <.LC4+0x11>
ffff800000800f8d:	48 01 d0             	add    rax,rdx
ffff800000800f90:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:66
			break;
		case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
			//printf("mem_lower = %uKB, mem_upper = %uKB\n",
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_lower,
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_upper);
			set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
ffff800000800f93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800f97:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000800f9a:	89 c7                	mov    edi,eax
ffff800000800f9c:	49 89 df             	mov    r15,rbx
ffff800000800f9f:	48 b8 18 43 ee ff ff 	movabs rax,0xffffffffffee4318
ffff800000800fa6:	ff ff ff 
ffff800000800fa9:	48 01 d8             	add    rax,rbx
ffff800000800fac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:67
			break;
ffff800000800fae:	e9 2f 02 00 00       	jmp    ffff8000008011e2 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80

			break;
		case MULTIBOOT_TAG_TYPE_MMAP:
		{
			//printf("mmap\n");
            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
ffff800000800fb3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800fb7:	48 83 c0 10          	add    rax,0x10
ffff800000800fbb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000800fbf:	eb 44                	jmp    ffff800000801005 <main+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:84
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
ffff800000800fc1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fc5:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000800fc8:	89 c2                	mov    edx,eax
ffff800000800fca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fce:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff800000800fd2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fd6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000800fd9:	48 89 ce             	mov    rsi,rcx
ffff800000800fdc:	48 89 c7             	mov    rdi,rax
ffff800000800fdf:	49 89 df             	mov    r15,rbx
ffff800000800fe2:	48 b8 4d 43 ee ff ff 	movabs rax,0xffffffffffee434d
ffff800000800fe9:	ff ff ff 
ffff800000800fec:	48 01 d8             	add    rax,rbx
ffff800000800fef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
ffff800000800ff1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800ff5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000800ff8:	89 c2                	mov    edx,eax
ffff800000800ffa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800ffe:	48 01 d0             	add    rax,rdx
ffff800000801001:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:81
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
ffff800000801005:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801009:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080100c:	89 c2                	mov    edx,eax
ffff80000080100e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801012:	48 01 d0             	add    rax,rdx
ffff800000801015:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000801019:	72 a6                	jb     ffff800000800fc1 <main+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:88
            }

		}
		break;
ffff80000080101b:	e9 c2 01 00 00       	jmp    ffff8000008011e2 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93
		case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
		{
			multiboot_uint32_t color;
			unsigned i;
			struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
ffff800000801020:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801024:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:94
			void *fb = (void *) FRAMEBUFFER_ADDR;
ffff800000801028:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080102f:	80 ff ff 
ffff800000801032:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:95
			set_framebuffer(*tagfb);
ffff800000801036:	48 83 ec 08          	sub    rsp,0x8
ffff80000080103a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080103e:	ff 70 20             	push   QWORD PTR [rax+0x20]
ffff800000801041:	ff 70 18             	push   QWORD PTR [rax+0x18]
ffff800000801044:	ff 70 10             	push   QWORD PTR [rax+0x10]
ffff800000801047:	ff 70 08             	push   QWORD PTR [rax+0x8]
ffff80000080104a:	ff 30                	push   QWORD PTR [rax]
ffff80000080104c:	49 89 df             	mov    r15,rbx
ffff80000080104f:	48 b8 e2 c9 ee ff ff 	movabs rax,0xffffffffffeec9e2
ffff800000801056:	ff ff ff 
ffff800000801059:	48 01 d8             	add    rax,rbx
ffff80000080105c:	ff d0                	call   rax
ffff80000080105e:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97

			switch (tagfb->common.framebuffer_type)
ffff800000801062:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801066:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
ffff80000080106a:	0f b6 c0             	movzx  eax,al
ffff80000080106d:	83 f8 02             	cmp    eax,0x2
ffff800000801070:	0f 84 5a 01 00 00    	je     ffff8000008011d0 <main+0x32b>
ffff800000801076:	83 f8 02             	cmp    eax,0x2
ffff800000801079:	0f 8f 5a 01 00 00    	jg     ffff8000008011d9 <main+0x334>
ffff80000080107f:	85 c0                	test   eax,eax
ffff800000801081:	74 0e                	je     ffff800000801091 <main+0x1ec>
ffff800000801083:	83 f8 01             	cmp    eax,0x1
ffff800000801086:	0f 84 15 01 00 00    	je     ffff8000008011a1 <main+0x2fc>
ffff80000080108c:	e9 48 01 00 00       	jmp    ffff8000008011d9 <main+0x334>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:104
			case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
			{
				unsigned best_distance, distance;
				struct multiboot_color *palette;

				palette = tagfb->framebuffer_palette;
ffff800000801091:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801095:	48 83 c0 22          	add    rax,0x22
ffff800000801099:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:106

				color = 0;
ffff80000080109d:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:107
				best_distance = 4 * 256 * 256;
ffff8000008010a4:	c7 45 d8 00 00 04 00 	mov    DWORD PTR [rbp-0x28],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109

				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff8000008010ab:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff8000008010b2:	e9 d4 00 00 00       	jmp    ffff80000080118b <main+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:111
				{
					distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
ffff8000008010b7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008010ba:	48 89 d0             	mov    rax,rdx
ffff8000008010bd:	48 01 c0             	add    rax,rax
ffff8000008010c0:	48 01 c2             	add    rdx,rax
ffff8000008010c3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008010c7:	48 01 d0             	add    rax,rdx
ffff8000008010ca:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008010ce:	0f b6 c0             	movzx  eax,al
ffff8000008010d1:	ba ff 00 00 00       	mov    edx,0xff
ffff8000008010d6:	89 d1                	mov    ecx,edx
ffff8000008010d8:	29 c1                	sub    ecx,eax
ffff8000008010da:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008010dd:	48 89 d0             	mov    rax,rdx
ffff8000008010e0:	48 01 c0             	add    rax,rax
ffff8000008010e3:	48 01 c2             	add    rdx,rax
ffff8000008010e6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008010ea:	48 01 d0             	add    rax,rdx
ffff8000008010ed:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008010f1:	0f b6 d0             	movzx  edx,al
ffff8000008010f4:	b8 ff 00 00 00       	mov    eax,0xff
ffff8000008010f9:	29 d0                	sub    eax,edx
ffff8000008010fb:	89 ce                	mov    esi,ecx
ffff8000008010fd:	0f af f0             	imul   esi,eax
ffff800000801100:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801103:	48 89 d0             	mov    rax,rdx
ffff800000801106:	48 01 c0             	add    rax,rax
ffff800000801109:	48 01 c2             	add    rdx,rax
ffff80000080110c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801110:	48 01 d0             	add    rax,rdx
ffff800000801113:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801116:	0f b6 c8             	movzx  ecx,al
ffff800000801119:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080111c:	48 89 d0             	mov    rax,rdx
ffff80000080111f:	48 01 c0             	add    rax,rax
ffff800000801122:	48 01 c2             	add    rdx,rax
ffff800000801125:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801129:	48 01 d0             	add    rax,rdx
ffff80000080112c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080112f:	0f b6 c0             	movzx  eax,al
ffff800000801132:	0f af c1             	imul   eax,ecx
ffff800000801135:	01 c6                	add    esi,eax
ffff800000801137:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080113a:	48 89 d0             	mov    rax,rdx
ffff80000080113d:	48 01 c0             	add    rax,rax
ffff800000801140:	48 01 c2             	add    rdx,rax
ffff800000801143:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801147:	48 01 d0             	add    rax,rdx
ffff80000080114a:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff80000080114e:	0f b6 c8             	movzx  ecx,al
ffff800000801151:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801154:	48 89 d0             	mov    rax,rdx
ffff800000801157:	48 01 c0             	add    rax,rax
ffff80000080115a:	48 01 c2             	add    rdx,rax
ffff80000080115d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801161:	48 01 d0             	add    rax,rdx
ffff800000801164:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801168:	0f b6 c0             	movzx  eax,al
ffff80000080116b:	0f af c1             	imul   eax,ecx
ffff80000080116e:	01 f0                	add    eax,esi
ffff800000801170:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:112
					if (distance < best_distance)
ffff800000801173:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801176:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000801179:	73 0c                	jae    ffff800000801187 <main+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:114
					{
						color = i;
ffff80000080117b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080117e:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:115
						best_distance = distance;
ffff800000801181:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801184:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 2)
				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801187:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 1)
ffff80000080118b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080118f:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
ffff800000801193:	0f b7 c0             	movzx  eax,ax
ffff800000801196:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000801199:	0f 82 18 ff ff ff    	jb     ffff8000008010b7 <main+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:119
					}
				}
			}
			break;
ffff80000080119f:	eb 40                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:122

			case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
				color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
ffff8000008011a1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008011a5:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
ffff8000008011a9:	0f b6 c0             	movzx  eax,al
ffff8000008011ac:	ba 01 00 00 00       	mov    edx,0x1
ffff8000008011b1:	89 c1                	mov    ecx,eax
ffff8000008011b3:	d3 e2                	shl    edx,cl
ffff8000008011b5:	89 d0                	mov    eax,edx
ffff8000008011b7:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008011ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008011be:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffff8000008011c2:	0f b6 c0             	movzx  eax,al
ffff8000008011c5:	89 c1                	mov    ecx,eax
ffff8000008011c7:	d3 e2                	shl    edx,cl
ffff8000008011c9:	89 d0                	mov    eax,edx
ffff8000008011cb:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:123
				break;
ffff8000008011ce:	eb 11                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:126

			case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
				color = '\\' | 0x0100;
ffff8000008011d0:	c7 45 b4 5c 01 00 00 	mov    DWORD PTR [rbp-0x4c],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:127
				break;
ffff8000008011d7:	eb 08                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:130

			default:
				color = 0xffffffff;
ffff8000008011d9:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:131
				break;
ffff8000008011e0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:134 (discriminator 1)
			}

			break;
ffff8000008011e1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:45
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
ffff8000008011e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008011e6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008011e9:	83 c0 07             	add    eax,0x7
ffff8000008011ec:	89 c0                	mov    eax,eax
ffff8000008011ee:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008011f1:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag->type != MULTIBOOT_TAG_TYPE_END;
ffff8000008011f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008011f9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008011fb:	85 c0                	test   eax,eax
ffff8000008011fd:	0f 85 5f fd ff ff    	jne    ffff800000800f62 <main+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:138
		}
		}
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
ffff800000801203:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801207:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080120a:	83 c0 07             	add    eax,0x7
ffff80000080120d:	89 c0                	mov    eax,eax
ffff80000080120f:	83 e0 f8             	and    eax,0xfffffff8
ffff800000801212:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:139
    init_memory();
ffff800000801216:	49 89 df             	mov    r15,rbx
ffff800000801219:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080121e:	48 ba 9d 4a ee ff ff 	movabs rdx,0xffffffffffee4a9d
ffff800000801225:	ff ff ff 
ffff800000801228:	48 01 da             	add    rdx,rbx
ffff80000080122b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:140
    init_framebuffer();
ffff80000080122d:	49 89 df             	mov    r15,rbx
ffff800000801230:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801235:	48 ba fc c6 ee ff ff 	movabs rdx,0xffffffffffeec6fc
ffff80000080123c:	ff ff ff 
ffff80000080123f:	48 01 da             	add    rdx,rbx
ffff800000801242:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:142
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
ffff800000801244:	b8 75 04 00 00       	mov    eax,0x475
ffff800000801249:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080124c:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:144
	//printf("disk count:%d\n",disk_count);
    init_font();
ffff80000080124f:	49 89 df             	mov    r15,rbx
ffff800000801252:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801257:	48 ba 2d c8 ee ff ff 	movabs rdx,0xffffffffffeec82d
ffff80000080125e:	ff ff ff 
ffff800000801261:	48 01 da             	add    rdx,rbx
ffff800000801264:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:147
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
ffff800000801266:	48 b8 bf d4 ff ff ff 	movabs rax,0xffffffffffffd4bf
ffff80000080126d:	ff ff ff 
ffff800000801270:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801274:	48 89 c7             	mov    rdi,rax
ffff800000801277:	49 89 df             	mov    r15,rbx
ffff80000080127a:	48 b8 49 cf ee ff ff 	movabs rax,0xffffffffffeecf49
ffff800000801281:	ff ff ff 
ffff800000801284:	48 01 d8             	add    rax,rbx
ffff800000801287:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:148
    init_int();
ffff800000801289:	49 89 df             	mov    r15,rbx
ffff80000080128c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801291:	48 ba 08 25 ee ff ff 	movabs rdx,0xffffffffffee2508
ffff800000801298:	ff ff ff 
ffff80000080129b:	48 01 da             	add    rdx,rbx
ffff80000080129e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:149
    print("int loaded.\n");
ffff8000008012a0:	48 b8 dc d4 ff ff ff 	movabs rax,0xffffffffffffd4dc
ffff8000008012a7:	ff ff ff 
ffff8000008012aa:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008012ae:	48 89 c7             	mov    rdi,rax
ffff8000008012b1:	49 89 df             	mov    r15,rbx
ffff8000008012b4:	48 b8 49 cf ee ff ff 	movabs rax,0xffffffffffeecf49
ffff8000008012bb:	ff ff ff 
ffff8000008012be:	48 01 d8             	add    rax,rbx
ffff8000008012c1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:151
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
ffff8000008012c3:	49 89 df             	mov    r15,rbx
ffff8000008012c6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008012cb:	48 ba e1 42 ee ff ff 	movabs rdx,0xffffffffffee42e1
ffff8000008012d2:	ff ff ff 
ffff8000008012d5:	48 01 da             	add    rdx,rbx
ffff8000008012d8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:152
 	init_gdt();
ffff8000008012da:	49 89 df             	mov    r15,rbx
ffff8000008012dd:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008012e2:	48 ba 65 a3 ee ff ff 	movabs rdx,0xffffffffffeea365
ffff8000008012e9:	ff ff ff 
ffff8000008012ec:	48 01 da             	add    rdx,rbx
ffff8000008012ef:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:154

	init_blkdev();
ffff8000008012f1:	49 89 df             	mov    r15,rbx
ffff8000008012f4:	48 b8 b6 f9 ee ff ff 	movabs rax,0xffffffffffeef9b6
ffff8000008012fb:	ff ff ff 
ffff8000008012fe:	48 01 d8             	add    rax,rbx
ffff800000801301:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:155
	init_blkbuf();
ffff800000801303:	49 89 df             	mov    r15,rbx
ffff800000801306:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080130b:	48 ba 09 fa ee ff ff 	movabs rdx,0xffffffffffeefa09
ffff800000801312:	ff ff ff 
ffff800000801315:	48 01 da             	add    rdx,rbx
ffff800000801318:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:157
	// init_disk();
    init_ramdisk();
ffff80000080131a:	49 89 df             	mov    r15,rbx
ffff80000080131d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801322:	48 ba 77 f4 ee ff ff 	movabs rdx,0xffffffffffeef477
ffff800000801329:	ff ff ff 
ffff80000080132c:	48 01 da             	add    rdx,rbx
ffff80000080132f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:158
    init_rootfs();
ffff800000801331:	49 89 df             	mov    r15,rbx
ffff800000801334:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801339:	48 ba dc d9 ee ff ff 	movabs rdx,0xffffffffffeed9dc
ffff800000801340:	ff ff ff 
ffff800000801343:	48 01 da             	add    rdx,rbx
ffff800000801346:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:159
    init_devfs();
ffff800000801348:	49 89 df             	mov    r15,rbx
ffff80000080134b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801350:	48 ba 6d 5b ee ff ff 	movabs rdx,0xffffffffffee5b6d
ffff800000801357:	ff ff ff 
ffff80000080135a:	48 01 da             	add    rdx,rbx
ffff80000080135d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:161

    init_proc();
ffff80000080135f:	49 89 df             	mov    r15,rbx
ffff800000801362:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801367:	48 ba 87 68 ee ff ff 	movabs rdx,0xffffffffffee6887
ffff80000080136e:	ff ff ff 
ffff800000801371:	48 01 da             	add    rdx,rbx
ffff800000801374:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:163
	// init_ramfs();
  	DISK1_FAT32_FS_init();
ffff800000801376:	49 89 df             	mov    r15,rbx
ffff800000801379:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080137e:	48 ba 6d 41 ef ff ff 	movabs rdx,0xffffffffffef416d
ffff800000801385:	ff ff ff 
ffff800000801388:	48 01 da             	add    rdx,rbx
ffff80000080138b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:167

    //自带驱动
    //init_tty();
    init_kb();
ffff80000080138d:	49 89 df             	mov    r15,rbx
ffff800000801390:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801395:	48 ba 59 06 ef ff ff 	movabs rdx,0xffffffffffef0659
ffff80000080139c:	ff ff ff 
ffff80000080139f:	48 01 da             	add    rdx,rbx
ffff8000008013a2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:169
//    init_disk();
    sti();
ffff8000008013a4:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:170
    manage_proc_lock=0;
ffff8000008013a5:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff8000008013ac:	ff ff ff 
ffff8000008013af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008013b3:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:173


    move_to_user_mode();
ffff8000008013b9:	49 89 df             	mov    r15,rbx
ffff8000008013bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008013c1:	48 ba 04 5a ef ff ff 	movabs rdx,0xffffffffffef5a04
ffff8000008013c8:	ff ff ff 
ffff8000008013cb:	48 01 da             	add    rdx,rbx
ffff8000008013ce:	ff d2                	call   rdx
ffff8000008013d0:	48 c7 45 98 1b 00 00 	mov    QWORD PTR [rbp-0x68],0x1b
ffff8000008013d7:	00 
ffff8000008013d8:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff8000008013df:	00 
ffff8000008013e0:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffff8000008013e7:	00 
ffff8000008013e8:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
ffff8000008013ef:	00 
ffff8000008013f0:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
ffff8000008013f7:	00 00 00 00 
ffff8000008013fb:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
ffff800000801402:	00 00 00 00 
ffff800000801406:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
ffff80000080140d:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63

#define	SYSTEM_REBOOT	(1UL << 0)
#define	SYSTEM_POWEROFF	(1UL << 1)

__attribute__((__always_inline__))inline int do_syscall(long func,long a1,long a2,long a3,long a4,long a5,long a6){
        asm volatile(".byte 0x48\n"
ffff800000801411:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000801415:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
ffff800000801419:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff80000080141d:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000801421:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffff800000801428:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
ffff80000080142f:	4c 8b 8d 68 ff ff ff 	mov    r9,QWORD PTR [rbp-0x98]
ffff800000801436:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
        long ret=0;
ffff800000801439:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff800000801440:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff800000801444:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:67
        return ret;
ffff80000080144b:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:174
    if(do_syscall(SYSCALL_FORK,0,0,0,0,0,0)==0){
ffff800000801452:	85 c0                	test   eax,eax
ffff800000801454:	0f 85 ca 00 00 00    	jne    ffff800000801524 <main+0x67f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:175
        char *argv[]={"/mnt/test.exe","gamessis os"};
ffff80000080145a:	48 b8 e9 d4 ff ff ff 	movabs rax,0xffffffffffffd4e9
ffff800000801461:	ff ff ff 
ffff800000801464:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801468:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000080146f:	48 b8 f7 d4 ff ff ff 	movabs rax,0xffffffffffffd4f7
ffff800000801476:	ff ff ff 
ffff800000801479:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080147d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:176
        do_syscall(SYSCALL_EXECVE, (long) "/mnt/test.exe", 2, (long) &argv[0], 0, 0, 0);
ffff800000801484:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff80000080148b:	48 ba e9 d4 ff ff ff 	movabs rdx,0xffffffffffffd4e9
ffff800000801492:	ff ff ff 
ffff800000801495:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000801499:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x1c
ffff8000008014a0:	1c 00 00 00 
ffff8000008014a4:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffff8000008014ab:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x2
ffff8000008014b2:	02 00 00 00 
ffff8000008014b6:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffff8000008014bd:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffff8000008014c4:	00 00 00 00 
ffff8000008014c8:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff8000008014cf:	00 00 00 00 
ffff8000008014d3:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
ffff8000008014da:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        asm volatile(".byte 0x48\n"
ffff8000008014de:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008014e5:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
ffff8000008014ec:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
ffff8000008014f3:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff8000008014fa:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffff800000801501:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffff800000801508:	4c 8b 8d 30 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd0]
ffff80000080150f:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff800000801512:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
ffff800000801519:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff80000080151d:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:187 (discriminator 3)
//    init_fat16();

//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
ffff800000801524:	eb fe                	jmp    ffff800000801524 <main+0x67f>

ffff800000801526 <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
ffff800000801526:	f3 0f 1e fa          	endbr64 
ffff80000080152a:	55                   	push   rbp
ffff80000080152b:	48 89 e5             	mov    rbp,rsp
ffff80000080152e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080152e <init_logging+0x8>
ffff800000801535:	49 bb ca c5 11 00 00 	movabs r11,0x11c5ca
ffff80000080153c:	00 00 00 
ffff80000080153f:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
ffff800000801542:	48 ba 08 25 ae ff ff 	movabs rdx,0xffffffffffae2508
ffff800000801549:	ff ff ff 
ffff80000080154c:	48 c7 04 10 00 80 0b 	mov    QWORD PTR [rax+rdx*1],0xb8000
ffff800000801553:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
ffff800000801554:	48 ba 10 25 ae ff ff 	movabs rdx,0xffffffffffae2510
ffff80000080155b:	ff ff ff 
ffff80000080155e:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
ffff800000801565:	48 ba 14 25 ae ff ff 	movabs rdx,0xffffffffffae2514
ffff80000080156c:	ff ff ff 
ffff80000080156f:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
ffff800000801576:	90                   	nop
ffff800000801577:	5d                   	pop    rbp
ffff800000801578:	c3                   	ret    

ffff800000801579 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
ffff800000801579:	f3 0f 1e fa          	endbr64 
ffff80000080157d:	55                   	push   rbp
ffff80000080157e:	48 89 e5             	mov    rbp,rsp
ffff800000801581:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801581 <itoa+0x8>
ffff800000801588:	49 bb 77 c5 11 00 00 	movabs r11,0x11c577
ffff80000080158f:	00 00 00 
ffff800000801592:	4c 01 d8             	add    rax,r11
ffff800000801595:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801599:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080159c:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
ffff80000080159f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008015a3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
ffff8000008015a7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008015aa:	48 98                	cdqe   
ffff8000008015ac:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
ffff8000008015b0:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
ffff8000008015b7:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
ffff8000008015bb:	75 27                	jne    ffff8000008015e4 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
ffff8000008015bd:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
ffff8000008015c1:	79 21                	jns    ffff8000008015e4 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
ffff8000008015c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008015c7:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008015cb:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008015cf:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
ffff8000008015d2:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
ffff8000008015d7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008015da:	f7 d8                	neg    eax
ffff8000008015dc:	48 98                	cdqe   
ffff8000008015de:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008015e2:	eb 0d                	jmp    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
ffff8000008015e4:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
ffff8000008015e8:	75 07                	jne    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
ffff8000008015ea:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
ffff8000008015f1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008015f4:	48 63 c8             	movsxd rcx,eax
ffff8000008015f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008015fb:	ba 00 00 00 00       	mov    edx,0x0
ffff800000801600:	48 f7 f1             	div    rcx
ffff800000801603:	48 89 d0             	mov    rax,rdx
ffff800000801606:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffff800000801609:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
ffff80000080160d:	7f 0a                	jg     ffff800000801619 <itoa+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
ffff80000080160f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000801612:	83 c0 30             	add    eax,0x30
ffff800000801615:	89 c1                	mov    ecx,eax
ffff800000801617:	eb 08                	jmp    ffff800000801621 <itoa+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
ffff800000801619:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080161c:	83 c0 57             	add    eax,0x57
ffff80000080161f:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
ffff800000801621:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801625:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000801629:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000080162d:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
ffff80000080162f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000801632:	48 63 f0             	movsxd rsi,eax
ffff800000801635:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801639:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080163e:	48 f7 f6             	div    rsi
ffff800000801641:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000801645:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080164a:	75 a5                	jne    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
ffff80000080164c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801650:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
ffff800000801653:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801657:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
ffff80000080165b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080165f:	48 83 e8 01          	sub    rax,0x1
ffff800000801663:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801667:	eb 2b                	jmp    ffff800000801694 <itoa+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
ffff800000801669:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080166d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801670:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
ffff800000801673:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801677:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff80000080167a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080167e:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
ffff800000801680:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801684:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
ffff800000801688:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
ffff80000080168a:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
ffff80000080168f:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801694:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801698:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080169c:	72 cb                	jb     ffff800000801669 <itoa+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
ffff80000080169e:	90                   	nop
ffff80000080169f:	90                   	nop
ffff8000008016a0:	5d                   	pop    rbp
ffff8000008016a1:	c3                   	ret    

ffff8000008016a2 <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
ffff8000008016a2:	f3 0f 1e fa          	endbr64 
ffff8000008016a6:	55                   	push   rbp
ffff8000008016a7:	48 89 e5             	mov    rbp,rsp
ffff8000008016aa:	41 57                	push   r15
ffff8000008016ac:	48 83 ec 28          	sub    rsp,0x28
ffff8000008016b0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008016b0 <putchar+0xe>
ffff8000008016b7:	49 bb 48 c4 11 00 00 	movabs r11,0x11c448
ffff8000008016be:	00 00 00 
ffff8000008016c1:	4c 01 d8             	add    rax,r11
ffff8000008016c4:	89 fa                	mov    edx,edi
ffff8000008016c6:	88 55 dc             	mov    BYTE PTR [rbp-0x24],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
ffff8000008016c9:	0f b6 55 dc          	movzx  edx,BYTE PTR [rbp-0x24]
ffff8000008016cd:	88 55 ee             	mov    BYTE PTR [rbp-0x12],dl
ffff8000008016d0:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
ffff8000008016d4:	48 8d 55 ee          	lea    rdx,[rbp-0x12]
ffff8000008016d8:	48 89 d7             	mov    rdi,rdx
ffff8000008016db:	49 89 c7             	mov    r15,rax
ffff8000008016de:	48 ba 49 cf ee ff ff 	movabs rdx,0xffffffffffeecf49
ffff8000008016e5:	ff ff ff 
ffff8000008016e8:	48 01 c2             	add    rdx,rax
ffff8000008016eb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
ffff8000008016ed:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008016f1:	c9                   	leave  
ffff8000008016f2:	c3                   	ret    

ffff8000008016f3 <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
ffff8000008016f3:	f3 0f 1e fa          	endbr64 
ffff8000008016f7:	55                   	push   rbp
ffff8000008016f8:	48 89 e5             	mov    rbp,rsp
ffff8000008016fb:	41 57                	push   r15
ffff8000008016fd:	53                   	push   rbx
ffff8000008016fe:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000801705:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801705 <printf+0x12>
ffff80000080170c:	49 bb f3 c3 11 00 00 	movabs r11,0x11c3f3
ffff800000801713:	00 00 00 
ffff800000801716:	4c 01 db             	add    rbx,r11
ffff800000801719:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000801720:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000801727:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff80000080172e:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000801735:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff80000080173c:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000801743:	84 c0                	test   al,al
ffff800000801745:	74 23                	je     ffff80000080176a <printf+0x77>
ffff800000801747:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff80000080174e:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000801752:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000801756:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff80000080175a:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff80000080175e:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000801762:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000801766:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
ffff80000080176a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000801771:	48 89 c7             	mov    rdi,rax
ffff800000801774:	49 89 df             	mov    r15,rbx
ffff800000801777:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff80000080177e:	ff ff ff 
ffff800000801781:	48 01 d8             	add    rax,rbx
ffff800000801784:	ff d0                	call   rax
ffff800000801786:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff80000080178b:	0f 8f f2 02 00 00    	jg     ffff800000801a83 <printf+0x390>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc();
ffff800000801791:	49 89 df             	mov    r15,rbx
ffff800000801794:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801799:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff8000008017a0:	ff ff ff 
ffff8000008017a3:	48 01 da             	add    rdx,rbx
ffff8000008017a6:	ff d2                	call   rdx
ffff8000008017a8:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
ffff8000008017af:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
ffff8000008017b6:	00 00 00 
ffff8000008017b9:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
ffff8000008017c0:	00 00 00 
ffff8000008017c3:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff8000008017c7:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffff8000008017ce:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff8000008017d5:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
ffff8000008017dc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008017e3:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff8000008017ea:	e9 27 02 00 00       	jmp    ffff800000801a16 <printf+0x323>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008017ef:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008017f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008017f9:	3c 25                	cmp    al,0x25
ffff8000008017fb:	0f 85 e2 01 00 00    	jne    ffff8000008019e3 <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
ffff800000801801:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801808:	48 83 c0 01          	add    rax,0x1
ffff80000080180c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080180f:	84 c0                	test   al,al
ffff800000801811:	0f 84 cc 01 00 00    	je     ffff8000008019e3 <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
ffff800000801817:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff80000080181e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff80000080181f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801826:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801829:	3c 78                	cmp    al,0x78
ffff80000080182b:	75 75                	jne    ffff8000008018a2 <printf+0x1af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
ffff80000080182d:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801833:	83 f8 2f             	cmp    eax,0x2f
ffff800000801836:	77 23                	ja     ffff80000080185b <printf+0x168>
ffff800000801838:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080183f:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801845:	89 d2                	mov    edx,edx
ffff800000801847:	48 01 d0             	add    rax,rdx
ffff80000080184a:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801850:	83 c2 08             	add    edx,0x8
ffff800000801853:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801859:	eb 12                	jmp    ffff80000080186d <printf+0x17a>
ffff80000080185b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801862:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801866:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff80000080186d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080186f:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
ffff800000801875:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff80000080187b:	48 63 d0             	movsxd rdx,eax
ffff80000080187e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801885:	48 89 d6             	mov    rsi,rdx
ffff800000801888:	48 89 c7             	mov    rdi,rax
ffff80000080188b:	49 89 df             	mov    r15,rbx
ffff80000080188e:	48 b8 90 58 ef ff ff 	movabs rax,0xffffffffffef5890
ffff800000801895:	ff ff ff 
ffff800000801898:	48 01 d8             	add    rax,rbx
ffff80000080189b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff80000080189d:	e9 6c 01 00 00       	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
ffff8000008018a2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008018a9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008018ac:	3c 73                	cmp    al,0x73
ffff8000008018ae:	75 75                	jne    ffff800000801925 <printf+0x232>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
ffff8000008018b0:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff8000008018b6:	83 f8 2f             	cmp    eax,0x2f
ffff8000008018b9:	77 23                	ja     ffff8000008018de <printf+0x1eb>
ffff8000008018bb:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008018c2:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff8000008018c8:	89 d2                	mov    edx,edx
ffff8000008018ca:	48 01 d0             	add    rax,rdx
ffff8000008018cd:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff8000008018d3:	83 c2 08             	add    edx,0x8
ffff8000008018d6:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff8000008018dc:	eb 12                	jmp    ffff8000008018f0 <printf+0x1fd>
ffff8000008018de:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008018e5:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008018e9:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff8000008018f0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008018f3:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
ffff8000008018fa:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff800000801901:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801908:	48 89 d6             	mov    rsi,rdx
ffff80000080190b:	48 89 c7             	mov    rdi,rax
ffff80000080190e:	49 89 df             	mov    r15,rbx
ffff800000801911:	48 b8 1e 59 ef ff ff 	movabs rax,0xffffffffffef591e
ffff800000801918:	ff ff ff 
ffff80000080191b:	48 01 d8             	add    rax,rbx
ffff80000080191e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801920:	e9 e9 00 00 00       	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
ffff800000801925:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080192c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080192f:	3c 64                	cmp    al,0x64
ffff800000801931:	75 73                	jne    ffff8000008019a6 <printf+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
ffff800000801933:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801939:	83 f8 2f             	cmp    eax,0x2f
ffff80000080193c:	77 23                	ja     ffff800000801961 <printf+0x26e>
ffff80000080193e:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801945:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080194b:	89 d2                	mov    edx,edx
ffff80000080194d:	48 01 d0             	add    rax,rdx
ffff800000801950:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801956:	83 c2 08             	add    edx,0x8
ffff800000801959:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff80000080195f:	eb 12                	jmp    ffff800000801973 <printf+0x280>
ffff800000801961:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801968:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000080196c:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801973:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801976:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
ffff80000080197d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000801984:	89 c2                	mov    edx,eax
ffff800000801986:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080198d:	89 d6                	mov    esi,edx
ffff80000080198f:	48 89 c7             	mov    rdi,rax
ffff800000801992:	49 89 df             	mov    r15,rbx
ffff800000801995:	48 b8 d5 57 ef ff ff 	movabs rax,0xffffffffffef57d5
ffff80000080199c:	ff ff ff 
ffff80000080199f:	48 01 d8             	add    rax,rbx
ffff8000008019a2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008019a4:	eb 68                	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
ffff8000008019a6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019ad:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019b0:	3c 63                	cmp    al,0x63
ffff8000008019b2:	75 02                	jne    ffff8000008019b6 <printf+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
ffff8000008019b4:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
ffff8000008019b6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019bd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019c0:	0f be d0             	movsx  edx,al
ffff8000008019c3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019ca:	89 d6                	mov    esi,edx
ffff8000008019cc:	48 89 c7             	mov    rdi,rax
ffff8000008019cf:	49 89 df             	mov    r15,rbx
ffff8000008019d2:	48 b8 96 57 ef ff ff 	movabs rax,0xffffffffffef5796
ffff8000008019d9:	ff ff ff 
ffff8000008019dc:	48 01 d8             	add    rax,rbx
ffff8000008019df:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008019e1:	eb 2b                	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
ffff8000008019e3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019ea:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019ed:	0f be d0             	movsx  edx,al
ffff8000008019f0:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019f7:	89 d6                	mov    esi,edx
ffff8000008019f9:	48 89 c7             	mov    rdi,rax
ffff8000008019fc:	49 89 df             	mov    r15,rbx
ffff8000008019ff:	48 b8 96 57 ef ff ff 	movabs rax,0xffffffffffef5796
ffff800000801a06:	ff ff ff 
ffff800000801a09:	48 01 d8             	add    rax,rbx
ffff800000801a0c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801a0e:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801a15:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
ffff800000801a16:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801a1d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801a20:	84 c0                	test   al,al
ffff800000801a22:	0f 85 c7 fd ff ff    	jne    ffff8000008017ef <printf+0xfc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
ffff800000801a28:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a2f:	48 89 c7             	mov    rdi,rax
ffff800000801a32:	49 89 df             	mov    r15,rbx
ffff800000801a35:	48 b8 49 cf ee ff ff 	movabs rax,0xffffffffffeecf49
ffff800000801a3c:	ff ff ff 
ffff800000801a3f:	48 01 d8             	add    rax,rbx
ffff800000801a42:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
ffff800000801a44:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a4b:	48 89 c7             	mov    rdi,rax
ffff800000801a4e:	49 89 df             	mov    r15,rbx
ffff800000801a51:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801a56:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff800000801a5d:	ff ff ff 
ffff800000801a60:	48 01 da             	add    rdx,rbx
ffff800000801a63:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
ffff800000801a65:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a6c:	48 89 c7             	mov    rdi,rax
ffff800000801a6f:	49 89 df             	mov    r15,rbx
ffff800000801a72:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff800000801a79:	ff ff ff 
ffff800000801a7c:	48 01 d8             	add    rax,rbx
ffff800000801a7f:	ff d0                	call   rax
ffff800000801a81:	eb 01                	jmp    ffff800000801a84 <printf+0x391>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
ffff800000801a83:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
ffff800000801a84:	48 81 c4 00 01 00 00 	add    rsp,0x100
ffff800000801a8b:	5b                   	pop    rbx
ffff800000801a8c:	41 5f                	pop    r15
ffff800000801a8e:	5d                   	pop    rbp
ffff800000801a8f:	c3                   	ret    

ffff800000801a90 <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:27
//以kb为单位
int high_mem_base=1024;
int mmap_t_i=0;

stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
ffff800000801a90:	f3 0f 1e fa          	endbr64 
ffff800000801a94:	55                   	push   rbp
ffff800000801a95:	48 89 e5             	mov    rbp,rsp
ffff800000801a98:	41 57                	push   r15
ffff800000801a9a:	48 83 ec 28          	sub    rsp,0x28
ffff800000801a9e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801a9e <mmap+0xe>
ffff800000801aa5:	49 bb 5a c0 11 00 00 	movabs r11,0x11c05a
ffff800000801aac:	00 00 00 
ffff800000801aaf:	4c 01 d8             	add    rax,r11
ffff800000801ab2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801ab6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801aba:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:28
    return smmap(pa,la,attr,current->pml4);
ffff800000801abd:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000801ac4:	ff ff ff 
ffff800000801ac7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801acb:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000801ace:	48 8b 8a e0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xe0]
ffff800000801ad5:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801ad8:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000801adc:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff800000801ae0:	49 89 c7             	mov    r15,rax
ffff800000801ae3:	49 b8 01 40 ee ff ff 	movabs r8,0xffffffffffee4001
ffff800000801aea:	ff ff ff 
ffff800000801aed:	49 01 c0             	add    r8,rax
ffff800000801af0:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:58
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
ffff800000801af3:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801af7:	c9                   	leave  
ffff800000801af8:	c3                   	ret    

ffff800000801af9 <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:60
stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
ffff800000801af9:	f3 0f 1e fa          	endbr64 
ffff800000801afd:	55                   	push   rbp
ffff800000801afe:	48 89 e5             	mov    rbp,rsp
ffff800000801b01:	41 57                	push   r15
ffff800000801b03:	53                   	push   rbx
ffff800000801b04:	48 83 ec 40          	sub    rsp,0x40
ffff800000801b08:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801b08 <smmap+0xf>
ffff800000801b0f:	49 bb f0 bf 11 00 00 	movabs r11,0x11bff0
ffff800000801b16:	00 00 00 
ffff800000801b19:	4c 01 db             	add    rbx,r11
ffff800000801b1c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801b20:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000801b24:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffff800000801b27:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:63
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
ffff800000801b2b:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000801b32:	7f 00 00 
ffff800000801b35:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff800000801b39:	76 0e                	jbe    ffff800000801b49 <smmap+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
        la&=~0xffff000000000000ul;
ffff800000801b3b:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
ffff800000801b42:	ff 00 00 
ffff800000801b45:	48 21 45 c0          	and    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:66
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
ffff800000801b49:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b4d:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b51:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801b58:	00 
ffff800000801b59:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801b5d:	48 01 d0             	add    rax,rdx
ffff800000801b60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801b63:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:67
    int pml4i=la / PML4E_SIZE;
ffff800000801b67:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b6b:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b6f:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:68
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
ffff800000801b72:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b76:	83 e0 01             	and    eax,0x1
ffff800000801b79:	48 85 c0             	test   rax,rax
ffff800000801b7c:	75 6f                	jne    ffff800000801bed <smmap+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:70
    {
        pdptp=(page_item*) kmalloc();
ffff800000801b7e:	49 89 df             	mov    r15,rbx
ffff800000801b81:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801b86:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000801b8d:	ff ff ff 
ffff800000801b90:	48 01 da             	add    rdx,rbx
ffff800000801b93:	ff d2                	call   rdx
ffff800000801b95:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:71
        memset(pdptp,0,4096);
ffff800000801b99:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b9d:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801ba2:	be 00 00 00 00       	mov    esi,0x0
ffff800000801ba7:	48 89 c7             	mov    rdi,rax
ffff800000801baa:	49 89 df             	mov    r15,rbx
ffff800000801bad:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000801bb4:	ff ff ff 
ffff800000801bb7:	48 01 d8             	add    rax,rbx
ffff800000801bba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:73
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4p[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
ffff800000801bbc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801bc0:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801bc7:	7f 00 00 
ffff800000801bca:	48 21 d0             	and    rax,rdx
ffff800000801bcd:	48 89 c1             	mov    rcx,rax
ffff800000801bd0:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801bd3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000801bd6:	48 98                	cdqe   
ffff800000801bd8:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801bdf:	00 
ffff800000801be0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801be4:	48 01 f0             	add    rax,rsi
ffff800000801be7:	48 09 ca             	or     rdx,rcx
ffff800000801bea:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:75
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
ffff800000801bed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801bf1:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801bf8:	7f 00 00 
ffff800000801bfb:	48 21 c2             	and    rdx,rax
ffff800000801bfe:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801c05:	80 ff ff 
ffff800000801c08:	48 09 d0             	or     rax,rdx
ffff800000801c0b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:78

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
ffff800000801c0f:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
ffff800000801c16:	00 00 00 
ffff800000801c19:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000801c1d:	48 c1 e8 1e          	shr    rax,0x1e
ffff800000801c21:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
ffff800000801c24:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801c27:	48 98                	cdqe   
ffff800000801c29:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801c30:	00 
ffff800000801c31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c35:	48 01 d0             	add    rax,rdx
ffff800000801c38:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801c3b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:81
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
ffff800000801c3f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c43:	83 e0 01             	and    eax,0x1
ffff800000801c46:	48 85 c0             	test   rax,rax
ffff800000801c49:	75 6f                	jne    ffff800000801cba <smmap+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:83
    {
        pdp=(page_item*) kmalloc();
ffff800000801c4b:	49 89 df             	mov    r15,rbx
ffff800000801c4e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801c53:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000801c5a:	ff ff ff 
ffff800000801c5d:	48 01 da             	add    rdx,rbx
ffff800000801c60:	ff d2                	call   rdx
ffff800000801c62:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:84
        memset(pdp,0,4096);
ffff800000801c66:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c6a:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801c6f:	be 00 00 00 00       	mov    esi,0x0
ffff800000801c74:	48 89 c7             	mov    rdi,rax
ffff800000801c77:	49 89 df             	mov    r15,rbx
ffff800000801c7a:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000801c81:	ff ff ff 
ffff800000801c84:	48 01 d8             	add    rax,rbx
ffff800000801c87:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
ffff800000801c89:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c8d:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801c94:	7f 00 00 
ffff800000801c97:	48 21 d0             	and    rax,rdx
ffff800000801c9a:	48 89 c1             	mov    rcx,rax
ffff800000801c9d:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801ca0:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801ca3:	48 98                	cdqe   
ffff800000801ca5:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801cac:	00 
ffff800000801cad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801cb1:	48 01 f0             	add    rax,rsi
ffff800000801cb4:	48 09 ca             	or     rdx,rcx
ffff800000801cb7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:87
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
ffff800000801cba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801cbe:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801cc5:	7f 00 00 
ffff800000801cc8:	48 21 c2             	and    rdx,rax
ffff800000801ccb:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801cd2:	80 ff ff 
ffff800000801cd5:	48 09 d0             	or     rax,rdx
ffff800000801cd8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:90

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
ffff800000801cdc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801ce0:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801ce5:	48 c1 e8 15          	shr    rax,0x15
ffff800000801ce9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801cf0:	00 
ffff800000801cf1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801cf5:	48 01 d0             	add    rax,rdx
ffff800000801cf8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801cfb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91
    if(!((unsigned long long)pt & PAGE_PRESENT))
ffff800000801cff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d03:	83 e0 01             	and    eax,0x1
ffff800000801d06:	48 85 c0             	test   rax,rax
ffff800000801d09:	75 77                	jne    ffff800000801d82 <smmap+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:93
    {
        pt=(page_item*) kmalloc();
ffff800000801d0b:	49 89 df             	mov    r15,rbx
ffff800000801d0e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801d13:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000801d1a:	ff ff ff 
ffff800000801d1d:	48 01 da             	add    rdx,rbx
ffff800000801d20:	ff d2                	call   rdx
ffff800000801d22:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:94
        memset(pt,0,4096);
ffff800000801d26:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d2a:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801d2f:	be 00 00 00 00       	mov    esi,0x0
ffff800000801d34:	48 89 c7             	mov    rdi,rax
ffff800000801d37:	49 89 df             	mov    r15,rbx
ffff800000801d3a:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000801d41:	ff ff ff 
ffff800000801d44:	48 01 d8             	add    rax,rbx
ffff800000801d47:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:95
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
ffff800000801d49:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d4d:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801d54:	7f 00 00 
ffff800000801d57:	48 21 d0             	and    rax,rdx
ffff800000801d5a:	48 89 c1             	mov    rcx,rax
ffff800000801d5d:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801d60:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801d64:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801d69:	48 c1 e8 15          	shr    rax,0x15
ffff800000801d6d:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801d74:	00 
ffff800000801d75:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d79:	48 01 f0             	add    rax,rsi
ffff800000801d7c:	48 09 ca             	or     rdx,rcx
ffff800000801d7f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:97
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
ffff800000801d82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d86:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801d8d:	7f 00 00 
ffff800000801d90:	48 21 c2             	and    rdx,rax
ffff800000801d93:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801d9a:	80 ff ff 
ffff800000801d9d:	48 09 d0             	or     rax,rdx
ffff800000801da0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:100

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
ffff800000801da4:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000801da7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000801dab:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
ffff800000801db1:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000801db5:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000801dbc:	00 
ffff800000801dbd:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000801dc1:	48 01 ca             	add    rdx,rcx
ffff800000801dc4:	48 0b 45 c8          	or     rax,QWORD PTR [rbp-0x38]
ffff800000801dc8:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101
    return NORMAL;
ffff800000801dcb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:102
}
ffff800000801dd0:	48 83 c4 40          	add    rsp,0x40
ffff800000801dd4:	5b                   	pop    rbx
ffff800000801dd5:	41 5f                	pop    r15
ffff800000801dd7:	5d                   	pop    rbp
ffff800000801dd8:	c3                   	ret    

ffff800000801dd9 <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106


int init_paging()
{
ffff800000801dd9:	f3 0f 1e fa          	endbr64 
ffff800000801ddd:	55                   	push   rbp
ffff800000801dde:	48 89 e5             	mov    rbp,rsp
ffff800000801de1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801de1 <init_paging+0x8>
ffff800000801de8:	49 bb 17 bd 11 00 00 	movabs r11,0x11bd17
ffff800000801def:	00 00 00 
ffff800000801df2:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:139
//    set_page_item(pml4,PDPT_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //把低512GB的空间取消映射，留给用户
    pml4[0]=0;
ffff800000801df5:	48 ba b0 ff ff ff ff 	movabs rdx,0xffffffffffffffb0
ffff800000801dfc:	ff ff ff 
ffff800000801dff:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801e03:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801e06:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:141
    #endif
}
ffff800000801e0d:	90                   	nop
ffff800000801e0e:	5d                   	pop    rbp
ffff800000801e0f:	c3                   	ret    

ffff800000801e10 <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:143
void set_high_mem_base(int base)
{
ffff800000801e10:	f3 0f 1e fa          	endbr64 
ffff800000801e14:	55                   	push   rbp
ffff800000801e15:	48 89 e5             	mov    rbp,rsp
ffff800000801e18:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801e18 <set_high_mem_base+0x8>
ffff800000801e1f:	49 bb e0 bc 11 00 00 	movabs r11,0x11bce0
ffff800000801e26:	00 00 00 
ffff800000801e29:	4c 01 d8             	add    rax,r11
ffff800000801e2c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:144
    high_mem_base=base;
ffff800000801e2f:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff800000801e36:	ff ff ff 
ffff800000801e39:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801e3d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801e40:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:145
}
ffff800000801e42:	90                   	nop
ffff800000801e43:	5d                   	pop    rbp
ffff800000801e44:	c3                   	ret    

ffff800000801e45 <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
ffff800000801e45:	f3 0f 1e fa          	endbr64 
ffff800000801e49:	55                   	push   rbp
ffff800000801e4a:	48 89 e5             	mov    rbp,rsp
ffff800000801e4d:	41 57                	push   r15
ffff800000801e4f:	48 83 ec 28          	sub    rsp,0x28
ffff800000801e53:	4c 8d 05 f9 ff ff ff 	lea    r8,[rip+0xfffffffffffffff9]        # ffff800000801e53 <set_mem_area+0xe>
ffff800000801e5a:	49 bb a5 bc 11 00 00 	movabs r11,0x11bca5
ffff800000801e61:	00 00 00 
ffff800000801e64:	4d 01 d8             	add    r8,r11
ffff800000801e67:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801e6b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801e6f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:148
    mmap_struct[mmap_t_i].base=base;
ffff800000801e73:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000801e7a:	ff ff ff 
ffff800000801e7d:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801e81:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801e83:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff800000801e8a:	ff ff ff 
ffff800000801e8d:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801e91:	48 63 d0             	movsxd rdx,eax
ffff800000801e94:	48 89 d0             	mov    rax,rdx
ffff800000801e97:	48 01 c0             	add    rax,rax
ffff800000801e9a:	48 01 d0             	add    rax,rdx
ffff800000801e9d:	48 c1 e0 03          	shl    rax,0x3
ffff800000801ea1:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000801ea5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801ea9:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:149
    mmap_struct[mmap_t_i].len=len;
ffff800000801eac:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000801eb3:	ff ff ff 
ffff800000801eb6:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801eba:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801ebc:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff800000801ec3:	ff ff ff 
ffff800000801ec6:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801eca:	48 63 d0             	movsxd rdx,eax
ffff800000801ecd:	48 89 d0             	mov    rax,rdx
ffff800000801ed0:	48 01 c0             	add    rax,rax
ffff800000801ed3:	48 01 d0             	add    rax,rdx
ffff800000801ed6:	48 c1 e0 03          	shl    rax,0x3
ffff800000801eda:	48 01 c8             	add    rax,rcx
ffff800000801edd:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801ee1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801ee5:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:150
    mmap_struct[mmap_t_i++].type=type;
ffff800000801ee8:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000801eef:	ff ff ff 
ffff800000801ef2:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801ef6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801ef8:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000801efb:	48 ba 88 fe ff ff ff 	movabs rdx,0xfffffffffffffe88
ffff800000801f02:	ff ff ff 
ffff800000801f05:	49 8b 14 10          	mov    rdx,QWORD PTR [r8+rdx*1]
ffff800000801f09:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000801f0b:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff800000801f12:	ff ff ff 
ffff800000801f15:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801f19:	48 63 d0             	movsxd rdx,eax
ffff800000801f1c:	48 89 d0             	mov    rax,rdx
ffff800000801f1f:	48 01 c0             	add    rax,rax
ffff800000801f22:	48 01 d0             	add    rax,rdx
ffff800000801f25:	48 c1 e0 03          	shl    rax,0x3
ffff800000801f29:	48 01 c8             	add    rax,rcx
ffff800000801f2c:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000801f30:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801f34:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
    comprintf("mem info:base=0x%l,len=0x%l,type=%d\n",base,len,type);
ffff800000801f37:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000801f3b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000801f3f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f43:	48 89 c6             	mov    rsi,rax
ffff800000801f46:	48 b8 50 d5 ff ff ff 	movabs rax,0xffffffffffffd550
ffff800000801f4d:	ff ff ff 
ffff800000801f50:	49 8d 04 00          	lea    rax,[r8+rax*1]
ffff800000801f54:	48 89 c7             	mov    rdi,rax
ffff800000801f57:	4d 89 c7             	mov    r15,r8
ffff800000801f5a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801f5f:	49 b9 cb 4b ef ff ff 	movabs r9,0xffffffffffef4bcb
ffff800000801f66:	ff ff ff 
ffff800000801f69:	4d 01 c1             	add    r9,r8
ffff800000801f6c:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:152
}
ffff800000801f6f:	90                   	nop
ffff800000801f70:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801f74:	c9                   	leave  
ffff800000801f75:	c3                   	ret    

ffff800000801f76 <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
addr_t kmalloc()
{
ffff800000801f76:	f3 0f 1e fa          	endbr64 
ffff800000801f7a:	55                   	push   rbp
ffff800000801f7b:	48 89 e5             	mov    rbp,rsp
ffff800000801f7e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801f7e <kmalloc+0x8>
ffff800000801f85:	49 bb 7a bb 11 00 00 	movabs r11,0x11bb7a
ffff800000801f8c:	00 00 00 
ffff800000801f8f:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000801f92:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000801f99:	e9 c6 00 00 00       	jmp    ffff800000802064 <kmalloc+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157
    {
        for(int j=0;j<32;j++)
ffff800000801f9e:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000801fa5:	e9 ac 00 00 00       	jmp    ffff800000802056 <kmalloc+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159
        {
            if(!(vmalloc_map[i]&(1<<j)))
ffff800000801faa:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000801fb1:	ff ff ff 
ffff800000801fb4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801fb8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801fbb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801fbe:	48 63 d2             	movsxd rdx,edx
ffff800000801fc1:	48 c1 e2 02          	shl    rdx,0x2
ffff800000801fc5:	48 01 ca             	add    rdx,rcx
ffff800000801fc8:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000801fca:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000801fcd:	bf 01 00 00 00       	mov    edi,0x1
ffff800000801fd2:	89 d1                	mov    ecx,edx
ffff800000801fd4:	d3 e7                	shl    edi,cl
ffff800000801fd6:	89 fa                	mov    edx,edi
ffff800000801fd8:	21 f2                	and    edx,esi
ffff800000801fda:	85 d2                	test   edx,edx
ffff800000801fdc:	75 74                	jne    ffff800000802052 <kmalloc+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161
            {
                vmalloc_map[i]|=(1<<j);
ffff800000801fde:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000801fe5:	ff ff ff 
ffff800000801fe8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801fec:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801fef:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801ff2:	48 63 d2             	movsxd rdx,edx
ffff800000801ff5:	48 c1 e2 02          	shl    rdx,0x2
ffff800000801ff9:	48 01 ca             	add    rdx,rcx
ffff800000801ffc:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000801ffe:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802001:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802006:	89 d1                	mov    ecx,edx
ffff800000802008:	d3 e7                	shl    edi,cl
ffff80000080200a:	89 fa                	mov    edx,edi
ffff80000080200c:	89 d1                	mov    ecx,edx
ffff80000080200e:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000802015:	ff ff ff 
ffff800000802018:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080201c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080201f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802022:	48 98                	cdqe   
ffff800000802024:	48 c1 e0 02          	shl    rax,0x2
ffff800000802028:	48 01 d0             	add    rax,rdx
ffff80000080202b:	09 ce                	or     esi,ecx
ffff80000080202d:	89 f2                	mov    edx,esi
ffff80000080202f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:162
                return VMALLOC_BASE+(i*32+j)*0x1000;
ffff800000802031:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802034:	c1 e0 05             	shl    eax,0x5
ffff800000802037:	89 c2                	mov    edx,eax
ffff800000802039:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080203c:	01 d0                	add    eax,edx
ffff80000080203e:	c1 e0 0c             	shl    eax,0xc
ffff800000802041:	48 98                	cdqe   
ffff800000802043:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff80000080204a:	80 ff ff 
ffff80000080204d:	48 01 d0             	add    rax,rdx
ffff800000802050:	eb 1c                	jmp    ffff80000080206e <kmalloc+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 2)
        for(int j=0;j<32;j++)
ffff800000802052:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 1)
ffff800000802056:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff80000080205a:	0f 8e 4a ff ff ff    	jle    ffff800000801faa <kmalloc+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802060:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155 (discriminator 1)
ffff800000802064:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff800000802068:	0f 8e 30 ff ff ff    	jle    ffff800000801f9e <kmalloc+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:166
            }
        }
    }
}
ffff80000080206e:	5d                   	pop    rbp
ffff80000080206f:	c3                   	ret    

ffff800000802070 <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:168
addr_t kmallocat(addr_t addr,int pgc)
{
ffff800000802070:	f3 0f 1e fa          	endbr64 
ffff800000802074:	55                   	push   rbp
ffff800000802075:	48 89 e5             	mov    rbp,rsp
ffff800000802078:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802078 <kmallocat+0x8>
ffff80000080207f:	49 bb 80 ba 11 00 00 	movabs r11,0x11ba80
ffff800000802086:	00 00 00 
ffff800000802089:	4c 01 d8             	add    rax,r11
ffff80000080208c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802090:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:169
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
ffff800000802093:	48 b9 00 00 00 fe ff 	movabs rcx,0x7ffffe000000
ffff80000080209a:	7f 00 00 
ffff80000080209d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008020a1:	48 01 ca             	add    rdx,rcx
ffff8000008020a4:	48 c1 ea 0c          	shr    rdx,0xc
ffff8000008020a8:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:170
    if(addr==0){
ffff8000008020ab:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff8000008020b0:	0f 85 3f 01 00 00    	jne    ffff8000008021f5 <kmallocat+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:171
        int l=0,p=0;
ffff8000008020b6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008020bd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
        for(int i=0;i<kmalloc_pgc;i++){
ffff8000008020c4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008020cb:	eb 63                	jmp    ffff800000802130 <kmallocat+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:173
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
ffff8000008020cd:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff8000008020d4:	ff ff ff 
ffff8000008020d7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008020db:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008020de:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020e1:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008020e4:	85 d2                	test   edx,edx
ffff8000008020e6:	0f 48 d1             	cmovs  edx,ecx
ffff8000008020e9:	c1 fa 05             	sar    edx,0x5
ffff8000008020ec:	48 63 d2             	movsxd rdx,edx
ffff8000008020ef:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008020f3:	48 01 f2             	add    rdx,rsi
ffff8000008020f6:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008020f8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020fb:	83 e2 1f             	and    edx,0x1f
ffff8000008020fe:	89 d1                	mov    ecx,edx
ffff800000802100:	d3 ee                	shr    esi,cl
ffff800000802102:	89 f2                	mov    edx,esi
ffff800000802104:	83 e2 01             	and    edx,0x1
ffff800000802107:	85 d2                	test   edx,edx
ffff800000802109:	75 12                	jne    ffff80000080211d <kmallocat+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
                if(l==0)
ffff80000080210b:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000080210f:	75 06                	jne    ffff800000802117 <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
                    p=i;//开头空页
ffff800000802111:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000802114:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
                l++;
ffff800000802117:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffff80000080211b:	eb 07                	jmp    ffff800000802124 <kmallocat+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
            } else
                l=0;
ffff80000080211d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
            if(l==pgc)break;
ffff800000802124:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802127:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080212a:	74 1b                	je     ffff800000802147 <kmallocat+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
ffff80000080212c:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172 (discriminator 1)
ffff800000802130:	48 ba 58 ff ff ff ff 	movabs rdx,0xffffffffffffff58
ffff800000802137:	ff ff ff 
ffff80000080213a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080213e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802140:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff800000802143:	7c 88                	jl     ffff8000008020cd <kmallocat+0x5d>
ffff800000802145:	eb 01                	jmp    ffff800000802148 <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
            if(l==pgc)break;
ffff800000802147:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
        }
        if(l<pgc)return -1;
ffff800000802148:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080214b:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080214e:	7d 0c                	jge    ffff80000080215c <kmallocat+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181 (discriminator 1)
ffff800000802150:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802157:	e9 87 01 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183
        //开始占用
        for(int i=0;i<pgc;i++){
ffff80000080215c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffff800000802163:	eb 6e                	jmp    ffff8000008021d3 <kmallocat+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
ffff800000802165:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff80000080216c:	ff ff ff 
ffff80000080216f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802173:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000802176:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff800000802179:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080217c:	01 ca                	add    edx,ecx
ffff80000080217e:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff800000802181:	85 d2                	test   edx,edx
ffff800000802183:	0f 48 d1             	cmovs  edx,ecx
ffff800000802186:	c1 fa 05             	sar    edx,0x5
ffff800000802189:	89 d6                	mov    esi,edx
ffff80000080218b:	48 63 d6             	movsxd rdx,esi
ffff80000080218e:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802192:	48 01 fa             	add    rdx,rdi
ffff800000802195:	8b 3a                	mov    edi,DWORD PTR [rdx]
ffff800000802197:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080219a:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080219d:	01 ca                	add    edx,ecx
ffff80000080219f:	83 e2 1f             	and    edx,0x1f
ffff8000008021a2:	41 b8 01 00 00 00    	mov    r8d,0x1
ffff8000008021a8:	89 d1                	mov    ecx,edx
ffff8000008021aa:	41 d3 e0             	shl    r8d,cl
ffff8000008021ad:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff8000008021b4:	ff ff ff 
ffff8000008021b7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008021bb:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008021be:	48 63 d6             	movsxd rdx,esi
ffff8000008021c1:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008021c5:	48 01 ca             	add    rdx,rcx
ffff8000008021c8:	44 09 c7             	or     edi,r8d
ffff8000008021cb:	89 f9                	mov    ecx,edi
ffff8000008021cd:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 3)
        for(int i=0;i<pgc;i++){
ffff8000008021cf:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 1)
ffff8000008021d3:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008021d6:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008021d9:	7c 8a                	jl     ffff800000802165 <kmallocat+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
ffff8000008021db:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008021de:	c1 e0 0c             	shl    eax,0xc
ffff8000008021e1:	48 98                	cdqe   
ffff8000008021e3:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff8000008021ea:	80 ff ff 
ffff8000008021ed:	48 01 d0             	add    rax,rdx
ffff8000008021f0:	e9 ee 00 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188
    }
    for(int i=0;i<pgc;i++){
ffff8000008021f5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008021fc:	eb 5c                	jmp    ffff80000080225a <kmallocat+0x1ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:189
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
ffff8000008021fe:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000802205:	ff ff ff 
ffff800000802208:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080220c:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080220f:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802212:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802215:	01 ca                	add    edx,ecx
ffff800000802217:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff80000080221a:	85 d2                	test   edx,edx
ffff80000080221c:	0f 48 d1             	cmovs  edx,ecx
ffff80000080221f:	c1 fa 05             	sar    edx,0x5
ffff800000802222:	48 63 d2             	movsxd rdx,edx
ffff800000802225:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802229:	48 01 f2             	add    rdx,rsi
ffff80000080222c:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff80000080222e:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802231:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802234:	01 ca                	add    edx,ecx
ffff800000802236:	83 e2 1f             	and    edx,0x1f
ffff800000802239:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080223e:	89 d1                	mov    ecx,edx
ffff800000802240:	d3 e7                	shl    edi,cl
ffff800000802242:	89 fa                	mov    edx,edi
ffff800000802244:	21 f2                	and    edx,esi
ffff800000802246:	85 d2                	test   edx,edx
ffff800000802248:	74 0c                	je     ffff800000802256 <kmallocat+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190
            return -1;
ffff80000080224a:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802251:	e9 8d 00 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188 (discriminator 2)
    for(int i=0;i<pgc;i++){
ffff800000802256:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188 (discriminator 1)
ffff80000080225a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080225d:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802260:	7c 9c                	jl     ffff8000008021fe <kmallocat+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193
    }
    //
    for(int i=0;i<pgc;i++){
ffff800000802262:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000802269:	eb 6c                	jmp    ffff8000008022d7 <kmallocat+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:194 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
ffff80000080226b:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000802272:	ff ff ff 
ffff800000802275:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802279:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080227c:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
ffff80000080227f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802282:	01 f2                	add    edx,esi
ffff800000802284:	48 63 d2             	movsxd rdx,edx
ffff800000802287:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080228b:	48 01 ca             	add    rdx,rcx
ffff80000080228e:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802290:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802293:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802296:	01 ca                	add    edx,ecx
ffff800000802298:	83 e2 1f             	and    edx,0x1f
ffff80000080229b:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008022a0:	89 d1                	mov    ecx,edx
ffff8000008022a2:	d3 e7                	shl    edi,cl
ffff8000008022a4:	89 fa                	mov    edx,edi
ffff8000008022a6:	41 89 d0             	mov    r8d,edx
ffff8000008022a9:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff8000008022b0:	ff ff ff 
ffff8000008022b3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008022b7:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008022ba:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
ffff8000008022bd:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022c0:	01 fa                	add    edx,edi
ffff8000008022c2:	48 63 d2             	movsxd rdx,edx
ffff8000008022c5:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022c9:	48 01 ca             	add    rdx,rcx
ffff8000008022cc:	44 09 c6             	or     esi,r8d
ffff8000008022cf:	89 f1                	mov    ecx,esi
ffff8000008022d1:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff8000008022d3:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193 (discriminator 1)
ffff8000008022d7:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022da:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008022dd:	7c 8c                	jl     ffff80000080226b <kmallocat+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196
    }
    return addr;
ffff8000008022df:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:198

}
ffff8000008022e3:	5d                   	pop    rbp
ffff8000008022e4:	c3                   	ret    

ffff8000008022e5 <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:201

int kmfree(addr_t ptr)
{
ffff8000008022e5:	f3 0f 1e fa          	endbr64 
ffff8000008022e9:	55                   	push   rbp
ffff8000008022ea:	48 89 e5             	mov    rbp,rsp
ffff8000008022ed:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008022ed <kmfree+0x8>
ffff8000008022f4:	49 bb 0b b8 11 00 00 	movabs r11,0x11b80b
ffff8000008022fb:	00 00 00 
ffff8000008022fe:	4c 01 da             	add    rdx,r11
ffff800000802301:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:202
    int num=ptr/PAGE_SIZE;
ffff800000802305:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802309:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080230d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:203
    int n=num/32;
ffff800000802310:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802313:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802316:	85 c0                	test   eax,eax
ffff800000802318:	0f 48 c1             	cmovs  eax,ecx
ffff80000080231b:	c1 f8 05             	sar    eax,0x5
ffff80000080231e:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:204
    int r=num%32;
ffff800000802321:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802324:	89 c1                	mov    ecx,eax
ffff800000802326:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802329:	c1 e9 1b             	shr    ecx,0x1b
ffff80000080232c:	01 c8                	add    eax,ecx
ffff80000080232e:	83 e0 1f             	and    eax,0x1f
ffff800000802331:	29 c8                	sub    eax,ecx
ffff800000802333:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:205
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
ffff800000802336:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080233d:	ff ff ff 
ffff800000802340:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802344:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802347:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080234a:	48 98                	cdqe   
ffff80000080234c:	48 c1 e0 02          	shl    rax,0x2
ffff800000802350:	48 01 c8             	add    rax,rcx
ffff800000802353:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802355:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802358:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080235d:	89 c1                	mov    ecx,eax
ffff80000080235f:	d3 e7                	shl    edi,cl
ffff800000802361:	89 f8                	mov    eax,edi
ffff800000802363:	f7 d0                	not    eax
ffff800000802365:	89 c1                	mov    ecx,eax
ffff800000802367:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080236e:	ff ff ff 
ffff800000802371:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802375:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802378:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080237b:	48 98                	cdqe   
ffff80000080237d:	48 c1 e0 02          	shl    rax,0x2
ffff800000802381:	48 01 d0             	add    rax,rdx
ffff800000802384:	21 ce                	and    esi,ecx
ffff800000802386:	89 f2                	mov    edx,esi
ffff800000802388:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:206
}
ffff80000080238a:	90                   	nop
ffff80000080238b:	5d                   	pop    rbp
ffff80000080238c:	c3                   	ret    

ffff80000080238d <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207
void page_err(){
ffff80000080238d:	f3 0f 1e fa          	endbr64 
ffff800000802391:	55                   	push   rbp
ffff800000802392:	48 89 e5             	mov    rbp,rsp
ffff800000802395:	41 57                	push   r15
ffff800000802397:	41 55                	push   r13
ffff800000802399:	41 54                	push   r12
ffff80000080239b:	53                   	push   rbx
ffff80000080239c:	48 83 ec 20          	sub    rsp,0x20
ffff8000008023a0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008023a0 <page_err+0x13>
ffff8000008023a7:	49 bb 58 b7 11 00 00 	movabs r11,0x11b758
ffff8000008023ae:	00 00 00 
ffff8000008023b1:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
    asm("cli");
ffff8000008023b4:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
    printf("page err\n");
ffff8000008023b5:	48 b8 75 d5 ff ff ff 	movabs rax,0xffffffffffffd575
ffff8000008023bc:	ff ff ff 
ffff8000008023bf:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008023c3:	48 89 c7             	mov    rdi,rax
ffff8000008023c6:	49 89 df             	mov    r15,rbx
ffff8000008023c9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008023ce:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff8000008023d5:	ff ff ff 
ffff8000008023d8:	48 01 da             	add    rdx,rbx
ffff8000008023db:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
    unsigned long err_code=0,l_addr=0;
ffff8000008023dd:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008023e4:	00 
ffff8000008023e5:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008023ec:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:211
    asm volatile("mov 0(%%rbp),%0":"=r"(err_code));
ffff8000008023ed:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
ffff8000008023f1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:212
    asm volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
ffff8000008023f5:	0f 20 d0             	mov    rax,cr2
ffff8000008023f8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:213
    int p=err_code&1;
ffff8000008023fc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802400:	83 e0 01             	and    eax,0x1
ffff800000802403:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215

    if(!p)
ffff800000802406:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080240a:	75 72                	jne    ffff80000080247e <page_err+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:222
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        //在进程的页表中申请新页
        smmap(get_phyaddr(req_a_page()),l_addr&~0xfff,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff80000080240c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000802413:	ff ff ff 
ffff800000802416:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080241a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080241d:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000802424:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000802428:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080242e:	49 89 c5             	mov    r13,rax
ffff800000802431:	49 89 df             	mov    r15,rbx
ffff800000802434:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802439:	48 ba 29 4f ee ff ff 	movabs rdx,0xffffffffffee4f29
ffff800000802440:	ff ff ff 
ffff800000802443:	48 01 da             	add    rdx,rbx
ffff800000802446:	ff d2                	call   rdx
ffff800000802448:	89 c7                	mov    edi,eax
ffff80000080244a:	49 89 df             	mov    r15,rbx
ffff80000080244d:	48 b8 16 53 ee ff ff 	movabs rax,0xffffffffffee5316
ffff800000802454:	ff ff ff 
ffff800000802457:	48 01 d8             	add    rax,rbx
ffff80000080245a:	ff d0                	call   rax
ffff80000080245c:	48 98                	cdqe   
ffff80000080245e:	4c 89 e1             	mov    rcx,r12
ffff800000802461:	ba 07 00 00 00       	mov    edx,0x7
ffff800000802466:	4c 89 ee             	mov    rsi,r13
ffff800000802469:	48 89 c7             	mov    rdi,rax
ffff80000080246c:	49 89 df             	mov    r15,rbx
ffff80000080246f:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff800000802476:	ff ff ff 
ffff800000802479:	48 01 d8             	add    rax,rbx
ffff80000080247c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:240
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
ffff80000080247e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802482:	83 e0 02             	and    eax,0x2
ffff800000802485:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:241
    if(p)printf("when writing\n");else //puts("when reading");
ffff800000802488:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080248c:	74 2a                	je     ffff8000008024b8 <page_err+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:241 (discriminator 1)
ffff80000080248e:	48 b8 7f d5 ff ff ff 	movabs rax,0xffffffffffffd57f
ffff800000802495:	ff ff ff 
ffff800000802498:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080249c:	48 89 c7             	mov    rdi,rax
ffff80000080249f:	49 89 df             	mov    r15,rbx
ffff8000008024a2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024a7:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff8000008024ae:	ff ff ff 
ffff8000008024b1:	48 01 da             	add    rdx,rbx
ffff8000008024b4:	ff d2                	call   rdx
ffff8000008024b6:	eb 0a                	jmp    ffff8000008024c2 <page_err+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:242
    p=err_code&4;
ffff8000008024b8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008024bc:	83 e0 04             	and    eax,0x4
ffff8000008024bf:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243
    if(!p)printf("supervisor mode\n");else //puts("user mode");
ffff8000008024c2:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008024c6:	75 2a                	jne    ffff8000008024f2 <page_err+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243 (discriminator 1)
ffff8000008024c8:	48 b8 8d d5 ff ff ff 	movabs rax,0xffffffffffffd58d
ffff8000008024cf:	ff ff ff 
ffff8000008024d2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008024d6:	48 89 c7             	mov    rdi,rax
ffff8000008024d9:	49 89 df             	mov    r15,rbx
ffff8000008024dc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024e1:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff8000008024e8:	ff ff ff 
ffff8000008024eb:	48 01 da             	add    rdx,rbx
ffff8000008024ee:	ff d2                	call   rdx
ffff8000008024f0:	eb 0a                	jmp    ffff8000008024fc <page_err+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244
    p=err_code&16;
ffff8000008024f2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008024f6:	83 e0 10             	and    eax,0x10
ffff8000008024f9:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245
    if(p)printf("an instruction tries to fetch\n");
ffff8000008024fc:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000802500:	74 28                	je     ffff80000080252a <page_err+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245 (discriminator 1)
ffff800000802502:	48 b8 a0 d5 ff ff ff 	movabs rax,0xffffffffffffd5a0
ffff800000802509:	ff ff ff 
ffff80000080250c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802510:	48 89 c7             	mov    rdi,rax
ffff800000802513:	49 89 df             	mov    r15,rbx
ffff800000802516:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080251b:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff800000802522:	ff ff ff 
ffff800000802525:	48 01 da             	add    rdx,rbx
ffff800000802528:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246
    unsigned int addr=0;
ffff80000080252a:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
    asm volatile("mov 8(%%rbp),%0":"=r"(addr));
ffff800000802531:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
ffff800000802534:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
ffff800000802537:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080253b:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080253e:	89 c6                	mov    esi,eax
ffff800000802540:	48 b8 c0 d5 ff ff ff 	movabs rax,0xffffffffffffd5c0
ffff800000802547:	ff ff ff 
ffff80000080254a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080254e:	48 89 c7             	mov    rdi,rax
ffff800000802551:	49 89 df             	mov    r15,rbx
ffff800000802554:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802559:	48 b9 fb 3b ee ff ff 	movabs rcx,0xffffffffffee3bfb
ffff800000802560:	ff ff ff 
ffff800000802563:	48 01 d9             	add    rcx,rbx
ffff800000802566:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:260
    }*/
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
ffff800000802568:	49 89 df             	mov    r15,rbx
ffff80000080256b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802570:	48 ba 16 a3 ee ff ff 	movabs rdx,0xffffffffffeea316
ffff800000802577:	ff ff ff 
ffff80000080257a:	48 01 da             	add    rdx,rbx
ffff80000080257d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:262
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
ffff80000080257f:	fb                   	sti    
ffff800000802580:	c9                   	leave  
ffff800000802581:	48 83 c4 08          	add    rsp,0x8
ffff800000802585:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:263
}
ffff800000802587:	90                   	nop
ffff800000802588:	48 83 c4 20          	add    rsp,0x20
ffff80000080258c:	5b                   	pop    rbx
ffff80000080258d:	41 5c                	pop    r12
ffff80000080258f:	41 5d                	pop    r13
ffff800000802591:	41 5f                	pop    r15
ffff800000802593:	5d                   	pop    rbp
ffff800000802594:	c3                   	ret    

ffff800000802595 <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:265
void init_memory()
{
ffff800000802595:	f3 0f 1e fa          	endbr64 
ffff800000802599:	55                   	push   rbp
ffff80000080259a:	48 89 e5             	mov    rbp,rsp
ffff80000080259d:	41 57                	push   r15
ffff80000080259f:	53                   	push   rbx
ffff8000008025a0:	48 83 ec 60          	sub    rsp,0x60
ffff8000008025a4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008025a4 <init_memory+0xf>
ffff8000008025ab:	49 bb 54 b5 11 00 00 	movabs r11,0x11b554
ffff8000008025b2:	00 00 00 
ffff8000008025b5:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:268
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取可用内存大小mem_size
    size_t tot_mem_size=mmap_struct[mmap_t_i-1].base+mmap_struct[mmap_t_i-1].len,mem_size=0;
ffff8000008025b8:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008025bf:	ff ff ff 
ffff8000008025c2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008025c6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008025c8:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008025cb:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff8000008025d2:	ff ff ff 
ffff8000008025d5:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008025d9:	48 63 d2             	movsxd rdx,edx
ffff8000008025dc:	48 89 d0             	mov    rax,rdx
ffff8000008025df:	48 01 c0             	add    rax,rax
ffff8000008025e2:	48 01 d0             	add    rax,rdx
ffff8000008025e5:	48 c1 e0 03          	shl    rax,0x3
ffff8000008025e9:	48 01 c8             	add    rax,rcx
ffff8000008025ec:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008025ef:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008025f6:	ff ff ff 
ffff8000008025f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008025fd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008025ff:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802602:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff800000802609:	ff ff ff 
ffff80000080260c:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802610:	48 63 d2             	movsxd rdx,edx
ffff800000802613:	48 89 d0             	mov    rax,rdx
ffff800000802616:	48 01 c0             	add    rax,rax
ffff800000802619:	48 01 d0             	add    rax,rdx
ffff80000080261c:	48 c1 e0 03          	shl    rax,0x3
ffff800000802620:	48 01 f0             	add    rax,rsi
ffff800000802623:	48 83 c0 08          	add    rax,0x8
ffff800000802627:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080262a:	48 01 c8             	add    rax,rcx
ffff80000080262d:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff800000802631:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000802638:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269
    for(int i=0;i<mmap_t_i;i++)
ffff800000802639:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000802640:	eb 64                	jmp    ffff8000008026a6 <init_memory+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:271
    {
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff800000802642:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff800000802649:	ff ff ff 
ffff80000080264c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802650:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802653:	48 63 d0             	movsxd rdx,eax
ffff800000802656:	48 89 d0             	mov    rax,rdx
ffff800000802659:	48 01 c0             	add    rax,rax
ffff80000080265c:	48 01 d0             	add    rax,rdx
ffff80000080265f:	48 c1 e0 03          	shl    rax,0x3
ffff800000802663:	48 01 c8             	add    rax,rcx
ffff800000802666:	48 83 c0 10          	add    rax,0x10
ffff80000080266a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080266d:	48 83 f8 01          	cmp    rax,0x1
ffff800000802671:	75 2f                	jne    ffff8000008026a2 <init_memory+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272
            mem_size+=mmap_struct[i].len;
ffff800000802673:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080267a:	ff ff ff 
ffff80000080267d:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802681:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802684:	48 63 d0             	movsxd rdx,eax
ffff800000802687:	48 89 d0             	mov    rax,rdx
ffff80000080268a:	48 01 c0             	add    rax,rax
ffff80000080268d:	48 01 d0             	add    rax,rdx
ffff800000802690:	48 c1 e0 03          	shl    rax,0x3
ffff800000802694:	48 01 c8             	add    rax,rcx
ffff800000802697:	48 83 c0 08          	add    rax,0x8
ffff80000080269b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080269e:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff8000008026a2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269 (discriminator 1)
ffff8000008026a6:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008026ad:	ff ff ff 
ffff8000008026b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026b4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008026b6:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008026b9:	7c 87                	jl     ffff800000802642 <init_memory+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274
    }
    usr_mem_pa=PAGE_4K_ALIGN(mem_size/2);
ffff8000008026bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008026bf:	48 d1 e8             	shr    rax,1
ffff8000008026c2:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008026c8:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008026ce:	48 89 c2             	mov    rdx,rax
ffff8000008026d1:	48 b8 28 fd ff ff ff 	movabs rax,0xfffffffffffffd28
ffff8000008026d8:	ff ff ff 
ffff8000008026db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026df:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:281
    /*
     * 注：物理内存的一半会分给内核。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    pmalloc_entc= tot_mem_size / PAGE_4K_SIZE/32;
ffff8000008026e2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008026e6:	48 c1 e8 11          	shr    rax,0x11
ffff8000008026ea:	89 c2                	mov    edx,eax
ffff8000008026ec:	48 b8 28 ff ff ff ff 	movabs rax,0xffffffffffffff28
ffff8000008026f3:	ff ff ff 
ffff8000008026f6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026fa:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:282
    int pgc=(tot_mem_size/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
ffff8000008026fc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802700:	48 c1 e8 1b          	shr    rax,0x1b
ffff800000802704:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:284
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
ffff800000802707:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080270a:	c1 f8 05             	sar    eax,0x5
ffff80000080270d:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
ffff800000802710:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802714:	48 d1 e8             	shr    rax,1
ffff800000802717:	48 2d 00 00 00 01    	sub    rax,0x1000000
ffff80000080271d:	48 c1 e8 11          	shr    rax,0x11
ffff800000802721:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:288
    size_t vmms=vmec*4/PAGE_4K_SIZE;//位图自己需要多少页
ffff800000802725:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802729:	48 c1 e0 02          	shl    rax,0x2
ffff80000080272d:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802731:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:289
    comprintf("tot memsize:0x%l,available size 0x%l,kmalloc pages count:%d,kmalloc bitmap taking 0x%d pages\n", tot_mem_size,mem_size,vmec,vmms);
ffff800000802735:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000802739:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffff80000080273d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000802741:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802745:	49 89 f0             	mov    r8,rsi
ffff800000802748:	48 89 c6             	mov    rsi,rax
ffff80000080274b:	48 b8 e8 d5 ff ff ff 	movabs rax,0xffffffffffffd5e8
ffff800000802752:	ff ff ff 
ffff800000802755:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802759:	48 89 c7             	mov    rdi,rax
ffff80000080275c:	49 89 df             	mov    r15,rbx
ffff80000080275f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802764:	49 b9 cb 4b ef ff ff 	movabs r9,0xffffffffffef4bcb
ffff80000080276b:	ff ff ff 
ffff80000080276e:	49 01 d9             	add    r9,rbx
ffff800000802771:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:290
    if(vmec*4%PAGE_4K_SIZE)
ffff800000802774:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802778:	48 c1 e0 02          	shl    rax,0x2
ffff80000080277c:	25 fc 0f 00 00       	and    eax,0xffc
ffff800000802781:	48 85 c0             	test   rax,rax
ffff800000802784:	74 05                	je     ffff80000080278b <init_memory+0x1f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291
        vmms++;
ffff800000802786:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292
    for(int i=0;i<vmec;i++){
ffff80000080278b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000802792:	eb 27                	jmp    ffff8000008027bb <init_memory+0x226>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:293 (discriminator 3)
        vmalloc_map[i]=0;
ffff800000802794:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080279b:	ff ff ff 
ffff80000080279e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027a2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008027a5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008027a8:	48 98                	cdqe   
ffff8000008027aa:	48 c1 e0 02          	shl    rax,0x2
ffff8000008027ae:	48 01 d0             	add    rax,rdx
ffff8000008027b1:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292 (discriminator 3)
    for(int i=0;i<vmec;i++){
ffff8000008027b7:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292 (discriminator 1)
ffff8000008027bb:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008027be:	48 98                	cdqe   
ffff8000008027c0:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff8000008027c4:	77 ce                	ja     ffff800000802794 <init_memory+0x1ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296
    }
    //位图占用前几页
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff8000008027c6:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008027cd:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008027d4:	eb 61                	jmp    ffff800000802837 <init_memory+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:298
    {
        if(i==32)
ffff8000008027d6:	83 7d d0 20          	cmp    DWORD PTR [rbp-0x30],0x20
ffff8000008027da:	75 0b                	jne    ffff8000008027e7 <init_memory+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:300
        {
            i=0;
ffff8000008027dc:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301
            j++;
ffff8000008027e3:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303 (discriminator 2)
        }
        vmalloc_map[j]|=1u<<i;
ffff8000008027e7:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff8000008027ee:	ff ff ff 
ffff8000008027f1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027f5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008027f8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008027fb:	48 98                	cdqe   
ffff8000008027fd:	48 c1 e0 02          	shl    rax,0x2
ffff800000802801:	48 01 d0             	add    rax,rdx
ffff800000802804:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802806:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802809:	be 01 00 00 00       	mov    esi,0x1
ffff80000080280e:	89 c1                	mov    ecx,eax
ffff800000802810:	d3 e6                	shl    esi,cl
ffff800000802812:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000802819:	ff ff ff 
ffff80000080281c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802820:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802823:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802826:	48 98                	cdqe   
ffff800000802828:	48 c1 e0 02          	shl    rax,0x2
ffff80000080282c:	48 01 c8             	add    rax,rcx
ffff80000080282f:	09 f2                	or     edx,esi
ffff800000802831:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296 (discriminator 2)
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff800000802833:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296 (discriminator 1)
ffff800000802837:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080283a:	c1 e0 05             	shl    eax,0x5
ffff80000080283d:	89 c2                	mov    edx,eax
ffff80000080283f:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802842:	01 d0                	add    eax,edx
ffff800000802844:	48 98                	cdqe   
ffff800000802846:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080284a:	77 8a                	ja     ffff8000008027d6 <init_memory+0x241>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:306
    }
    //kmalloc连续的内存
    page_map=kmallocat(0,pgc);//(unsigned int*)PAGE_4K_ALIGN(0xc00000);
ffff80000080284c:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080284f:	89 c6                	mov    esi,eax
ffff800000802851:	bf 00 00 00 00       	mov    edi,0x0
ffff800000802856:	49 89 df             	mov    r15,rbx
ffff800000802859:	48 b8 78 45 ee ff ff 	movabs rax,0xffffffffffee4578
ffff800000802860:	ff ff ff 
ffff800000802863:	48 01 d8             	add    rax,rbx
ffff800000802866:	ff d0                	call   rax
ffff800000802868:	48 89 c2             	mov    rdx,rax
ffff80000080286b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802872:	ff ff ff 
ffff800000802875:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802879:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:307
    int* p=page_map;
ffff80000080287c:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802883:	ff ff ff 
ffff800000802886:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080288a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080288d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:308
    addr_t curp=0;
ffff800000802891:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000802898:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310
    //不能使用的内存提前占用掉
    for(int i=0;i<mmap_t_i;i++){
ffff800000802899:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff8000008028a0:	e9 1f 01 00 00       	jmp    ffff8000008029c4 <init_memory+0x42f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:311
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff8000008028a5:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff8000008028ac:	ff ff ff 
ffff8000008028af:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008028b3:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008028b6:	48 63 d0             	movsxd rdx,eax
ffff8000008028b9:	48 89 d0             	mov    rax,rdx
ffff8000008028bc:	48 01 c0             	add    rax,rax
ffff8000008028bf:	48 01 d0             	add    rax,rdx
ffff8000008028c2:	48 c1 e0 03          	shl    rax,0x3
ffff8000008028c6:	48 01 c8             	add    rax,rcx
ffff8000008028c9:	48 83 c0 10          	add    rax,0x10
ffff8000008028cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008028d0:	48 83 f8 01          	cmp    rax,0x1
ffff8000008028d4:	0f 84 e5 00 00 00    	je     ffff8000008029bf <init_memory+0x42a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313
            continue;
        int b=(mmap_struct[i].base-usr_mem_pa)/PAGE_4K_SIZE;
ffff8000008028da:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff8000008028e1:	ff ff ff 
ffff8000008028e4:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008028e8:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008028eb:	48 63 d0             	movsxd rdx,eax
ffff8000008028ee:	48 89 d0             	mov    rax,rdx
ffff8000008028f1:	48 01 c0             	add    rax,rax
ffff8000008028f4:	48 01 d0             	add    rax,rdx
ffff8000008028f7:	48 c1 e0 03          	shl    rax,0x3
ffff8000008028fb:	48 01 c8             	add    rax,rcx
ffff8000008028fe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802901:	48 b8 28 fd ff ff ff 	movabs rax,0xfffffffffffffd28
ffff800000802908:	ff ff ff 
ffff80000080290b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080290f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802912:	48 89 d0             	mov    rax,rdx
ffff800000802915:	48 29 c8             	sub    rax,rcx
ffff800000802918:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080291c:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:314
        int l=mmap_struct[i].len/PAGE_4K_SIZE;
ffff80000080291f:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff800000802926:	ff ff ff 
ffff800000802929:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080292d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802930:	48 63 d0             	movsxd rdx,eax
ffff800000802933:	48 89 d0             	mov    rax,rdx
ffff800000802936:	48 01 c0             	add    rax,rax
ffff800000802939:	48 01 d0             	add    rax,rdx
ffff80000080293c:	48 c1 e0 03          	shl    rax,0x3
ffff800000802940:	48 01 c8             	add    rax,rcx
ffff800000802943:	48 83 c0 08          	add    rax,0x8
ffff800000802947:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080294a:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080294e:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315
        for(int j=0;j<l;j++){
ffff800000802951:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff800000802958:	eb 5b                	jmp    ffff8000008029b5 <init_memory+0x420>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:316 (discriminator 3)
            p[b+j/32]|=1u<<(j%32);
ffff80000080295a:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080295d:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000802960:	85 c0                	test   eax,eax
ffff800000802962:	0f 48 c2             	cmovs  eax,edx
ffff800000802965:	c1 f8 05             	sar    eax,0x5
ffff800000802968:	89 c6                	mov    esi,eax
ffff80000080296a:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080296d:	01 f0                	add    eax,esi
ffff80000080296f:	48 98                	cdqe   
ffff800000802971:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000802978:	00 
ffff800000802979:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080297d:	48 01 d0             	add    rax,rdx
ffff800000802980:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802982:	89 c7                	mov    edi,eax
ffff800000802984:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802987:	83 e0 1f             	and    eax,0x1f
ffff80000080298a:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080298f:	89 c1                	mov    ecx,eax
ffff800000802991:	d3 e2                	shl    edx,cl
ffff800000802993:	89 d0                	mov    eax,edx
ffff800000802995:	09 c7                	or     edi,eax
ffff800000802997:	89 fa                	mov    edx,edi
ffff800000802999:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080299c:	01 f0                	add    eax,esi
ffff80000080299e:	48 98                	cdqe   
ffff8000008029a0:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
ffff8000008029a7:	00 
ffff8000008029a8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008029ac:	48 01 c8             	add    rax,rcx
ffff8000008029af:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315 (discriminator 3)
        for(int j=0;j<l;j++){
ffff8000008029b1:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315 (discriminator 1)
ffff8000008029b5:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008029b8:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
ffff8000008029bb:	7c 9d                	jl     ffff80000080295a <init_memory+0x3c5>
ffff8000008029bd:	eb 01                	jmp    ffff8000008029c0 <init_memory+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:312
            continue;
ffff8000008029bf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++){
ffff8000008029c0:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310 (discriminator 1)
ffff8000008029c4:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008029cb:	ff ff ff 
ffff8000008029ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029d2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008029d4:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
ffff8000008029d7:	0f 8c c8 fe ff ff    	jl     ffff8000008028a5 <init_memory+0x310>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320
        }
    }
    //低1gb提前占用掉 knl
    for(int j=0;j<0x2000;j++){
ffff8000008029dd:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
ffff8000008029e4:	eb 27                	jmp    ffff800000802a0d <init_memory+0x478>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:321 (discriminator 3)
        page_map[j]=-1;
ffff8000008029e6:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008029ed:	ff ff ff 
ffff8000008029f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029f4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008029f7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008029fa:	48 98                	cdqe   
ffff8000008029fc:	48 c1 e0 02          	shl    rax,0x2
ffff800000802a00:	48 01 d0             	add    rax,rdx
ffff800000802a03:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320 (discriminator 3)
    for(int j=0;j<0x2000;j++){
ffff800000802a09:	83 45 c0 01          	add    DWORD PTR [rbp-0x40],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320 (discriminator 1)
ffff800000802a0d:	81 7d c0 ff 1f 00 00 	cmp    DWORD PTR [rbp-0x40],0x1fff
ffff800000802a14:	7e d0                	jle    ffff8000008029e6 <init_memory+0x451>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:351
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
ffff800000802a16:	90                   	nop
ffff800000802a17:	90                   	nop
ffff800000802a18:	48 83 c4 60          	add    rsp,0x60
ffff800000802a1c:	5b                   	pop    rbx
ffff800000802a1d:	41 5f                	pop    r15
ffff800000802a1f:	5d                   	pop    rbp
ffff800000802a20:	c3                   	ret    

ffff800000802a21 <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:357
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
ffff800000802a21:	f3 0f 1e fa          	endbr64 
ffff800000802a25:	55                   	push   rbp
ffff800000802a26:	48 89 e5             	mov    rbp,rsp
ffff800000802a29:	41 57                	push   r15
ffff800000802a2b:	53                   	push   rbx
ffff800000802a2c:	48 83 ec 10          	sub    rsp,0x10
ffff800000802a30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802a30 <req_a_page+0xf>
ffff800000802a37:	49 bb c8 b0 11 00 00 	movabs r11,0x11b0c8
ffff800000802a3e:	00 00 00 
ffff800000802a41:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802a44:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802a4b:	e9 6b 01 00 00       	jmp    ffff800000802bbb <req_a_page+0x19a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359
        for(int j=0;j<32;j++){
ffff800000802a50:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000802a57:	e9 51 01 00 00       	jmp    ffff800000802bad <req_a_page+0x18c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:360
            unsigned int bit=page_map[i]&(1<<j);
ffff800000802a5c:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802a63:	ff ff ff 
ffff800000802a66:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802a6a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802a6d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802a70:	48 98                	cdqe   
ffff800000802a72:	48 c1 e0 02          	shl    rax,0x2
ffff800000802a76:	48 01 d0             	add    rax,rdx
ffff800000802a79:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802a7b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802a7e:	be 01 00 00 00       	mov    esi,0x1
ffff800000802a83:	89 c1                	mov    ecx,eax
ffff800000802a85:	d3 e6                	shl    esi,cl
ffff800000802a87:	89 f0                	mov    eax,esi
ffff800000802a89:	21 d0                	and    eax,edx
ffff800000802a8b:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361
            if((i*32+j)*4096>=0x100000&&(bit==0u))
ffff800000802a8e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802a91:	c1 e0 05             	shl    eax,0x5
ffff800000802a94:	89 c2                	mov    edx,eax
ffff800000802a96:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802a99:	01 d0                	add    eax,edx
ffff800000802a9b:	c1 e0 0c             	shl    eax,0xc
ffff800000802a9e:	3d ff ff 0f 00       	cmp    eax,0xfffff
ffff800000802aa3:	0f 8e 00 01 00 00    	jle    ffff800000802ba9 <req_a_page+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361 (discriminator 1)
ffff800000802aa9:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000802aad:	0f 85 f6 00 00 00    	jne    ffff800000802ba9 <req_a_page+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:363
            {
                comprintf("req_a_page:before:page_map[%d]=0x%x,",i,page_map[i]);
ffff800000802ab3:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802aba:	ff ff ff 
ffff800000802abd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802ac1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802ac4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802ac7:	48 98                	cdqe   
ffff800000802ac9:	48 c1 e0 02          	shl    rax,0x2
ffff800000802acd:	48 01 d0             	add    rax,rdx
ffff800000802ad0:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802ad2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802ad5:	89 c6                	mov    esi,eax
ffff800000802ad7:	48 b8 48 d6 ff ff ff 	movabs rax,0xffffffffffffd648
ffff800000802ade:	ff ff ff 
ffff800000802ae1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802ae5:	48 89 c7             	mov    rdi,rax
ffff800000802ae8:	49 89 df             	mov    r15,rbx
ffff800000802aeb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802af0:	48 b9 cb 4b ef ff ff 	movabs rcx,0xffffffffffef4bcb
ffff800000802af7:	ff ff ff 
ffff800000802afa:	48 01 d9             	add    rcx,rbx
ffff800000802afd:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364
                page_map[i]=page_map[i]|(1<<j);
ffff800000802aff:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802b06:	ff ff ff 
ffff800000802b09:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b0d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802b10:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b13:	48 98                	cdqe   
ffff800000802b15:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b19:	48 01 d0             	add    rax,rdx
ffff800000802b1c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802b1e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802b21:	be 01 00 00 00       	mov    esi,0x1
ffff800000802b26:	89 c1                	mov    ecx,eax
ffff800000802b28:	d3 e6                	shl    esi,cl
ffff800000802b2a:	89 f0                	mov    eax,esi
ffff800000802b2c:	89 c6                	mov    esi,eax
ffff800000802b2e:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802b35:	ff ff ff 
ffff800000802b38:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b3c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802b3f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b42:	48 98                	cdqe   
ffff800000802b44:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b48:	48 01 c8             	add    rax,rcx
ffff800000802b4b:	09 f2                	or     edx,esi
ffff800000802b4d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:365
                comprintf("now = 0x%x",page_map[i]);
ffff800000802b4f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802b56:	ff ff ff 
ffff800000802b59:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b5d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802b60:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b63:	48 98                	cdqe   
ffff800000802b65:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b69:	48 01 d0             	add    rax,rdx
ffff800000802b6c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802b6e:	89 c6                	mov    esi,eax
ffff800000802b70:	48 b8 6d d6 ff ff ff 	movabs rax,0xffffffffffffd66d
ffff800000802b77:	ff ff ff 
ffff800000802b7a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802b7e:	48 89 c7             	mov    rdi,rax
ffff800000802b81:	49 89 df             	mov    r15,rbx
ffff800000802b84:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802b89:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff800000802b90:	ff ff ff 
ffff800000802b93:	48 01 da             	add    rdx,rbx
ffff800000802b96:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
                return i*32+j;//num of page
ffff800000802b98:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b9b:	c1 e0 05             	shl    eax,0x5
ffff800000802b9e:	89 c2                	mov    edx,eax
ffff800000802ba0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802ba3:	01 d0                	add    eax,edx
ffff800000802ba5:	48 98                	cdqe   
ffff800000802ba7:	eb 32                	jmp    ffff800000802bdb <req_a_page+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359 (discriminator 2)
        for(int j=0;j<32;j++){
ffff800000802ba9:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359 (discriminator 1)
ffff800000802bad:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000802bb1:	0f 8e a5 fe ff ff    	jle    ffff800000802a5c <req_a_page+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358 (discriminator 2)
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802bb7:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358 (discriminator 1)
ffff800000802bbb:	48 b8 28 ff ff ff ff 	movabs rax,0xffffffffffffff28
ffff800000802bc2:	ff ff ff 
ffff800000802bc5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802bc9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802bcb:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffff800000802bce:	0f 8c 7c fe ff ff    	jl     ffff800000802a50 <req_a_page+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:371

            }
        }
    }
    return -1;
ffff800000802bd4:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:372
}
ffff800000802bdb:	48 83 c4 10          	add    rsp,0x10
ffff800000802bdf:	5b                   	pop    rbx
ffff800000802be0:	41 5f                	pop    r15
ffff800000802be2:	5d                   	pop    rbp
ffff800000802be3:	c3                   	ret    

ffff800000802be4 <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:374

void * pmalloc(){
ffff800000802be4:	f3 0f 1e fa          	endbr64 
ffff800000802be8:	55                   	push   rbp
ffff800000802be9:	48 89 e5             	mov    rbp,rsp
ffff800000802bec:	41 57                	push   r15
ffff800000802bee:	53                   	push   rbx
ffff800000802bef:	48 83 ec 10          	sub    rsp,0x10
ffff800000802bf3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802bf3 <pmalloc+0xf>
ffff800000802bfa:	49 bb 05 af 11 00 00 	movabs r11,0x11af05
ffff800000802c01:	00 00 00 
ffff800000802c04:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:375
    void *ret=(void*)(get_phyaddr(req_a_page()));
ffff800000802c07:	49 89 df             	mov    r15,rbx
ffff800000802c0a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802c0f:	48 ba 29 4f ee ff ff 	movabs rdx,0xffffffffffee4f29
ffff800000802c16:	ff ff ff 
ffff800000802c19:	48 01 da             	add    rdx,rbx
ffff800000802c1c:	ff d2                	call   rdx
ffff800000802c1e:	89 c7                	mov    edi,eax
ffff800000802c20:	49 89 df             	mov    r15,rbx
ffff800000802c23:	48 b8 16 53 ee ff ff 	movabs rax,0xffffffffffee5316
ffff800000802c2a:	ff ff ff 
ffff800000802c2d:	48 01 d8             	add    rax,rbx
ffff800000802c30:	ff d0                	call   rax
ffff800000802c32:	48 98                	cdqe   
ffff800000802c34:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:376
    comprintf("pmalloc():%l\n",ret);
ffff800000802c38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802c3c:	48 89 c6             	mov    rsi,rax
ffff800000802c3f:	48 b8 78 d6 ff ff ff 	movabs rax,0xffffffffffffd678
ffff800000802c46:	ff ff ff 
ffff800000802c49:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802c4d:	48 89 c7             	mov    rdi,rax
ffff800000802c50:	49 89 df             	mov    r15,rbx
ffff800000802c53:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802c58:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff800000802c5f:	ff ff ff 
ffff800000802c62:	48 01 da             	add    rdx,rbx
ffff800000802c65:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:377
    return ret;
ffff800000802c67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:378
}
ffff800000802c6b:	48 83 c4 10          	add    rsp,0x10
ffff800000802c6f:	5b                   	pop    rbx
ffff800000802c70:	41 5f                	pop    r15
ffff800000802c72:	5d                   	pop    rbp
ffff800000802c73:	c3                   	ret    

ffff800000802c74 <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:379
int free_page(char *paddr){
ffff800000802c74:	f3 0f 1e fa          	endbr64 
ffff800000802c78:	55                   	push   rbp
ffff800000802c79:	48 89 e5             	mov    rbp,rsp
ffff800000802c7c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802c7c <free_page+0x8>
ffff800000802c83:	49 bb 7c ae 11 00 00 	movabs r11,0x11ae7c
ffff800000802c8a:	00 00 00 
ffff800000802c8d:	4c 01 da             	add    rdx,r11
ffff800000802c90:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:380
    int num=(int)paddr/4096;
ffff800000802c94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802c98:	8d 88 ff 0f 00 00    	lea    ecx,[rax+0xfff]
ffff800000802c9e:	85 c0                	test   eax,eax
ffff800000802ca0:	0f 48 c1             	cmovs  eax,ecx
ffff800000802ca3:	c1 f8 0c             	sar    eax,0xc
ffff800000802ca6:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:381
    int n=num/32;
ffff800000802ca9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802cac:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802caf:	85 c0                	test   eax,eax
ffff800000802cb1:	0f 48 c1             	cmovs  eax,ecx
ffff800000802cb4:	c1 f8 05             	sar    eax,0x5
ffff800000802cb7:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:382
    int r=num%32;
ffff800000802cba:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802cbd:	89 c1                	mov    ecx,eax
ffff800000802cbf:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802cc2:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802cc5:	01 c8                	add    eax,ecx
ffff800000802cc7:	83 e0 1f             	and    eax,0x1f
ffff800000802cca:	29 c8                	sub    eax,ecx
ffff800000802ccc:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:383
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
ffff800000802ccf:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802cd6:	ff ff ff 
ffff800000802cd9:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802cdd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802ce0:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802ce3:	48 98                	cdqe   
ffff800000802ce5:	48 c1 e0 02          	shl    rax,0x2
ffff800000802ce9:	48 01 c8             	add    rax,rcx
ffff800000802cec:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802cee:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802cf1:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802cf6:	89 c1                	mov    ecx,eax
ffff800000802cf8:	d3 e7                	shl    edi,cl
ffff800000802cfa:	89 f8                	mov    eax,edi
ffff800000802cfc:	f7 d0                	not    eax
ffff800000802cfe:	89 c1                	mov    ecx,eax
ffff800000802d00:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802d07:	ff ff ff 
ffff800000802d0a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802d0e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802d11:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802d14:	48 98                	cdqe   
ffff800000802d16:	48 c1 e0 02          	shl    rax,0x2
ffff800000802d1a:	48 01 d0             	add    rax,rdx
ffff800000802d1d:	21 ce                	and    esi,ecx
ffff800000802d1f:	89 f2                	mov    edx,esi
ffff800000802d21:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:384
}
ffff800000802d23:	90                   	nop
ffff800000802d24:	5d                   	pop    rbp
ffff800000802d25:	c3                   	ret    

ffff800000802d26 <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:386

int free_pages_at(int base,int pgn){
ffff800000802d26:	f3 0f 1e fa          	endbr64 
ffff800000802d2a:	55                   	push   rbp
ffff800000802d2b:	48 89 e5             	mov    rbp,rsp
ffff800000802d2e:	41 57                	push   r15
ffff800000802d30:	53                   	push   rbx
ffff800000802d31:	48 83 ec 20          	sub    rsp,0x20
ffff800000802d35:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802d35 <free_pages_at+0xf>
ffff800000802d3c:	49 bb c3 ad 11 00 00 	movabs r11,0x11adc3
ffff800000802d43:	00 00 00 
ffff800000802d46:	4c 01 db             	add    rbx,r11
ffff800000802d49:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000802d4c:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387
    for(int i=0;i<pgn;i++){
ffff800000802d4f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802d56:	eb 28                	jmp    ffff800000802d80 <free_pages_at+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:388 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
ffff800000802d58:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802d5b:	c1 e0 0c             	shl    eax,0xc
ffff800000802d5e:	89 c2                	mov    edx,eax
ffff800000802d60:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802d63:	01 d0                	add    eax,edx
ffff800000802d65:	48 98                	cdqe   
ffff800000802d67:	48 89 c7             	mov    rdi,rax
ffff800000802d6a:	49 89 df             	mov    r15,rbx
ffff800000802d6d:	48 b8 7c 51 ee ff ff 	movabs rax,0xffffffffffee517c
ffff800000802d74:	ff ff ff 
ffff800000802d77:	48 01 d8             	add    rax,rbx
ffff800000802d7a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387 (discriminator 3)
    for(int i=0;i<pgn;i++){
ffff800000802d7c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387 (discriminator 1)
ffff800000802d80:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802d83:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000802d86:	7c d0                	jl     ffff800000802d58 <free_pages_at+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390
    }
}
ffff800000802d88:	90                   	nop
ffff800000802d89:	48 83 c4 20          	add    rsp,0x20
ffff800000802d8d:	5b                   	pop    rbx
ffff800000802d8e:	41 5f                	pop    r15
ffff800000802d90:	5d                   	pop    rbp
ffff800000802d91:	c3                   	ret    

ffff800000802d92 <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:391
int check_page(int num){
ffff800000802d92:	f3 0f 1e fa          	endbr64 
ffff800000802d96:	55                   	push   rbp
ffff800000802d97:	48 89 e5             	mov    rbp,rsp
ffff800000802d9a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802d9a <check_page+0x8>
ffff800000802da1:	49 bb 5e ad 11 00 00 	movabs r11,0x11ad5e
ffff800000802da8:	00 00 00 
ffff800000802dab:	4c 01 da             	add    rdx,r11
ffff800000802dae:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:392
    int n=num/32;
ffff800000802db1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802db4:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802db7:	85 c0                	test   eax,eax
ffff800000802db9:	0f 48 c1             	cmovs  eax,ecx
ffff800000802dbc:	c1 f8 05             	sar    eax,0x5
ffff800000802dbf:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:393
    int r=num%32;
ffff800000802dc2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802dc5:	89 c1                	mov    ecx,eax
ffff800000802dc7:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802dca:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802dcd:	01 c8                	add    eax,ecx
ffff800000802dcf:	83 e0 1f             	and    eax,0x1f
ffff800000802dd2:	29 c8                	sub    eax,ecx
ffff800000802dd4:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:394
    int bit=page_map[n]&(1<<r);
ffff800000802dd7:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802dde:	ff ff ff 
ffff800000802de1:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802de5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802de8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802deb:	48 98                	cdqe   
ffff800000802ded:	48 c1 e0 02          	shl    rax,0x2
ffff800000802df1:	48 01 d0             	add    rax,rdx
ffff800000802df4:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802df6:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802df9:	be 01 00 00 00       	mov    esi,0x1
ffff800000802dfe:	89 c1                	mov    ecx,eax
ffff800000802e00:	d3 e6                	shl    esi,cl
ffff800000802e02:	89 f0                	mov    eax,esi
ffff800000802e04:	21 d0                	and    eax,edx
ffff800000802e06:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:395
    return bit;
ffff800000802e09:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:396
}
ffff800000802e0c:	5d                   	pop    rbp
ffff800000802e0d:	c3                   	ret    

ffff800000802e0e <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:400
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
ffff800000802e0e:	f3 0f 1e fa          	endbr64 
ffff800000802e12:	55                   	push   rbp
ffff800000802e13:	48 89 e5             	mov    rbp,rsp
ffff800000802e16:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802e16 <get_phyaddr+0x8>
ffff800000802e1d:	49 bb e2 ac 11 00 00 	movabs r11,0x11ace2
ffff800000802e24:	00 00 00 
ffff800000802e27:	4c 01 d8             	add    rax,r11
ffff800000802e2a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:401
    if(num==-1)return -1;
ffff800000802e2d:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
ffff800000802e31:	75 07                	jne    ffff800000802e3a <get_phyaddr+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:401 (discriminator 1)
ffff800000802e33:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000802e38:	eb 06                	jmp    ffff800000802e40 <get_phyaddr+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:402
    return num*0x1000;
ffff800000802e3a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802e3d:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:403
}
ffff800000802e40:	5d                   	pop    rbp
ffff800000802e41:	c3                   	ret    

ffff800000802e42 <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:406

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
ffff800000802e42:	f3 0f 1e fa          	endbr64 
ffff800000802e46:	55                   	push   rbp
ffff800000802e47:	48 89 e5             	mov    rbp,rsp
ffff800000802e4a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802e4a <set_page_item+0x8>
ffff800000802e51:	49 bb ae ac 11 00 00 	movabs r11,0x11acae
ffff800000802e58:	00 00 00 
ffff800000802e5b:	4c 01 d8             	add    rax,r11
ffff800000802e5e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000802e62:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000802e65:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:407
    *item_addr=0;
ffff800000802e68:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e6c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:408
    *item_addr|=phy_addr&0xfffff000;
ffff800000802e73:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e77:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e7a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802e7d:	89 c0                	mov    eax,eax
ffff800000802e7f:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000802e84:	48 09 c2             	or     rdx,rax
ffff800000802e87:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e8b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:409
    *item_addr|=attr;
ffff800000802e8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e92:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e95:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffff800000802e98:	48 98                	cdqe   
ffff800000802e9a:	48 09 c2             	or     rdx,rax
ffff800000802e9d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802ea1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:410
}
ffff800000802ea4:	90                   	nop
ffff800000802ea5:	5d                   	pop    rbp
ffff800000802ea6:	c3                   	ret    

ffff800000802ea7 <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:412
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
ffff800000802ea7:	f3 0f 1e fa          	endbr64 
ffff800000802eab:	55                   	push   rbp
ffff800000802eac:	48 89 e5             	mov    rbp,rsp
ffff800000802eaf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802eaf <set_1gb_pdpt+0x8>
ffff800000802eb6:	49 bb 49 ac 11 00 00 	movabs r11,0x11ac49
ffff800000802ebd:	00 00 00 
ffff800000802ec0:	4c 01 d8             	add    rax,r11
ffff800000802ec3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802ec7:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802eca:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:413
    *ppdpt=0;
ffff800000802ecd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802ed1:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:414
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
ffff800000802ed8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802edc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802edf:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802ee2:	0c 81                	or     al,0x81
ffff800000802ee4:	89 c0                	mov    eax,eax
ffff800000802ee6:	48 09 c2             	or     rdx,rax
ffff800000802ee9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802eed:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:415
    unsigned int hipa=pa&0xffffc0000000ul;
ffff800000802ef0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802ef3:	25 00 00 00 c0       	and    eax,0xc0000000
ffff800000802ef8:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:416
    *ppdpt|=hipa;
ffff800000802efb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802eff:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f02:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802f05:	48 09 c2             	or     rdx,rax
ffff800000802f08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f0c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:417
}
ffff800000802f0f:	90                   	nop
ffff800000802f10:	5d                   	pop    rbp
ffff800000802f11:	c3                   	ret    

ffff800000802f12 <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:419
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
ffff800000802f12:	f3 0f 1e fa          	endbr64 
ffff800000802f16:	55                   	push   rbp
ffff800000802f17:	48 89 e5             	mov    rbp,rsp
ffff800000802f1a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802f1a <set_2mb_pde+0x8>
ffff800000802f21:	49 bb de ab 11 00 00 	movabs r11,0x11abde
ffff800000802f28:	00 00 00 
ffff800000802f2b:	4c 01 d8             	add    rax,r11
ffff800000802f2e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802f32:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802f35:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:420
    *pde=0;
ffff800000802f38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f3c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:421
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
ffff800000802f43:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f47:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f4a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802f4d:	0d 81 10 00 00       	or     eax,0x1081
ffff800000802f52:	48 98                	cdqe   
ffff800000802f54:	48 09 c2             	or     rdx,rax
ffff800000802f57:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f5b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:422
    unsigned int hipa=pa&0xffc00000;
ffff800000802f5e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802f61:	25 00 00 c0 ff       	and    eax,0xffc00000
ffff800000802f66:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:423
    *pde|=hipa;
ffff800000802f69:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f6d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f70:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802f73:	48 09 c2             	or     rdx,rax
ffff800000802f76:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f7a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:424
}
ffff800000802f7d:	90                   	nop
ffff800000802f7e:	5d                   	pop    rbp
ffff800000802f7f:	c3                   	ret    

ffff800000802f80 <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:445
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
ffff800000802f80:	f3 0f 1e fa          	endbr64 
ffff800000802f84:	55                   	push   rbp
ffff800000802f85:	48 89 e5             	mov    rbp,rsp
ffff800000802f88:	41 57                	push   r15
ffff800000802f8a:	53                   	push   rbx
ffff800000802f8b:	48 83 ec 20          	sub    rsp,0x20
ffff800000802f8f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802f8f <req_page_at+0xf>
ffff800000802f96:	49 bb 69 ab 11 00 00 	movabs r11,0x11ab69
ffff800000802f9d:	00 00 00 
ffff800000802fa0:	4c 01 db             	add    rbx,r11
ffff800000802fa3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802fa7:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:446
    if(base==0)//不指定地址
ffff800000802faa:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000802faf:	75 32                	jne    ffff800000802fe3 <req_page_at+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:448
    {
        return get_phyaddr(req_a_page());
ffff800000802fb1:	49 89 df             	mov    r15,rbx
ffff800000802fb4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802fb9:	48 ba 29 4f ee ff ff 	movabs rdx,0xffffffffffee4f29
ffff800000802fc0:	ff ff ff 
ffff800000802fc3:	48 01 da             	add    rdx,rbx
ffff800000802fc6:	ff d2                	call   rdx
ffff800000802fc8:	89 c7                	mov    edi,eax
ffff800000802fca:	49 89 df             	mov    r15,rbx
ffff800000802fcd:	48 b8 16 53 ee ff ff 	movabs rax,0xffffffffffee5316
ffff800000802fd4:	ff ff ff 
ffff800000802fd7:	48 01 d8             	add    rax,rbx
ffff800000802fda:	ff d0                	call   rax
ffff800000802fdc:	48 98                	cdqe   
ffff800000802fde:	e9 c6 00 00 00       	jmp    ffff8000008030a9 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
ffff800000802fe3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802fe7:	89 c2                	mov    edx,eax
ffff800000802fe9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000802fec:	89 c6                	mov    esi,eax
ffff800000802fee:	89 d7                	mov    edi,edx
ffff800000802ff0:	49 89 df             	mov    r15,rbx
ffff800000802ff3:	48 b8 8b 56 ee ff ff 	movabs rax,0xffffffffffee568b
ffff800000802ffa:	ff ff ff 
ffff800000802ffd:	48 01 d8             	add    rax,rbx
ffff800000803000:	ff d0                	call   rax
ffff800000803002:	85 c0                	test   eax,eax
ffff800000803004:	75 0c                	jne    ffff800000803012 <req_page_at+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450 (discriminator 1)
ffff800000803006:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080300d:	e9 97 00 00 00       	jmp    ffff8000008030a9 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:451
    int pgni=base/4096;
ffff800000803012:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803016:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080301a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:452
    int pgi=pgni/32;
ffff80000080301d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803020:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000803023:	85 c0                	test   eax,eax
ffff800000803025:	0f 48 c2             	cmovs  eax,edx
ffff800000803028:	c1 f8 05             	sar    eax,0x5
ffff80000080302b:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453
    int pgj=pgni%32;
ffff80000080302e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803031:	99                   	cdq    
ffff800000803032:	c1 ea 1b             	shr    edx,0x1b
ffff800000803035:	01 d0                	add    eax,edx
ffff800000803037:	83 e0 1f             	and    eax,0x1f
ffff80000080303a:	29 d0                	sub    eax,edx
ffff80000080303c:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454
    for(int i=0;i<pgn;i++)
ffff80000080303f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803046:	eb 54                	jmp    ffff80000080309c <req_page_at+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
ffff800000803048:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080304f:	ff ff ff 
ffff800000803052:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803056:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803059:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080305c:	48 98                	cdqe   
ffff80000080305e:	48 c1 e0 02          	shl    rax,0x2
ffff800000803062:	48 01 d0             	add    rax,rdx
ffff800000803065:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000803067:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080306a:	be 01 00 00 00       	mov    esi,0x1
ffff80000080306f:	89 c1                	mov    ecx,eax
ffff800000803071:	d3 e6                	shl    esi,cl
ffff800000803073:	89 f0                	mov    eax,esi
ffff800000803075:	89 c6                	mov    esi,eax
ffff800000803077:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080307e:	ff ff ff 
ffff800000803081:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803085:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803088:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080308b:	48 98                	cdqe   
ffff80000080308d:	48 c1 e0 02          	shl    rax,0x2
ffff800000803091:	48 01 c8             	add    rax,rcx
ffff800000803094:	09 f2                	or     edx,esi
ffff800000803096:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454 (discriminator 3)
    for(int i=0;i<pgn;i++)
ffff800000803098:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454 (discriminator 1)
ffff80000080309c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080309f:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008030a2:	7c a4                	jl     ffff800000803048 <req_page_at+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:458
    }
    return 0;
ffff8000008030a4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:460

}
ffff8000008030a9:	48 83 c4 20          	add    rsp,0x20
ffff8000008030ad:	5b                   	pop    rbx
ffff8000008030ae:	41 5f                	pop    r15
ffff8000008030b0:	5d                   	pop    rbp
ffff8000008030b1:	c3                   	ret    

ffff8000008030b2 <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:462
int chk_vm(int base, int pgn)
{
ffff8000008030b2:	f3 0f 1e fa          	endbr64 
ffff8000008030b6:	55                   	push   rbp
ffff8000008030b7:	48 89 e5             	mov    rbp,rsp
ffff8000008030ba:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008030ba <chk_vm+0x8>
ffff8000008030c1:	49 bb 3e aa 11 00 00 	movabs r11,0x11aa3e
ffff8000008030c8:	00 00 00 
ffff8000008030cb:	4c 01 d8             	add    rax,r11
ffff8000008030ce:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff8000008030d1:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463
    int *pdet=0;
ffff8000008030d4:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff8000008030db:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:464
    asm volatile("mov %%cr3,%0":"=r"(pdet));
ffff8000008030dc:	0f 20 d8             	mov    rax,cr3
ffff8000008030df:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
ffff8000008030e3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008030e6:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff8000008030ec:	85 c0                	test   eax,eax
ffff8000008030ee:	0f 48 c2             	cmovs  eax,edx
ffff8000008030f1:	c1 f8 15             	sar    eax,0x15
ffff8000008030f4:	48 98                	cdqe   
ffff8000008030f6:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff8000008030fd:	00 
ffff8000008030fe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803102:	48 01 d0             	add    rax,rdx
ffff800000803105:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803107:	89 c0                	mov    eax,eax
ffff800000803109:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff80000080310e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000803112:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803115:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff80000080311b:	85 c0                	test   eax,eax
ffff80000080311d:	0f 48 c2             	cmovs  eax,edx
ffff800000803120:	c1 f8 15             	sar    eax,0x15
ffff800000803123:	48 98                	cdqe   
ffff800000803125:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080312c:	00 
ffff80000080312d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803131:	48 01 d0             	add    rax,rdx
ffff800000803134:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803136:	83 e0 01             	and    eax,0x1
ffff800000803139:	85 c0                	test   eax,eax
ffff80000080313b:	74 38                	je     ffff800000803175 <chk_vm+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
ffff80000080313d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803140:	99                   	cdq    
ffff800000803141:	c1 ea 0b             	shr    edx,0xb
ffff800000803144:	01 d0                	add    eax,edx
ffff800000803146:	25 ff ff 1f 00       	and    eax,0x1fffff
ffff80000080314b:	29 d0                	sub    eax,edx
ffff80000080314d:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000803153:	85 c0                	test   eax,eax
ffff800000803155:	0f 48 c2             	cmovs  eax,edx
ffff800000803158:	c1 f8 0c             	sar    eax,0xc
ffff80000080315b:	48 98                	cdqe   
ffff80000080315d:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803164:	00 
ffff800000803165:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803169:	48 01 d0             	add    rax,rdx
ffff80000080316c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080316e:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000803171:	85 c0                	test   eax,eax
ffff800000803173:	75 07                	jne    ffff80000080317c <chk_vm+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:469
    {
        return -1;
ffff800000803175:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080317a:	eb 05                	jmp    ffff800000803181 <chk_vm+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:471
    }
    return 0;
ffff80000080317c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:472
}
ffff800000803181:	5d                   	pop    rbp
ffff800000803182:	c3                   	ret    

ffff800000803183 <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:475
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
ffff800000803183:	f3 0f 1e fa          	endbr64 
ffff800000803187:	55                   	push   rbp
ffff800000803188:	48 89 e5             	mov    rbp,rsp
ffff80000080318b:	41 57                	push   r15
ffff80000080318d:	53                   	push   rbx
ffff80000080318e:	48 83 ec 20          	sub    rsp,0x20
ffff800000803192:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803192 <is_pgs_ava+0xf>
ffff800000803199:	49 bb 66 a9 11 00 00 	movabs r11,0x11a966
ffff8000008031a0:	00 00 00 
ffff8000008031a3:	4c 01 db             	add    rbx,r11
ffff8000008031a6:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008031a9:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:476
    int pgi=base/4096;
ffff8000008031ac:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008031af:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008031b5:	85 c0                	test   eax,eax
ffff8000008031b7:	0f 48 c2             	cmovs  eax,edx
ffff8000008031ba:	c1 f8 0c             	sar    eax,0xc
ffff8000008031bd:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477
    for(int i=0;i<pgn;i++)
ffff8000008031c0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008031c7:	eb 2b                	jmp    ffff8000008031f4 <is_pgs_ava+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479
    {
        if(check_page(pgi+i)!=0)return 0;
ffff8000008031c9:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008031cc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008031cf:	01 d0                	add    eax,edx
ffff8000008031d1:	89 c7                	mov    edi,eax
ffff8000008031d3:	49 89 df             	mov    r15,rbx
ffff8000008031d6:	48 b8 9a 52 ee ff ff 	movabs rax,0xffffffffffee529a
ffff8000008031dd:	ff ff ff 
ffff8000008031e0:	48 01 d8             	add    rax,rbx
ffff8000008031e3:	ff d0                	call   rax
ffff8000008031e5:	85 c0                	test   eax,eax
ffff8000008031e7:	74 07                	je     ffff8000008031f0 <is_pgs_ava+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479 (discriminator 1)
ffff8000008031e9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008031ee:	eb 11                	jmp    ffff800000803201 <is_pgs_ava+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477 (discriminator 2)
    for(int i=0;i<pgn;i++)
ffff8000008031f0:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477 (discriminator 1)
ffff8000008031f4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008031f7:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff8000008031fa:	7c cd                	jl     ffff8000008031c9 <is_pgs_ava+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481
    }
    return 1;
ffff8000008031fc:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:483

}
ffff800000803201:	48 83 c4 20          	add    rsp,0x20
ffff800000803205:	5b                   	pop    rbx
ffff800000803206:	41 5f                	pop    r15
ffff800000803208:	5d                   	pop    rbp
ffff800000803209:	c3                   	ret    

ffff80000080320a <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:24
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
ffff80000080320a:	f3 0f 1e fa          	endbr64 
ffff80000080320e:	55                   	push   rbp
ffff80000080320f:	48 89 e5             	mov    rbp,rsp
ffff800000803212:	41 57                	push   r15
ffff800000803214:	48 81 ec 88 00 00 00 	sub    rsp,0x88
ffff80000080321b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080321b <make_dentry+0x11>
ffff800000803222:	49 bb dd a8 11 00 00 	movabs r11,0x11a8dd
ffff800000803229:	00 00 00 
ffff80000080322c:	4c 01 d8             	add    rax,r11
ffff80000080322f:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000803233:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff800000803237:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
ffff80000080323a:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff80000080323e:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:25
    strcpy(d->name,name);
ffff800000803245:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff800000803249:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080324c:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
ffff800000803250:	48 89 ce             	mov    rsi,rcx
ffff800000803253:	48 89 d7             	mov    rdi,rdx
ffff800000803256:	49 89 c7             	mov    r15,rax
ffff800000803259:	48 ba 70 51 ef ff ff 	movabs rdx,0xffffffffffef5170
ffff800000803260:	ff ff ff 
ffff800000803263:	48 01 c2             	add    rdx,rax
ffff800000803266:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:26
    d->name_length=namelen;
ffff800000803268:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080326c:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
ffff80000080326f:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:28
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
ffff800000803272:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803276:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080327d:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:29
    list_init(&d->subdirs_list);
ffff800000803281:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803285:	48 83 c0 28          	add    rax,0x28
ffff800000803289:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    struct List * next;
};

__attribute__((always_inline)) inline void list_init(struct List * list)
{
    list->prev = NULL;
ffff80000080328d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803291:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000803298:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080329c:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008032a3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008032a4:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:30
    list_init(&d->child_node);
ffff8000008032a5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032a9:	48 83 c0 10          	add    rax,0x10
ffff8000008032ad:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008032b1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008032b5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008032bc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008032c0:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008032c7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008032c8:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:31
    d->child_node.data=d;
ffff8000008032c9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032cd:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff8000008032d1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:32
    d->parent=parent;
ffff8000008032d5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032d9:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008032dd:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:33
    list_add(&parent->subdirs_list,&d->child_node);
ffff8000008032e1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032e5:	48 83 c0 10          	add    rax,0x10
ffff8000008032e9:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008032ed:	48 83 c2 28          	add    rdx,0x28
ffff8000008032f1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008032f5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
        new->next->prev = new;
    // entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    if(entry->next==NULL)
ffff8000008032f9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008032fd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803301:	48 85 c0             	test   rax,rax
ffff800000803304:	75 50                	jne    ffff800000803356 <make_dentry+0x14c>
ffff800000803306:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080330a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff80000080330e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803312:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803316:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080331a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080331e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803322:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803326:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080332a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080332e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000803331:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803335:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803339:	48 85 c0             	test   rax,rax
ffff80000080333c:	0f 84 a3 00 00 00    	je     ffff8000008033e5 <make_dentry+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000803342:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803346:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080334a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080334e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000803351:	e9 8f 00 00 00       	jmp    ffff8000008033e5 <make_dentry+0x1db>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        list_add_to_behind(entry,new);
    else{
        struct List* p=entry;
ffff800000803356:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080335a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080335e:	eb 21                	jmp    ffff800000803381 <make_dentry+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff800000803360:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803364:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000803368:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080336c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803370:	48 39 c2             	cmp    rdx,rax
ffff800000803373:	74 73                	je     ffff8000008033e8 <make_dentry+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000803375:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803379:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080337d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff800000803381:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803385:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803389:	48 85 c0             	test   rax,rax
ffff80000080338c:	74 0e                	je     ffff80000080339c <make_dentry+0x192>
ffff80000080338e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803392:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803396:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff80000080339a:	75 c4                	jne    ffff800000803360 <make_dentry+0x156>
ffff80000080339c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008033a0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffff8000008033a4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008033a8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008033ac:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008033b0:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008033b4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033b8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008033bc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033c0:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008033c4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008033c7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033cb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008033cf:	48 85 c0             	test   rax,rax
ffff8000008033d2:	74 17                	je     ffff8000008033eb <make_dentry+0x1e1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008033d4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033d8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008033dc:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008033e0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008033e3:	eb 06                	jmp    ffff8000008033eb <make_dentry+0x1e1>
ffff8000008033e5:	90                   	nop
ffff8000008033e6:	eb 04                	jmp    ffff8000008033ec <make_dentry+0x1e2>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff8000008033e8:	90                   	nop
ffff8000008033e9:	eb 01                	jmp    ffff8000008033ec <make_dentry+0x1e2>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008033eb:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
}
ffff8000008033ec:	90                   	nop
ffff8000008033ed:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008033f1:	c9                   	leave  
ffff8000008033f2:	c3                   	ret    

ffff8000008033f3 <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,struct super_block* sb){
ffff8000008033f3:	f3 0f 1e fa          	endbr64 
ffff8000008033f7:	55                   	push   rbp
ffff8000008033f8:	48 89 e5             	mov    rbp,rsp
ffff8000008033fb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008033fb <make_inode+0x8>
ffff800000803402:	49 bb fd a6 11 00 00 	movabs r11,0x11a6fd
ffff800000803409:	00 00 00 
ffff80000080340c:	4c 01 d8             	add    rax,r11
ffff80000080340f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000803413:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000803417:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080341b:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080341f:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
    i->f_ops=fops;
ffff800000803423:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803427:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080342b:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:37
    i->attribute=attr;
ffff80000080342f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803433:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803437:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    i->sb=sb;
ffff80000080343b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080343f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000803443:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    i->file_size=0;
ffff800000803447:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080344b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    i->inode_ops=iops;
ffff800000803452:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803456:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080345a:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
}
ffff80000080345e:	90                   	nop
ffff80000080345f:	5d                   	pop    rbp
ffff800000803460:	c3                   	ret    

ffff800000803461 <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* ddev,struct file_operations* fops){
ffff800000803461:	f3 0f 1e fa          	endbr64 
ffff800000803465:	55                   	push   rbp
ffff800000803466:	48 89 e5             	mov    rbp,rsp
ffff800000803469:	41 57                	push   r15
ffff80000080346b:	41 54                	push   r12
ffff80000080346d:	53                   	push   rbx
ffff80000080346e:	48 83 ec 78          	sub    rsp,0x78
ffff800000803472:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803472 <make_devf+0x11>
ffff800000803479:	49 bb 86 a6 11 00 00 	movabs r11,0x11a686
ffff800000803480:	00 00 00 
ffff800000803483:	4c 01 db             	add    rbx,r11
ffff800000803486:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080348a:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff80000080348e:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff800000803492:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff800000803496:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:43
    make_dentry(d,name, strlen(name),root_sb->root,&dev_dir_dops);
ffff80000080349d:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008034a4:	ff ff ff 
ffff8000008034a7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008034ab:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008034ae:	4c 8b 20             	mov    r12,QWORD PTR [rax]
ffff8000008034b1:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008034b5:	48 89 c7             	mov    rdi,rax
ffff8000008034b8:	49 89 df             	mov    r15,rbx
ffff8000008034bb:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff8000008034c2:	ff ff ff 
ffff8000008034c5:	48 01 d8             	add    rax,rbx
ffff8000008034c8:	ff d0                	call   rax
ffff8000008034ca:	89 c2                	mov    edx,eax
ffff8000008034cc:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff8000008034d0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008034d4:	48 b9 c0 ff ff ff ff 	movabs rcx,0xffffffffffffffc0
ffff8000008034db:	ff ff ff 
ffff8000008034de:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff8000008034e2:	49 89 c8             	mov    r8,rcx
ffff8000008034e5:	4c 89 e1             	mov    rcx,r12
ffff8000008034e8:	48 89 c7             	mov    rdi,rax
ffff8000008034eb:	49 89 df             	mov    r15,rbx
ffff8000008034ee:	48 b8 12 57 ee ff ff 	movabs rax,0xffffffffffee5712
ffff8000008034f5:	ff ff ff 
ffff8000008034f8:	48 01 d8             	add    rax,rbx
ffff8000008034fb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:44
    d->dir_inode=i;
ffff8000008034fd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803501:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff800000803505:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:45
    make_inode(i,ddev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
ffff800000803509:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803510:	ff ff ff 
ffff800000803513:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803517:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080351a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080351e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803522:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff800000803526:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080352d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000803531:	49 89 c8             	mov    r8,rcx
ffff800000803534:	b9 04 00 00 00       	mov    ecx,0x4
ffff800000803539:	48 89 c7             	mov    rdi,rax
ffff80000080353c:	49 89 df             	mov    r15,rbx
ffff80000080353f:	48 b8 fb 58 ee ff ff 	movabs rax,0xffffffffffee58fb
ffff800000803546:	ff ff ff 
ffff800000803549:	48 01 d8             	add    rax,rbx
ffff80000080354c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:46
    list_add(&ddev->subdirs_list,&d->child_node);//添加到/dev下
ffff80000080354e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803552:	48 83 c0 10          	add    rax,0x10
ffff800000803556:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080355a:	48 83 c2 28          	add    rdx,0x28
ffff80000080355e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000803562:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff800000803566:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080356a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080356e:	48 85 c0             	test   rax,rax
ffff800000803571:	75 50                	jne    ffff8000008035c3 <make_devf+0x162>
ffff800000803573:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803577:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff80000080357b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080357f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803583:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803587:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080358b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080358f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803593:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803597:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080359b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080359e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008035a2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035a6:	48 85 c0             	test   rax,rax
ffff8000008035a9:	0f 84 a3 00 00 00    	je     ffff800000803652 <make_devf+0x1f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008035af:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008035b3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035b7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008035bb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008035be:	e9 8f 00 00 00       	jmp    ffff800000803652 <make_devf+0x1f1>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff8000008035c3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008035c7:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008035cb:	eb 21                	jmp    ffff8000008035ee <make_devf+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff8000008035cd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008035d1:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008035d5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008035d9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008035dd:	48 39 c2             	cmp    rdx,rax
ffff8000008035e0:	74 73                	je     ffff800000803655 <make_devf+0x1f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008035e2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008035e6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035ea:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff8000008035ee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008035f2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035f6:	48 85 c0             	test   rax,rax
ffff8000008035f9:	74 0e                	je     ffff800000803609 <make_devf+0x1a8>
ffff8000008035fb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008035ff:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803603:	48 39 45 b8          	cmp    QWORD PTR [rbp-0x48],rax
ffff800000803607:	75 c4                	jne    ffff8000008035cd <make_devf+0x16c>
ffff800000803609:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080360d:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff800000803611:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803615:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803619:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080361d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000803621:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803625:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803629:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080362d:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000803631:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000803634:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803638:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080363c:	48 85 c0             	test   rax,rax
ffff80000080363f:	74 17                	je     ffff800000803658 <make_devf+0x1f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000803641:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803645:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803649:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080364d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000803650:	eb 06                	jmp    ffff800000803658 <make_devf+0x1f7>
ffff800000803652:	90                   	nop
ffff800000803653:	eb 04                	jmp    ffff800000803659 <make_devf+0x1f8>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff800000803655:	90                   	nop
ffff800000803656:	eb 01                	jmp    ffff800000803659 <make_devf+0x1f8>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000803658:	90                   	nop
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
}
ffff800000803659:	90                   	nop
ffff80000080365a:	48 83 c4 78          	add    rsp,0x78
ffff80000080365e:	5b                   	pop    rbx
ffff80000080365f:	41 5c                	pop    r12
ffff800000803661:	41 5f                	pop    r15
ffff800000803663:	5d                   	pop    rbp
ffff800000803664:	c3                   	ret    

ffff800000803665 <init_devfs>:
init_devfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
struct dir_entry* ddev=NULL,*dmnt,*dconsole,*dhd0,*dtty,*dramdisk;
struct file ftty;
int init_devfs()
{
ffff800000803665:	f3 0f 1e fa          	endbr64 
ffff800000803669:	55                   	push   rbp
ffff80000080366a:	48 89 e5             	mov    rbp,rsp
ffff80000080366d:	41 57                	push   r15
ffff80000080366f:	53                   	push   rbx
ffff800000803670:	48 83 ec 30          	sub    rsp,0x30
ffff800000803674:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803674 <init_devfs+0xf>
ffff80000080367b:	49 bb 84 a4 11 00 00 	movabs r11,0x11a484
ffff800000803682:	00 00 00 
ffff800000803685:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:57
    //创建dev文件夹
    ddev=(struct dir_entry*) kmalloc();
ffff800000803688:	49 89 df             	mov    r15,rbx
ffff80000080368b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803690:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000803697:	ff ff ff 
ffff80000080369a:	48 01 da             	add    rdx,rbx
ffff80000080369d:	ff d2                	call   rdx
ffff80000080369f:	48 89 c2             	mov    rdx,rax
ffff8000008036a2:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008036a9:	ff ff ff 
ffff8000008036ac:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036b0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:58
    struct index_node* idev=ddev+1;
ffff8000008036b3:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008036ba:	ff ff ff 
ffff8000008036bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036c1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036c4:	48 83 c0 58          	add    rax,0x58
ffff8000008036c8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:59
    ddev->name=idev+1;
ffff8000008036cc:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008036d3:	ff ff ff 
ffff8000008036d6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036da:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036dd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008036e1:	48 83 c2 40          	add    rdx,0x40
ffff8000008036e5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:60
    make_dentry(ddev,"dev",3,root_sb->root,root_sb->root->dir_ops);
ffff8000008036e8:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008036ef:	ff ff ff 
ffff8000008036f2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036fc:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff800000803700:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803707:	ff ff ff 
ffff80000080370a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080370e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803711:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803714:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080371b:	ff ff ff 
ffff80000080371e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803722:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803725:	49 89 c8             	mov    r8,rcx
ffff800000803728:	48 89 d1             	mov    rcx,rdx
ffff80000080372b:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803730:	48 be 86 d6 ff ff ff 	movabs rsi,0xffffffffffffd686
ffff800000803737:	ff ff ff 
ffff80000080373a:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff80000080373e:	48 89 c7             	mov    rdi,rax
ffff800000803741:	49 89 df             	mov    r15,rbx
ffff800000803744:	48 b8 12 57 ee ff ff 	movabs rax,0xffffffffffee5712
ffff80000080374b:	ff ff ff 
ffff80000080374e:	48 01 d8             	add    rax,rbx
ffff800000803751:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:61
    ddev->dir_inode=idev;
ffff800000803753:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080375a:	ff ff ff 
ffff80000080375d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803761:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803764:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803768:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:62
    make_inode(idev,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff80000080376c:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803773:	ff ff ff 
ffff800000803776:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080377a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080377d:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803784:	ff ff ff 
ffff800000803787:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080378b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080378e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803791:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803795:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000803799:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008037a0:	ff ff ff 
ffff8000008037a3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008037a7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037ad:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008037b1:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008037b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008037b9:	49 89 c8             	mov    r8,rcx
ffff8000008037bc:	b9 02 00 00 00       	mov    ecx,0x2
ffff8000008037c1:	48 89 c7             	mov    rdi,rax
ffff8000008037c4:	49 89 df             	mov    r15,rbx
ffff8000008037c7:	48 b8 fb 58 ee ff ff 	movabs rax,0xffffffffffee58fb
ffff8000008037ce:	ff ff ff 
ffff8000008037d1:	48 01 d8             	add    rax,rbx
ffff8000008037d4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:63
    idev->private_index_info=ddev;
ffff8000008037d6:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008037dd:	ff ff ff 
ffff8000008037e0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008037e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008037e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008037eb:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:66

    //创建mnt文件夹
    dmnt=(struct dir_entry*) kmalloc();
ffff8000008037ef:	49 89 df             	mov    r15,rbx
ffff8000008037f2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008037f7:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff8000008037fe:	ff ff ff 
ffff800000803801:	48 01 da             	add    rdx,rbx
ffff800000803804:	ff d2                	call   rdx
ffff800000803806:	48 89 c2             	mov    rdx,rax
ffff800000803809:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803810:	ff ff ff 
ffff800000803813:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803817:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:67
    struct index_node* imnt=dmnt+1;
ffff80000080381a:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803821:	ff ff ff 
ffff800000803824:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803828:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080382b:	48 83 c0 58          	add    rax,0x58
ffff80000080382f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
    dmnt->name=imnt+1;
ffff800000803833:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff80000080383a:	ff ff ff 
ffff80000080383d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803841:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803844:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803848:	48 83 c2 40          	add    rdx,0x40
ffff80000080384c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
ffff80000080384f:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803856:	ff ff ff 
ffff800000803859:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080385d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803860:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803863:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff800000803867:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080386e:	ff ff ff 
ffff800000803871:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803875:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803878:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080387b:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803882:	ff ff ff 
ffff800000803885:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803889:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080388c:	49 89 c8             	mov    r8,rcx
ffff80000080388f:	48 89 d1             	mov    rcx,rdx
ffff800000803892:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803897:	48 be 8a d6 ff ff ff 	movabs rsi,0xffffffffffffd68a
ffff80000080389e:	ff ff ff 
ffff8000008038a1:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff8000008038a5:	48 89 c7             	mov    rdi,rax
ffff8000008038a8:	49 89 df             	mov    r15,rbx
ffff8000008038ab:	48 b8 12 57 ee ff ff 	movabs rax,0xffffffffffee5712
ffff8000008038b2:	ff ff ff 
ffff8000008038b5:	48 01 d8             	add    rax,rbx
ffff8000008038b8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    dmnt->dir_inode=imnt;
ffff8000008038ba:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff8000008038c1:	ff ff ff 
ffff8000008038c4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038c8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038cb:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008038cf:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff8000008038d3:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008038da:	ff ff ff 
ffff8000008038dd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038e1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008038e4:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008038eb:	ff ff ff 
ffff8000008038ee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038f2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038f8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008038fc:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000803900:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803907:	ff ff ff 
ffff80000080390a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080390e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803911:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803914:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803918:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff80000080391c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803920:	49 89 c8             	mov    r8,rcx
ffff800000803923:	b9 02 00 00 00       	mov    ecx,0x2
ffff800000803928:	48 89 c7             	mov    rdi,rax
ffff80000080392b:	49 89 df             	mov    r15,rbx
ffff80000080392e:	48 b8 fb 58 ee ff ff 	movabs rax,0xffffffffffee58fb
ffff800000803935:	ff ff ff 
ffff800000803938:	48 01 d8             	add    rax,rbx
ffff80000080393b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    imnt->private_index_info=dmnt;
ffff80000080393d:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803944:	ff ff ff 
ffff800000803947:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080394b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080394e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803952:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77


    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc();
ffff800000803956:	49 89 df             	mov    r15,rbx
ffff800000803959:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080395e:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000803965:	ff ff ff 
ffff800000803968:	48 01 da             	add    rdx,rbx
ffff80000080396b:	ff d2                	call   rdx
ffff80000080396d:	48 89 c2             	mov    rdx,rax
ffff800000803970:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000803977:	ff ff ff 
ffff80000080397a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080397e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    struct index_node* iconsole=dconsole+1;
ffff800000803981:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000803988:	ff ff ff 
ffff80000080398b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080398f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803992:	48 83 c0 58          	add    rax,0x58
ffff800000803996:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    dconsole->name=iconsole+1;
ffff80000080399a:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff8000008039a1:	ff ff ff 
ffff8000008039a4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039a8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039ab:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008039af:	48 83 c2 40          	add    rdx,0x40
ffff8000008039b3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    make_devf(dconsole,iconsole,"console",ddev,&devfs_fops);
ffff8000008039b6:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008039bd:	ff ff ff 
ffff8000008039c0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039c4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008039c7:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff8000008039ce:	ff ff ff 
ffff8000008039d1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039d5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039d8:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff8000008039dc:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff8000008039e3:	ff ff ff 
ffff8000008039e6:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff8000008039ea:	49 89 c8             	mov    r8,rcx
ffff8000008039ed:	48 89 d1             	mov    rcx,rdx
ffff8000008039f0:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff8000008039f7:	ff ff ff 
ffff8000008039fa:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff8000008039fe:	48 89 c7             	mov    rdi,rax
ffff800000803a01:	49 89 df             	mov    r15,rbx
ffff800000803a04:	48 b8 69 59 ee ff ff 	movabs rax,0xffffffffffee5969
ffff800000803a0b:	ff ff ff 
ffff800000803a0e:	48 01 d8             	add    rax,rbx
ffff800000803a11:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:82
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc();
ffff800000803a13:	49 89 df             	mov    r15,rbx
ffff800000803a16:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803a1b:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000803a22:	ff ff ff 
ffff800000803a25:	48 01 da             	add    rdx,rbx
ffff800000803a28:	ff d2                	call   rdx
ffff800000803a2a:	48 89 c2             	mov    rdx,rax
ffff800000803a2d:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803a34:	ff ff ff 
ffff800000803a37:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a3b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:83
    struct index_node* ihd0=dhd0+1;
ffff800000803a3e:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803a45:	ff ff ff 
ffff800000803a48:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a4c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a4f:	48 83 c0 58          	add    rax,0x58
ffff800000803a53:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:84
    dhd0->name=ihd0+1;
ffff800000803a57:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803a5e:	ff ff ff 
ffff800000803a61:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a65:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a68:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803a6c:	48 83 c2 40          	add    rdx,0x40
ffff800000803a70:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:85
    make_devf(dhd0,ihd0,"hd0",ddev,&devfs_fops);
ffff800000803a73:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803a7a:	ff ff ff 
ffff800000803a7d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a81:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803a84:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803a8b:	ff ff ff 
ffff800000803a8e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a92:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a95:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000803a99:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff800000803aa0:	ff ff ff 
ffff800000803aa3:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803aa7:	49 89 c8             	mov    r8,rcx
ffff800000803aaa:	48 89 d1             	mov    rcx,rdx
ffff800000803aad:	48 ba 96 d6 ff ff ff 	movabs rdx,0xffffffffffffd696
ffff800000803ab4:	ff ff ff 
ffff800000803ab7:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803abb:	48 89 c7             	mov    rdi,rax
ffff800000803abe:	49 89 df             	mov    r15,rbx
ffff800000803ac1:	48 b8 69 59 ee ff ff 	movabs rax,0xffffffffffee5969
ffff800000803ac8:	ff ff ff 
ffff800000803acb:	48 01 d8             	add    rax,rbx
ffff800000803ace:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc();
ffff800000803ad0:	49 89 df             	mov    r15,rbx
ffff800000803ad3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803ad8:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000803adf:	ff ff ff 
ffff800000803ae2:	48 01 da             	add    rdx,rbx
ffff800000803ae5:	ff d2                	call   rdx
ffff800000803ae7:	48 89 c2             	mov    rdx,rax
ffff800000803aea:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803af1:	ff ff ff 
ffff800000803af4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803af8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    struct index_node* itty=dtty+1;
ffff800000803afb:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803b02:	ff ff ff 
ffff800000803b05:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b09:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b0c:	48 83 c0 58          	add    rax,0x58
ffff800000803b10:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:89
    dtty->name=itty+1;
ffff800000803b14:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803b1b:	ff ff ff 
ffff800000803b1e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b22:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b25:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000803b29:	48 83 c2 40          	add    rdx,0x40
ffff800000803b2d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:90
    make_devf(dtty,itty,"tty",ddev,&devfs_fops);
ffff800000803b30:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803b37:	ff ff ff 
ffff800000803b3a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b3e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b41:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803b48:	ff ff ff 
ffff800000803b4b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b4f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b52:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff800000803b56:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff800000803b5d:	ff ff ff 
ffff800000803b60:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803b64:	49 89 c8             	mov    r8,rcx
ffff800000803b67:	48 89 d1             	mov    rcx,rdx
ffff800000803b6a:	48 ba 9a d6 ff ff ff 	movabs rdx,0xffffffffffffd69a
ffff800000803b71:	ff ff ff 
ffff800000803b74:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803b78:	48 89 c7             	mov    rdi,rax
ffff800000803b7b:	49 89 df             	mov    r15,rbx
ffff800000803b7e:	48 b8 69 59 ee ff ff 	movabs rax,0xffffffffffee5969
ffff800000803b85:	ff ff ff 
ffff800000803b88:	48 01 d8             	add    rax,rbx
ffff800000803b8b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
    //初始化一下
    tty_fops.open(itty,&ftty);
ffff800000803b8d:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000803b94:	ff ff ff 
ffff800000803b97:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b9b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b9e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803ba2:	48 b9 40 fe ff ff ff 	movabs rcx,0xfffffffffffffe40
ffff800000803ba9:	ff ff ff 
ffff800000803bac:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803bb0:	48 89 ce             	mov    rsi,rcx
ffff800000803bb3:	48 89 c7             	mov    rdi,rax
ffff800000803bb6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:95

    //ramdisk- ramdisk.c
    dramdisk= (struct dir_entry *) kmalloc();
ffff800000803bb8:	49 89 df             	mov    r15,rbx
ffff800000803bbb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803bc0:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000803bc7:	ff ff ff 
ffff800000803bca:	48 01 da             	add    rdx,rbx
ffff800000803bcd:	ff d2                	call   rdx
ffff800000803bcf:	48 89 c2             	mov    rdx,rax
ffff800000803bd2:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803bd9:	ff ff ff 
ffff800000803bdc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803be0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:96
    struct index_node* iramdisk=dramdisk+1;
ffff800000803be3:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803bea:	ff ff ff 
ffff800000803bed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803bf1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803bf4:	48 83 c0 58          	add    rax,0x58
ffff800000803bf8:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:97
    dramdisk->name=iramdisk+1;
ffff800000803bfc:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803c03:	ff ff ff 
ffff800000803c06:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c0a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c0d:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000803c11:	48 83 c2 40          	add    rdx,0x40
ffff800000803c15:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:98
    make_devf(dramdisk,iramdisk,"ram",ddev,&devfs_fops);
ffff800000803c18:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803c1f:	ff ff ff 
ffff800000803c22:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c26:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803c29:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803c30:	ff ff ff 
ffff800000803c33:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c37:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c3a:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803c3e:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff800000803c45:	ff ff ff 
ffff800000803c48:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803c4c:	49 89 c8             	mov    r8,rcx
ffff800000803c4f:	48 89 d1             	mov    rcx,rdx
ffff800000803c52:	48 ba 9e d6 ff ff ff 	movabs rdx,0xffffffffffffd69e
ffff800000803c59:	ff ff ff 
ffff800000803c5c:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803c60:	48 89 c7             	mov    rdi,rax
ffff800000803c63:	49 89 df             	mov    r15,rbx
ffff800000803c66:	48 b8 69 59 ee ff ff 	movabs rax,0xffffffffffee5969
ffff800000803c6d:	ff ff ff 
ffff800000803c70:	48 01 d8             	add    rax,rbx
ffff800000803c73:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:100

}
ffff800000803c75:	90                   	nop
ffff800000803c76:	48 83 c4 30          	add    rsp,0x30
ffff800000803c7a:	5b                   	pop    rbx
ffff800000803c7b:	41 5f                	pop    r15
ffff800000803c7d:	5d                   	pop    rbp
ffff800000803c7e:	c3                   	ret    

ffff800000803c7f <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:102
//
long open_dev(struct index_node * inode,struct file * filp){
ffff800000803c7f:	f3 0f 1e fa          	endbr64 
ffff800000803c83:	55                   	push   rbp
ffff800000803c84:	48 89 e5             	mov    rbp,rsp
ffff800000803c87:	41 57                	push   r15
ffff800000803c89:	53                   	push   rbx
ffff800000803c8a:	48 83 ec 20          	sub    rsp,0x20
ffff800000803c8e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803c8e <open_dev+0xf>
ffff800000803c95:	49 bb 6a 9e 11 00 00 	movabs r11,0x119e6a
ffff800000803c9c:	00 00 00 
ffff800000803c9f:	4c 01 db             	add    rbx,r11
ffff800000803ca2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803ca6:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:104
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803caa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803cae:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803cb2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803cb5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:105
    char* p=name+ strlen(name)-1;
ffff800000803cb9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803cbd:	48 89 c7             	mov    rdi,rax
ffff800000803cc0:	49 89 df             	mov    r15,rbx
ffff800000803cc3:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff800000803cca:	ff ff ff 
ffff800000803ccd:	48 01 d8             	add    rax,rbx
ffff800000803cd0:	ff d0                	call   rax
ffff800000803cd2:	48 98                	cdqe   
ffff800000803cd4:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803cd8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803cdc:	48 01 d0             	add    rax,rdx
ffff800000803cdf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106
    for(;*p!='/'&&p>=name;p--);
ffff800000803ce3:	eb 05                	jmp    ffff800000803cea <open_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106 (discriminator 3)
ffff800000803ce5:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106 (discriminator 1)
ffff800000803cea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803cee:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803cf1:	3c 2f                	cmp    al,0x2f
ffff800000803cf3:	74 0a                	je     ffff800000803cff <open_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106 (discriminator 2)
ffff800000803cf5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803cf9:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803cfd:	73 e6                	jae    ffff800000803ce5 <open_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:107
    if(p>=name)
ffff800000803cff:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803d03:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803d07:	72 0c                	jb     ffff800000803d15 <open_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:108
        name=p+1;
ffff800000803d09:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803d0d:	48 83 c0 01          	add    rax,0x1
ffff800000803d11:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:109
    if(memcmp(name,"tty",3)==0){
ffff800000803d15:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803d19:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803d1e:	48 b9 9a d6 ff ff ff 	movabs rcx,0xffffffffffffd69a
ffff800000803d25:	ff ff ff 
ffff800000803d28:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803d2c:	48 89 ce             	mov    rsi,rcx
ffff800000803d2f:	48 89 c7             	mov    rdi,rax
ffff800000803d32:	49 89 df             	mov    r15,rbx
ffff800000803d35:	48 b8 b6 50 ef ff ff 	movabs rax,0xffffffffffef50b6
ffff800000803d3c:	ff ff ff 
ffff800000803d3f:	48 01 d8             	add    rax,rbx
ffff800000803d42:	ff d0                	call   rax
ffff800000803d44:	85 c0                	test   eax,eax
ffff800000803d46:	75 22                	jne    ffff800000803d6a <open_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110
        return init_tty(inode,filp);
ffff800000803d48:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803d4c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803d50:	48 89 d6             	mov    rsi,rdx
ffff800000803d53:	48 89 c7             	mov    rdi,rax
ffff800000803d56:	49 89 df             	mov    r15,rbx
ffff800000803d59:	48 b8 34 44 ef ff ff 	movabs rax,0xffffffffffef4434
ffff800000803d60:	ff ff ff 
ffff800000803d63:	48 01 d8             	add    rax,rbx
ffff800000803d66:	ff d0                	call   rax
ffff800000803d68:	eb 57                	jmp    ffff800000803dc1 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111
    }else if(strcmp(name,"console")==0){
ffff800000803d6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803d6e:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff800000803d75:	ff ff ff 
ffff800000803d78:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803d7c:	48 89 d6             	mov    rsi,rdx
ffff800000803d7f:	48 89 c7             	mov    rdi,rax
ffff800000803d82:	49 89 df             	mov    r15,rbx
ffff800000803d85:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff800000803d8c:	ff ff ff 
ffff800000803d8f:	48 01 d8             	add    rax,rbx
ffff800000803d92:	ff d0                	call   rax
ffff800000803d94:	85 c0                	test   eax,eax
ffff800000803d96:	75 22                	jne    ffff800000803dba <open_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:112
        return open_framebuffer(inode,filp);
ffff800000803d98:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803d9c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803da0:	48 89 d6             	mov    rsi,rdx
ffff800000803da3:	48 89 c7             	mov    rdi,rax
ffff800000803da6:	49 89 df             	mov    r15,rbx
ffff800000803da9:	48 b8 e4 d0 ee ff ff 	movabs rax,0xffffffffffeed0e4
ffff800000803db0:	ff ff ff 
ffff800000803db3:	48 01 d8             	add    rax,rbx
ffff800000803db6:	ff d0                	call   rax
ffff800000803db8:	eb 07                	jmp    ffff800000803dc1 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:114
    }
    return -1;
ffff800000803dba:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:115
}
ffff800000803dc1:	48 83 c4 20          	add    rsp,0x20
ffff800000803dc5:	5b                   	pop    rbx
ffff800000803dc6:	41 5f                	pop    r15
ffff800000803dc8:	5d                   	pop    rbp
ffff800000803dc9:	c3                   	ret    

ffff800000803dca <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:116
long close_dev(struct index_node * inode,struct file * filp){
ffff800000803dca:	f3 0f 1e fa          	endbr64 
ffff800000803dce:	55                   	push   rbp
ffff800000803dcf:	48 89 e5             	mov    rbp,rsp
ffff800000803dd2:	41 57                	push   r15
ffff800000803dd4:	53                   	push   rbx
ffff800000803dd5:	48 83 ec 20          	sub    rsp,0x20
ffff800000803dd9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803dd9 <close_dev+0xf>
ffff800000803de0:	49 bb 1f 9d 11 00 00 	movabs r11,0x119d1f
ffff800000803de7:	00 00 00 
ffff800000803dea:	4c 01 db             	add    rbx,r11
ffff800000803ded:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803df1:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:118
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803df5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803df9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803dfd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803e00:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:119
    char* p=name+ strlen(name)-1;
ffff800000803e04:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803e08:	48 89 c7             	mov    rdi,rax
ffff800000803e0b:	49 89 df             	mov    r15,rbx
ffff800000803e0e:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff800000803e15:	ff ff ff 
ffff800000803e18:	48 01 d8             	add    rax,rbx
ffff800000803e1b:	ff d0                	call   rax
ffff800000803e1d:	48 98                	cdqe   
ffff800000803e1f:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803e23:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803e27:	48 01 d0             	add    rax,rdx
ffff800000803e2a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120
    for(;*p!='/'&&p>=name;p--);
ffff800000803e2e:	eb 05                	jmp    ffff800000803e35 <close_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120 (discriminator 3)
ffff800000803e30:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120 (discriminator 1)
ffff800000803e35:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803e39:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803e3c:	3c 2f                	cmp    al,0x2f
ffff800000803e3e:	74 0a                	je     ffff800000803e4a <close_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120 (discriminator 2)
ffff800000803e40:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803e44:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803e48:	73 e6                	jae    ffff800000803e30 <close_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:121
    if(p>=name)
ffff800000803e4a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803e4e:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803e52:	72 0c                	jb     ffff800000803e60 <close_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:122
        name=p+1;
ffff800000803e54:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803e58:	48 83 c0 01          	add    rax,0x1
ffff800000803e5c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:123
    if(memcmp(name,"tty",3)==0){
ffff800000803e60:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803e64:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803e69:	48 b9 9a d6 ff ff ff 	movabs rcx,0xffffffffffffd69a
ffff800000803e70:	ff ff ff 
ffff800000803e73:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803e77:	48 89 ce             	mov    rsi,rcx
ffff800000803e7a:	48 89 c7             	mov    rdi,rax
ffff800000803e7d:	49 89 df             	mov    r15,rbx
ffff800000803e80:	48 b8 b6 50 ef ff ff 	movabs rax,0xffffffffffef50b6
ffff800000803e87:	ff ff ff 
ffff800000803e8a:	48 01 d8             	add    rax,rbx
ffff800000803e8d:	ff d0                	call   rax
ffff800000803e8f:	85 c0                	test   eax,eax
ffff800000803e91:	75 22                	jne    ffff800000803eb5 <close_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124
        return close_tty(inode,filp);
ffff800000803e93:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803e97:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803e9b:	48 89 d6             	mov    rsi,rdx
ffff800000803e9e:	48 89 c7             	mov    rdi,rax
ffff800000803ea1:	49 89 df             	mov    r15,rbx
ffff800000803ea4:	48 b8 67 43 ef ff ff 	movabs rax,0xffffffffffef4367
ffff800000803eab:	ff ff ff 
ffff800000803eae:	48 01 d8             	add    rax,rbx
ffff800000803eb1:	ff d0                	call   rax
ffff800000803eb3:	eb 57                	jmp    ffff800000803f0c <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125
    }else if(strcmp(name,"console")==0){
ffff800000803eb5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803eb9:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff800000803ec0:	ff ff ff 
ffff800000803ec3:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803ec7:	48 89 d6             	mov    rsi,rdx
ffff800000803eca:	48 89 c7             	mov    rdi,rax
ffff800000803ecd:	49 89 df             	mov    r15,rbx
ffff800000803ed0:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff800000803ed7:	ff ff ff 
ffff800000803eda:	48 01 d8             	add    rax,rbx
ffff800000803edd:	ff d0                	call   rax
ffff800000803edf:	85 c0                	test   eax,eax
ffff800000803ee1:	75 22                	jne    ffff800000803f05 <close_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:126
        return close_framebuffer(inode,filp);
ffff800000803ee3:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803ee7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803eeb:	48 89 d6             	mov    rsi,rdx
ffff800000803eee:	48 89 c7             	mov    rdi,rax
ffff800000803ef1:	49 89 df             	mov    r15,rbx
ffff800000803ef4:	48 b8 3b d1 ee ff ff 	movabs rax,0xffffffffffeed13b
ffff800000803efb:	ff ff ff 
ffff800000803efe:	48 01 d8             	add    rax,rbx
ffff800000803f01:	ff d0                	call   rax
ffff800000803f03:	eb 07                	jmp    ffff800000803f0c <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:128
    }
    return -1;
ffff800000803f05:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130

}
ffff800000803f0c:	48 83 c4 20          	add    rsp,0x20
ffff800000803f10:	5b                   	pop    rbx
ffff800000803f11:	41 5f                	pop    r15
ffff800000803f13:	5d                   	pop    rbp
ffff800000803f14:	c3                   	ret    

ffff800000803f15 <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:131
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000803f15:	f3 0f 1e fa          	endbr64 
ffff800000803f19:	55                   	push   rbp
ffff800000803f1a:	48 89 e5             	mov    rbp,rsp
ffff800000803f1d:	41 57                	push   r15
ffff800000803f1f:	53                   	push   rbx
ffff800000803f20:	48 83 ec 40          	sub    rsp,0x40
ffff800000803f24:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803f24 <read_dev+0xf>
ffff800000803f2b:	49 bb d4 9b 11 00 00 	movabs r11,0x119bd4
ffff800000803f32:	00 00 00 
ffff800000803f35:	4c 01 db             	add    rbx,r11
ffff800000803f38:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803f3c:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000803f40:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000803f44:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:133
    //判断是不是块设备文件
    struct index_node* i_dev=filp->dentry->dir_inode;
ffff800000803f48:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f4c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803f50:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803f54:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:140
        //这里需要调用缓冲区层的函数读取块设备
        return blkdev_read(i_dev->dev,*position,count,buf);
    }
    
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803f58:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f5c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803f60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803f63:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:141
    char* p=name+ strlen(name)-1;
ffff800000803f67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803f6b:	48 89 c7             	mov    rdi,rax
ffff800000803f6e:	49 89 df             	mov    r15,rbx
ffff800000803f71:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff800000803f78:	ff ff ff 
ffff800000803f7b:	48 01 d8             	add    rax,rbx
ffff800000803f7e:	ff d0                	call   rax
ffff800000803f80:	48 98                	cdqe   
ffff800000803f82:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803f86:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803f8a:	48 01 d0             	add    rax,rdx
ffff800000803f8d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142
    for(;*p!='/'&&p>=name;p--);
ffff800000803f91:	eb 05                	jmp    ffff800000803f98 <read_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142 (discriminator 3)
ffff800000803f93:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142 (discriminator 1)
ffff800000803f98:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803f9c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803f9f:	3c 2f                	cmp    al,0x2f
ffff800000803fa1:	74 0a                	je     ffff800000803fad <read_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142 (discriminator 2)
ffff800000803fa3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803fa7:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803fab:	73 e6                	jae    ffff800000803f93 <read_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:143
    if(p>=name)
ffff800000803fad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803fb1:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803fb5:	72 0c                	jb     ffff800000803fc3 <read_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:144
        name=p+1;
ffff800000803fb7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803fbb:	48 83 c0 01          	add    rax,0x1
ffff800000803fbf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
    if(memcmp(name,"tty",3)==0){
ffff800000803fc3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803fc7:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803fcc:	48 b9 9a d6 ff ff ff 	movabs rcx,0xffffffffffffd69a
ffff800000803fd3:	ff ff ff 
ffff800000803fd6:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803fda:	48 89 ce             	mov    rsi,rcx
ffff800000803fdd:	48 89 c7             	mov    rdi,rax
ffff800000803fe0:	49 89 df             	mov    r15,rbx
ffff800000803fe3:	48 b8 b6 50 ef ff ff 	movabs rax,0xffffffffffef50b6
ffff800000803fea:	ff ff ff 
ffff800000803fed:	48 01 d8             	add    rax,rbx
ffff800000803ff0:	ff d0                	call   rax
ffff800000803ff2:	85 c0                	test   eax,eax
ffff800000803ff4:	75 27                	jne    ffff80000080401d <read_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:146
        return read_tty(filp,buf,count,position);
ffff800000803ff6:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000803ffa:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000803ffe:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804002:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804006:	48 89 c7             	mov    rdi,rax
ffff800000804009:	49 89 df             	mov    r15,rbx
ffff80000080400c:	48 b8 88 45 ef ff ff 	movabs rax,0xffffffffffef4588
ffff800000804013:	ff ff ff 
ffff800000804016:	48 01 d8             	add    rax,rbx
ffff800000804019:	ff d0                	call   rax
ffff80000080401b:	eb 5c                	jmp    ffff800000804079 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147
    }else if(strcmp(name,"console")==0){
ffff80000080401d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804021:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff800000804028:	ff ff ff 
ffff80000080402b:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080402f:	48 89 d6             	mov    rsi,rdx
ffff800000804032:	48 89 c7             	mov    rdi,rax
ffff800000804035:	49 89 df             	mov    r15,rbx
ffff800000804038:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff80000080403f:	ff ff ff 
ffff800000804042:	48 01 d8             	add    rax,rbx
ffff800000804045:	ff d0                	call   rax
ffff800000804047:	85 c0                	test   eax,eax
ffff800000804049:	75 27                	jne    ffff800000804072 <read_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:148
        return read_framebuffer(filp,buf,count,position);
ffff80000080404b:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff80000080404f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804053:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804057:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080405b:	48 89 c7             	mov    rdi,rax
ffff80000080405e:	49 89 df             	mov    r15,rbx
ffff800000804061:	48 b8 62 d1 ee ff ff 	movabs rax,0xffffffffffeed162
ffff800000804068:	ff ff ff 
ffff80000080406b:	48 01 d8             	add    rax,rbx
ffff80000080406e:	ff d0                	call   rax
ffff800000804070:	eb 07                	jmp    ffff800000804079 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:150
    }
    return -1;
ffff800000804072:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152

}
ffff800000804079:	48 83 c4 40          	add    rsp,0x40
ffff80000080407d:	5b                   	pop    rbx
ffff80000080407e:	41 5f                	pop    r15
ffff800000804080:	5d                   	pop    rbp
ffff800000804081:	c3                   	ret    

ffff800000804082 <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000804082:	f3 0f 1e fa          	endbr64 
ffff800000804086:	55                   	push   rbp
ffff800000804087:	48 89 e5             	mov    rbp,rsp
ffff80000080408a:	41 57                	push   r15
ffff80000080408c:	53                   	push   rbx
ffff80000080408d:	48 83 ec 40          	sub    rsp,0x40
ffff800000804091:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804091 <write_dev+0xf>
ffff800000804098:	49 bb 67 9a 11 00 00 	movabs r11,0x119a67
ffff80000080409f:	00 00 00 
ffff8000008040a2:	4c 01 db             	add    rbx,r11
ffff8000008040a5:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008040a9:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff8000008040ad:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff8000008040b1:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff8000008040b5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008040b9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008040bd:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008040c1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:162
        //这里需要调用缓冲区层的函数写块设备
        return blkdev_write(idev->dev,*position,count,buf);
    }

    //查看文件名
    char* name=filp->dentry->name;
ffff8000008040c5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008040c9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008040cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008040d0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:163
    char* p=name+ strlen(name)-1;
ffff8000008040d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008040d8:	48 89 c7             	mov    rdi,rax
ffff8000008040db:	49 89 df             	mov    r15,rbx
ffff8000008040de:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff8000008040e5:	ff ff ff 
ffff8000008040e8:	48 01 d8             	add    rax,rbx
ffff8000008040eb:	ff d0                	call   rax
ffff8000008040ed:	48 98                	cdqe   
ffff8000008040ef:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008040f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008040f7:	48 01 d0             	add    rax,rdx
ffff8000008040fa:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164
    for(;*p!='/'&&p>=name;p--);
ffff8000008040fe:	eb 05                	jmp    ffff800000804105 <write_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 3)
ffff800000804100:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 1)
ffff800000804105:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804109:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080410c:	3c 2f                	cmp    al,0x2f
ffff80000080410e:	74 0a                	je     ffff80000080411a <write_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 2)
ffff800000804110:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804114:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804118:	73 e6                	jae    ffff800000804100 <write_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:165
    if(p>=name)
ffff80000080411a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080411e:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804122:	72 0c                	jb     ffff800000804130 <write_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:166
        name=p+1;
ffff800000804124:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804128:	48 83 c0 01          	add    rax,0x1
ffff80000080412c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
    if(memcmp(name,"tty",3)==0){
ffff800000804130:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804134:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804139:	48 b9 9a d6 ff ff ff 	movabs rcx,0xffffffffffffd69a
ffff800000804140:	ff ff ff 
ffff800000804143:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804147:	48 89 ce             	mov    rsi,rcx
ffff80000080414a:	48 89 c7             	mov    rdi,rax
ffff80000080414d:	49 89 df             	mov    r15,rbx
ffff800000804150:	48 b8 b6 50 ef ff ff 	movabs rax,0xffffffffffef50b6
ffff800000804157:	ff ff ff 
ffff80000080415a:	48 01 d8             	add    rax,rbx
ffff80000080415d:	ff d0                	call   rax
ffff80000080415f:	85 c0                	test   eax,eax
ffff800000804161:	75 27                	jne    ffff80000080418a <write_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
        return write_tty(filp,buf,count,position);
ffff800000804163:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804167:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080416b:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff80000080416f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804173:	48 89 c7             	mov    rdi,rax
ffff800000804176:	49 89 df             	mov    r15,rbx
ffff800000804179:	48 b8 49 46 ef ff ff 	movabs rax,0xffffffffffef4649
ffff800000804180:	ff ff ff 
ffff800000804183:	48 01 d8             	add    rax,rbx
ffff800000804186:	ff d0                	call   rax
ffff800000804188:	eb 5c                	jmp    ffff8000008041e6 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
    }else if(strcmp(name,"console")==0){
ffff80000080418a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080418e:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff800000804195:	ff ff ff 
ffff800000804198:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080419c:	48 89 d6             	mov    rsi,rdx
ffff80000080419f:	48 89 c7             	mov    rdi,rax
ffff8000008041a2:	49 89 df             	mov    r15,rbx
ffff8000008041a5:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff8000008041ac:	ff ff ff 
ffff8000008041af:	48 01 d8             	add    rax,rbx
ffff8000008041b2:	ff d0                	call   rax
ffff8000008041b4:	85 c0                	test   eax,eax
ffff8000008041b6:	75 27                	jne    ffff8000008041df <write_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:170
        return write_framebuffer(filp,buf,count,position);
ffff8000008041b8:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008041bc:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008041c0:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008041c4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008041c8:	48 89 c7             	mov    rdi,rax
ffff8000008041cb:	49 89 df             	mov    r15,rbx
ffff8000008041ce:	48 b8 91 d1 ee ff ff 	movabs rax,0xffffffffffeed191
ffff8000008041d5:	ff ff ff 
ffff8000008041d8:	48 01 d8             	add    rax,rbx
ffff8000008041db:	ff d0                	call   rax
ffff8000008041dd:	eb 07                	jmp    ffff8000008041e6 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
    }
    return -1;
ffff8000008041df:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:174

}
ffff8000008041e6:	48 83 c4 40          	add    rsp,0x40
ffff8000008041ea:	5b                   	pop    rbx
ffff8000008041eb:	41 5f                	pop    r15
ffff8000008041ed:	5d                   	pop    rbp
ffff8000008041ee:	c3                   	ret    

ffff8000008041ef <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:175
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff8000008041ef:	f3 0f 1e fa          	endbr64 
ffff8000008041f3:	55                   	push   rbp
ffff8000008041f4:	48 89 e5             	mov    rbp,rsp
ffff8000008041f7:	41 57                	push   r15
ffff8000008041f9:	53                   	push   rbx
ffff8000008041fa:	48 83 ec 40          	sub    rsp,0x40
ffff8000008041fe:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008041fe <ioctl_dev+0xf>
ffff800000804205:	49 bb fa 98 11 00 00 	movabs r11,0x1198fa
ffff80000080420c:	00 00 00 
ffff80000080420f:	4c 01 db             	add    rbx,r11
ffff800000804212:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000804216:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080421a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080421e:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff800000804222:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804226:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080422a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080422e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:183
    if(IS_BLKDEV(idev->dev)){
        //这里需要调用缓冲区层的函数ioctl块设备
        return 1;
    }
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804232:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804236:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080423a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080423d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:184
    char* p=name+ strlen(name)-1;
ffff800000804241:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804245:	48 89 c7             	mov    rdi,rax
ffff800000804248:	49 89 df             	mov    r15,rbx
ffff80000080424b:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff800000804252:	ff ff ff 
ffff800000804255:	48 01 d8             	add    rax,rbx
ffff800000804258:	ff d0                	call   rax
ffff80000080425a:	48 98                	cdqe   
ffff80000080425c:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804260:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804264:	48 01 d0             	add    rax,rdx
ffff800000804267:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:185
    for(;*p!='/'&&p>=name;p--);
ffff80000080426b:	eb 05                	jmp    ffff800000804272 <ioctl_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:185 (discriminator 3)
ffff80000080426d:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:185 (discriminator 1)
ffff800000804272:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804276:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804279:	3c 2f                	cmp    al,0x2f
ffff80000080427b:	74 0a                	je     ffff800000804287 <ioctl_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:185 (discriminator 2)
ffff80000080427d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804281:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804285:	73 e6                	jae    ffff80000080426d <ioctl_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:186
    if(p>=name)
ffff800000804287:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080428b:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080428f:	72 0c                	jb     ffff80000080429d <ioctl_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:187
        name=p+1;
ffff800000804291:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804295:	48 83 c0 01          	add    rax,0x1
ffff800000804299:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:188
    if(memcmp(name,"tty",3)==0){
ffff80000080429d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042a1:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008042a6:	48 b9 9a d6 ff ff ff 	movabs rcx,0xffffffffffffd69a
ffff8000008042ad:	ff ff ff 
ffff8000008042b0:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff8000008042b4:	48 89 ce             	mov    rsi,rcx
ffff8000008042b7:	48 89 c7             	mov    rdi,rax
ffff8000008042ba:	49 89 df             	mov    r15,rbx
ffff8000008042bd:	48 b8 b6 50 ef ff ff 	movabs rax,0xffffffffffef50b6
ffff8000008042c4:	ff ff ff 
ffff8000008042c7:	48 01 d8             	add    rax,rbx
ffff8000008042ca:	ff d0                	call   rax
ffff8000008042cc:	85 c0                	test   eax,eax
ffff8000008042ce:	75 27                	jne    ffff8000008042f7 <ioctl_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:189
        return ioctl_tty(inode, filp, cmd, arg);
ffff8000008042d0:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008042d4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008042d8:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008042dc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008042e0:	48 89 c7             	mov    rdi,rax
ffff8000008042e3:	49 89 df             	mov    r15,rbx
ffff8000008042e6:	48 b8 39 47 ef ff ff 	movabs rax,0xffffffffffef4739
ffff8000008042ed:	ff ff ff 
ffff8000008042f0:	48 01 d8             	add    rax,rbx
ffff8000008042f3:	ff d0                	call   rax
ffff8000008042f5:	eb 5c                	jmp    ffff800000804353 <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190
    }else if(strcmp(name,"console")==0){
ffff8000008042f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042fb:	48 ba 8e d6 ff ff ff 	movabs rdx,0xffffffffffffd68e
ffff800000804302:	ff ff ff 
ffff800000804305:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804309:	48 89 d6             	mov    rsi,rdx
ffff80000080430c:	48 89 c7             	mov    rdi,rax
ffff80000080430f:	49 89 df             	mov    r15,rbx
ffff800000804312:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff800000804319:	ff ff ff 
ffff80000080431c:	48 01 d8             	add    rax,rbx
ffff80000080431f:	ff d0                	call   rax
ffff800000804321:	85 c0                	test   eax,eax
ffff800000804323:	75 27                	jne    ffff80000080434c <ioctl_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
        return ioctl_framebuffer(inode,filp,cmd,arg);
ffff800000804325:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804329:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080432d:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804331:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804335:	48 89 c7             	mov    rdi,rax
ffff800000804338:	49 89 df             	mov    r15,rbx
ffff80000080433b:	48 b8 b2 d2 ee ff ff 	movabs rax,0xffffffffffeed2b2
ffff800000804342:	ff ff ff 
ffff800000804345:	48 01 d8             	add    rax,rbx
ffff800000804348:	ff d0                	call   rax
ffff80000080434a:	eb 07                	jmp    ffff800000804353 <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:193
    }
    return -1;
ffff80000080434c:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:195

}
ffff800000804353:	48 83 c4 40          	add    rsp,0x40
ffff800000804357:	5b                   	pop    rbx
ffff800000804358:	41 5f                	pop    r15
ffff80000080435a:	5d                   	pop    rbp
ffff80000080435b:	c3                   	ret    

ffff80000080435c <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:197
int load_driver(char *path)
{
ffff80000080435c:	f3 0f 1e fa          	endbr64 
ffff800000804360:	55                   	push   rbp
ffff800000804361:	48 89 e5             	mov    rbp,rsp
ffff800000804364:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804364 <load_driver+0x8>
ffff80000080436b:	49 bb 94 97 11 00 00 	movabs r11,0x119794
ffff800000804372:	00 00 00 
ffff800000804375:	4c 01 d8             	add    rax,r11
ffff800000804378:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:199
    
}
ffff80000080437c:	90                   	nop
ffff80000080437d:	5d                   	pop    rbp
ffff80000080437e:	c3                   	ret    

ffff80000080437f <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:26
TSS *tss=0xffff800000108000ul;
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
void init_proc(){
ffff80000080437f:	f3 0f 1e fa          	endbr64 
ffff800000804383:	55                   	push   rbp
ffff800000804384:	48 89 e5             	mov    rbp,rsp
ffff800000804387:	41 57                	push   r15
ffff800000804389:	53                   	push   rbx
ffff80000080438a:	48 83 ec 10          	sub    rsp,0x10
ffff80000080438e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080438e <init_proc+0xf>
ffff800000804395:	49 bb 6a 97 11 00 00 	movabs r11,0x11976a
ffff80000080439c:	00 00 00 
ffff80000080439f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:28
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
ffff8000008043a2:	be 0d 00 00 00       	mov    esi,0xd
ffff8000008043a7:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008043ac:	49 89 df             	mov    r15,rbx
ffff8000008043af:	48 b8 78 45 ee ff ff 	movabs rax,0xffffffffffee4578
ffff8000008043b6:	ff ff ff 
ffff8000008043b9:	48 01 d8             	add    rax,rbx
ffff8000008043bc:	ff d0                	call   rax
ffff8000008043be:	48 89 c2             	mov    rdx,rax
ffff8000008043c1:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008043c8:	ff ff ff 
ffff8000008043cb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008043cf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff8000008043d2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008043d9:	eb 7b                	jmp    ffff800000804456 <init_proc+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 3)
        task[i].pid=-1;
ffff8000008043db:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008043e2:	ff ff ff 
ffff8000008043e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008043e9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008043ec:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008043ef:	48 98                	cdqe   
ffff8000008043f1:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008043f8:	48 01 d0             	add    rax,rdx
ffff8000008043fb:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31 (discriminator 3)
        task[i].stat=TASK_EMPTY;
ffff800000804401:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804408:	ff ff ff 
ffff80000080440b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080440f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804412:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804415:	48 98                	cdqe   
ffff800000804417:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080441e:	48 01 d0             	add    rax,rdx
ffff800000804421:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
        task[i].parent_pid=-1;
ffff800000804428:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080442f:	ff ff ff 
ffff800000804432:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804436:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804439:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080443c:	48 98                	cdqe   
ffff80000080443e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804445:	48 01 d0             	add    rax,rdx
ffff800000804448:	c7 80 bc 00 00 00 ff 	mov    DWORD PTR [rax+0xbc],0xffffffff
ffff80000080444f:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff800000804452:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 1)
ffff800000804456:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff80000080445a:	0f 8e 7b ff ff ff    	jle    ffff8000008043db <init_proc+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:34
    }
    cur_proc=0;//proc zero
ffff800000804460:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000804467:	ff ff ff 
ffff80000080446a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080446e:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35
    current=task;
ffff800000804474:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080447b:	ff ff ff 
ffff80000080447e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804482:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804485:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080448c:	ff ff ff 
ffff80000080448f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804493:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:36
    pidd=1;
ffff800000804496:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff80000080449d:	ff ff ff 
ffff8000008044a0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008044a4:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:41


    //asm volatile("lldt %0"::"m"(xi));
    //asm volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
ffff8000008044aa:	68 00 00 80 00       	push   0x800000
ffff8000008044af:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008044b6:	ff 
ffff8000008044b7:	68 00 00 80 00       	push   0x800000
ffff8000008044bc:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008044c3:	ff 
ffff8000008044c4:	68 00 00 80 00       	push   0x800000
ffff8000008044c9:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008044d0:	ff 
ffff8000008044d1:	68 00 00 80 00       	push   0x800000
ffff8000008044d6:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008044dd:	ff 
ffff8000008044de:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
ffff8000008044e5:	80 ff ff 
ffff8000008044e8:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
ffff8000008044ef:	80 ff ff 
ffff8000008044f2:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
ffff8000008044f9:	80 ff ff 
ffff8000008044fc:	48 89 c1             	mov    rcx,rax
ffff8000008044ff:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804506:	80 ff ff 
ffff800000804509:	48 89 c2             	mov    rdx,rax
ffff80000080450c:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804513:	80 ff ff 
ffff800000804516:	48 89 c6             	mov    rsi,rax
ffff800000804519:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804520:	80 ff ff 
ffff800000804523:	48 89 c7             	mov    rdi,rax
ffff800000804526:	49 89 df             	mov    r15,rbx
ffff800000804529:	48 b8 7e 88 ee ff ff 	movabs rax,0xffffffffffee887e
ffff800000804530:	ff ff ff 
ffff800000804533:	48 01 d8             	add    rax,rbx
ffff800000804536:	ff d0                	call   rax
ffff800000804538:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:46
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);

    //===============创建0号进程======================
    int zi= init_proc0();
ffff80000080453c:	49 89 df             	mov    r15,rbx
ffff80000080453f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804544:	48 ba 16 6e ee ff ff 	movabs rdx,0xffffffffffee6e16
ffff80000080454b:	ff ff ff 
ffff80000080454e:	48 01 da             	add    rdx,rbx
ffff800000804551:	ff d2                	call   rdx
ffff800000804553:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:47
    task[zi].stat=TASK_READY;
ffff800000804556:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080455d:	ff ff ff 
ffff800000804560:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804564:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804567:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080456a:	48 98                	cdqe   
ffff80000080456c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804573:	48 01 d0             	add    rax,rdx
ffff800000804576:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:49
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
ffff80000080457d:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000804584:	ff ff ff 
ffff800000804587:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080458b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080458e:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
ffff800000804592:	48 89 c6             	mov    rsi,rax
ffff800000804595:	bf a8 06 00 00       	mov    edi,0x6a8
ffff80000080459a:	49 89 df             	mov    r15,rbx
ffff80000080459d:	48 b8 6f 33 ee ff ff 	movabs rax,0xffffffffffee336f
ffff8000008045a4:	ff ff ff 
ffff8000008045a7:	48 01 d8             	add    rax,rbx
ffff8000008045aa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:51
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
ffff8000008045ac:	be 08 00 00 00       	mov    esi,0x8
ffff8000008045b1:	bf 74 01 00 00       	mov    edi,0x174
ffff8000008045b6:	49 89 df             	mov    r15,rbx
ffff8000008045b9:	48 b8 6f 33 ee ff ff 	movabs rax,0xffffffffffee336f
ffff8000008045c0:	ff ff ff 
ffff8000008045c3:	48 01 d8             	add    rax,rbx
ffff8000008045c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:53
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
ffff8000008045c8:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
ffff8000008045cf:	00 20 00 
ffff8000008045d2:	48 89 c6             	mov    rsi,rax
ffff8000008045d5:	b8 81 00 00 c0       	mov    eax,0xc0000081
ffff8000008045da:	48 89 c7             	mov    rdi,rax
ffff8000008045dd:	49 89 df             	mov    r15,rbx
ffff8000008045e0:	48 b8 6f 33 ee ff ff 	movabs rax,0xffffffffffee336f
ffff8000008045e7:	ff ff ff 
ffff8000008045ea:	48 01 d8             	add    rax,rbx
ffff8000008045ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:55

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
ffff8000008045ef:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff8000008045f6:	ff ff ff 
ffff8000008045f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008045fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804600:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff800000804604:	48 89 c6             	mov    rsi,rax
ffff800000804607:	48 b8 a8 d6 ff ff ff 	movabs rax,0xffffffffffffd6a8
ffff80000080460e:	ff ff ff 
ffff800000804611:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000804615:	48 89 c7             	mov    rdi,rax
ffff800000804618:	49 89 df             	mov    r15,rbx
ffff80000080461b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804620:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff800000804627:	ff ff ff 
ffff80000080462a:	48 01 da             	add    rdx,rbx
ffff80000080462d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:58
    //创建一个测试进程
//    create_test_proc();
}
ffff80000080462f:	90                   	nop
ffff800000804630:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000804634:	5b                   	pop    rbx
ffff800000804635:	41 5f                	pop    r15
ffff800000804637:	5d                   	pop    rbp
ffff800000804638:	c3                   	ret    

ffff800000804639 <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:59
void create_test_proc(){
ffff800000804639:	f3 0f 1e fa          	endbr64 
ffff80000080463d:	55                   	push   rbp
ffff80000080463e:	48 89 e5             	mov    rbp,rsp
ffff800000804641:	41 57                	push   r15
ffff800000804643:	53                   	push   rbx
ffff800000804644:	48 83 ec 20          	sub    rsp,0x20
ffff800000804648:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804648 <create_test_proc+0xf>
ffff80000080464f:	49 bb b0 94 11 00 00 	movabs r11,0x1194b0
ffff800000804656:	00 00 00 
ffff800000804659:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:61

    int index=req_proc();
ffff80000080465c:	49 89 df             	mov    r15,rbx
ffff80000080465f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804664:	48 ba 58 70 ee ff ff 	movabs rdx,0xffffffffffee7058
ffff80000080466b:	ff ff ff 
ffff80000080466e:	48 01 da             	add    rdx,rbx
ffff800000804671:	ff d2                	call   rdx
ffff800000804673:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62
    task[index].stat=TASK_READY;
ffff800000804676:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080467d:	ff ff ff 
ffff800000804680:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804684:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804687:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080468a:	48 98                	cdqe   
ffff80000080468c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804693:	48 01 d0             	add    rax,rdx
ffff800000804696:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:63
    int currsp=0x9fc00-1;
ffff80000080469d:	c7 45 dc ff fb 09 00 	mov    DWORD PTR [rbp-0x24],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64
    asm volatile("mov %%rsp,%0":"=m"(currsp));
ffff8000008046a4:	48 89 65 dc          	mov    QWORD PTR [rbp-0x24],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:65
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff8000008046a8:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008046af:	ff ff ff 
ffff8000008046b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046b6:	48 89 c2             	mov    rdx,rax
ffff8000008046b9:	48 83 ec 08          	sub    rsp,0x8
ffff8000008046bd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008046c0:	50                   	push   rax
ffff8000008046c1:	6a 00                	push   0x0
ffff8000008046c3:	52                   	push   rdx
ffff8000008046c4:	6a 00                	push   0x0
ffff8000008046c6:	6a 00                	push   0x0
ffff8000008046c8:	6a 00                	push   0x0
ffff8000008046ca:	68 58 7d 00 00       	push   0x7d58
ffff8000008046cf:	6a 10                	push   0x10
ffff8000008046d1:	6a 10                	push   0x10
ffff8000008046d3:	6a 10                	push   0x10
ffff8000008046d5:	6a 10                	push   0x10
ffff8000008046d7:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff8000008046dd:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff8000008046e3:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008046e8:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008046ed:	be 00 00 00 00       	mov    esi,0x0
ffff8000008046f2:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008046f7:	49 89 df             	mov    r15,rbx
ffff8000008046fa:	48 b8 a9 71 ee ff ff 	movabs rax,0xffffffffffee71a9
ffff800000804701:	ff ff ff 
ffff800000804704:	48 01 d8             	add    rax,rbx
ffff800000804707:	ff d0                	call   rax
ffff800000804709:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:67
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)_syscall_sysret, 0, index);
    task[index].tss.rsp0=0x400000;
ffff80000080470d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804714:	ff ff ff 
ffff800000804717:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080471b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080471e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804721:	48 98                	cdqe   
ffff800000804723:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080472a:	48 01 d0             	add    rax,rdx
ffff80000080472d:	48 c7 80 fc 01 00 00 	mov    QWORD PTR [rax+0x1fc],0x400000
ffff800000804734:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
    task[index].mem_struct.stack_top=0x7e00;
ffff800000804738:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080473f:	ff ff ff 
ffff800000804742:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804746:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804749:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080474c:	48 98                	cdqe   
ffff80000080474e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804755:	48 01 d0             	add    rax,rdx
ffff800000804758:	48 c7 40 40 00 7e 00 	mov    QWORD PTR [rax+0x40],0x7e00
ffff80000080475f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:69
    task[index].mem_struct.stack_bottom=0x6e00;
ffff800000804760:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804767:	ff ff ff 
ffff80000080476a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080476e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804771:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804774:	48 98                	cdqe   
ffff800000804776:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080477d:	48 01 d0             	add    rax,rdx
ffff800000804780:	48 c7 40 38 00 6e 00 	mov    QWORD PTR [rax+0x38],0x6e00
ffff800000804787:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
    task[index].mem_struct.heap_top=0x1101000;
ffff800000804788:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080478f:	ff ff ff 
ffff800000804792:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804796:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804799:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080479c:	48 98                	cdqe   
ffff80000080479e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008047a5:	48 01 d0             	add    rax,rdx
ffff8000008047a8:	48 c7 40 30 00 10 10 	mov    QWORD PTR [rax+0x30],0x1101000
ffff8000008047af:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:71
    task[index].mem_struct.heap_base=0x1100000;
ffff8000008047b0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008047b7:	ff ff ff 
ffff8000008047ba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008047be:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008047c1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008047c4:	48 98                	cdqe   
ffff8000008047c6:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008047cd:	48 01 d0             	add    rax,rdx
ffff8000008047d0:	48 c7 40 28 00 00 10 	mov    QWORD PTR [rax+0x28],0x1100000
ffff8000008047d7:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:74

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
ffff8000008047d8:	48 c7 45 e0 58 7d 00 	mov    QWORD PTR [rbp-0x20],0x7d58
ffff8000008047df:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:75
    str->rax=0;
ffff8000008047e0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047e4:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff8000008047eb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:76
    str->rbx=0;
ffff8000008047ec:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047f0:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
ffff8000008047f7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77
    str->rcx=proc_zero;//sysret采用的返回地址
ffff8000008047f8:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff8000008047ff:	ff ff ff 
ffff800000804802:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804806:	48 89 c2             	mov    rdx,rax
ffff800000804809:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080480d:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rdx=0;
ffff800000804811:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804815:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffff80000080481c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rsi=0;
ffff80000080481d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804821:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff800000804828:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->rdi=0;
ffff800000804829:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080482d:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffff800000804834:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->r15=0;
ffff800000804835:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804839:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804840:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->r14=0;
ffff800000804841:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804845:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080484c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->r13=0;
ffff80000080484d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804851:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff800000804858:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r12=0;
ffff800000804859:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080485d:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff800000804864:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r11=0x200;
ffff800000804865:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804869:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
ffff800000804870:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r10=0;
ffff800000804871:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804875:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff80000080487c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r9=0;
ffff80000080487d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804881:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
ffff800000804888:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->r8=0;
ffff800000804889:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080488d:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
ffff800000804894:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->rip=proc_zero;
ffff800000804895:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080489c:	ff ff ff 
ffff80000080489f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048a3:	48 89 c2             	mov    rdx,rax
ffff8000008048a6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048aa:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->cs=0x8;
ffff8000008048b1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048b5:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
ffff8000008048bc:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->rflags=0x00200206;
ffff8000008048c0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048c4:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
ffff8000008048cb:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->rsp=0x7e00;
ffff8000008048cf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048d3:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
ffff8000008048da:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->ss=0x2b;
ffff8000008048de:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048e2:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
ffff8000008048e9:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->ds=0x2b;
ffff8000008048ed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048f1:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:95
    str->es=0x2b;
ffff8000008048f8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048fc:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
ffff800000804903:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:97

}
ffff800000804904:	90                   	nop
ffff800000804905:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000804909:	5b                   	pop    rbx
ffff80000080490a:	41 5f                	pop    r15
ffff80000080490c:	5d                   	pop    rbp
ffff80000080490d:	c3                   	ret    

ffff80000080490e <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:99
int init_proc0()
{
ffff80000080490e:	f3 0f 1e fa          	endbr64 
ffff800000804912:	55                   	push   rbp
ffff800000804913:	48 89 e5             	mov    rbp,rsp
ffff800000804916:	41 57                	push   r15
ffff800000804918:	53                   	push   rbx
ffff800000804919:	48 83 ec 10          	sub    rsp,0x10
ffff80000080491d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080491d <init_proc0+0xf>
ffff800000804924:	49 bb db 91 11 00 00 	movabs r11,0x1191db
ffff80000080492b:	00 00 00 
ffff80000080492e:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:101

    task[0].pid=pidd++;
ffff800000804931:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff800000804938:	ff ff ff 
ffff80000080493b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080493f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000804941:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000804944:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff80000080494b:	ff ff ff 
ffff80000080494e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804952:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000804954:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080495b:	ff ff ff 
ffff80000080495e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804962:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000804965:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102
    task[0].stat=TASK_RUNNING;
ffff800000804967:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080496e:	ff ff ff 
ffff800000804971:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804975:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804978:	c7 40 18 01 00 00 00 	mov    DWORD PTR [rax+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:103
    task[0].utime=0;
ffff80000080497f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804986:	ff ff ff 
ffff800000804989:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080498d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804990:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:104
    task[0].priority=0;
ffff800000804997:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080499e:	ff ff ff 
ffff8000008049a1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049a8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:106

    struct process *pz=task;
ffff8000008049af:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008049b6:	ff ff ff 
ffff8000008049b9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049bd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049c0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:115
//    task[index].tss.eip=(long)proc_zero;
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    pz->openf[0]=(struct file*)&ftty;
ffff8000008049c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049c8:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff8000008049cf:	ff ff ff 
ffff8000008049d2:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008049d6:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:116
    pz->openf[1]=(struct file*)&ftty;
ffff8000008049dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049e1:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff8000008049e8:	ff ff ff 
ffff8000008049eb:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008049ef:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:117
    pz->openf[2]=(struct file*)&ftty;
ffff8000008049f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049fa:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804a01:	ff ff ff 
ffff800000804a04:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804a08:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:119

    pz->mem_struct.stack_top=STACK_TOP;
ffff800000804a0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a13:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000804a1a:	7f 00 00 
ffff800000804a1d:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120
    pz->mem_struct.stack_bottom=STACK_TOP;
ffff800000804a21:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a25:	48 89 70 38          	mov    QWORD PTR [rax+0x38],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:121
    pz->mem_struct.heap_top=HEAP_BASE;
ffff800000804a29:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a2d:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x1000000
ffff800000804a34:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122
    pz->mem_struct.heap_base=HEAP_BASE;
ffff800000804a35:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a39:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000804a40:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    memcpy(&pz->tss,tss, sizeof(TSS));
ffff800000804a41:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000804a48:	ff ff ff 
ffff800000804a4b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a4f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a52:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804a56:	48 8d 8a f8 01 00 00 	lea    rcx,[rdx+0x1f8]
ffff800000804a5d:	ba 6c 00 00 00       	mov    edx,0x6c
ffff800000804a62:	48 89 c6             	mov    rsi,rax
ffff800000804a65:	48 89 cf             	mov    rdi,rcx
ffff800000804a68:	49 89 df             	mov    r15,rbx
ffff800000804a6b:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000804a72:	ff ff ff 
ffff800000804a75:	48 01 d8             	add    rax,rbx
ffff800000804a78:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:125

    pz->child_procs=NULL;
ffff800000804a7a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a7e:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000804a85:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:128

    //这个是进程切换的时候要读取的值
    pz->regs.cr3=PML4_ADDR&~KNL_BASE;
ffff800000804a89:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a8d:	48 c7 80 64 02 00 00 	mov    QWORD PTR [rax+0x264],0x101000
ffff800000804a94:	00 10 10 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:129
    pz->pml4=PML4_ADDR;
ffff800000804a98:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a9c:	48 bf 00 10 10 00 00 	movabs rdi,0xffff800000101000
ffff800000804aa3:	80 ff ff 
ffff800000804aa6:	48 89 b8 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:130
    pz->cwd=root_sb->root;
ffff800000804aad:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000804ab4:	ff ff ff 
ffff800000804ab7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804abb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804abe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804ac1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ac5:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131
    pz->exef=NULL;
ffff800000804acc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ad0:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffff800000804ad7:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    list_init(&pz->node);
ffff800000804adb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804adf:	48 05 34 03 00 00    	add    rax,0x334
ffff800000804ae5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000804ae9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804aed:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000804af4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804af8:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804aff:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000804b00:	90                   	nop
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:133
    pz->node.data=pz;
ffff800000804b01:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b05:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804b09:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:135
    
    pz->gpid=pz->pid;
ffff800000804b10:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b14:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804b16:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b1a:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    pz->sid=pz->pid;
ffff800000804b1d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b21:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804b23:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b27:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:137
    pz->fg_pgid=pz->pid;
ffff800000804b2a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b2e:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804b30:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b34:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    pz->in_bgpg=0;
ffff800000804b37:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b3b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    return 0;
ffff800000804b42:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
}
ffff800000804b47:	48 83 c4 10          	add    rsp,0x10
ffff800000804b4b:	5b                   	pop    rbx
ffff800000804b4c:	41 5f                	pop    r15
ffff800000804b4e:	5d                   	pop    rbp
ffff800000804b4f:	c3                   	ret    

ffff800000804b50 <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
int req_proc(){
ffff800000804b50:	f3 0f 1e fa          	endbr64 
ffff800000804b54:	55                   	push   rbp
ffff800000804b55:	48 89 e5             	mov    rbp,rsp
ffff800000804b58:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804b58 <req_proc+0x8>
ffff800000804b5f:	49 bb a0 8f 11 00 00 	movabs r11,0x118fa0
ffff800000804b66:	00 00 00 
ffff800000804b69:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
    int num=0;
ffff800000804b6c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000804b73:	eb 04                	jmp    ffff800000804b79 <req_proc+0x29>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:145
    num<=MAX_PROC_COUNT){
        num++;
ffff800000804b75:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000804b79:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804b80:	ff ff ff 
ffff800000804b83:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804b87:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804b8a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804b8d:	48 63 d2             	movsxd rdx,edx
ffff800000804b90:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804b97:	48 01 ca             	add    rdx,rcx
ffff800000804b9a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804b9c:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804b9f:	74 2e                	je     ffff800000804bcf <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 1)
ffff800000804ba1:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804ba8:	ff ff ff 
ffff800000804bab:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804baf:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804bb2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804bb5:	48 63 d2             	movsxd rdx,edx
ffff800000804bb8:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804bbf:	48 01 ca             	add    rdx,rcx
ffff800000804bc2:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000804bc5:	85 d2                	test   edx,edx
ffff800000804bc7:	74 06                	je     ffff800000804bcf <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 2)
ffff800000804bc9:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000804bcd:	7e a6                	jle    ffff800000804b75 <req_proc+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:147
    }
    if(num>=MAX_PROC_COUNT)
ffff800000804bcf:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000804bd3:	7e 0a                	jle    ffff800000804bdf <req_proc+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
        return -1;
ffff800000804bd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000804bda:	e9 c0 00 00 00       	jmp    ffff800000804c9f <req_proc+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:149
    task[num].pid=pidd++;
ffff800000804bdf:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff800000804be6:	ff ff ff 
ffff800000804be9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804bed:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804bef:	8d 72 01             	lea    esi,[rdx+0x1]
ffff800000804bf2:	48 b9 70 fe ff ff ff 	movabs rcx,0xfffffffffffffe70
ffff800000804bf9:	ff ff ff 
ffff800000804bfc:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000804c00:	89 31                	mov    DWORD PTR [rcx],esi
ffff800000804c02:	48 b9 b8 fe ff ff ff 	movabs rcx,0xfffffffffffffeb8
ffff800000804c09:	ff ff ff 
ffff800000804c0c:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000804c10:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff800000804c13:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000804c16:	48 63 c9             	movsxd rcx,ecx
ffff800000804c19:	48 69 c9 58 03 00 00 	imul   rcx,rcx,0x358
ffff800000804c20:	48 01 f1             	add    rcx,rsi
ffff800000804c23:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    task[num].stat=TASK_ZOMBIE;
ffff800000804c25:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804c2c:	ff ff ff 
ffff800000804c2f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804c33:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804c36:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804c39:	48 63 d2             	movsxd rdx,edx
ffff800000804c3c:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804c43:	48 01 ca             	add    rdx,rcx
ffff800000804c46:	c7 42 18 04 00 00 00 	mov    DWORD PTR [rdx+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
    task[num].utime=0;
ffff800000804c4d:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804c54:	ff ff ff 
ffff800000804c57:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804c5b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804c5e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804c61:	48 63 d2             	movsxd rdx,edx
ffff800000804c64:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804c6b:	48 01 ca             	add    rdx,rcx
ffff800000804c6e:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    task[num].priority=0;
ffff800000804c75:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804c7c:	ff ff ff 
ffff800000804c7f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000804c83:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804c86:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000804c89:	48 98                	cdqe   
ffff800000804c8b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804c92:	48 01 d0             	add    rax,rdx
ffff800000804c95:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    return num;
ffff800000804c9c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
}
ffff800000804c9f:	5d                   	pop    rbp
ffff800000804ca0:	c3                   	ret    

ffff800000804ca1 <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:156
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
ffff800000804ca1:	f3 0f 1e fa          	endbr64 
ffff800000804ca5:	55                   	push   rbp
ffff800000804ca6:	48 89 e5             	mov    rbp,rsp
ffff800000804ca9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804ca9 <set_proc+0x8>
ffff800000804cb0:	49 bb 4f 8e 11 00 00 	movabs r11,0x118e4f
ffff800000804cb7:	00 00 00 
ffff800000804cba:	4c 01 d8             	add    rax,r11
ffff800000804cbd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000804cc1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000804cc5:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000804cc9:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff800000804ccd:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffff800000804cd1:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
    struct process* proc=&task[proc_nr];
ffff800000804cd5:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804cdc:	ff ff ff 
ffff800000804cdf:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000804ce3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804ce6:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
ffff800000804ce9:	48 98                	cdqe   
ffff800000804ceb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804cf2:	48 01 d0             	add    rax,rdx
ffff800000804cf5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:158
    proc->regs.rax=rax;
ffff800000804cf9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804cfd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804d01:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
    proc->regs.rbx=rbx;
ffff800000804d08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d0c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804d10:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    proc->regs.rcx=rcx;
ffff800000804d17:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d1b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804d1f:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rdx=rdx;
ffff800000804d26:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d2a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804d2e:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:162
    proc->regs.es=es;
ffff800000804d35:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d39:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804d3d:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    proc->regs.cs=cs;
ffff800000804d44:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d48:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804d4c:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:164
    proc->regs.ss=ss;
ffff800000804d53:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d57:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
ffff800000804d5b:	48 89 90 cc 02 00 00 	mov    QWORD PTR [rax+0x2cc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165
    proc->regs.ds=ds;
ffff800000804d62:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d66:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000804d6a:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.fs=fs;
ffff800000804d71:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d75:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
ffff800000804d79:	48 89 90 dc 02 00 00 	mov    QWORD PTR [rax+0x2dc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.gs=gs;
ffff800000804d80:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d84:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff800000804d88:	48 89 90 e4 02 00 00 	mov    QWORD PTR [rax+0x2e4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.rsp=rsp;
ffff800000804d8f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d93:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff800000804d97:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->regs.rbp=rbp;
ffff800000804d9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804da2:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
ffff800000804da6:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:170
    proc->regs.rsi=rsi;
ffff800000804dad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804db1:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
ffff800000804db5:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:171
    proc->regs.rdi=rdi;
ffff800000804dbc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dc0:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
ffff800000804dc4:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
ffff800000804dcb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dcf:	48 c7 80 74 02 00 00 	mov    QWORD PTR [rax+0x274],0x202
ffff800000804dd6:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:174
    //能接受中断
    proc->regs.rip=rip;
ffff800000804dda:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dde:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
ffff800000804de2:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:176

    proc->regs.cs=cs;
ffff800000804de9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804ded:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804df1:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:177
    proc->regs.ds=ds;
ffff800000804df8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dfc:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000804e00:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:178
    proc->regs.es=es;
ffff800000804e07:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e0b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804e0f:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:179
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
ffff800000804e16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e1a:	48 b9 00 10 10 00 00 	movabs rcx,0xffff800000101000
ffff800000804e21:	80 ff ff 
ffff800000804e24:	48 89 88 64 02 00 00 	mov    QWORD PTR [rax+0x264],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:180
    proc->pml4=PML4_ADDR;
ffff800000804e2b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e2f:	48 89 88 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:183


}
ffff800000804e36:	90                   	nop
ffff800000804e37:	5d                   	pop    rbp
ffff800000804e38:	c3                   	ret    

ffff800000804e39 <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:185
void proc_zero()
{
ffff800000804e39:	f3 0f 1e fa          	endbr64 
ffff800000804e3d:	55                   	push   rbp
ffff800000804e3e:	48 89 e5             	mov    rbp,rsp
ffff800000804e41:	41 57                	push   r15
ffff800000804e43:	53                   	push   rbx
ffff800000804e44:	48 83 ec 10          	sub    rsp,0x10
ffff800000804e48:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804e48 <proc_zero+0xf>
ffff800000804e4f:	49 bb b0 8c 11 00 00 	movabs r11,0x118cb0
ffff800000804e56:	00 00 00 
ffff800000804e59:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:198 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
ffff800000804e5c:	49 89 df             	mov    r15,rbx
ffff800000804e5f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804e64:	48 ba bc 08 ef ff ff 	movabs rdx,0xffffffffffef08bc
ffff800000804e6b:	ff ff ff 
ffff800000804e6e:	48 01 da             	add    rdx,rbx
ffff800000804e71:	ff d2                	call   rdx
ffff800000804e73:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 1)
        putchar(c);
ffff800000804e76:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff800000804e7a:	89 c7                	mov    edi,eax
ffff800000804e7c:	49 89 df             	mov    r15,rbx
ffff800000804e7f:	48 b8 aa 3b ee ff ff 	movabs rax,0xffffffffffee3baa
ffff800000804e86:	ff ff ff 
ffff800000804e89:	48 01 d8             	add    rax,rbx
ffff800000804e8c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:197 (discriminator 1)
    {
ffff800000804e8e:	eb cc                	jmp    ffff800000804e5c <proc_zero+0x23>

ffff800000804e90 <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:202
    }
}
void save_rsp(){
ffff800000804e90:	f3 0f 1e fa          	endbr64 
ffff800000804e94:	55                   	push   rbp
ffff800000804e95:	48 89 e5             	mov    rbp,rsp
ffff800000804e98:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804e98 <save_rsp+0x8>
ffff800000804e9f:	49 bb 60 8c 11 00 00 	movabs r11,0x118c60
ffff800000804ea6:	00 00 00 
ffff800000804ea9:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:204
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
ffff800000804eac:	48 be f0 ff 7f 00 00 	movabs rsi,0xffff8000007ffff0
ffff800000804eb3:	80 ff ff 
ffff800000804eb6:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
    current->regs.rsp=*p;
ffff800000804eba:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000804ebe:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000804ec1:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000804ec8:	ff ff ff 
ffff800000804ecb:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000804ecf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804ed2:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:206
}
ffff800000804ed9:	90                   	nop
ffff800000804eda:	5d                   	pop    rbp
ffff800000804edb:	c3                   	ret    

ffff800000804edc <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
void manage_proc(){
ffff800000804edc:	f3 0f 1e fa          	endbr64 
ffff800000804ee0:	55                   	push   rbp
ffff800000804ee1:	48 89 e5             	mov    rbp,rsp
ffff800000804ee4:	41 57                	push   r15
ffff800000804ee6:	48 83 ec 18          	sub    rsp,0x18
ffff800000804eea:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804eea <manage_proc+0xe>
ffff800000804ef1:	49 bb 0e 8c 11 00 00 	movabs r11,0x118c0e
ffff800000804ef8:	00 00 00 
ffff800000804efb:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
    if(cur_proc!=-1)
ffff800000804efe:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804f05:	ff ff ff 
ffff800000804f08:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f0c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f0e:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804f11:	74 37                	je     ffff800000804f4a <manage_proc+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
        task[cur_proc].utime++;
ffff800000804f13:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804f1a:	ff ff ff 
ffff800000804f1d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f21:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804f24:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804f2b:	ff ff ff 
ffff800000804f2e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f32:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f34:	48 63 d2             	movsxd rdx,edx
ffff800000804f37:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804f3e:	48 01 ca             	add    rdx,rcx
ffff800000804f41:	8b 4a 1c             	mov    ecx,DWORD PTR [rdx+0x1c]
ffff800000804f44:	83 c1 01             	add    ecx,0x1
ffff800000804f47:	89 4a 1c             	mov    DWORD PTR [rdx+0x1c],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000804f4a:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804f51:	ff ff ff 
ffff800000804f54:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f58:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f5a:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804f5d:	74 70                	je     ffff800000804fcf <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 1)
ffff800000804f5f:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804f66:	ff ff ff 
ffff800000804f69:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f6d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804f70:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804f77:	ff ff ff 
ffff800000804f7a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f7e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f80:	48 63 d2             	movsxd rdx,edx
ffff800000804f83:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804f8a:	48 01 ca             	add    rdx,rcx
ffff800000804f8d:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff800000804f90:	83 fa 0a             	cmp    edx,0xa
ffff800000804f93:	77 3a                	ja     ffff800000804fcf <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
ffff800000804f95:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804f9c:	ff ff ff 
ffff800000804f9f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fa3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804fa6:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804fad:	ff ff ff 
ffff800000804fb0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fb4:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804fb6:	48 63 d2             	movsxd rdx,edx
ffff800000804fb9:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804fc0:	48 01 ca             	add    rdx,rcx
ffff800000804fc3:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000804fc6:	83 fa 02             	cmp    edx,0x2
ffff800000804fc9:	0f 84 bf 01 00 00    	je     ffff80000080518e <manage_proc+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212
        if(cur_proc!=-1)
ffff800000804fcf:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804fd6:	ff ff ff 
ffff800000804fd9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fdd:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804fdf:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804fe2:	74 35                	je     ffff800000805019 <manage_proc+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
            task[cur_proc].utime=0;
ffff800000804fe4:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804feb:	ff ff ff 
ffff800000804fee:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804ff2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804ff5:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804ffc:	ff ff ff 
ffff800000804fff:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805003:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805005:	48 63 d2             	movsxd rdx,edx
ffff800000805008:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080500f:	48 01 ca             	add    rdx,rcx
ffff800000805012:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:215
        //find
        int i=cur_proc+1;
ffff800000805019:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805020:	ff ff ff 
ffff800000805023:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805027:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805029:	83 c2 01             	add    edx,0x1
ffff80000080502c:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:216
        int times=0;
ffff80000080502f:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        //轮询，直到有一个符合条件
        while(times<10){
ffff800000805036:	eb 7b                	jmp    ffff8000008050b3 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
ffff800000805038:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080503f:	ff ff ff 
ffff800000805042:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805046:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805049:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080504c:	48 63 d2             	movsxd rdx,edx
ffff80000080504f:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805056:	48 01 ca             	add    rdx,rcx
ffff800000805059:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080505b:	83 fa ff             	cmp    edx,0xffffffff
ffff80000080505e:	74 3e                	je     ffff80000080509e <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 1)
ffff800000805060:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805067:	ff ff ff 
ffff80000080506a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080506e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805071:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805074:	48 63 d2             	movsxd rdx,edx
ffff800000805077:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080507e:	48 01 ca             	add    rdx,rcx
ffff800000805081:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000805084:	83 fa 02             	cmp    edx,0x2
ffff800000805087:	75 15                	jne    ffff80000080509e <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 2)
ffff800000805089:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805090:	ff ff ff 
ffff800000805093:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805097:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805099:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080509c:	75 21                	jne    ffff8000008050bf <manage_proc+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:222
                break;
            }
            i++;
ffff80000080509e:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
            if(i>=MAX_TASKS){
ffff8000008050a2:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff8000008050a6:	7e 0b                	jle    ffff8000008050b3 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:224
                times++;
ffff8000008050a8:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:225
                i=0;
ffff8000008050ac:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        while(times<10){
ffff8000008050b3:	83 7d e8 09          	cmp    DWORD PTR [rbp-0x18],0x9
ffff8000008050b7:	0f 8e 7b ff ff ff    	jle    ffff800000805038 <manage_proc+0x15c>
ffff8000008050bd:	eb 01                	jmp    ffff8000008050c0 <manage_proc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220
                break;
ffff8000008050bf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff8000008050c0:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
ffff8000008050c4:	0f 84 c7 00 00 00    	je     ffff800000805191 <manage_proc+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:230
        //switch
        task[cur_proc].stat=TASK_READY;
ffff8000008050ca:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008050d1:	ff ff ff 
ffff8000008050d4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008050d8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008050db:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008050e2:	ff ff ff 
ffff8000008050e5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008050e9:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008050eb:	48 63 d2             	movsxd rdx,edx
ffff8000008050ee:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008050f5:	48 01 ca             	add    rdx,rcx
ffff8000008050f8:	c7 42 18 02 00 00 00 	mov    DWORD PTR [rdx+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
        task[i].stat=TASK_RUNNING;
ffff8000008050ff:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805106:	ff ff ff 
ffff800000805109:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080510d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805110:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805113:	48 63 d2             	movsxd rdx,edx
ffff800000805116:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080511d:	48 01 ca             	add    rdx,rcx
ffff800000805120:	c7 42 18 01 00 00 00 	mov    DWORD PTR [rdx+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:232
        switch_to(&task[cur_proc], &task[i]);
ffff800000805127:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080512e:	ff ff ff 
ffff800000805131:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805135:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805138:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080513b:	48 63 d2             	movsxd rdx,edx
ffff80000080513e:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805145:	48 01 d1             	add    rcx,rdx
ffff800000805148:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080514f:	ff ff ff 
ffff800000805152:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805156:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805159:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805160:	ff ff ff 
ffff800000805163:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805167:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805169:	48 63 d2             	movsxd rdx,edx
ffff80000080516c:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805173:	48 01 f2             	add    rdx,rsi
ffff800000805176:	48 89 ce             	mov    rsi,rcx
ffff800000805179:	48 89 d7             	mov    rdi,rdx
ffff80000080517c:	49 89 c7             	mov    r15,rax
ffff80000080517f:	48 ba 76 86 ee ff ff 	movabs rdx,0xffffffffffee8676
ffff800000805186:	ff ff ff 
ffff800000805189:	48 01 c2             	add    rdx,rax
ffff80000080518c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:234
    }
    return;
ffff80000080518e:	90                   	nop
ffff80000080518f:	eb 01                	jmp    ffff800000805192 <manage_proc+0x2b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff800000805191:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
}
ffff800000805192:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000805196:	c9                   	leave  
ffff800000805197:	c3                   	ret    

ffff800000805198 <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:238

void switch_proc_tss(int pnr)
{
ffff800000805198:	f3 0f 1e fa          	endbr64 
ffff80000080519c:	55                   	push   rbp
ffff80000080519d:	48 89 e5             	mov    rbp,rsp
ffff8000008051a0:	41 57                	push   r15
ffff8000008051a2:	48 83 ec 28          	sub    rsp,0x28
ffff8000008051a6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008051a6 <switch_proc_tss+0xe>
ffff8000008051ad:	49 bb 52 89 11 00 00 	movabs r11,0x118952
ffff8000008051b4:	00 00 00 
ffff8000008051b7:	4c 01 d8             	add    rax,r11
ffff8000008051ba:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:239
    int sel=_TSS_IND(pnr)*8;
ffff8000008051bd:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008051c0:	01 d2                	add    edx,edx
ffff8000008051c2:	83 c2 05             	add    edx,0x5
ffff8000008051c5:	c1 e2 03             	shl    edx,0x3
ffff8000008051c8:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:240
    cur_proc=pnr;
ffff8000008051cb:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008051d2:	ff ff ff 
ffff8000008051d5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008051d9:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff8000008051dc:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241
    switch_proc_asm(sel);
ffff8000008051de:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008051e1:	89 d7                	mov    edi,edx
ffff8000008051e3:	49 89 c7             	mov    r15,rax
ffff8000008051e6:	48 ba 8f 59 ef ff ff 	movabs rdx,0xffffffffffef598f
ffff8000008051ed:	ff ff ff 
ffff8000008051f0:	48 01 c2             	add    rdx,rax
ffff8000008051f3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
}
ffff8000008051f5:	90                   	nop
ffff8000008051f6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008051fa:	c9                   	leave  
ffff8000008051fb:	c3                   	ret    

ffff8000008051fc <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
void switch_proc(int pnr){
ffff8000008051fc:	f3 0f 1e fa          	endbr64 
ffff800000805200:	55                   	push   rbp
ffff800000805201:	48 89 e5             	mov    rbp,rsp
ffff800000805204:	41 57                	push   r15
ffff800000805206:	53                   	push   rbx
ffff800000805207:	48 81 ec 70 03 00 00 	sub    rsp,0x370
ffff80000080520e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080520e <switch_proc+0x12>
ffff800000805215:	49 bb ea 88 11 00 00 	movabs r11,0x1188ea
ffff80000080521c:	00 00 00 
ffff80000080521f:	4c 01 db             	add    rbx,r11
ffff800000805222:	89 bd 8c fc ff ff    	mov    DWORD PTR [rbp-0x374],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:246
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
ffff800000805228:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080522f:	ff ff ff 
ffff800000805232:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805236:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805239:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff80000080523f:	48 98                	cdqe   
ffff800000805241:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805248:	48 01 c2             	add    rdx,rax
ffff80000080524b:	48 8d 85 90 fc ff ff 	lea    rax,[rbp-0x370]
ffff800000805252:	48 89 d6             	mov    rsi,rdx
ffff800000805255:	ba 6b 00 00 00       	mov    edx,0x6b
ffff80000080525a:	48 89 c7             	mov    rdi,rax
ffff80000080525d:	48 89 d1             	mov    rcx,rdx
ffff800000805260:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:247
    save_context(&task[cur_proc].tss);
ffff800000805263:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080526a:	ff ff ff 
ffff80000080526d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805271:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805274:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080527b:	ff ff ff 
ffff80000080527e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805282:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805284:	48 98                	cdqe   
ffff800000805286:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080528d:	48 01 d0             	add    rax,rdx
ffff800000805290:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff800000805296:	48 89 c7             	mov    rdi,rax
ffff800000805299:	49 89 df             	mov    r15,rbx
ffff80000080529c:	48 b8 2a 78 ee ff ff 	movabs rax,0xffffffffffee782a
ffff8000008052a3:	ff ff ff 
ffff8000008052a6:	48 01 d8             	add    rax,rbx
ffff8000008052a9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:252
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
ffff8000008052ab:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008052b2:	ff ff ff 
ffff8000008052b5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008052b9:	8b 95 8c fc ff ff    	mov    edx,DWORD PTR [rbp-0x374]
ffff8000008052bf:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:253
    int sel=_TSS_IND(pnr)*8;
ffff8000008052c1:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff8000008052c7:	01 c0                	add    eax,eax
ffff8000008052c9:	83 c0 05             	add    eax,0x5
ffff8000008052cc:	c1 e0 03             	shl    eax,0x3
ffff8000008052cf:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:254
    switch_to(NULL, &task[pnr].tss);
ffff8000008052d2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008052d9:	ff ff ff 
ffff8000008052dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008052e0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008052e3:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff8000008052e9:	48 98                	cdqe   
ffff8000008052eb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008052f2:	48 01 d0             	add    rax,rdx
ffff8000008052f5:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff8000008052fb:	48 89 c6             	mov    rsi,rax
ffff8000008052fe:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805303:	49 89 df             	mov    r15,rbx
ffff800000805306:	48 b8 76 86 ee ff ff 	movabs rax,0xffffffffffee8676
ffff80000080530d:	ff ff ff 
ffff800000805310:	48 01 d8             	add    rax,rbx
ffff800000805313:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:257
    //asm volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
ffff800000805315:	90                   	nop
ffff800000805316:	48 81 c4 70 03 00 00 	add    rsp,0x370
ffff80000080531d:	5b                   	pop    rbx
ffff80000080531e:	41 5f                	pop    r15
ffff800000805320:	5d                   	pop    rbp
ffff800000805321:	c3                   	ret    

ffff800000805322 <save_context>:
save_context():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:259
void save_context(TSS *tss)
{
ffff800000805322:	f3 0f 1e fa          	endbr64 
ffff800000805326:	55                   	push   rbp
ffff800000805327:	48 89 e5             	mov    rbp,rsp
ffff80000080532a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080532a <save_context+0x8>
ffff800000805331:	49 bb ce 87 11 00 00 	movabs r11,0x1187ce
ffff800000805338:	00 00 00 
ffff80000080533b:	4c 01 d8             	add    rax,r11
ffff80000080533e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:270
//    tss->esi=scene_saver.esi;
//    tss->edi=scene_saver.edi;
//    tss->eflags=scene_saver.eflags;
//    tss->esp=scene_saver.esp;
//    tss->ebp=scene_saver.ebp;
}
ffff800000805342:	90                   	nop
ffff800000805343:	5d                   	pop    rbp
ffff800000805344:	c3                   	ret    

ffff800000805345 <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:431
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
ffff800000805345:	f3 0f 1e fa          	endbr64 
ffff800000805349:	55                   	push   rbp
ffff80000080534a:	48 89 e5             	mov    rbp,rsp
ffff80000080534d:	41 57                	push   r15
ffff80000080534f:	53                   	push   rbx
ffff800000805350:	48 83 ec 60          	sub    rsp,0x60
ffff800000805354:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805354 <palloc+0xf>
ffff80000080535b:	49 bb a4 87 11 00 00 	movabs r11,0x1187a4
ffff800000805362:	00 00 00 
ffff800000805365:	4c 01 db             	add    rbx,r11
ffff800000805368:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff80000080536b:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:432
    int page_c=size/4096+size%4096?1:0;
ffff80000080536e:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff800000805371:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000805377:	85 c0                	test   eax,eax
ffff800000805379:	0f 48 c2             	cmovs  eax,edx
ffff80000080537c:	c1 f8 0c             	sar    eax,0xc
ffff80000080537f:	89 c1                	mov    ecx,eax
ffff800000805381:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff800000805384:	99                   	cdq    
ffff800000805385:	c1 ea 14             	shr    edx,0x14
ffff800000805388:	01 d0                	add    eax,edx
ffff80000080538a:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080538f:	29 d0                	sub    eax,edx
ffff800000805391:	01 c8                	add    eax,ecx
ffff800000805393:	85 c0                	test   eax,eax
ffff800000805395:	0f 95 c0             	setne  al
ffff800000805398:	0f b6 c0             	movzx  eax,al
ffff80000080539b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433
    int c=0;
ffff80000080539e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434
    void *ptr=NULL;
ffff8000008053a5:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008053ac:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:435
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
ffff8000008053ad:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008053b4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436
    pgind++;
ffff8000008053b5:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437
    for(int i=1;i<1024;i++)
ffff8000008053ba:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
ffff8000008053c1:	e9 07 03 00 00       	jmp    ffff8000008056cd <palloc+0x388>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:439
    {
        page_item* tblp=*pgind&0xfffff000;
ffff8000008053c6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053ca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008053cd:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff8000008053d2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440
        for(int j=0;j<1024;j++)
ffff8000008053d6:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008053dd:	e9 d5 02 00 00       	jmp    ffff8000008056b7 <palloc+0x372>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:442
        {
            int v=*tblp&PAGE_PRESENT;
ffff8000008053e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008053e6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008053e9:	83 e0 01             	and    eax,0x1
ffff8000008053ec:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:443
            if(!v)
ffff8000008053ef:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff8000008053f3:	0f 85 b5 02 00 00    	jne    ffff8000008056ae <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:445
            {
                int new_pg=req_a_page();
ffff8000008053f9:	49 89 df             	mov    r15,rbx
ffff8000008053fc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805401:	48 ba 29 4f ee ff ff 	movabs rdx,0xffffffffffee4f29
ffff800000805408:	ff ff ff 
ffff80000080540b:	48 01 da             	add    rdx,rbx
ffff80000080540e:	ff d2                	call   rdx
ffff800000805410:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
                if(new_pg==-1)
ffff800000805413:	83 7d b8 ff          	cmp    DWORD PTR [rbp-0x48],0xffffffff
ffff800000805417:	0f 85 0c 01 00 00    	jne    ffff800000805529 <palloc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:449
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff80000080541d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805424:	ff ff ff 
ffff800000805427:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080542b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080542e:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805431:	48 98                	cdqe   
ffff800000805433:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080543a:	48 01 d0             	add    rax,rdx
ffff80000080543d:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000805444:	0f b7 c0             	movzx  eax,ax
ffff800000805447:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:450
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff80000080544a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805451:	ff ff ff 
ffff800000805454:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805458:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080545b:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080545e:	48 98                	cdqe   
ffff800000805460:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805467:	48 01 d0             	add    rax,rdx
ffff80000080546a:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000805471:	0f b7 c0             	movzx  eax,ax
ffff800000805474:	c1 e0 10             	shl    eax,0x10
ffff800000805477:	25 00 00 0f 00       	and    eax,0xf0000
ffff80000080547c:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:451
                    size+=c;
ffff80000080547f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000805482:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:452
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff800000805485:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080548c:	ff ff ff 
ffff80000080548f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805493:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805496:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805499:	48 98                	cdqe   
ffff80000080549b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008054a2:	48 01 d0             	add    rax,rdx
ffff8000008054a5:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
ffff8000008054a8:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:453
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff8000008054af:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008054b6:	ff ff ff 
ffff8000008054b9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008054bd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008054c0:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008054c3:	48 98                	cdqe   
ffff8000008054c5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008054cc:	48 01 d0             	add    rax,rdx
ffff8000008054cf:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008054d6:	0f b7 c0             	movzx  eax,ax
ffff8000008054d9:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:454
                    tmp_attr&=0xfff0;
ffff8000008054dc:	81 65 a0 f0 ff 00 00 	and    DWORD PTR [rbp-0x60],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:455
                    tmp_attr+=(size>>16)&0xf;
ffff8000008054e3:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008054e6:	c1 e8 10             	shr    eax,0x10
ffff8000008054e9:	83 e0 0f             	and    eax,0xf
ffff8000008054ec:	89 c2                	mov    edx,eax
ffff8000008054ee:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffff8000008054f1:	01 d0                	add    eax,edx
ffff8000008054f3:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:456
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff8000008054f6:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008054fd:	ff ff ff 
ffff800000805500:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805504:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805507:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080550a:	48 98                	cdqe   
ffff80000080550c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805513:	48 01 d0             	add    rax,rdx
ffff800000805516:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
ffff800000805519:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:457
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
ffff800000805520:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000805524:	e9 b6 01 00 00       	jmp    ffff8000008056df <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:459
                }
                int addr=get_phyaddr(new_pg);
ffff800000805529:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080552c:	89 c7                	mov    edi,eax
ffff80000080552e:	49 89 df             	mov    r15,rbx
ffff800000805531:	48 b8 16 53 ee ff ff 	movabs rax,0xffffffffffee5316
ffff800000805538:	ff ff ff 
ffff80000080553b:	48 01 d8             	add    rax,rbx
ffff80000080553e:	ff d0                	call   rax
ffff800000805540:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:460
                set_page_item(tblp,addr,PAGE_PRESENT|\
ffff800000805543:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
ffff800000805546:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080554a:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080554f:	89 ce                	mov    esi,ecx
ffff800000805551:	48 89 c7             	mov    rdi,rax
ffff800000805554:	49 89 df             	mov    r15,rbx
ffff800000805557:	48 b8 4a 53 ee ff ff 	movabs rax,0xffffffffffee534a
ffff80000080555e:	ff ff ff 
ffff800000805561:	48 01 d8             	add    rax,rbx
ffff800000805564:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:462
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
ffff800000805566:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805569:	c1 e0 0a             	shl    eax,0xa
ffff80000080556c:	89 c2                	mov    edx,eax
ffff80000080556e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000805571:	01 d0                	add    eax,edx
ffff800000805573:	c1 e0 0c             	shl    eax,0xc
ffff800000805576:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:463
                if(ptr==NULL)
ffff800000805579:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080557e:	75 13                	jne    ffff800000805593 <palloc+0x24e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:466
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
ffff800000805580:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff800000805587:	ff ff ff 
ffff80000080558a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080558e:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
ffff800000805591:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:468
                }
                page_c--;
ffff800000805593:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                c++;
ffff800000805597:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                if(page_c==0)
ffff80000080559b:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080559f:	0f 85 09 01 00 00    	jne    ffff8000008056ae <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:473
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff8000008055a5:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008055ac:	ff ff ff 
ffff8000008055af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055b3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008055b6:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008055b9:	48 98                	cdqe   
ffff8000008055bb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008055c2:	48 01 d0             	add    rax,rdx
ffff8000008055c5:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff8000008055cc:	0f b7 c0             	movzx  eax,ax
ffff8000008055cf:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:474
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff8000008055d2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008055d9:	ff ff ff 
ffff8000008055dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055e0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008055e3:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008055e6:	48 98                	cdqe   
ffff8000008055e8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008055ef:	48 01 d0             	add    rax,rdx
ffff8000008055f2:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008055f9:	0f b7 c0             	movzx  eax,ax
ffff8000008055fc:	c1 e0 10             	shl    eax,0x10
ffff8000008055ff:	25 00 00 0f 00       	and    eax,0xf0000
ffff800000805604:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:475
                    size+=c;
ffff800000805607:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080560a:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:476
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff80000080560d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805614:	ff ff ff 
ffff800000805617:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080561b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080561e:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805621:	48 98                	cdqe   
ffff800000805623:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080562a:	48 01 d0             	add    rax,rdx
ffff80000080562d:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000805630:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:477
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff800000805637:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080563e:	ff ff ff 
ffff800000805641:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805645:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805648:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080564b:	48 98                	cdqe   
ffff80000080564d:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805654:	48 01 d0             	add    rax,rdx
ffff800000805657:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff80000080565e:	0f b7 c0             	movzx  eax,ax
ffff800000805661:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:478
                    tmp_attr&=0xfff0;
ffff800000805664:	81 65 a8 f0 ff 00 00 	and    DWORD PTR [rbp-0x58],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:479
                    tmp_attr+=(size>>16)&0xf;
ffff80000080566b:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080566e:	c1 e8 10             	shr    eax,0x10
ffff800000805671:	83 e0 0f             	and    eax,0xf
ffff800000805674:	89 c2                	mov    edx,eax
ffff800000805676:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
ffff800000805679:	01 d0                	add    eax,edx
ffff80000080567b:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:480
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff80000080567e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805685:	ff ff ff 
ffff800000805688:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080568c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080568f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805692:	48 98                	cdqe   
ffff800000805694:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080569b:	48 01 d0             	add    rax,rdx
ffff80000080569e:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffff8000008056a1:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:481
                    return ptr;
ffff8000008056a8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008056ac:	eb 31                	jmp    ffff8000008056df <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:484 (discriminator 2)
                }
            }
            tblp++;
ffff8000008056ae:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440 (discriminator 2)
        for(int j=0;j<1024;j++)
ffff8000008056b3:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440 (discriminator 1)
ffff8000008056b7:	81 7d cc ff 03 00 00 	cmp    DWORD PTR [rbp-0x34],0x3ff
ffff8000008056be:	0f 8e 1e fd ff ff    	jle    ffff8000008053e2 <palloc+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:486 (discriminator 2)
        }
        pgind++;
ffff8000008056c4:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437 (discriminator 2)
    for(int i=1;i<1024;i++)
ffff8000008056c9:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437 (discriminator 1)
ffff8000008056cd:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
ffff8000008056d4:	0f 8e ec fc ff ff    	jle    ffff8000008053c6 <palloc+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:488
    }
    return NULL;
ffff8000008056da:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:489
}
ffff8000008056df:	48 83 c4 60          	add    rsp,0x60
ffff8000008056e3:	5b                   	pop    rbx
ffff8000008056e4:	41 5f                	pop    r15
ffff8000008056e6:	5d                   	pop    rbp
ffff8000008056e7:	c3                   	ret    

ffff8000008056e8 <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:492
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
ffff8000008056e8:	f3 0f 1e fa          	endbr64 
ffff8000008056ec:	55                   	push   rbp
ffff8000008056ed:	48 89 e5             	mov    rbp,rsp
ffff8000008056f0:	41 57                	push   r15
ffff8000008056f2:	48 83 ec 18          	sub    rsp,0x18
ffff8000008056f6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008056f6 <malloc+0xe>
ffff8000008056fd:	49 bb 02 84 11 00 00 	movabs r11,0x118402
ffff800000805704:	00 00 00 
ffff800000805707:	4c 01 d8             	add    rax,r11
ffff80000080570a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:493
    return palloc(cur_proc,size);
ffff80000080570d:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805714:	ff ff ff 
ffff800000805717:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080571b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080571d:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff800000805720:	89 ce                	mov    esi,ecx
ffff800000805722:	89 d7                	mov    edi,edx
ffff800000805724:	49 89 c7             	mov    r15,rax
ffff800000805727:	48 ba 4d 78 ee ff ff 	movabs rdx,0xffffffffffee784d
ffff80000080572e:	ff ff ff 
ffff800000805731:	48 01 c2             	add    rdx,rax
ffff800000805734:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:494
}
ffff800000805736:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080573a:	c9                   	leave  
ffff80000080573b:	c3                   	ret    

ffff80000080573c <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:496
void proc_end()
{
ffff80000080573c:	f3 0f 1e fa          	endbr64 
ffff800000805740:	55                   	push   rbp
ffff800000805741:	48 89 e5             	mov    rbp,rsp
ffff800000805744:	41 57                	push   r15
ffff800000805746:	53                   	push   rbx
ffff800000805747:	48 83 ec 10          	sub    rsp,0x10
ffff80000080574b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080574b <proc_end+0xf>
ffff800000805752:	49 bb ad 83 11 00 00 	movabs r11,0x1183ad
ffff800000805759:	00 00 00 
ffff80000080575c:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:498
    int ret;
    asm volatile("mov %%eax,%0":"=m"(ret));
ffff80000080575f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:502
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //asm volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
ffff800000805762:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000805769:	ff ff ff 
ffff80000080576c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805770:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805772:	89 c7                	mov    edi,eax
ffff800000805774:	49 89 df             	mov    r15,rbx
ffff800000805777:	48 b8 8b 7d ee ff ff 	movabs rax,0xffffffffffee7d8b
ffff80000080577e:	ff ff ff 
ffff800000805781:	48 01 d8             	add    rax,rbx
ffff800000805784:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:503
    if(task[cur_proc].parent_pid!=-1){
ffff800000805786:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080578d:	ff ff ff 
ffff800000805790:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805794:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805797:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080579e:	ff ff ff 
ffff8000008057a1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057a5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008057a7:	48 98                	cdqe   
ffff8000008057a9:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008057b0:	48 01 d0             	add    rax,rdx
ffff8000008057b3:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff8000008057b9:	83 f8 ff             	cmp    eax,0xffffffff
ffff8000008057bc:	0f 84 a0 00 00 00    	je     ffff800000805862 <proc_end+0x126>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:504
        task[task[cur_proc].parent_pid].stat=TASK_READY;
ffff8000008057c2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008057c9:	ff ff ff 
ffff8000008057cc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057d0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008057d3:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008057da:	ff ff ff 
ffff8000008057dd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057e1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008057e4:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008057eb:	ff ff ff 
ffff8000008057ee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057f2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008057f4:	48 98                	cdqe   
ffff8000008057f6:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008057fd:	48 01 c8             	add    rax,rcx
ffff800000805800:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000805806:	89 c0                	mov    eax,eax
ffff800000805808:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080580f:	48 01 d0             	add    rax,rdx
ffff800000805812:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:505
        switch_proc_tss(task[cur_proc].parent_pid);
ffff800000805819:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805820:	ff ff ff 
ffff800000805823:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805827:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080582a:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000805831:	ff ff ff 
ffff800000805834:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805838:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080583a:	48 98                	cdqe   
ffff80000080583c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805843:	48 01 d0             	add    rax,rdx
ffff800000805846:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff80000080584c:	89 c7                	mov    edi,eax
ffff80000080584e:	49 89 df             	mov    r15,rbx
ffff800000805851:	48 b8 a0 76 ee ff ff 	movabs rax,0xffffffffffee76a0
ffff800000805858:	ff ff ff 
ffff80000080585b:	48 01 d8             	add    rax,rbx
ffff80000080585e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
ffff800000805860:	eb 17                	jmp    ffff800000805879 <proc_end+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:508
        switch_proc_tss(0);
ffff800000805862:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805867:	49 89 df             	mov    r15,rbx
ffff80000080586a:	48 b8 a0 76 ee ff ff 	movabs rax,0xffffffffffee76a0
ffff800000805871:	ff ff ff 
ffff800000805874:	48 01 d8             	add    rax,rbx
ffff800000805877:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
}
ffff800000805879:	90                   	nop
ffff80000080587a:	48 83 c4 10          	add    rsp,0x10
ffff80000080587e:	5b                   	pop    rbx
ffff80000080587f:	41 5f                	pop    r15
ffff800000805881:	5d                   	pop    rbp
ffff800000805882:	c3                   	ret    

ffff800000805883 <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:512
void del_proc(int pnr)
{
ffff800000805883:	f3 0f 1e fa          	endbr64 
ffff800000805887:	55                   	push   rbp
ffff800000805888:	48 89 e5             	mov    rbp,rsp
ffff80000080588b:	41 57                	push   r15
ffff80000080588d:	53                   	push   rbx
ffff80000080588e:	48 83 ec 20          	sub    rsp,0x20
ffff800000805892:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805892 <del_proc+0xf>
ffff800000805899:	49 bb 66 82 11 00 00 	movabs r11,0x118266
ffff8000008058a0:	00 00 00 
ffff8000008058a3:	4c 01 db             	add    rbx,r11
ffff8000008058a6:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:513
    task[pnr].stat=TASK_ZOMBIE;
ffff8000008058a9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008058b0:	ff ff ff 
ffff8000008058b3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008058b7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008058ba:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008058bd:	48 98                	cdqe   
ffff8000008058bf:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008058c6:	48 01 d0             	add    rax,rdx
ffff8000008058c9:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:516
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
ffff8000008058d0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008058d7:	ff ff ff 
ffff8000008058da:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008058de:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008058e1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008058e4:	48 98                	cdqe   
ffff8000008058e6:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008058ed:	48 01 d0             	add    rax,rdx
ffff8000008058f0:	48 89 c7             	mov    rdi,rax
ffff8000008058f3:	49 89 df             	mov    r15,rbx
ffff8000008058f6:	48 b8 6d 94 ee ff ff 	movabs rax,0xffffffffffee946d
ffff8000008058fd:	ff ff ff 
ffff800000805900:	48 01 d8             	add    rax,rbx
ffff800000805903:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:518
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
ffff800000805905:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080590c:	ff ff ff 
ffff80000080590f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805913:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805916:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805919:	48 98                	cdqe   
ffff80000080591b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805922:	48 01 d0             	add    rax,rdx
ffff800000805925:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff80000080592c:	48 89 c7             	mov    rdi,rax
ffff80000080592f:	49 89 df             	mov    r15,rbx
ffff800000805932:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff800000805939:	ff ff ff 
ffff80000080593c:	48 01 d8             	add    rax,rbx
ffff80000080593f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000805941:	c7 45 ec 03 00 00 00 	mov    DWORD PTR [rbp-0x14],0x3
ffff800000805948:	eb 4f                	jmp    ffff800000805999 <del_proc+0x116>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521
        if(task[pnr].openf[i]){
ffff80000080594a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805951:	ff ff ff 
ffff800000805954:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805958:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080595b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080595e:	48 98                	cdqe   
ffff800000805960:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805967:	48 01 d0             	add    rax,rdx
ffff80000080596a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080596d:	48 63 d2             	movsxd rdx,edx
ffff800000805970:	48 83 c2 1e          	add    rdx,0x1e
ffff800000805974:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000805979:	48 85 c0             	test   rax,rax
ffff80000080597c:	74 17                	je     ffff800000805995 <del_proc+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
            sys_close(i);
ffff80000080597e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805981:	89 c7                	mov    edi,eax
ffff800000805983:	49 89 df             	mov    r15,rbx
ffff800000805986:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff80000080598d:	ff ff ff 
ffff800000805990:	48 01 d8             	add    rax,rbx
ffff800000805993:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000805995:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520 (discriminator 1)
ffff800000805999:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080599d:	7e ab                	jle    ffff80000080594a <del_proc+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:526
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
ffff80000080599f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008059a6:	ff ff ff 
ffff8000008059a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008059ad:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008059b0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008059b3:	48 98                	cdqe   
ffff8000008059b5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008059bc:	48 01 d0             	add    rax,rdx
ffff8000008059bf:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff8000008059c2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008059c9:	ff ff ff 
ffff8000008059cc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008059d0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008059d3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008059d6:	48 98                	cdqe   
ffff8000008059d8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008059df:	48 01 c8             	add    rax,rcx
ffff8000008059e2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008059e4:	39 c2                	cmp    edx,eax
ffff8000008059e6:	75 79                	jne    ffff800000805a61 <del_proc+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:528
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
ffff8000008059e8:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008059ed:	be 02 00 00 00       	mov    esi,0x2
ffff8000008059f2:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008059f7:	49 89 df             	mov    r15,rbx
ffff8000008059fa:	48 b8 fa a1 ee ff ff 	movabs rax,0xffffffffffeea1fa
ffff800000805a01:	ff ff ff 
ffff800000805a04:	48 01 d8             	add    rax,rbx
ffff800000805a07:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:529
        sys_close(0);
ffff800000805a09:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805a0e:	49 89 df             	mov    r15,rbx
ffff800000805a11:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff800000805a18:	ff ff ff 
ffff800000805a1b:	48 01 d8             	add    rax,rbx
ffff800000805a1e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:530
        sys_close(1);
ffff800000805a20:	bf 01 00 00 00       	mov    edi,0x1
ffff800000805a25:	49 89 df             	mov    r15,rbx
ffff800000805a28:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff800000805a2f:	ff ff ff 
ffff800000805a32:	48 01 d8             	add    rax,rbx
ffff800000805a35:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:531
        sys_close(2);
ffff800000805a37:	bf 02 00 00 00       	mov    edi,0x2
ffff800000805a3c:	49 89 df             	mov    r15,rbx
ffff800000805a3f:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff800000805a46:	ff ff ff 
ffff800000805a49:	48 01 d8             	add    rax,rbx
ffff800000805a4c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
ffff800000805a4e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000805a55:	eb 04                	jmp    ffff800000805a5b <del_proc+0x1d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533 (discriminator 3)
ffff800000805a57:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533 (discriminator 1)
ffff800000805a5b:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000805a5f:	7e f6                	jle    ffff800000805a57 <del_proc+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
ffff800000805a61:	90                   	nop
ffff800000805a62:	48 83 c4 20          	add    rsp,0x20
ffff800000805a66:	5b                   	pop    rbx
ffff800000805a67:	41 5f                	pop    r15
ffff800000805a69:	5d                   	pop    rbp
ffff800000805a6a:	c3                   	ret    

ffff800000805a6b <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:546

int set_proc_stat(int pid,int stat)
{
ffff800000805a6b:	f3 0f 1e fa          	endbr64 
ffff800000805a6f:	55                   	push   rbp
ffff800000805a70:	48 89 e5             	mov    rbp,rsp
ffff800000805a73:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805a73 <set_proc_stat+0x8>
ffff800000805a7a:	49 bb 85 80 11 00 00 	movabs r11,0x118085
ffff800000805a81:	00 00 00 
ffff800000805a84:	4c 01 d8             	add    rax,r11
ffff800000805a87:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000805a8a:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547
    if(pid==-1)return -1;
ffff800000805a8d:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000805a91:	75 0a                	jne    ffff800000805a9d <set_proc_stat+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547 (discriminator 1)
ffff800000805a93:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805a98:	e9 b9 00 00 00       	jmp    ffff800000805b56 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:548
    int i=0;
ffff800000805a9d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549
    for(;task[i].pid!=pid;i++);
ffff800000805aa4:	eb 04                	jmp    ffff800000805aaa <set_proc_stat+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549 (discriminator 2)
ffff800000805aa6:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549 (discriminator 1)
ffff800000805aaa:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805ab1:	ff ff ff 
ffff800000805ab4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805ab8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805abb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805abe:	48 63 d2             	movsxd rdx,edx
ffff800000805ac1:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805ac8:	48 01 ca             	add    rdx,rcx
ffff800000805acb:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805acd:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805ad0:	39 d1                	cmp    ecx,edx
ffff800000805ad2:	75 d2                	jne    ffff800000805aa6 <set_proc_stat+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550
    if(i==MAX_PROC_COUNT)return -1;
ffff800000805ad4:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000805ad8:	75 07                	jne    ffff800000805ae1 <set_proc_stat+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550 (discriminator 1)
ffff800000805ada:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805adf:	eb 75                	jmp    ffff800000805b56 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:551
    task[i].stat=stat;
ffff800000805ae1:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805ae8:	ff ff ff 
ffff800000805aeb:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805aef:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805af2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805af5:	48 63 d2             	movsxd rdx,edx
ffff800000805af8:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805aff:	48 01 d1             	add    rcx,rdx
ffff800000805b02:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805b05:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:553
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
ffff800000805b08:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805b0f:	ff ff ff 
ffff800000805b12:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b16:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805b18:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000805b1b:	75 34                	jne    ffff800000805b51 <set_proc_stat+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:554
        task[cur_proc].utime=MAX_UTIME;
ffff800000805b1d:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805b24:	ff ff ff 
ffff800000805b27:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b2b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805b2e:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805b35:	ff ff ff 
ffff800000805b38:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805b3c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805b3e:	48 98                	cdqe   
ffff800000805b40:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805b47:	48 01 c8             	add    rax,rcx
ffff800000805b4a:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:555
    return 0;
ffff800000805b51:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:556
}
ffff800000805b56:	5d                   	pop    rbp
ffff800000805b57:	c3                   	ret    

ffff800000805b58 <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:588
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
ffff800000805b58:	f3 0f 1e fa          	endbr64 
ffff800000805b5c:	55                   	push   rbp
ffff800000805b5d:	48 89 e5             	mov    rbp,rsp
ffff800000805b60:	41 57                	push   r15
ffff800000805b62:	53                   	push   rbx
ffff800000805b63:	48 83 ec 10          	sub    rsp,0x10
ffff800000805b67:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805b67 <sys_exit+0xf>
ffff800000805b6e:	49 bb 91 7f 11 00 00 	movabs r11,0x117f91
ffff800000805b75:	00 00 00 
ffff800000805b78:	4c 01 db             	add    rbx,r11
ffff800000805b7b:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:589
    current->exit_code=code;
ffff800000805b7e:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000805b85:	ff ff ff 
ffff800000805b88:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b8c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805b8f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805b92:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:590
    del_proc(cur_proc);
ffff800000805b95:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000805b9c:	ff ff ff 
ffff800000805b9f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805ba3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805ba5:	89 c7                	mov    edi,eax
ffff800000805ba7:	49 89 df             	mov    r15,rbx
ffff800000805baa:	48 b8 8b 7d ee ff ff 	movabs rax,0xffffffffffee7d8b
ffff800000805bb1:	ff ff ff 
ffff800000805bb4:	48 01 d8             	add    rax,rbx
ffff800000805bb7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:592 (discriminator 1)
    while(1)
        manage_proc();
ffff800000805bb9:	49 89 df             	mov    r15,rbx
ffff800000805bbc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805bc1:	48 ba e4 73 ee ff ff 	movabs rdx,0xffffffffffee73e4
ffff800000805bc8:	ff ff ff 
ffff800000805bcb:	48 01 da             	add    rdx,rbx
ffff800000805bce:	ff d2                	call   rdx
ffff800000805bd0:	eb e7                	jmp    ffff800000805bb9 <sys_exit+0x61>

ffff800000805bd2 <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:648
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
ffff800000805bd2:	f3 0f 1e fa          	endbr64 
ffff800000805bd6:	55                   	push   rbp
ffff800000805bd7:	48 89 e5             	mov    rbp,rsp
ffff800000805bda:	41 57                	push   r15
ffff800000805bdc:	41 54                	push   r12
ffff800000805bde:	53                   	push   rbx
ffff800000805bdf:	48 83 ec 48          	sub    rsp,0x48
ffff800000805be3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805be3 <reg_proc+0x11>
ffff800000805bea:	49 bb 15 7f 11 00 00 	movabs r11,0x117f15
ffff800000805bf1:	00 00 00 
ffff800000805bf4:	4c 01 db             	add    rbx,r11
ffff800000805bf7:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000805bfb:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff800000805bff:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:650
    
    int i=req_proc();
ffff800000805c03:	49 89 df             	mov    r15,rbx
ffff800000805c06:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805c0b:	48 ba 58 70 ee ff ff 	movabs rdx,0xffffffffffee7058
ffff800000805c12:	ff ff ff 
ffff800000805c15:	48 01 da             	add    rdx,rbx
ffff800000805c18:	ff d2                	call   rdx
ffff800000805c1a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651
    if(i==-1)return -1;
ffff800000805c1d:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000805c21:	75 0a                	jne    ffff800000805c2d <reg_proc+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651 (discriminator 1)
ffff800000805c23:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805c28:	e9 7e 02 00 00       	jmp    ffff800000805eab <reg_proc+0x2d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:654

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
ffff800000805c2d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000805c31:	48 83 ec 08          	sub    rsp,0x8
ffff800000805c35:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805c38:	52                   	push   rdx
ffff800000805c39:	6a 00                	push   0x0
ffff800000805c3b:	50                   	push   rax
ffff800000805c3c:	6a 00                	push   0x0
ffff800000805c3e:	6a 00                	push   0x0
ffff800000805c40:	6a 00                	push   0x0
ffff800000805c42:	68 00 f0 ff ff       	push   0xfffffffffffff000
ffff800000805c47:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
ffff800000805c4e:	00 
ffff800000805c4f:	6a 28                	push   0x28
ffff800000805c51:	6a 28                	push   0x28
ffff800000805c53:	6a 28                	push   0x28
ffff800000805c55:	6a 28                	push   0x28
ffff800000805c57:	41 b9 30 00 00 00    	mov    r9d,0x30
ffff800000805c5d:	41 b8 28 00 00 00    	mov    r8d,0x28
ffff800000805c63:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000805c68:	ba 00 00 00 00       	mov    edx,0x0
ffff800000805c6d:	be 00 00 00 00       	mov    esi,0x0
ffff800000805c72:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805c77:	49 89 df             	mov    r15,rbx
ffff800000805c7a:	48 b8 a9 71 ee ff ff 	movabs rax,0xffffffffffee71a9
ffff800000805c81:	ff ff ff 
ffff800000805c84:	48 01 d8             	add    rax,rbx
ffff800000805c87:	ff d0                	call   rax
ffff800000805c89:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:656
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc();
ffff800000805c8d:	49 89 df             	mov    r15,rbx
ffff800000805c90:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805c95:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000805c9c:	ff ff ff 
ffff800000805c9f:	48 01 da             	add    rdx,rbx
ffff800000805ca2:	ff d2                	call   rdx
ffff800000805ca4:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805cab:	ff ff ff 
ffff800000805cae:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000805cb2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805cb5:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805cb8:	48 63 d2             	movsxd rdx,edx
ffff800000805cbb:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805cc2:	48 01 ca             	add    rdx,rcx
ffff800000805cc5:	48 89 82 e0 00 00 00 	mov    QWORD PTR [rdx+0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:657
    task[i].pml4[0]= kmalloc();
ffff800000805ccc:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805cd3:	ff ff ff 
ffff800000805cd6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805cda:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805cdd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805ce0:	48 98                	cdqe   
ffff800000805ce2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805ce9:	48 01 d0             	add    rax,rdx
ffff800000805cec:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000805cf3:	49 89 df             	mov    r15,rbx
ffff800000805cf6:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805cfb:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000805d02:	ff ff ff 
ffff800000805d05:	48 01 da             	add    rdx,rbx
ffff800000805d08:	ff d2                	call   rdx
ffff800000805d0a:	49 89 04 24          	mov    QWORD PTR [r12],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:658
    unsigned long *pdpt=task[i].pml4;
ffff800000805d0e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805d15:	ff ff ff 
ffff800000805d18:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805d1c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805d1f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805d22:	48 98                	cdqe   
ffff800000805d24:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805d2b:	48 01 d0             	add    rax,rdx
ffff800000805d2e:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000805d35:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:660
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
ffff800000805d39:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805d3d:	ba 03 00 00 00       	mov    edx,0x3
ffff800000805d42:	be 00 00 00 00       	mov    esi,0x0
ffff800000805d47:	48 89 c7             	mov    rdi,rax
ffff800000805d4a:	49 89 df             	mov    r15,rbx
ffff800000805d4d:	48 b8 af 53 ee ff ff 	movabs rax,0xffffffffffee53af
ffff800000805d54:	ff ff ff 
ffff800000805d57:	48 01 d8             	add    rax,rbx
ffff800000805d5a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:663

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc();
ffff800000805d5c:	49 89 df             	mov    r15,rbx
ffff800000805d5f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805d64:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000805d6b:	ff ff ff 
ffff800000805d6e:	48 01 da             	add    rdx,rbx
ffff800000805d71:	ff d2                	call   rdx
ffff800000805d73:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:664
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
ffff800000805d77:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805d7b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805d7f:	48 83 c0 18          	add    rax,0x18
ffff800000805d83:	48 83 ca 07          	or     rdx,0x7
ffff800000805d87:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:665
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
ffff800000805d8a:	49 89 df             	mov    r15,rbx
ffff800000805d8d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805d92:	48 ba 29 4f ee ff ff 	movabs rdx,0xffffffffffee4f29
ffff800000805d99:	ff ff ff 
ffff800000805d9c:	48 01 da             	add    rdx,rbx
ffff800000805d9f:	ff d2                	call   rdx
ffff800000805da1:	89 c7                	mov    edi,eax
ffff800000805da3:	49 89 df             	mov    r15,rbx
ffff800000805da6:	48 b8 16 53 ee ff ff 	movabs rax,0xffffffffffee5316
ffff800000805dad:	ff ff ff 
ffff800000805db0:	48 01 d8             	add    rax,rbx
ffff800000805db3:	ff d0                	call   rax
ffff800000805db5:	89 c1                	mov    ecx,eax
ffff800000805db7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805dbb:	48 05 f8 0f 00 00    	add    rax,0xff8
ffff800000805dc1:	ba 06 00 00 00       	mov    edx,0x6
ffff800000805dc6:	89 ce                	mov    esi,ecx
ffff800000805dc8:	48 89 c7             	mov    rdi,rax
ffff800000805dcb:	49 89 df             	mov    r15,rbx
ffff800000805dce:	48 b8 1a 54 ee ff ff 	movabs rax,0xffffffffffee541a
ffff800000805dd5:	ff ff ff 
ffff800000805dd8:	48 01 d8             	add    rax,rbx
ffff800000805ddb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:666
    task[i].regs.cr3=task[i].pml4;
ffff800000805ddd:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805de4:	ff ff ff 
ffff800000805de7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805deb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805dee:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805df1:	48 98                	cdqe   
ffff800000805df3:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805dfa:	48 01 d0             	add    rax,rdx
ffff800000805dfd:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000805e04:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805e0b:	ff ff ff 
ffff800000805e0e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e12:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805e15:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e18:	48 98                	cdqe   
ffff800000805e1a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805e21:	48 01 c8             	add    rax,rcx
ffff800000805e24:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:668

    task[i].stat=TASK_READY;
ffff800000805e2b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805e32:	ff ff ff 
ffff800000805e35:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e39:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e3c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e3f:	48 98                	cdqe   
ffff800000805e41:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805e48:	48 01 d0             	add    rax,rdx
ffff800000805e4b:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:669
    task[i].cwd=cwd;
ffff800000805e52:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805e59:	ff ff ff 
ffff800000805e5c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e60:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e63:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e66:	48 98                	cdqe   
ffff800000805e68:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805e6f:	48 01 c2             	add    rdx,rax
ffff800000805e72:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000805e76:	48 89 82 e8 00 00 00 	mov    QWORD PTR [rdx+0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:670
    task[i].exef=exef;
ffff800000805e7d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805e84:	ff ff ff 
ffff800000805e87:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e8b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e8e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e91:	48 98                	cdqe   
ffff800000805e93:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805e9a:	48 01 c2             	add    rdx,rax
ffff800000805e9d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000805ea1:	48 89 82 f0 00 00 00 	mov    QWORD PTR [rdx+0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:672

    return i;
ffff800000805ea8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:727
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
ffff800000805eab:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff800000805eaf:	5b                   	pop    rbx
ffff800000805eb0:	41 5c                	pop    r12
ffff800000805eb2:	41 5f                	pop    r15
ffff800000805eb4:	5d                   	pop    rbp
ffff800000805eb5:	c3                   	ret    

ffff800000805eb6 <sys_malloc>:
sys_malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:730

void * sys_malloc(size_t size)
{
ffff800000805eb6:	f3 0f 1e fa          	endbr64 
ffff800000805eba:	55                   	push   rbp
ffff800000805ebb:	48 89 e5             	mov    rbp,rsp
ffff800000805ebe:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805ebe <sys_malloc+0x8>
ffff800000805ec5:	49 bb 3a 7c 11 00 00 	movabs r11,0x117c3a
ffff800000805ecc:	00 00 00 
ffff800000805ecf:	4c 01 d8             	add    rax,r11
ffff800000805ed2:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747
    void *data=current->mem_struct.heap_top;
    current->mem_struct.heap_top=new_heaptop;
    return data; */
    

    int n=size/CHUNK_SIZE+size%CHUNK_SIZE?1:0;
ffff800000805ed6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805eda:	48 89 d1             	mov    rcx,rdx
ffff800000805edd:	48 c1 e9 0c          	shr    rcx,0xc
ffff800000805ee1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805ee5:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff800000805eeb:	48 01 ca             	add    rdx,rcx
ffff800000805eee:	48 85 d2             	test   rdx,rdx
ffff800000805ef1:	0f 95 c2             	setne  dl
ffff800000805ef4:	0f b6 d2             	movzx  edx,dl
ffff800000805ef7:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:748
    chunk_header *hp=(chunk_header*)task[cur_proc].mem_struct.heap_base;
ffff800000805efa:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805f01:	ff ff ff 
ffff800000805f04:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f08:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805f0b:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805f12:	ff ff ff 
ffff800000805f15:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f19:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805f1b:	48 63 d2             	movsxd rdx,edx
ffff800000805f1e:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805f25:	48 01 ca             	add    rdx,rcx
ffff800000805f28:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000805f2c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000805f30:	eb 0c                	jmp    ffff800000805f3e <sys_malloc+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:750
        hp=hp->next;
ffff800000805f32:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f36:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000805f3a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000805f3e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f42:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000805f46:	48 85 d2             	test   rdx,rdx
ffff800000805f49:	74 16                	je     ffff800000805f61 <sys_malloc+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749 (discriminator 1)
ffff800000805f4b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f4f:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff800000805f52:	85 d2                	test   edx,edx
ffff800000805f54:	75 0b                	jne    ffff800000805f61 <sys_malloc+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749 (discriminator 2)
ffff800000805f56:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f5a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805f5c:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000805f5f:	7e d1                	jle    ffff800000805f32 <sys_malloc+0x7c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:751
    if(hp->pgn<n)
ffff800000805f61:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f65:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805f67:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000805f6a:	0f 8e b8 00 00 00    	jle    ffff800000806028 <sys_malloc+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:754
    {
        //上抬heap top
        if(task[cur_proc].mem_struct.heap_top+CHUNK_SIZE*n>=HEAP_MAXTOP)
ffff800000805f70:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805f77:	ff ff ff 
ffff800000805f7a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f7e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805f81:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805f88:	ff ff ff 
ffff800000805f8b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f8f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805f91:	48 63 d2             	movsxd rdx,edx
ffff800000805f94:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805f9b:	48 01 ca             	add    rdx,rcx
ffff800000805f9e:	48 8b 4a 30          	mov    rcx,QWORD PTR [rdx+0x30]
ffff800000805fa2:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805fa5:	c1 e2 0c             	shl    edx,0xc
ffff800000805fa8:	48 63 d2             	movsxd rdx,edx
ffff800000805fab:	48 01 ca             	add    rdx,rcx
ffff800000805fae:	48 81 fa ff ff ef 01 	cmp    rdx,0x1efffff
ffff800000805fb5:	76 0a                	jbe    ffff800000805fc1 <sys_malloc+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:757
        {
            //超过顶部
            return NULL;
ffff800000805fb7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805fbc:	e9 e0 00 00 00       	jmp    ffff8000008060a1 <sys_malloc+0x1eb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:759
        }
        int needed=n-hp->pgn;
ffff800000805fc1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805fc5:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805fc7:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805fca:	29 ca                	sub    edx,ecx
ffff800000805fcc:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:760
        char* p=task[cur_proc].mem_struct.heap_top;
ffff800000805fcf:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805fd6:	ff ff ff 
ffff800000805fd9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805fdd:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805fe0:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805fe7:	ff ff ff 
ffff800000805fea:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805fee:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805ff0:	48 98                	cdqe   
ffff800000805ff2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805ff9:	48 01 c8             	add    rax,rcx
ffff800000805ffc:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000806000:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000806004:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080600b:	eb 13                	jmp    ffff800000806020 <sys_malloc+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:763 (discriminator 3)
        {
            *p=0;//触发缺页中断
ffff80000080600d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806011:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:764 (discriminator 3)
            p+=PAGE_SIZE;
ffff800000806014:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
ffff80000080601b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761 (discriminator 3)
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff80000080601c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761 (discriminator 1)
ffff800000806020:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806023:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
ffff800000806026:	7c e5                	jl     ffff80000080600d <sys_malloc+0x157>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:767
        }
    }
    if(hp->pgn>n)
ffff800000806028:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080602c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080602e:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
ffff800000806031:	7d 59                	jge    ffff80000080608c <sys_malloc+0x1d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:770
    {
        //在后面新建一个头
        char *p=hp;
ffff800000806033:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806037:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:771
        p+=(n+1)*CHUNK_SIZE;//算上存储头一个
ffff80000080603b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080603e:	83 c0 01             	add    eax,0x1
ffff800000806041:	c1 e0 0c             	shl    eax,0xc
ffff800000806044:	48 98                	cdqe   
ffff800000806046:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
        chunk_header *np=p;
ffff80000080604a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080604e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:773
        np->pgn=hp->pgn-n-1;
ffff800000806052:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806056:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806058:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080605b:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080605e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806062:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:774
        np->next=hp->next;
ffff800000806064:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806068:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080606c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806070:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:775
        np->prev=hp;
ffff800000806074:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806078:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080607c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:776
        hp->next=np;
ffff800000806080:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806084:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806088:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:778
    }
    hp->alloc=1;//分配完毕
ffff80000080608c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806090:	c7 40 04 01 00 00 00 	mov    DWORD PTR [rax+0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:779
    return (char*)hp+CHUNK_SIZE;//返回后边的第一个数据块地址
ffff800000806097:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080609b:	48 05 00 10 00 00    	add    rax,0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:780
}
ffff8000008060a1:	5d                   	pop    rbp
ffff8000008060a2:	c3                   	ret    

ffff8000008060a3 <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:782
int sys_free(int ptr)
{
ffff8000008060a3:	f3 0f 1e fa          	endbr64 
ffff8000008060a7:	55                   	push   rbp
ffff8000008060a8:	48 89 e5             	mov    rbp,rsp
ffff8000008060ab:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008060ab <sys_free+0x8>
ffff8000008060b2:	49 bb 4d 7a 11 00 00 	movabs r11,0x117a4d
ffff8000008060b9:	00 00 00 
ffff8000008060bc:	4c 01 d8             	add    rax,r11
ffff8000008060bf:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:783
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
ffff8000008060c2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008060c5:	2d 00 10 00 00       	sub    eax,0x1000
ffff8000008060ca:	48 98                	cdqe   
ffff8000008060cc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:784
    hp->alloc=0;    //合并
ffff8000008060d0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008060d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:786
    //向后合并
    chunk_header *p=hp->next;
ffff8000008060db:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008060df:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008060e3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
    while(p!=NULL)
ffff8000008060e7:	eb 2e                	jmp    ffff800000806117 <sys_free+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:789
    {
        if(p->alloc==0)
ffff8000008060e9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060ed:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008060f0:	85 c0                	test   eax,eax
ffff8000008060f2:	75 2c                	jne    ffff800000806120 <sys_free+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:791
        {
            hp->pgn+=p->pgn+1;//把区域合并
ffff8000008060f4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008060f8:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008060fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060fe:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806100:	83 c0 01             	add    eax,0x1
ffff800000806103:	01 c2                	add    edx,eax
ffff800000806105:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806109:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:794
        }else
            break;
        p=p->next;
ffff80000080610b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080610f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000806113:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
    while(p!=NULL)
ffff800000806117:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080611c:	75 cb                	jne    ffff8000008060e9 <sys_free+0x46>
ffff80000080611e:	eb 01                	jmp    ffff800000806121 <sys_free+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:793
            break;
ffff800000806120:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:797
    }
    //向前合并
    p=hp->prev;
ffff800000806121:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806125:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806129:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    while(p!=NULL)
ffff80000080612d:	eb 2e                	jmp    ffff80000080615d <sys_free+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:800
    {
        if(p->alloc==0)
ffff80000080612f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806133:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000806136:	85 c0                	test   eax,eax
ffff800000806138:	75 2c                	jne    ffff800000806166 <sys_free+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:802
        {
            p->pgn+=hp->pgn+1;//把区域合并
ffff80000080613a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080613e:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000806140:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806144:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806146:	83 c0 01             	add    eax,0x1
ffff800000806149:	01 c2                	add    edx,eax
ffff80000080614b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080614f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:805
        }else
            break;
        p=p->prev;
ffff800000806151:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806155:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806159:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    while(p!=NULL)
ffff80000080615d:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000806162:	75 cb                	jne    ffff80000080612f <sys_free+0x8c>
ffff800000806164:	eb 01                	jmp    ffff800000806167 <sys_free+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:804
            break;
ffff800000806166:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
    }
    //合并完成
    return 0;
ffff800000806167:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:809
}
ffff80000080616c:	5d                   	pop    rbp
ffff80000080616d:	c3                   	ret    

ffff80000080616e <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:811

void switch_to(struct process *from, struct process *to) {
ffff80000080616e:	f3 0f 1e fa          	endbr64 
ffff800000806172:	55                   	push   rbp
ffff800000806173:	48 89 e5             	mov    rbp,rsp
ffff800000806176:	53                   	push   rbx
ffff800000806177:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806177 <switch_to+0x9>
ffff80000080617e:	49 bb 81 79 11 00 00 	movabs r11,0x117981
ffff800000806185:	00 00 00 
ffff800000806188:	4c 01 d8             	add    rax,r11
ffff80000080618b:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffff80000080618f:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:812
    cur_proc=to-task;
ffff800000806193:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080619a:	ff ff ff 
ffff80000080619d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061a1:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008061a4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008061a8:	48 29 ca             	sub    rdx,rcx
ffff8000008061ab:	48 89 d1             	mov    rcx,rdx
ffff8000008061ae:	48 c1 f9 03          	sar    rcx,0x3
ffff8000008061b2:	48 ba 43 ac 28 8d 8f 	movabs rdx,0x77a04c8f8d28ac43
ffff8000008061b9:	4c a0 77 
ffff8000008061bc:	48 0f af d1          	imul   rdx,rcx
ffff8000008061c0:	89 d1                	mov    ecx,edx
ffff8000008061c2:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008061c9:	ff ff ff 
ffff8000008061cc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061d0:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:813
    current=&task[cur_proc];
ffff8000008061d2:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008061d9:	ff ff ff 
ffff8000008061dc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061e0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008061e3:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008061ea:	ff ff ff 
ffff8000008061ed:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061f1:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008061f3:	48 63 d2             	movsxd rdx,edx
ffff8000008061f6:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008061fd:	48 01 ca             	add    rdx,rcx
ffff800000806200:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000806207:	ff ff ff 
ffff80000080620a:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080620e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:815
    //cr3需要物理地址,regs.cr3里面填的就是物理地址
    asm volatile("mov %0,%%rax\n"
ffff800000806211:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806215:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
ffff80000080621c:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:817
                 "mov %%rax,%%cr3\n":"=m"(to->regs.cr3));
    asm volatile("mov %%rsp,%0\r\n"
ffff80000080621f:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
ffff800000806223:	4c 8b 55 f0          	mov    r10,QWORD PTR [rbp-0x10]
ffff800000806227:	4c 8b 5d f0          	mov    r11,QWORD PTR [rbp-0x10]
ffff80000080622b:	48 8b 5d f0          	mov    rbx,QWORD PTR [rbp-0x10]
ffff80000080622f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806233:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806237:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080623b:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
ffff80000080623f:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffff800000806243:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806247:	49 89 a1 9c 02 00 00 	mov    QWORD PTR [r9+0x29c],rsp
ffff80000080624e:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # ffff800000806279 <done>
ffff800000806255:	49 89 82 6c 02 00 00 	mov    QWORD PTR [r10+0x26c],rax
ffff80000080625c:	41 8c a3 dc 02 00 00 	mov    WORD PTR [r11+0x2dc],fs
ffff800000806263:	8c ab e4 02 00 00    	mov    WORD PTR [rbx+0x2e4],gs
ffff800000806269:	48 8b a1 9c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x29c]
ffff800000806270:	41 ff b0 6c 02 00 00 	push   QWORD PTR [r8+0x26c]
ffff800000806277:	eb 08                	jmp    ffff800000806281 <__switch_to>

ffff800000806279 <done>:
ffff800000806279:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:831
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
ffff80000080627a:	90                   	nop
ffff80000080627b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080627f:	c9                   	leave  
ffff800000806280:	c3                   	ret    

ffff800000806281 <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:832
void __switch_to(struct process *from, struct process *to) {
ffff800000806281:	f3 0f 1e fa          	endbr64 
ffff800000806285:	55                   	push   rbp
ffff800000806286:	48 89 e5             	mov    rbp,rsp
ffff800000806289:	41 57                	push   r15
ffff80000080628b:	41 54                	push   r12
ffff80000080628d:	53                   	push   rbx
ffff80000080628e:	48 83 ec 18          	sub    rsp,0x18
ffff800000806292:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806292 <__switch_to+0x11>
ffff800000806299:	49 bb 66 78 11 00 00 	movabs r11,0x117866
ffff8000008062a0:	00 00 00 
ffff8000008062a3:	4c 01 d8             	add    rax,r11
ffff8000008062a6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008062aa:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:833
    set_tss(to->tss.rsp0,to->tss.rsp1,to->tss.rsp2,to->tss.ists[0],to->tss.ists[1],
ffff8000008062ae:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062b2:	4c 8b 9a 4c 02 00 00 	mov    r11,QWORD PTR [rdx+0x24c]
ffff8000008062b9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062bd:	4c 8b 92 44 02 00 00 	mov    r10,QWORD PTR [rdx+0x244]
ffff8000008062c4:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062c8:	4c 8b 8a 3c 02 00 00 	mov    r9,QWORD PTR [rdx+0x23c]
ffff8000008062cf:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062d3:	4c 8b 82 34 02 00 00 	mov    r8,QWORD PTR [rdx+0x234]
ffff8000008062da:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062de:	4c 8b a2 2c 02 00 00 	mov    r12,QWORD PTR [rdx+0x22c]
ffff8000008062e5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062e9:	48 8b 9a 24 02 00 00 	mov    rbx,QWORD PTR [rdx+0x224]
ffff8000008062f0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062f4:	48 8b 8a 1c 02 00 00 	mov    rcx,QWORD PTR [rdx+0x21c]
ffff8000008062fb:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062ff:	48 8b 92 0c 02 00 00 	mov    rdx,QWORD PTR [rdx+0x20c]
ffff800000806306:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080630a:	48 8b b6 04 02 00 00 	mov    rsi,QWORD PTR [rsi+0x204]
ffff800000806311:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffff800000806315:	48 8b bf fc 01 00 00 	mov    rdi,QWORD PTR [rdi+0x1fc]
ffff80000080631c:	41 53                	push   r11
ffff80000080631e:	41 52                	push   r10
ffff800000806320:	41 51                	push   r9
ffff800000806322:	41 50                	push   r8
ffff800000806324:	4d 89 e1             	mov    r9,r12
ffff800000806327:	49 89 d8             	mov    r8,rbx
ffff80000080632a:	49 89 c7             	mov    r15,rax
ffff80000080632d:	49 ba 7e 88 ee ff ff 	movabs r10,0xffffffffffee887e
ffff800000806334:	ff ff ff 
ffff800000806337:	49 01 c2             	add    r10,rax
ffff80000080633a:	41 ff d2             	call   r10
ffff80000080633d:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:835
            to->tss.ists[2],to->tss.ists[3],to->tss.ists[4],to->tss.ists[5],to->tss.ists[6]);
    asm volatile("mov %%fs,%0\r\n"
ffff800000806341:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806345:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806349:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080634d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000806351:	8c a0 dc 02 00 00    	mov    WORD PTR [rax+0x2dc],fs
ffff800000806357:	8c ae e4 02 00 00    	mov    WORD PTR [rsi+0x2e4],gs
ffff80000080635d:	8e a2 dc 02 00 00    	mov    fs,WORD PTR [rdx+0x2dc]
ffff800000806363:	8e a9 e4 02 00 00    	mov    gs,WORD PTR [rcx+0x2e4]
ffff800000806369:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:841
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
ffff80000080636a:	90                   	nop
ffff80000080636b:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff80000080636f:	5b                   	pop    rbx
ffff800000806370:	41 5c                	pop    r12
ffff800000806372:	41 5f                	pop    r15
ffff800000806374:	5d                   	pop    rbp
ffff800000806375:	c3                   	ret    

ffff800000806376 <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:843

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
ffff800000806376:	f3 0f 1e fa          	endbr64 
ffff80000080637a:	55                   	push   rbp
ffff80000080637b:	48 89 e5             	mov    rbp,rsp
ffff80000080637e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080637e <set_tss+0x8>
ffff800000806385:	49 bb 7a 77 11 00 00 	movabs r11,0x11777a
ffff80000080638c:	00 00 00 
ffff80000080638f:	4c 01 d8             	add    rax,r11
ffff800000806392:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000806396:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080639a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080639e:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff8000008063a2:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffff8000008063a6:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:844
    tss->rsp0=rsp0;
ffff8000008063aa:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008063b1:	ff ff ff 
ffff8000008063b4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008063b8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008063bb:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff8000008063bf:	48 89 4a 04          	mov    QWORD PTR [rdx+0x4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:845
    tss->rsp1=rsp1;
ffff8000008063c3:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008063ca:	ff ff ff 
ffff8000008063cd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008063d1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008063d4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff8000008063d8:	48 89 4a 0c          	mov    QWORD PTR [rdx+0xc],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:846
    tss->rsp2=rsp2;
ffff8000008063dc:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008063e3:	ff ff ff 
ffff8000008063e6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008063ea:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008063ed:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008063f1:	48 89 4a 14          	mov    QWORD PTR [rdx+0x14],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847
    tss->ists[0]=ist0;
ffff8000008063f5:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008063fc:	ff ff ff 
ffff8000008063ff:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806403:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806406:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080640a:	48 89 4a 24          	mov    QWORD PTR [rdx+0x24],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:848
    tss->ists[1]=ist1;
ffff80000080640e:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806415:	ff ff ff 
ffff800000806418:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080641c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080641f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000806423:	48 89 4a 2c          	mov    QWORD PTR [rdx+0x2c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849
    tss->ists[2]=ist2;
ffff800000806427:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff80000080642e:	ff ff ff 
ffff800000806431:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806435:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806438:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080643c:	48 89 4a 34          	mov    QWORD PTR [rdx+0x34],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850
    tss->ists[3]=ist3;
ffff800000806440:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806447:	ff ff ff 
ffff80000080644a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080644e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806451:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff800000806455:	48 89 4a 3c          	mov    QWORD PTR [rdx+0x3c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:851
    tss->ists[4]=ist4;
ffff800000806459:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806460:	ff ff ff 
ffff800000806463:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806467:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080646a:	48 8b 4d 18          	mov    rcx,QWORD PTR [rbp+0x18]
ffff80000080646e:	48 89 4a 44          	mov    QWORD PTR [rdx+0x44],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852
    tss->ists[5]=ist5;
ffff800000806472:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806479:	ff ff ff 
ffff80000080647c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806480:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806483:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff800000806487:	48 89 4a 4c          	mov    QWORD PTR [rdx+0x4c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:853
    tss->ists[6]=ist6;
ffff80000080648b:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806492:	ff ff ff 
ffff800000806495:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000806499:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080649c:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff8000008064a0:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:854
}
ffff8000008064a4:	90                   	nop
ffff8000008064a5:	5d                   	pop    rbp
ffff8000008064a6:	c3                   	ret    

ffff8000008064a7 <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:856

int fork_child_ret(){
ffff8000008064a7:	f3 0f 1e fa          	endbr64 
ffff8000008064ab:	55                   	push   rbp
ffff8000008064ac:	48 89 e5             	mov    rbp,rsp
ffff8000008064af:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008064af <fork_child_ret+0x8>
ffff8000008064b6:	49 bb 49 76 11 00 00 	movabs r11,0x117649
ffff8000008064bd:	00 00 00 
ffff8000008064c0:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:857
    return 0;
ffff8000008064c3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:859

}
ffff8000008064c8:	5d                   	pop    rbp
ffff8000008064c9:	c3                   	ret    

ffff8000008064ca <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:861

int sys_fork(void){
ffff8000008064ca:	f3 0f 1e fa          	endbr64 
ffff8000008064ce:	55                   	push   rbp
ffff8000008064cf:	48 89 e5             	mov    rbp,rsp
ffff8000008064d2:	41 57                	push   r15
ffff8000008064d4:	53                   	push   rbx
ffff8000008064d5:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff8000008064dc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008064dc <sys_fork+0x12>
ffff8000008064e3:	49 bb 1c 76 11 00 00 	movabs r11,0x11761c
ffff8000008064ea:	00 00 00 
ffff8000008064ed:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:862
    cli();
ffff8000008064f0:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863
    int pid=req_proc();
ffff8000008064f1:	49 89 df             	mov    r15,rbx
ffff8000008064f4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008064f9:	48 ba 58 70 ee ff ff 	movabs rdx,0xffffffffffee7058
ffff800000806500:	ff ff ff 
ffff800000806503:	48 01 da             	add    rdx,rbx
ffff800000806506:	ff d2                	call   rdx
ffff800000806508:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:864
    int pids=task[pid].pid;
ffff80000080650b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806512:	ff ff ff 
ffff800000806515:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806519:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080651c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080651f:	48 98                	cdqe   
ffff800000806521:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806528:	48 01 d0             	add    rax,rdx
ffff80000080652b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080652d:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865
    if(pid==-1)return -1;
ffff800000806530:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000806534:	75 0a                	jne    ffff800000806540 <sys_fork+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865 (discriminator 1)
ffff800000806536:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080653b:	e9 19 0a 00 00       	jmp    ffff800000806f59 <sys_fork+0xa8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:867
    //首先完全复制
    task[pid]=*current;
ffff800000806540:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806547:	ff ff ff 
ffff80000080654a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080654e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806551:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806558:	ff ff ff 
ffff80000080655b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080655f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806562:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806565:	48 98                	cdqe   
ffff800000806567:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080656e:	48 01 d0             	add    rax,rdx
ffff800000806571:	48 89 c2             	mov    rdx,rax
ffff800000806574:	48 89 c8             	mov    rax,rcx
ffff800000806577:	b9 58 03 00 00       	mov    ecx,0x358
ffff80000080657c:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080657f:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff800000806582:	89 ce                	mov    esi,ecx
ffff800000806584:	48 01 d6             	add    rsi,rdx
ffff800000806587:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
ffff80000080658b:	89 ce                	mov    esi,ecx
ffff80000080658d:	48 01 c6             	add    rsi,rax
ffff800000806590:	48 83 c6 08          	add    rsi,0x8
ffff800000806594:	48 8b 76 f0          	mov    rsi,QWORD PTR [rsi-0x10]
ffff800000806598:	48 89 77 f0          	mov    QWORD PTR [rdi-0x10],rsi
ffff80000080659c:	48 8d 7a 08          	lea    rdi,[rdx+0x8]
ffff8000008065a0:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
ffff8000008065a4:	48 29 fa             	sub    rdx,rdi
ffff8000008065a7:	48 29 d0             	sub    rax,rdx
ffff8000008065aa:	01 d1                	add    ecx,edx
ffff8000008065ac:	83 e1 f8             	and    ecx,0xfffffff8
ffff8000008065af:	c1 e9 03             	shr    ecx,0x3
ffff8000008065b2:	89 ca                	mov    edx,ecx
ffff8000008065b4:	89 d2                	mov    edx,edx
ffff8000008065b6:	48 89 c6             	mov    rsi,rax
ffff8000008065b9:	48 89 d1             	mov    rcx,rdx
ffff8000008065bc:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:868
    task[pid].pid=pids;
ffff8000008065bf:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008065c6:	ff ff ff 
ffff8000008065c9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008065cd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008065d0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008065d3:	48 98                	cdqe   
ffff8000008065d5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008065dc:	48 01 c2             	add    rdx,rax
ffff8000008065df:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008065e2:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:869
    task[pid].stat=TASK_ZOMBIE;
ffff8000008065e4:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008065eb:	ff ff ff 
ffff8000008065ee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008065f2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008065f5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008065f8:	48 98                	cdqe   
ffff8000008065fa:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806601:	48 01 d0             	add    rax,rdx
ffff800000806604:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:876

//    asm volatile("mov %%r10,%0"::"m"(r->rip));
    // r->rip=current->regs.rip;

    // memcpy(&task[pid].tss,tss, sizeof(TSS));
    task[pid].parent_pid=current->pid;
ffff80000080660b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806612:	ff ff ff 
ffff800000806615:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806619:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080661c:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000806623:	ff ff ff 
ffff800000806626:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080662a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080662d:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000806630:	48 63 d2             	movsxd rdx,edx
ffff800000806633:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080663a:	48 01 ca             	add    rdx,rcx
ffff80000080663d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080663f:	89 82 bc 00 00 00    	mov    DWORD PTR [rdx+0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:878
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
ffff800000806645:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080664c:	ff ff ff 
ffff80000080664f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806653:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806656:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806659:	48 98                	cdqe   
ffff80000080665b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806662:	48 01 d0             	add    rax,rdx
ffff800000806665:	48 05 34 03 00 00    	add    rax,0x334
ffff80000080666b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080666f:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000806673:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080667a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080667e:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000806685:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000806686:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:879
    task[pid].child_procs=NULL;
ffff800000806687:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080668e:	ff ff ff 
ffff800000806691:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806695:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806698:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080669b:	48 98                	cdqe   
ffff80000080669d:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008066a4:	48 01 d0             	add    rax,rdx
ffff8000008066a7:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff8000008066ae:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:880
    task[pid].node.data=&task[pid];
ffff8000008066b2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008066b9:	ff ff ff 
ffff8000008066bc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066c0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008066c3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008066c6:	48 98                	cdqe   
ffff8000008066c8:	48 69 d0 58 03 00 00 	imul   rdx,rax,0x358
ffff8000008066cf:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008066d6:	ff ff ff 
ffff8000008066d9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066dd:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008066e0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008066e3:	48 98                	cdqe   
ffff8000008066e5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008066ec:	48 01 f0             	add    rax,rsi
ffff8000008066ef:	48 01 ca             	add    rdx,rcx
ffff8000008066f2:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881
    if(!current->child_procs)
ffff8000008066f9:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806700:	ff ff ff 
ffff800000806703:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806707:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080670a:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000806711:	48 85 c0             	test   rax,rax
ffff800000806714:	75 44                	jne    ffff80000080675a <sys_fork+0x290>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:882
        current->child_procs=&task[pid].node;
ffff800000806716:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080671d:	ff ff ff 
ffff800000806720:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806724:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806727:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080672a:	48 98                	cdqe   
ffff80000080672c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806733:	48 01 c2             	add    rdx,rax
ffff800000806736:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080673d:	ff ff ff 
ffff800000806740:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806744:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806747:	48 81 c2 34 03 00 00 	add    rdx,0x334
ffff80000080674e:	48 89 90 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],rdx
ffff800000806755:	e9 71 01 00 00       	jmp    ffff8000008068cb <sys_fork+0x401>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:884
    else
        list_add(current->child_procs,&task[pid].node);
ffff80000080675a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806761:	ff ff ff 
ffff800000806764:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806768:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080676b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080676e:	48 98                	cdqe   
ffff800000806770:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806777:	48 01 d0             	add    rax,rdx
ffff80000080677a:	48 8d 90 34 03 00 00 	lea    rdx,[rax+0x334]
ffff800000806781:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806788:	ff ff ff 
ffff80000080678b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080678f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806792:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000806799:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff80000080679d:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff8000008067a1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008067a5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008067a9:	48 85 c0             	test   rax,rax
ffff8000008067ac:	75 50                	jne    ffff8000008067fe <sys_fork+0x334>
ffff8000008067ae:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008067b2:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff8000008067b6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008067ba:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008067be:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008067c2:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008067c6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008067ca:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008067ce:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008067d2:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff8000008067d6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008067d9:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008067dd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008067e1:	48 85 c0             	test   rax,rax
ffff8000008067e4:	0f 84 da 00 00 00    	je     ffff8000008068c4 <sys_fork+0x3fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008067ea:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008067ee:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008067f2:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008067f6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008067f9:	e9 c6 00 00 00       	jmp    ffff8000008068c4 <sys_fork+0x3fa>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff8000008067fe:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000806802:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000806809:	eb 2e                	jmp    ffff800000806839 <sys_fork+0x36f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080680b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806812:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000806816:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080681a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080681e:	48 39 c2             	cmp    rdx,rax
ffff800000806821:	0f 84 a0 00 00 00    	je     ffff8000008068c7 <sys_fork+0x3fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000806827:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080682e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806832:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff800000806839:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806840:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806844:	48 85 c0             	test   rax,rax
ffff800000806847:	74 14                	je     ffff80000080685d <sys_fork+0x393>
ffff800000806849:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806850:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806854:	48 39 85 78 ff ff ff 	cmp    QWORD PTR [rbp-0x88],rax
ffff80000080685b:	75 ae                	jne    ffff80000080680b <sys_fork+0x341>
ffff80000080685d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806864:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffff80000080686b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080686f:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000806876:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080687d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000806881:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000806888:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080688c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000806893:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff80000080689a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080689d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008068a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008068a8:	48 85 c0             	test   rax,rax
ffff8000008068ab:	74 1d                	je     ffff8000008068ca <sys_fork+0x400>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008068ad:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008068b4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008068b8:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff8000008068bf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008068c2:	eb 06                	jmp    ffff8000008068ca <sys_fork+0x400>
ffff8000008068c4:	90                   	nop
ffff8000008068c5:	eb 04                	jmp    ffff8000008068cb <sys_fork+0x401>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff8000008068c7:	90                   	nop
ffff8000008068c8:	eb 01                	jmp    ffff8000008068cb <sys_fork+0x401>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008068ca:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:886

    task[pid].utime=0;
ffff8000008068cb:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008068d2:	ff ff ff 
ffff8000008068d5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068d9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008068dc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008068df:	48 98                	cdqe   
ffff8000008068e1:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008068e8:	48 01 d0             	add    rax,rdx
ffff8000008068eb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889

    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
ffff8000008068f2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008068f9:	ff ff ff 
ffff8000008068fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806900:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806903:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806906:	48 98                	cdqe   
ffff800000806908:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080690f:	48 01 c2             	add    rdx,rax
ffff800000806912:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806919:	ff ff ff 
ffff80000080691c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806920:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806923:	48 89 d6             	mov    rsi,rdx
ffff800000806926:	48 89 c7             	mov    rdi,rax
ffff800000806929:	49 89 df             	mov    r15,rbx
ffff80000080692c:	48 b8 0f 98 ee ff ff 	movabs rax,0xffffffffffee980f
ffff800000806933:	ff ff ff 
ffff800000806936:	48 01 d8             	add    rax,rbx
ffff800000806939:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:894
    
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff80000080693b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806942:	ff ff ff 
ffff800000806945:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806949:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080694c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080694f:	48 98                	cdqe   
ffff800000806951:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806958:	48 01 d0             	add    rax,rdx
ffff80000080695b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080695f:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806965:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:895
    addr_t tmpla=KNL_BASE+0x80000000;
ffff800000806969:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff800000806970:	80 ff ff 
ffff800000806973:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000806977:	e9 d1 00 00 00       	jmp    ffff800000806a4d <sys_fork+0x583>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897 (discriminator 2)
        addr_t new_stkpg= pmalloc();
ffff80000080697c:	49 89 df             	mov    r15,rbx
ffff80000080697f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806984:	48 ba ec 50 ee ff ff 	movabs rdx,0xffffffffffee50ec
ffff80000080698b:	ff ff ff 
ffff80000080698e:	48 01 da             	add    rdx,rbx
ffff800000806991:	ff d2                	call   rdx
ffff800000806993:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:898 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000806997:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080699e:	ff ff ff 
ffff8000008069a1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008069a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008069a8:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff8000008069af:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008069b3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008069b7:	48 89 d1             	mov    rcx,rdx
ffff8000008069ba:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008069bf:	48 89 c7             	mov    rdi,rax
ffff8000008069c2:	49 89 df             	mov    r15,rbx
ffff8000008069c5:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff8000008069cc:	ff ff ff 
ffff8000008069cf:	48 01 d8             	add    rax,rbx
ffff8000008069d2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:899 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff8000008069d4:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008069d8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008069dc:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008069e1:	48 89 ce             	mov    rsi,rcx
ffff8000008069e4:	48 89 c7             	mov    rdi,rax
ffff8000008069e7:	49 89 df             	mov    r15,rbx
ffff8000008069ea:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff8000008069f1:	ff ff ff 
ffff8000008069f4:	48 01 d8             	add    rax,rbx
ffff8000008069f7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:902 (discriminator 2)
        
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff8000008069f9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806a00:	ff ff ff 
ffff800000806a03:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a07:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a0a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a0d:	48 98                	cdqe   
ffff800000806a0f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a16:	48 01 d0             	add    rax,rdx
ffff800000806a19:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806a20:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806a24:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806a28:	48 89 d1             	mov    rcx,rdx
ffff800000806a2b:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806a30:	48 89 c7             	mov    rdi,rax
ffff800000806a33:	49 89 df             	mov    r15,rbx
ffff800000806a36:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff800000806a3d:	ff ff ff 
ffff800000806a40:	48 01 d8             	add    rax,rbx
ffff800000806a43:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000806a45:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
ffff800000806a4c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896 (discriminator 1)
ffff800000806a4d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806a54:	ff ff ff 
ffff800000806a57:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a5b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a5e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a61:	48 98                	cdqe   
ffff800000806a63:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a6a:	48 01 d0             	add    rax,rdx
ffff800000806a6d:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000806a71:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff800000806a75:	0f 83 01 ff ff ff    	jae    ffff80000080697c <sys_fork+0x4b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:904
    }
    if(task[pid].mem_struct.stack_top<=task[pid].mem_struct.stack_bottom){
ffff800000806a7b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806a82:	ff ff ff 
ffff800000806a85:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a89:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a8c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a8f:	48 98                	cdqe   
ffff800000806a91:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a98:	48 01 d0             	add    rax,rdx
ffff800000806a9b:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff800000806a9f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806aa6:	ff ff ff 
ffff800000806aa9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806aad:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806ab0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ab3:	48 98                	cdqe   
ffff800000806ab5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806abc:	48 01 c8             	add    rax,rcx
ffff800000806abf:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000806ac3:	48 39 c2             	cmp    rdx,rax
ffff800000806ac6:	0f 87 bd 00 00 00    	ja     ffff800000806b89 <sys_fork+0x6bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:907
        //父进程没有栈空间（一般是不可能的，这个几乎就是为了内核进程fork而写）
        //开辟一页空栈。
        addr_t new_stkpg= (addr_t) pmalloc();
ffff800000806acc:	49 89 df             	mov    r15,rbx
ffff800000806acf:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806ad4:	48 ba ec 50 ee ff ff 	movabs rdx,0xffffffffffee50ec
ffff800000806adb:	ff ff ff 
ffff800000806ade:	48 01 da             	add    rdx,rbx
ffff800000806ae1:	ff d2                	call   rdx
ffff800000806ae3:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:908
        stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000806ae7:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806aee:	ff ff ff 
ffff800000806af1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806af5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806af8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806afb:	48 98                	cdqe   
ffff800000806afd:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806b04:	48 01 d0             	add    rax,rdx
ffff800000806b07:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000806b0b:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806b11:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:910
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806b15:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806b1c:	ff ff ff 
ffff800000806b1f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b23:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b26:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b29:	48 98                	cdqe   
ffff800000806b2b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806b32:	48 01 d0             	add    rax,rdx
ffff800000806b35:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806b3c:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806b40:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806b44:	48 89 d1             	mov    rcx,rdx
ffff800000806b47:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806b4c:	48 89 c7             	mov    rdi,rax
ffff800000806b4f:	49 89 df             	mov    r15,rbx
ffff800000806b52:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff800000806b59:	ff ff ff 
ffff800000806b5c:	48 01 d8             	add    rax,rbx
ffff800000806b5f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:912
        //给新进程分配一页栈
        task[pid].mem_struct.stack_bottom=stk;
ffff800000806b61:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806b68:	ff ff ff 
ffff800000806b6b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b6f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b72:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b75:	48 98                	cdqe   
ffff800000806b77:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806b7e:	48 01 c2             	add    rdx,rax
ffff800000806b81:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806b85:	48 89 42 38          	mov    QWORD PTR [rdx+0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918
        //给这页新的栈填上恢复上下文需要的内容
        
    }
    //中断使用的栈空间
    //ist一页就够
    addr_t new_stkpg= kmalloc();
ffff800000806b89:	49 89 df             	mov    r15,rbx
ffff800000806b8c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806b91:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000806b98:	ff ff ff 
ffff800000806b9b:	48 01 da             	add    rdx,rbx
ffff800000806b9e:	ff d2                	call   rdx
ffff800000806ba0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919
    memcpy(new_stkpg,current->tss.ists[0]-PAGE_4K_SIZE,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806ba4:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806bab:	ff ff ff 
ffff800000806bae:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806bb2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806bb5:	48 8b 80 1c 02 00 00 	mov    rax,QWORD PTR [rax+0x21c]
ffff800000806bbc:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806bc2:	48 89 c1             	mov    rcx,rax
ffff800000806bc5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806bc9:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806bce:	48 89 ce             	mov    rsi,rcx
ffff800000806bd1:	48 89 c7             	mov    rdi,rax
ffff800000806bd4:	49 89 df             	mov    r15,rbx
ffff800000806bd7:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000806bde:	ff ff ff 
ffff800000806be1:	48 01 d8             	add    rax,rbx
ffff800000806be4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920
    stack_store_regs* ctx_dup=new_stkpg+PAGE_4K_SIZE-sizeof(stack_store_regs);//拷贝的上下文
ffff800000806be6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806bea:	48 05 58 0f 00 00    	add    rax,0xf58
ffff800000806bf0:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:921
    ctx_dup->rax=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
ffff800000806bf4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806bf8:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000806bff:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922
    task[pid].regs.rip=clock_ret;
ffff800000806c00:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806c07:	ff ff ff 
ffff800000806c0a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c0e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c11:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c14:	48 98                	cdqe   
ffff800000806c16:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c1d:	48 01 d0             	add    rax,rdx
ffff800000806c20:	48 ba c8 ff ff ff ff 	movabs rdx,0xffffffffffffffc8
ffff800000806c27:	ff ff ff 
ffff800000806c2a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806c2e:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:923
    task[pid].regs.rsp=ctx_dup;
ffff800000806c35:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806c3c:	ff ff ff 
ffff800000806c3f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c43:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c46:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c49:	48 98                	cdqe   
ffff800000806c4b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c52:	48 01 c2             	add    rdx,rax
ffff800000806c55:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806c59:	48 89 82 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:924
    task[pid].tss.ists[0]=new_stkpg+PAGE_4K_SIZE;
ffff800000806c60:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806c67:	ff ff ff 
ffff800000806c6a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c6e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c71:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c74:	48 98                	cdqe   
ffff800000806c76:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c7d:	48 01 d0             	add    rax,rdx
ffff800000806c80:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806c84:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806c8b:	48 89 90 1c 02 00 00 	mov    QWORD PTR [rax+0x21c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:925
    task[pid].tss.ists[1]=new_stkpg+PAGE_4K_SIZE;
ffff800000806c92:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806c99:	ff ff ff 
ffff800000806c9c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ca0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806ca3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ca6:	48 98                	cdqe   
ffff800000806ca8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806caf:	48 01 d0             	add    rax,rdx
ffff800000806cb2:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806cb6:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806cbd:	48 89 90 24 02 00 00 	mov    QWORD PTR [rax+0x224],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:926
    task[pid].tss.ists[2]=new_stkpg+PAGE_4K_SIZE;
ffff800000806cc4:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806ccb:	ff ff ff 
ffff800000806cce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806cd2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806cd5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806cd8:	48 98                	cdqe   
ffff800000806cda:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806ce1:	48 01 d0             	add    rax,rdx
ffff800000806ce4:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806ce8:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806cef:	48 89 90 2c 02 00 00 	mov    QWORD PTR [rax+0x22c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:927
    task[pid].tss.ists[3]=new_stkpg+PAGE_4K_SIZE;
ffff800000806cf6:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806cfd:	ff ff ff 
ffff800000806d00:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d04:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d07:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d0a:	48 98                	cdqe   
ffff800000806d0c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806d13:	48 01 d0             	add    rax,rdx
ffff800000806d16:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806d1a:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806d21:	48 89 90 34 02 00 00 	mov    QWORD PTR [rax+0x234],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:928
    task[pid].tss.ists[4]=new_stkpg+PAGE_4K_SIZE;
ffff800000806d28:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806d2f:	ff ff ff 
ffff800000806d32:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d36:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d39:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d3c:	48 98                	cdqe   
ffff800000806d3e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806d45:	48 01 d0             	add    rax,rdx
ffff800000806d48:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806d4c:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806d53:	48 89 90 3c 02 00 00 	mov    QWORD PTR [rax+0x23c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929
    task[pid].tss.ists[5]=new_stkpg+PAGE_4K_SIZE;
ffff800000806d5a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806d61:	ff ff ff 
ffff800000806d64:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d68:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d6b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d6e:	48 98                	cdqe   
ffff800000806d70:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806d77:	48 01 d0             	add    rax,rdx
ffff800000806d7a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806d7e:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806d85:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:930
    task[pid].tss.ists[6]=new_stkpg+PAGE_4K_SIZE;
ffff800000806d8c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806d93:	ff ff ff 
ffff800000806d96:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d9a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d9d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806da0:	48 98                	cdqe   
ffff800000806da2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806da9:	48 01 d0             	add    rax,rdx
ffff800000806dac:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806db0:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806db7:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:933

    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
ffff800000806dbe:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806dc5:	ff ff ff 
ffff800000806dc8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806dcc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806dcf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806dd2:	48 98                	cdqe   
ffff800000806dd4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806ddb:	48 01 d0             	add    rax,rdx
ffff800000806dde:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000806de2:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806de8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000806dec:	e9 d1 00 00 00       	jmp    ffff800000806ec2 <sys_fork+0x9f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:935 (discriminator 2)
        addr_t new_hppg= pmalloc();
ffff800000806df1:	49 89 df             	mov    r15,rbx
ffff800000806df4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806df9:	48 ba ec 50 ee ff ff 	movabs rdx,0xffffffffffee50ec
ffff800000806e00:	ff ff ff 
ffff800000806e03:	48 01 da             	add    rdx,rbx
ffff800000806e06:	ff d2                	call   rdx
ffff800000806e08:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000806e0c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806e13:	ff ff ff 
ffff800000806e16:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806e1d:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806e24:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806e28:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806e2c:	48 89 d1             	mov    rcx,rdx
ffff800000806e2f:	ba 03 00 00 00       	mov    edx,0x3
ffff800000806e34:	48 89 c7             	mov    rdi,rax
ffff800000806e37:	49 89 df             	mov    r15,rbx
ffff800000806e3a:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff800000806e41:	ff ff ff 
ffff800000806e44:	48 01 d8             	add    rax,rbx
ffff800000806e47:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:937 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806e49:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff800000806e4d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806e51:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806e56:	48 89 ce             	mov    rsi,rcx
ffff800000806e59:	48 89 c7             	mov    rdi,rax
ffff800000806e5c:	49 89 df             	mov    r15,rbx
ffff800000806e5f:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000806e66:	ff ff ff 
ffff800000806e69:	48 01 d8             	add    rax,rbx
ffff800000806e6c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806e6e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806e75:	ff ff ff 
ffff800000806e78:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e7c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806e7f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806e82:	48 98                	cdqe   
ffff800000806e84:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806e8b:	48 01 d0             	add    rax,rdx
ffff800000806e8e:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806e95:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000806e99:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806e9d:	48 89 d1             	mov    rcx,rdx
ffff800000806ea0:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806ea5:	48 89 c7             	mov    rdi,rax
ffff800000806ea8:	49 89 df             	mov    r15,rbx
ffff800000806eab:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff800000806eb2:	ff ff ff 
ffff800000806eb5:	48 01 d8             	add    rax,rbx
ffff800000806eb8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000806eba:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
ffff800000806ec1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 1)
ffff800000806ec2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806ec9:	ff ff ff 
ffff800000806ecc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ed0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806ed3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ed6:	48 98                	cdqe   
ffff800000806ed8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806edf:	48 01 d0             	add    rax,rdx
ffff800000806ee2:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000806ee6:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000806eea:	0f 83 01 ff ff ff    	jae    ffff800000806df1 <sys_fork+0x927>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:941
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
ffff800000806ef0:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806ef7:	ff ff ff 
ffff800000806efa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806efe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806f01:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806f08:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806f0c:	48 89 d1             	mov    rcx,rdx
ffff800000806f0f:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806f14:	48 89 c6             	mov    rsi,rax
ffff800000806f17:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806f1c:	49 89 df             	mov    r15,rbx
ffff800000806f1f:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff800000806f26:	ff ff ff 
ffff800000806f29:	48 01 d8             	add    rax,rbx
ffff800000806f2c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
    task[pid].stat=TASK_READY;
ffff800000806f2e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806f35:	ff ff ff 
ffff800000806f38:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806f3c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806f3f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806f42:	48 98                	cdqe   
ffff800000806f44:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806f4b:	48 01 d0             	add    rax,rdx
ffff800000806f4e:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:945
    

    sti();
ffff800000806f55:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:948
    //如果父进程没有堆，不开辟。留给load_xx函数。
    //父进程运行到这里
    return pid;
ffff800000806f56:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:949
}
ffff800000806f59:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff800000806f60:	5b                   	pop    rbx
ffff800000806f61:	41 5f                	pop    r15
ffff800000806f63:	5d                   	pop    rbp
ffff800000806f64:	c3                   	ret    

ffff800000806f65 <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
ffff800000806f65:	f3 0f 1e fa          	endbr64 
ffff800000806f69:	55                   	push   rbp
ffff800000806f6a:	48 89 e5             	mov    rbp,rsp
ffff800000806f6d:	41 57                	push   r15
ffff800000806f6f:	53                   	push   rbx
ffff800000806f70:	48 83 ec 50          	sub    rsp,0x50
ffff800000806f74:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806f74 <release_mmap+0xf>
ffff800000806f7b:	49 bb 84 6b 11 00 00 	movabs r11,0x116b84
ffff800000806f82:	00 00 00 
ffff800000806f85:	4c 01 db             	add    rbx,r11
ffff800000806f88:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952
    page_item * pml4p=p->pml4;
ffff800000806f8c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806f90:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000806f97:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:954
    //复制pdpt
    page_item *pml4e= pml4p;
ffff800000806f9b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000806f9f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff800000806fa3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000806faa:	e9 40 03 00 00       	jmp    ffff8000008072ef <release_mmap+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:957
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff800000806faf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806fb2:	48 98                	cdqe   
ffff800000806fb4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806fbb:	00 
ffff800000806fbc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806fc0:	48 01 d0             	add    rax,rdx
ffff800000806fc3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806fc6:	83 e0 01             	and    eax,0x1
ffff800000806fc9:	48 85 c0             	test   rax,rax
ffff800000806fcc:	0f 84 19 03 00 00    	je     ffff8000008072eb <release_mmap+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:958
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK|KNL_BASE;
ffff800000806fd2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806fd5:	48 98                	cdqe   
ffff800000806fd7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806fde:	00 
ffff800000806fdf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806fe3:	48 01 d0             	add    rax,rdx
ffff800000806fe6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806fe9:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000806ff0:	7f 00 00 
ffff800000806ff3:	48 21 c2             	and    rdx,rax
ffff800000806ff6:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000806ffd:	80 ff ff 
ffff800000807000:	48 09 d0             	or     rax,rdx
ffff800000807003:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959
            for(int j=0;j<512;j++)
ffff800000807007:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080700e:	e9 85 02 00 00       	jmp    ffff800000807298 <release_mmap+0x333>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff800000807013:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807016:	48 98                	cdqe   
ffff800000807018:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080701f:	00 
ffff800000807020:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807024:	48 01 d0             	add    rax,rdx
ffff800000807027:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080702a:	83 e0 01             	and    eax,0x1
ffff80000080702d:	48 85 c0             	test   rax,rax
ffff800000807030:	0f 84 5e 02 00 00    	je     ffff800000807294 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961 (discriminator 1)
ffff800000807036:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807039:	48 98                	cdqe   
ffff80000080703b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807042:	00 
ffff800000807043:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807047:	48 01 d0             	add    rax,rdx
ffff80000080704a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080704d:	25 80 00 00 00       	and    eax,0x80
ffff800000807052:	48 85 c0             	test   rax,rax
ffff800000807055:	0f 85 39 02 00 00    	jne    ffff800000807294 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:962
                    page_item *pde=pdpte[j]&PAGE_4K_MASK|KNL_BASE;
ffff80000080705b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080705e:	48 98                	cdqe   
ffff800000807060:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807067:	00 
ffff800000807068:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080706c:	48 01 d0             	add    rax,rdx
ffff80000080706f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807072:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807079:	7f 00 00 
ffff80000080707c:	48 21 c2             	and    rdx,rax
ffff80000080707f:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000807086:	80 ff ff 
ffff800000807089:	48 09 d0             	or     rax,rdx
ffff80000080708c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963
                    for(int k=0;k<512;k++)
ffff800000807090:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000807097:	e9 a5 01 00 00       	jmp    ffff800000807241 <release_mmap+0x2dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff80000080709c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080709f:	48 98                	cdqe   
ffff8000008070a1:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008070a8:	00 
ffff8000008070a9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008070ad:	48 01 d0             	add    rax,rdx
ffff8000008070b0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008070b3:	83 e0 01             	and    eax,0x1
ffff8000008070b6:	48 85 c0             	test   rax,rax
ffff8000008070b9:	0f 84 09 01 00 00    	je     ffff8000008071c8 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965 (discriminator 1)
ffff8000008070bf:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008070c2:	48 98                	cdqe   
ffff8000008070c4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008070cb:	00 
ffff8000008070cc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008070d0:	48 01 d0             	add    rax,rdx
ffff8000008070d3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008070d6:	25 80 00 00 00       	and    eax,0x80
ffff8000008070db:	48 85 c0             	test   rax,rax
ffff8000008070de:	0f 85 e4 00 00 00    	jne    ffff8000008071c8 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:966
                            page_item *pte=pde[k]&PAGE_4K_MASK|KNL_BASE;
ffff8000008070e4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008070e7:	48 98                	cdqe   
ffff8000008070e9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008070f0:	00 
ffff8000008070f1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008070f5:	48 01 d0             	add    rax,rdx
ffff8000008070f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008070fb:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807102:	7f 00 00 
ffff800000807105:	48 21 c2             	and    rdx,rax
ffff800000807108:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080710f:	80 ff ff 
ffff800000807112:	48 09 d0             	or     rax,rdx
ffff800000807115:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967
                            for(int l=0;l<512;l++){
ffff800000807119:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000807120:	eb 55                	jmp    ffff800000807177 <release_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:968
                                if(pte[l]&PAGE_PRESENT){
ffff800000807122:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807125:	48 98                	cdqe   
ffff800000807127:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080712e:	00 
ffff80000080712f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807133:	48 01 d0             	add    rax,rdx
ffff800000807136:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807139:	83 e0 01             	and    eax,0x1
ffff80000080713c:	48 85 c0             	test   rax,rax
ffff80000080713f:	74 32                	je     ffff800000807173 <release_mmap+0x20e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:971
                                    //释放申请的物理内存
                                    //TODO:这里有一个问题：目前fork时候堆栈空间使用的是vmalloc内存，这样的话free_page是释放不了的。
                                    free_page(pte[l]&PAGE_4K_MASK);
ffff800000807141:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807144:	48 98                	cdqe   
ffff800000807146:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080714d:	00 
ffff80000080714e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807152:	48 01 d0             	add    rax,rdx
ffff800000807155:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807158:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080715e:	48 89 c7             	mov    rdi,rax
ffff800000807161:	49 89 df             	mov    r15,rbx
ffff800000807164:	48 b8 7c 51 ee ff ff 	movabs rax,0xffffffffffee517c
ffff80000080716b:	ff ff ff 
ffff80000080716e:	48 01 d8             	add    rax,rbx
ffff800000807171:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967 (discriminator 2)
                            for(int l=0;l<512;l++){
ffff800000807173:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967 (discriminator 1)
ffff800000807177:	81 7d e0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x20],0x1ff
ffff80000080717e:	7e a2                	jle    ffff800000807122 <release_mmap+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:975
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK|KNL_BASE);
ffff800000807180:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807183:	48 98                	cdqe   
ffff800000807185:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080718c:	00 
ffff80000080718d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807191:	48 01 d0             	add    rax,rdx
ffff800000807194:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807197:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff80000080719e:	7f 00 00 
ffff8000008071a1:	48 21 c2             	and    rdx,rax
ffff8000008071a4:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008071ab:	80 ff ff 
ffff8000008071ae:	48 09 d0             	or     rax,rdx
ffff8000008071b1:	48 89 c7             	mov    rdi,rax
ffff8000008071b4:	49 89 df             	mov    r15,rbx
ffff8000008071b7:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff8000008071be:	ff ff ff 
ffff8000008071c1:	48 01 d8             	add    rax,rbx
ffff8000008071c4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff8000008071c6:	eb 75                	jmp    ffff80000080723d <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k] & PDE_2MB)){
ffff8000008071c8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008071cb:	48 98                	cdqe   
ffff8000008071cd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008071d4:	00 
ffff8000008071d5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008071d9:	48 01 d0             	add    rax,rdx
ffff8000008071dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008071df:	83 e0 01             	and    eax,0x1
ffff8000008071e2:	48 85 c0             	test   rax,rax
ffff8000008071e5:	74 56                	je     ffff80000080723d <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976 (discriminator 1)
ffff8000008071e7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008071ea:	48 98                	cdqe   
ffff8000008071ec:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008071f3:	00 
ffff8000008071f4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008071f8:	48 01 d0             	add    rax,rdx
ffff8000008071fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008071fe:	25 80 00 00 00       	and    eax,0x80
ffff800000807203:	48 85 c0             	test   rax,rax
ffff800000807206:	74 35                	je     ffff80000080723d <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:978
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
ffff800000807208:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080720b:	48 98                	cdqe   
ffff80000080720d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807214:	00 
ffff800000807215:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807219:	48 01 d0             	add    rax,rdx
ffff80000080721c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080721f:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000807224:	be 00 02 00 00       	mov    esi,0x200
ffff800000807229:	89 c7                	mov    edi,eax
ffff80000080722b:	49 89 df             	mov    r15,rbx
ffff80000080722e:	48 b8 2e 52 ee ff ff 	movabs rax,0xffffffffffee522e
ffff800000807235:	ff ff ff 
ffff800000807238:	48 01 d8             	add    rax,rbx
ffff80000080723b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff80000080723d:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963 (discriminator 1)
ffff800000807241:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000807248:	0f 8e 4e fe ff ff    	jle    ffff80000080709c <release_mmap+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:982
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK|KNL_BASE);
ffff80000080724e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807251:	48 98                	cdqe   
ffff800000807253:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080725a:	00 
ffff80000080725b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080725f:	48 01 d0             	add    rax,rdx
ffff800000807262:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807265:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff80000080726c:	7f 00 00 
ffff80000080726f:	48 21 c2             	and    rdx,rax
ffff800000807272:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000807279:	80 ff ff 
ffff80000080727c:	48 09 d0             	or     rax,rdx
ffff80000080727f:	48 89 c7             	mov    rdi,rax
ffff800000807282:	49 89 df             	mov    r15,rbx
ffff800000807285:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080728c:	ff ff ff 
ffff80000080728f:	48 01 d8             	add    rax,rbx
ffff800000807292:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959 (discriminator 2)
            for(int j=0;j<512;j++)
ffff800000807294:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959 (discriminator 1)
ffff800000807298:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff80000080729f:	0f 8e 6e fd ff ff    	jle    ffff800000807013 <release_mmap+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:987
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK|KNL_BASE);
ffff8000008072a5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008072a8:	48 98                	cdqe   
ffff8000008072aa:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008072b1:	00 
ffff8000008072b2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008072b6:	48 01 d0             	add    rax,rdx
ffff8000008072b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008072bc:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008072c3:	7f 00 00 
ffff8000008072c6:	48 21 c2             	and    rdx,rax
ffff8000008072c9:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008072d0:	80 ff ff 
ffff8000008072d3:	48 09 d0             	or     rax,rdx
ffff8000008072d6:	48 89 c7             	mov    rdi,rax
ffff8000008072d9:	49 89 df             	mov    r15,rbx
ffff8000008072dc:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff8000008072e3:	ff ff ff 
ffff8000008072e6:	48 01 d8             	add    rax,rbx
ffff8000008072e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955 (discriminator 2)
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff8000008072eb:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955 (discriminator 1)
ffff8000008072ef:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffff8000008072f6:	0f 8e b3 fc ff ff    	jle    ffff800000806faf <release_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990
        }
    }
}
ffff8000008072fc:	90                   	nop
ffff8000008072fd:	90                   	nop
ffff8000008072fe:	48 83 c4 50          	add    rsp,0x50
ffff800000807302:	5b                   	pop    rbx
ffff800000807303:	41 5f                	pop    r15
ffff800000807305:	5d                   	pop    rbp
ffff800000807306:	c3                   	ret    

ffff800000807307 <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
void copy_mmap(struct process* from, struct process *to){
ffff800000807307:	f3 0f 1e fa          	endbr64 
ffff80000080730b:	55                   	push   rbp
ffff80000080730c:	48 89 e5             	mov    rbp,rsp
ffff80000080730f:	41 57                	push   r15
ffff800000807311:	53                   	push   rbx
ffff800000807312:	48 83 ec 70          	sub    rsp,0x70
ffff800000807316:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807316 <copy_mmap+0xf>
ffff80000080731d:	49 bb e2 67 11 00 00 	movabs r11,0x1167e2
ffff800000807324:	00 00 00 
ffff800000807327:	4c 01 db             	add    rbx,r11
ffff80000080732a:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080732e:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992
    page_item * pml4p= kmalloc();
ffff800000807332:	49 89 df             	mov    r15,rbx
ffff800000807335:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080733a:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000807341:	ff ff ff 
ffff800000807344:	48 01 da             	add    rdx,rbx
ffff800000807347:	ff d2                	call   rdx
ffff800000807349:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:993
    memcpy(pml4p, (unsigned char *) from->pml4, PAGE_4K_SIZE);//复制pml4
ffff80000080734d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000807351:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff800000807358:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080735c:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000807361:	48 89 ce             	mov    rsi,rcx
ffff800000807364:	48 89 c7             	mov    rdi,rax
ffff800000807367:	49 89 df             	mov    r15,rbx
ffff80000080736a:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000807371:	ff ff ff 
ffff800000807374:	48 01 d8             	add    rax,rbx
ffff800000807377:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:994
    to->regs.cr3=(unsigned long)pml4p&~KNL_BASE;
ffff800000807379:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080737d:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000807384:	7f 00 00 
ffff800000807387:	48 21 c2             	and    rdx,rax
ffff80000080738a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080738e:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:995
    to->pml4=pml4p;
ffff800000807395:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000807399:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080739d:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:998
    //复制pdpt

    page_item *pml4e= pml4p;
ffff8000008073a4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008073a8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999
    for(int i=0;i<512;i++)
ffff8000008073ac:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008073b3:	e9 0e 03 00 00       	jmp    ffff8000008076c6 <copy_mmap+0x3bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001
    {
        if((pml4e[i]&PAGE_PRESENT)==0)
ffff8000008073b8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008073bb:	48 98                	cdqe   
ffff8000008073bd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008073c4:	00 
ffff8000008073c5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008073c9:	48 01 d0             	add    rax,rdx
ffff8000008073cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008073cf:	83 e0 01             	and    eax,0x1
ffff8000008073d2:	48 85 c0             	test   rax,rax
ffff8000008073d5:	0f 84 e6 02 00 00    	je     ffff8000008076c1 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003
            continue;
        addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff8000008073db:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008073de:	48 98                	cdqe   
ffff8000008073e0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008073e7:	00 
ffff8000008073e8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008073ec:	48 01 d0             	add    rax,rdx
ffff8000008073ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008073f2:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
        addr_t m4=kmalloc();
ffff8000008073f6:	49 89 df             	mov    r15,rbx
ffff8000008073f9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008073fe:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000807405:	ff ff ff 
ffff800000807408:	48 01 da             	add    rdx,rbx
ffff80000080740b:	ff d2                	call   rdx
ffff80000080740d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005
        pml4e[i]= (m4&~KNL_BASE) | (old_data & ~PAGE_4K_MASK);
ffff800000807411:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807418:	7f 00 00 
ffff80000080741b:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff80000080741f:	48 89 c2             	mov    rdx,rax
ffff800000807422:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807426:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080742b:	48 89 c1             	mov    rcx,rax
ffff80000080742e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807431:	48 98                	cdqe   
ffff800000807433:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff80000080743a:	00 
ffff80000080743b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080743f:	48 01 f0             	add    rax,rsi
ffff800000807442:	48 09 ca             	or     rdx,rcx
ffff800000807445:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1006
        memcpy((unsigned char *) m4, old_data & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000807448:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff80000080744f:	7f 00 00 
ffff800000807452:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
ffff800000807456:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080745d:	80 ff ff 
ffff800000807460:	48 09 d0             	or     rax,rdx
ffff800000807463:	48 89 c1             	mov    rcx,rax
ffff800000807466:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080746a:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080746f:	48 89 ce             	mov    rsi,rcx
ffff800000807472:	48 89 c7             	mov    rdi,rax
ffff800000807475:	49 89 df             	mov    r15,rbx
ffff800000807478:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080747f:	ff ff ff 
ffff800000807482:	48 01 d8             	add    rax,rbx
ffff800000807485:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
        page_item *pdpte= (page_item *) m4;
ffff800000807487:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080748b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008
        for(int j=0;j<512;j++)
ffff80000080748f:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000807496:	e9 17 02 00 00       	jmp    ffff8000008076b2 <copy_mmap+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1010
        {
            if((pdpte[j]&PAGE_PRESENT)==0||(pdpte[j]&PDPTE_1GB)!=0)
ffff80000080749b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080749e:	48 98                	cdqe   
ffff8000008074a0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008074a7:	00 
ffff8000008074a8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008074ac:	48 01 d0             	add    rax,rdx
ffff8000008074af:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008074b2:	83 e0 01             	and    eax,0x1
ffff8000008074b5:	48 85 c0             	test   rax,rax
ffff8000008074b8:	0f 84 ef 01 00 00    	je     ffff8000008076ad <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1010 (discriminator 2)
ffff8000008074be:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008074c1:	48 98                	cdqe   
ffff8000008074c3:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008074ca:	00 
ffff8000008074cb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008074cf:	48 01 d0             	add    rax,rdx
ffff8000008074d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008074d5:	25 80 00 00 00       	and    eax,0x80
ffff8000008074da:	48 85 c0             	test   rax,rax
ffff8000008074dd:	0f 85 ca 01 00 00    	jne    ffff8000008076ad <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1012
                continue;
            addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff8000008074e3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008074e6:	48 98                	cdqe   
ffff8000008074e8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008074ef:	00 
ffff8000008074f0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008074f4:	48 01 d0             	add    rax,rdx
ffff8000008074f7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008074fa:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1013
            addr_t m3=kmalloc();
ffff8000008074fe:	49 89 df             	mov    r15,rbx
ffff800000807501:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807506:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080750d:	ff ff ff 
ffff800000807510:	48 01 da             	add    rdx,rbx
ffff800000807513:	ff d2                	call   rdx
ffff800000807515:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1014
            pdpte[j]= (m3&~KNL_BASE) | (old_data2 & ~PAGE_4K_MASK);
ffff800000807519:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807520:	7f 00 00 
ffff800000807523:	48 23 45 a8          	and    rax,QWORD PTR [rbp-0x58]
ffff800000807527:	48 89 c2             	mov    rdx,rax
ffff80000080752a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080752e:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000807533:	48 89 c1             	mov    rcx,rax
ffff800000807536:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807539:	48 98                	cdqe   
ffff80000080753b:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000807542:	00 
ffff800000807543:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807547:	48 01 f0             	add    rax,rsi
ffff80000080754a:	48 09 ca             	or     rdx,rcx
ffff80000080754d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1015
            memcpy((unsigned char *) m3, old_data2 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000807550:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000807557:	7f 00 00 
ffff80000080755a:	48 23 45 b0          	and    rax,QWORD PTR [rbp-0x50]
ffff80000080755e:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff800000807565:	80 ff ff 
ffff800000807568:	48 09 d0             	or     rax,rdx
ffff80000080756b:	48 89 c1             	mov    rcx,rax
ffff80000080756e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000807572:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000807577:	48 89 ce             	mov    rsi,rcx
ffff80000080757a:	48 89 c7             	mov    rdi,rax
ffff80000080757d:	49 89 df             	mov    r15,rbx
ffff800000807580:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000807587:	ff ff ff 
ffff80000080758a:	48 01 d8             	add    rax,rbx
ffff80000080758d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016
            page_item *pde= (page_item *) m3;
ffff80000080758f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000807593:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017
            for(int k=0;k<512;k++)
ffff800000807597:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080759e:	e9 fb 00 00 00       	jmp    ffff80000080769e <copy_mmap+0x397>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019
            {
                if((pde[k]&PAGE_PRESENT)==0||(pde[k]&PDE_2MB)!=0)
ffff8000008075a3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008075a6:	48 98                	cdqe   
ffff8000008075a8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008075af:	00 
ffff8000008075b0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008075b4:	48 01 d0             	add    rax,rdx
ffff8000008075b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008075ba:	83 e0 01             	and    eax,0x1
ffff8000008075bd:	48 85 c0             	test   rax,rax
ffff8000008075c0:	0f 84 d3 00 00 00    	je     ffff800000807699 <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019 (discriminator 2)
ffff8000008075c6:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008075c9:	48 98                	cdqe   
ffff8000008075cb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008075d2:	00 
ffff8000008075d3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008075d7:	48 01 d0             	add    rax,rdx
ffff8000008075da:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008075dd:	25 80 00 00 00       	and    eax,0x80
ffff8000008075e2:	48 85 c0             	test   rax,rax
ffff8000008075e5:	0f 85 ae 00 00 00    	jne    ffff800000807699 <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021
                    continue;
                addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff8000008075eb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008075ee:	48 98                	cdqe   
ffff8000008075f0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008075f7:	00 
ffff8000008075f8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008075fc:	48 01 d0             	add    rax,rdx
ffff8000008075ff:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807602:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1022
                addr_t m2=kmalloc();
ffff800000807606:	49 89 df             	mov    r15,rbx
ffff800000807609:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080760e:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000807615:	ff ff ff 
ffff800000807618:	48 01 da             	add    rdx,rbx
ffff80000080761b:	ff d2                	call   rdx
ffff80000080761d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023
                pde[k]= (m2&~KNL_BASE) | (old_data3 & ~PAGE_4K_MASK);
ffff800000807621:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807628:	7f 00 00 
ffff80000080762b:	48 23 45 90          	and    rax,QWORD PTR [rbp-0x70]
ffff80000080762f:	48 89 c2             	mov    rdx,rax
ffff800000807632:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000807636:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080763b:	48 89 c1             	mov    rcx,rax
ffff80000080763e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807641:	48 98                	cdqe   
ffff800000807643:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff80000080764a:	00 
ffff80000080764b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080764f:	48 01 f0             	add    rax,rsi
ffff800000807652:	48 09 ca             	or     rdx,rcx
ffff800000807655:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024
                memcpy((unsigned char *) m2, old_data3 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000807658:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff80000080765f:	7f 00 00 
ffff800000807662:	48 23 45 98          	and    rax,QWORD PTR [rbp-0x68]
ffff800000807666:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080766d:	80 ff ff 
ffff800000807670:	48 09 d0             	or     rax,rdx
ffff800000807673:	48 89 c1             	mov    rcx,rax
ffff800000807676:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080767a:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080767f:	48 89 ce             	mov    rsi,rcx
ffff800000807682:	48 89 c7             	mov    rdi,rax
ffff800000807685:	49 89 df             	mov    r15,rbx
ffff800000807688:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080768f:	ff ff ff 
ffff800000807692:	48 01 d8             	add    rax,rbx
ffff800000807695:	ff d0                	call   rax
ffff800000807697:	eb 01                	jmp    ffff80000080769a <copy_mmap+0x393>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1020
                    continue;
ffff800000807699:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017 (discriminator 2)
            for(int k=0;k<512;k++)
ffff80000080769a:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017 (discriminator 1)
ffff80000080769e:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff8000008076a5:	0f 8e f8 fe ff ff    	jle    ffff8000008075a3 <copy_mmap+0x29c>
ffff8000008076ab:	eb 01                	jmp    ffff8000008076ae <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1011
                continue;
ffff8000008076ad:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008 (discriminator 2)
        for(int j=0;j<512;j++)
ffff8000008076ae:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008 (discriminator 1)
ffff8000008076b2:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff8000008076b9:	0f 8e dc fd ff ff    	jle    ffff80000080749b <copy_mmap+0x194>
ffff8000008076bf:	eb 01                	jmp    ffff8000008076c2 <copy_mmap+0x3bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002
            continue;
ffff8000008076c1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999 (discriminator 2)
    for(int i=0;i<512;i++)
ffff8000008076c2:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999 (discriminator 1)
ffff8000008076c6:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff8000008076cd:	0f 8e e5 fc ff ff    	jle    ffff8000008073b8 <copy_mmap+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1031
            }

        }

    }
}
ffff8000008076d3:	90                   	nop
ffff8000008076d4:	90                   	nop
ffff8000008076d5:	48 83 c4 70          	add    rsp,0x70
ffff8000008076d9:	5b                   	pop    rbx
ffff8000008076da:	41 5f                	pop    r15
ffff8000008076dc:	5d                   	pop    rbp
ffff8000008076dd:	c3                   	ret    

ffff8000008076de <chk_mmap>:
chk_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1033

int chk_mmap(off_t base, size_t mem_size){
ffff8000008076de:	f3 0f 1e fa          	endbr64 
ffff8000008076e2:	55                   	push   rbp
ffff8000008076e3:	48 89 e5             	mov    rbp,rsp
ffff8000008076e6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008076e6 <chk_mmap+0x8>
ffff8000008076ed:	49 bb 12 64 11 00 00 	movabs r11,0x116412
ffff8000008076f4:	00 00 00 
ffff8000008076f7:	4c 01 d8             	add    rax,r11
ffff8000008076fa:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff8000008076fd:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1035
    size_t nr_pte;
    size_t ndx_pml4=0,ndx_pdpt=0,ndx_pd=0,ndx_pt=0;
ffff800000807701:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff800000807708:	00 
ffff800000807709:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000807710:	00 
ffff800000807711:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000807718:	00 
ffff800000807719:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000807720:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
    page_item *pml4e= current->pml4;
ffff800000807721:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807728:	ff ff ff 
ffff80000080772b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080772f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807732:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000807739:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1037
    nr_pte=  (mem_size-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080773d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807741:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000807747:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080774b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038
    ndx_pt=  base/PAGE_4K_SIZE;
ffff80000080774f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000807752:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000807758:	85 c0                	test   eax,eax
ffff80000080775a:	0f 48 c2             	cmovs  eax,edx
ffff80000080775d:	c1 f8 0c             	sar    eax,0xc
ffff800000807760:	48 98                	cdqe   
ffff800000807762:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1039
    ndx_pd=  ndx_pt/512%512;
ffff800000807766:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080776a:	48 c1 e8 09          	shr    rax,0x9
ffff80000080776e:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000807773:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1040
    ndx_pdpt=ndx_pd/512%512;
ffff800000807777:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080777b:	48 c1 e8 09          	shr    rax,0x9
ffff80000080777f:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000807784:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041
    ndx_pml4=ndx_pdpt/512%512;
ffff800000807788:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080778c:	48 c1 e8 09          	shr    rax,0x9
ffff800000807790:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000807795:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042
    while (nr_pte)
ffff800000807799:	eb 25                	jmp    ffff8000008077c0 <chk_mmap+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1044
    {
        if(ndx_pdpt==512){
ffff80000080779b:	48 81 7d f8 00 02 00 	cmp    QWORD PTR [rbp-0x8],0x200
ffff8000008077a2:	00 
ffff8000008077a3:	75 0d                	jne    ffff8000008077b2 <chk_mmap+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1045
            ndx_pml4++;
ffff8000008077a5:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1046
            ndx_pdpt=0;
ffff8000008077aa:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff8000008077b1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1049 (discriminator 1)
        }
        if(pml4e[ndx_pml4]%PAGE_PRESENT==0){
            ndx_pml4++;
ffff8000008077b2:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050 (discriminator 1)
            ndx_pdpt=0;
ffff8000008077b7:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff8000008077be:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1051 (discriminator 1)
            continue;
ffff8000008077bf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042
    while (nr_pte)
ffff8000008077c0:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff8000008077c5:	75 d4                	jne    ffff80000080779b <chk_mmap+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1081
        if(pt[ndx_pt]&PAGE_PRESENT)return 0;
        ndx_pt++;
        nr_pte--;
    }
    
    return 1;
ffff8000008077c7:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1082
}
ffff8000008077cc:	5d                   	pop    rbp
ffff8000008077cd:	c3                   	ret    

ffff8000008077ce <sys_getpgrp>:
sys_getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1083
pid_t sys_getpgrp(void){
ffff8000008077ce:	f3 0f 1e fa          	endbr64 
ffff8000008077d2:	55                   	push   rbp
ffff8000008077d3:	48 89 e5             	mov    rbp,rsp
ffff8000008077d6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008077d6 <sys_getpgrp+0x8>
ffff8000008077dd:	49 bb 22 63 11 00 00 	movabs r11,0x116322
ffff8000008077e4:	00 00 00 
ffff8000008077e7:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1084
    return current->gpid;
ffff8000008077ea:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008077f1:	ff ff ff 
ffff8000008077f4:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008077f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008077fb:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1085
}
ffff8000008077fe:	5d                   	pop    rbp
ffff8000008077ff:	c3                   	ret    

ffff800000807800 <sys_getpgid>:
sys_getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1087

int sys_getpgid(pid_t pid,gid_t gid){
ffff800000807800:	f3 0f 1e fa          	endbr64 
ffff800000807804:	55                   	push   rbp
ffff800000807805:	48 89 e5             	mov    rbp,rsp
ffff800000807808:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807808 <sys_getpgid+0x8>
ffff80000080780f:	49 bb f0 62 11 00 00 	movabs r11,0x1162f0
ffff800000807816:	00 00 00 
ffff800000807819:	4c 01 d8             	add    rax,r11
ffff80000080781c:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080781f:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1088
    if(pid==0)
ffff800000807822:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000807826:	75 16                	jne    ffff80000080783e <sys_getpgid+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1089
        return current->gpid;
ffff800000807828:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080782f:	ff ff ff 
ffff800000807832:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807836:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807839:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080783c:	eb 67                	jmp    ffff8000008078a5 <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1090
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff80000080783e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000807845:	eb 53                	jmp    ffff80000080789a <sys_getpgid+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1091
        if(task[i].pid==pid)
ffff800000807847:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080784e:	ff ff ff 
ffff800000807851:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807855:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807858:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080785b:	48 63 d2             	movsxd rdx,edx
ffff80000080785e:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000807865:	48 01 ca             	add    rdx,rcx
ffff800000807868:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080786a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080786d:	39 d1                	cmp    ecx,edx
ffff80000080786f:	75 25                	jne    ffff800000807896 <sys_getpgid+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1092
            return task[i].gpid;
ffff800000807871:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807878:	ff ff ff 
ffff80000080787b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080787f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807882:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807885:	48 98                	cdqe   
ffff800000807887:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080788e:	48 01 d0             	add    rax,rdx
ffff800000807891:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000807894:	eb 0f                	jmp    ffff8000008078a5 <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1090 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807896:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1090 (discriminator 1)
ffff80000080789a:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff80000080789e:	7e a7                	jle    ffff800000807847 <sys_getpgid+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1094
    }
    return -1;
ffff8000008078a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1095
}
ffff8000008078a5:	5d                   	pop    rbp
ffff8000008078a6:	c3                   	ret    

ffff8000008078a7 <sys_setpgid>:
sys_setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1096
int sys_setpgid(pid_t pid,gid_t gid){
ffff8000008078a7:	f3 0f 1e fa          	endbr64 
ffff8000008078ab:	55                   	push   rbp
ffff8000008078ac:	48 89 e5             	mov    rbp,rsp
ffff8000008078af:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008078af <sys_setpgid+0x8>
ffff8000008078b6:	49 bb 49 62 11 00 00 	movabs r11,0x116249
ffff8000008078bd:	00 00 00 
ffff8000008078c0:	4c 01 d8             	add    rax,r11
ffff8000008078c3:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff8000008078c6:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1097
    if(pid==0)
ffff8000008078c9:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008078cd:	75 56                	jne    ffff800000807925 <sys_setpgid+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1099
    {
        if(current->sid==current->pid)
ffff8000008078cf:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008078d6:	ff ff ff 
ffff8000008078d9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008078dd:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008078e0:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008078e3:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008078ea:	ff ff ff 
ffff8000008078ed:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008078f1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008078f4:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008078f6:	39 d1                	cmp    ecx,edx
ffff8000008078f8:	75 0a                	jne    ffff800000807904 <sys_setpgid+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1100
            return -1;
ffff8000008078fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008078ff:	e9 e9 00 00 00       	jmp    ffff8000008079ed <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1101
        current->gpid=gid;
ffff800000807904:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080790b:	ff ff ff 
ffff80000080790e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807912:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807915:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807918:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1102
        return 0;
ffff80000080791b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807920:	e9 c8 00 00 00       	jmp    ffff8000008079ed <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1104
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807925:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080792c:	e9 ad 00 00 00       	jmp    ffff8000008079de <sys_setpgid+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1105
        if(task[i].pid==pid)
ffff800000807931:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807938:	ff ff ff 
ffff80000080793b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080793f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807942:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807945:	48 63 d2             	movsxd rdx,edx
ffff800000807948:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080794f:	48 01 ca             	add    rdx,rcx
ffff800000807952:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807954:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807957:	39 d1                	cmp    ecx,edx
ffff800000807959:	75 7f                	jne    ffff8000008079da <sys_setpgid+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1107
        {
            if(task[i].sid==task[i].pid)
ffff80000080795b:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807962:	ff ff ff 
ffff800000807965:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807969:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080796c:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080796f:	48 63 d2             	movsxd rdx,edx
ffff800000807972:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000807979:	48 01 ca             	add    rdx,rcx
ffff80000080797c:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff80000080797f:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807986:	ff ff ff 
ffff800000807989:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080798d:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000807990:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807993:	48 63 d2             	movsxd rdx,edx
ffff800000807996:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080799d:	48 01 f2             	add    rdx,rsi
ffff8000008079a0:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008079a2:	39 d1                	cmp    ecx,edx
ffff8000008079a4:	75 07                	jne    ffff8000008079ad <sys_setpgid+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1108
                return -1;
ffff8000008079a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008079ab:	eb 40                	jmp    ffff8000008079ed <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1109
            task[i].gpid=gid;
ffff8000008079ad:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008079b4:	ff ff ff 
ffff8000008079b7:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008079bb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008079be:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008079c1:	48 98                	cdqe   
ffff8000008079c3:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008079ca:	48 01 c2             	add    rdx,rax
ffff8000008079cd:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008079d0:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1110
            return 0;
ffff8000008079d3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008079d8:	eb 13                	jmp    ffff8000008079ed <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1104 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008079da:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1104 (discriminator 1)
ffff8000008079de:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff8000008079e2:	0f 8e 49 ff ff ff    	jle    ffff800000807931 <sys_setpgid+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1113
        }
    }
    return -1;
ffff8000008079e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1114
}
ffff8000008079ed:	5d                   	pop    rbp
ffff8000008079ee:	c3                   	ret    

ffff8000008079ef <sys_setsid>:
sys_setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1116

pid_t sys_setsid(void){
ffff8000008079ef:	f3 0f 1e fa          	endbr64 
ffff8000008079f3:	55                   	push   rbp
ffff8000008079f4:	48 89 e5             	mov    rbp,rsp
ffff8000008079f7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008079f7 <sys_setsid+0x8>
ffff8000008079fe:	49 bb 01 61 11 00 00 	movabs r11,0x116101
ffff800000807a05:	00 00 00 
ffff800000807a08:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1117
    current->sid=current->pid;
ffff800000807a0b:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807a12:	ff ff ff 
ffff800000807a15:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807a19:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807a1c:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000807a23:	ff ff ff 
ffff800000807a26:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000807a2a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807a2d:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807a2f:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1118
}
ffff800000807a32:	90                   	nop
ffff800000807a33:	5d                   	pop    rbp
ffff800000807a34:	c3                   	ret    

ffff800000807a35 <sys_getsid>:
sys_getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1119
pid_t sys_getsid(pid_t pid){
ffff800000807a35:	f3 0f 1e fa          	endbr64 
ffff800000807a39:	55                   	push   rbp
ffff800000807a3a:	48 89 e5             	mov    rbp,rsp
ffff800000807a3d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807a3d <sys_getsid+0x8>
ffff800000807a44:	49 bb bb 60 11 00 00 	movabs r11,0x1160bb
ffff800000807a4b:	00 00 00 
ffff800000807a4e:	4c 01 d8             	add    rax,r11
ffff800000807a51:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1120
    if(pid==0)
ffff800000807a54:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000807a58:	75 16                	jne    ffff800000807a70 <sys_getsid+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1121
        return current->sid;
ffff800000807a5a:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807a61:	ff ff ff 
ffff800000807a64:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807a68:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807a6b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000807a6e:	eb 67                	jmp    ffff800000807ad7 <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807a70:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000807a77:	eb 53                	jmp    ffff800000807acc <sys_getsid+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1123
        if(task[i].pid==pid)
ffff800000807a79:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807a80:	ff ff ff 
ffff800000807a83:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807a87:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807a8a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807a8d:	48 63 d2             	movsxd rdx,edx
ffff800000807a90:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000807a97:	48 01 ca             	add    rdx,rcx
ffff800000807a9a:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807a9c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807a9f:	39 d1                	cmp    ecx,edx
ffff800000807aa1:	75 25                	jne    ffff800000807ac8 <sys_getsid+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1124
            return task[i].sid;
ffff800000807aa3:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807aaa:	ff ff ff 
ffff800000807aad:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807ab1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807ab4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807ab7:	48 98                	cdqe   
ffff800000807ab9:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807ac0:	48 01 d0             	add    rax,rdx
ffff800000807ac3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000807ac6:	eb 0f                	jmp    ffff800000807ad7 <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807ac8:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122 (discriminator 1)
ffff800000807acc:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807ad0:	7e a7                	jle    ffff800000807a79 <sys_getsid+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1126
    }
    return -1;
ffff800000807ad2:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1127
}
ffff800000807ad7:	5d                   	pop    rbp
ffff800000807ad8:	c3                   	ret    

ffff800000807ad9 <sys_tcsetpgrp>:
sys_tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1128
int sys_tcsetpgrp(int fildes,pid_t pgid_id){
ffff800000807ad9:	f3 0f 1e fa          	endbr64 
ffff800000807add:	55                   	push   rbp
ffff800000807ade:	48 89 e5             	mov    rbp,rsp
ffff800000807ae1:	41 57                	push   r15
ffff800000807ae3:	53                   	push   rbx
ffff800000807ae4:	48 83 ec 20          	sub    rsp,0x20
ffff800000807ae8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807ae8 <sys_tcsetpgrp+0xf>
ffff800000807aef:	49 bb 10 60 11 00 00 	movabs r11,0x116010
ffff800000807af6:	00 00 00 
ffff800000807af9:	4c 01 db             	add    rbx,r11
ffff800000807afc:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000807aff:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1130
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
ffff800000807b02:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807b05:	ba 00 00 00 00       	mov    edx,0x0
ffff800000807b0a:	be 02 00 00 00       	mov    esi,0x2
ffff800000807b0f:	89 c7                	mov    edi,eax
ffff800000807b11:	49 89 df             	mov    r15,rbx
ffff800000807b14:	48 b8 fa a1 ee ff ff 	movabs rax,0xffffffffffeea1fa
ffff800000807b1b:	ff ff ff 
ffff800000807b1e:	48 01 d8             	add    rax,rbx
ffff800000807b21:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1131
    int sid= sys_getsid(0);//获取session id
ffff800000807b23:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807b28:	49 89 df             	mov    r15,rbx
ffff800000807b2b:	48 b8 3d 9f ee ff ff 	movabs rax,0xffffffffffee9f3d
ffff800000807b32:	ff ff ff 
ffff800000807b35:	48 01 d8             	add    rax,rbx
ffff800000807b38:	ff d0                	call   rax
ffff800000807b3a:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1132
    struct process* new_fgl=NULL;
ffff800000807b3d:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000807b44:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807b45:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000807b4c:	e9 fb 00 00 00       	jmp    ffff800000807c4c <sys_tcsetpgrp+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000807b51:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807b58:	ff ff ff 
ffff800000807b5b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b5f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807b62:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807b65:	48 98                	cdqe   
ffff800000807b67:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807b6e:	48 01 d0             	add    rax,rdx
ffff800000807b71:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000807b74:	83 f8 04             	cmp    eax,0x4
ffff800000807b77:	0f 84 ca 00 00 00    	je     ffff800000807c47 <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134 (discriminator 2)
ffff800000807b7d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807b84:	ff ff ff 
ffff800000807b87:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b8b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807b8e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807b91:	48 98                	cdqe   
ffff800000807b93:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807b9a:	48 01 d0             	add    rax,rdx
ffff800000807b9d:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000807ba0:	85 c0                	test   eax,eax
ffff800000807ba2:	0f 84 9f 00 00 00    	je     ffff800000807c47 <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1135
        if(task[i].sid==sid){
ffff800000807ba8:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807baf:	ff ff ff 
ffff800000807bb2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807bb6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807bb9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807bbc:	48 98                	cdqe   
ffff800000807bbe:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807bc5:	48 01 d0             	add    rax,rdx
ffff800000807bc8:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000807bcb:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807bce:	39 c2                	cmp    edx,eax
ffff800000807bd0:	75 76                	jne    ffff800000807c48 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1136
            task[i].fg_pgid=pgid_id;
ffff800000807bd2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807bd9:	ff ff ff 
ffff800000807bdc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807be0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807be3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807be6:	48 98                	cdqe   
ffff800000807be8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807bef:	48 01 c2             	add    rdx,rax
ffff800000807bf2:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000807bf5:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1137
            if(task[i].pid==pgid_id){
ffff800000807bf8:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807bff:	ff ff ff 
ffff800000807c02:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c06:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807c09:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807c0c:	48 98                	cdqe   
ffff800000807c0e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807c15:	48 01 d0             	add    rax,rdx
ffff800000807c18:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000807c1a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000807c1d:	39 c2                	cmp    edx,eax
ffff800000807c1f:	75 27                	jne    ffff800000807c48 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1139
                //这是新前台进程组的leader
                new_fgl=&task[i];
ffff800000807c21:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807c28:	ff ff ff 
ffff800000807c2b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c2f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807c32:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807c35:	48 98                	cdqe   
ffff800000807c37:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807c3e:	48 01 d0             	add    rax,rdx
ffff800000807c41:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000807c45:	eb 01                	jmp    ffff800000807c48 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000807c47:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807c48:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133 (discriminator 1)
ffff800000807c4c:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff800000807c50:	0f 8e fb fe ff ff    	jle    ffff800000807b51 <sys_tcsetpgrp+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1144
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
ffff800000807c56:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807c5a:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffff800000807c5d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807c61:	48 63 d2             	movsxd rdx,edx
ffff800000807c64:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807c68:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807c6d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000807c71:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
ffff800000807c75:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807c79:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807c7c:	48 63 d2             	movsxd rdx,edx
ffff800000807c7f:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807c83:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
ffff800000807c88:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807c8c:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807c8f:	48 63 d2             	movsxd rdx,edx
ffff800000807c92:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807c96:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807c9b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807c9f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807ca3:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000807ca8:	ba 01 00 00 00       	mov    edx,0x1
ffff800000807cad:	48 89 c7             	mov    rdi,rax
ffff800000807cb0:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1146
    ,TTY_CONNECT,0);
}
ffff800000807cb3:	90                   	nop
ffff800000807cb4:	48 83 c4 20          	add    rsp,0x20
ffff800000807cb8:	5b                   	pop    rbx
ffff800000807cb9:	41 5f                	pop    r15
ffff800000807cbb:	5d                   	pop    rbp
ffff800000807cbc:	c3                   	ret    

ffff800000807cbd <sys_tcgetpgrp>:
sys_tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1147
pid_t sys_tcgetpgrp(int fildes){
ffff800000807cbd:	f3 0f 1e fa          	endbr64 
ffff800000807cc1:	55                   	push   rbp
ffff800000807cc2:	48 89 e5             	mov    rbp,rsp
ffff800000807cc5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807cc5 <sys_tcgetpgrp+0x8>
ffff800000807ccc:	49 bb 33 5e 11 00 00 	movabs r11,0x115e33
ffff800000807cd3:	00 00 00 
ffff800000807cd6:	4c 01 d8             	add    rax,r11
ffff800000807cd9:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1148
    return current->fg_pgid;
ffff800000807cdc:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807ce3:	ff ff ff 
ffff800000807ce6:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807cea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807ced:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1149
}
ffff800000807cf0:	5d                   	pop    rbp
ffff800000807cf1:	c3                   	ret    

ffff800000807cf2 <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1152
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
ffff800000807cf2:	f3 0f 1e fa          	endbr64 
ffff800000807cf6:	55                   	push   rbp
ffff800000807cf7:	48 89 e5             	mov    rbp,rsp
ffff800000807cfa:	48 83 ec 10          	sub    rsp,0x10
ffff800000807cfe:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807cfe <sys_ioctl+0xc>
ffff800000807d05:	49 bb fa 5d 11 00 00 	movabs r11,0x115dfa
ffff800000807d0c:	00 00 00 
ffff800000807d0f:	4c 01 d8             	add    rax,r11
ffff800000807d12:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000807d15:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000807d18:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1153
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
ffff800000807d1c:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807d23:	ff ff ff 
ffff800000807d26:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807d2a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807d2d:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807d30:	48 63 c9             	movsxd rcx,ecx
ffff800000807d33:	48 83 c1 1e          	add    rcx,0x1e
ffff800000807d37:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff800000807d3c:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff800000807d40:	4c 8b 42 28          	mov    r8,QWORD PTR [rdx+0x28]
ffff800000807d44:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000807d47:	48 63 d2             	movsxd rdx,edx
ffff800000807d4a:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000807d51:	ff ff ff 
ffff800000807d54:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000807d58:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffff800000807d5b:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff800000807d5e:	48 63 f6             	movsxd rsi,esi
ffff800000807d61:	48 83 c6 1e          	add    rsi,0x1e
ffff800000807d65:	48 8b 74 f1 08       	mov    rsi,QWORD PTR [rcx+rsi*8+0x8]
ffff800000807d6a:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000807d71:	ff ff ff 
ffff800000807d74:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000807d78:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807d7b:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807d7e:	48 63 c9             	movsxd rcx,ecx
ffff800000807d81:	48 83 c1 1e          	add    rcx,0x1e
ffff800000807d85:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
ffff800000807d8a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807d8e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807d92:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807d96:	48 89 c7             	mov    rdi,rax
ffff800000807d99:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1155
    ,request,args);
}
ffff800000807d9c:	90                   	nop
ffff800000807d9d:	c9                   	leave  
ffff800000807d9e:	c3                   	ret    

ffff800000807d9f <set_errno>:
set_errno():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1156
void set_errno(int errno){
ffff800000807d9f:	f3 0f 1e fa          	endbr64 
ffff800000807da3:	55                   	push   rbp
ffff800000807da4:	48 89 e5             	mov    rbp,rsp
ffff800000807da7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807da7 <set_errno+0x8>
ffff800000807dae:	49 bb 51 5d 11 00 00 	movabs r11,0x115d51
ffff800000807db5:	00 00 00 
ffff800000807db8:	4c 01 d8             	add    rax,r11
ffff800000807dbb:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1157
    current->regs.errcode=errno;
ffff800000807dbe:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807dc5:	ff ff ff 
ffff800000807dc8:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807dcc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807dcf:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807dd2:	48 63 d2             	movsxd rdx,edx
ffff800000807dd5:	48 89 90 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1158
ffff800000807ddc:	90                   	nop
ffff800000807ddd:	5d                   	pop    rbp
ffff800000807dde:	c3                   	ret    
ffff800000807ddf:	90                   	nop

ffff800000807de0 <outb>:
outb():
ffff800000807de0:	66 89 fa             	mov    dx,di
ffff800000807de3:	66 89 f0             	mov    ax,si
ffff800000807de6:	ee                   	out    dx,al
ffff800000807de7:	e8 29 00 00 00       	call   ffff800000807e15 <io_delay>
ffff800000807dec:	c3                   	ret    

ffff800000807ded <outw>:
outw():
ffff800000807ded:	66 89 fa             	mov    dx,di
ffff800000807df0:	66 89 f0             	mov    ax,si
ffff800000807df3:	66 ef                	out    dx,ax
ffff800000807df5:	90                   	nop
ffff800000807df6:	90                   	nop
ffff800000807df7:	90                   	nop
ffff800000807df8:	c3                   	ret    

ffff800000807df9 <inb>:
inb():
ffff800000807df9:	31 c0                	xor    eax,eax
ffff800000807dfb:	66 89 fa             	mov    dx,di
ffff800000807dfe:	ec                   	in     al,dx
ffff800000807dff:	90                   	nop
ffff800000807e00:	90                   	nop
ffff800000807e01:	90                   	nop
ffff800000807e02:	c3                   	ret    

ffff800000807e03 <inw>:
inw():
ffff800000807e03:	31 c0                	xor    eax,eax
ffff800000807e05:	66 89 fa             	mov    dx,di
ffff800000807e08:	66 ed                	in     ax,dx
ffff800000807e0a:	90                   	nop
ffff800000807e0b:	90                   	nop
ffff800000807e0c:	90                   	nop
ffff800000807e0d:	c3                   	ret    

ffff800000807e0e <eoi>:
eoi():
ffff800000807e0e:	b0 20                	mov    al,0x20
ffff800000807e10:	e6 a0                	out    0xa0,al
ffff800000807e12:	e6 20                	out    0x20,al
ffff800000807e14:	c3                   	ret    

ffff800000807e15 <io_delay>:
io_delay():
ffff800000807e15:	90                   	nop
ffff800000807e16:	90                   	nop
ffff800000807e17:	90                   	nop
ffff800000807e18:	90                   	nop
ffff800000807e19:	c3                   	ret    

ffff800000807e1a <turn_on_int>:
turn_on_int():
ffff800000807e1a:	b0 f8                	mov    al,0xf8
ffff800000807e1c:	e6 21                	out    0x21,al
ffff800000807e1e:	e8 f2 ff ff ff       	call   ffff800000807e15 <io_delay>
ffff800000807e23:	b0 af                	mov    al,0xaf
ffff800000807e25:	e6 a1                	out    0xa1,al
ffff800000807e27:	e8 e9 ff ff ff       	call   ffff800000807e15 <io_delay>
ffff800000807e2c:	48 b8 00 70 10 00 00 	movabs rax,0xffff800000107000
ffff800000807e33:	80 ff ff 
ffff800000807e36:	0f 01 18             	lidt   [rax]
ffff800000807e39:	90                   	nop
ffff800000807e3a:	90                   	nop
ffff800000807e3b:	90                   	nop
ffff800000807e3c:	90                   	nop
ffff800000807e3d:	c3                   	ret    

ffff800000807e3e <report_back_trace_of_err>:
report_back_trace_of_err():
ffff800000807e3e:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000807e43:	50                   	push   rax
ffff800000807e44:	83 c4 08             	add    esp,0x8
ffff800000807e47:	c3                   	ret    

ffff800000807e48 <bt_msg>:
bt_msg():
ffff800000807e48:	65 72 72             	gs jb  ffff800000807ebd <fill_desc+0x3a>
ffff800000807e4b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff800000807e4c:	72 20                	jb     ffff800000807e6e <init_gdt+0x11>
ffff800000807e4e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff800000807e4f:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
ffff800000807e52:	72 73                	jb     ffff800000807ec7 <fill_desc+0x44>
ffff800000807e54:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
ffff800000807e57:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # ffff800000eedad5 <_knl_end+0x2edad5>

ffff800000807e5d <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:9
#include "proc.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
ffff800000807e5d:	f3 0f 1e fa          	endbr64 
ffff800000807e61:	55                   	push   rbp
ffff800000807e62:	48 89 e5             	mov    rbp,rsp
ffff800000807e65:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807e65 <init_gdt+0x8>
ffff800000807e6c:	49 bb 93 5c 11 00 00 	movabs r11,0x115c93
ffff800000807e73:	00 00 00 
ffff800000807e76:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:11
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    asm volatile("mov $0x48,%ax\r\n"
ffff800000807e79:	66 b8 48 00          	mov    ax,0x48
ffff800000807e7d:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:13
                 "ltr %ax");  
}
ffff800000807e80:	90                   	nop
ffff800000807e81:	5d                   	pop    rbp
ffff800000807e82:	c3                   	ret    

ffff800000807e83 <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
ffff800000807e83:	f3 0f 1e fa          	endbr64 
ffff800000807e87:	55                   	push   rbp
ffff800000807e88:	48 89 e5             	mov    rbp,rsp
ffff800000807e8b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807e8b <fill_desc+0x8>
ffff800000807e92:	49 bb 6d 5c 11 00 00 	movabs r11,0x115c6d
ffff800000807e99:	00 00 00 
ffff800000807e9c:	4c 01 d8             	add    rax,r11
ffff800000807e9f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000807ea3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000807ea7:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffff800000807eaa:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_12=base&0xffff;
ffff800000807eae:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807eb5:	ff ff ff 
ffff800000807eb8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807ebc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807ebf:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807ec2:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807ec6:	48 01 ca             	add    rdx,rcx
ffff800000807ec9:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000807ecd:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_3=(base>>16)&0xff;
ffff800000807ed1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807ed5:	48 89 d6             	mov    rsi,rdx
ffff800000807ed8:	48 c1 ee 10          	shr    rsi,0x10
ffff800000807edc:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807ee3:	ff ff ff 
ffff800000807ee6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807eea:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807eed:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807ef0:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807ef4:	48 01 ca             	add    rdx,rcx
ffff800000807ef7:	89 f1                	mov    ecx,esi
ffff800000807ef9:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_4=(base>>24)&0xff;
ffff800000807efc:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807f00:	48 89 d6             	mov    rsi,rdx
ffff800000807f03:	48 c1 ee 18          	shr    rsi,0x18
ffff800000807f07:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807f0e:	ff ff ff 
ffff800000807f11:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f15:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807f18:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807f1b:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807f1f:	48 01 ca             	add    rdx,rcx
ffff800000807f22:	89 f1                	mov    ecx,esi
ffff800000807f24:	88 4a 07             	mov    BYTE PTR [rdx+0x7],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].base_5678=(base>>32)&0xffffffff;
ffff800000807f27:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807f2b:	48 89 d1             	mov    rcx,rdx
ffff800000807f2e:	48 c1 e9 20          	shr    rcx,0x20
ffff800000807f32:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807f39:	ff ff ff 
ffff800000807f3c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f40:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000807f43:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807f46:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807f4a:	48 01 f2             	add    rdx,rsi
ffff800000807f4d:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].limit_lo16=limit&0xffff;
ffff800000807f50:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807f57:	ff ff ff 
ffff800000807f5a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f5e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807f61:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807f64:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807f68:	48 01 ca             	add    rdx,rcx
ffff800000807f6b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807f6f:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:21
    gdt[index].attr=attr|((limit>>8)&0xf0);
ffff800000807f72:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000807f76:	48 c1 ea 08          	shr    rdx,0x8
ffff800000807f7a:	89 d1                	mov    ecx,edx
ffff800000807f7c:	66 81 e1 f0 00       	and    cx,0xf0
ffff800000807f81:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807f88:	ff ff ff 
ffff800000807f8b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807f8f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807f92:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807f95:	48 c1 e0 04          	shl    rax,0x4
ffff800000807f99:	48 01 c2             	add    rdx,rax
ffff800000807f9c:	89 c8                	mov    eax,ecx
ffff800000807f9e:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
ffff800000807fa2:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:23

}
ffff800000807fa6:	90                   	nop
ffff800000807fa7:	5d                   	pop    rbp
ffff800000807fa8:	c3                   	ret    

ffff800000807fa9 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
ffff800000807fa9:	f3 0f 1e fa          	endbr64 
ffff800000807fad:	55                   	push   rbp
ffff800000807fae:	48 89 e5             	mov    rbp,rsp
ffff800000807fb1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807fb1 <fill_gate+0x8>
ffff800000807fb8:	49 bb 47 5b 11 00 00 	movabs r11,0x115b47
ffff800000807fbf:	00 00 00 
ffff800000807fc2:	4c 01 d8             	add    rax,r11
ffff800000807fc5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807fc8:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff800000807fcb:	89 d6                	mov    esi,edx
ffff800000807fcd:	89 ca                	mov    edx,ecx
ffff800000807fcf:	89 f1                	mov    ecx,esi
ffff800000807fd1:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffff800000807fd5:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    gate* ptr=gdt;
ffff800000807fd9:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807fe0:	ff ff ff 
ffff800000807fe3:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807fe7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807fea:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_low=offset&0xffff;
ffff800000807fee:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807ff1:	48 c1 e0 04          	shl    rax,0x4
ffff800000807ff5:	48 89 c2             	mov    rdx,rax
ffff800000807ff8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807ffc:	48 01 d0             	add    rax,rdx
ffff800000807fff:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808002:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].offset_high=(offset>>16)&0xffff;
ffff800000808005:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808008:	48 c1 e0 04          	shl    rax,0x4
ffff80000080800c:	48 89 c2             	mov    rdx,rax
ffff80000080800f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808013:	48 01 d0             	add    rax,rdx
ffff800000808016:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808019:	c1 ea 10             	shr    edx,0x10
ffff80000080801c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].selector=selector;
ffff80000080801f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808022:	48 c1 e0 04          	shl    rax,0x4
ffff800000808026:	48 89 c2             	mov    rdx,rax
ffff800000808029:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080802d:	48 01 c2             	add    rdx,rax
ffff800000808030:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffff800000808034:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
    ptr[index].attr=attr;
ffff800000808038:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080803b:	48 c1 e0 04          	shl    rax,0x4
ffff80000080803f:	48 89 c2             	mov    rdx,rax
ffff800000808042:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808046:	48 01 c2             	add    rdx,rax
ffff800000808049:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
ffff80000080804d:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:32
}
ffff800000808051:	90                   	nop
ffff800000808052:	5d                   	pop    rbp
ffff800000808053:	c3                   	ret    

ffff800000808054 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:35

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
ffff800000808054:	f3 0f 1e fa          	endbr64 
ffff800000808058:	55                   	push   rbp
ffff800000808059:	48 89 e5             	mov    rbp,rsp
ffff80000080805c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080805c <fill_ldt_desc+0x8>
ffff800000808063:	49 bb 9c 5a 11 00 00 	movabs r11,0x115a9c
ffff80000080806a:	00 00 00 
ffff80000080806d:	4c 01 d8             	add    rax,r11
ffff800000808070:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000808073:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000808076:	89 d0                	mov    eax,edx
ffff800000808078:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080807c:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:41
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
ffff800000808080:	90                   	nop
ffff800000808081:	5d                   	pop    rbp
ffff800000808082:	c3                   	ret    
ffff800000808083:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080808a:	00 00 00 
ffff80000080808d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff800000808090 <fill_desc>:
fill_desc():
ffff800000808090:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000808095:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
ffff80000080809a:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff80000080809f:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
ffff8000008080a4:	be 00 60 00 00       	mov    esi,0x6000
ffff8000008080a9:	c1 e2 03             	shl    edx,0x3
ffff8000008080ac:	01 d6                	add    esi,edx
ffff8000008080ae:	66 67 89 1e          	mov    WORD PTR [esi],bx
ffff8000008080b2:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
ffff8000008080b7:	c1 e8 10             	shr    eax,0x10
ffff8000008080ba:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
ffff8000008080be:	c1 eb 10             	shr    ebx,0x10
ffff8000008080c1:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
ffff8000008080c5:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
ffff8000008080c9:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
ffff8000008080cd:	c3                   	ret    

ffff8000008080ce <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
ffff8000008080ce:	f3 0f 1e fa          	endbr64 
ffff8000008080d2:	55                   	push   rbp
ffff8000008080d3:	48 89 e5             	mov    rbp,rsp
ffff8000008080d6:	41 57                	push   r15
ffff8000008080d8:	48 83 ec 08          	sub    rsp,0x8
ffff8000008080dc:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008080dc <clock_c+0xe>
ffff8000008080e3:	49 bb 1c 5a 11 00 00 	movabs r11,0x115a1c
ffff8000008080ea:	00 00 00 
ffff8000008080ed:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    if(!manage_proc_lock)
ffff8000008080f0:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff8000008080f7:	ff ff ff 
ffff8000008080fa:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff8000008080fe:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808100:	85 c0                	test   eax,eax
ffff800000808102:	75 17                	jne    ffff80000080811b <clock_c+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    {
        manage_proc();
ffff800000808104:	49 89 d7             	mov    r15,rdx
ffff800000808107:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080810c:	48 b9 e4 73 ee ff ff 	movabs rcx,0xffffffffffee73e4
ffff800000808113:	ff ff ff 
ffff800000808116:	48 01 d1             	add    rcx,rdx
ffff800000808119:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:16
    }
    //puts("1 disk req executed.");
ffff80000080811b:	90                   	nop
ffff80000080811c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000808120:	c9                   	leave  
ffff800000808121:	c3                   	ret    
ffff800000808122:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000808129:	00 00 00 
ffff80000080812c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff800000808130 <clock>:
clock():
ffff800000808130:	50                   	push   rax
ffff800000808131:	53                   	push   rbx
ffff800000808132:	51                   	push   rcx
ffff800000808133:	52                   	push   rdx
ffff800000808134:	57                   	push   rdi
ffff800000808135:	56                   	push   rsi
ffff800000808136:	41 50                	push   r8
ffff800000808138:	41 51                	push   r9
ffff80000080813a:	41 52                	push   r10
ffff80000080813c:	41 53                	push   r11
ffff80000080813e:	41 54                	push   r12
ffff800000808140:	41 55                	push   r13
ffff800000808142:	41 56                	push   r14
ffff800000808144:	41 57                	push   r15
ffff800000808146:	e8 45 cd ff ff       	call   ffff800000804e90 <save_rsp>
ffff80000080814b:	66 8c c0             	mov    ax,es
ffff80000080814e:	50                   	push   rax
ffff80000080814f:	66 8c d8             	mov    ax,ds
ffff800000808152:	50                   	push   rax
ffff800000808153:	66 b8 10 00          	mov    ax,0x10
ffff800000808157:	8e c0                	mov    es,eax
ffff800000808159:	8e d8                	mov    ds,eax

ffff80000080815b <clock.normal_part>:
clock.normal_part():
ffff80000080815b:	b0 20                	mov    al,0x20
ffff80000080815d:	e6 a0                	out    0xa0,al
ffff80000080815f:	e6 20                	out    0x20,al
ffff800000808161:	e8 68 ff ff ff       	call   ffff8000008080ce <clock_c>

ffff800000808166 <clock_ret>:
clock_ret():
ffff800000808166:	58                   	pop    rax
ffff800000808167:	8e d8                	mov    ds,eax
ffff800000808169:	58                   	pop    rax
ffff80000080816a:	8e c0                	mov    es,eax
ffff80000080816c:	41 5f                	pop    r15
ffff80000080816e:	41 5e                	pop    r14
ffff800000808170:	41 5d                	pop    r13
ffff800000808172:	41 5c                	pop    r12
ffff800000808174:	41 5b                	pop    r11
ffff800000808176:	41 5a                	pop    r10
ffff800000808178:	41 59                	pop    r9
ffff80000080817a:	41 58                	pop    r8
ffff80000080817c:	5e                   	pop    rsi
ffff80000080817d:	5f                   	pop    rdi
ffff80000080817e:	5a                   	pop    rdx
ffff80000080817f:	59                   	pop    rcx
ffff800000808180:	5b                   	pop    rbx
ffff800000808181:	58                   	pop    rax
ffff800000808182:	48 cf                	iretq  

ffff800000808184 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:118
    return ind;
}
*/

int execute(char *path, char **argv)
{
ffff800000808184:	f3 0f 1e fa          	endbr64 
ffff800000808188:	55                   	push   rbp
ffff800000808189:	48 89 e5             	mov    rbp,rsp
ffff80000080818c:	41 57                	push   r15
ffff80000080818e:	53                   	push   rbx
ffff80000080818f:	48 83 ec 20          	sub    rsp,0x20
ffff800000808193:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808193 <execute+0xf>
ffff80000080819a:	49 bb 65 59 11 00 00 	movabs r11,0x115965
ffff8000008081a1:	00 00 00 
ffff8000008081a4:	4c 01 db             	add    rbx,r11
ffff8000008081a7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008081ab:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:121
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
ffff8000008081af:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
ffff8000008081b6:	c7 45 e0 ff ff ff ff 	mov    DWORD PTR [rbp-0x20],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
ffff8000008081bd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008081c1:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008081c6:	48 89 c7             	mov    rdi,rax
ffff8000008081c9:	49 89 df             	mov    r15,rbx
ffff8000008081cc:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff8000008081d3:	ff ff ff 
ffff8000008081d6:	48 01 d8             	add    rax,rbx
ffff8000008081d9:	ff d0                	call   rax
ffff8000008081db:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff8000008081de:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff8000008081e2:	79 0a                	jns    ffff8000008081ee <execute+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122 (discriminator 1)
ffff8000008081e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008081e9:	e9 81 00 00 00       	jmp    ffff80000080826f <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124
    //
    char *p=path;
ffff8000008081ee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008081f2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125
    for(;*p!='\0';p++);
ffff8000008081f6:	eb 05                	jmp    ffff8000008081fd <execute+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 2)
ffff8000008081f8:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 1)
ffff8000008081fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808201:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000808204:	84 c0                	test   al,al
ffff800000808206:	75 f0                	jne    ffff8000008081f8 <execute+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126
    for(;*p!='/'&&p>path;p--);
ffff800000808208:	eb 05                	jmp    ffff80000080820f <execute+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 3)
ffff80000080820a:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 1)
ffff80000080820f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808213:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000808216:	3c 2f                	cmp    al,0x2f
ffff800000808218:	74 0a                	je     ffff800000808224 <execute+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 2)
ffff80000080821a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080821e:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff800000808222:	77 e6                	ja     ffff80000080820a <execute+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    if(p>path)
ffff800000808224:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808228:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff80000080822c:	76 3c                	jbe    ffff80000080826a <execute+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
    {
        *p='\0';
ffff80000080822e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808232:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
ffff800000808235:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808239:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080823e:	48 89 c7             	mov    rdi,rax
ffff800000808241:	49 89 df             	mov    r15,rbx
ffff800000808244:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff80000080824b:	ff ff ff 
ffff80000080824e:	48 01 d8             	add    rax,rbx
ffff800000808251:	ff d0                	call   rax
ffff800000808253:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffff800000808256:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff80000080825a:	79 07                	jns    ffff800000808263 <execute+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130 (discriminator 1)
ffff80000080825c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808261:	eb 0c                	jmp    ffff80000080826f <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131
        *p='/';
ffff800000808263:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808267:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:136
    }
    // extern struct file opened[];
    extern struct process task[];
    // int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
    return 0;
ffff80000080826a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:137
}
ffff80000080826f:	48 83 c4 20          	add    rsp,0x20
ffff800000808273:	5b                   	pop    rbx
ffff800000808274:	41 5f                	pop    r15
ffff800000808276:	5d                   	pop    rbp
ffff800000808277:	c3                   	ret    

ffff800000808278 <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139

int sys_execve(char *path, int argc, char **argv) {
ffff800000808278:	f3 0f 1e fa          	endbr64 
ffff80000080827c:	55                   	push   rbp
ffff80000080827d:	48 89 e5             	mov    rbp,rsp
ffff800000808280:	41 57                	push   r15
ffff800000808282:	53                   	push   rbx
ffff800000808283:	48 83 ec 60          	sub    rsp,0x60
ffff800000808287:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808287 <sys_execve+0xf>
ffff80000080828e:	49 bb 71 58 11 00 00 	movabs r11,0x115871
ffff800000808295:	00 00 00 
ffff800000808298:	4c 01 db             	add    rbx,r11
ffff80000080829b:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff80000080829f:	89 75 a4             	mov    DWORD PTR [rbp-0x5c],esi
ffff8000008082a2:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:140
    int fno=-1,cwd_fno=-1;
ffff8000008082a6:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [rbp-0x30],0xffffffff
ffff8000008082ad:	c7 45 cc ff ff ff ff 	mov    DWORD PTR [rbp-0x34],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
ffff8000008082b4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008082b8:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008082bd:	48 89 c7             	mov    rdi,rax
ffff8000008082c0:	49 89 df             	mov    r15,rbx
ffff8000008082c3:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff8000008082ca:	ff ff ff 
ffff8000008082cd:	48 01 d8             	add    rax,rbx
ffff8000008082d0:	ff d0                	call   rax
ffff8000008082d2:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
ffff8000008082d5:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
ffff8000008082d9:	79 0a                	jns    ffff8000008082e5 <sys_execve+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141 (discriminator 1)
ffff8000008082db:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
ffff8000008082e0:	e9 99 02 00 00       	jmp    ffff80000080857e <sys_execve+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:145

    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
ffff8000008082e5:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008082ec:	ff ff ff 
ffff8000008082ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008082f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008082f6:	48 89 c7             	mov    rdi,rax
ffff8000008082f9:	49 89 df             	mov    r15,rbx
ffff8000008082fc:	48 b8 6d 94 ee ff ff 	movabs rax,0xffffffffffee946d
ffff800000808303:	ff ff ff 
ffff800000808306:	48 01 d8             	add    rax,rbx
ffff800000808309:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:149
    // current->regs.rsp=STACK_TOP;//清空栈
    extern TSS* tss;

    current->exef=current->openf[fno];//改变执行文件
ffff80000080830b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808312:	ff ff ff 
ffff800000808315:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808319:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080831c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808323:	ff ff ff 
ffff800000808326:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080832a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080832d:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
ffff800000808330:	48 63 c9             	movsxd rcx,ecx
ffff800000808333:	48 83 c1 1e          	add    rcx,0x1e
ffff800000808337:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080833c:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:150
    off_t entry= load_elf(current->exef);
ffff800000808343:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080834a:	ff ff ff 
ffff80000080834d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808351:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808354:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff80000080835b:	48 89 c7             	mov    rdi,rax
ffff80000080835e:	49 89 df             	mov    r15,rbx
ffff800000808361:	48 b8 de b5 ee ff ff 	movabs rax,0xffffffffffeeb5de
ffff800000808368:	ff ff ff 
ffff80000080836b:	48 01 d8             	add    rax,rbx
ffff80000080836e:	ff d0                	call   rax
ffff800000808370:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:151
    if(entry==-1)
ffff800000808373:	83 7d c8 ff          	cmp    DWORD PTR [rbp-0x38],0xffffffff
ffff800000808377:	75 4d                	jne    ffff8000008083c6 <sys_execve+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:153
    {
        comprintf("failed execve, errcode:%d\n",current->regs.errcode);
ffff800000808379:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808380:	ff ff ff 
ffff800000808383:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808387:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080838a:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
ffff800000808391:	48 89 c6             	mov    rsi,rax
ffff800000808394:	48 b8 c8 d6 ff ff ff 	movabs rax,0xffffffffffffd6c8
ffff80000080839b:	ff ff ff 
ffff80000080839e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008083a2:	48 89 c7             	mov    rdi,rax
ffff8000008083a5:	49 89 df             	mov    r15,rbx
ffff8000008083a8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008083ad:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff8000008083b4:	ff ff ff 
ffff8000008083b7:	48 01 da             	add    rdx,rbx
ffff8000008083ba:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:154
        return -1;
ffff8000008083bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008083c1:	e9 b8 01 00 00       	jmp    ffff80000080857e <sys_execve+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:156
    }
    if(sys_close(fno)<0)return -1;
ffff8000008083c6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008083c9:	89 c7                	mov    edi,eax
ffff8000008083cb:	49 89 df             	mov    r15,rbx
ffff8000008083ce:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff8000008083d5:	ff ff ff 
ffff8000008083d8:	48 01 d8             	add    rax,rbx
ffff8000008083db:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:159

    //sysret直接返回到新程序的main
    void *retp= (void *) entry;
ffff8000008083dd:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008083e0:	48 98                	cdqe   
ffff8000008083e2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:160
    stack_store_regs *rs= (stack_store_regs *) (tss->ists[0] - sizeof(stack_store_regs));
ffff8000008083e6:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff8000008083ed:	ff ff ff 
ffff8000008083f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008083f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008083f7:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff8000008083fb:	48 2d a8 00 00 00    	sub    rax,0xa8
ffff800000808401:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:161
    rs->r10= (unsigned long) retp;//返回地址已经xchg到r10
ffff800000808405:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000808409:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080840d:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163
    //第二个参数argv需要把内容从内核空间拷贝到用户堆里面
    size_t arglen=0;
ffff800000808411:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000808418:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164
    for(int i=0;i<argc;i++){
ffff800000808419:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000808420:	eb 39                	jmp    ffff80000080845b <sys_execve+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165 (discriminator 3)
        arglen+= strlen(argv[i])+1;
ffff800000808422:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808425:	48 98                	cdqe   
ffff800000808427:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080842e:	00 
ffff80000080842f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808433:	48 01 d0             	add    rax,rdx
ffff800000808436:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808439:	48 89 c7             	mov    rdi,rax
ffff80000080843c:	49 89 df             	mov    r15,rbx
ffff80000080843f:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff800000808446:	ff ff ff 
ffff800000808449:	48 01 d8             	add    rax,rbx
ffff80000080844c:	ff d0                	call   rax
ffff80000080844e:	83 c0 01             	add    eax,0x1
ffff800000808451:	48 98                	cdqe   
ffff800000808453:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff800000808457:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 1)
ffff80000080845b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080845e:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
ffff800000808461:	7c bf                	jl     ffff800000808422 <sys_execve+0x1aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:167
    }
    char* p= sys_malloc(arglen),pp=p;
ffff800000808463:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808467:	48 89 c7             	mov    rdi,rax
ffff80000080846a:	49 89 df             	mov    r15,rbx
ffff80000080846d:	48 b8 be 83 ee ff ff 	movabs rax,0xffffffffffee83be
ffff800000808474:	ff ff ff 
ffff800000808477:	48 01 d8             	add    rax,rbx
ffff80000080847a:	ff d0                	call   rax
ffff80000080847c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff800000808480:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808484:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168
    for(int i=0;i<argc;i++){
ffff800000808487:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff80000080848e:	eb 6c                	jmp    ffff8000008084fc <sys_execve+0x284>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169 (discriminator 3)
        strcpy(p,argv[i]);
ffff800000808490:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808493:	48 98                	cdqe   
ffff800000808495:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080849c:	00 
ffff80000080849d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008084a1:	48 01 d0             	add    rax,rdx
ffff8000008084a4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008084a7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008084ab:	48 89 d6             	mov    rsi,rdx
ffff8000008084ae:	48 89 c7             	mov    rdi,rax
ffff8000008084b1:	49 89 df             	mov    r15,rbx
ffff8000008084b4:	48 b8 70 51 ef ff ff 	movabs rax,0xffffffffffef5170
ffff8000008084bb:	ff ff ff 
ffff8000008084be:	48 01 d8             	add    rax,rbx
ffff8000008084c1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:170 (discriminator 3)
        p+=strlen(argv[i])+1;
ffff8000008084c3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008084c6:	48 98                	cdqe   
ffff8000008084c8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008084cf:	00 
ffff8000008084d0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008084d4:	48 01 d0             	add    rax,rdx
ffff8000008084d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008084da:	48 89 c7             	mov    rdi,rax
ffff8000008084dd:	49 89 df             	mov    r15,rbx
ffff8000008084e0:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff8000008084e7:	ff ff ff 
ffff8000008084ea:	48 01 d8             	add    rax,rbx
ffff8000008084ed:	ff d0                	call   rax
ffff8000008084ef:	83 c0 01             	add    eax,0x1
ffff8000008084f2:	48 98                	cdqe   
ffff8000008084f4:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff8000008084f8:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 1)
ffff8000008084fc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008084ff:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
ffff800000808502:	7c 8c                	jl     ffff800000808490 <sys_execve+0x218>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174
    }
    
    //第一个参数argc
    if(current->dl){
ffff800000808504:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080850b:	ff ff ff 
ffff80000080850e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808512:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808515:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff80000080851b:	85 c0                	test   eax,eax
ffff80000080851d:	74 3f                	je     ffff80000080855e <sys_execve+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175
        rs->rsi=current->dl;
ffff80000080851f:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808526:	ff ff ff 
ffff800000808529:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080852d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808530:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff800000808536:	48 63 d0             	movsxd rdx,eax
ffff800000808539:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080853d:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:176
        rs->rdi=argc;
ffff800000808541:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000808544:	48 63 d0             	movsxd rdx,eax
ffff800000808547:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080854b:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177
        rs->rdx=pp;
ffff80000080854f:	48 0f be 55 b7       	movsx  rdx,BYTE PTR [rbp-0x49]
ffff800000808554:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808558:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
ffff80000080855c:	eb 1b                	jmp    ffff800000808579 <sys_execve+0x301>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:179
    }else{
        rs->rsi=argc;
ffff80000080855e:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000808561:	48 63 d0             	movsxd rdx,eax
ffff800000808564:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808568:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:180
        rs->rdi=pp;
ffff80000080856c:	48 0f be 55 b7       	movsx  rdx,BYTE PTR [rbp-0x49]
ffff800000808571:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808575:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:186
    }
    
    //以下部分是临时测试代码
//    int (*pmain)(int argc,char **argv)=(int (*)(int, char **)) entry;
//    pmain(argc, (char **) rs->rdi);
    return 0;
ffff800000808579:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:187
}
ffff80000080857e:	48 83 c4 60          	add    rsp,0x60
ffff800000808582:	5b                   	pop    rbx
ffff800000808583:	41 5f                	pop    r15
ffff800000808585:	5d                   	pop    rbp
ffff800000808586:	c3                   	ret    

ffff800000808587 <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:189
int exec_call(char *path)
{
ffff800000808587:	f3 0f 1e fa          	endbr64 
ffff80000080858b:	55                   	push   rbp
ffff80000080858c:	48 89 e5             	mov    rbp,rsp
ffff80000080858f:	41 57                	push   r15
ffff800000808591:	53                   	push   rbx
ffff800000808592:	48 83 ec 20          	sub    rsp,0x20
ffff800000808596:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808596 <exec_call+0xf>
ffff80000080859d:	49 bb 62 55 11 00 00 	movabs r11,0x115562
ffff8000008085a4:	00 00 00 
ffff8000008085a7:	4c 01 db             	add    rbx,r11
ffff8000008085aa:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190
    int pi= execute(path, NULL);
ffff8000008085ae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008085b2:	be 00 00 00 00       	mov    esi,0x0
ffff8000008085b7:	48 89 c7             	mov    rdi,rax
ffff8000008085ba:	49 89 df             	mov    r15,rbx
ffff8000008085bd:	48 b8 8c a6 ee ff ff 	movabs rax,0xffffffffffeea68c
ffff8000008085c4:	ff ff ff 
ffff8000008085c7:	48 01 d8             	add    rax,rbx
ffff8000008085ca:	ff d0                	call   rax
ffff8000008085cc:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:191
    int tss= _TSS_IND(pi)*8;
ffff8000008085cf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008085d2:	01 c0                	add    eax,eax
ffff8000008085d4:	83 c0 05             	add    eax,0x5
ffff8000008085d7:	c1 e0 03             	shl    eax,0x3
ffff8000008085da:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:194
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
ffff8000008085dd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008085e0:	89 c7                	mov    edi,eax
ffff8000008085e2:	49 89 df             	mov    r15,rbx
ffff8000008085e5:	48 b8 a0 76 ee ff ff 	movabs rax,0xffffffffffee76a0
ffff8000008085ec:	ff ff ff 
ffff8000008085ef:	48 01 d8             	add    rax,rbx
ffff8000008085f2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195
    while(task[pi].stat != TASK_ZOMBIE);
ffff8000008085f4:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195 (discriminator 1)
ffff8000008085f5:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008085fc:	ff ff ff 
ffff8000008085ff:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000808603:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808606:	48 98                	cdqe   
ffff800000808608:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080860f:	48 01 d0             	add    rax,rdx
ffff800000808612:	48 83 c0 10          	add    rax,0x10
ffff800000808616:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000808619:	83 f8 04             	cmp    eax,0x4
ffff80000080861c:	75 d7                	jne    ffff8000008085f5 <exec_call+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196
    return task[pi].exit_code;
ffff80000080861e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000808625:	ff ff ff 
ffff800000808628:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080862c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080862f:	48 98                	cdqe   
ffff800000808631:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808638:	48 01 d0             	add    rax,rdx
ffff80000080863b:	48 83 c0 20          	add    rax,0x20
ffff80000080863f:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:197
}
ffff800000808642:	48 83 c4 20          	add    rsp,0x20
ffff800000808646:	5b                   	pop    rbx
ffff800000808647:	41 5f                	pop    r15
ffff800000808649:	5d                   	pop    rbp
ffff80000080864a:	c3                   	ret    

ffff80000080864b <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:199
int proc_start()
{
ffff80000080864b:	f3 0f 1e fa          	endbr64 
ffff80000080864f:	55                   	push   rbp
ffff800000808650:	48 89 e5             	mov    rbp,rsp
ffff800000808653:	41 57                	push   r15
ffff800000808655:	53                   	push   rbx
ffff800000808656:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808656 <proc_start+0xb>
ffff80000080865d:	49 bb a2 54 11 00 00 	movabs r11,0x1154a2
ffff800000808664:	00 00 00 
ffff800000808667:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:202
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
ffff80000080866a:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808671:	ff ff ff 
ffff800000808674:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808678:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080867a:	48 98                	cdqe   
ffff80000080867c:	48 69 d0 58 03 00 00 	imul   rdx,rax,0x358
ffff800000808683:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080868a:	ff ff ff 
ffff80000080868d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808691:	48 01 d0             	add    rax,rdx
ffff800000808694:	48 89 c7             	mov    rdi,rax
ffff800000808697:	49 89 df             	mov    r15,rbx
ffff80000080869a:	48 b8 ce ab ee ff ff 	movabs rax,0xffffffffffeeabce
ffff8000008086a1:	ff ff ff 
ffff8000008086a4:	48 01 d8             	add    rax,rbx
ffff8000008086a7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:204
    //释放进程资源
    sys_exit(0);
ffff8000008086a9:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008086ae:	49 89 df             	mov    r15,rbx
ffff8000008086b1:	48 b8 60 80 ee ff ff 	movabs rax,0xffffffffffee8060
ffff8000008086b8:	ff ff ff 
ffff8000008086bb:	48 01 d8             	add    rax,rbx
ffff8000008086be:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:205
}
ffff8000008086c0:	90                   	nop
ffff8000008086c1:	5b                   	pop    rbx
ffff8000008086c2:	41 5f                	pop    r15
ffff8000008086c4:	5d                   	pop    rbp
ffff8000008086c5:	c3                   	ret    

ffff8000008086c6 <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:208
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
ffff8000008086c6:	f3 0f 1e fa          	endbr64 
ffff8000008086ca:	55                   	push   rbp
ffff8000008086cb:	48 89 e5             	mov    rbp,rsp
ffff8000008086ce:	41 57                	push   r15
ffff8000008086d0:	53                   	push   rbx
ffff8000008086d1:	48 81 ec 10 03 00 00 	sub    rsp,0x310
ffff8000008086d8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008086d8 <load_pe+0x12>
ffff8000008086df:	49 bb 20 54 11 00 00 	movabs r11,0x115420
ffff8000008086e6:	00 00 00 
ffff8000008086e9:	4c 01 db             	add    rbx,r11
ffff8000008086ec:	48 89 bd e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:210
    // 读取文件头
    struct file *f=proc->exef;
ffff8000008086f3:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff8000008086fa:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff800000808701:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:211
    int exefno=-1;
ffff800000808705:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080870c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000808713:	eb 32                	jmp    ffff800000808747 <load_pe+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:213
        if(current->openf[i]==f)
ffff800000808715:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080871c:	ff ff ff 
ffff80000080871f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808723:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808726:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808729:	48 63 d2             	movsxd rdx,edx
ffff80000080872c:	48 83 c2 1e          	add    rdx,0x1e
ffff800000808730:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000808735:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff800000808739:	75 08                	jne    ffff800000808743 <load_pe+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:215
        {
            exefno=i;
ffff80000080873b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080873e:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:216
            break;
ffff800000808741:	eb 0a                	jmp    ffff80000080874d <load_pe+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff800000808743:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212 (discriminator 1)
ffff800000808747:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff80000080874b:	7e c8                	jle    ffff800000808715 <load_pe+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218
        }
    if(exefno==-1)return ERR;
ffff80000080874d:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000808751:	75 0a                	jne    ffff80000080875d <load_pe+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218 (discriminator 1)
ffff800000808753:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808758:	e9 64 08 00 00       	jmp    ffff800000808fc1 <load_pe+0x8fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:222

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
ffff80000080875d:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
ffff800000808764:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808767:	ba 44 00 00 00       	mov    edx,0x44
ffff80000080876c:	48 89 ce             	mov    rsi,rcx
ffff80000080876f:	89 c7                	mov    edi,eax
ffff800000808771:	49 89 df             	mov    r15,rbx
ffff800000808774:	48 b8 5a e4 ee ff ff 	movabs rax,0xffffffffffeee45a
ffff80000080877b:	ff ff ff 
ffff80000080877e:	48 01 d8             	add    rax,rbx
ffff800000808781:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:223
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
ffff800000808783:	48 8b 85 6c fe ff ff 	mov    rax,QWORD PTR [rbp-0x194]
ffff80000080878a:	48 89 c1             	mov    rcx,rax
ffff80000080878d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808790:	ba 00 00 00 00       	mov    edx,0x0
ffff800000808795:	48 89 ce             	mov    rsi,rcx
ffff800000808798:	89 c7                	mov    edi,eax
ffff80000080879a:	49 89 df             	mov    r15,rbx
ffff80000080879d:	48 b8 f6 e5 ee ff ff 	movabs rax,0xffffffffffeee5f6
ffff8000008087a4:	ff ff ff 
ffff8000008087a7:	48 01 d8             	add    rax,rbx
ffff8000008087aa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:224
    sys_read(exefno, &tnth, sizeof(tnth));
ffff8000008087ac:	48 8d 8d 20 fd ff ff 	lea    rcx,[rbp-0x2e0]
ffff8000008087b3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008087b6:	ba 0c 01 00 00       	mov    edx,0x10c
ffff8000008087bb:	48 89 ce             	mov    rsi,rcx
ffff8000008087be:	89 c7                	mov    edi,eax
ffff8000008087c0:	49 89 df             	mov    r15,rbx
ffff8000008087c3:	48 b8 5a e4 ee ff ff 	movabs rax,0xffffffffffeee45a
ffff8000008087ca:	ff ff ff 
ffff8000008087cd:	48 01 d8             	add    rax,rbx
ffff8000008087d0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:227

    //是否需要移动base(先不检查)
    off_t nbase=tnth.OptionalHeader.ImageBase;
ffff8000008087d2:	48 8b 85 54 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2ac]
ffff8000008087d9:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:228
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
ffff8000008087dc:	8b 85 74 fd ff ff    	mov    eax,DWORD PTR [rbp-0x28c]
ffff8000008087e2:	c1 e8 0c             	shr    eax,0xc
ffff8000008087e5:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:253
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
ffff8000008087e8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008087eb:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008087f0:	be 00 00 00 00       	mov    esi,0x0
ffff8000008087f5:	89 c7                	mov    edi,eax
ffff8000008087f7:	49 89 df             	mov    r15,rbx
ffff8000008087fa:	48 b8 f6 e5 ee ff ff 	movabs rax,0xffffffffffeee5f6
ffff800000808801:	ff ff ff 
ffff800000808804:	48 01 d8             	add    rax,rbx
ffff800000808807:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:254
    sys_read(exefno, nbase, PAGE_SIZE);
ffff800000808809:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff80000080880c:	48 98                	cdqe   
ffff80000080880e:	48 89 c1             	mov    rcx,rax
ffff800000808811:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808814:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808819:	48 89 ce             	mov    rsi,rcx
ffff80000080881c:	89 c7                	mov    edi,eax
ffff80000080881e:	49 89 df             	mov    r15,rbx
ffff800000808821:	48 b8 5a e4 ee ff ff 	movabs rax,0xffffffffffeee45a
ffff800000808828:	ff ff ff 
ffff80000080882b:	48 01 d8             	add    rax,rbx
ffff80000080882e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:256
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
ffff800000808830:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808833:	48 98                	cdqe   
ffff800000808835:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:257
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
ffff80000080883c:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff80000080883f:	48 63 d0             	movsxd rdx,eax
ffff800000808842:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808849:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080884d:	48 01 d0             	add    rax,rdx
ffff800000808850:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
ffff800000808857:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080885e:	48 83 c0 04          	add    rax,0x4
ffff800000808862:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
ffff800000808869:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808870:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
ffff800000808873:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262
    int page_count=prog_size/4096;
ffff800000808879:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080887f:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000808885:	85 c0                	test   eax,eax
ffff800000808887:	0f 48 c2             	cmovs  eax,edx
ffff80000080888a:	c1 f8 0c             	sar    eax,0xc
ffff80000080888d:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:264

    off_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
ffff800000808893:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080889a:	8b 50 28             	mov    edx,DWORD PTR [rax+0x28]
ffff80000080889d:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff8000008088a0:	01 d0                	add    eax,edx
ffff8000008088a2:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:265
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
ffff8000008088a8:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
ffff8000008088ae:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
ffff8000008088b4:	85 c0                	test   eax,eax
ffff8000008088b6:	0f 48 c2             	cmovs  eax,edx
ffff8000008088b9:	c1 f8 0a             	sar    eax,0xa
ffff8000008088bc:	89 c1                	mov    ecx,eax
ffff8000008088be:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
ffff8000008088c4:	99                   	cdq    
ffff8000008088c5:	c1 ea 16             	shr    edx,0x16
ffff8000008088c8:	01 d0                	add    eax,edx
ffff8000008088ca:	25 ff 03 00 00       	and    eax,0x3ff
ffff8000008088cf:	29 d0                	sub    eax,edx
ffff8000008088d1:	01 c8                	add    eax,ecx
ffff8000008088d3:	85 c0                	test   eax,eax
ffff8000008088d5:	0f 95 c0             	setne  al
ffff8000008088d8:	0f b6 c0             	movzx  eax,al
ffff8000008088db:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:266
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
ffff8000008088e1:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff8000008088e7:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff8000008088ed:	85 c0                	test   eax,eax
ffff8000008088ef:	0f 48 c2             	cmovs  eax,edx
ffff8000008088f2:	c1 f8 15             	sar    eax,0x15
ffff8000008088f5:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:269

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
ffff8000008088fb:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808902:	89 c0                	mov    eax,eax
ffff800000808904:	48 05 0c 01 00 00    	add    rax,0x10c
ffff80000080890a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:271
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
ffff80000080890e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808915:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff800000808919:	0f b7 d0             	movzx  edx,ax
ffff80000080891c:	89 d0                	mov    eax,edx
ffff80000080891e:	c1 e0 02             	shl    eax,0x2
ffff800000808921:	01 d0                	add    eax,edx
ffff800000808923:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:270
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
ffff800000808926:	05 50 01 00 00       	add    eax,0x150
ffff80000080892b:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:272
    int align=nth->OptionalHeader.FileAlignment;
ffff800000808931:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808938:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
ffff80000080893b:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273
    data_start=data_start%align?data_start-data_start%align+align:data_start;
ffff800000808941:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff800000808947:	99                   	cdq    
ffff800000808948:	f7 bd 4c ff ff ff    	idiv   DWORD PTR [rbp-0xb4]
ffff80000080894e:	89 d0                	mov    eax,edx
ffff800000808950:	85 c0                	test   eax,eax
ffff800000808952:	74 23                	je     ffff800000808977 <load_pe+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 1)
ffff800000808954:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff80000080895a:	99                   	cdq    
ffff80000080895b:	f7 bd 4c ff ff ff    	idiv   DWORD PTR [rbp-0xb4]
ffff800000808961:	89 d1                	mov    ecx,edx
ffff800000808963:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff800000808969:	29 c8                	sub    eax,ecx
ffff80000080896b:	89 c2                	mov    edx,eax
ffff80000080896d:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
ffff800000808973:	01 d0                	add    eax,edx
ffff800000808975:	eb 06                	jmp    ffff80000080897d <load_pe+0x2b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 2)
ffff800000808977:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 4)
ffff80000080897d:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff800000808983:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080898a:	e9 83 00 00 00       	jmp    ffff800000808a12 <load_pe+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:276
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
ffff80000080898f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808993:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000808996:	25 00 00 00 02       	and    eax,0x2000000
ffff80000080899b:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:277
        if(disca)
ffff8000008089a1:	83 bd b8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x148],0x0
ffff8000008089a8:	75 5e                	jne    ffff800000808a08 <load_pe+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
ffff8000008089aa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008089ae:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff8000008089b1:	89 c1                	mov    ecx,eax
ffff8000008089b3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008089b6:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008089bb:	48 89 ce             	mov    rsi,rcx
ffff8000008089be:	89 c7                	mov    edi,eax
ffff8000008089c0:	49 89 df             	mov    r15,rbx
ffff8000008089c3:	48 b8 f6 e5 ee ff ff 	movabs rax,0xffffffffffeee5f6
ffff8000008089ca:	ff ff ff 
ffff8000008089cd:	48 01 d8             	add    rax,rbx
ffff8000008089d0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:281
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
ffff8000008089d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008089d6:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff8000008089d9:	89 c2                	mov    edx,eax
ffff8000008089db:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008089df:	8b 48 0c             	mov    ecx,DWORD PTR [rax+0xc]
ffff8000008089e2:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff8000008089e5:	01 c8                	add    eax,ecx
ffff8000008089e7:	89 c0                	mov    eax,eax
ffff8000008089e9:	48 89 c1             	mov    rcx,rax
ffff8000008089ec:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008089ef:	48 89 ce             	mov    rsi,rcx
ffff8000008089f2:	89 c7                	mov    edi,eax
ffff8000008089f4:	49 89 df             	mov    r15,rbx
ffff8000008089f7:	48 b8 5a e4 ee ff ff 	movabs rax,0xffffffffffeee45a
ffff8000008089fe:	ff ff ff 
ffff800000808a01:	48 01 d8             	add    rax,rbx
ffff800000808a04:	ff d0                	call   rax
ffff800000808a06:	eb 01                	jmp    ffff800000808a09 <load_pe+0x343>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:278
            continue;
ffff800000808a08:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff800000808a09:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
ffff800000808a0d:	48 83 45 e0 28       	add    QWORD PTR [rbp-0x20],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 1)
ffff800000808a12:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808a19:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff800000808a1d:	0f b7 c0             	movzx  eax,ax
ffff800000808a20:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000808a23:	0f 8c 66 ff ff ff    	jl     ffff80000080898f <load_pe+0x2c9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:286

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
ffff800000808a29:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808a30:	48 05 90 00 00 00    	add    rax,0x90
ffff800000808a36:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:287
    if(impd->Size>0)
ffff800000808a3d:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000808a44:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808a47:	85 c0                	test   eax,eax
ffff800000808a49:	0f 84 b5 02 00 00    	je     ffff800000808d04 <load_pe+0x63e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:289
    {
        int tmpi=impd->VirtualAddress+nbase;
ffff800000808a4f:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000808a56:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808a58:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808a5b:	01 d0                	add    eax,edx
ffff800000808a5d:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:290
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
ffff800000808a63:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
ffff800000808a69:	48 98                	cdqe   
ffff800000808a6b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
        int dllp;
        while (impdes->Characteristics)
ffff800000808a6f:	e9 82 02 00 00       	jmp    ffff800000808cf6 <load_pe+0x630>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:295
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
ffff800000808a74:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808a78:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000808a7b:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808a7e:	01 d0                	add    eax,edx
ffff800000808a80:	89 c0                	mov    eax,eax
ffff800000808a82:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:298
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
ffff800000808a89:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000808a90:	48 ba e3 d6 ff ff ff 	movabs rdx,0xffffffffffffd6e3
ffff800000808a97:	ff ff ff 
ffff800000808a9a:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000808a9e:	48 89 d6             	mov    rsi,rdx
ffff800000808aa1:	48 89 c7             	mov    rdi,rax
ffff800000808aa4:	49 89 df             	mov    r15,rbx
ffff800000808aa7:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff800000808aae:	ff ff ff 
ffff800000808ab1:	48 01 d8             	add    rax,rbx
ffff800000808ab4:	ff d0                	call   rax
ffff800000808ab6:	85 c0                	test   eax,eax
ffff800000808ab8:	75 09                	jne    ffff800000808ac3 <load_pe+0x3fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:300
            {
                dllp=0x1c00000;
ffff800000808aba:	c7 45 cc 00 00 c0 01 	mov    DWORD PTR [rbp-0x34],0x1c00000
ffff800000808ac1:	eb 3d                	jmp    ffff800000808b00 <load_pe+0x43a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:303
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
ffff800000808ac3:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff800000808aca:	48 89 c7             	mov    rdi,rax
ffff800000808acd:	48 b8 ce ab ee ff ff 	movabs rax,0xffffffffffeeabce
ffff800000808ad4:	ff ff ff 
ffff800000808ad7:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000808adb:	ff d0                	call   rax
ffff800000808add:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:306
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
ffff800000808ae3:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
ffff800000808ae9:	89 c7                	mov    edi,eax
ffff800000808aeb:	49 89 df             	mov    r15,rbx
ffff800000808aee:	48 b8 d5 b4 ee ff ff 	movabs rax,0xffffffffffeeb4d5
ffff800000808af5:	ff ff ff 
ffff800000808af8:	48 01 d8             	add    rax,rbx
ffff800000808afb:	ff d0                	call   rax
ffff800000808afd:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:309
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
ffff800000808b00:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b03:	48 98                	cdqe   
ffff800000808b05:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:310
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
ffff800000808b0c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b0f:	48 63 d0             	movsxd rdx,eax
ffff800000808b12:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffff800000808b19:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000808b1d:	48 01 d0             	add    rax,rdx
ffff800000808b20:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:311
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
ffff800000808b27:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000808b2e:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
ffff800000808b34:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b37:	01 d0                	add    eax,edx
ffff800000808b39:	89 c0                	mov    eax,eax
ffff800000808b3b:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:312
            int funcn=dllexp->NumberOfNames;
ffff800000808b42:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808b49:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000808b4c:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
            char **fnames=dllexp->AddressOfNames+dllp;
ffff800000808b52:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808b59:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
ffff800000808b5c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b5f:	01 d0                	add    eax,edx
ffff800000808b61:	89 c0                	mov    eax,eax
ffff800000808b63:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:314
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
ffff800000808b6a:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808b71:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff800000808b74:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b77:	01 d0                	add    eax,edx
ffff800000808b79:	89 c0                	mov    eax,eax
ffff800000808b7b:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:315
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
ffff800000808b82:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808b89:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff800000808b8c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b8f:	01 d0                	add    eax,edx
ffff800000808b91:	89 c0                	mov    eax,eax
ffff800000808b93:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:317
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
ffff800000808b9a:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808ba1:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808ba4:	89 85 ec fe ff ff    	mov    DWORD PTR [rbp-0x114],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:319
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
ffff800000808baa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808bae:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff800000808bb1:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808bb4:	01 d0                	add    eax,edx
ffff800000808bb6:	89 c0                	mov    eax,eax
ffff800000808bb8:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:320
            char **siataddrs=impdes->FirstThunk+nbase;
ffff800000808bbc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808bc0:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff800000808bc3:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808bc6:	01 d0                	add    eax,edx
ffff800000808bc8:	89 c0                	mov    eax,eax
ffff800000808bca:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            while (*iataddrs)
ffff800000808bce:	e9 10 01 00 00       	jmp    ffff800000808ce3 <load_pe+0x61d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:324
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
ffff800000808bd3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808bd7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808bd9:	85 c0                	test   eax,eax
ffff800000808bdb:	79 43                	jns    ffff800000808c20 <load_pe+0x55a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:327
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
ffff800000808bdd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808be1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808be3:	25 ff ff ff 7f       	and    eax,0x7fffffff
ffff800000808be8:	2b 85 ec fe ff ff    	sub    eax,DWORD PTR [rbp-0x114]
ffff800000808bee:	89 85 d8 fe ff ff    	mov    DWORD PTR [rbp-0x128],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:328
                    *iataddrs=funcaddrs[ord]+dllp;
ffff800000808bf4:	8b 85 d8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x128]
ffff800000808bfa:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808c01:	00 
ffff800000808c02:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000808c09:	48 01 d0             	add    rax,rdx
ffff800000808c0c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808c0e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808c11:	01 d0                	add    eax,edx
ffff800000808c13:	89 c2                	mov    edx,eax
ffff800000808c15:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808c19:	89 10                	mov    DWORD PTR [rax],edx
ffff800000808c1b:	e9 b9 00 00 00       	jmp    ffff800000808cd9 <load_pe+0x613>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
ffff800000808c20:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808c24:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808c26:	89 c0                	mov    eax,eax
ffff800000808c28:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:333
                    import_by_name_p+=2;//跳过开头两字节序号
ffff800000808c2f:	48 83 85 e0 fe ff ff 	add    QWORD PTR [rbp-0x120],0x2
ffff800000808c36:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:334
                    int i=0;
ffff800000808c37:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
                    for(;i<funcn;i++)
ffff800000808c3e:	e9 87 00 00 00       	jmp    ffff800000808cca <load_pe+0x604>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:337
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
ffff800000808c43:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808c46:	48 98                	cdqe   
ffff800000808c48:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808c4f:	00 
ffff800000808c50:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000808c57:	48 01 d0             	add    rax,rdx
ffff800000808c5a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808c5d:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffff800000808c64:	48 89 d6             	mov    rsi,rdx
ffff800000808c67:	48 89 c7             	mov    rdi,rax
ffff800000808c6a:	49 89 df             	mov    r15,rbx
ffff800000808c6d:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff800000808c74:	ff ff ff 
ffff800000808c77:	48 01 d8             	add    rax,rbx
ffff800000808c7a:	ff d0                	call   rax
ffff800000808c7c:	85 c0                	test   eax,eax
ffff800000808c7e:	75 46                	jne    ffff800000808cc6 <load_pe+0x600>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:339
                        {
                            int ordi=funcords[i];
ffff800000808c80:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808c83:	48 98                	cdqe   
ffff800000808c85:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffff800000808c89:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000808c90:	48 01 d0             	add    rax,rdx
ffff800000808c93:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808c96:	98                   	cwde   
ffff800000808c97:	89 85 dc fe ff ff    	mov    DWORD PTR [rbp-0x124],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:340
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
ffff800000808c9d:	8b 85 dc fe ff ff    	mov    eax,DWORD PTR [rbp-0x124]
ffff800000808ca3:	48 98                	cdqe   
ffff800000808ca5:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808cac:	00 
ffff800000808cad:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000808cb4:	48 01 d0             	add    rax,rdx
ffff800000808cb7:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808cb9:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808cbc:	01 d0                	add    eax,edx
ffff800000808cbe:	89 c2                	mov    edx,eax
ffff800000808cc0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808cc4:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
                    for(;i<funcn;i++)
ffff800000808cc6:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335 (discriminator 1)
ffff800000808cca:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808ccd:	3b 85 0c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xf4]
ffff800000808cd3:	0f 8c 6a ff ff ff    	jl     ffff800000808c43 <load_pe+0x57d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
                        }
                    }
                }
                iataddrs++;
ffff800000808cd9:	48 83 45 c0 04       	add    QWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
                siataddrs++;
ffff800000808cde:	48 83 45 b8 08       	add    QWORD PTR [rbp-0x48],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            while (*iataddrs)
ffff800000808ce3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808ce7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808ce9:	85 c0                	test   eax,eax
ffff800000808ceb:	0f 85 e2 fe ff ff    	jne    ffff800000808bd3 <load_pe+0x50d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:347
            }
            impdes++;
ffff800000808cf1:	48 83 45 d0 14       	add    QWORD PTR [rbp-0x30],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
        while (impdes->Characteristics)
ffff800000808cf6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808cfa:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808cfc:	85 c0                	test   eax,eax
ffff800000808cfe:	0f 85 70 fd ff ff    	jne    ffff800000808a74 <load_pe+0x3ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:354
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
ffff800000808d04:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000808d0b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:355
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
ffff800000808d0c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808d13:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
ffff800000808d19:	85 c0                	test   eax,eax
ffff800000808d1b:	0f 84 e7 00 00 00    	je     ffff800000808e08 <load_pe+0x742>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000808d21:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808d28:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358
                                +(u32)nbase);
ffff800000808d2e:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000808d31:	01 d0                	add    eax,edx
ffff800000808d33:	89 c0                	mov    eax,eax
ffff800000808d35:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:359
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
ffff800000808d39:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808d3d:	48 83 c0 40          	add    rax,0x40
ffff800000808d41:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:360
        u16 *rtype=reloc+1;
ffff800000808d45:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808d49:	48 83 c0 02          	add    rax,0x2
ffff800000808d4d:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:361
        int old_base=nth->OptionalHeader.ImageBase;
ffff800000808d51:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808d58:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000808d5c:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
        while(relp->VirtualAddress){
ffff800000808d62:	e9 93 00 00 00       	jmp    ffff800000808dfa <load_pe+0x734>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:363
            int pgva=relp->VirtualAddress+nbase;
ffff800000808d67:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808d6b:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808d6d:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808d70:	01 d0                	add    eax,edx
ffff800000808d72:	89 85 d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff800000808d78:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
ffff800000808d7f:	eb 57                	jmp    ffff800000808dd8 <load_pe+0x712>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff800000808d81:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808d85:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808d88:	66 85 c0             	test   ax,ax
ffff800000808d8b:	74 46                	je     ffff800000808dd3 <load_pe+0x70d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:367
                int *at=*reloc+pgva;//要重定位的数据的地址
ffff800000808d8d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808d91:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808d94:	0f b7 d0             	movzx  edx,ax
ffff800000808d97:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
ffff800000808d9d:	01 d0                	add    eax,edx
ffff800000808d9f:	48 98                	cdqe   
ffff800000808da1:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:368
                *at=*at-old_base+nbase;
ffff800000808da8:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808daf:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808db1:	2b 85 d4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x12c]
ffff800000808db7:	89 c2                	mov    edx,eax
ffff800000808db9:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808dbc:	01 c2                	add    edx,eax
ffff800000808dbe:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808dc5:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:370
                //下一个
                reloc+=2;
ffff800000808dc7:	48 83 45 a0 04       	add    QWORD PTR [rbp-0x60],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:371
                rtype+=2;
ffff800000808dcc:	48 83 45 98 04       	add    QWORD PTR [rbp-0x68],0x4
ffff800000808dd1:	eb 01                	jmp    ffff800000808dd4 <load_pe+0x70e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff800000808dd3:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff800000808dd4:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364 (discriminator 1)
ffff800000808dd8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808ddc:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808ddf:	c1 e8 02             	shr    eax,0x2
ffff800000808de2:	89 c2                	mov    edx,eax
ffff800000808de4:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000808de7:	39 c2                	cmp    edx,eax
ffff800000808de9:	77 96                	ja     ffff800000808d81 <load_pe+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:373
            }
            relp=(int)relp+0x1000;
ffff800000808deb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808def:	05 00 10 00 00       	add    eax,0x1000
ffff800000808df4:	48 98                	cdqe   
ffff800000808df6:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
        while(relp->VirtualAddress){
ffff800000808dfa:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808dfe:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808e00:	85 c0                	test   eax,eax
ffff800000808e02:	0f 85 5f ff ff ff    	jne    ffff800000808d67 <load_pe+0x6a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:379
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
ffff800000808e08:	c7 85 00 fd ff ff 00 	mov    DWORD PTR [rbp-0x300],0x0
ffff800000808e0f:	00 00 00 
ffff800000808e12:	c7 85 04 fd ff ff 00 	mov    DWORD PTR [rbp-0x2fc],0x0
ffff800000808e19:	00 00 00 
ffff800000808e1c:	48 c7 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],0x0
ffff800000808e23:	00 00 00 00 
ffff800000808e27:	48 c7 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],0x0
ffff800000808e2e:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:386
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff800000808e32:	48 8d 85 00 fd ff ff 	lea    rax,[rbp-0x300]
ffff800000808e39:	ba 18 00 00 00       	mov    edx,0x18
ffff800000808e3e:	48 89 c6             	mov    rsi,rax
ffff800000808e41:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000808e46:	49 89 df             	mov    r15,rbx
ffff800000808e49:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000808e50:	ff ff ff 
ffff800000808e53:	48 01 d8             	add    rax,rbx
ffff800000808e56:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
ffff800000808e58:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808e5f:	ff ff ff 
ffff800000808e62:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808e66:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808e68:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808e6f:	ff ff ff 
ffff800000808e72:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808e76:	48 98                	cdqe   
ffff800000808e78:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808e7f:	48 01 d0             	add    rax,rdx
ffff800000808e82:	48 83 c0 20          	add    rax,0x20
ffff800000808e86:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x1000000
ffff800000808e8d:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:388
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff800000808e8e:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808e95:	ff ff ff 
ffff800000808e98:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808e9c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808e9e:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808ea5:	ff ff ff 
ffff800000808ea8:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808eac:	48 98                	cdqe   
ffff800000808eae:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808eb5:	48 01 d0             	add    rax,rdx
ffff800000808eb8:	48 83 c0 20          	add    rax,0x20
ffff800000808ebc:	48 c7 40 10 00 10 00 	mov    QWORD PTR [rax+0x10],0x1001000
ffff800000808ec3:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
ffff800000808ec4:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808ecb:	ff ff ff 
ffff800000808ece:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808ed2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808ed4:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808edb:	ff ff ff 
ffff800000808ede:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808ee2:	48 98                	cdqe   
ffff800000808ee4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808eeb:	48 01 d0             	add    rax,rdx
ffff800000808eee:	48 83 c0 30          	add    rax,0x30
ffff800000808ef2:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000808ef9:	7f 00 00 
ffff800000808efc:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
ffff800000808f00:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff800000808f06:	48 98                	cdqe   
ffff800000808f08:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:398
    int ecode=main(0,NULL);
ffff800000808f0f:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff800000808f16:	be 00 00 00 00       	mov    esi,0x0
ffff800000808f1b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808f20:	ff d0                	call   rax
ffff800000808f22:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:399
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
ffff800000808f28:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
ffff800000808f2e:	48 98                	cdqe   
ffff800000808f30:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0x14
ffff800000808f37:	14 00 00 00 
ffff800000808f3b:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffff800000808f42:	48 c7 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],0x0
ffff800000808f49:	00 00 00 00 
ffff800000808f4d:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
ffff800000808f54:	00 00 00 00 
ffff800000808f58:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0x0
ffff800000808f5f:	00 00 00 00 
ffff800000808f63:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffff800000808f6a:	00 00 00 00 
ffff800000808f6e:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0x0
ffff800000808f75:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        asm volatile(".byte 0x48\n"
ffff800000808f79:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffff800000808f80:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffff800000808f87:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
ffff800000808f8e:	48 8b 95 98 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x168]
ffff800000808f95:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
ffff800000808f9c:	4c 8b 85 88 fe ff ff 	mov    r8,QWORD PTR [rbp-0x178]
ffff800000808fa3:	4c 8b 8d 80 fe ff ff 	mov    r9,QWORD PTR [rbp-0x180]
ffff800000808faa:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff800000808fad:	48 c7 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],0x0
ffff800000808fb4:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff800000808fb8:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:402 (discriminator 1)
    //
    //不应该执行到这
    while(1);
ffff800000808fbf:	eb fe                	jmp    ffff800000808fbf <load_pe+0x8f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:404 (discriminator 2)
    return task[cur_proc].exit_code;
}
ffff800000808fc1:	48 81 c4 10 03 00 00 	add    rsp,0x310
ffff800000808fc8:	5b                   	pop    rbx
ffff800000808fc9:	41 5f                	pop    r15
ffff800000808fcb:	5d                   	pop    rbp
ffff800000808fcc:	c3                   	ret    

ffff800000808fcd <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:407

int get_module_addr(int mi)
{
ffff800000808fcd:	f3 0f 1e fa          	endbr64 
ffff800000808fd1:	55                   	push   rbp
ffff800000808fd2:	48 89 e5             	mov    rbp,rsp
ffff800000808fd5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808fd5 <get_module_addr+0x8>
ffff800000808fdc:	49 bb 23 4b 11 00 00 	movabs r11,0x114b23
ffff800000808fe3:	00 00 00 
ffff800000808fe6:	4c 01 d8             	add    rax,r11
ffff800000808fe9:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:408
    return modules[mi].base;
ffff800000808fec:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000808ff3:	ff ff ff 
ffff800000808ff6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808ffa:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000808ffd:	48 98                	cdqe   
ffff800000808fff:	48 c1 e0 05          	shl    rax,0x5
ffff800000809003:	48 01 d0             	add    rax,rdx
ffff800000809006:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:409
}
ffff800000809008:	5d                   	pop    rbp
ffff800000809009:	c3                   	ret    

ffff80000080900a <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:411
int dispose_library(int dlln)
{
ffff80000080900a:	f3 0f 1e fa          	endbr64 
ffff80000080900e:	55                   	push   rbp
ffff80000080900f:	48 89 e5             	mov    rbp,rsp
ffff800000809012:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809012 <dispose_library+0x8>
ffff800000809019:	49 bb e6 4a 11 00 00 	movabs r11,0x114ae6
ffff800000809020:	00 00 00 
ffff800000809023:	4c 01 d8             	add    rax,r11
ffff800000809026:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412
    if(dlln<0||dlln>=MAX_DLLS)return -1;
ffff800000809029:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000080902d:	78 09                	js     ffff800000809038 <dispose_library+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412 (discriminator 2)
ffff80000080902f:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffff800000809036:	7e 07                	jle    ffff80000080903f <dispose_library+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412 (discriminator 3)
ffff800000809038:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080903d:	eb 2c                	jmp    ffff80000080906b <dispose_library+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:417
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
ffff80000080903f:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff800000809046:	ff ff ff 
ffff800000809049:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080904d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809050:	48 98                	cdqe   
ffff800000809052:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
ffff800000809059:	48 01 d0             	add    rax,rdx
ffff80000080905c:	48 83 c0 08          	add    rax,0x8
ffff800000809060:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:418
    return 0;
ffff800000809066:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:419
}
ffff80000080906b:	5d                   	pop    rbp
ffff80000080906c:	c3                   	ret    

ffff80000080906d <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:467

    return 0;
} */

int sys_insmod(char *path)
{
ffff80000080906d:	f3 0f 1e fa          	endbr64 
ffff800000809071:	55                   	push   rbp
ffff800000809072:	48 89 e5             	mov    rbp,rsp
ffff800000809075:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809075 <sys_insmod+0x8>
ffff80000080907c:	49 bb 83 4a 11 00 00 	movabs r11,0x114a83
ffff800000809083:	00 00 00 
ffff800000809086:	4c 01 d8             	add    rax,r11
ffff800000809089:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:469

}
ffff80000080908d:	90                   	nop
ffff80000080908e:	5d                   	pop    rbp
ffff80000080908f:	c3                   	ret    

ffff800000809090 <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:471
int sys_rmmod(char *name)
{
ffff800000809090:	f3 0f 1e fa          	endbr64 
ffff800000809094:	55                   	push   rbp
ffff800000809095:	48 89 e5             	mov    rbp,rsp
ffff800000809098:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809098 <sys_rmmod+0x8>
ffff80000080909f:	49 bb 60 4a 11 00 00 	movabs r11,0x114a60
ffff8000008090a6:	00 00 00 
ffff8000008090a9:	4c 01 d8             	add    rax,r11
ffff8000008090ac:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:473

}
ffff8000008090b0:	90                   	nop
ffff8000008090b1:	5d                   	pop    rbp
ffff8000008090b2:	c3                   	ret    

ffff8000008090b3 <new_load_elf>:
new_load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:474
off_t new_load_elf(struct file* elf){
ffff8000008090b3:	f3 0f 1e fa          	endbr64 
ffff8000008090b7:	55                   	push   rbp
ffff8000008090b8:	48 89 e5             	mov    rbp,rsp
ffff8000008090bb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008090bb <new_load_elf+0x8>
ffff8000008090c2:	49 bb 3d 4a 11 00 00 	movabs r11,0x114a3d
ffff8000008090c9:	00 00 00 
ffff8000008090cc:	4c 01 d8             	add    rax,r11
ffff8000008090cf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:480
    //读取文件头
    //if ET_DYN
    //load dl
    //else
    // load elf
}
ffff8000008090d3:	90                   	nop
ffff8000008090d4:	5d                   	pop    rbp
ffff8000008090d5:	c3                   	ret    

ffff8000008090d6 <load_elf>:
load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:482
//切换进程前,在execve系统调用中
off_t load_elf(struct file *elf) {
ffff8000008090d6:	f3 0f 1e fa          	endbr64 
ffff8000008090da:	55                   	push   rbp
ffff8000008090db:	48 89 e5             	mov    rbp,rsp
ffff8000008090de:	41 57                	push   r15
ffff8000008090e0:	53                   	push   rbx
ffff8000008090e1:	48 81 ec 30 01 00 00 	sub    rsp,0x130
ffff8000008090e8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008090e8 <load_elf+0x12>
ffff8000008090ef:	49 bb 10 4a 11 00 00 	movabs r11,0x114a10
ffff8000008090f6:	00 00 00 
ffff8000008090f9:	4c 01 db             	add    rbx,r11
ffff8000008090fc:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:484
    // 读取文件头
    struct file* elf_storage=elf;
ffff800000809103:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080910a:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485
    off_t tmpla=kmalloc();
ffff80000080910e:	49 89 df             	mov    r15,rbx
ffff800000809111:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809116:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080911d:	ff ff ff 
ffff800000809120:	48 01 da             	add    rdx,rbx
ffff800000809123:	ff d2                	call   rdx
ffff800000809125:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:486
    off_t shla=kmalloc();
ffff80000080912b:	49 89 df             	mov    r15,rbx
ffff80000080912e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809133:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080913a:	ff ff ff 
ffff80000080913d:	48 01 da             	add    rdx,rbx
ffff800000809140:	ff d2                	call   rdx
ffff800000809142:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:487
    if(tmpla==-1)
ffff800000809148:	83 bd 7c ff ff ff ff 	cmp    DWORD PTR [rbp-0x84],0xffffffff
ffff80000080914f:	75 26                	jne    ffff800000809177 <load_elf+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:489
    {
        current->regs.errcode=-ENOMEM;
ffff800000809151:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809158:	ff ff ff 
ffff80000080915b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080915f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809162:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000809169:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:490
        return -1;
ffff80000080916d:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809172:	e9 5f 0a 00 00       	jmp    ffff800000809bd6 <load_elf+0xb00>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:492
    }
ready:
ffff800000809177:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:493
    elf->position=0;
ffff800000809178:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080917f:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:495
    //读取文件头
    elf->f_ops->read(elf, (char *) tmpla, PAGE_4K_SIZE, &elf->position);
ffff800000809186:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080918d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809191:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff800000809195:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
ffff80000080919c:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff8000008091a2:	48 98                	cdqe   
ffff8000008091a4:	48 89 c6             	mov    rsi,rax
ffff8000008091a7:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008091ae:	48 89 d1             	mov    rcx,rdx
ffff8000008091b1:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008091b6:	48 89 c7             	mov    rdi,rax
ffff8000008091b9:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:497

    Elf64_Ehdr *ehdr=(Elf64_Phdr*)tmpla;
ffff8000008091bc:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff8000008091c2:	48 98                	cdqe   
ffff8000008091c4:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:498
    u16 entn=ehdr->e_phnum;
ffff8000008091cb:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008091d2:	0f b7 40 38          	movzx  eax,WORD PTR [rax+0x38]
ffff8000008091d6:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:499
    u16 ents=ehdr->e_phentsize;
ffff8000008091dd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008091e4:	0f b7 40 36          	movzx  eax,WORD PTR [rax+0x36]
ffff8000008091e8:	66 89 85 6c ff ff ff 	mov    WORD PTR [rbp-0x94],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:500
    elf->position=ehdr->e_shoff;
ffff8000008091ef:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008091f6:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff8000008091fa:	48 89 c2             	mov    rdx,rax
ffff8000008091fd:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000809204:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:501
    elf->f_ops->read(elf,(char*)shla,ehdr->e_shnum*ehdr->e_shentsize,&elf->position);
ffff800000809207:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080920e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809212:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff800000809216:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffff80000080921d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809224:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff800000809228:	0f b7 d0             	movzx  edx,ax
ffff80000080922b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809232:	0f b7 40 3a          	movzx  eax,WORD PTR [rax+0x3a]
ffff800000809236:	0f b7 c0             	movzx  eax,ax
ffff800000809239:	0f af c2             	imul   eax,edx
ffff80000080923c:	48 63 d0             	movsxd rdx,eax
ffff80000080923f:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff800000809245:	48 98                	cdqe   
ffff800000809247:	48 89 c6             	mov    rsi,rax
ffff80000080924a:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000809251:	48 89 c7             	mov    rdi,rax
ffff800000809254:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:502
    struct Elf64_Shdr* sh= (struct Elf64_Shdr *) (shla);
ffff800000809257:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff80000080925d:	48 98                	cdqe   
ffff80000080925f:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:504
    //TODO  加载shdr表
    Elf64_Phdr *ph= (Elf64_Phdr *) (tmpla + ehdr->e_phoff);
ffff800000809266:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff80000080926c:	48 63 d0             	movsxd rdx,eax
ffff80000080926f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809276:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080927a:	48 01 d0             	add    rax,rdx
ffff80000080927d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:505
    size_t tot_sz=0;
ffff800000809281:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
ffff800000809288:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:506
    off_t base=ph->p_vaddr,offset=0;
ffff80000080928c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809290:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000809294:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
ffff80000080929a:	c7 85 50 ff ff ff 00 	mov    DWORD PTR [rbp-0xb0],0x0
ffff8000008092a1:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:507
    int reloc_flag=0;
ffff8000008092a4:	c7 85 4c ff ff ff 00 	mov    DWORD PTR [rbp-0xb4],0x0
ffff8000008092ab:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:531
            offset=new_base-base;
        }
    } */
    

    module* mod=0;
ffff8000008092ae:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008092b5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533
    //module项设置
    for(int i=0;i<MAX_MODULES;i++){
ffff8000008092b6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff8000008092bd:	e9 c3 00 00 00       	jmp    ffff800000809385 <load_elf+0x2af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:534
        if(modules[i].type==ET_NONE){
ffff8000008092c2:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008092c9:	ff ff ff 
ffff8000008092cc:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff8000008092d0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008092d3:	48 98                	cdqe   
ffff8000008092d5:	48 c1 e0 05          	shl    rax,0x5
ffff8000008092d9:	48 01 d0             	add    rax,rdx
ffff8000008092dc:	48 8b 40 0c          	mov    rax,QWORD PTR [rax+0xc]
ffff8000008092e0:	48 85 c0             	test   rax,rax
ffff8000008092e3:	0f 85 98 00 00 00    	jne    ffff800000809381 <load_elf+0x2ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:535
            modules[i].type=ehdr->e_type;
ffff8000008092e9:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008092f0:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff8000008092f4:	0f b7 c0             	movzx  eax,ax
ffff8000008092f7:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008092fe:	ff ff ff 
ffff800000809301:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff800000809305:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809308:	48 63 d2             	movsxd rdx,edx
ffff80000080930b:	48 c1 e2 05          	shl    rdx,0x5
ffff80000080930f:	48 01 ca             	add    rdx,rcx
ffff800000809312:	48 89 42 0c          	mov    QWORD PTR [rdx+0xc],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:536
            modules[i].load_offset=offset;
ffff800000809316:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080931d:	ff ff ff 
ffff800000809320:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000809324:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809327:	48 98                	cdqe   
ffff800000809329:	48 c1 e0 05          	shl    rax,0x5
ffff80000080932d:	48 01 d0             	add    rax,rdx
ffff800000809330:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffff800000809334:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff80000080933a:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:537
            modules[i].base=base;
ffff80000080933c:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000809343:	ff ff ff 
ffff800000809346:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080934a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080934d:	48 98                	cdqe   
ffff80000080934f:	48 c1 e0 05          	shl    rax,0x5
ffff800000809353:	48 01 c2             	add    rdx,rax
ffff800000809356:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080935c:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:538
            mod=modules+i;
ffff80000080935e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809361:	48 98                	cdqe   
ffff800000809363:	48 c1 e0 05          	shl    rax,0x5
ffff800000809367:	48 89 c2             	mov    rdx,rax
ffff80000080936a:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000809371:	ff ff ff 
ffff800000809374:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809378:	48 01 d0             	add    rax,rdx
ffff80000080937b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:539
            break;
ffff80000080937f:	eb 0e                	jmp    ffff80000080938f <load_elf+0x2b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533 (discriminator 2)
    for(int i=0;i<MAX_MODULES;i++){
ffff800000809381:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533 (discriminator 1)
ffff800000809385:	83 7d dc 7f          	cmp    DWORD PTR [rbp-0x24],0x7f
ffff800000809389:	0f 8e 33 ff ff ff    	jle    ffff8000008092c2 <load_elf+0x1ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:542
        }
    }
    for(int i=0;i<entn;i++){
ffff80000080938f:	c7 85 48 ff ff ff 00 	mov    DWORD PTR [rbp-0xb8],0x0
ffff800000809396:	00 00 00 
ffff800000809399:	90                   	nop
ffff80000080939a:	0f b7 85 6e ff ff ff 	movzx  eax,WORD PTR [rbp-0x92]
ffff8000008093a1:	39 85 48 ff ff ff    	cmp    DWORD PTR [rbp-0xb8],eax
ffff8000008093a7:	0f 8d d4 00 00 00    	jge    ffff800000809481 <load_elf+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:547
        
        if((ph[i].p_type|PT_INTERP)!=0){
            //load dl
            //
            if(current->dl)break;
ffff8000008093ad:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008093b4:	ff ff ff 
ffff8000008093b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008093bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008093be:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff8000008093c4:	85 c0                	test   eax,eax
ffff8000008093c6:	0f 85 b4 00 00 00    	jne    ffff800000809480 <load_elf+0x3aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:548
            int fd=sys_open("/mnt/dl.so",O_EXEC);
ffff8000008093cc:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008093d1:	48 b8 eb d6 ff ff ff 	movabs rax,0xffffffffffffd6eb
ffff8000008093d8:	ff ff ff 
ffff8000008093db:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008093df:	48 89 c7             	mov    rdi,rax
ffff8000008093e2:	49 89 df             	mov    r15,rbx
ffff8000008093e5:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff8000008093ec:	ff ff ff 
ffff8000008093ef:	48 01 d8             	add    rax,rbx
ffff8000008093f2:	ff d0                	call   rax
ffff8000008093f4:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:549
            kmfree(tmpla);
ffff8000008093fa:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff800000809400:	48 98                	cdqe   
ffff800000809402:	48 89 c7             	mov    rdi,rax
ffff800000809405:	49 89 df             	mov    r15,rbx
ffff800000809408:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080940f:	ff ff ff 
ffff800000809412:	48 01 d8             	add    rax,rbx
ffff800000809415:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:550
            kmfree(shla);
ffff800000809417:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff80000080941d:	48 98                	cdqe   
ffff80000080941f:	48 89 c7             	mov    rdi,rax
ffff800000809422:	49 89 df             	mov    r15,rbx
ffff800000809425:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080942c:	ff ff ff 
ffff80000080942f:	48 01 d8             	add    rax,rbx
ffff800000809432:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:551
            current->dl=fd;
ffff800000809434:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080943b:	ff ff ff 
ffff80000080943e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809442:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809445:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
ffff80000080944b:	89 90 54 03 00 00    	mov    DWORD PTR [rax+0x354],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:552
            elf=current->openf[fd];
ffff800000809451:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809458:	ff ff ff 
ffff80000080945b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080945f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809462:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
ffff800000809468:	48 63 d2             	movsxd rdx,edx
ffff80000080946b:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080946f:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809474:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:553
            goto ready;
ffff80000080947b:	e9 f8 fc ff ff       	jmp    ffff800000809178 <load_elf+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:547
            if(current->dl)break;
ffff800000809480:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:556
        }
    }
    for(int i=0;i<entn;i++){
ffff800000809481:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000809488:	e9 9d 01 00 00       	jmp    ffff80000080962a <load_elf+0x554>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:559
        //加载段
        if((ph->p_type|PT_LOAD)!=0){
            unsigned long off=ph->p_offset;
ffff80000080948d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809491:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809495:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:560
            unsigned long fs=ph->p_filesz;
ffff80000080949c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008094a0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008094a4:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:561
            size_t ms=ph->p_memsz;
ffff8000008094ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008094af:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff8000008094b3:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:562
            char* vptr= (char *) ph->p_vaddr+offset;
ffff8000008094ba:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008094c0:	48 63 d0             	movsxd rdx,eax
ffff8000008094c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008094c7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008094cb:	48 01 d0             	add    rax,rdx
ffff8000008094ce:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:563
            elf->position=off;
ffff8000008094d5:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff8000008094dc:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008094e3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:564
            if(off==0){
ffff8000008094e6:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
ffff8000008094ed:	00 
ffff8000008094ee:	75 10                	jne    ffff800000809500 <load_elf+0x42a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:565
                mod->header=vptr;
ffff8000008094f0:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008094f7:	89 c2                	mov    edx,eax
ffff8000008094f9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008094fd:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:568
            }
            //先映射好内存
            int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff800000809500:	c7 85 f4 fe ff ff 05 	mov    DWORD PTR [rbp-0x10c],0x5
ffff800000809507:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:570
            if((ph->p_flags|PF_X)!=0||(ph->p_flags|PF_W)!=0)
                attr|=PAGE_RWX;
ffff80000080950a:	83 8d f4 fe ff ff 02 	or     DWORD PTR [rbp-0x10c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:571
            int pgc=(ms-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff800000809511:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000809518:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080951e:	48 c1 e8 0c          	shr    rax,0xc
ffff800000809522:	89 85 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572
            for(int j=0;j<pgc;j++){
ffff800000809528:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff80000080952f:	e9 ad 00 00 00       	jmp    ffff8000008095e1 <load_elf+0x50b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:573
                off_t dest=(off_t) (vptr + j * PAGE_4K_SIZE);
ffff800000809534:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000809537:	c1 e0 0c             	shl    eax,0xc
ffff80000080953a:	48 63 d0             	movsxd rdx,eax
ffff80000080953d:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000809544:	48 01 d0             	add    rax,rdx
ffff800000809547:	89 85 ec fe ff ff    	mov    DWORD PTR [rbp-0x114],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:574
                off_t lma=pmalloc();
ffff80000080954d:	49 89 df             	mov    r15,rbx
ffff800000809550:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809555:	48 ba ec 50 ee ff ff 	movabs rdx,0xffffffffffee50ec
ffff80000080955c:	ff ff ff 
ffff80000080955f:	48 01 da             	add    rdx,rbx
ffff800000809562:	ff d2                	call   rdx
ffff800000809564:	89 85 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:575
                if(lma==-1)
ffff80000080956a:	83 bd e8 fe ff ff ff 	cmp    DWORD PTR [rbp-0x118],0xffffffff
ffff800000809571:	75 26                	jne    ffff800000809599 <load_elf+0x4c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:577
                {
                    current->regs.errcode=-ENOMEM;
ffff800000809573:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080957a:	ff ff ff 
ffff80000080957d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809581:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809584:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff80000080958b:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:578
                    return -1;
ffff80000080958f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809594:	e9 3d 06 00 00       	jmp    ffff800000809bd6 <load_elf+0xb00>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:580 (discriminator 2)
                }
                smmap(lma , dest, attr, current->pml4);
ffff800000809599:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008095a0:	ff ff ff 
ffff8000008095a3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008095a7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008095aa:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff8000008095b1:	8b 95 f4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x10c]
ffff8000008095b7:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
ffff8000008095bd:	48 63 f0             	movsxd rsi,eax
ffff8000008095c0:	8b 85 e8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x118]
ffff8000008095c6:	48 98                	cdqe   
ffff8000008095c8:	48 89 c7             	mov    rdi,rax
ffff8000008095cb:	49 89 df             	mov    r15,rbx
ffff8000008095ce:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff8000008095d5:	ff ff ff 
ffff8000008095d8:	48 01 d8             	add    rax,rbx
ffff8000008095db:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572 (discriminator 2)
            for(int j=0;j<pgc;j++){
ffff8000008095dd:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572 (discriminator 1)
ffff8000008095e1:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008095e4:	3b 85 f0 fe ff ff    	cmp    eax,DWORD PTR [rbp-0x110]
ffff8000008095ea:	0f 8c 44 ff ff ff    	jl     ffff800000809534 <load_elf+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:583
            }
            //读取
            elf->f_ops->read(elf,vptr,fs,&elf->position);
ffff8000008095f0:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008095f7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008095fb:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff8000008095ff:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffff800000809606:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
ffff80000080960d:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
ffff800000809614:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080961b:	48 89 c7             	mov    rdi,rax
ffff80000080961e:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:586

        }
        ph++;
ffff800000809621:	48 83 45 e8 38       	add    QWORD PTR [rbp-0x18],0x38
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:556
    for(int i=0;i<entn;i++){
ffff800000809626:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:556 (discriminator 1)
ffff80000080962a:	0f b7 85 6e ff ff ff 	movzx  eax,WORD PTR [rbp-0x92]
ffff800000809631:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff800000809634:	0f 8c 53 fe ff ff    	jl     ffff80000080948d <load_elf+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:589
    }
    //找dynamic段
    struct Elf64_Shdr *dynamic=NULL;
ffff80000080963a:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000809641:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:590
    off_t* got=NULL;
ffff800000809642:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff800000809649:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591
    for(int i=0;i<ehdr->e_shnum;i++){
ffff80000080964d:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff800000809654:	eb 50                	jmp    ffff8000008096a6 <load_elf+0x5d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:592
        if(sh[i].sh_type==SHT_DYNAMIC)
ffff800000809656:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809659:	48 63 d0             	movsxd rdx,eax
ffff80000080965c:	48 89 d0             	mov    rax,rdx
ffff80000080965f:	48 01 c0             	add    rax,rax
ffff800000809662:	48 01 d0             	add    rax,rdx
ffff800000809665:	48 c1 e0 04          	shl    rax,0x4
ffff800000809669:	48 89 c2             	mov    rdx,rax
ffff80000080966c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000809673:	48 01 d0             	add    rax,rdx
ffff800000809676:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809679:	83 f8 06             	cmp    eax,0x6
ffff80000080967c:	75 24                	jne    ffff8000008096a2 <load_elf+0x5cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:593
            dynamic=sh+i;
ffff80000080967e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809681:	48 63 d0             	movsxd rdx,eax
ffff800000809684:	48 89 d0             	mov    rax,rdx
ffff800000809687:	48 01 c0             	add    rax,rax
ffff80000080968a:	48 01 d0             	add    rax,rdx
ffff80000080968d:	48 c1 e0 04          	shl    rax,0x4
ffff800000809691:	48 89 c2             	mov    rdx,rax
ffff800000809694:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080969b:	48 01 d0             	add    rax,rdx
ffff80000080969e:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591 (discriminator 2)
    for(int i=0;i<ehdr->e_shnum;i++){
ffff8000008096a2:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591 (discriminator 1)
ffff8000008096a6:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008096ad:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff8000008096b1:	0f b7 c0             	movzx  eax,ax
ffff8000008096b4:	39 45 c4             	cmp    DWORD PTR [rbp-0x3c],eax
ffff8000008096b7:	7c 9d                	jl     ffff800000809656 <load_elf+0x580>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:595
    }
    if(dynamic){
ffff8000008096b9:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff8000008096be:	0f 84 67 03 00 00    	je     ffff800000809a2b <load_elf+0x955>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:596
        char* dynstr=0;
ffff8000008096c4:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff8000008096cb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:597
        Elf64_Dyn *dyn=dynamic->sh_addr+offset;
ffff8000008096cc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008096d0:	48 8b 50 0c          	mov    rdx,QWORD PTR [rax+0xc]
ffff8000008096d4:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008096da:	48 98                	cdqe   
ffff8000008096dc:	48 01 d0             	add    rax,rdx
ffff8000008096df:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:599

        mod->p_dynamic=dynamic;
ffff8000008096e6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008096ea:	89 c2                	mov    edx,eax
ffff8000008096ec:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008096f0:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603
        //这里一堆获取函数之后实现细节
        // dynstr=so_get_dynstr(dyn);
        //so_get_dynstr从so中获取.dynstr节
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff8000008096f3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008096fa:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff8000008096fe:	eb 2b                	jmp    ffff80000080972b <load_elf+0x655>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:604
            if(p->d_tag==DT_STRTAB){
ffff800000809700:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809704:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809707:	48 83 f8 05          	cmp    rax,0x5
ffff80000080970b:	75 19                	jne    ffff800000809726 <load_elf+0x650>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:605
                dynstr=p->d_un.d_ptr+offset;
ffff80000080970d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809711:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000809715:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff80000080971b:	48 98                	cdqe   
ffff80000080971d:	48 01 d0             	add    rax,rdx
ffff800000809720:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:606
                break;
ffff800000809724:	eb 11                	jmp    ffff800000809737 <load_elf+0x661>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809726:	48 83 45 b0 10       	add    QWORD PTR [rbp-0x50],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603 (discriminator 1)
ffff80000080972b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080972f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809732:	48 85 c0             	test   rax,rax
ffff800000809735:	75 c9                	jne    ffff800000809700 <load_elf+0x62a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:609
            }
        }
        if(!dynstr){
ffff800000809737:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff80000080973c:	75 28                	jne    ffff800000809766 <load_elf+0x690>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:610
            comprintf("cannot find dynstr in .dynamic!\n");
ffff80000080973e:	48 b8 f8 d6 ff ff ff 	movabs rax,0xffffffffffffd6f8
ffff800000809745:	ff ff ff 
ffff800000809748:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080974c:	48 89 c7             	mov    rdi,rax
ffff80000080974f:	49 89 df             	mov    r15,rbx
ffff800000809752:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809757:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff80000080975e:	ff ff ff 
ffff800000809761:	48 01 da             	add    rdx,rbx
ffff800000809764:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:619
        // so_load_sos(so_paths);
        //so_get_needed&so_load_sos
        //so_get_got
        // got=so_get_got(dyn);
        //intel架构上DT_PLTGOT存放的是got地址
        size_t relsz=0,relentsz=0;
ffff800000809766:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff80000080976d:	00 
ffff80000080976e:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff800000809775:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620
        off_t relptr=0;
ffff800000809776:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff80000080977d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000809784:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff800000809788:	e9 8e 02 00 00       	jmp    ffff800000809a1b <load_elf+0x945>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:622
            switch (p->d_tag)
ffff80000080978d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809791:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809794:	48 83 f8 13          	cmp    rax,0x13
ffff800000809798:	0f 87 c4 01 00 00    	ja     ffff800000809962 <load_elf+0x88c>
ffff80000080979e:	48 83 f8 07          	cmp    rax,0x7
ffff8000008097a2:	73 29                	jae    ffff8000008097cd <load_elf+0x6f7>
ffff8000008097a4:	48 83 f8 06          	cmp    rax,0x6
ffff8000008097a8:	0f 84 78 01 00 00    	je     ffff800000809926 <load_elf+0x850>
ffff8000008097ae:	48 83 f8 06          	cmp    rax,0x6
ffff8000008097b2:	0f 87 aa 01 00 00    	ja     ffff800000809962 <load_elf+0x88c>
ffff8000008097b8:	48 83 f8 01          	cmp    rax,0x1
ffff8000008097bc:	74 62                	je     ffff800000809820 <load_elf+0x74a>
ffff8000008097be:	48 83 f8 03          	cmp    rax,0x3
ffff8000008097c2:	0f 84 ea 00 00 00    	je     ffff8000008098b2 <load_elf+0x7dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:657
                relentsz=p->d_un.d_val;
                goto is_rel_prepared;

            
            default:
                break;
ffff8000008097c8:	e9 95 01 00 00       	jmp    ffff800000809962 <load_elf+0x88c>
ffff8000008097cd:	ba 01 00 00 00       	mov    edx,0x1
ffff8000008097d2:	89 c1                	mov    ecx,eax
ffff8000008097d4:	48 d3 e2             	shl    rdx,cl
ffff8000008097d7:	48 89 d0             	mov    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:622
            switch (p->d_tag)
ffff8000008097da:	48 89 c2             	mov    rdx,rax
ffff8000008097dd:	81 e2 00 02 08 00    	and    edx,0x80200
ffff8000008097e3:	48 85 d2             	test   rdx,rdx
ffff8000008097e6:	0f 95 c2             	setne  dl
ffff8000008097e9:	84 d2                	test   dl,dl
ffff8000008097eb:	0f 85 63 01 00 00    	jne    ffff800000809954 <load_elf+0x87e>
ffff8000008097f1:	48 89 c2             	mov    rdx,rax
ffff8000008097f4:	81 e2 80 00 02 00    	and    edx,0x20080
ffff8000008097fa:	48 85 d2             	test   rdx,rdx
ffff8000008097fd:	0f 95 c2             	setne  dl
ffff800000809800:	84 d2                	test   dl,dl
ffff800000809802:	0f 85 3f 01 00 00    	jne    ffff800000809947 <load_elf+0x871>
ffff800000809808:	25 00 01 04 00       	and    eax,0x40100
ffff80000080980d:	48 85 c0             	test   rax,rax
ffff800000809810:	0f 95 c0             	setne  al
ffff800000809813:	84 c0                	test   al,al
ffff800000809815:	0f 85 1e 01 00 00    	jne    ffff800000809939 <load_elf+0x863>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:657
                break;
ffff80000080981b:	e9 42 01 00 00       	jmp    ffff800000809962 <load_elf+0x88c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:625
                char* pathname=p->d_un.d_val+dynstr;
ffff800000809820:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809824:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000809828:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080982c:	48 01 d0             	add    rax,rdx
ffff80000080982f:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:626
                int so_fno=sys_open(pathname,O_EXEC);
ffff800000809836:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff80000080983d:	be 00 10 00 00       	mov    esi,0x1000
ffff800000809842:	48 89 c7             	mov    rdi,rax
ffff800000809845:	49 89 df             	mov    r15,rbx
ffff800000809848:	48 b8 c3 dc ee ff ff 	movabs rax,0xffffffffffeedcc3
ffff80000080984f:	ff ff ff 
ffff800000809852:	48 01 d8             	add    rax,rbx
ffff800000809855:	ff d0                	call   rax
ffff800000809857:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:628
                load_elf(current->openf[so_fno]);
ffff80000080985d:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809864:	ff ff ff 
ffff800000809867:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080986b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080986e:	8b 95 24 ff ff ff    	mov    edx,DWORD PTR [rbp-0xdc]
ffff800000809874:	48 63 d2             	movsxd rdx,edx
ffff800000809877:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080987b:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809880:	48 89 c7             	mov    rdi,rax
ffff800000809883:	48 b8 de b5 ee ff ff 	movabs rax,0xffffffffffeeb5de
ffff80000080988a:	ff ff ff 
ffff80000080988d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000809891:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:629
                sys_close(so_fno);
ffff800000809893:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000809899:	89 c7                	mov    edi,eax
ffff80000080989b:	49 89 df             	mov    r15,rbx
ffff80000080989e:	48 b8 63 e3 ee ff ff 	movabs rax,0xffffffffffeee363
ffff8000008098a5:	ff ff ff 
ffff8000008098a8:	48 01 d8             	add    rax,rbx
ffff8000008098ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:630
                break;
ffff8000008098ad:	e9 b1 00 00 00       	jmp    ffff800000809963 <load_elf+0x88d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:632
                got=p->d_un.d_ptr+offset;
ffff8000008098b2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008098b6:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008098ba:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008098c0:	48 98                	cdqe   
ffff8000008098c2:	48 01 d0             	add    rax,rdx
ffff8000008098c5:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:635
                got[2]=dl_runtime_resolve;
ffff8000008098cc:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff8000008098d3:	ff ff ff 
ffff8000008098d6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008098da:	48 89 c2             	mov    rdx,rax
ffff8000008098dd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008098e4:	48 83 c0 08          	add    rax,0x8
ffff8000008098e8:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:637
                got[1]=mod-modules;
ffff8000008098ea:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008098f1:	ff ff ff 
ffff8000008098f4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008098f8:	48 89 c2             	mov    rdx,rax
ffff8000008098fb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008098ff:	48 29 d0             	sub    rax,rdx
ffff800000809902:	48 c1 f8 05          	sar    rax,0x5
ffff800000809906:	48 89 c2             	mov    rdx,rax
ffff800000809909:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000809910:	48 83 c0 04          	add    rax,0x4
ffff800000809914:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:638
                mod->p_got=got;
ffff800000809916:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080991d:	89 c2                	mov    edx,eax
ffff80000080991f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809923:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:640
                mod->p_symbol=p->d_un.d_ptr;
ffff800000809926:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080992a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080992e:	89 c2                	mov    edx,eax
ffff800000809930:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809934:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:641
                break;
ffff800000809937:	eb 2a                	jmp    ffff800000809963 <load_elf+0x88d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:644
                relsz=p->d_un.d_val;
ffff800000809939:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080993d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809941:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:645
                goto is_rel_prepared;
ffff800000809945:	eb 21                	jmp    ffff800000809968 <load_elf+0x892>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:648
                relptr=p->d_un.d_ptr;
ffff800000809947:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080994b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080994f:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:649
                goto is_rel_prepared;
ffff800000809952:	eb 14                	jmp    ffff800000809968 <load_elf+0x892>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:652
                relentsz=p->d_un.d_val;
ffff800000809954:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809958:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080995c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:653
                goto is_rel_prepared;
ffff800000809960:	eb 06                	jmp    ffff800000809968 <load_elf+0x892>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:657
                break;
ffff800000809962:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:659
            }
            continue;
ffff800000809963:	e9 ae 00 00 00       	jmp    ffff800000809a16 <load_elf+0x940>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661
is_rel_prepared:
            if(!(relsz&&relentsz&&relptr))continue;
ffff800000809968:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080996d:	0f 84 a2 00 00 00    	je     ffff800000809a15 <load_elf+0x93f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661 (discriminator 2)
ffff800000809973:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff800000809978:	0f 84 97 00 00 00    	je     ffff800000809a15 <load_elf+0x93f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661 (discriminator 4)
ffff80000080997e:	83 7d 9c 00          	cmp    DWORD PTR [rbp-0x64],0x0
ffff800000809982:	0f 84 8d 00 00 00    	je     ffff800000809a15 <load_elf+0x93f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662
            for(int j=0;j<relsz/relentsz;j++){
ffff800000809988:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
ffff80000080998f:	eb 53                	jmp    ffff8000008099e4 <load_elf+0x90e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:663 (discriminator 3)
                fill_reloc(relptr+j*relentsz,mod-modules);
ffff800000809991:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000809998:	ff ff ff 
ffff80000080999b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080999f:	48 89 c2             	mov    rdx,rax
ffff8000008099a2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008099a6:	48 29 d0             	sub    rax,rdx
ffff8000008099a9:	48 c1 f8 05          	sar    rax,0x5
ffff8000008099ad:	48 89 c2             	mov    rdx,rax
ffff8000008099b0:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008099b3:	48 63 c8             	movsxd rcx,eax
ffff8000008099b6:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff8000008099b9:	48 98                	cdqe   
ffff8000008099bb:	48 0f af 45 a0       	imul   rax,QWORD PTR [rbp-0x60]
ffff8000008099c0:	48 01 c8             	add    rax,rcx
ffff8000008099c3:	48 89 d6             	mov    rsi,rdx
ffff8000008099c6:	48 89 c7             	mov    rdi,rax
ffff8000008099c9:	49 89 df             	mov    r15,rbx
ffff8000008099cc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008099d1:	48 ba 9e c4 ee ff ff 	movabs rdx,0xffffffffffeec49e
ffff8000008099d8:	ff ff ff 
ffff8000008099db:	48 01 da             	add    rdx,rbx
ffff8000008099de:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662 (discriminator 3)
            for(int j=0;j<relsz/relentsz;j++){
ffff8000008099e0:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662 (discriminator 1)
ffff8000008099e4:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff8000008099e7:	48 63 c8             	movsxd rcx,eax
ffff8000008099ea:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008099ee:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008099f3:	48 f7 75 a0          	div    QWORD PTR [rbp-0x60]
ffff8000008099f7:	48 39 c1             	cmp    rcx,rax
ffff8000008099fa:	72 95                	jb     ffff800000809991 <load_elf+0x8bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:665
            }
            relsz=relentsz=relptr=0;
ffff8000008099fc:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
ffff800000809a03:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff800000809a0a:	00 
ffff800000809a0b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000809a0f:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff800000809a13:	eb 01                	jmp    ffff800000809a16 <load_elf+0x940>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661
            if(!(relsz&&relentsz&&relptr))continue;
ffff800000809a15:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809a16:	48 83 45 90 10       	add    QWORD PTR [rbp-0x70],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621 (discriminator 3)
ffff800000809a1b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809a1f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a22:	48 85 c0             	test   rax,rax
ffff800000809a25:	0f 85 62 fd ff ff    	jne    ffff80000080978d <load_elf+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:672
        }
        
    }
    
    //初始化堆
    chunk_header hdrtmp={
ffff800000809a2b:	c7 85 d0 fe ff ff 00 	mov    DWORD PTR [rbp-0x130],0x0
ffff800000809a32:	00 00 00 
ffff800000809a35:	c7 85 d4 fe ff ff 00 	mov    DWORD PTR [rbp-0x12c],0x0
ffff800000809a3c:	00 00 00 
ffff800000809a3f:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
ffff800000809a46:	00 00 00 00 
ffff800000809a4a:	48 c7 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],0x0
ffff800000809a51:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:680
            .pgn=0,
            .prev=NULL
    };
    //空堆
    //分配堆
    off_t lma=pmalloc();
ffff800000809a55:	49 89 df             	mov    r15,rbx
ffff800000809a58:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809a5d:	48 ba ec 50 ee ff ff 	movabs rdx,0xffffffffffee50ec
ffff800000809a64:	ff ff ff 
ffff800000809a67:	48 01 da             	add    rdx,rbx
ffff800000809a6a:	ff d2                	call   rdx
ffff800000809a6c:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:681
    if(lma==-1)
ffff800000809a72:	83 bd 20 ff ff ff ff 	cmp    DWORD PTR [rbp-0xe0],0xffffffff
ffff800000809a79:	75 26                	jne    ffff800000809aa1 <load_elf+0x9cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:683
    {
        current->regs.errcode=-ENOMEM;
ffff800000809a7b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809a82:	ff ff ff 
ffff800000809a85:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809a89:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a8c:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000809a93:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:684
        return -1;
ffff800000809a97:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809a9c:	e9 35 01 00 00       	jmp    ffff800000809bd6 <load_elf+0xb00>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:686
    }
    smmap(lma, HEAP_BASE, PAGE_PRESENT | PAGE_FOR_ALL | PAGE_RWX, current->pml4);
ffff800000809aa1:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809aa8:	ff ff ff 
ffff800000809aab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809aaf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809ab2:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000809ab9:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff800000809abf:	48 98                	cdqe   
ffff800000809ac1:	48 89 d1             	mov    rcx,rdx
ffff800000809ac4:	ba 07 00 00 00       	mov    edx,0x7
ffff800000809ac9:	be 00 00 00 01       	mov    esi,0x1000000
ffff800000809ace:	48 89 c7             	mov    rdi,rax
ffff800000809ad1:	49 89 df             	mov    r15,rbx
ffff800000809ad4:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff800000809adb:	ff ff ff 
ffff800000809ade:	48 01 d8             	add    rax,rbx
ffff800000809ae1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:687
    memset((unsigned char *) HEAP_BASE, 0, CHUNK_SIZE);
ffff800000809ae3:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809ae8:	be 00 00 00 00       	mov    esi,0x0
ffff800000809aed:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000809af2:	49 89 df             	mov    r15,rbx
ffff800000809af5:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000809afc:	ff ff ff 
ffff800000809aff:	48 01 d8             	add    rax,rbx
ffff800000809b02:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:688
    current->mem_struct.heap_base=HEAP_BASE;
ffff800000809b04:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809b0b:	ff ff ff 
ffff800000809b0e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809b12:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b15:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000809b1c:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:689
    current->mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff800000809b1d:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809b24:	ff ff ff 
ffff800000809b27:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809b2b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b2e:	48 c7 40 30 00 10 00 	mov    QWORD PTR [rax+0x30],0x1001000
ffff800000809b35:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:690
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff800000809b36:	48 8d 85 d0 fe ff ff 	lea    rax,[rbp-0x130]
ffff800000809b3d:	ba 18 00 00 00       	mov    edx,0x18
ffff800000809b42:	48 89 c6             	mov    rsi,rax
ffff800000809b45:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000809b4a:	49 89 df             	mov    r15,rbx
ffff800000809b4d:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff800000809b54:	ff ff ff 
ffff800000809b57:	48 01 d8             	add    rax,rbx
ffff800000809b5a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:692
    //设置栈
    current->mem_struct.stack_top=STACK_TOP;
ffff800000809b5c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809b63:	ff ff ff 
ffff800000809b66:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809b6a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b6d:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000809b74:	7f 00 00 
ffff800000809b77:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:693
    off_t entry=0;
ffff800000809b7b:	c7 85 1c ff ff ff 00 	mov    DWORD PTR [rbp-0xe4],0x0
ffff800000809b82:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:694
    entry=ehdr->e_entry;
ffff800000809b85:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809b8c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809b90:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:695
    kmfree(tmpla);
ffff800000809b96:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff800000809b9c:	48 98                	cdqe   
ffff800000809b9e:	48 89 c7             	mov    rdi,rax
ffff800000809ba1:	49 89 df             	mov    r15,rbx
ffff800000809ba4:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff800000809bab:	ff ff ff 
ffff800000809bae:	48 01 d8             	add    rax,rbx
ffff800000809bb1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:696
    kmfree(shla);
ffff800000809bb3:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff800000809bb9:	48 98                	cdqe   
ffff800000809bbb:	48 89 c7             	mov    rdi,rax
ffff800000809bbe:	49 89 df             	mov    r15,rbx
ffff800000809bc1:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff800000809bc8:	ff ff ff 
ffff800000809bcb:	48 01 d8             	add    rax,rbx
ffff800000809bce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:698
    //从系统调用返回
    return entry;
ffff800000809bd0:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:699 (discriminator 1)
}
ffff800000809bd6:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffff800000809bdd:	5b                   	pop    rbx
ffff800000809bde:	41 5f                	pop    r15
ffff800000809be0:	5d                   	pop    rbp
ffff800000809be1:	c3                   	ret    

ffff800000809be2 <get_modid>:
get_modid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:700
id_t get_modid(void){
ffff800000809be2:	f3 0f 1e fa          	endbr64 
ffff800000809be6:	55                   	push   rbp
ffff800000809be7:	48 89 e5             	mov    rbp,rsp
ffff800000809bea:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809bea <get_modid+0x8>
ffff800000809bf1:	49 bb 0e 3f 11 00 00 	movabs r11,0x113f0e
ffff800000809bf8:	00 00 00 
ffff800000809bfb:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:702
    static id_t modid_d=0;
    return modid_d++;
ffff800000809bfe:	48 ba 88 64 af ff ff 	movabs rdx,0xffffffffffaf6488
ffff800000809c05:	ff ff ff 
ffff800000809c08:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff800000809c0b:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000809c0e:	48 be 88 64 af ff ff 	movabs rsi,0xffffffffffaf6488
ffff800000809c15:	ff ff ff 
ffff800000809c18:	89 0c 30             	mov    DWORD PTR [rax+rsi*1],ecx
ffff800000809c1b:	89 d0                	mov    eax,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:703
}
ffff800000809c1d:	5d                   	pop    rbp
ffff800000809c1e:	c3                   	ret    

ffff800000809c1f <dl_runtime_resolve>:
dl_runtime_resolve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:704
void dl_runtime_resolve(){
ffff800000809c1f:	f3 0f 1e fa          	endbr64 
ffff800000809c23:	55                   	push   rbp
ffff800000809c24:	48 89 e5             	mov    rbp,rsp
ffff800000809c27:	41 57                	push   r15
ffff800000809c29:	53                   	push   rbx
ffff800000809c2a:	48 83 ec 30          	sub    rsp,0x30
ffff800000809c2e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809c2e <dl_runtime_resolve+0xf>
ffff800000809c35:	49 bb ca 3e 11 00 00 	movabs r11,0x113eca
ffff800000809c3c:	00 00 00 
ffff800000809c3f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:707
    //获取modid
    unsigned long modid,rel_offset;
    asm volatile("push %%rax\n mov 8(%%rsp),%%rax\n mov %%rax,%0":"=m"(modid));
ffff800000809c42:	50                   	push   rax
ffff800000809c43:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
ffff800000809c48:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:708
    asm volatile("push %%rax\n mov 16(%%rsp),%%rax\n mov %%rax,%0":"=m"(rel_offset));
ffff800000809c4c:	50                   	push   rax
ffff800000809c4d:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
ffff800000809c52:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:709
    Elf64_Rel* rel=rel_offset;
ffff800000809c56:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809c5a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:710
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff800000809c5e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c62:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809c65:	ba 20 00 00 00       	mov    edx,0x20
ffff800000809c6a:	89 d1                	mov    ecx,edx
ffff800000809c6c:	d3 e8                	shr    eax,cl
ffff800000809c6e:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff800000809c71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c75:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809c78:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:711
    off_t sym_off=get_sym_addr(modid,symi);
ffff800000809c7b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809c7e:	48 63 d0             	movsxd rdx,eax
ffff800000809c81:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809c85:	48 89 d6             	mov    rsi,rdx
ffff800000809c88:	48 89 c7             	mov    rdi,rax
ffff800000809c8b:	49 89 df             	mov    r15,rbx
ffff800000809c8e:	48 b8 e2 c2 ee ff ff 	movabs rax,0xffffffffffeec2e2
ffff800000809c95:	ff ff ff 
ffff800000809c98:	48 01 d8             	add    rax,rbx
ffff800000809c9b:	ff d0                	call   rax
ffff800000809c9d:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:714
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff800000809ca0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809ca4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809ca7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:715
    switch (type)
ffff800000809cab:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809cae:	83 e8 03             	sub    eax,0x3
ffff800000809cb1:	83 f8 07             	cmp    eax,0x7
ffff800000809cb4:	0f 87 0a 01 00 00    	ja     ffff800000809dc4 <dl_runtime_resolve+0x1a5>
ffff800000809cba:	89 c0                	mov    eax,eax
ffff800000809cbc:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809cc3:	00 
ffff800000809cc4:	48 8d 05 4d 15 11 00 	lea    rax,[rip+0x11154d]        # ffff80000091b218 <.LC3+0x28>
ffff800000809ccb:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000809ccf:	48 8d 15 42 15 11 00 	lea    rdx,[rip+0x111542]        # ffff80000091b218 <.LC3+0x28>
ffff800000809cd6:	48 01 d0             	add    rax,rdx
ffff800000809cd9:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:719
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff800000809cdc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809ce0:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809ce3:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:720
        break;
ffff800000809ce5:	e9 db 00 00 00       	jmp    ffff800000809dc5 <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:722
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff800000809cea:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809ced:	48 63 d0             	movsxd rdx,eax
ffff800000809cf0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809cf4:	48 89 d6             	mov    rsi,rdx
ffff800000809cf7:	48 89 c7             	mov    rdi,rax
ffff800000809cfa:	49 89 df             	mov    r15,rbx
ffff800000809cfd:	48 b8 f9 c3 ee ff ff 	movabs rax,0xffffffffffeec3f9
ffff800000809d04:	ff ff ff 
ffff800000809d07:	48 01 d8             	add    rax,rbx
ffff800000809d0a:	ff d0                	call   rax
ffff800000809d0c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000809d10:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:723
        break;
ffff800000809d12:	e9 ae 00 00 00       	jmp    ffff800000809dc5 <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:725
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff800000809d17:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809d1b:	48 89 c7             	mov    rdi,rax
ffff800000809d1e:	49 89 df             	mov    r15,rbx
ffff800000809d21:	48 b8 20 c4 ee ff ff 	movabs rax,0xffffffffffeec420
ffff800000809d28:	ff ff ff 
ffff800000809d2b:	48 01 d8             	add    rax,rbx
ffff800000809d2e:	ff d0                	call   rax
ffff800000809d30:	89 c2                	mov    edx,eax
ffff800000809d32:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d36:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809d38:	01 c2                	add    edx,eax
ffff800000809d3a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d3e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:726
        break;
ffff800000809d40:	e9 80 00 00 00       	jmp    ffff800000809dc5 <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:728
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff800000809d45:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809d49:	48 89 c7             	mov    rdi,rax
ffff800000809d4c:	49 89 df             	mov    r15,rbx
ffff800000809d4f:	48 b8 5d c4 ee ff ff 	movabs rax,0xffffffffffeec45d
ffff800000809d56:	ff ff ff 
ffff800000809d59:	48 01 d8             	add    rax,rbx
ffff800000809d5c:	ff d0                	call   rax
ffff800000809d5e:	89 c2                	mov    edx,eax
ffff800000809d60:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809d63:	29 d0                	sub    eax,edx
ffff800000809d65:	89 c1                	mov    ecx,eax
ffff800000809d67:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d6b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809d6d:	8d 14 01             	lea    edx,[rcx+rax*1]
ffff800000809d70:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d74:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:729
        break;
ffff800000809d76:	eb 4d                	jmp    ffff800000809dc5 <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:731
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-rel_offset;
ffff800000809d78:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809d7c:	48 89 c7             	mov    rdi,rax
ffff800000809d7f:	49 89 df             	mov    r15,rbx
ffff800000809d82:	48 b8 5d c4 ee ff ff 	movabs rax,0xffffffffffeec45d
ffff800000809d89:	ff ff ff 
ffff800000809d8c:	48 01 d8             	add    rax,rbx
ffff800000809d8f:	ff d0                	call   rax
ffff800000809d91:	48 98                	cdqe   
ffff800000809d93:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000809d97:	48 29 c8             	sub    rax,rcx
ffff800000809d9a:	48 89 c2             	mov    rdx,rax
ffff800000809d9d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809da1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809da3:	89 c1                	mov    ecx,eax
ffff800000809da5:	89 d0                	mov    eax,edx
ffff800000809da7:	01 c8                	add    eax,ecx
ffff800000809da9:	89 c2                	mov    edx,eax
ffff800000809dab:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809daf:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:732
        break;
ffff800000809db1:	eb 12                	jmp    ffff800000809dc5 <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:735
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff800000809db3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809db7:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809db9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809dbc:	01 c2                	add    edx,eax
ffff800000809dbe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809dc2:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:737
    default:
        break;
ffff800000809dc4:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:741
    }
    //重定位完毕，直接返回到目标地址

    asm volatile("mov %0,%%rax\n mov %%rax,0(%%rsp)"::"m"(*v_rel));
ffff800000809dc5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809dc9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809dcc:	48 89 04 24          	mov    QWORD PTR [rsp],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:742
}
ffff800000809dd0:	90                   	nop
ffff800000809dd1:	48 83 c4 30          	add    rsp,0x30
ffff800000809dd5:	5b                   	pop    rbx
ffff800000809dd6:	41 5f                	pop    r15
ffff800000809dd8:	5d                   	pop    rbp
ffff800000809dd9:	c3                   	ret    

ffff800000809dda <get_sym_addr>:
get_sym_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:743
off_t get_sym_addr(unsigned long modid,unsigned long symi){
ffff800000809dda:	f3 0f 1e fa          	endbr64 
ffff800000809dde:	55                   	push   rbp
ffff800000809ddf:	48 89 e5             	mov    rbp,rsp
ffff800000809de2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809de2 <get_sym_addr+0x8>
ffff800000809de9:	49 bb 16 3d 11 00 00 	movabs r11,0x113d16
ffff800000809df0:	00 00 00 
ffff800000809df3:	4c 01 d8             	add    rax,r11
ffff800000809df6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000809dfa:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:744
    struct Elf64_Sym *sym=modules[modid].p_symbol;
ffff800000809dfe:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809e05:	ff ff ff 
ffff800000809e08:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809e0c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000809e10:	48 c1 e2 05          	shl    rdx,0x5
ffff800000809e14:	48 01 ca             	add    rdx,rcx
ffff800000809e17:	48 83 c2 18          	add    rdx,0x18
ffff800000809e1b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809e1d:	48 63 d2             	movsxd rdx,edx
ffff800000809e20:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:745
    sym+=symi;
ffff800000809e24:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000809e28:	48 89 ca             	mov    rdx,rcx
ffff800000809e2b:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809e2f:	48 01 ca             	add    rdx,rcx
ffff800000809e32:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809e36:	48 01 55 f0          	add    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:751
    if(sym->st_shndx==SHN_COMMON){
        //还没分配空间的符号，需要分配空间，st_value表示地址对齐约束

    }

    off_t symaddr=sym->st_value+modules[modid].load_offset;
ffff800000809e3a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000809e3e:	48 8b 52 04          	mov    rdx,QWORD PTR [rdx+0x4]
ffff800000809e42:	89 d6                	mov    esi,edx
ffff800000809e44:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809e4b:	ff ff ff 
ffff800000809e4e:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809e52:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000809e56:	48 c1 e2 05          	shl    rdx,0x5
ffff800000809e5a:	48 01 ca             	add    rdx,rcx
ffff800000809e5d:	48 83 c2 04          	add    rdx,0x4
ffff800000809e61:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809e63:	01 f2                	add    edx,esi
ffff800000809e65:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:752
    if(modules[modid].type==ET_DYN){
ffff800000809e68:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809e6f:	ff ff ff 
ffff800000809e72:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809e76:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000809e7a:	48 c1 e2 05          	shl    rdx,0x5
ffff800000809e7e:	48 01 ca             	add    rdx,rcx
ffff800000809e81:	48 8b 52 0c          	mov    rdx,QWORD PTR [rdx+0xc]
ffff800000809e85:	48 83 fa 03          	cmp    rdx,0x3
ffff800000809e89:	75 61                	jne    ffff800000809eec <get_sym_addr+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:754
        //还要加上节地址
        Elf64_Ehdr* ehdr=modules[modid].header;
ffff800000809e8b:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809e92:	ff ff ff 
ffff800000809e95:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809e99:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809e9d:	48 c1 e0 05          	shl    rax,0x5
ffff800000809ea1:	48 01 d0             	add    rax,rdx
ffff800000809ea4:	48 83 c0 08          	add    rax,0x8
ffff800000809ea8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809eaa:	48 98                	cdqe   
ffff800000809eac:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:755
        struct Elf64_Shdr* shdr=ehdr->e_shoff;
ffff800000809eb0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809eb4:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000809eb8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:756
        symaddr+=shdr[sym->st_shndx].sh_addr;
ffff800000809ebc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000809ec0:	0f b7 40 12          	movzx  eax,WORD PTR [rax+0x12]
ffff800000809ec4:	0f b7 d0             	movzx  edx,ax
ffff800000809ec7:	48 89 d0             	mov    rax,rdx
ffff800000809eca:	48 01 c0             	add    rax,rax
ffff800000809ecd:	48 01 d0             	add    rax,rdx
ffff800000809ed0:	48 c1 e0 04          	shl    rax,0x4
ffff800000809ed4:	48 89 c2             	mov    rdx,rax
ffff800000809ed7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809edb:	48 01 d0             	add    rax,rdx
ffff800000809ede:	48 8b 40 0c          	mov    rax,QWORD PTR [rax+0xc]
ffff800000809ee2:	89 c2                	mov    edx,eax
ffff800000809ee4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809ee7:	01 d0                	add    eax,edx
ffff800000809ee9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:758
    }
    return symaddr;
ffff800000809eec:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:759
}
ffff800000809eef:	5d                   	pop    rbp
ffff800000809ef0:	c3                   	ret    

ffff800000809ef1 <get_sym_plt>:
get_sym_plt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:760
off_t get_sym_plt(unsigned long modid,unsigned long symi){
ffff800000809ef1:	f3 0f 1e fa          	endbr64 
ffff800000809ef5:	55                   	push   rbp
ffff800000809ef6:	48 89 e5             	mov    rbp,rsp
ffff800000809ef9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809ef9 <get_sym_plt+0x8>
ffff800000809f00:	49 bb ff 3b 11 00 00 	movabs r11,0x113bff
ffff800000809f07:	00 00 00 
ffff800000809f0a:	4c 01 d8             	add    rax,r11
ffff800000809f0d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000809f11:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:762

}
ffff800000809f15:	90                   	nop
ffff800000809f16:	5d                   	pop    rbp
ffff800000809f17:	c3                   	ret    

ffff800000809f18 <get_load_base>:
get_load_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:763
off_t get_load_base(unsigned long modid){
ffff800000809f18:	f3 0f 1e fa          	endbr64 
ffff800000809f1c:	55                   	push   rbp
ffff800000809f1d:	48 89 e5             	mov    rbp,rsp
ffff800000809f20:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809f20 <get_load_base+0x8>
ffff800000809f27:	49 bb d8 3b 11 00 00 	movabs r11,0x113bd8
ffff800000809f2e:	00 00 00 
ffff800000809f31:	4c 01 d8             	add    rax,r11
ffff800000809f34:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:764
    return modules[modid].base;
ffff800000809f38:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809f3f:	ff ff ff 
ffff800000809f42:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809f46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000809f4a:	48 c1 e0 05          	shl    rax,0x5
ffff800000809f4e:	48 01 d0             	add    rax,rdx
ffff800000809f51:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:765
}
ffff800000809f53:	5d                   	pop    rbp
ffff800000809f54:	c3                   	ret    

ffff800000809f55 <get_got>:
get_got():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:766
off_t get_got(unsigned long modid){
ffff800000809f55:	f3 0f 1e fa          	endbr64 
ffff800000809f59:	55                   	push   rbp
ffff800000809f5a:	48 89 e5             	mov    rbp,rsp
ffff800000809f5d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809f5d <get_got+0x8>
ffff800000809f64:	49 bb 9b 3b 11 00 00 	movabs r11,0x113b9b
ffff800000809f6b:	00 00 00 
ffff800000809f6e:	4c 01 d8             	add    rax,r11
ffff800000809f71:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:767
    return modules[modid].p_got;
ffff800000809f75:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809f7c:	ff ff ff 
ffff800000809f7f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809f83:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000809f87:	48 c1 e0 05          	shl    rax,0x5
ffff800000809f8b:	48 01 d0             	add    rax,rdx
ffff800000809f8e:	48 83 c0 1c          	add    rax,0x1c
ffff800000809f92:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:768
}
ffff800000809f94:	5d                   	pop    rbp
ffff800000809f95:	c3                   	ret    

ffff800000809f96 <fill_reloc>:
fill_reloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:770

void fill_reloc(Elf64_Rel* rel,int modid){
ffff800000809f96:	f3 0f 1e fa          	endbr64 
ffff800000809f9a:	55                   	push   rbp
ffff800000809f9b:	48 89 e5             	mov    rbp,rsp
ffff800000809f9e:	41 57                	push   r15
ffff800000809fa0:	53                   	push   rbx
ffff800000809fa1:	48 83 ec 30          	sub    rsp,0x30
ffff800000809fa5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809fa5 <fill_reloc+0xf>
ffff800000809fac:	49 bb 53 3b 11 00 00 	movabs r11,0x113b53
ffff800000809fb3:	00 00 00 
ffff800000809fb6:	4c 01 db             	add    rbx,r11
ffff800000809fb9:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000809fbd:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:771
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff800000809fc0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809fc4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809fc7:	ba 20 00 00 00       	mov    edx,0x20
ffff800000809fcc:	89 d1                	mov    ecx,edx
ffff800000809fce:	d3 e8                	shr    eax,cl
ffff800000809fd0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff800000809fd3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809fd7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809fda:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:772
    off_t sym_off=get_sym_addr(modid,symi);
ffff800000809fdd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809fe0:	48 63 d0             	movsxd rdx,eax
ffff800000809fe3:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809fe6:	48 98                	cdqe   
ffff800000809fe8:	48 89 d6             	mov    rsi,rdx
ffff800000809feb:	48 89 c7             	mov    rdi,rax
ffff800000809fee:	49 89 df             	mov    r15,rbx
ffff800000809ff1:	48 b8 e2 c2 ee ff ff 	movabs rax,0xffffffffffeec2e2
ffff800000809ff8:	ff ff ff 
ffff800000809ffb:	48 01 d8             	add    rax,rbx
ffff800000809ffe:	ff d0                	call   rax
ffff80000080a000:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:775
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff80000080a003:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a007:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a00a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:776
    switch (type)
ffff80000080a00e:	83 7d e8 0b          	cmp    DWORD PTR [rbp-0x18],0xb
ffff80000080a012:	0f 87 37 01 00 00    	ja     ffff80000080a14f <fill_reloc+0x1b9>
ffff80000080a018:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080a01b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a022:	00 
ffff80000080a023:	48 8d 05 2e 12 11 00 	lea    rax,[rip+0x11122e]        # ffff80000091b258 <.LC3+0x68>
ffff80000080a02a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080a02e:	48 8d 15 23 12 11 00 	lea    rdx,[rip+0x111223]        # ffff80000091b258 <.LC3+0x68>
ffff80000080a035:	48 01 d0             	add    rax,rdx
ffff80000080a038:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:780
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff80000080a03b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a03f:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080a042:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:781
        break;
ffff80000080a044:	e9 07 01 00 00       	jmp    ffff80000080a150 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:783
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff80000080a049:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a04c:	48 63 d0             	movsxd rdx,eax
ffff80000080a04f:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a052:	48 98                	cdqe   
ffff80000080a054:	48 89 d6             	mov    rsi,rdx
ffff80000080a057:	48 89 c7             	mov    rdi,rax
ffff80000080a05a:	49 89 df             	mov    r15,rbx
ffff80000080a05d:	48 b8 f9 c3 ee ff ff 	movabs rax,0xffffffffffeec3f9
ffff80000080a064:	ff ff ff 
ffff80000080a067:	48 01 d8             	add    rax,rbx
ffff80000080a06a:	ff d0                	call   rax
ffff80000080a06c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a070:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:784
        break;
ffff80000080a072:	e9 d9 00 00 00       	jmp    ffff80000080a150 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:786
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff80000080a077:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a07a:	48 98                	cdqe   
ffff80000080a07c:	48 89 c7             	mov    rdi,rax
ffff80000080a07f:	49 89 df             	mov    r15,rbx
ffff80000080a082:	48 b8 20 c4 ee ff ff 	movabs rax,0xffffffffffeec420
ffff80000080a089:	ff ff ff 
ffff80000080a08c:	48 01 d8             	add    rax,rbx
ffff80000080a08f:	ff d0                	call   rax
ffff80000080a091:	89 c2                	mov    edx,eax
ffff80000080a093:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a097:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a099:	01 c2                	add    edx,eax
ffff80000080a09b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a09f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:787
        break;
ffff80000080a0a1:	e9 aa 00 00 00       	jmp    ffff80000080a150 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:789
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff80000080a0a6:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a0a9:	48 98                	cdqe   
ffff80000080a0ab:	48 89 c7             	mov    rdi,rax
ffff80000080a0ae:	49 89 df             	mov    r15,rbx
ffff80000080a0b1:	48 b8 5d c4 ee ff ff 	movabs rax,0xffffffffffeec45d
ffff80000080a0b8:	ff ff ff 
ffff80000080a0bb:	48 01 d8             	add    rax,rbx
ffff80000080a0be:	ff d0                	call   rax
ffff80000080a0c0:	89 c2                	mov    edx,eax
ffff80000080a0c2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a0c5:	29 d0                	sub    eax,edx
ffff80000080a0c7:	89 c1                	mov    ecx,eax
ffff80000080a0c9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a0cd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a0cf:	8d 14 01             	lea    edx,[rcx+rax*1]
ffff80000080a0d2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a0d6:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:790
        break;
ffff80000080a0d8:	eb 76                	jmp    ffff80000080a150 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:792
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-(off_t)rel;
ffff80000080a0da:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a0dd:	48 98                	cdqe   
ffff80000080a0df:	48 89 c7             	mov    rdi,rax
ffff80000080a0e2:	49 89 df             	mov    r15,rbx
ffff80000080a0e5:	48 b8 5d c4 ee ff ff 	movabs rax,0xffffffffffeec45d
ffff80000080a0ec:	ff ff ff 
ffff80000080a0ef:	48 01 d8             	add    rax,rbx
ffff80000080a0f2:	ff d0                	call   rax
ffff80000080a0f4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080a0f8:	89 d1                	mov    ecx,edx
ffff80000080a0fa:	29 c8                	sub    eax,ecx
ffff80000080a0fc:	89 c2                	mov    edx,eax
ffff80000080a0fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a102:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a104:	01 c2                	add    edx,eax
ffff80000080a106:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a10a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:793
        break;
ffff80000080a10c:	eb 42                	jmp    ffff80000080a150 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:796
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff80000080a10e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a112:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a114:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a117:	01 c2                	add    edx,eax
ffff80000080a119:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a11d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:797
        break;
ffff80000080a11f:	eb 2f                	jmp    ffff80000080a150 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:800
    case R_X86_64_32S:
    case R_X86_64_64:
        *v_rel+=sym_off;
ffff80000080a121:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a125:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a127:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a12a:	01 c2                	add    edx,eax
ffff80000080a12c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a130:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:801
        break;
ffff80000080a132:	eb 1c                	jmp    ffff80000080a150 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:803
    case R_X86_64_PC32:
        *v_rel+=sym_off-(off_t)rel;
ffff80000080a134:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a138:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a13a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a13e:	89 c1                	mov    ecx,eax
ffff80000080a140:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a143:	29 c8                	sub    eax,ecx
ffff80000080a145:	01 c2                	add    edx,eax
ffff80000080a147:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a14b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:804
        break;
ffff80000080a14d:	eb 01                	jmp    ffff80000080a150 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:806
    default:
        break;
ffff80000080a14f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:808
    }
ffff80000080a150:	90                   	nop
ffff80000080a151:	48 83 c4 30          	add    rsp,0x30
ffff80000080a155:	5b                   	pop    rbx
ffff80000080a156:	41 5f                	pop    r15
ffff80000080a158:	5d                   	pop    rbp
ffff80000080a159:	c3                   	ret    
ffff80000080a15a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffff80000080a160 <_syscall>:
_syscall():
ffff80000080a160:	55                   	push   rbp
ffff80000080a161:	48 bd 00 80 10 00 00 	movabs rbp,0xffff800000108000
ffff80000080a168:	80 ff ff 
ffff80000080a16b:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
ffff80000080a16f:	48 8b 65 24          	mov    rsp,QWORD PTR [rbp+0x24]
ffff80000080a173:	6a 2b                	push   0x2b
ffff80000080a175:	54                   	push   rsp
ffff80000080a176:	9c                   	pushf  
ffff80000080a177:	6a 33                	push   0x33
ffff80000080a179:	51                   	push   rcx
ffff80000080a17a:	50                   	push   rax
ffff80000080a17b:	53                   	push   rbx
ffff80000080a17c:	51                   	push   rcx
ffff80000080a17d:	52                   	push   rdx
ffff80000080a17e:	57                   	push   rdi
ffff80000080a17f:	56                   	push   rsi
ffff80000080a180:	41 50                	push   r8
ffff80000080a182:	41 51                	push   r9
ffff80000080a184:	41 52                	push   r10
ffff80000080a186:	41 53                	push   r11
ffff80000080a188:	41 54                	push   r12
ffff80000080a18a:	41 55                	push   r13
ffff80000080a18c:	41 56                	push   r14
ffff80000080a18e:	41 57                	push   r15
ffff80000080a190:	66 8c c0             	mov    ax,es
ffff80000080a193:	50                   	push   rax
ffff80000080a194:	66 8c d8             	mov    ax,ds
ffff80000080a197:	50                   	push   rax
ffff80000080a198:	66 b8 10 00          	mov    ax,0x10
ffff80000080a19c:	8e c0                	mov    es,eax
ffff80000080a19e:	8e d8                	mov    ds,eax
ffff80000080a1a0:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
ffff80000080a1a5:	41 53                	push   r11
ffff80000080a1a7:	51                   	push   rcx
ffff80000080a1a8:	49 87 ca             	xchg   r10,rcx
ffff80000080a1ab:	57                   	push   rdi
ffff80000080a1ac:	48 bf e8 02 40 00 00 	movabs rdi,0xffff8000004002e8
ffff80000080a1b3:	80 ff ff 
ffff80000080a1b6:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
ffff80000080a1b9:	4c 89 97 6c 02 00 00 	mov    QWORD PTR [rdi+0x26c],r10
ffff80000080a1c0:	5f                   	pop    rdi
ffff80000080a1c1:	e8 5b 69 ff ff       	call   ffff800000800b21 <syscall>

ffff80000080a1c6 <_syscall_sysret>:
_syscall_sysret():
ffff80000080a1c6:	4c 87 d1             	xchg   rcx,r10
ffff80000080a1c9:	59                   	pop    rcx
ffff80000080a1ca:	41 5b                	pop    r11
ffff80000080a1cc:	58                   	pop    rax
ffff80000080a1cd:	8e d8                	mov    ds,eax
ffff80000080a1cf:	58                   	pop    rax
ffff80000080a1d0:	8e c0                	mov    es,eax
ffff80000080a1d2:	41 5f                	pop    r15
ffff80000080a1d4:	41 5e                	pop    r14
ffff80000080a1d6:	41 5d                	pop    r13
ffff80000080a1d8:	41 5c                	pop    r12
ffff80000080a1da:	41 5b                	pop    r11
ffff80000080a1dc:	41 5a                	pop    r10
ffff80000080a1de:	41 59                	pop    r9
ffff80000080a1e0:	41 58                	pop    r8
ffff80000080a1e2:	5e                   	pop    rsi
ffff80000080a1e3:	5f                   	pop    rdi
ffff80000080a1e4:	5a                   	pop    rdx
ffff80000080a1e5:	59                   	pop    rcx
ffff80000080a1e6:	5b                   	pop    rbx
ffff80000080a1e7:	48 83 c4 08          	add    rsp,0x8
ffff80000080a1eb:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
ffff80000080a1ef:	5d                   	pop    rbp
ffff80000080a1f0:	fb                   	sti    
ffff80000080a1f1:	48 0f 07             	sysretq 

ffff80000080a1f4 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:27
static u32 font_width_bytes;
static u8 *glyph_table;
static u32 bytes_per_glyph, glyph_nr;
int font_size=1;
void init_framebuffer()
{
ffff80000080a1f4:	f3 0f 1e fa          	endbr64 
ffff80000080a1f8:	55                   	push   rbp
ffff80000080a1f9:	48 89 e5             	mov    rbp,rsp
ffff80000080a1fc:	41 57                	push   r15
ffff80000080a1fe:	53                   	push   rbx
ffff80000080a1ff:	48 83 ec 50          	sub    rsp,0x50
ffff80000080a203:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a203 <init_framebuffer+0xf>
ffff80000080a20a:	49 bb f5 38 11 00 00 	movabs r11,0x1138f5
ffff80000080a211:	00 00 00 
ffff80000080a214:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
ffff80000080a217:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a21e:	ff ff ff 
ffff80000080a221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a225:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a228:	89 c0                	mov    eax,eax
ffff80000080a22a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:30
    size_t h=framebuffer.common.framebuffer_height;
ffff80000080a22e:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a235:	ff ff ff 
ffff80000080a238:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a23c:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a23f:	89 c0                	mov    eax,eax
ffff80000080a241:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
ffff80000080a245:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a24c:	ff ff ff 
ffff80000080a24f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a253:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080a257:	c0 e8 03             	shr    al,0x3
ffff80000080a25a:	0f b6 c0             	movzx  eax,al
ffff80000080a25d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t inter=framebuffer.common.framebuffer_pitch;
ffff80000080a261:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a268:	ff ff ff 
ffff80000080a26b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a26f:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a272:	89 c0                	mov    eax,eax
ffff80000080a274:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t pc=w*h;
ffff80000080a278:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a27c:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
ffff80000080a281:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t size=h*inter;
ffff80000080a285:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a289:	48 0f af 45 b8       	imul   rax,QWORD PTR [rbp-0x48]
ffff80000080a28e:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    int pgc=size/PAGE_SIZE;
ffff80000080a292:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a296:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080a29a:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    addr_t p=FRAMEBUFFER_ADDR;
ffff80000080a29d:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a2a4:	80 ff ff 
ffff80000080a2a7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    addr_t pp=framebuffer.common.framebuffer_addr;
ffff80000080a2ab:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a2b2:	ff ff ff 
ffff80000080a2b5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a2b9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080a2bd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    for (size_t i = 0; i < pgc; i++)
ffff80000080a2c1:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080a2c8:	00 
ffff80000080a2c9:	eb 44                	jmp    ffff80000080a30f <init_framebuffer+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
ffff80000080a2cb:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080a2cf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a2d3:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
ffff80000080a2da:	80 ff ff 
ffff80000080a2dd:	48 89 d1             	mov    rcx,rdx
ffff80000080a2e0:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080a2e5:	48 89 c7             	mov    rdi,rax
ffff80000080a2e8:	49 89 df             	mov    r15,rbx
ffff80000080a2eb:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff80000080a2f2:	ff ff ff 
ffff80000080a2f5:	48 01 d8             	add    rax,rbx
ffff80000080a2f8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:41 (discriminator 3)
        pp+=PAGE_SIZE;
ffff80000080a2fa:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080a301:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
        p+=PAGE_SIZE;
ffff80000080a302:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffff80000080a309:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
ffff80000080a30a:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 1)
ffff80000080a30f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080a312:	48 98                	cdqe   
ffff80000080a314:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080a318:	72 b1                	jb     ffff80000080a2cb <init_framebuffer+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:46
    }
    
    
}
ffff80000080a31a:	90                   	nop
ffff80000080a31b:	90                   	nop
ffff80000080a31c:	48 83 c4 50          	add    rsp,0x50
ffff80000080a320:	5b                   	pop    rbx
ffff80000080a321:	41 5f                	pop    r15
ffff80000080a323:	5d                   	pop    rbp
ffff80000080a324:	c3                   	ret    

ffff80000080a325 <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
void init_font(){
ffff80000080a325:	f3 0f 1e fa          	endbr64 
ffff80000080a329:	55                   	push   rbp
ffff80000080a32a:	48 89 e5             	mov    rbp,rsp
ffff80000080a32d:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080a32d <init_font+0x8>
ffff80000080a334:	49 bb cb 37 11 00 00 	movabs r11,0x1137cb
ffff80000080a33b:	00 00 00 
ffff80000080a33e:	4c 01 d9             	add    rcx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
ffff80000080a341:	48 b8 e8 64 af ff ff 	movabs rax,0xffffffffffaf64e8
ffff80000080a348:	ff ff ff 
ffff80000080a34b:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff80000080a352:	ff ff ff 
ffff80000080a355:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff80000080a359:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:50

    font_width_bytes = (boot_font->width + 7) / 8;
ffff80000080a35d:	48 b8 e8 64 af ff ff 	movabs rax,0xffffffffffaf64e8
ffff80000080a364:	ff ff ff 
ffff80000080a367:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a36b:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080a36e:	83 c0 07             	add    eax,0x7
ffff80000080a371:	c1 e8 03             	shr    eax,0x3
ffff80000080a374:	89 c2                	mov    edx,eax
ffff80000080a376:	48 b8 f8 64 af ff ff 	movabs rax,0xffffffffffaf64f8
ffff80000080a37d:	ff ff ff 
ffff80000080a380:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51
    font_width = font_width_bytes * 8;
ffff80000080a383:	48 b8 f8 64 af ff ff 	movabs rax,0xffffffffffaf64f8
ffff80000080a38a:	ff ff ff 
ffff80000080a38d:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080a390:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff80000080a397:	48 b8 f0 64 af ff ff 	movabs rax,0xffffffffffaf64f0
ffff80000080a39e:	ff ff ff 
ffff80000080a3a1:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_height = boot_font->height;
ffff80000080a3a4:	48 b8 e8 64 af ff ff 	movabs rax,0xffffffffffaf64e8
ffff80000080a3ab:	ff ff ff 
ffff80000080a3ae:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a3b2:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a3b5:	48 ba f4 64 af ff ff 	movabs rdx,0xffffffffffaf64f4
ffff80000080a3bc:	ff ff ff 
ffff80000080a3bf:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:54

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
ffff80000080a3c2:	48 b8 e8 64 af ff ff 	movabs rax,0xffffffffffaf64e8
ffff80000080a3c9:	ff ff ff 
ffff80000080a3cc:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a3d0:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a3d3:	89 c2                	mov    edx,eax
ffff80000080a3d5:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff80000080a3dc:	ff ff ff 
ffff80000080a3df:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a3e3:	48 01 c2             	add    rdx,rax
ffff80000080a3e6:	48 b8 00 65 af ff ff 	movabs rax,0xffffffffffaf6500
ffff80000080a3ed:	ff ff ff 
ffff80000080a3f0:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55
    glyph_nr = boot_font->glyph_nr;
ffff80000080a3f4:	48 b8 e8 64 af ff ff 	movabs rax,0xffffffffffaf64e8
ffff80000080a3fb:	ff ff ff 
ffff80000080a3fe:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a402:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a405:	48 ba 0c 65 af ff ff 	movabs rdx,0xffffffffffaf650c
ffff80000080a40c:	ff ff ff 
ffff80000080a40f:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    bytes_per_glyph = boot_font->bytes_per_glyph;
ffff80000080a412:	48 b8 e8 64 af ff ff 	movabs rax,0xffffffffffaf64e8
ffff80000080a419:	ff ff ff 
ffff80000080a41c:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a420:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a423:	48 ba 08 65 af ff ff 	movabs rdx,0xffffffffffaf6508
ffff80000080a42a:	ff ff ff 
ffff80000080a42d:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:58

    fb_cursor_x = fb_cursor_y = 0;
ffff80000080a430:	48 b8 d8 64 af ff ff 	movabs rax,0xffffffffffaf64d8
ffff80000080a437:	ff ff ff 
ffff80000080a43a:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
ffff80000080a441:	48 b8 d8 64 af ff ff 	movabs rax,0xffffffffffaf64d8
ffff80000080a448:	ff ff ff 
ffff80000080a44b:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080a44e:	48 ba d4 64 af ff ff 	movabs rdx,0xffffffffffaf64d4
ffff80000080a455:	ff ff ff 
ffff80000080a458:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
ffff80000080a45b:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a462:	ff ff ff 
ffff80000080a465:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a469:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a46c:	48 ba f0 64 af ff ff 	movabs rdx,0xffffffffffaf64f0
ffff80000080a473:	ff ff ff 
ffff80000080a476:	8b 34 11             	mov    esi,DWORD PTR [rcx+rdx*1]
ffff80000080a479:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a47e:	f7 f6                	div    esi
ffff80000080a480:	89 c2                	mov    edx,eax
ffff80000080a482:	48 b8 dc 64 af ff ff 	movabs rax,0xffffffffffaf64dc
ffff80000080a489:	ff ff ff 
ffff80000080a48c:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
ffff80000080a48f:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a496:	ff ff ff 
ffff80000080a499:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a49d:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a4a0:	48 ba f4 64 af ff ff 	movabs rdx,0xffffffffffaf64f4
ffff80000080a4a7:	ff ff ff 
ffff80000080a4aa:	8b 3c 11             	mov    edi,DWORD PTR [rcx+rdx*1]
ffff80000080a4ad:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a4b2:	f7 f7                	div    edi
ffff80000080a4b4:	89 c2                	mov    edx,eax
ffff80000080a4b6:	48 b8 e0 64 af ff ff 	movabs rax,0xffffffffffaf64e0
ffff80000080a4bd:	ff ff ff 
ffff80000080a4c0:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    font_size=1;
ffff80000080a4c3:	48 b8 38 fe ff ff ff 	movabs rax,0xfffffffffffffe38
ffff80000080a4ca:	ff ff ff 
ffff80000080a4cd:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a4d1:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
}
ffff80000080a4d7:	90                   	nop
ffff80000080a4d8:	5d                   	pop    rbp
ffff80000080a4d9:	c3                   	ret    

ffff80000080a4da <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
ffff80000080a4da:	f3 0f 1e fa          	endbr64 
ffff80000080a4de:	55                   	push   rbp
ffff80000080a4df:	48 89 e5             	mov    rbp,rsp
ffff80000080a4e2:	53                   	push   rbx
ffff80000080a4e3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a4e3 <set_framebuffer+0x9>
ffff80000080a4ea:	49 bb 15 36 11 00 00 	movabs r11,0x113615
ffff80000080a4f1:	00 00 00 
ffff80000080a4f4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:65
    framebuffer=tag;
ffff80000080a4f7:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a4fe:	ff ff ff 
ffff80000080a501:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a505:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff80000080a509:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
ffff80000080a50d:	48 89 08             	mov    QWORD PTR [rax],rcx
ffff80000080a510:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
ffff80000080a514:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff80000080a518:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
ffff80000080a51c:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffff80000080a520:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffff80000080a524:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff80000080a528:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
}
ffff80000080a52c:	90                   	nop
ffff80000080a52d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080a531:	c9                   	leave  
ffff80000080a532:	c3                   	ret    

ffff80000080a533 <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68

void fill_rect(int x,int y,int w,int h,unsigned int color){
ffff80000080a533:	f3 0f 1e fa          	endbr64 
ffff80000080a537:	55                   	push   rbp
ffff80000080a538:	48 89 e5             	mov    rbp,rsp
ffff80000080a53b:	4c 8d 0d f9 ff ff ff 	lea    r9,[rip+0xfffffffffffffff9]        # ffff80000080a53b <fill_rect+0x8>
ffff80000080a542:	49 bb bd 35 11 00 00 	movabs r11,0x1135bd
ffff80000080a549:	00 00 00 
ffff80000080a54c:	4d 01 d9             	add    r9,r11
ffff80000080a54f:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080a552:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080a555:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080a558:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff80000080a55b:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
ffff80000080a55f:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a566:	80 ff ff 
ffff80000080a569:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
ffff80000080a56d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a570:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffff80000080a573:	e9 82 00 00 00       	jmp    ffff80000080a5fa <fill_rect+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72
        for(int px=y;px<w+y;px++){
ffff80000080a578:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a57b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffff80000080a57e:	eb 69                	jmp    ffff80000080a5e9 <fill_rect+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a580:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a587:	ff ff ff 
ffff80000080a58a:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080a58e:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff80000080a591:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080a594:	0f af c2             	imul   eax,edx
ffff80000080a597:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:74 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080a599:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a5a0:	ff ff ff 
ffff80000080a5a3:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080a5a7:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080a5ab:	0f b6 c0             	movzx  eax,al
ffff80000080a5ae:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
ffff80000080a5b2:	8d 50 07             	lea    edx,[rax+0x7]
ffff80000080a5b5:	85 c0                	test   eax,eax
ffff80000080a5b7:	0f 48 c2             	cmovs  eax,edx
ffff80000080a5ba:	c1 f8 03             	sar    eax,0x3
ffff80000080a5bd:	48 98                	cdqe   
ffff80000080a5bf:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a5c3:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a5ca:	80 ff ff 
ffff80000080a5cd:	48 01 d0             	add    rax,rdx
ffff80000080a5d0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 3)
            fb=(unsigned int*)ptr;
ffff80000080a5d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a5d8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
            *fb=color;
ffff80000080a5dc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080a5e0:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080a5e3:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 3)
        for(int px=y;px<w+y;px++){
ffff80000080a5e5:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 1)
ffff80000080a5e9:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a5ec:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a5ef:	01 d0                	add    eax,edx
ffff80000080a5f1:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
ffff80000080a5f4:	7c 8a                	jl     ffff80000080a580 <fill_rect+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 2)
    for(int py=x;py<h+x;py++){
ffff80000080a5f6:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 1)
ffff80000080a5fa:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080a5fd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a600:	01 d0                	add    eax,edx
ffff80000080a602:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffff80000080a605:	0f 8c 6d ff ff ff    	jl     ffff80000080a578 <fill_rect+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79
        }
    }
}
ffff80000080a60b:	90                   	nop
ffff80000080a60c:	90                   	nop
ffff80000080a60d:	5d                   	pop    rbp
ffff80000080a60e:	c3                   	ret    

ffff80000080a60f <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:82
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
ffff80000080a60f:	f3 0f 1e fa          	endbr64 
ffff80000080a613:	55                   	push   rbp
ffff80000080a614:	48 89 e5             	mov    rbp,rsp
ffff80000080a617:	41 57                	push   r15
ffff80000080a619:	53                   	push   rbx
ffff80000080a61a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a61e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a61e <draw_text+0xf>
ffff80000080a625:	49 bb da 34 11 00 00 	movabs r11,0x1134da
ffff80000080a62c:	00 00 00 
ffff80000080a62f:	4c 01 db             	add    rbx,r11
ffff80000080a632:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080a635:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080a638:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080a63b:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
    int tx=x;
ffff80000080a63f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a642:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080a645:	eb 75                	jmp    ffff80000080a6bc <draw_text+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
    {
        if(*str=='\n')
ffff80000080a647:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a64b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a64e:	3c 0a                	cmp    al,0xa
ffff80000080a650:	75 23                	jne    ffff80000080a675 <draw_text+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
        {
            y+=font_height*size;
ffff80000080a652:	48 b8 f4 64 af ff ff 	movabs rax,0xffffffffffaf64f4
ffff80000080a659:	ff ff ff 
ffff80000080a65c:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080a65f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080a662:	0f af d0             	imul   edx,eax
ffff80000080a665:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a668:	01 d0                	add    eax,edx
ffff80000080a66a:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:89
            tx=x;
ffff80000080a66d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a670:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080a673:	eb 42                	jmp    ffff80000080a6b7 <draw_text+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
        }
        else
        {
            draw_letter(tx,y,size,*str);
ffff80000080a675:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a679:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a67c:	0f be c8             	movsx  ecx,al
ffff80000080a67f:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a682:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
ffff80000080a685:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a688:	89 c7                	mov    edi,eax
ffff80000080a68a:	49 89 df             	mov    r15,rbx
ffff80000080a68d:	48 b8 da cb ee ff ff 	movabs rax,0xffffffffffeecbda
ffff80000080a694:	ff ff ff 
ffff80000080a697:	48 01 d8             	add    rax,rbx
ffff80000080a69a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:94
            tx+=size*font_width;
ffff80000080a69c:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a69f:	48 b8 f0 64 af ff ff 	movabs rax,0xffffffffffaf64f0
ffff80000080a6a6:	ff ff ff 
ffff80000080a6a9:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080a6ac:	0f af d0             	imul   edx,eax
ffff80000080a6af:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a6b2:	01 d0                	add    eax,edx
ffff80000080a6b4:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:96
        }
        str++;
ffff80000080a6b7:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080a6bc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a6c0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a6c3:	84 c0                	test   al,al
ffff80000080a6c5:	75 80                	jne    ffff80000080a647 <draw_text+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
    }
}
ffff80000080a6c7:	90                   	nop
ffff80000080a6c8:	90                   	nop
ffff80000080a6c9:	48 83 c4 30          	add    rsp,0x30
ffff80000080a6cd:	5b                   	pop    rbx
ffff80000080a6ce:	41 5f                	pop    r15
ffff80000080a6d0:	5d                   	pop    rbp
ffff80000080a6d1:	c3                   	ret    

ffff80000080a6d2 <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:99
void draw_letter(int x, volatile int y, int size, char c) {
ffff80000080a6d2:	f3 0f 1e fa          	endbr64 
ffff80000080a6d6:	55                   	push   rbp
ffff80000080a6d7:	48 89 e5             	mov    rbp,rsp
ffff80000080a6da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a6da <draw_letter+0x8>
ffff80000080a6e1:	49 bb 1e 34 11 00 00 	movabs r11,0x11341e
ffff80000080a6e8:	00 00 00 
ffff80000080a6eb:	4c 01 d8             	add    rax,r11
ffff80000080a6ee:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080a6f1:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
ffff80000080a6f4:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
ffff80000080a6f7:	89 ca                	mov    edx,ecx
ffff80000080a6f9:	88 55 c0             	mov    BYTE PTR [rbp-0x40],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
    u8 *glyph = glyph_table;
ffff80000080a6fc:	48 ba 00 65 af ff ff 	movabs rdx,0xffffffffffaf6500
ffff80000080a703:	ff ff ff 
ffff80000080a706:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a70a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:101
    if (c < glyph_nr) {
ffff80000080a70e:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080a712:	48 ba 0c 65 af ff ff 	movabs rdx,0xffffffffffaf650c
ffff80000080a719:	ff ff ff 
ffff80000080a71c:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a71f:	39 d1                	cmp    ecx,edx
ffff80000080a721:	73 1a                	jae    ffff80000080a73d <draw_letter+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
        glyph += c * bytes_per_glyph;
ffff80000080a723:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080a727:	48 ba 08 65 af ff ff 	movabs rdx,0xffffffffffaf6508
ffff80000080a72e:	ff ff ff 
ffff80000080a731:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a734:	0f af d1             	imul   edx,ecx
ffff80000080a737:	89 d2                	mov    edx,edx
ffff80000080a739:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080a73d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080a744:	e9 f8 00 00 00       	jmp    ffff80000080a841 <draw_letter+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        u8 mask = 1 << 7;
ffff80000080a749:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080a74d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080a754:	e9 bb 00 00 00       	jmp    ffff80000080a814 <draw_letter+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
            int px=x+ch_x*size;
ffff80000080a759:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080a75c:	89 d1                	mov    ecx,edx
ffff80000080a75e:	0f af 4d ec          	imul   ecx,DWORD PTR [rbp-0x14]
ffff80000080a762:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080a765:	01 ca                	add    edx,ecx
ffff80000080a767:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
            int py=y+ch_y*size;
ffff80000080a76a:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080a76d:	89 d1                	mov    ecx,edx
ffff80000080a76f:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
ffff80000080a773:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff80000080a776:	01 ca                	add    edx,ecx
ffff80000080a778:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a77b:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a782:	ff ff ff 
ffff80000080a785:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a789:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a78c:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080a78f:	0f af d1             	imul   edx,ecx
ffff80000080a792:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112
                     +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080a794:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a79b:	ff ff ff 
ffff80000080a79e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a7a2:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080a7a6:	0f b6 d2             	movzx  edx,dl
ffff80000080a7a9:	0f af 55 e8          	imul   edx,DWORD PTR [rbp-0x18]
ffff80000080a7ad:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080a7b0:	85 d2                	test   edx,edx
ffff80000080a7b2:	0f 48 d1             	cmovs  edx,ecx
ffff80000080a7b5:	c1 fa 03             	sar    edx,0x3
ffff80000080a7b8:	48 63 d2             	movsxd rdx,edx
ffff80000080a7bb:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080a7bf:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080a7c6:	80 ff ff 
ffff80000080a7c9:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a7cc:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            if ((*(glyph + ch_x / 8) & mask) != 0) {
ffff80000080a7d0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080a7d3:	c1 ea 03             	shr    edx,0x3
ffff80000080a7d6:	89 d1                	mov    ecx,edx
ffff80000080a7d8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a7dc:	48 01 ca             	add    rdx,rcx
ffff80000080a7df:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080a7e2:	22 55 f3             	and    dl,BYTE PTR [rbp-0xd]
ffff80000080a7e5:	84 d2                	test   dl,dl
ffff80000080a7e7:	74 0c                	je     ffff80000080a7f5 <draw_letter+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
                *ptr=-1;
ffff80000080a7e9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a7ed:	c7 02 ff ff ff ff    	mov    DWORD PTR [rdx],0xffffffff
ffff80000080a7f3:	eb 0a                	jmp    ffff80000080a7ff <draw_letter+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
            } else {
                *ptr=0;
ffff80000080a7f5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a7f9:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:119
            }

            mask >>= 1;
ffff80000080a7ff:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            if (ch_x % 8 == 0) {
ffff80000080a802:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080a805:	83 e2 07             	and    edx,0x7
ffff80000080a808:	85 d2                	test   edx,edx
ffff80000080a80a:	75 04                	jne    ffff80000080a810 <draw_letter+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:121
                mask = 1 << 7;
ffff80000080a80c:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080a810:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 1)
ffff80000080a814:	48 ba f0 64 af ff ff 	movabs rdx,0xffffffffffaf64f0
ffff80000080a81b:	ff ff ff 
ffff80000080a81e:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a821:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080a824:	0f 82 2f ff ff ff    	jb     ffff80000080a759 <draw_letter+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
ffff80000080a82a:	48 ba f8 64 af ff ff 	movabs rdx,0xffffffffffaf64f8
ffff80000080a831:	ff ff ff 
ffff80000080a834:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a837:	89 d2                	mov    edx,edx
ffff80000080a839:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080a83d:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 1)
ffff80000080a841:	48 ba f4 64 af ff ff 	movabs rdx,0xffffffffffaf64f4
ffff80000080a848:	ff ff ff 
ffff80000080a84b:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a84e:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080a851:	0f 82 f2 fe ff ff    	jb     ffff80000080a749 <draw_letter+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:127
    }
}
ffff80000080a857:	90                   	nop
ffff80000080a858:	90                   	nop
ffff80000080a859:	5d                   	pop    rbp
ffff80000080a85a:	c3                   	ret    

ffff80000080a85b <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129
//向上滚动一个像素
void scr_up(){
ffff80000080a85b:	f3 0f 1e fa          	endbr64 
ffff80000080a85f:	55                   	push   rbp
ffff80000080a860:	48 89 e5             	mov    rbp,rsp
ffff80000080a863:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a863 <scr_up+0x8>
ffff80000080a86a:	49 bb 95 32 11 00 00 	movabs r11,0x113295
ffff80000080a871:	00 00 00 
ffff80000080a874:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080a877:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080a87e:	e9 ad 00 00 00       	jmp    ffff80000080a930 <scr_up+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080a883:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080a88a:	e9 81 00 00 00       	jmp    ffff80000080a910 <scr_up+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
                    dy*framebuffer.common.framebuffer_pitch
ffff80000080a88f:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a896:	ff ff ff 
ffff80000080a899:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a89d:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a8a0:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a8a3:	0f af d1             	imul   edx,ecx
ffff80000080a8a6:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134 (discriminator 3)
                    +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080a8a8:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a8af:	ff ff ff 
ffff80000080a8b2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a8b6:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080a8ba:	0f b6 d2             	movzx  edx,dl
ffff80000080a8bd:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080a8c1:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080a8c4:	85 d2                	test   edx,edx
ffff80000080a8c6:	0f 48 d1             	cmovs  edx,ecx
ffff80000080a8c9:	c1 fa 03             	sar    edx,0x3
ffff80000080a8cc:	48 63 d2             	movsxd rdx,edx
ffff80000080a8cf:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080a8d3:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080a8da:	80 ff ff 
ffff80000080a8dd:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:132 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
ffff80000080a8e0:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135 (discriminator 3)
            *p=*(p+framebuffer.common.framebuffer_pitch);
ffff80000080a8e4:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a8eb:	ff ff ff 
ffff80000080a8ee:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a8f2:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080a8f5:	89 d1                	mov    ecx,edx
ffff80000080a8f7:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a8fb:	48 01 ca             	add    rdx,rcx
ffff80000080a8fe:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080a901:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a905:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136 (discriminator 3)
            p++;
ffff80000080a907:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 3)
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080a90c:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 1)
ffff80000080a910:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a917:	ff ff ff 
ffff80000080a91a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a91e:	8b 4a 14             	mov    ecx,DWORD PTR [rdx+0x14]
ffff80000080a921:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080a924:	39 d1                	cmp    ecx,edx
ffff80000080a926:	0f 87 63 ff ff ff    	ja     ffff80000080a88f <scr_up+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 2)
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080a92c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 1)
ffff80000080a930:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a937:	ff ff ff 
ffff80000080a93a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a93e:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080a941:	8d 4a ff             	lea    ecx,[rdx-0x1]
ffff80000080a944:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a947:	39 d1                	cmp    ecx,edx
ffff80000080a949:	0f 87 34 ff ff ff    	ja     ffff80000080a883 <scr_up+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:142
        }

    }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
ffff80000080a94f:	90                   	nop
ffff80000080a950:	90                   	nop
ffff80000080a951:	5d                   	pop    rbp
ffff80000080a952:	c3                   	ret    

ffff80000080a953 <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:143
void scr_down(){
ffff80000080a953:	f3 0f 1e fa          	endbr64 
ffff80000080a957:	55                   	push   rbp
ffff80000080a958:	48 89 e5             	mov    rbp,rsp
ffff80000080a95b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a95b <scr_down+0x8>
ffff80000080a962:	49 bb 9d 31 11 00 00 	movabs r11,0x11319d
ffff80000080a969:	00 00 00 
ffff80000080a96c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080a96f:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffff80000080a976:	e9 aa 00 00 00       	jmp    ffff80000080aa25 <scr_down+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080a97b:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080a982:	e9 82 00 00 00       	jmp    ffff80000080aa09 <scr_down+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080a987:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a98e:	ff ff ff 
ffff80000080a991:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a995:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a998:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a99b:	0f af d1             	imul   edx,ecx
ffff80000080a99e:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:147 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080a9a0:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a9a7:	ff ff ff 
ffff80000080a9aa:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a9ae:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080a9b2:	0f b6 d2             	movzx  edx,dl
ffff80000080a9b5:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080a9b9:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080a9bc:	85 d2                	test   edx,edx
ffff80000080a9be:	0f 48 d1             	cmovs  edx,ecx
ffff80000080a9c1:	c1 fa 03             	sar    edx,0x3
ffff80000080a9c4:	48 63 d2             	movsxd rdx,edx
ffff80000080a9c7:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080a9cb:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080a9d2:	80 ff ff 
ffff80000080a9d5:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080a9d8:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:148 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
ffff80000080a9dc:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a9e3:	ff ff ff 
ffff80000080a9e6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a9ea:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080a9ed:	89 d2                	mov    edx,edx
ffff80000080a9ef:	48 89 d1             	mov    rcx,rdx
ffff80000080a9f2:	48 f7 d9             	neg    rcx
ffff80000080a9f5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a9f9:	48 01 ca             	add    rdx,rcx
ffff80000080a9fc:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080a9ff:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080aa03:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080aa05:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 1)
ffff80000080aa09:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080aa0c:	48 ba dc 64 af ff ff 	movabs rdx,0xffffffffffaf64dc
ffff80000080aa13:	ff ff ff 
ffff80000080aa16:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080aa19:	39 d1                	cmp    ecx,edx
ffff80000080aa1b:	0f 82 66 ff ff ff    	jb     ffff80000080a987 <scr_down+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080aa21:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 1)
ffff80000080aa25:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080aa28:	48 ba e0 64 af ff ff 	movabs rdx,0xffffffffffaf64e0
ffff80000080aa2f:	ff ff ff 
ffff80000080aa32:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080aa35:	39 d1                	cmp    ecx,edx
ffff80000080aa37:	0f 82 3e ff ff ff    	jb     ffff80000080a97b <scr_down+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
        }

    }
}
ffff80000080aa3d:	90                   	nop
ffff80000080aa3e:	90                   	nop
ffff80000080aa3f:	5d                   	pop    rbp
ffff80000080aa40:	c3                   	ret    

ffff80000080aa41 <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
void print(char* s){
ffff80000080aa41:	f3 0f 1e fa          	endbr64 
ffff80000080aa45:	55                   	push   rbp
ffff80000080aa46:	48 89 e5             	mov    rbp,rsp
ffff80000080aa49:	41 57                	push   r15
ffff80000080aa4b:	53                   	push   rbx
ffff80000080aa4c:	48 83 ec 10          	sub    rsp,0x10
ffff80000080aa50:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080aa50 <print+0xf>
ffff80000080aa57:	49 bb a8 30 11 00 00 	movabs r11,0x1130a8
ffff80000080aa5e:	00 00 00 
ffff80000080aa61:	4c 01 db             	add    rbx,r11
ffff80000080aa64:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080aa68:	e9 55 01 00 00       	jmp    ffff80000080abc2 <print+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
ffff80000080aa6d:	48 b8 d4 64 af ff ff 	movabs rax,0xffffffffffaf64d4
ffff80000080aa74:	ff ff ff 
ffff80000080aa77:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080aa7a:	48 b8 dc 64 af ff ff 	movabs rax,0xffffffffffaf64dc
ffff80000080aa81:	ff ff ff 
ffff80000080aa84:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080aa87:	39 c2                	cmp    edx,eax
ffff80000080aa89:	77 0b                	ja     ffff80000080aa96 <print+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 1)
ffff80000080aa8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aa8f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aa92:	3c 0a                	cmp    al,0xa
ffff80000080aa94:	75 2e                	jne    ffff80000080aac4 <print+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157
        {
            fb_cursor_y+=1;
ffff80000080aa96:	48 b8 d8 64 af ff ff 	movabs rax,0xffffffffffaf64d8
ffff80000080aa9d:	ff ff ff 
ffff80000080aaa0:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080aaa3:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080aaa6:	48 b8 d8 64 af ff ff 	movabs rax,0xffffffffffaf64d8
ffff80000080aaad:	ff ff ff 
ffff80000080aab0:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:158
            fb_cursor_x=0;
ffff80000080aab3:	48 b8 d4 64 af ff ff 	movabs rax,0xffffffffffaf64d4
ffff80000080aaba:	ff ff ff 
ffff80000080aabd:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        }
        if(*s=='\n')continue;
ffff80000080aac4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aac8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aacb:	3c 0a                	cmp    al,0xa
ffff80000080aacd:	0f 84 e9 00 00 00    	je     ffff80000080abbc <print+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        if(fb_cursor_y>=max_ch_nr_y-1){
ffff80000080aad3:	48 b8 e0 64 af ff ff 	movabs rax,0xffffffffffaf64e0
ffff80000080aada:	ff ff ff 
ffff80000080aadd:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080aae0:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080aae3:	48 b8 d8 64 af ff ff 	movabs rax,0xffffffffffaf64d8
ffff80000080aaea:	ff ff ff 
ffff80000080aaed:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080aaf0:	39 c2                	cmp    edx,eax
ffff80000080aaf2:	77 11                	ja     ffff80000080ab05 <print+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:165
//            for(int i=0;i<font_height*font_size;i++)
////                scr_up();
////            fb_cursor_y=max_ch_nr_y-1;
            fb_cursor_y=0;
ffff80000080aaf4:	48 b8 d8 64 af ff ff 	movabs rax,0xffffffffffaf64d8
ffff80000080aafb:	ff ff ff 
ffff80000080aafe:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
ffff80000080ab05:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ab09:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ab0c:	0f be d0             	movsx  edx,al
ffff80000080ab0f:	48 b8 38 fe ff ff ff 	movabs rax,0xfffffffffffffe38
ffff80000080ab16:	ff ff ff 
ffff80000080ab19:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ab1d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ab1f:	48 b9 d8 64 af ff ff 	movabs rcx,0xffffffffffaf64d8
ffff80000080ab26:	ff ff ff 
ffff80000080ab29:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080ab2c:	48 b9 f4 64 af ff ff 	movabs rcx,0xffffffffffaf64f4
ffff80000080ab33:	ff ff ff 
ffff80000080ab36:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080ab39:	0f af f1             	imul   esi,ecx
ffff80000080ab3c:	48 b9 38 fe ff ff ff 	movabs rcx,0xfffffffffffffe38
ffff80000080ab43:	ff ff ff 
ffff80000080ab46:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080ab4a:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080ab4c:	0f af ce             	imul   ecx,esi
ffff80000080ab4f:	41 89 c8             	mov    r8d,ecx
ffff80000080ab52:	48 b9 d4 64 af ff ff 	movabs rcx,0xffffffffffaf64d4
ffff80000080ab59:	ff ff ff 
ffff80000080ab5c:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080ab5f:	48 b9 f0 64 af ff ff 	movabs rcx,0xffffffffffaf64f0
ffff80000080ab66:	ff ff ff 
ffff80000080ab69:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080ab6c:	0f af f1             	imul   esi,ecx
ffff80000080ab6f:	48 b9 38 fe ff ff ff 	movabs rcx,0xfffffffffffffe38
ffff80000080ab76:	ff ff ff 
ffff80000080ab79:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080ab7d:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080ab7f:	0f af ce             	imul   ecx,esi
ffff80000080ab82:	89 cf                	mov    edi,ecx
ffff80000080ab84:	89 d1                	mov    ecx,edx
ffff80000080ab86:	89 c2                	mov    edx,eax
ffff80000080ab88:	44 89 c6             	mov    esi,r8d
ffff80000080ab8b:	49 89 df             	mov    r15,rbx
ffff80000080ab8e:	48 b8 da cb ee ff ff 	movabs rax,0xffffffffffeecbda
ffff80000080ab95:	ff ff ff 
ffff80000080ab98:	48 01 d8             	add    rax,rbx
ffff80000080ab9b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:168
        fb_cursor_x+=1;
ffff80000080ab9d:	48 b8 d4 64 af ff ff 	movabs rax,0xffffffffffaf64d4
ffff80000080aba4:	ff ff ff 
ffff80000080aba7:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080abaa:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080abad:	48 b8 d4 64 af ff ff 	movabs rax,0xffffffffffaf64d4
ffff80000080abb4:	ff ff ff 
ffff80000080abb7:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
ffff80000080abba:	eb 01                	jmp    ffff80000080abbd <print+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        if(*s=='\n')continue;
ffff80000080abbc:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080abbd:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
ffff80000080abc2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080abc6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080abc9:	84 c0                	test   al,al
ffff80000080abcb:	0f 85 9c fe ff ff    	jne    ffff80000080aa6d <print+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
    }
}
ffff80000080abd1:	90                   	nop
ffff80000080abd2:	90                   	nop
ffff80000080abd3:	48 83 c4 10          	add    rsp,0x10
ffff80000080abd7:	5b                   	pop    rbx
ffff80000080abd8:	41 5f                	pop    r15
ffff80000080abda:	5d                   	pop    rbp
ffff80000080abdb:	c3                   	ret    

ffff80000080abdc <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080abdc:	f3 0f 1e fa          	endbr64 
ffff80000080abe0:	55                   	push   rbp
ffff80000080abe1:	48 89 e5             	mov    rbp,rsp
ffff80000080abe4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080abe4 <open_framebuffer+0x8>
ffff80000080abeb:	49 bb 14 2f 11 00 00 	movabs r11,0x112f14
ffff80000080abf2:	00 00 00 
ffff80000080abf5:	4c 01 d8             	add    rax,r11
ffff80000080abf8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080abfc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
    inode->f_ops=&framebuffer_fops;
ffff80000080ac00:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080ac04:	48 b9 50 fe ff ff ff 	movabs rcx,0xfffffffffffffe50
ffff80000080ac0b:	ff ff ff 
ffff80000080ac0e:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ac12:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
    filp->f_ops=&framebuffer_fops;
ffff80000080ac16:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080ac1a:	48 b9 50 fe ff ff ff 	movabs rcx,0xfffffffffffffe50
ffff80000080ac21:	ff ff ff 
ffff80000080ac24:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080ac28:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
    return 1;
ffff80000080ac2c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:179
}
ffff80000080ac31:	5d                   	pop    rbp
ffff80000080ac32:	c3                   	ret    

ffff80000080ac33 <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
long close_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080ac33:	f3 0f 1e fa          	endbr64 
ffff80000080ac37:	55                   	push   rbp
ffff80000080ac38:	48 89 e5             	mov    rbp,rsp
ffff80000080ac3b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ac3b <close_framebuffer+0x8>
ffff80000080ac42:	49 bb bd 2e 11 00 00 	movabs r11,0x112ebd
ffff80000080ac49:	00 00 00 
ffff80000080ac4c:	4c 01 d8             	add    rax,r11
ffff80000080ac4f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ac53:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:182

}
ffff80000080ac57:	90                   	nop
ffff80000080ac58:	5d                   	pop    rbp
ffff80000080ac59:	c3                   	ret    

ffff80000080ac5a <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:183
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080ac5a:	f3 0f 1e fa          	endbr64 
ffff80000080ac5e:	55                   	push   rbp
ffff80000080ac5f:	48 89 e5             	mov    rbp,rsp
ffff80000080ac62:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ac62 <read_framebuffer+0x8>
ffff80000080ac69:	49 bb 96 2e 11 00 00 	movabs r11,0x112e96
ffff80000080ac70:	00 00 00 
ffff80000080ac73:	4c 01 d8             	add    rax,r11
ffff80000080ac76:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ac7a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080ac7e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080ac82:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185

}
ffff80000080ac86:	90                   	nop
ffff80000080ac87:	5d                   	pop    rbp
ffff80000080ac88:	c3                   	ret    

ffff80000080ac89 <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080ac89:	f3 0f 1e fa          	endbr64 
ffff80000080ac8d:	55                   	push   rbp
ffff80000080ac8e:	48 89 e5             	mov    rbp,rsp
ffff80000080ac91:	41 57                	push   r15
ffff80000080ac93:	53                   	push   rbx
ffff80000080ac94:	48 83 ec 40          	sub    rsp,0x40
ffff80000080ac98:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ac98 <write_framebuffer+0xf>
ffff80000080ac9f:	49 bb 60 2e 11 00 00 	movabs r11,0x112e60
ffff80000080aca6:	00 00 00 
ffff80000080aca9:	4c 01 db             	add    rbx,r11
ffff80000080acac:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080acb0:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080acb4:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080acb8:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    char *tmp= (char*) kmalloc();
ffff80000080acbc:	49 89 df             	mov    r15,rbx
ffff80000080acbf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080acc4:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080accb:	ff ff ff 
ffff80000080acce:	48 01 da             	add    rdx,rbx
ffff80000080acd1:	ff d2                	call   rdx
ffff80000080acd3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    int c=count/(PAGE_4K_SIZE-1),p=0;
ffff80000080acd7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080acdb:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
ffff80000080ace2:	01 10 00 
ffff80000080ace5:	48 89 c8             	mov    rax,rcx
ffff80000080ace8:	48 f7 e2             	mul    rdx
ffff80000080aceb:	48 89 c8             	mov    rax,rcx
ffff80000080acee:	48 29 d0             	sub    rax,rdx
ffff80000080acf1:	48 d1 e8             	shr    rax,1
ffff80000080acf4:	48 01 d0             	add    rax,rdx
ffff80000080acf7:	48 c1 e8 0b          	shr    rax,0xb
ffff80000080acfb:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080acfe:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
ffff80000080ad05:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080ad0c:	eb 60                	jmp    ffff80000080ad6e <write_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:191 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
ffff80000080ad0e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ad11:	48 63 d0             	movsxd rdx,eax
ffff80000080ad14:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ad18:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080ad1c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad20:	ba ff 0f 00 00       	mov    edx,0xfff
ffff80000080ad25:	48 89 ce             	mov    rsi,rcx
ffff80000080ad28:	48 89 c7             	mov    rdi,rax
ffff80000080ad2b:	49 89 df             	mov    r15,rbx
ffff80000080ad2e:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080ad35:	ff ff ff 
ffff80000080ad38:	48 01 d8             	add    rax,rbx
ffff80000080ad3b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
ffff80000080ad3d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad41:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ad47:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193 (discriminator 7)
        print(tmp);
ffff80000080ad4a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad4e:	48 89 c7             	mov    rdi,rax
ffff80000080ad51:	49 89 df             	mov    r15,rbx
ffff80000080ad54:	48 b8 49 cf ee ff ff 	movabs rax,0xffffffffffeecf49
ffff80000080ad5b:	ff ff ff 
ffff80000080ad5e:	48 01 d8             	add    rax,rbx
ffff80000080ad61:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:194 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
ffff80000080ad63:	81 45 ec ff 0f 00 00 	add    DWORD PTR [rbp-0x14],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
ffff80000080ad6a:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 1)
ffff80000080ad6e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080ad72:	74 05                	je     ffff80000080ad79 <write_framebuffer+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 3)
ffff80000080ad74:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080ad77:	eb 05                	jmp    ffff80000080ad7e <write_framebuffer+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 4)
ffff80000080ad79:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 6)
ffff80000080ad7e:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
ffff80000080ad81:	7f 8b                	jg     ffff80000080ad0e <write_framebuffer+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
    }
    kmfree(tmp);
ffff80000080ad83:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad87:	48 89 c7             	mov    rdi,rax
ffff80000080ad8a:	49 89 df             	mov    r15,rbx
ffff80000080ad8d:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080ad94:	ff ff ff 
ffff80000080ad97:	48 01 d8             	add    rax,rbx
ffff80000080ad9a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    return 0;
ffff80000080ad9c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
}
ffff80000080ada1:	48 83 c4 40          	add    rsp,0x40
ffff80000080ada5:	5b                   	pop    rbx
ffff80000080ada6:	41 5f                	pop    r15
ffff80000080ada8:	5d                   	pop    rbp
ffff80000080ada9:	c3                   	ret    

ffff80000080adaa <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:199
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080adaa:	f3 0f 1e fa          	endbr64 
ffff80000080adae:	55                   	push   rbp
ffff80000080adaf:	48 89 e5             	mov    rbp,rsp
ffff80000080adb2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080adb2 <ioctl_framebuffer+0x8>
ffff80000080adb9:	49 bb 46 2d 11 00 00 	movabs r11,0x112d46
ffff80000080adc0:	00 00 00 
ffff80000080adc3:	4c 01 d8             	add    rax,r11
ffff80000080adc6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080adca:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080adce:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080add2:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201

}
ffff80000080add6:	90                   	nop
ffff80000080add7:	5d                   	pop    rbp
ffff80000080add8:	c3                   	ret    

ffff80000080add9 <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:14
#include "mem.h"
#include "str.h"
#include <ramdisk.h>

struct dir_entry * path_walk(char * name,unsigned long flags)
{
ffff80000080add9:	f3 0f 1e fa          	endbr64 
ffff80000080addd:	55                   	push   rbp
ffff80000080adde:	48 89 e5             	mov    rbp,rsp
ffff80000080ade1:	41 57                	push   r15
ffff80000080ade3:	53                   	push   rbx
ffff80000080ade4:	48 83 ec 70          	sub    rsp,0x70
ffff80000080ade8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ade8 <path_walk+0xf>
ffff80000080adef:	49 bb 10 2d 11 00 00 	movabs r11,0x112d10
ffff80000080adf6:	00 00 00 
ffff80000080adf9:	4c 01 db             	add    rbx,r11
ffff80000080adfc:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080ae00:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:15
    char * tmpname = NULL;
ffff80000080ae04:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080ae0b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:16
    int tmpnamelen = 0;
ffff80000080ae0c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:17
    struct dir_entry * parent = root_sb->root;
ffff80000080ae13:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080ae1a:	ff ff ff 
ffff80000080ae1d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ae21:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ae24:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ae27:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:18
    struct dir_entry * path = NULL;
ffff80000080ae2b:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080ae32:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20

    while(*name == '/')
ffff80000080ae33:	eb 05                	jmp    ffff80000080ae3a <path_walk+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:21
        name++;
ffff80000080ae35:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20
    while(*name == '/')
ffff80000080ae3a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ae3e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ae41:	3c 2f                	cmp    al,0x2f
ffff80000080ae43:	74 f0                	je     ffff80000080ae35 <path_walk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:23

    if(!*name)
ffff80000080ae45:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ae49:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ae4c:	84 c0                	test   al,al
ffff80000080ae4e:	75 09                	jne    ffff80000080ae59 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:25
    {
        return parent;
ffff80000080ae50:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ae54:	e9 f8 02 00 00       	jmp    ffff80000080b151 <path_walk+0x378>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
    }

    for(;;)
    {
        tmpname = name;
ffff80000080ae59:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ae5d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
        while(*name && (*name != '/'))
ffff80000080ae61:	eb 05                	jmp    ffff80000080ae68 <path_walk+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
            name++;
ffff80000080ae63:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
        while(*name && (*name != '/'))
ffff80000080ae68:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ae6c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ae6f:	84 c0                	test   al,al
ffff80000080ae71:	74 0b                	je     ffff80000080ae7e <path_walk+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31 (discriminator 1)
ffff80000080ae73:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ae77:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ae7a:	3c 2f                	cmp    al,0x2f
ffff80000080ae7c:	75 e5                	jne    ffff80000080ae63 <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:33
        tmpnamelen = name - tmpname;
ffff80000080ae7e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ae82:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
ffff80000080ae86:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:35

        path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff80000080ae89:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ae8e:	bf 58 00 00 00       	mov    edi,0x58
ffff80000080ae93:	49 89 df             	mov    r15,rbx
ffff80000080ae96:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ae9b:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080aea2:	ff ff ff 
ffff80000080aea5:	48 01 da             	add    rdx,rbx
ffff80000080aea8:	ff d2                	call   rdx
ffff80000080aeaa:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:36
        memset(path,0,sizeof(struct dir_entry));
ffff80000080aeae:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080aeb2:	ba 58 00 00 00       	mov    edx,0x58
ffff80000080aeb7:	be 00 00 00 00       	mov    esi,0x0
ffff80000080aebc:	48 89 c7             	mov    rdi,rax
ffff80000080aebf:	49 89 df             	mov    r15,rbx
ffff80000080aec2:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080aec9:	ff ff ff 
ffff80000080aecc:	48 01 d8             	add    rax,rbx
ffff80000080aecf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38

        path->name = kmalloc();
ffff80000080aed1:	49 89 df             	mov    r15,rbx
ffff80000080aed4:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080aed9:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080aee0:	ff ff ff 
ffff80000080aee3:	48 01 da             	add    rdx,rbx
ffff80000080aee6:	ff d2                	call   rdx
ffff80000080aee8:	48 89 c2             	mov    rdx,rax
ffff80000080aeeb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080aeef:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:39
        memset(path->name,0,tmpnamelen+1);
ffff80000080aef2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080aef5:	83 c0 01             	add    eax,0x1
ffff80000080aef8:	89 c2                	mov    edx,eax
ffff80000080aefa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080aefe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af01:	be 00 00 00 00       	mov    esi,0x0
ffff80000080af06:	48 89 c7             	mov    rdi,rax
ffff80000080af09:	49 89 df             	mov    r15,rbx
ffff80000080af0c:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080af13:	ff ff ff 
ffff80000080af16:	48 01 d8             	add    rax,rbx
ffff80000080af19:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        memcpy(path->name,tmpname,tmpnamelen);
ffff80000080af1b:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080af1e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af22:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af25:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080af29:	48 89 ce             	mov    rsi,rcx
ffff80000080af2c:	48 89 c7             	mov    rdi,rax
ffff80000080af2f:	49 89 df             	mov    r15,rbx
ffff80000080af32:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080af39:	ff ff ff 
ffff80000080af3c:	48 01 d8             	add    rax,rbx
ffff80000080af3f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:41
        path->name_length = tmpnamelen;
ffff80000080af41:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af45:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080af48:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:43

        path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
ffff80000080af4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080af4f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080af53:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080af57:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080af5b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080af5f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080af63:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080af67:	48 89 d6             	mov    rsi,rdx
ffff80000080af6a:	48 89 c7             	mov    rdi,rax
ffff80000080af6d:	ff d1                	call   rcx
ffff80000080af6f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:44
        if(path == NULL)
ffff80000080af73:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffff80000080af78:	75 71                	jne    ffff80000080afeb <path_walk+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:46
        {
            printf("can not find file or dir:%s\n",path->name);
ffff80000080af7a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af7e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af81:	48 89 c6             	mov    rsi,rax
ffff80000080af84:	48 b8 c0 d7 ff ff ff 	movabs rax,0xffffffffffffd7c0
ffff80000080af8b:	ff ff ff 
ffff80000080af8e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080af92:	48 89 c7             	mov    rdi,rax
ffff80000080af95:	49 89 df             	mov    r15,rbx
ffff80000080af98:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080af9d:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080afa4:	ff ff ff 
ffff80000080afa7:	48 01 da             	add    rdx,rbx
ffff80000080afaa:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:47
            kmfree(path->name);
ffff80000080afac:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080afb0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080afb3:	48 89 c7             	mov    rdi,rax
ffff80000080afb6:	49 89 df             	mov    r15,rbx
ffff80000080afb9:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080afc0:	ff ff ff 
ffff80000080afc3:	48 01 d8             	add    rax,rbx
ffff80000080afc6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:48
            kmfree(path);
ffff80000080afc8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080afcc:	48 89 c7             	mov    rdi,rax
ffff80000080afcf:	49 89 df             	mov    r15,rbx
ffff80000080afd2:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080afd9:	ff ff ff 
ffff80000080afdc:	48 01 d8             	add    rax,rbx
ffff80000080afdf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49
            return NULL;
ffff80000080afe1:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080afe6:	e9 66 01 00 00       	jmp    ffff80000080b151 <path_walk+0x378>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:54
        }

//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
        path->parent = parent;
ffff80000080afeb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080afef:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080aff3:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:57
        //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
        //对于/dev这样的文件夹，lookup返回的就是链表里的dentry，data会一样
        list_add(&parent->subdirs_list,&path->child_node);
ffff80000080aff7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080affb:	48 83 c0 10          	add    rax,0x10
ffff80000080afff:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b003:	48 83 c2 28          	add    rdx,0x28
ffff80000080b007:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080b00b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080b00f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b013:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b017:	48 85 c0             	test   rax,rax
ffff80000080b01a:	75 50                	jne    ffff80000080b06c <path_walk+0x293>
ffff80000080b01c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b020:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff80000080b024:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b028:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080b02c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b030:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080b034:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b038:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080b03c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b040:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080b044:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080b047:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b04b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b04f:	48 85 c0             	test   rax,rax
ffff80000080b052:	0f 84 a3 00 00 00    	je     ffff80000080b0fb <path_walk+0x322>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080b058:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b05c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b060:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080b064:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080b067:	e9 8f 00 00 00       	jmp    ffff80000080b0fb <path_walk+0x322>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080b06c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b070:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080b074:	eb 21                	jmp    ffff80000080b097 <path_walk+0x2be>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080b076:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b07a:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080b07e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b082:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b086:	48 39 c2             	cmp    rdx,rax
ffff80000080b089:	74 73                	je     ffff80000080b0fe <path_walk+0x325>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080b08b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b08f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b093:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080b097:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b09b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b09f:	48 85 c0             	test   rax,rax
ffff80000080b0a2:	74 0e                	je     ffff80000080b0b2 <path_walk+0x2d9>
ffff80000080b0a4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b0a8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b0ac:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080b0b0:	75 c4                	jne    ffff80000080b076 <path_walk+0x29d>
ffff80000080b0b2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b0b6:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff80000080b0ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b0be:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080b0c2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b0c6:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080b0ca:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b0ce:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080b0d2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b0d6:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080b0da:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080b0dd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b0e1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b0e5:	48 85 c0             	test   rax,rax
ffff80000080b0e8:	74 17                	je     ffff80000080b101 <path_walk+0x328>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080b0ea:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b0ee:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b0f2:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080b0f6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080b0f9:	eb 06                	jmp    ffff80000080b101 <path_walk+0x328>
ffff80000080b0fb:	90                   	nop
ffff80000080b0fc:	eb 04                	jmp    ffff80000080b102 <path_walk+0x329>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080b0fe:	90                   	nop
ffff80000080b0ff:	eb 01                	jmp    ffff80000080b102 <path_walk+0x329>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080b101:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59

        if(!*name)
ffff80000080b102:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b106:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b109:	84 c0                	test   al,al
ffff80000080b10b:	74 2a                	je     ffff80000080b137 <path_walk+0x35e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
            goto last_component;
        while(*name == '/')
ffff80000080b10d:	eb 05                	jmp    ffff80000080b114 <path_walk+0x33b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62
            name++;
ffff80000080b10f:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
        while(*name == '/')
ffff80000080b114:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b118:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b11b:	3c 2f                	cmp    al,0x2f
ffff80000080b11d:	74 f0                	je     ffff80000080b10f <path_walk+0x336>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:63
        if(!*name)
ffff80000080b11f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b123:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b126:	84 c0                	test   al,al
ffff80000080b128:	74 10                	je     ffff80000080b13a <path_walk+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:66
            goto last_slash;

        parent = path;
ffff80000080b12a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b12e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        tmpname = name;
ffff80000080b132:	e9 22 fd ff ff       	jmp    ffff80000080ae59 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
            goto last_component;
ffff80000080b137:	90                   	nop
ffff80000080b138:	eb 01                	jmp    ffff80000080b13b <path_walk+0x362>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:64
            goto last_slash;
ffff80000080b13a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:72
    }

    last_slash:
    last_component:

    if(flags & 1)
ffff80000080b13b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b13f:	83 e0 01             	and    eax,0x1
ffff80000080b142:	48 85 c0             	test   rax,rax
ffff80000080b145:	74 06                	je     ffff80000080b14d <path_walk+0x374>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:74
    {
        return parent;
ffff80000080b147:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b14b:	eb 04                	jmp    ffff80000080b151 <path_walk+0x378>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:77
    }

    return path;
ffff80000080b14d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:78
}
ffff80000080b151:	48 83 c4 70          	add    rsp,0x70
ffff80000080b155:	5b                   	pop    rbx
ffff80000080b156:	41 5f                	pop    r15
ffff80000080b158:	5d                   	pop    rbp
ffff80000080b159:	c3                   	ret    

ffff80000080b15a <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:82


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
ffff80000080b15a:	f3 0f 1e fa          	endbr64 
ffff80000080b15e:	55                   	push   rbp
ffff80000080b15f:	48 89 e5             	mov    rbp,rsp
ffff80000080b162:	41 57                	push   r15
ffff80000080b164:	48 83 ec 48          	sub    rsp,0x48
ffff80000080b168:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b168 <fill_dentry+0xe>
ffff80000080b16f:	49 bb 90 29 11 00 00 	movabs r11,0x112990
ffff80000080b176:	00 00 00 
ffff80000080b179:	4c 01 d8             	add    rax,r11
ffff80000080b17c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080b180:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080b184:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080b188:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff80000080b18c:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:83
    struct dirent* dent = (struct dirent*)buf;
ffff80000080b190:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b194:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:85

    if((unsigned long)buf < PAGE_4K_SIZE)
ffff80000080b198:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b19c:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff80000080b1a3:	77 07                	ja     ffff80000080b1ac <fill_dentry+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:86
        return -EFAULT;
ffff80000080b1a5:	b8 eb ff ff ff       	mov    eax,0xffffffeb
ffff80000080b1aa:	eb 53                	jmp    ffff80000080b1ff <fill_dentry+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:88

    memcpy(name,dent->d_name,namelen);
ffff80000080b1ac:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b1b0:	89 d7                	mov    edi,edx
ffff80000080b1b2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b1b6:	48 8d 72 18          	lea    rsi,[rdx+0x18]
ffff80000080b1ba:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080b1be:	89 fa                	mov    edx,edi
ffff80000080b1c0:	48 89 cf             	mov    rdi,rcx
ffff80000080b1c3:	49 89 c7             	mov    r15,rax
ffff80000080b1c6:	48 b9 6c 50 ef ff ff 	movabs rcx,0xffffffffffef506c
ffff80000080b1cd:	ff ff ff 
ffff80000080b1d0:	48 01 c1             	add    rcx,rax
ffff80000080b1d3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
    dent->d_namelen = namelen;
ffff80000080b1d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b1d9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b1dd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:90
    dent->d_type = type;
ffff80000080b1e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b1e5:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080b1e9:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:91
    dent->d_offset = offset;
ffff80000080b1ed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b1f1:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080b1f5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:92
    return sizeof(struct dirent) + namelen;
ffff80000080b1f8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b1fc:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:93
}
ffff80000080b1ff:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080b203:	c9                   	leave  
ffff80000080b204:	c3                   	ret    

ffff80000080b205 <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000080b205:	f3 0f 1e fa          	endbr64 
ffff80000080b209:	55                   	push   rbp
ffff80000080b20a:	48 89 e5             	mov    rbp,rsp
ffff80000080b20d:	41 57                	push   r15
ffff80000080b20f:	53                   	push   rbx
ffff80000080b210:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b214:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b214 <mount_fs+0xf>
ffff80000080b21b:	49 bb e4 28 11 00 00 	movabs r11,0x1128e4
ffff80000080b222:	00 00 00 
ffff80000080b225:	4c 01 db             	add    rbx,r11
ffff80000080b228:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080b22c:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080b230:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:101
    struct file_system_type * p = NULL;
ffff80000080b234:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b23b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103

    for(p = &filesystem;p;p = p->next)
ffff80000080b23c:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b243:	ff ff ff 
ffff80000080b246:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b24a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080b24e:	eb 4d                	jmp    ffff80000080b29d <mount_fs+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:104
        if(!strcmp(p->name,name))
ffff80000080b250:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b254:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b257:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b25b:	48 89 d6             	mov    rsi,rdx
ffff80000080b25e:	48 89 c7             	mov    rdi,rax
ffff80000080b261:	49 89 df             	mov    r15,rbx
ffff80000080b264:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff80000080b26b:	ff ff ff 
ffff80000080b26e:	48 01 d8             	add    rax,rbx
ffff80000080b271:	ff d0                	call   rax
ffff80000080b273:	85 c0                	test   eax,eax
ffff80000080b275:	75 1a                	jne    ffff80000080b291 <mount_fs+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:106
        {
            return p->read_superblock(DPTE,buf);
ffff80000080b277:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b27b:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffff80000080b27f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b283:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b287:	48 89 d6             	mov    rsi,rdx
ffff80000080b28a:	48 89 c7             	mov    rdi,rax
ffff80000080b28d:	ff d1                	call   rcx
ffff80000080b28f:	eb 18                	jmp    ffff80000080b2a9 <mount_fs+0xa4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080b291:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b295:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b299:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103 (discriminator 1)
ffff80000080b29d:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b2a2:	75 ac                	jne    ffff80000080b250 <mount_fs+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108
        }
    return 0;
ffff80000080b2a4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:109
}
ffff80000080b2a9:	48 83 c4 30          	add    rsp,0x30
ffff80000080b2ad:	5b                   	pop    rbx
ffff80000080b2ae:	41 5f                	pop    r15
ffff80000080b2b0:	5d                   	pop    rbp
ffff80000080b2b1:	c3                   	ret    

ffff80000080b2b2 <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112

unsigned long register_filesystem(struct file_system_type * fs)
{
ffff80000080b2b2:	f3 0f 1e fa          	endbr64 
ffff80000080b2b6:	55                   	push   rbp
ffff80000080b2b7:	48 89 e5             	mov    rbp,rsp
ffff80000080b2ba:	41 57                	push   r15
ffff80000080b2bc:	53                   	push   rbx
ffff80000080b2bd:	48 83 ec 20          	sub    rsp,0x20
ffff80000080b2c1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b2c1 <register_filesystem+0xf>
ffff80000080b2c8:	49 bb 37 28 11 00 00 	movabs r11,0x112837
ffff80000080b2cf:	00 00 00 
ffff80000080b2d2:	4c 01 db             	add    rbx,r11
ffff80000080b2d5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:113
    struct file_system_type * p = NULL;
ffff80000080b2d9:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b2e0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115

    for(p = &filesystem;p;p = p->next)
ffff80000080b2e1:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b2e8:	ff ff ff 
ffff80000080b2eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b2ef:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080b2f3:	eb 3d                	jmp    ffff80000080b332 <register_filesystem+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116
        if(!strcmp(fs->name,p->name))
ffff80000080b2f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b2f9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b2fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b300:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b303:	48 89 d6             	mov    rsi,rdx
ffff80000080b306:	48 89 c7             	mov    rdi,rax
ffff80000080b309:	49 89 df             	mov    r15,rbx
ffff80000080b30c:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff80000080b313:	ff ff ff 
ffff80000080b316:	48 01 d8             	add    rax,rbx
ffff80000080b319:	ff d0                	call   rax
ffff80000080b31b:	85 c0                	test   eax,eax
ffff80000080b31d:	75 07                	jne    ffff80000080b326 <register_filesystem+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:117
            return 0;
ffff80000080b31f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b324:	eb 48                	jmp    ffff80000080b36e <register_filesystem+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080b326:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b32a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b32e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115 (discriminator 1)
ffff80000080b332:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b337:	75 bc                	jne    ffff80000080b2f5 <register_filesystem+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:119

    fs->next = filesystem.next;
ffff80000080b339:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b340:	ff ff ff 
ffff80000080b343:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b347:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080b34b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b34f:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:120
    filesystem.next = fs;
ffff80000080b353:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b35a:	ff ff ff 
ffff80000080b35d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b361:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b365:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:122

    return 1;
ffff80000080b369:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:123
}
ffff80000080b36e:	48 83 c4 20          	add    rsp,0x20
ffff80000080b372:	5b                   	pop    rbx
ffff80000080b373:	41 5f                	pop    r15
ffff80000080b375:	5d                   	pop    rbp
ffff80000080b376:	c3                   	ret    

ffff80000080b377 <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126

unsigned long unregister_filesystem(struct file_system_type * fs)
{
ffff80000080b377:	f3 0f 1e fa          	endbr64 
ffff80000080b37b:	55                   	push   rbp
ffff80000080b37c:	48 89 e5             	mov    rbp,rsp
ffff80000080b37f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b37f <unregister_filesystem+0x8>
ffff80000080b386:	49 bb 79 27 11 00 00 	movabs r11,0x112779
ffff80000080b38d:	00 00 00 
ffff80000080b390:	4c 01 d8             	add    rax,r11
ffff80000080b393:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:127
    struct file_system_type * p = &filesystem;
ffff80000080b397:	48 ba 50 ff ff ff ff 	movabs rdx,0xffffffffffffff50
ffff80000080b39e:	ff ff ff 
ffff80000080b3a1:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b3a5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129

    while(p->next)
ffff80000080b3a9:	eb 41                	jmp    ffff80000080b3ec <unregister_filesystem+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:130
        if(p->next == fs)
ffff80000080b3ab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b3af:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b3b3:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080b3b7:	75 27                	jne    ffff80000080b3e0 <unregister_filesystem+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:132
        {
            p->next = p->next->next;
ffff80000080b3b9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b3bd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b3c1:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080b3c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b3c9:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:133
            fs->next = NULL;
ffff80000080b3cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b3d1:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080b3d8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:134
            return 1;
ffff80000080b3d9:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080b3de:	eb 1e                	jmp    ffff80000080b3fe <unregister_filesystem+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
        }
        else
            p = p->next;
ffff80000080b3e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b3e4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b3e8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129
    while(p->next)
ffff80000080b3ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b3f0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b3f4:	48 85 c0             	test   rax,rax
ffff80000080b3f7:	75 b2                	jne    ffff80000080b3ab <unregister_filesystem+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
    return 0;
ffff80000080b3f9:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:139
}
ffff80000080b3fe:	5d                   	pop    rbp
ffff80000080b3ff:	c3                   	ret    

ffff80000080b400 <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:141
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080b400:	f3 0f 1e fa          	endbr64 
ffff80000080b404:	55                   	push   rbp
ffff80000080b405:	48 89 e5             	mov    rbp,rsp
ffff80000080b408:	41 57                	push   r15
ffff80000080b40a:	53                   	push   rbx
ffff80000080b40b:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b40f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b40f <root_lookup+0xf>
ffff80000080b416:	49 bb e9 26 11 00 00 	movabs r11,0x1126e9
ffff80000080b41d:	00 00 00 
ffff80000080b420:	4c 01 db             	add    rbx,r11
ffff80000080b423:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080b427:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
ffff80000080b42b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b42f:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080b433:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    struct List* p= tmp->subdirs_list.next;
ffff80000080b437:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b43b:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080b43f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
    while (p){
ffff80000080b443:	eb 61                	jmp    ffff80000080b4a6 <root_lookup+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:145
        struct dir_entry* dp=p->data;
ffff80000080b445:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b449:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b44d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:146
        if(strcmp(dp->name,dest_dentry->name)==0){
ffff80000080b451:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b455:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b458:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b45c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b45f:	48 89 d6             	mov    rsi,rdx
ffff80000080b462:	48 89 c7             	mov    rdi,rax
ffff80000080b465:	49 89 df             	mov    r15,rbx
ffff80000080b468:	48 b8 be 53 ef ff ff 	movabs rax,0xffffffffffef53be
ffff80000080b46f:	ff ff ff 
ffff80000080b472:	48 01 d8             	add    rax,rbx
ffff80000080b475:	ff d0                	call   rax
ffff80000080b477:	85 c0                	test   eax,eax
ffff80000080b479:	75 1f                	jne    ffff80000080b49a <root_lookup+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:147
            kmfree(dest_dentry);
ffff80000080b47b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b47f:	48 89 c7             	mov    rdi,rax
ffff80000080b482:	49 89 df             	mov    r15,rbx
ffff80000080b485:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080b48c:	ff ff ff 
ffff80000080b48f:	48 01 d8             	add    rax,rbx
ffff80000080b492:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:148
            return dp;
ffff80000080b494:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b498:	eb 31                	jmp    ffff80000080b4cb <root_lookup+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:150
        }
        p=p->next;
ffff80000080b49a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b49e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b4a2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
    while (p){
ffff80000080b4a6:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b4ab:	75 98                	jne    ffff80000080b445 <root_lookup+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:152
    }
    kmfree(dest_dentry);
ffff80000080b4ad:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b4b1:	48 89 c7             	mov    rdi,rax
ffff80000080b4b4:	49 89 df             	mov    r15,rbx
ffff80000080b4b7:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080b4be:	ff ff ff 
ffff80000080b4c1:	48 01 d8             	add    rax,rbx
ffff80000080b4c4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:153
    return NULL;
ffff80000080b4c6:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:154
}
ffff80000080b4cb:	48 83 c4 30          	add    rsp,0x30
ffff80000080b4cf:	5b                   	pop    rbx
ffff80000080b4d0:	41 5f                	pop    r15
ffff80000080b4d2:	5d                   	pop    rbp
ffff80000080b4d3:	c3                   	ret    

ffff80000080b4d4 <init_rootfs>:
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:158
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void init_rootfs(){
ffff80000080b4d4:	f3 0f 1e fa          	endbr64 
ffff80000080b4d8:	55                   	push   rbp
ffff80000080b4d9:	48 89 e5             	mov    rbp,rsp
ffff80000080b4dc:	41 57                	push   r15
ffff80000080b4de:	53                   	push   rbx
ffff80000080b4df:	48 83 ec 20          	sub    rsp,0x20
ffff80000080b4e3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b4e3 <init_rootfs+0xf>
ffff80000080b4ea:	49 bb 15 26 11 00 00 	movabs r11,0x112615
ffff80000080b4f1:	00 00 00 
ffff80000080b4f4:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:159
    root_sb=(struct super_block*) kmalloc();
ffff80000080b4f7:	49 89 df             	mov    r15,rbx
ffff80000080b4fa:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b4ff:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080b506:	ff ff ff 
ffff80000080b509:	48 01 da             	add    rdx,rbx
ffff80000080b50c:	ff d2                	call   rdx
ffff80000080b50e:	48 89 c2             	mov    rdx,rax
ffff80000080b511:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b518:	ff ff ff 
ffff80000080b51b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b51f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160
    root_sb->root=root_sb+1;//紧凑跟在后面
ffff80000080b522:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b529:	ff ff ff 
ffff80000080b52c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b530:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b533:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b53a:	ff ff ff 
ffff80000080b53d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b541:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b544:	48 83 c2 28          	add    rdx,0x28
ffff80000080b548:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:161
    root_sb->sb_ops=NULL;
ffff80000080b54b:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b552:	ff ff ff 
ffff80000080b555:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b559:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b55c:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080b563:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163
    
    struct index_node* ir=root_sb->root+1;
ffff80000080b564:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b56b:	ff ff ff 
ffff80000080b56e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b572:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b575:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b578:	48 83 c0 58          	add    rax,0x58
ffff80000080b57c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:164
    root_sb->root->dir_inode=ir;
ffff80000080b580:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b587:	ff ff ff 
ffff80000080b58a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b58e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b591:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b594:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b598:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:165
    ir->sb=root_sb;
ffff80000080b59c:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b5a3:	ff ff ff 
ffff80000080b5a6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5aa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b5ad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5b1:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:166
    ir->attribute=FS_ATTR_DIR;
ffff80000080b5b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5b9:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff80000080b5c0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167
    ir->file_size=0;
ffff80000080b5c1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5c5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    ir->inode_ops=&root_iops;//lookup函数是必要的
ffff80000080b5cc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5d0:	48 ba 50 fd ff ff ff 	movabs rdx,0xfffffffffffffd50
ffff80000080b5d7:	ff ff ff 
ffff80000080b5da:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b5de:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:169
    ir->f_ops=NULL;
ffff80000080b5e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5e6:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff80000080b5ed:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170
    ir->private_index_info=root_sb->root;
ffff80000080b5ee:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b5f5:	ff ff ff 
ffff80000080b5f8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5fc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5ff:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b602:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b606:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:172

    root_sb->root->name=ir+1;//紧凑跟在后面
ffff80000080b60a:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b611:	ff ff ff 
ffff80000080b614:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b618:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b61b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b61e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b622:	48 83 c2 40          	add    rdx,0x40
ffff80000080b626:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:173
    strcpy(root_sb->root->name,"/");
ffff80000080b629:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b630:	ff ff ff 
ffff80000080b633:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b637:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b63a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b63d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b640:	48 ba e8 d7 ff ff ff 	movabs rdx,0xffffffffffffd7e8
ffff80000080b647:	ff ff ff 
ffff80000080b64a:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080b64e:	48 89 d6             	mov    rsi,rdx
ffff80000080b651:	48 89 c7             	mov    rdi,rax
ffff80000080b654:	49 89 df             	mov    r15,rbx
ffff80000080b657:	48 b8 70 51 ef ff ff 	movabs rax,0xffffffffffef5170
ffff80000080b65e:	ff ff ff 
ffff80000080b661:	48 01 d8             	add    rax,rbx
ffff80000080b664:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:174
    root_sb->root->name_length=1;
ffff80000080b666:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b66d:	ff ff ff 
ffff80000080b670:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b674:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b677:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b67a:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:175
    root_sb->root->parent=root_sb->root;
ffff80000080b681:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b688:	ff ff ff 
ffff80000080b68b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b68f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b692:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b699:	ff ff ff 
ffff80000080b69c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b6a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6a3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6a6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b6a9:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:176
    list_init(&root_sb->root->subdirs_list);
ffff80000080b6ad:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b6b4:	ff ff ff 
ffff80000080b6b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b6bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6be:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6c1:	48 83 c0 28          	add    rax,0x28
ffff80000080b6c5:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080b6c9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b6cd:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080b6d4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b6d8:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080b6df:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080b6e0:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:177
    list_init(&root_sb->root->child_node);
ffff80000080b6e1:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b6e8:	ff ff ff 
ffff80000080b6eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b6ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6f2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6f5:	48 83 c0 10          	add    rax,0x10
ffff80000080b6f9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080b6fd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b701:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080b708:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b70c:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080b713:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080b714:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:179

    root_sb->dev=dev_ramdisk<<8;
ffff80000080b715:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff80000080b71c:	ff ff ff 
ffff80000080b71f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b723:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b725:	89 c2                	mov    edx,eax
ffff80000080b727:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b72e:	ff ff ff 
ffff80000080b731:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b735:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b738:	c1 e2 08             	shl    edx,0x8
ffff80000080b73b:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180
    root_sb->p_dev=&bd_ramdisk;
ffff80000080b73f:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b746:	ff ff ff 
ffff80000080b749:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b74d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b750:	48 ba a8 ff ff ff ff 	movabs rdx,0xffffffffffffffa8
ffff80000080b757:	ff ff ff 
ffff80000080b75a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b75e:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:181
}
ffff80000080b762:	90                   	nop
ffff80000080b763:	48 83 c4 20          	add    rsp,0x20
ffff80000080b767:	5b                   	pop    rbx
ffff80000080b768:	41 5f                	pop    r15
ffff80000080b76a:	5d                   	pop    rbp
ffff80000080b76b:	c3                   	ret    

ffff80000080b76c <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:21
#include "int.h"
#include <sys/mman.h>


unsigned long sys_putstring(char *string)
{
ffff80000080b76c:	f3 0f 1e fa          	endbr64 
ffff80000080b770:	55                   	push   rbp
ffff80000080b771:	48 89 e5             	mov    rbp,rsp
ffff80000080b774:	41 57                	push   r15
ffff80000080b776:	48 83 ec 18          	sub    rsp,0x18
ffff80000080b77a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080b77a <sys_putstring+0xe>
ffff80000080b781:	49 bb 7e 23 11 00 00 	movabs r11,0x11237e
ffff80000080b788:	00 00 00 
ffff80000080b78b:	4c 01 da             	add    rdx,r11
ffff80000080b78e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
    printf(string);
ffff80000080b792:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b796:	48 89 c7             	mov    rdi,rax
ffff80000080b799:	49 89 d7             	mov    r15,rdx
ffff80000080b79c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b7a1:	48 b9 fb 3b ee ff ff 	movabs rcx,0xffffffffffee3bfb
ffff80000080b7a8:	ff ff ff 
ffff80000080b7ab:	48 01 d1             	add    rcx,rdx
ffff80000080b7ae:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
    return 0;
ffff80000080b7b0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:24
}
ffff80000080b7b5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080b7b9:	c9                   	leave  
ffff80000080b7ba:	c3                   	ret    

ffff80000080b7bb <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:27

unsigned long sys_open(char *filename,int flags)
{
ffff80000080b7bb:	f3 0f 1e fa          	endbr64 
ffff80000080b7bf:	55                   	push   rbp
ffff80000080b7c0:	48 89 e5             	mov    rbp,rsp
ffff80000080b7c3:	41 57                	push   r15
ffff80000080b7c5:	53                   	push   rbx
ffff80000080b7c6:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffff80000080b7cd:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b7cd <sys_open+0x12>
ffff80000080b7d4:	49 bb 2b 23 11 00 00 	movabs r11,0x11232b
ffff80000080b7db:	00 00 00 
ffff80000080b7de:	4c 01 db             	add    rbx,r11
ffff80000080b7e1:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
ffff80000080b7e8:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28
    char * path = NULL;
ffff80000080b7ee:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080b7f5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    long pathlen = 0;
ffff80000080b7f6:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080b7fd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    long error = 0;
ffff80000080b7fe:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b805:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    struct dir_entry * dentry = NULL;
ffff80000080b806:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080b80d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct file * filp = NULL;
ffff80000080b80e:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080b815:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    struct file ** f = NULL;
ffff80000080b816:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080b81d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:34
    int fd = -1;
ffff80000080b81e:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:38
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc();
ffff80000080b825:	49 89 df             	mov    r15,rbx
ffff80000080b828:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b82d:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080b834:	ff ff ff 
ffff80000080b837:	48 01 da             	add    rdx,rbx
ffff80000080b83a:	ff d2                	call   rdx
ffff80000080b83c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
    if(path == NULL)
ffff80000080b840:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080b845:	75 0c                	jne    ffff80000080b853 <sys_open+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
        return -ENOMEM;
ffff80000080b847:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080b84e:	e9 fc 05 00 00       	jmp    ffff80000080be4f <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
    memset(path,0,PAGE_4K_SIZE);
ffff80000080b853:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b857:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080b85c:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b861:	48 89 c7             	mov    rdi,rax
ffff80000080b864:	49 89 df             	mov    r15,rbx
ffff80000080b867:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080b86e:	ff ff ff 
ffff80000080b871:	48 01 d8             	add    rax,rbx
ffff80000080b874:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    pathlen = strlen(filename);
ffff80000080b876:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080b87d:	48 89 c7             	mov    rdi,rax
ffff80000080b880:	49 89 df             	mov    r15,rbx
ffff80000080b883:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff80000080b88a:	ff ff ff 
ffff80000080b88d:	48 01 d8             	add    rax,rbx
ffff80000080b890:	ff d0                	call   rax
ffff80000080b892:	48 98                	cdqe   
ffff80000080b894:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:43
    if(pathlen <= 0)
ffff80000080b898:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080b89d:	7f 25                	jg     ffff80000080b8c4 <sys_open+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:45
    {
        kmfree(path);
ffff80000080b89f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b8a3:	48 89 c7             	mov    rdi,rax
ffff80000080b8a6:	49 89 df             	mov    r15,rbx
ffff80000080b8a9:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080b8b0:	ff ff ff 
ffff80000080b8b3:	48 01 d8             	add    rax,rbx
ffff80000080b8b6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:46
        return -EFAULT;
ffff80000080b8b8:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080b8bf:	e9 8b 05 00 00       	jmp    ffff80000080be4f <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:48
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080b8c4:	48 81 7d c0 ff 0f 00 	cmp    QWORD PTR [rbp-0x40],0xfff
ffff80000080b8cb:	00 
ffff80000080b8cc:	7e 25                	jle    ffff80000080b8f3 <sys_open+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:50
    {
        kmfree(path);
ffff80000080b8ce:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b8d2:	48 89 c7             	mov    rdi,rax
ffff80000080b8d5:	49 89 df             	mov    r15,rbx
ffff80000080b8d8:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080b8df:	ff ff ff 
ffff80000080b8e2:	48 01 d8             	add    rax,rbx
ffff80000080b8e5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:51
        return -ENAMETOOLONG;
ffff80000080b8e7:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080b8ee:	e9 5c 05 00 00       	jmp    ffff80000080be4f <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:53
    }
    strcpy(path,filename);
ffff80000080b8f3:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
ffff80000080b8fa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b8fe:	48 89 d6             	mov    rsi,rdx
ffff80000080b901:	48 89 c7             	mov    rdi,rax
ffff80000080b904:	49 89 df             	mov    r15,rbx
ffff80000080b907:	48 b8 70 51 ef ff ff 	movabs rax,0xffffffffffef5170
ffff80000080b90e:	ff ff ff 
ffff80000080b911:	48 01 d8             	add    rax,rbx
ffff80000080b914:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:55

    dentry = path_walk(path,0);
ffff80000080b916:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b91a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b91f:	48 89 c7             	mov    rdi,rax
ffff80000080b922:	49 89 df             	mov    r15,rbx
ffff80000080b925:	48 b8 e1 d2 ee ff ff 	movabs rax,0xffffffffffeed2e1
ffff80000080b92c:	ff ff ff 
ffff80000080b92f:	48 01 d8             	add    rax,rbx
ffff80000080b932:	ff d0                	call   rax
ffff80000080b934:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:57

    if(dentry == NULL){
ffff80000080b938:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080b93d:	0f 85 a8 02 00 00    	jne    ffff80000080bbeb <sys_open+0x430>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //找到上一级目录
        char* p=path+strlen(path)-1;
ffff80000080b943:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b947:	48 89 c7             	mov    rdi,rax
ffff80000080b94a:	49 89 df             	mov    r15,rbx
ffff80000080b94d:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff80000080b954:	ff ff ff 
ffff80000080b957:	48 01 d8             	add    rax,rbx
ffff80000080b95a:	ff d0                	call   rax
ffff80000080b95c:	48 98                	cdqe   
ffff80000080b95e:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080b962:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b966:	48 01 d0             	add    rax,rdx
ffff80000080b969:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63
        for(;*p!='/'&&p>path;p--);
ffff80000080b96d:	eb 05                	jmp    ffff80000080b974 <sys_open+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 3)
ffff80000080b96f:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 1)
ffff80000080b974:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b978:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b97b:	3c 2f                	cmp    al,0x2f
ffff80000080b97d:	74 0a                	je     ffff80000080b989 <sys_open+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 2)
ffff80000080b97f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b983:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080b987:	77 e6                	ja     ffff80000080b96f <sys_open+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        *p='\0';
ffff80000080b989:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b98d:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
ffff80000080b990:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b994:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080b999:	48 89 c7             	mov    rdi,rax
ffff80000080b99c:	49 89 df             	mov    r15,rbx
ffff80000080b99f:	48 b8 e1 d2 ee ff ff 	movabs rax,0xffffffffffeed2e1
ffff80000080b9a6:	ff ff ff 
ffff80000080b9a9:	48 01 d8             	add    rax,rbx
ffff80000080b9ac:	ff d0                	call   rax
ffff80000080b9ae:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
        if(parent==NULL)
ffff80000080b9b2:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080b9b7:	75 0c                	jne    ffff80000080b9c5 <sys_open+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:67
            return -ENOENT;//上级目录也不在
ffff80000080b9b9:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080b9c0:	e9 8a 04 00 00       	jmp    ffff80000080be4f <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:69
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc();
ffff80000080b9c5:	49 89 df             	mov    r15,rbx
ffff80000080b9c8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b9cd:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080b9d4:	ff ff ff 
ffff80000080b9d7:	48 01 da             	add    rdx,rbx
ffff80000080b9da:	ff d2                	call   rdx
ffff80000080b9dc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:70
        list_init(&dentry->subdirs_list);
ffff80000080b9e0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b9e4:	48 83 c0 28          	add    rax,0x28
ffff80000080b9e8:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080b9ef:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080b9f6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080b9fd:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080ba04:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080ba0b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080ba0c:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        list_init(&dentry->child_node);
ffff80000080ba0d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ba11:	48 83 c0 10          	add    rax,0x10
ffff80000080ba15:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080ba1c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ba23:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080ba2a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ba31:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080ba38:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080ba39:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        dentry->child_node.data=dentry;
ffff80000080ba3a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ba3e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ba42:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        list_add(&parent->subdirs_list,&dentry->child_node);
ffff80000080ba46:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ba4a:	48 83 c0 10          	add    rax,0x10
ffff80000080ba4e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080ba52:	48 83 c2 28          	add    rdx,0x28
ffff80000080ba56:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffff80000080ba5a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080ba5e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ba62:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ba66:	48 85 c0             	test   rax,rax
ffff80000080ba69:	75 50                	jne    ffff80000080babb <sys_open+0x300>
ffff80000080ba6b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ba6f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080ba73:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ba77:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080ba7b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ba7f:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080ba83:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ba87:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080ba8b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ba8f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080ba93:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080ba96:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ba9a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ba9e:	48 85 c0             	test   rax,rax
ffff80000080baa1:	0f 84 c2 00 00 00    	je     ffff80000080bb69 <sys_open+0x3ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080baa7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080baab:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080baaf:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080bab3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080bab6:	e9 ae 00 00 00       	jmp    ffff80000080bb69 <sys_open+0x3ae>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080babb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080babf:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080bac3:	eb 25                	jmp    ffff80000080baea <sys_open+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080bac5:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bac9:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080bacd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080bad1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bad5:	48 39 c2             	cmp    rdx,rax
ffff80000080bad8:	0f 84 8e 00 00 00    	je     ffff80000080bb6c <sys_open+0x3b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080bade:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bae2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bae6:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff80000080baea:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080baee:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080baf2:	48 85 c0             	test   rax,rax
ffff80000080baf5:	74 0e                	je     ffff80000080bb05 <sys_open+0x34a>
ffff80000080baf7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bafb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080baff:	48 39 45 80          	cmp    QWORD PTR [rbp-0x80],rax
ffff80000080bb03:	75 c0                	jne    ffff80000080bac5 <sys_open+0x30a>
ffff80000080bb05:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bb09:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff80000080bb10:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080bb14:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080bb1b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080bb22:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080bb26:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bb2d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080bb31:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bb38:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080bb3f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080bb42:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bb49:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bb4d:	48 85 c0             	test   rax,rax
ffff80000080bb50:	74 1d                	je     ffff80000080bb6f <sys_open+0x3b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080bb52:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bb59:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bb5d:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff80000080bb64:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080bb67:	eb 06                	jmp    ffff80000080bb6f <sys_open+0x3b4>
ffff80000080bb69:	90                   	nop
ffff80000080bb6a:	eb 04                	jmp    ffff80000080bb70 <sys_open+0x3b5>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080bb6c:	90                   	nop
ffff80000080bb6d:	eb 01                	jmp    ffff80000080bb70 <sys_open+0x3b5>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080bb6f:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        dentry->parent=parent;
ffff80000080bb70:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb74:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080bb78:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        dentry->dir_inode=dentry+1;//放在后面
ffff80000080bb7c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb80:	48 8d 50 58          	lea    rdx,[rax+0x58]
ffff80000080bb84:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb88:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:76
        dentry->dir_inode->file_size=0;
ffff80000080bb8c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb90:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bb94:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:78
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
ffff80000080bb9b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080bb9f:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080bba3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bba7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bbab:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080bbaf:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:79
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
ffff80000080bbb3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080bbb7:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080bbbb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bbbf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bbc3:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080bbc7:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:80
        dentry->dir_ops=parent->dir_ops;
ffff80000080bbcb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080bbcf:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
ffff80000080bbd3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bbd7:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:82
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
ffff80000080bbdb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bbdf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bbe3:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080bbea:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:84
    }
    kmfree(path);
ffff80000080bbeb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bbef:	48 89 c7             	mov    rdi,rax
ffff80000080bbf2:	49 89 df             	mov    r15,rbx
ffff80000080bbf5:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080bbfc:	ff ff ff 
ffff80000080bbff:	48 01 d8             	add    rax,rbx
ffff80000080bc02:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
ffff80000080bc04:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080bc0a:	25 00 40 00 00       	and    eax,0x4000
ffff80000080bc0f:	85 c0                	test   eax,eax
ffff80000080bc11:	74 1e                	je     ffff80000080bc31 <sys_open+0x476>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86 (discriminator 1)
ffff80000080bc13:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc17:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bc1b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bc1f:	48 83 f8 02          	cmp    rax,0x2
ffff80000080bc23:	74 0c                	je     ffff80000080bc31 <sys_open+0x476>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87
        return -ENOTDIR;
ffff80000080bc25:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080bc2c:	e9 1e 02 00 00       	jmp    ffff80000080be4f <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
ffff80000080bc31:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080bc37:	25 00 40 00 00       	and    eax,0x4000
ffff80000080bc3c:	85 c0                	test   eax,eax
ffff80000080bc3e:	75 1e                	jne    ffff80000080bc5e <sys_open+0x4a3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88 (discriminator 1)
ffff80000080bc40:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc44:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bc48:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bc4c:	48 83 f8 02          	cmp    rax,0x2
ffff80000080bc50:	75 0c                	jne    ffff80000080bc5e <sys_open+0x4a3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:89
        return -EISDIR;
ffff80000080bc52:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
ffff80000080bc59:	e9 f1 01 00 00       	jmp    ffff80000080be4f <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91

    filp = (struct file *) kmalloc();
ffff80000080bc5e:	49 89 df             	mov    r15,rbx
ffff80000080bc61:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080bc66:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080bc6d:	ff ff ff 
ffff80000080bc70:	48 01 da             	add    rdx,rbx
ffff80000080bc73:	ff d2                	call   rdx
ffff80000080bc75:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:92
    memset(filp,0,sizeof(struct file));
ffff80000080bc79:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bc7d:	ba 28 00 00 00       	mov    edx,0x28
ffff80000080bc82:	be 00 00 00 00       	mov    esi,0x0
ffff80000080bc87:	48 89 c7             	mov    rdi,rax
ffff80000080bc8a:	49 89 df             	mov    r15,rbx
ffff80000080bc8d:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080bc94:	ff ff ff 
ffff80000080bc97:	48 01 d8             	add    rax,rbx
ffff80000080bc9a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:93
    filp->dentry = dentry;
ffff80000080bc9c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bca0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080bca4:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:94
    filp->mode = flags;
ffff80000080bca8:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080bcae:	48 63 d0             	movsxd rdx,eax
ffff80000080bcb1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bcb5:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:96

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
ffff80000080bcb9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bcbd:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bcc1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bcc5:	83 e0 04             	and    eax,0x4
ffff80000080bcc8:	48 85 c0             	test   rax,rax
ffff80000080bccb:	74 18                	je     ffff80000080bce5 <sys_open+0x52a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:98
        extern struct file_operations devfs_fops;
        filp->f_ops = &devfs_fops;	//////	find device file operation function
ffff80000080bccd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bcd1:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080bcd8:	ff ff ff 
ffff80000080bcdb:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080bcdf:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffff80000080bce3:	eb 14                	jmp    ffff80000080bcf9 <sys_open+0x53e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
ffff80000080bce5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bce9:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bced:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080bcf1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bcf5:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102
    if(filp->f_ops && filp->f_ops->open)
ffff80000080bcf9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bcfd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bd01:	48 85 c0             	test   rax,rax
ffff80000080bd04:	74 33                	je     ffff80000080bd39 <sys_open+0x57e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102 (discriminator 1)
ffff80000080bd06:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd0a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bd0e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bd11:	48 85 c0             	test   rax,rax
ffff80000080bd14:	74 23                	je     ffff80000080bd39 <sys_open+0x57e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:103
        error = filp->f_ops->open(dentry->dir_inode,filp);
ffff80000080bd16:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd1a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bd1e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080bd21:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bd25:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bd29:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080bd2d:	48 89 d6             	mov    rsi,rdx
ffff80000080bd30:	48 89 c7             	mov    rdi,rax
ffff80000080bd33:	ff d1                	call   rcx
ffff80000080bd35:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:104
    if(error != 1)
ffff80000080bd39:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080bd3e:	74 25                	je     ffff80000080bd65 <sys_open+0x5aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
    {
        kmfree(filp);
ffff80000080bd40:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd44:	48 89 c7             	mov    rdi,rax
ffff80000080bd47:	49 89 df             	mov    r15,rbx
ffff80000080bd4a:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080bd51:	ff ff ff 
ffff80000080bd54:	48 01 d8             	add    rax,rbx
ffff80000080bd57:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:107
        return -EFAULT;
ffff80000080bd59:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080bd60:	e9 ea 00 00 00       	jmp    ffff80000080be4f <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:110
    }

    if(filp->mode & O_TRUNC)
ffff80000080bd65:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd69:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bd6d:	25 00 02 00 00       	and    eax,0x200
ffff80000080bd72:	48 85 c0             	test   rax,rax
ffff80000080bd75:	74 13                	je     ffff80000080bd8a <sys_open+0x5cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:112
    {
        filp->dentry->dir_inode->file_size = 0;
ffff80000080bd77:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd7b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bd7f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bd83:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:114
    }
    if(filp->mode & O_APPEND)
ffff80000080bd8a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd8e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bd92:	25 00 04 00 00       	and    eax,0x400
ffff80000080bd97:	48 85 c0             	test   rax,rax
ffff80000080bd9a:	74 19                	je     ffff80000080bdb5 <sys_open+0x5fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:116
    {
        filp->position = filp->dentry->dir_inode->file_size;
ffff80000080bd9c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bda0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bda4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bda8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bdab:	48 89 c2             	mov    rdx,rax
ffff80000080bdae:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bdb2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119
    }

    f = current->openf;
ffff80000080bdb5:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080bdbc:	ff ff ff 
ffff80000080bdbf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bdc3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bdc6:	48 05 f8 00 00 00    	add    rax,0xf8
ffff80000080bdcc:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080bdd0:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080bdd7:	eb 28                	jmp    ffff80000080be01 <sys_open+0x646>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:121
        if(f[i] == NULL)
ffff80000080bdd9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bddc:	48 98                	cdqe   
ffff80000080bdde:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080bde5:	00 
ffff80000080bde6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080bdea:	48 01 d0             	add    rax,rdx
ffff80000080bded:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bdf0:	48 85 c0             	test   rax,rax
ffff80000080bdf3:	75 08                	jne    ffff80000080bdfd <sys_open+0x642>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
        {
            fd = i;
ffff80000080bdf5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bdf8:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:124
            break;
ffff80000080bdfb:	eb 0a                	jmp    ffff80000080be07 <sys_open+0x64c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080bdfd:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120 (discriminator 1)
ffff80000080be01:	83 7d d8 1f          	cmp    DWORD PTR [rbp-0x28],0x1f
ffff80000080be05:	7e d2                	jle    ffff80000080bdd9 <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:126
        }
    if(i == MAX_TASKS)
ffff80000080be07:	83 7d d8 20          	cmp    DWORD PTR [rbp-0x28],0x20
ffff80000080be0b:	75 22                	jne    ffff80000080be2f <sys_open+0x674>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:128
    {
        kmfree(filp);
ffff80000080be0d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080be11:	48 89 c7             	mov    rdi,rax
ffff80000080be14:	49 89 df             	mov    r15,rbx
ffff80000080be17:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080be1e:	ff ff ff 
ffff80000080be21:	48 01 d8             	add    rax,rbx
ffff80000080be24:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:130
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
ffff80000080be26:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
ffff80000080be2d:	eb 20                	jmp    ffff80000080be4f <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:132
    }
    f[fd] = filp;
ffff80000080be2f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080be32:	48 98                	cdqe   
ffff80000080be34:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080be3b:	00 
ffff80000080be3c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080be40:	48 01 c2             	add    rdx,rax
ffff80000080be43:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080be47:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:134

    return fd;
ffff80000080be4a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080be4d:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:135
}
ffff80000080be4f:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffff80000080be56:	5b                   	pop    rbx
ffff80000080be57:	41 5f                	pop    r15
ffff80000080be59:	5d                   	pop    rbp
ffff80000080be5a:	c3                   	ret    

ffff80000080be5b <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:138

unsigned long sys_close(int fd)
{
ffff80000080be5b:	f3 0f 1e fa          	endbr64 
ffff80000080be5f:	55                   	push   rbp
ffff80000080be60:	48 89 e5             	mov    rbp,rsp
ffff80000080be63:	41 57                	push   r15
ffff80000080be65:	53                   	push   rbx
ffff80000080be66:	48 83 ec 20          	sub    rsp,0x20
ffff80000080be6a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080be6a <sys_close+0xf>
ffff80000080be71:	49 bb 8e 1c 11 00 00 	movabs r11,0x111c8e
ffff80000080be78:	00 00 00 
ffff80000080be7b:	4c 01 db             	add    rbx,r11
ffff80000080be7e:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:139
    struct file * filp = NULL;
ffff80000080be81:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080be88:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080be89:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080be8d:	78 06                	js     ffff80000080be95 <sys_close+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142 (discriminator 1)
ffff80000080be8f:	83 7d dc 1f          	cmp    DWORD PTR [rbp-0x24],0x1f
ffff80000080be93:	7e 0c                	jle    ffff80000080bea1 <sys_close+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:143
        return -EBADF;
ffff80000080be95:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080be9c:	e9 a8 00 00 00       	jmp    ffff80000080bf49 <sys_close+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145

    filp = current->openf[fd];
ffff80000080bea1:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080bea8:	ff ff ff 
ffff80000080beab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080beaf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080beb2:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080beb5:	48 63 d2             	movsxd rdx,edx
ffff80000080beb8:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080bebc:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080bec1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146
    if(filp->f_ops && filp->f_ops->close)
ffff80000080bec5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bec9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080becd:	48 85 c0             	test   rax,rax
ffff80000080bed0:	74 35                	je     ffff80000080bf07 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146 (discriminator 1)
ffff80000080bed2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bed6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080beda:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bede:	48 85 c0             	test   rax,rax
ffff80000080bee1:	74 24                	je     ffff80000080bf07 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:147
        filp->f_ops->close(filp->dentry->dir_inode,filp);
ffff80000080bee3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bee7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080beeb:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080beef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bef3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bef7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080befb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080beff:	48 89 d6             	mov    rsi,rdx
ffff80000080bf02:	48 89 c7             	mov    rdi,rax
ffff80000080bf05:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149

    kmfree(filp);
ffff80000080bf07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bf0b:	48 89 c7             	mov    rdi,rax
ffff80000080bf0e:	49 89 df             	mov    r15,rbx
ffff80000080bf11:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080bf18:	ff ff ff 
ffff80000080bf1b:	48 01 d8             	add    rax,rbx
ffff80000080bf1e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:150
    current->openf[fd] = NULL;
ffff80000080bf20:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080bf27:	ff ff ff 
ffff80000080bf2a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bf2e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bf31:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080bf34:	48 63 d2             	movsxd rdx,edx
ffff80000080bf37:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080bf3b:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
ffff80000080bf42:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152

    return 0;
ffff80000080bf44:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:153
}
ffff80000080bf49:	48 83 c4 20          	add    rsp,0x20
ffff80000080bf4d:	5b                   	pop    rbx
ffff80000080bf4e:	41 5f                	pop    r15
ffff80000080bf50:	5d                   	pop    rbp
ffff80000080bf51:	c3                   	ret    

ffff80000080bf52 <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:156

unsigned long sys_read(int fd,void * buf,long count)
{
ffff80000080bf52:	f3 0f 1e fa          	endbr64 
ffff80000080bf56:	55                   	push   rbp
ffff80000080bf57:	48 89 e5             	mov    rbp,rsp
ffff80000080bf5a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080bf5e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bf5e <sys_read+0xc>
ffff80000080bf65:	49 bb 9a 1b 11 00 00 	movabs r11,0x111b9a
ffff80000080bf6c:	00 00 00 
ffff80000080bf6f:	4c 01 d8             	add    rax,r11
ffff80000080bf72:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080bf75:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080bf79:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:157
    struct file * filp = NULL;
ffff80000080bf7d:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080bf84:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:158
    unsigned long ret = 0;
ffff80000080bf85:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080bf8c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080bf8d:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080bf91:	78 06                	js     ffff80000080bf99 <sys_read+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161 (discriminator 1)
ffff80000080bf93:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080bf97:	7e 09                	jle    ffff80000080bfa2 <sys_read+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:162
        return -EBADF;
ffff80000080bf99:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080bfa0:	eb 7c                	jmp    ffff80000080c01e <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163
    if(count < 0)
ffff80000080bfa2:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080bfa7:	79 09                	jns    ffff80000080bfb2 <sys_read+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:164
        return -EINVAL;
ffff80000080bfa9:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080bfb0:	eb 6c                	jmp    ffff80000080c01e <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166

    filp = current->openf[fd];
ffff80000080bfb2:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080bfb9:	ff ff ff 
ffff80000080bfbc:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080bfc0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bfc3:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080bfc6:	48 63 d2             	movsxd rdx,edx
ffff80000080bfc9:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080bfcd:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080bfd2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167
    if(filp->f_ops && filp->f_ops->read)
ffff80000080bfd6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bfda:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bfde:	48 85 c0             	test   rax,rax
ffff80000080bfe1:	74 37                	je     ffff80000080c01a <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167 (discriminator 1)
ffff80000080bfe3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bfe7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bfeb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bfef:	48 85 c0             	test   rax,rax
ffff80000080bff2:	74 26                	je     ffff80000080c01a <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:168
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
ffff80000080bff4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bff8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bffc:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080c000:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080c004:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c008:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c00c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c010:	48 89 c7             	mov    rdi,rax
ffff80000080c013:	41 ff d0             	call   r8
ffff80000080c016:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169
    return ret;
ffff80000080c01a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:170
}
ffff80000080c01e:	c9                   	leave  
ffff80000080c01f:	c3                   	ret    

ffff80000080c020 <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:173

unsigned long sys_write(int fd,void * buf,long count)
{
ffff80000080c020:	f3 0f 1e fa          	endbr64 
ffff80000080c024:	55                   	push   rbp
ffff80000080c025:	48 89 e5             	mov    rbp,rsp
ffff80000080c028:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c02c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c02c <sys_write+0xc>
ffff80000080c033:	49 bb cc 1a 11 00 00 	movabs r11,0x111acc
ffff80000080c03a:	00 00 00 
ffff80000080c03d:	4c 01 d8             	add    rax,r11
ffff80000080c040:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c043:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c047:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:174
    struct file * filp = NULL;
ffff80000080c04b:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c052:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:175
    unsigned long ret = 0;
ffff80000080c053:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c05a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080c05b:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c05f:	78 06                	js     ffff80000080c067 <sys_write+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178 (discriminator 1)
ffff80000080c061:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080c065:	7e 09                	jle    ffff80000080c070 <sys_write+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:179
        return -EBADF;
ffff80000080c067:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c06e:	eb 7c                	jmp    ffff80000080c0ec <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180
    if(count < 0)
ffff80000080c070:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c075:	79 09                	jns    ffff80000080c080 <sys_write+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:181
        return -EINVAL;
ffff80000080c077:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c07e:	eb 6c                	jmp    ffff80000080c0ec <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183

    filp = current->openf[fd];
ffff80000080c080:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c087:	ff ff ff 
ffff80000080c08a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c08e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c091:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c094:	48 63 d2             	movsxd rdx,edx
ffff80000080c097:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c09b:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c0a0:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184
    if(filp->f_ops && filp->f_ops->write)
ffff80000080c0a4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c0a8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c0ac:	48 85 c0             	test   rax,rax
ffff80000080c0af:	74 37                	je     ffff80000080c0e8 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184 (discriminator 1)
ffff80000080c0b1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c0b5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c0b9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c0bd:	48 85 c0             	test   rax,rax
ffff80000080c0c0:	74 26                	je     ffff80000080c0e8 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:185
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
ffff80000080c0c2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c0c6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c0ca:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
ffff80000080c0ce:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080c0d2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c0d6:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c0da:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c0de:	48 89 c7             	mov    rdi,rax
ffff80000080c0e1:	41 ff d0             	call   r8
ffff80000080c0e4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186
    return ret;
ffff80000080c0e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:187
}
ffff80000080c0ec:	c9                   	leave  
ffff80000080c0ed:	c3                   	ret    

ffff80000080c0ee <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:191


unsigned long sys_lseek(int filds,long offset,int whence)
{
ffff80000080c0ee:	f3 0f 1e fa          	endbr64 
ffff80000080c0f2:	55                   	push   rbp
ffff80000080c0f3:	48 89 e5             	mov    rbp,rsp
ffff80000080c0f6:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c0fa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c0fa <sys_lseek+0xc>
ffff80000080c101:	49 bb fe 19 11 00 00 	movabs r11,0x1119fe
ffff80000080c108:	00 00 00 
ffff80000080c10b:	4c 01 d8             	add    rax,r11
ffff80000080c10e:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c111:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c115:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:192
    struct file * filp = NULL;
ffff80000080c118:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c11f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:193
    unsigned long ret = 0;
ffff80000080c120:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c127:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
ffff80000080c128:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c12c:	78 06                	js     ffff80000080c134 <sys_lseek+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196 (discriminator 1)
ffff80000080c12e:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080c132:	7e 0c                	jle    ffff80000080c140 <sys_lseek+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197
        return -EBADF;
ffff80000080c134:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c13b:	e9 82 00 00 00       	jmp    ffff80000080c1c2 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198
    if(whence < 0 || whence >= SEEK_MAX)
ffff80000080c140:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080c144:	78 06                	js     ffff80000080c14c <sys_lseek+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198 (discriminator 1)
ffff80000080c146:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
ffff80000080c14a:	7e 09                	jle    ffff80000080c155 <sys_lseek+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:199
        return -EINVAL;
ffff80000080c14c:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c153:	eb 6d                	jmp    ffff80000080c1c2 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201

    filp = current->openf[filds];
ffff80000080c155:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c15c:	ff ff ff 
ffff80000080c15f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c163:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c166:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c169:	48 63 d2             	movsxd rdx,edx
ffff80000080c16c:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c170:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c175:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202
    if(filp->f_ops && filp->f_ops->lseek)
ffff80000080c179:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c17d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c181:	48 85 c0             	test   rax,rax
ffff80000080c184:	74 38                	je     ffff80000080c1be <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202 (discriminator 1)
ffff80000080c186:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c18a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c18e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080c192:	48 85 c0             	test   rax,rax
ffff80000080c195:	74 27                	je     ffff80000080c1be <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:203
        ret = filp->f_ops->lseek(filp,offset,whence);
ffff80000080c197:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c19b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c19f:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
ffff80000080c1a3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080c1a6:	48 63 d0             	movsxd rdx,eax
ffff80000080c1a9:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080c1ad:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c1b1:	48 89 ce             	mov    rsi,rcx
ffff80000080c1b4:	48 89 c7             	mov    rdi,rax
ffff80000080c1b7:	41 ff d0             	call   r8
ffff80000080c1ba:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204
    return ret;
ffff80000080c1be:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:205
}
ffff80000080c1c2:	c9                   	leave  
ffff80000080c1c3:	c3                   	ret    

ffff80000080c1c4 <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:215
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
ffff80000080c1c4:	f3 0f 1e fa          	endbr64 
ffff80000080c1c8:	55                   	push   rbp
ffff80000080c1c9:	48 89 e5             	mov    rbp,rsp
ffff80000080c1cc:	41 57                	push   r15
ffff80000080c1ce:	48 83 ec 18          	sub    rsp,0x18
ffff80000080c1d2:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080c1d2 <sys_vfork+0xe>
ffff80000080c1d9:	49 bb 26 19 11 00 00 	movabs r11,0x111926
ffff80000080c1e0:	00 00 00 
ffff80000080c1e3:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:216
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
ffff80000080c1e6:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080c1ed:	ff ff ff 
ffff80000080c1f0:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080c1f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c1f7:	48 8b 80 fc 01 00 00 	mov    rax,QWORD PTR [rax+0x1fc]
ffff80000080c1fe:	48 2d d0 00 00 00    	sub    rax,0xd0
ffff80000080c204:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:217
    printf("sys_vfork\n");
ffff80000080c208:	48 b8 f0 d7 ff ff ff 	movabs rax,0xffffffffffffd7f0
ffff80000080c20f:	ff ff ff 
ffff80000080c212:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080c216:	48 89 c7             	mov    rdi,rax
ffff80000080c219:	49 89 d7             	mov    r15,rdx
ffff80000080c21c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c221:	48 b9 fb 3b ee ff ff 	movabs rcx,0xffffffffffee3bfb
ffff80000080c228:	ff ff ff 
ffff80000080c22b:	48 01 d1             	add    rcx,rdx
ffff80000080c22e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:219
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
ffff80000080c230:	90                   	nop
ffff80000080c231:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c235:	c9                   	leave  
ffff80000080c236:	c3                   	ret    

ffff80000080c237 <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:262

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
ffff80000080c237:	f3 0f 1e fa          	endbr64 
ffff80000080c23b:	55                   	push   rbp
ffff80000080c23c:	48 89 e5             	mov    rbp,rsp
ffff80000080c23f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c23f <sys_wait+0x8>
ffff80000080c246:	49 bb b9 18 11 00 00 	movabs r11,0x1118b9
ffff80000080c24d:	00 00 00 
ffff80000080c250:	4c 01 d8             	add    rax,r11
ffff80000080c253:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
ffff80000080c256:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000080c25a:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:263
    struct process* waitee=NULL;
ffff80000080c25d:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c264:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:265
    extern struct process task[];
    if(!current->child_procs)
ffff80000080c265:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c26c:	ff ff ff 
ffff80000080c26f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c273:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c276:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c27d:	48 85 d2             	test   rdx,rdx
ffff80000080c280:	75 0c                	jne    ffff80000080c28e <sys_wait+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266
        return -ECHILD;//没有子进程可以等
ffff80000080c282:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080c289:	e9 ef 01 00 00       	jmp    ffff80000080c47d <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:267
    if(pid==-1){
ffff80000080c28e:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
ffff80000080c292:	75 58                	jne    ffff80000080c2ec <sys_wait+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c294:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c29b:	ff ff ff 
ffff80000080c29e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c2a2:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c2a5:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c2ac:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080c2b0:	eb 31                	jmp    ffff80000080c2e3 <sys_wait+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:271
                struct process* p=l->data;
ffff80000080c2b2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c2b6:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080c2ba:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:272
                if(p->stat == TASK_ZOMBIE) {
ffff80000080c2be:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080c2c2:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080c2c5:	83 fa 04             	cmp    edx,0x4
ffff80000080c2c8:	75 0d                	jne    ffff80000080c2d7 <sys_wait+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
                    waitee=p;
ffff80000080c2ca:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c2ce:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:274
                    goto done;
ffff80000080c2d2:	e9 46 01 00 00       	jmp    ffff80000080c41d <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c2d7:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c2db:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c2df:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270 (discriminator 1)
ffff80000080c2e3:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff80000080c2e8:	75 c8                	jne    ffff80000080c2b2 <sys_wait+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
ffff80000080c2ea:	eb a8                	jmp    ffff80000080c294 <sys_wait+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:279
                }
            }
        }

    }else if(pid==0) {
ffff80000080c2ec:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080c2f0:	75 77                	jne    ffff80000080c369 <sys_wait+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c2f2:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c2f9:	ff ff ff 
ffff80000080c2fc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c300:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c303:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c30a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c30e:	eb 50                	jmp    ffff80000080c360 <sys_wait+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283
                struct process* p=l->data;
ffff80000080c310:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c314:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080c318:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
ffff80000080c31c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c320:	8b 4a 04             	mov    ecx,DWORD PTR [rdx+0x4]
ffff80000080c323:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c32a:	ff ff ff 
ffff80000080c32d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c331:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c334:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080c337:	39 d1                	cmp    ecx,edx
ffff80000080c339:	75 19                	jne    ffff80000080c354 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284 (discriminator 1)
ffff80000080c33b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c33f:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080c342:	83 fa 04             	cmp    edx,0x4
ffff80000080c345:	75 0d                	jne    ffff80000080c354 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
                    waitee=p;
ffff80000080c347:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c34b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:286
                    goto done;
ffff80000080c34f:	e9 c9 00 00 00       	jmp    ffff80000080c41d <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c354:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c358:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c35c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282 (discriminator 1)
ffff80000080c360:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c365:	75 a9                	jne    ffff80000080c310 <sys_wait+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
ffff80000080c367:	eb 89                	jmp    ffff80000080c2f2 <sys_wait+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:291
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
ffff80000080c369:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080c36d:	79 03                	jns    ffff80000080c372 <sys_wait+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:291 (discriminator 1)
ffff80000080c36f:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080c372:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080c379:	eb 4f                	jmp    ffff80000080c3ca <sys_wait+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294
            if(task[i].pid==pid){
ffff80000080c37b:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080c382:	ff ff ff 
ffff80000080c385:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080c389:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080c38c:	48 63 d2             	movsxd rdx,edx
ffff80000080c38f:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080c396:	48 01 ca             	add    rdx,rcx
ffff80000080c399:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080c39b:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080c39e:	39 d1                	cmp    ecx,edx
ffff80000080c3a0:	75 24                	jne    ffff80000080c3c6 <sys_wait+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295
                waitee=&task[i];
ffff80000080c3a2:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080c3a5:	48 63 d2             	movsxd rdx,edx
ffff80000080c3a8:	48 69 ca 58 03 00 00 	imul   rcx,rdx,0x358
ffff80000080c3af:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080c3b6:	ff ff ff 
ffff80000080c3b9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c3bd:	48 01 ca             	add    rdx,rcx
ffff80000080c3c0:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:296
                break;
ffff80000080c3c4:	eb 0a                	jmp    ffff80000080c3d0 <sys_wait+0x199>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080c3c6:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293 (discriminator 1)
ffff80000080c3ca:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080c3ce:	7e ab                	jle    ffff80000080c37b <sys_wait+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
ffff80000080c3d0:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080c3d5:	74 21                	je     ffff80000080c3f8 <sys_wait+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299 (discriminator 1)
ffff80000080c3d7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c3db:	8b 92 bc 00 00 00    	mov    edx,DWORD PTR [rdx+0xbc]
ffff80000080c3e1:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff80000080c3e8:	ff ff ff 
ffff80000080c3eb:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080c3ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c3f2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c3f4:	39 c2                	cmp    edx,eax
ffff80000080c3f6:	74 09                	je     ffff80000080c401 <sys_wait+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:300
            return -ECHILD;//没有这个进程或者不是子进程
ffff80000080c3f8:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080c3ff:	eb 7c                	jmp    ffff80000080c47d <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
ffff80000080c401:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302 (discriminator 1)
ffff80000080c402:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c406:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080c409:	83 f8 04             	cmp    eax,0x4
ffff80000080c40c:	75 f4                	jne    ffff80000080c402 <sys_wait+0x1cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:303
        *stat_loc=waitee->exit_code;
ffff80000080c40e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c412:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080c415:	89 c2                	mov    edx,eax
ffff80000080c417:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c41b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:307
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
ffff80000080c41d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c421:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:309
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
ffff80000080c428:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c42c:	48 05 34 03 00 00    	add    rax,0x334
ffff80000080c432:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
    }
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
ffff80000080c436:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c43a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c43d:	48 85 c0             	test   rax,rax
ffff80000080c440:	74 13                	je     ffff80000080c455 <sys_wait+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:48
        entry->prev->next=entry->next;
ffff80000080c442:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c446:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c449:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c44d:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c451:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:49
    if(entry->next)
ffff80000080c455:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c459:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c45d:	48 85 c0             	test   rax,rax
ffff80000080c460:	74 12                	je     ffff80000080c474 <sys_wait+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:50
        entry->next->prev=entry->prev;
ffff80000080c462:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c466:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c46a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c46e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c471:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:51
}
ffff80000080c474:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:311
    //TODO 被信号中断时返回-1
    return waitee->pid;
ffff80000080c475:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c479:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c47b:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:312
}
ffff80000080c47d:	5d                   	pop    rbp
ffff80000080c47e:	c3                   	ret    

ffff80000080c47f <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:314
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
ffff80000080c47f:	f3 0f 1e fa          	endbr64 
ffff80000080c483:	55                   	push   rbp
ffff80000080c484:	48 89 e5             	mov    rbp,rsp
ffff80000080c487:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c487 <sys_wait4+0x8>
ffff80000080c48e:	49 bb 71 16 11 00 00 	movabs r11,0x111671
ffff80000080c495:	00 00 00 
ffff80000080c498:	4c 01 d8             	add    rax,r11
ffff80000080c49b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c49f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c4a3:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080c4a6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:350
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
ffff80000080c4aa:	90                   	nop
ffff80000080c4ab:	5d                   	pop    rbp
ffff80000080c4ac:	c3                   	ret    

ffff80000080c4ad <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:353

unsigned long sys_brk(unsigned long brk)
{
ffff80000080c4ad:	f3 0f 1e fa          	endbr64 
ffff80000080c4b1:	55                   	push   rbp
ffff80000080c4b2:	48 89 e5             	mov    rbp,rsp
ffff80000080c4b5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c4b5 <sys_brk+0x8>
ffff80000080c4bc:	49 bb 43 16 11 00 00 	movabs r11,0x111643
ffff80000080c4c3:	00 00 00 
ffff80000080c4c6:	4c 01 d8             	add    rax,r11
ffff80000080c4c9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:367
//
//    new_brk = do_brk(current->mm->end_brk,new_brk - current->mm->end_brk);	//expand brk space
//
//    current->mm->end_brk = new_brk;
//    return new_brk;
}
ffff80000080c4cd:	90                   	nop
ffff80000080c4ce:	5d                   	pop    rbp
ffff80000080c4cf:	c3                   	ret    

ffff80000080c4d0 <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:370

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
ffff80000080c4d0:	f3 0f 1e fa          	endbr64 
ffff80000080c4d4:	55                   	push   rbp
ffff80000080c4d5:	48 89 e5             	mov    rbp,rsp
ffff80000080c4d8:	41 57                	push   r15
ffff80000080c4da:	53                   	push   rbx
ffff80000080c4db:	48 83 ec 10          	sub    rsp,0x10
ffff80000080c4df:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c4df <sys_reboot+0xf>
ffff80000080c4e6:	49 bb 19 16 11 00 00 	movabs r11,0x111619
ffff80000080c4ed:	00 00 00 
ffff80000080c4f0:	4c 01 db             	add    rbx,r11
ffff80000080c4f3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080c4f7:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:371
    printf("sys_reboot\n");
ffff80000080c4fb:	48 b8 fb d7 ff ff ff 	movabs rax,0xffffffffffffd7fb
ffff80000080c502:	ff ff ff 
ffff80000080c505:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c509:	48 89 c7             	mov    rdi,rax
ffff80000080c50c:	49 89 df             	mov    r15,rbx
ffff80000080c50f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c514:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080c51b:	ff ff ff 
ffff80000080c51e:	48 01 da             	add    rdx,rbx
ffff80000080c521:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:372
    switch(cmd)
ffff80000080c523:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080c528:	74 09                	je     ffff80000080c533 <sys_reboot+0x63>
ffff80000080c52a:	48 83 7d e8 02       	cmp    QWORD PTR [rbp-0x18],0x2
ffff80000080c52f:	74 20                	je     ffff80000080c551 <sys_reboot+0x81>
ffff80000080c531:	eb 48                	jmp    ffff80000080c57b <sys_reboot+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:375
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
ffff80000080c533:	be fe 00 00 00       	mov    esi,0xfe
ffff80000080c538:	bf 64 00 00 00       	mov    edi,0x64
ffff80000080c53d:	49 89 df             	mov    r15,rbx
ffff80000080c540:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080c547:	ff ff ff 
ffff80000080c54a:	48 01 d8             	add    rax,rbx
ffff80000080c54d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:376
            break;
ffff80000080c54f:	eb 53                	jmp    ffff80000080c5a4 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:379

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
ffff80000080c551:	48 b8 08 d8 ff ff ff 	movabs rax,0xffffffffffffd808
ffff80000080c558:	ff ff ff 
ffff80000080c55b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c55f:	48 89 c7             	mov    rdi,rax
ffff80000080c562:	49 89 df             	mov    r15,rbx
ffff80000080c565:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c56a:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080c571:	ff ff ff 
ffff80000080c574:	48 01 da             	add    rdx,rbx
ffff80000080c577:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:380
            break;
ffff80000080c579:	eb 29                	jmp    ffff80000080c5a4 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383

        default:
            printf("sys_reboot cmd ERROR!\n");
ffff80000080c57b:	48 b8 28 d8 ff ff ff 	movabs rax,0xffffffffffffd828
ffff80000080c582:	ff ff ff 
ffff80000080c585:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c589:	48 89 c7             	mov    rdi,rax
ffff80000080c58c:	49 89 df             	mov    r15,rbx
ffff80000080c58f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c594:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080c59b:	ff ff ff 
ffff80000080c59e:	48 01 da             	add    rdx,rbx
ffff80000080c5a1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:384
            break;
ffff80000080c5a3:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386
    }
    return 0;
ffff80000080c5a4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:387
}
ffff80000080c5a9:	48 83 c4 10          	add    rsp,0x10
ffff80000080c5ad:	5b                   	pop    rbx
ffff80000080c5ae:	41 5f                	pop    r15
ffff80000080c5b0:	5d                   	pop    rbp
ffff80000080c5b1:	c3                   	ret    

ffff80000080c5b2 <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:391


unsigned long sys_chdir(char *filename)
{
ffff80000080c5b2:	f3 0f 1e fa          	endbr64 
ffff80000080c5b6:	55                   	push   rbp
ffff80000080c5b7:	48 89 e5             	mov    rbp,rsp
ffff80000080c5ba:	41 57                	push   r15
ffff80000080c5bc:	53                   	push   rbx
ffff80000080c5bd:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c5c1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c5c1 <sys_chdir+0xf>
ffff80000080c5c8:	49 bb 37 15 11 00 00 	movabs r11,0x111537
ffff80000080c5cf:	00 00 00 
ffff80000080c5d2:	4c 01 db             	add    rbx,r11
ffff80000080c5d5:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:392
    char * path = NULL;
ffff80000080c5d9:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c5e0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:393
    long pathlen = 0;
ffff80000080c5e1:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080c5e8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:394
    struct dir_entry * dentry = NULL;
ffff80000080c5e9:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080c5f0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:396

    printf("sys_chdir\n");
ffff80000080c5f1:	48 b8 3f d8 ff ff ff 	movabs rax,0xffffffffffffd83f
ffff80000080c5f8:	ff ff ff 
ffff80000080c5fb:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c5ff:	48 89 c7             	mov    rdi,rax
ffff80000080c602:	49 89 df             	mov    r15,rbx
ffff80000080c605:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c60a:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080c611:	ff ff ff 
ffff80000080c614:	48 01 da             	add    rdx,rbx
ffff80000080c617:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:397
    path = (char *) kmalloc();
ffff80000080c619:	49 89 df             	mov    r15,rbx
ffff80000080c61c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c621:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080c628:	ff ff ff 
ffff80000080c62b:	48 01 da             	add    rdx,rbx
ffff80000080c62e:	ff d2                	call   rdx
ffff80000080c630:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:399

    if(path == NULL)
ffff80000080c634:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c639:	75 0c                	jne    ffff80000080c647 <sys_chdir+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:400
        return -ENOMEM;
ffff80000080c63b:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080c642:	e9 28 01 00 00       	jmp    ffff80000080c76f <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:401
    memset(path,0,PAGE_4K_SIZE);
ffff80000080c647:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c64b:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080c650:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c655:	48 89 c7             	mov    rdi,rax
ffff80000080c658:	49 89 df             	mov    r15,rbx
ffff80000080c65b:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080c662:	ff ff ff 
ffff80000080c665:	48 01 d8             	add    rax,rbx
ffff80000080c668:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:402
    pathlen = strlen(filename);
ffff80000080c66a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c66e:	48 89 c7             	mov    rdi,rax
ffff80000080c671:	49 89 df             	mov    r15,rbx
ffff80000080c674:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff80000080c67b:	ff ff ff 
ffff80000080c67e:	48 01 d8             	add    rax,rbx
ffff80000080c681:	ff d0                	call   rax
ffff80000080c683:	48 98                	cdqe   
ffff80000080c685:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:403
    if(pathlen <= 0)
ffff80000080c689:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080c68e:	7f 25                	jg     ffff80000080c6b5 <sys_chdir+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
    {
        kmfree(path);
ffff80000080c690:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c694:	48 89 c7             	mov    rdi,rax
ffff80000080c697:	49 89 df             	mov    r15,rbx
ffff80000080c69a:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080c6a1:	ff ff ff 
ffff80000080c6a4:	48 01 d8             	add    rax,rbx
ffff80000080c6a7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:406
        return -EFAULT;
ffff80000080c6a9:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080c6b0:	e9 ba 00 00 00       	jmp    ffff80000080c76f <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:408
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080c6b5:	48 81 7d e0 ff 0f 00 	cmp    QWORD PTR [rbp-0x20],0xfff
ffff80000080c6bc:	00 
ffff80000080c6bd:	7e 25                	jle    ffff80000080c6e4 <sys_chdir+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:410
    {
        kmfree(path);
ffff80000080c6bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c6c3:	48 89 c7             	mov    rdi,rax
ffff80000080c6c6:	49 89 df             	mov    r15,rbx
ffff80000080c6c9:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080c6d0:	ff ff ff 
ffff80000080c6d3:	48 01 d8             	add    rax,rbx
ffff80000080c6d6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:411
        return -ENAMETOOLONG;
ffff80000080c6d8:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080c6df:	e9 8b 00 00 00       	jmp    ffff80000080c76f <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:413
    }
    strcpy(filename,path);
ffff80000080c6e4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c6e8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c6ec:	48 89 d6             	mov    rsi,rdx
ffff80000080c6ef:	48 89 c7             	mov    rdi,rax
ffff80000080c6f2:	49 89 df             	mov    r15,rbx
ffff80000080c6f5:	48 b8 70 51 ef ff ff 	movabs rax,0xffffffffffef5170
ffff80000080c6fc:	ff ff ff 
ffff80000080c6ff:	48 01 d8             	add    rax,rbx
ffff80000080c702:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:415

    dentry = path_walk(path,0);
ffff80000080c704:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c708:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c70d:	48 89 c7             	mov    rdi,rax
ffff80000080c710:	49 89 df             	mov    r15,rbx
ffff80000080c713:	48 b8 e1 d2 ee ff ff 	movabs rax,0xffffffffffeed2e1
ffff80000080c71a:	ff ff ff 
ffff80000080c71d:	48 01 d8             	add    rax,rbx
ffff80000080c720:	ff d0                	call   rax
ffff80000080c722:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:416
    kmfree(path);
ffff80000080c726:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c72a:	48 89 c7             	mov    rdi,rax
ffff80000080c72d:	49 89 df             	mov    r15,rbx
ffff80000080c730:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080c737:	ff ff ff 
ffff80000080c73a:	48 01 d8             	add    rax,rbx
ffff80000080c73d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:418

    if(dentry == NULL)
ffff80000080c73f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c744:	75 09                	jne    ffff80000080c74f <sys_chdir+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
        return -ENOENT;
ffff80000080c746:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080c74d:	eb 20                	jmp    ffff80000080c76f <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:420
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
ffff80000080c74f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c753:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c757:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c75b:	48 83 f8 02          	cmp    rax,0x2
ffff80000080c75f:	74 09                	je     ffff80000080c76a <sys_chdir+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421
        return -ENOTDIR;
ffff80000080c761:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080c768:	eb 05                	jmp    ffff80000080c76f <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
    return 0;
ffff80000080c76a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:423
}
ffff80000080c76f:	48 83 c4 30          	add    rsp,0x30
ffff80000080c773:	5b                   	pop    rbx
ffff80000080c774:	41 5f                	pop    r15
ffff80000080c776:	5d                   	pop    rbp
ffff80000080c777:	c3                   	ret    

ffff80000080c778 <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426

unsigned long sys_getdents(int fd, void * dirent, long count)
{
ffff80000080c778:	f3 0f 1e fa          	endbr64 
ffff80000080c77c:	55                   	push   rbp
ffff80000080c77d:	48 89 e5             	mov    rbp,rsp
ffff80000080c780:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c784:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c784 <sys_getdents+0xc>
ffff80000080c78b:	49 bb 74 13 11 00 00 	movabs r11,0x111374
ffff80000080c792:	00 00 00 
ffff80000080c795:	4c 01 d8             	add    rax,r11
ffff80000080c798:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c79b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c79f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:427
    struct file * filp = NULL;
ffff80000080c7a3:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c7aa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:428
    unsigned long ret = 0;
ffff80000080c7ab:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c7b2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
ffff80000080c7b3:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c7b7:	78 06                	js     ffff80000080c7bf <sys_getdents+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431 (discriminator 1)
ffff80000080c7b9:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
ffff80000080c7bd:	7e 0c                	jle    ffff80000080c7cb <sys_getdents+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:432
        return -EBADF;
ffff80000080c7bf:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c7c6:	e9 85 00 00 00       	jmp    ffff80000080c850 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:433
    if(count < 0)
ffff80000080c7cb:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c7d0:	79 09                	jns    ffff80000080c7db <sys_getdents+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:434
        return -EINVAL;
ffff80000080c7d2:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c7d9:	eb 75                	jmp    ffff80000080c850 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436

    filp = current->openf[fd];
ffff80000080c7db:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c7e2:	ff ff ff 
ffff80000080c7e5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c7e9:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c7ec:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080c7ef:	48 63 c9             	movsxd rcx,ecx
ffff80000080c7f2:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080c7f6:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080c7fb:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437
    if(filp->f_ops && filp->f_ops->readdir)
ffff80000080c7ff:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c803:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c807:	48 85 d2             	test   rdx,rdx
ffff80000080c80a:	74 40                	je     ffff80000080c84c <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437 (discriminator 1)
ffff80000080c80c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c810:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c814:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080c818:	48 85 d2             	test   rdx,rdx
ffff80000080c81b:	74 2f                	je     ffff80000080c84c <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:438
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
ffff80000080c81d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c821:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c825:	4c 8b 42 30          	mov    r8,QWORD PTR [rdx+0x30]
ffff80000080c829:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c82d:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080c831:	48 ba 80 ff ff ff ff 	movabs rdx,0xffffffffffffff80
ffff80000080c838:	ff ff ff 
ffff80000080c83b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c83f:	48 89 c2             	mov    rdx,rax
ffff80000080c842:	48 89 cf             	mov    rdi,rcx
ffff80000080c845:	41 ff d0             	call   r8
ffff80000080c848:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439
    return ret;
ffff80000080c84c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:440
}
ffff80000080c850:	c9                   	leave  
ffff80000080c851:	c3                   	ret    

ffff80000080c852 <sys_mmap>:
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:442

void *sys_mmap(void *addr, size_t len, int prot, int flags,int fildes, off_t off){
ffff80000080c852:	f3 0f 1e fa          	endbr64 
ffff80000080c856:	55                   	push   rbp
ffff80000080c857:	48 89 e5             	mov    rbp,rsp
ffff80000080c85a:	41 57                	push   r15
ffff80000080c85c:	41 56                	push   r14
ffff80000080c85e:	41 55                	push   r13
ffff80000080c860:	41 54                	push   r12
ffff80000080c862:	53                   	push   rbx
ffff80000080c863:	48 83 ec 48          	sub    rsp,0x48
ffff80000080c867:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c867 <sys_mmap+0x15>
ffff80000080c86e:	49 bb 91 12 11 00 00 	movabs r11,0x111291
ffff80000080c875:	00 00 00 
ffff80000080c878:	4c 01 db             	add    rbx,r11
ffff80000080c87b:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff80000080c87f:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080c883:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
ffff80000080c886:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
ffff80000080c889:	44 89 45 94          	mov    DWORD PTR [rbp-0x6c],r8d
ffff80000080c88d:	44 89 4d 90          	mov    DWORD PTR [rbp-0x70],r9d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:443
    int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080c891:	c7 45 c4 05 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x5
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:445
    if((prot|PROT_WRITE)||(prot|PROT_EXEC))
        attr|=PAGE_RWX;
ffff80000080c898:	83 4d c4 02          	or     DWORD PTR [rbp-0x3c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:446
    if(addr){
ffff80000080c89c:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080c8a1:	0f 84 16 01 00 00    	je     ffff80000080c9bd <sys_mmap+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:447
        if(chk_mmap(addr,len)){
ffff80000080c8a7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c8ab:	89 c2                	mov    edx,eax
ffff80000080c8ad:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c8b1:	48 89 c6             	mov    rsi,rax
ffff80000080c8b4:	89 d7                	mov    edi,edx
ffff80000080c8b6:	49 89 df             	mov    r15,rbx
ffff80000080c8b9:	48 b8 e6 9b ee ff ff 	movabs rax,0xffffffffffee9be6
ffff80000080c8c0:	ff ff ff 
ffff80000080c8c3:	48 01 d8             	add    rax,rbx
ffff80000080c8c6:	ff d0                	call   rax
ffff80000080c8c8:	85 c0                	test   eax,eax
ffff80000080c8ca:	0f 84 8f 00 00 00    	je     ffff80000080c95f <sys_mmap+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:448
            int pgc=(len-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080c8d0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c8d4:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080c8da:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080c8de:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449
            for(int i=0;i<pgc;i++){
ffff80000080c8e1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080c8e8:	eb 68                	jmp    ffff80000080c952 <sys_mmap+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:450 (discriminator 3)
                smmap(pmalloc(),addr+i*PAGE_4K_SIZE,attr,current->pml4);
ffff80000080c8ea:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080c8f1:	ff ff ff 
ffff80000080c8f4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c8f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c8fb:	4c 8b a8 e0 00 00 00 	mov    r13,QWORD PTR [rax+0xe0]
ffff80000080c902:	44 8b 65 c4          	mov    r12d,DWORD PTR [rbp-0x3c]
ffff80000080c906:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080c909:	c1 e0 0c             	shl    eax,0xc
ffff80000080c90c:	48 63 d0             	movsxd rdx,eax
ffff80000080c90f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c913:	48 01 d0             	add    rax,rdx
ffff80000080c916:	49 89 c6             	mov    r14,rax
ffff80000080c919:	49 89 df             	mov    r15,rbx
ffff80000080c91c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c921:	48 ba ec 50 ee ff ff 	movabs rdx,0xffffffffffee50ec
ffff80000080c928:	ff ff ff 
ffff80000080c92b:	48 01 da             	add    rdx,rbx
ffff80000080c92e:	ff d2                	call   rdx
ffff80000080c930:	4c 89 e9             	mov    rcx,r13
ffff80000080c933:	44 89 e2             	mov    edx,r12d
ffff80000080c936:	4c 89 f6             	mov    rsi,r14
ffff80000080c939:	48 89 c7             	mov    rdi,rax
ffff80000080c93c:	49 89 df             	mov    r15,rbx
ffff80000080c93f:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff80000080c946:	ff ff ff 
ffff80000080c949:	48 01 d8             	add    rax,rbx
ffff80000080c94c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449 (discriminator 3)
            for(int i=0;i<pgc;i++){
ffff80000080c94e:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449 (discriminator 1)
ffff80000080c952:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080c955:	3b 45 bc             	cmp    eax,DWORD PTR [rbp-0x44]
ffff80000080c958:	7c 90                	jl     ffff80000080c8ea <sys_mmap+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:453

            }
            goto sync_f;
ffff80000080c95a:	e9 0e 01 00 00       	jmp    ffff80000080ca6d <sys_mmap+0x21b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:456
        }
        if(flags|MAP_FIXED){
            set_errno(-ENOMEM);
ffff80000080c95f:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080c964:	49 89 df             	mov    r15,rbx
ffff80000080c967:	48 b8 a7 a2 ee ff ff 	movabs rax,0xffffffffffeea2a7
ffff80000080c96e:	ff ff ff 
ffff80000080c971:	48 01 d8             	add    rax,rbx
ffff80000080c974:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:457
            return MAP_FAILED;
ffff80000080c976:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080c97d:	e9 ef 00 00 00       	jmp    ffff80000080ca71 <sys_mmap+0x21f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:463
        }
    }
    //寻找一块空的虚拟内存
    while (!chk_mmap(addr,len))
    {
        addr+=PAGE_4K_SIZE;
ffff80000080c982:	48 81 45 a8 00 10 00 	add    QWORD PTR [rbp-0x58],0x1000
ffff80000080c989:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:464
        if(addr>=KNL_BASE){
ffff80000080c98a:	48 b8 ff ff ff ff ff 	movabs rax,0xffff7fffffffffff
ffff80000080c991:	7f ff ff 
ffff80000080c994:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080c998:	76 23                	jbe    ffff80000080c9bd <sys_mmap+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:465
            set_errno(-ENOMEM);
ffff80000080c99a:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080c99f:	49 89 df             	mov    r15,rbx
ffff80000080c9a2:	48 b8 a7 a2 ee ff ff 	movabs rax,0xffffffffffeea2a7
ffff80000080c9a9:	ff ff ff 
ffff80000080c9ac:	48 01 d8             	add    rax,rbx
ffff80000080c9af:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:466
            return MAP_FAILED;
ffff80000080c9b1:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080c9b8:	e9 b4 00 00 00       	jmp    ffff80000080ca71 <sys_mmap+0x21f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:461
    while (!chk_mmap(addr,len))
ffff80000080c9bd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c9c1:	89 c2                	mov    edx,eax
ffff80000080c9c3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c9c7:	48 89 c6             	mov    rsi,rax
ffff80000080c9ca:	89 d7                	mov    edi,edx
ffff80000080c9cc:	49 89 df             	mov    r15,rbx
ffff80000080c9cf:	48 b8 e6 9b ee ff ff 	movabs rax,0xffffffffffee9be6
ffff80000080c9d6:	ff ff ff 
ffff80000080c9d9:	48 01 d8             	add    rax,rbx
ffff80000080c9dc:	ff d0                	call   rax
ffff80000080c9de:	85 c0                	test   eax,eax
ffff80000080c9e0:	74 a0                	je     ffff80000080c982 <sys_mmap+0x130>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:469
        }
    }
    int pgc=(len-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080c9e2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c9e6:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080c9ec:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080c9f0:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470
    for(int i=0;i<pgc;i++){
ffff80000080c9f3:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff80000080c9fa:	eb 68                	jmp    ffff80000080ca64 <sys_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:471 (discriminator 3)
        smmap(pmalloc(),addr+i*PAGE_4K_SIZE,attr,current->pml4);
ffff80000080c9fc:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080ca03:	ff ff ff 
ffff80000080ca06:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ca0a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ca0d:	4c 8b a8 e0 00 00 00 	mov    r13,QWORD PTR [rax+0xe0]
ffff80000080ca14:	44 8b 65 c4          	mov    r12d,DWORD PTR [rbp-0x3c]
ffff80000080ca18:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff80000080ca1b:	c1 e0 0c             	shl    eax,0xc
ffff80000080ca1e:	48 63 d0             	movsxd rdx,eax
ffff80000080ca21:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ca25:	48 01 d0             	add    rax,rdx
ffff80000080ca28:	49 89 c6             	mov    r14,rax
ffff80000080ca2b:	49 89 df             	mov    r15,rbx
ffff80000080ca2e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ca33:	48 ba ec 50 ee ff ff 	movabs rdx,0xffffffffffee50ec
ffff80000080ca3a:	ff ff ff 
ffff80000080ca3d:	48 01 da             	add    rdx,rbx
ffff80000080ca40:	ff d2                	call   rdx
ffff80000080ca42:	4c 89 e9             	mov    rcx,r13
ffff80000080ca45:	44 89 e2             	mov    edx,r12d
ffff80000080ca48:	4c 89 f6             	mov    rsi,r14
ffff80000080ca4b:	48 89 c7             	mov    rdi,rax
ffff80000080ca4e:	49 89 df             	mov    r15,rbx
ffff80000080ca51:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff80000080ca58:	ff ff ff 
ffff80000080ca5b:	48 01 d8             	add    rax,rbx
ffff80000080ca5e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff80000080ca60:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470 (discriminator 1)
ffff80000080ca64:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff80000080ca67:	3b 45 c0             	cmp    eax,DWORD PTR [rbp-0x40]
ffff80000080ca6a:	7c 90                	jl     ffff80000080c9fc <sys_mmap+0x1aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:473
    }
sync_f:
ffff80000080ca6c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:476
    if(flags|MAP_ANNONYMOUS){
        //不需要映射到文件，匿名映射
        return addr;
ffff80000080ca6d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:484
    //目前先一致读取
    sys_lseek(fildes,off,SEEK_SET);
    sys_read(fildes,addr,len);
    return addr;
    
}
ffff80000080ca71:	48 83 c4 48          	add    rsp,0x48
ffff80000080ca75:	5b                   	pop    rbx
ffff80000080ca76:	41 5c                	pop    r12
ffff80000080ca78:	41 5d                	pop    r13
ffff80000080ca7a:	41 5e                	pop    r14
ffff80000080ca7c:	41 5f                	pop    r15
ffff80000080ca7e:	5d                   	pop    rbp
ffff80000080ca7f:	c3                   	ret    

ffff80000080ca80 <init_ramfs>:
init_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:28
};
struct index_node_operations ramfs_iops={
        .lookup=lookup_inode_ramfs,.create=create_inode_ramfs
};
struct index_node* test;
void init_ramfs(){
ffff80000080ca80:	f3 0f 1e fa          	endbr64 
ffff80000080ca84:	55                   	push   rbp
ffff80000080ca85:	48 89 e5             	mov    rbp,rsp
ffff80000080ca88:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ca88 <init_ramfs+0x8>
ffff80000080ca8f:	49 bb 70 10 11 00 00 	movabs r11,0x111070
ffff80000080ca96:	00 00 00 
ffff80000080ca99:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:31
    //挂载新文件系统到/mnt,设备为/dev/ram

    ramfs_sb.sb_ops=&ramfs_fops;
ffff80000080ca9c:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080caa3:	ff ff ff 
ffff80000080caa6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080caaa:	48 b9 40 fd ff ff ff 	movabs rcx,0xfffffffffffffd40
ffff80000080cab1:	ff ff ff 
ffff80000080cab4:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080cab8:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:32
    ramfs_sb.root=dmnt;
ffff80000080cabc:	48 ba e0 fe ff ff ff 	movabs rdx,0xfffffffffffffee0
ffff80000080cac3:	ff ff ff 
ffff80000080cac6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080caca:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080cacd:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080cad4:	ff ff ff 
ffff80000080cad7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cadb:	48 89 0a             	mov    QWORD PTR [rdx],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:33
    ramfs_sb.p_dev=&bd_ramdisk;
ffff80000080cade:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080cae5:	ff ff ff 
ffff80000080cae8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080caec:	48 b9 a8 ff ff ff ff 	movabs rcx,0xffffffffffffffa8
ffff80000080caf3:	ff ff ff 
ffff80000080caf6:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080cafa:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:34
    ramfs_sb.dev=dev_ramdisk;
ffff80000080cafe:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080cb05:	ff ff ff 
ffff80000080cb08:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cb0c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080cb0e:	89 d1                	mov    ecx,edx
ffff80000080cb10:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080cb17:	ff ff ff 
ffff80000080cb1a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cb1e:	66 89 48 10          	mov    WORD PTR [rax+0x10],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:45
    // test->sb=&ramfs_sb;
    // test->attribute=FS_ATTR_FILE;
    // test->inode_ops=&ramfs_iops;
    //设置一下dmnt的inode的操作，查找的时候会用到
    // dmnt->dir_inode->inode_ops=&ramfs_iops;
}
ffff80000080cb22:	90                   	nop
ffff80000080cb23:	5d                   	pop    rbp
ffff80000080cb24:	c3                   	ret    

ffff80000080cb25 <create_inode_ramfs>:
create_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:47

long create_inode_ramfs(struct index_node * inode,struct dir_entry * dentry,int mode){}
ffff80000080cb25:	f3 0f 1e fa          	endbr64 
ffff80000080cb29:	55                   	push   rbp
ffff80000080cb2a:	48 89 e5             	mov    rbp,rsp
ffff80000080cb2d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cb2d <create_inode_ramfs+0x8>
ffff80000080cb34:	49 bb cb 0f 11 00 00 	movabs r11,0x110fcb
ffff80000080cb3b:	00 00 00 
ffff80000080cb3e:	4c 01 d8             	add    rax,r11
ffff80000080cb41:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cb45:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080cb49:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080cb4c:	90                   	nop
ffff80000080cb4d:	5d                   	pop    rbp
ffff80000080cb4e:	c3                   	ret    

ffff80000080cb4f <lookup_inode_ramfs>:
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:48
struct dir_entry* lookup_inode_ramfs(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080cb4f:	f3 0f 1e fa          	endbr64 
ffff80000080cb53:	55                   	push   rbp
ffff80000080cb54:	48 89 e5             	mov    rbp,rsp
ffff80000080cb57:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cb57 <lookup_inode_ramfs+0x8>
ffff80000080cb5e:	49 bb a1 0f 11 00 00 	movabs r11,0x110fa1
ffff80000080cb65:	00 00 00 
ffff80000080cb68:	4c 01 d8             	add    rax,r11
ffff80000080cb6b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080cb6f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:49
    list_init(&dest_dentry->subdirs_list);
ffff80000080cb73:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cb77:	48 83 c2 28          	add    rdx,0x28
ffff80000080cb7b:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cb7f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080cb83:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cb8a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080cb8e:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080cb95:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cb96:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:50
    list_init(&dest_dentry->child_node);
ffff80000080cb97:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cb9b:	48 83 c2 10          	add    rdx,0x10
ffff80000080cb9f:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cba3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080cba7:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cbae:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080cbb2:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080cbb9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cbba:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:51
    dest_dentry->dir_inode=test;
ffff80000080cbbb:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080cbc2:	ff ff ff 
ffff80000080cbc5:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cbc9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cbcc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cbd0:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:52
    dest_dentry->child_node.data=dest_dentry;
ffff80000080cbd4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cbd8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cbdc:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:53
    return dest_dentry;
ffff80000080cbe0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:54
}
ffff80000080cbe4:	5d                   	pop    rbp
ffff80000080cbe5:	c3                   	ret    

ffff80000080cbe6 <open_ramfs>:
open_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:55
long open_ramfs(struct index_node * inode,struct file * filp){
ffff80000080cbe6:	f3 0f 1e fa          	endbr64 
ffff80000080cbea:	55                   	push   rbp
ffff80000080cbeb:	48 89 e5             	mov    rbp,rsp
ffff80000080cbee:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cbee <open_ramfs+0x8>
ffff80000080cbf5:	49 bb 0a 0f 11 00 00 	movabs r11,0x110f0a
ffff80000080cbfc:	00 00 00 
ffff80000080cbff:	4c 01 d8             	add    rax,r11
ffff80000080cc02:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cc06:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:56
    filp->f_ops=inode->f_ops;
ffff80000080cc0a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080cc0e:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080cc12:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080cc16:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:57
    filp->position=0;
ffff80000080cc1a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080cc1e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:58
    return 1;
ffff80000080cc25:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:59
}
ffff80000080cc2a:	5d                   	pop    rbp
ffff80000080cc2b:	c3                   	ret    

ffff80000080cc2c <close_ramfs>:
close_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:61

long close_ramfs(struct index_node * inode,struct file * filp){
ffff80000080cc2c:	f3 0f 1e fa          	endbr64 
ffff80000080cc30:	55                   	push   rbp
ffff80000080cc31:	48 89 e5             	mov    rbp,rsp
ffff80000080cc34:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cc34 <close_ramfs+0x8>
ffff80000080cc3b:	49 bb c4 0e 11 00 00 	movabs r11,0x110ec4
ffff80000080cc42:	00 00 00 
ffff80000080cc45:	4c 01 d8             	add    rax,r11
ffff80000080cc48:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cc4c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:62
    return 0;
ffff80000080cc50:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:63
}
ffff80000080cc55:	5d                   	pop    rbp
ffff80000080cc56:	c3                   	ret    

ffff80000080cc57 <read_ramfs>:
read_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:65
//注意一下:position是指针
long read_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080cc57:	f3 0f 1e fa          	endbr64 
ffff80000080cc5b:	55                   	push   rbp
ffff80000080cc5c:	48 89 e5             	mov    rbp,rsp
ffff80000080cc5f:	41 57                	push   r15
ffff80000080cc61:	48 83 ec 28          	sub    rsp,0x28
ffff80000080cc65:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cc65 <read_ramfs+0xe>
ffff80000080cc6c:	49 bb 93 0e 11 00 00 	movabs r11,0x110e93
ffff80000080cc73:	00 00 00 
ffff80000080cc76:	4c 01 d8             	add    rax,r11
ffff80000080cc79:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080cc7d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080cc81:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080cc85:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:66
    blkdev_read(filp->dentry->dir_inode->dev,*position,count,buf);
ffff80000080cc89:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080cc8d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080cc90:	89 d6                	mov    esi,edx
ffff80000080cc92:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080cc96:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080cc9a:	48 8b 52 40          	mov    rdx,QWORD PTR [rdx+0x40]
ffff80000080cc9e:	0f b7 52 18          	movzx  edx,WORD PTR [rdx+0x18]
ffff80000080cca2:	0f b7 fa             	movzx  edi,dx
ffff80000080cca5:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080cca9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ccad:	49 89 c7             	mov    r15,rax
ffff80000080ccb0:	49 b8 1a 00 ef ff ff 	movabs r8,0xffffffffffef001a
ffff80000080ccb7:	ff ff ff 
ffff80000080ccba:	49 01 c0             	add    r8,rax
ffff80000080ccbd:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:73
    if(len>count)len=count;
    for(int i=0;i<len;i++){
        buf[i]=_binary_bin_test_elf_start[i + *position];
    }
    *position+=len; */
    return 0;
ffff80000080ccc0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:74
}
ffff80000080ccc5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ccc9:	c9                   	leave  
ffff80000080ccca:	c3                   	ret    

ffff80000080cccb <write_ramfs>:
write_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:75
long write_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080cccb:	f3 0f 1e fa          	endbr64 
ffff80000080cccf:	55                   	push   rbp
ffff80000080ccd0:	48 89 e5             	mov    rbp,rsp
ffff80000080ccd3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ccd3 <write_ramfs+0x8>
ffff80000080ccda:	49 bb 25 0e 11 00 00 	movabs r11,0x110e25
ffff80000080cce1:	00 00 00 
ffff80000080cce4:	4c 01 d8             	add    rax,r11
ffff80000080cce7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cceb:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080ccef:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080ccf3:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:76
    return 0;
ffff80000080ccf7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:77
}
ffff80000080ccfc:	5d                   	pop    rbp
ffff80000080ccfd:	c3                   	ret    

ffff80000080ccfe <ioctl_ramfs>:
ioctl_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:78
long ioctl_ramfs(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080ccfe:	f3 0f 1e fa          	endbr64 
ffff80000080cd02:	55                   	push   rbp
ffff80000080cd03:	48 89 e5             	mov    rbp,rsp
ffff80000080cd06:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cd06 <ioctl_ramfs+0x8>
ffff80000080cd0d:	49 bb f2 0d 11 00 00 	movabs r11,0x110df2
ffff80000080cd14:	00 00 00 
ffff80000080cd17:	4c 01 d8             	add    rax,r11
ffff80000080cd1a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cd1e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080cd22:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080cd26:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:79
    return 0;
ffff80000080cd2a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:80
ffff80000080cd2f:	5d                   	pop    rbp
ffff80000080cd30:	c3                   	ret    

ffff80000080cd31 <ramdisk_do_req>:
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:22
long ramdisk_size;
int dev_ramdisk=-1;
struct blk_dev bd_ramdisk={
    .do_request=ramdisk_do_req
};
void ramdisk_do_req(struct request* req){
ffff80000080cd31:	f3 0f 1e fa          	endbr64 
ffff80000080cd35:	55                   	push   rbp
ffff80000080cd36:	48 89 e5             	mov    rbp,rsp
ffff80000080cd39:	48 83 ec 40          	sub    rsp,0x40
ffff80000080cd3d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cd3d <ramdisk_do_req+0xc>
ffff80000080cd44:	49 bb bb 0d 11 00 00 	movabs r11,0x110dbb
ffff80000080cd4b:	00 00 00 
ffff80000080cd4e:	4c 01 d8             	add    rax,r11
ffff80000080cd51:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:23
    if(!req)
ffff80000080cd55:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080cd5a:	0f 84 0c 02 00 00    	je     ffff80000080cf6c <ramdisk_do_req+0x23b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:25
        return;
    start_request(req->dev);
ffff80000080cd60:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cd64:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080cd67:	0f b7 d2             	movzx  edx,dx
ffff80000080cd6a:	66 89 55 e6          	mov    WORD PTR [rbp-0x1a],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
    int major=BLKDEV_MAJOR(dev);
    blk_devs[major].current_request->dev=-1;
    blk_devs[major].current_request=blk_devs[major].current_request->next;
}
__attribute__((__always_inline__))inline void start_request(unsigned short dev){
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080cd6e:	0f b7 55 e6          	movzx  edx,WORD PTR [rbp-0x1a]
ffff80000080cd72:	c1 fa 04             	sar    edx,0x4
ffff80000080cd75:	89 d1                	mov    ecx,edx
ffff80000080cd77:	83 e1 0f             	and    ecx,0xf
ffff80000080cd7a:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080cd81:	ff ff ff 
ffff80000080cd84:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080cd88:	48 63 d1             	movsxd rdx,ecx
ffff80000080cd8b:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cd8f:	48 01 f2             	add    rdx,rsi
ffff80000080cd92:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080cd96:	48 8b 52 2a          	mov    rdx,QWORD PTR [rdx+0x2a]
ffff80000080cd9a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:195
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline void wait_on_req(struct process* p){
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080cd9e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cda2:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080cda5:	83 fa 02             	cmp    edx,0x2
ffff80000080cda8:	74 0c                	je     ffff80000080cdb6 <ramdisk_do_req+0x85>
ffff80000080cdaa:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cdae:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080cdb1:	83 fa 01             	cmp    edx,0x1
ffff80000080cdb4:	75 0b                	jne    ffff80000080cdc1 <ramdisk_do_req+0x90>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
            p->stat=TASK_SUSPENDED;
ffff80000080cdb6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cdba:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
}
ffff80000080cdc1:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
ffff80000080cdc2:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:26
    switch (req->cmd)
ffff80000080cdc3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cdc7:	8b 52 02             	mov    edx,DWORD PTR [rdx+0x2]
ffff80000080cdca:	85 d2                	test   edx,edx
ffff80000080cdcc:	74 0a                	je     ffff80000080cdd8 <ramdisk_do_req+0xa7>
ffff80000080cdce:	83 fa 01             	cmp    edx,0x1
ffff80000080cdd1:	74 6e                	je     ffff80000080ce41 <ramdisk_do_req+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:43
        for(int i=0;i<lenw;i++){
            ramdisk_base[i + basew]=req->buffer[i];
        }
        break;
    default:
        break;
ffff80000080cdd3:	e9 d1 00 00 00       	jmp    ffff80000080cea9 <ramdisk_do_req+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:29
        int len= req->nr_sectors*SECTOR_SIZE;
ffff80000080cdd8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cddc:	48 8b 52 12          	mov    rdx,QWORD PTR [rdx+0x12]
ffff80000080cde0:	c1 e2 09             	shl    edx,0x9
ffff80000080cde3:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:30
        int base=req->sector*SECTOR_SIZE;
ffff80000080cde6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cdea:	48 8b 52 0a          	mov    rdx,QWORD PTR [rdx+0xa]
ffff80000080cdee:	c1 e2 09             	shl    edx,0x9
ffff80000080cdf1:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31
        for(int i=0;i<len;i++){
ffff80000080cdf4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080cdfb:	eb 3a                	jmp    ffff80000080ce37 <ramdisk_do_req+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:32 (discriminator 3)
            req->buffer[i]=ramdisk_base[i + base];
ffff80000080cdfd:	48 ba e8 ff ff ff ff 	movabs rdx,0xffffffffffffffe8
ffff80000080ce04:	ff ff ff 
ffff80000080ce07:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ce0b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080ce0e:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff80000080ce11:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080ce14:	01 f2                	add    edx,esi
ffff80000080ce16:	48 63 d2             	movsxd rdx,edx
ffff80000080ce19:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080ce1d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce21:	48 8b 4a 22          	mov    rcx,QWORD PTR [rdx+0x22]
ffff80000080ce25:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080ce28:	48 63 d2             	movsxd rdx,edx
ffff80000080ce2b:	48 01 d1             	add    rcx,rdx
ffff80000080ce2e:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080ce31:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 3)
        for(int i=0;i<len;i++){
ffff80000080ce33:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 1)
ffff80000080ce37:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080ce3a:	3b 55 ec             	cmp    edx,DWORD PTR [rbp-0x14]
ffff80000080ce3d:	7c be                	jl     ffff80000080cdfd <ramdisk_do_req+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:34
        break;
ffff80000080ce3f:	eb 68                	jmp    ffff80000080cea9 <ramdisk_do_req+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36
        int lenw= req->nr_sectors*BLOCK_SIZE;
ffff80000080ce41:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce45:	48 8b 52 12          	mov    rdx,QWORD PTR [rdx+0x12]
ffff80000080ce49:	c1 e2 0c             	shl    edx,0xc
ffff80000080ce4c:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:37
        int basew=req->sector*BLOCK_SIZE;
ffff80000080ce4f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce53:	48 8b 52 0a          	mov    rdx,QWORD PTR [rdx+0xa]
ffff80000080ce57:	c1 e2 0c             	shl    edx,0xc
ffff80000080ce5a:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38
        for(int i=0;i<lenw;i++){
ffff80000080ce5d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080ce64:	eb 3a                	jmp    ffff80000080cea0 <ramdisk_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:39 (discriminator 3)
            ramdisk_base[i + basew]=req->buffer[i];
ffff80000080ce66:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce6a:	48 8b 4a 22          	mov    rcx,QWORD PTR [rdx+0x22]
ffff80000080ce6e:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080ce71:	48 63 d2             	movsxd rdx,edx
ffff80000080ce74:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080ce78:	48 ba e8 ff ff ff ff 	movabs rdx,0xffffffffffffffe8
ffff80000080ce7f:	ff ff ff 
ffff80000080ce82:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ce86:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080ce89:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
ffff80000080ce8c:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080ce8f:	01 fa                	add    edx,edi
ffff80000080ce91:	48 63 d2             	movsxd rdx,edx
ffff80000080ce94:	48 01 d1             	add    rcx,rdx
ffff80000080ce97:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080ce9a:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 3)
        for(int i=0;i<lenw;i++){
ffff80000080ce9c:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 1)
ffff80000080cea0:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080cea3:	3b 55 f4             	cmp    edx,DWORD PTR [rbp-0xc]
ffff80000080cea6:	7c be                	jl     ffff80000080ce66 <ramdisk_do_req+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:41
        break;
ffff80000080cea8:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:45
    }
    end_request(req->dev);
ffff80000080cea9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cead:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080ceb0:	0f b7 d2             	movzx  edx,dx
ffff80000080ceb3:	66 89 55 d6          	mov    WORD PTR [rbp-0x2a],dx
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:64
    int major=BLKDEV_MAJOR(dev);
ffff80000080ceb7:	0f b7 55 d6          	movzx  edx,WORD PTR [rbp-0x2a]
ffff80000080cebb:	c1 fa 04             	sar    edx,0x4
ffff80000080cebe:	83 e2 0f             	and    edx,0xf
ffff80000080cec1:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    blk_devs[major].current_request->dev=-1;
ffff80000080cec4:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080cecb:	ff ff ff 
ffff80000080cece:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080ced2:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080ced5:	48 63 d2             	movsxd rdx,edx
ffff80000080ced8:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cedc:	48 01 ca             	add    rdx,rcx
ffff80000080cedf:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080cee3:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080cee8:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080ceef:	ff ff ff 
ffff80000080cef2:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080cef6:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080cef9:	48 63 d2             	movsxd rdx,edx
ffff80000080cefc:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cf00:	48 01 ca             	add    rdx,rcx
ffff80000080cf03:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080cf07:	48 8b 52 32          	mov    rdx,QWORD PTR [rdx+0x32]
ffff80000080cf0b:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080cf12:	ff ff ff 
ffff80000080cf15:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080cf19:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
ffff80000080cf1c:	48 63 c9             	movsxd rcx,ecx
ffff80000080cf1f:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080cf23:	48 01 f1             	add    rcx,rsi
ffff80000080cf26:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
}
ffff80000080cf2a:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:46
    ramdisk_do_req(blk_devs[dev_ramdisk].current_request);
ffff80000080cf2b:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080cf32:	ff ff ff 
ffff80000080cf35:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cf39:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080cf3b:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080cf42:	ff ff ff 
ffff80000080cf45:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080cf49:	48 63 d2             	movsxd rdx,edx
ffff80000080cf4c:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cf50:	48 01 ca             	add    rdx,rcx
ffff80000080cf53:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080cf57:	48 89 d7             	mov    rdi,rdx
ffff80000080cf5a:	48 ba 39 f2 ee ff ff 	movabs rdx,0xffffffffffeef239
ffff80000080cf61:	ff ff ff 
ffff80000080cf64:	48 8d 04 10          	lea    rax,[rax+rdx*1]
ffff80000080cf68:	ff d0                	call   rax
ffff80000080cf6a:	eb 01                	jmp    ffff80000080cf6d <ramdisk_do_req+0x23c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:24
        return;
ffff80000080cf6c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:47
}
ffff80000080cf6d:	c9                   	leave  
ffff80000080cf6e:	c3                   	ret    

ffff80000080cf6f <init_ramdisk>:
init_ramdisk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:48
void init_ramdisk(){
ffff80000080cf6f:	f3 0f 1e fa          	endbr64 
ffff80000080cf73:	55                   	push   rbp
ffff80000080cf74:	48 89 e5             	mov    rbp,rsp
ffff80000080cf77:	41 57                	push   r15
ffff80000080cf79:	41 54                	push   r12
ffff80000080cf7b:	53                   	push   rbx
ffff80000080cf7c:	48 83 ec 18          	sub    rsp,0x18
ffff80000080cf80:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cf80 <init_ramdisk+0x11>
ffff80000080cf87:	49 bb 78 0b 11 00 00 	movabs r11,0x110b78
ffff80000080cf8e:	00 00 00 
ffff80000080cf91:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:50
    //初始化ramdisk，在/dev下创建一个ram
    ramdisk_base= KNL_BASE+0x81000000;//(char *) kmallocat(0, 100);
ffff80000080cf94:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080cf9b:	ff ff ff 
ffff80000080cf9e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cfa2:	48 be 00 00 00 81 00 	movabs rsi,0xffff800081000000
ffff80000080cfa9:	80 ff ff 
ffff80000080cfac:	48 89 30             	mov    QWORD PTR [rax],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:51
    if(ramdisk_base==-1){
ffff80000080cfaf:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080cfb6:	ff ff ff 
ffff80000080cfb9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cfbd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cfc0:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
ffff80000080cfc4:	75 2d                	jne    ffff80000080cff3 <init_ramdisk+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:52
        comprintf("failed to init ramdisk.\n");
ffff80000080cfc6:	48 b8 4a d8 ff ff ff 	movabs rax,0xffffffffffffd84a
ffff80000080cfcd:	ff ff ff 
ffff80000080cfd0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080cfd4:	48 89 c7             	mov    rdi,rax
ffff80000080cfd7:	49 89 df             	mov    r15,rbx
ffff80000080cfda:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cfdf:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff80000080cfe6:	ff ff ff 
ffff80000080cfe9:	48 01 da             	add    rdx,rbx
ffff80000080cfec:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:53
        return;
ffff80000080cfee:	e9 a3 01 00 00       	jmp    ffff80000080d196 <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:55
    }
    ramdisk_size= (char*)_binary_rd_img_end - (char*)_binary_rd_img_start;//PAGE_4K_SIZE*100;
ffff80000080cff3:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff80000080cffa:	ff ff ff 
ffff80000080cffd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d001:	48 89 c2             	mov    rdx,rax
ffff80000080d004:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080d00b:	ff ff ff 
ffff80000080d00e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d012:	48 29 c2             	sub    rdx,rax
ffff80000080d015:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff80000080d01c:	ff ff ff 
ffff80000080d01f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d023:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:56
    if((dev_ramdisk=reg_blkdev(&bd_ramdisk))<0){
ffff80000080d026:	48 b8 a8 ff ff ff ff 	movabs rax,0xffffffffffffffa8
ffff80000080d02d:	ff ff ff 
ffff80000080d030:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d034:	48 89 c7             	mov    rdi,rax
ffff80000080d037:	49 89 df             	mov    r15,rbx
ffff80000080d03a:	48 b8 a9 f6 ee ff ff 	movabs rax,0xffffffffffeef6a9
ffff80000080d041:	ff ff ff 
ffff80000080d044:	48 01 d8             	add    rax,rbx
ffff80000080d047:	ff d0                	call   rax
ffff80000080d049:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080d050:	ff ff ff 
ffff80000080d053:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d057:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080d059:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff80000080d060:	ff ff ff 
ffff80000080d063:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d067:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d069:	85 c0                	test   eax,eax
ffff80000080d06b:	79 2d                	jns    ffff80000080d09a <init_ramdisk+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:57
        comprintf("no place for more blkdev.\n");
ffff80000080d06d:	48 b8 63 d8 ff ff ff 	movabs rax,0xffffffffffffd863
ffff80000080d074:	ff ff ff 
ffff80000080d077:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d07b:	48 89 c7             	mov    rdi,rax
ffff80000080d07e:	49 89 df             	mov    r15,rbx
ffff80000080d081:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d086:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff80000080d08d:	ff ff ff 
ffff80000080d090:	48 01 da             	add    rdx,rbx
ffff80000080d093:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58
        return;
ffff80000080d095:	e9 fc 00 00 00       	jmp    ffff80000080d196 <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60
    }
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080d09a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080d0a1:	e9 b8 00 00 00       	jmp    ffff80000080d15e <init_ramdisk+0x1ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:61 (discriminator 3)
        smmap(pmalloc(),ramdisk_base+i*PAGE_4K_SIZE,PAGE_PRESENT|PAGE_RWX,PML4_ADDR);
ffff80000080d0a6:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080d0ad:	ff ff ff 
ffff80000080d0b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d0b4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d0b7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d0ba:	c1 e0 0c             	shl    eax,0xc
ffff80000080d0bd:	48 98                	cdqe   
ffff80000080d0bf:	48 01 d0             	add    rax,rdx
ffff80000080d0c2:	49 89 c4             	mov    r12,rax
ffff80000080d0c5:	49 89 df             	mov    r15,rbx
ffff80000080d0c8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d0cd:	48 ba ec 50 ee ff ff 	movabs rdx,0xffffffffffee50ec
ffff80000080d0d4:	ff ff ff 
ffff80000080d0d7:	48 01 da             	add    rdx,rbx
ffff80000080d0da:	ff d2                	call   rdx
ffff80000080d0dc:	48 89 c7             	mov    rdi,rax
ffff80000080d0df:	48 b8 00 10 10 00 00 	movabs rax,0xffff800000101000
ffff80000080d0e6:	80 ff ff 
ffff80000080d0e9:	48 89 c1             	mov    rcx,rax
ffff80000080d0ec:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080d0f1:	4c 89 e6             	mov    rsi,r12
ffff80000080d0f4:	49 89 df             	mov    r15,rbx
ffff80000080d0f7:	48 b8 01 40 ee ff ff 	movabs rax,0xffffffffffee4001
ffff80000080d0fe:	ff ff ff 
ffff80000080d101:	48 01 d8             	add    rax,rbx
ffff80000080d104:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:63 (discriminator 3)
        //解压img里面的test程序
        memcpy(ramdisk_base+i*PAGE_4K_SIZE, _binary_rd_img_start+i*PAGE_4K_SIZE,PAGE_4K_SIZE);
ffff80000080d106:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d109:	c1 e0 0c             	shl    eax,0xc
ffff80000080d10c:	48 63 d0             	movsxd rdx,eax
ffff80000080d10f:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080d116:	ff ff ff 
ffff80000080d119:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d11d:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080d121:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080d128:	ff ff ff 
ffff80000080d12b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d12f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d132:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d135:	c1 e0 0c             	shl    eax,0xc
ffff80000080d138:	48 98                	cdqe   
ffff80000080d13a:	48 01 d0             	add    rax,rdx
ffff80000080d13d:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d142:	48 89 ce             	mov    rsi,rcx
ffff80000080d145:	48 89 c7             	mov    rdi,rax
ffff80000080d148:	49 89 df             	mov    r15,rbx
ffff80000080d14b:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080d152:	ff ff ff 
ffff80000080d155:	48 01 d8             	add    rax,rbx
ffff80000080d158:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 3)
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080d15a:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 1)
ffff80000080d15e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d161:	48 63 d0             	movsxd rdx,eax
ffff80000080d164:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff80000080d16b:	ff ff ff 
ffff80000080d16e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d172:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d175:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080d17b:	48 8d 88 ff 0f 00 00 	lea    rcx,[rax+0xfff]
ffff80000080d182:	48 85 c0             	test   rax,rax
ffff80000080d185:	48 0f 48 c1          	cmovs  rax,rcx
ffff80000080d189:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080d18d:	48 39 c2             	cmp    rdx,rax
ffff80000080d190:	0f 8c 10 ff ff ff    	jl     ffff80000080d0a6 <init_ramdisk+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:68

    }

    
}
ffff80000080d196:	48 83 c4 18          	add    rsp,0x18
ffff80000080d19a:	5b                   	pop    rbx
ffff80000080d19b:	41 5c                	pop    r12
ffff80000080d19d:	41 5f                	pop    r15
ffff80000080d19f:	5d                   	pop    rbp
ffff80000080d1a0:	c3                   	ret    

ffff80000080d1a1 <reg_blkdev>:
reg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:5
#include <blk_dev.h>
#include <errno.h>
struct blk_dev blk_devs[MAX_BLKDEVS];
struct request requests[MAX_REQUESTS];
int reg_blkdev(struct blk_dev* dev){
ffff80000080d1a1:	f3 0f 1e fa          	endbr64 
ffff80000080d1a5:	55                   	push   rbp
ffff80000080d1a6:	48 89 e5             	mov    rbp,rsp
ffff80000080d1a9:	53                   	push   rbx
ffff80000080d1aa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d1aa <reg_blkdev+0x9>
ffff80000080d1b1:	49 bb 4e 09 11 00 00 	movabs r11,0x11094e
ffff80000080d1b8:	00 00 00 
ffff80000080d1bb:	4c 01 d8             	add    rax,r11
ffff80000080d1be:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080d1c2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080d1c9:	e9 80 00 00 00       	jmp    ffff80000080d24e <reg_blkdev+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080d1ce:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d1d5:	ff ff ff 
ffff80000080d1d8:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d1dc:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d1df:	48 63 d2             	movsxd rdx,edx
ffff80000080d1e2:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d1e6:	48 01 ca             	add    rdx,rcx
ffff80000080d1e9:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d1ec:	48 85 d2             	test   rdx,rdx
ffff80000080d1ef:	75 58                	jne    ffff80000080d249 <reg_blkdev+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:8
        blk_devs[i]=*dev;
ffff80000080d1f1:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d1f8:	ff ff ff 
ffff80000080d1fb:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d1ff:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d202:	48 63 d2             	movsxd rdx,edx
ffff80000080d205:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d209:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080d20d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d211:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080d214:	48 8b 5a 08          	mov    rbx,QWORD PTR [rdx+0x8]
ffff80000080d218:	48 89 0e             	mov    QWORD PTR [rsi],rcx
ffff80000080d21b:	48 89 5e 08          	mov    QWORD PTR [rsi+0x8],rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:9
        blk_devs[i].current_request=NULL;
ffff80000080d21f:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d226:	ff ff ff 
ffff80000080d229:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d22d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080d230:	48 98                	cdqe   
ffff80000080d232:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d236:	48 01 d0             	add    rax,rdx
ffff80000080d239:	48 83 c0 08          	add    rax,0x8
ffff80000080d23d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:10
        return i;
ffff80000080d244:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080d247:	eb 14                	jmp    ffff80000080d25d <reg_blkdev+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080d249:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080d24a:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6 (discriminator 1)
ffff80000080d24e:	83 7d f4 0b          	cmp    DWORD PTR [rbp-0xc],0xb
ffff80000080d252:	0f 8e 76 ff ff ff    	jle    ffff80000080d1ce <reg_blkdev+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:12
    }
    return -ENOMEM;
ffff80000080d258:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:13
}
ffff80000080d25d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080d261:	c9                   	leave  
ffff80000080d262:	c3                   	ret    

ffff80000080d263 <unreg_blkdev>:
unreg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:14
int unreg_blkdev(unsigned short dev){
ffff80000080d263:	f3 0f 1e fa          	endbr64 
ffff80000080d267:	55                   	push   rbp
ffff80000080d268:	48 89 e5             	mov    rbp,rsp
ffff80000080d26b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d26b <unreg_blkdev+0x8>
ffff80000080d272:	49 bb 8d 08 11 00 00 	movabs r11,0x11088d
ffff80000080d279:	00 00 00 
ffff80000080d27c:	4c 01 d8             	add    rax,r11
ffff80000080d27f:	89 fa                	mov    edx,edi
ffff80000080d281:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:15
    if(blk_devs[dev].current_request)
ffff80000080d285:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080d289:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d290:	ff ff ff 
ffff80000080d293:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d297:	48 63 d2             	movsxd rdx,edx
ffff80000080d29a:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d29e:	48 01 ca             	add    rdx,rcx
ffff80000080d2a1:	48 83 c2 08          	add    rdx,0x8
ffff80000080d2a5:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d2a8:	48 85 d2             	test   rdx,rdx
ffff80000080d2ab:	74 07                	je     ffff80000080d2b4 <unreg_blkdev+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:16
        return -EBUSY;//设备还有没完成的请求
ffff80000080d2ad:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
ffff80000080d2b2:	eb 23                	jmp    ffff80000080d2d7 <unreg_blkdev+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:17
    blk_devs[dev].do_request=0;//清除
ffff80000080d2b4:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080d2b8:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d2bf:	ff ff ff 
ffff80000080d2c2:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d2c6:	48 63 c2             	movsxd rax,edx
ffff80000080d2c9:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d2cd:	48 01 c8             	add    rax,rcx
ffff80000080d2d0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:18
}
ffff80000080d2d7:	5d                   	pop    rbp
ffff80000080d2d8:	c3                   	ret    

ffff80000080d2d9 <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:19
int make_request(unsigned short dev,int cmd,unsigned long sector, unsigned long count,char * buffer){
ffff80000080d2d9:	f3 0f 1e fa          	endbr64 
ffff80000080d2dd:	55                   	push   rbp
ffff80000080d2de:	48 89 e5             	mov    rbp,rsp
ffff80000080d2e1:	48 83 ec 40          	sub    rsp,0x40
ffff80000080d2e5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d2e5 <make_request+0xc>
ffff80000080d2ec:	49 bb 13 08 11 00 00 	movabs r11,0x110813
ffff80000080d2f3:	00 00 00 
ffff80000080d2f6:	4c 01 d8             	add    rax,r11
ffff80000080d2f9:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d2fc:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff80000080d300:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffff80000080d304:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
ffff80000080d308:	89 fa                	mov    edx,edi
ffff80000080d30a:	66 89 55 dc          	mov    WORD PTR [rbp-0x24],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:20
    struct blk_dev* d=&blk_devs[BLKDEV_MAJOR(dev)];
ffff80000080d30e:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d312:	c1 fa 04             	sar    edx,0x4
ffff80000080d315:	83 e2 0f             	and    edx,0xf
ffff80000080d318:	48 63 d2             	movsxd rdx,edx
ffff80000080d31b:	48 89 d1             	mov    rcx,rdx
ffff80000080d31e:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080d322:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d329:	ff ff ff 
ffff80000080d32c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d330:	48 01 ca             	add    rdx,rcx
ffff80000080d333:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:21
    if(!d->do_request)
ffff80000080d337:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d33b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d33e:	48 85 d2             	test   rdx,rdx
ffff80000080d341:	75 0a                	jne    ffff80000080d34d <make_request+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:22
        return -ENODEV;//没有这个设备
ffff80000080d343:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080d348:	e9 5f 01 00 00       	jmp    ffff80000080d4ac <make_request+0x1d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:24
    //找一个空的请求
    struct request* req=NULL;
ffff80000080d34d:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d354:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d355:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080d35c:	eb 49                	jmp    ffff80000080d3a7 <make_request+0xce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:26
        if(requests[i].dev==(unsigned short)-1){
ffff80000080d35e:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff80000080d365:	ff ff ff 
ffff80000080d368:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d36c:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d36f:	48 63 d2             	movsxd rdx,edx
ffff80000080d372:	48 6b d2 3a          	imul   rdx,rdx,0x3a
ffff80000080d376:	48 01 ca             	add    rdx,rcx
ffff80000080d379:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080d37c:	66 83 fa ff          	cmp    dx,0xffff
ffff80000080d380:	75 21                	jne    ffff80000080d3a3 <make_request+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:27
            req=requests+i;
ffff80000080d382:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d385:	48 63 d2             	movsxd rdx,edx
ffff80000080d388:	48 6b ca 3a          	imul   rcx,rdx,0x3a
ffff80000080d38c:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff80000080d393:	ff ff ff 
ffff80000080d396:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d39a:	48 01 ca             	add    rdx,rcx
ffff80000080d39d:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:28
            break;
ffff80000080d3a1:	eb 0a                	jmp    ffff80000080d3ad <make_request+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 2)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d3a3:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 1)
ffff80000080d3a7:	83 7d f4 3f          	cmp    DWORD PTR [rbp-0xc],0x3f
ffff80000080d3ab:	7e b1                	jle    ffff80000080d35e <make_request+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:32
        }
    }
    //下面的处理不太好。感觉最好是等到有空位置为止。
    if(!req)
ffff80000080d3ad:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080d3b2:	75 0a                	jne    ffff80000080d3be <make_request+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:33
        return -ENOMEM;//没有空的请求位置。
ffff80000080d3b4:	b8 cf ff ff ff       	mov    eax,0xffffffcf
ffff80000080d3b9:	e9 ee 00 00 00       	jmp    ffff80000080d4ac <make_request+0x1d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:38
    /*
    检查有没有请求正在运行，有的话接到后面，没有的话直接接上去，前面请求完成之后顺着链表下一个，
    这样就能保证所有请求都可以被访问到。
    */
    req->dev=dev;
ffff80000080d3be:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d3c2:	0f b7 4d dc          	movzx  ecx,WORD PTR [rbp-0x24]
ffff80000080d3c6:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:39
    req->cmd=cmd;
ffff80000080d3c9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d3cd:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080d3d0:	89 4a 02             	mov    DWORD PTR [rdx+0x2],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:40
    req->buffer=buffer;
ffff80000080d3d3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d3d7:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080d3db:	48 89 4a 22          	mov    QWORD PTR [rdx+0x22],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:41
    req->count=count;
ffff80000080d3df:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d3e3:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080d3e7:	48 89 4a 1a          	mov    QWORD PTR [rdx+0x1a],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:42
    req->next=NULL;
ffff80000080d3eb:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d3ef:	48 c7 42 32 00 00 00 	mov    QWORD PTR [rdx+0x32],0x0
ffff80000080d3f6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:43
    req->nr_sectors=TO_BLKN(count);
ffff80000080d3f7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d3fb:	48 89 d1             	mov    rcx,rdx
ffff80000080d3fe:	48 c1 e9 0c          	shr    rcx,0xc
ffff80000080d402:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d406:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff80000080d40c:	48 01 ca             	add    rdx,rcx
ffff80000080d40f:	48 85 d2             	test   rdx,rdx
ffff80000080d412:	0f 95 c2             	setne  dl
ffff80000080d415:	0f b6 ca             	movzx  ecx,dl
ffff80000080d418:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d41c:	48 89 4a 12          	mov    QWORD PTR [rdx+0x12],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:44
    req->sector=sector;
ffff80000080d420:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d424:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080d428:	48 89 4a 0a          	mov    QWORD PTR [rdx+0xa],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:45
    req->waiting=current;
ffff80000080d42c:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080d433:	ff ff ff 
ffff80000080d436:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d43a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d43d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d441:	48 89 50 2a          	mov    QWORD PTR [rax+0x2a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:47
    //这里可能不需要阻塞进程，有的设备不需要阻塞。    
    if(!d->current_request)
ffff80000080d445:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d449:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d44d:	48 85 c0             	test   rax,rax
ffff80000080d450:	75 22                	jne    ffff80000080d474 <make_request+0x19b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:49
    {
        d->current_request=req;
ffff80000080d452:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d456:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d45a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:50
        d->do_request(d->current_request);
ffff80000080d45e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d462:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d465:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d469:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d46d:	48 89 c7             	mov    rdi,rax
ffff80000080d470:	ff d2                	call   rdx
ffff80000080d472:	eb 33                	jmp    ffff80000080d4a7 <make_request+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:52
    }else{
        struct request* rp=d->current_request;
ffff80000080d474:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d478:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d47c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53
        for(;rp->next;rp=rp->next);
ffff80000080d480:	eb 0c                	jmp    ffff80000080d48e <make_request+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 2)
ffff80000080d482:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d486:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080d48a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 1)
ffff80000080d48e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d492:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080d496:	48 85 c0             	test   rax,rax
ffff80000080d499:	75 e7                	jne    ffff80000080d482 <make_request+0x1a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:54
        rp->next=req;
ffff80000080d49b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d49f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d4a3:	48 89 50 32          	mov    QWORD PTR [rax+0x32],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:56
    }
    return 1;
ffff80000080d4a7:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:57
}
ffff80000080d4ac:	c9                   	leave  
ffff80000080d4ad:	c3                   	ret    

ffff80000080d4ae <init_blkdev>:
init_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:58
void init_blkdev(void){
ffff80000080d4ae:	f3 0f 1e fa          	endbr64 
ffff80000080d4b2:	55                   	push   rbp
ffff80000080d4b3:	48 89 e5             	mov    rbp,rsp
ffff80000080d4b6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d4b6 <init_blkdev+0x8>
ffff80000080d4bd:	49 bb 42 06 11 00 00 	movabs r11,0x110642
ffff80000080d4c4:	00 00 00 
ffff80000080d4c7:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d4ca:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080d4d1:	eb 24                	jmp    ffff80000080d4f7 <init_blkdev+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:60 (discriminator 3)
        requests[i].dev=-1;
ffff80000080d4d3:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff80000080d4da:	ff ff ff 
ffff80000080d4dd:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d4e1:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d4e4:	48 63 d2             	movsxd rdx,edx
ffff80000080d4e7:	48 6b d2 3a          	imul   rdx,rdx,0x3a
ffff80000080d4eb:	48 01 ca             	add    rdx,rcx
ffff80000080d4ee:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 3)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d4f3:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 1)
ffff80000080d4f7:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff80000080d4fb:	7e d6                	jle    ffff80000080d4d3 <init_blkdev+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:62
    }
ffff80000080d4fd:	90                   	nop
ffff80000080d4fe:	90                   	nop
ffff80000080d4ff:	5d                   	pop    rbp
ffff80000080d500:	c3                   	ret    

ffff80000080d501 <init_blkbuf>:
init_blkbuf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:9
#include <errno.h>
#include <memory.h>
buffer_head l_buffer_heads[MAX_BUFFERHEADS];
//这个存储的是各个块设备映射的缓冲区链表中的头
buffer_head* l_blk_bh_heads[MAX_BLKDEVS];
void init_blkbuf(){
ffff80000080d501:	f3 0f 1e fa          	endbr64 
ffff80000080d505:	55                   	push   rbp
ffff80000080d506:	48 89 e5             	mov    rbp,rsp
ffff80000080d509:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d509 <init_blkbuf+0x8>
ffff80000080d510:	49 bb ef 05 11 00 00 	movabs r11,0x1105ef
ffff80000080d517:	00 00 00 
ffff80000080d51a:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d51d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080d524:	eb 44                	jmp    ffff80000080d56a <init_blkbuf+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:11 (discriminator 3)
        l_buffer_heads[i].dev=-1;
ffff80000080d526:	48 ba e8 fd ff ff ff 	movabs rdx,0xfffffffffffffde8
ffff80000080d52d:	ff ff ff 
ffff80000080d530:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d534:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d537:	48 63 d2             	movsxd rdx,edx
ffff80000080d53a:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080d53e:	48 01 ca             	add    rdx,rcx
ffff80000080d541:	48 83 c2 10          	add    rdx,0x10
ffff80000080d545:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:12 (discriminator 3)
        l_blk_bh_heads[i]=NULL;
ffff80000080d54a:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080d551:	ff ff ff 
ffff80000080d554:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d558:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080d55b:	48 63 c9             	movsxd rcx,ecx
ffff80000080d55e:	48 c7 04 ca 00 00 00 	mov    QWORD PTR [rdx+rcx*8],0x0
ffff80000080d565:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 3)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d566:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 1)
ffff80000080d56a:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff80000080d56e:	7e b6                	jle    ffff80000080d526 <init_blkbuf+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:14
    }
}
ffff80000080d570:	90                   	nop
ffff80000080d571:	90                   	nop
ffff80000080d572:	5d                   	pop    rbp
ffff80000080d573:	c3                   	ret    

ffff80000080d574 <bget>:
bget():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:15
buffer_head *bget(){
ffff80000080d574:	f3 0f 1e fa          	endbr64 
ffff80000080d578:	55                   	push   rbp
ffff80000080d579:	48 89 e5             	mov    rbp,rsp
ffff80000080d57c:	41 57                	push   r15
ffff80000080d57e:	53                   	push   rbx
ffff80000080d57f:	48 83 ec 10          	sub    rsp,0x10
ffff80000080d583:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d583 <bget+0xf>
ffff80000080d58a:	49 bb 75 05 11 00 00 	movabs r11,0x110575
ffff80000080d591:	00 00 00 
ffff80000080d594:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d597:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080d59e:	e9 a2 00 00 00       	jmp    ffff80000080d645 <bget+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:17
        if(l_buffer_heads[i].dev==(unsigned short)-1)
ffff80000080d5a3:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d5aa:	ff ff ff 
ffff80000080d5ad:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080d5b1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d5b4:	48 98                	cdqe   
ffff80000080d5b6:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d5ba:	48 01 d0             	add    rax,rdx
ffff80000080d5bd:	48 83 c0 10          	add    rax,0x10
ffff80000080d5c1:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080d5c4:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080d5c8:	75 77                	jne    ffff80000080d641 <bget+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:19
        {
            l_buffer_heads[i].data=kmalloc();
ffff80000080d5ca:	49 89 df             	mov    r15,rbx
ffff80000080d5cd:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d5d2:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080d5d9:	ff ff ff 
ffff80000080d5dc:	48 01 da             	add    rdx,rbx
ffff80000080d5df:	ff d2                	call   rdx
ffff80000080d5e1:	48 89 c2             	mov    rdx,rax
ffff80000080d5e4:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d5eb:	ff ff ff 
ffff80000080d5ee:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080d5f2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d5f5:	48 98                	cdqe   
ffff80000080d5f7:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d5fb:	48 01 c8             	add    rax,rcx
ffff80000080d5fe:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:20
            l_buffer_heads[i].count=0;
ffff80000080d601:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d608:	ff ff ff 
ffff80000080d60b:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080d60f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d612:	48 98                	cdqe   
ffff80000080d614:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d618:	48 01 d0             	add    rax,rdx
ffff80000080d61b:	48 83 c0 14          	add    rax,0x14
ffff80000080d61f:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:21
            return l_buffer_heads+i;
ffff80000080d622:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d625:	48 98                	cdqe   
ffff80000080d627:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d62b:	48 89 c2             	mov    rdx,rax
ffff80000080d62e:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d635:	ff ff ff 
ffff80000080d638:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d63c:	48 01 d0             	add    rax,rdx
ffff80000080d63f:	eb 13                	jmp    ffff80000080d654 <bget+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 2)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d641:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 1)
ffff80000080d645:	83 7d ec 7f          	cmp    DWORD PTR [rbp-0x14],0x7f
ffff80000080d649:	0f 8e 54 ff ff ff    	jle    ffff80000080d5a3 <bget+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:25
        }
    }
    //errno = -ENOBUF
    return NULL;
ffff80000080d64f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:26
}
ffff80000080d654:	48 83 c4 10          	add    rsp,0x10
ffff80000080d658:	5b                   	pop    rbx
ffff80000080d659:	41 5f                	pop    r15
ffff80000080d65b:	5d                   	pop    rbp
ffff80000080d65c:	c3                   	ret    

ffff80000080d65d <get_block>:
get_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:28

buffer_head *get_block(unsigned short dev,int blocknr){
ffff80000080d65d:	f3 0f 1e fa          	endbr64 
ffff80000080d661:	55                   	push   rbp
ffff80000080d662:	48 89 e5             	mov    rbp,rsp
ffff80000080d665:	41 57                	push   r15
ffff80000080d667:	53                   	push   rbx
ffff80000080d668:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d66c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d66c <get_block+0xf>
ffff80000080d673:	49 bb 8c 04 11 00 00 	movabs r11,0x11048c
ffff80000080d67a:	00 00 00 
ffff80000080d67d:	4c 01 db             	add    rbx,r11
ffff80000080d680:	89 f8                	mov    eax,edi
ffff80000080d682:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d685:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:29
    buffer_head *bh=l_blk_bh_heads[BLKDEV_MAJOR(dev)];
ffff80000080d689:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d68d:	c1 f8 04             	sar    eax,0x4
ffff80000080d690:	83 e0 0f             	and    eax,0xf
ffff80000080d693:	89 c2                	mov    edx,eax
ffff80000080d695:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080d69c:	ff ff ff 
ffff80000080d69f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d6a3:	48 63 d2             	movsxd rdx,edx
ffff80000080d6a6:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080d6aa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:30
    if(!bh){
ffff80000080d6ae:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d6b3:	75 7c                	jne    ffff80000080d731 <get_block+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:32
        //这个设备没有任何的缓冲区
        bh=bget();
ffff80000080d6b5:	49 89 df             	mov    r15,rbx
ffff80000080d6b8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d6bd:	48 ba 7c fa ee ff ff 	movabs rdx,0xffffffffffeefa7c
ffff80000080d6c4:	ff ff ff 
ffff80000080d6c7:	48 01 da             	add    rdx,rbx
ffff80000080d6ca:	ff d2                	call   rdx
ffff80000080d6cc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:33
        if(!bh){
ffff80000080d6d0:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d6d5:	75 0a                	jne    ffff80000080d6e1 <get_block+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:35
            //errno=-ENOBUFS
            return NULL;
ffff80000080d6d7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d6dc:	e9 f0 00 00 00       	jmp    ffff80000080d7d1 <get_block+0x174>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:37
        }
        bh->dev=dev;
ffff80000080d6e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d6e5:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d6e9:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:38
        bh->blocknr=blocknr;
ffff80000080d6ed:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d6f0:	48 63 d0             	movsxd rdx,eax
ffff80000080d6f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d6f7:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:39
        l_blk_bh_heads[BLKDEV_MAJOR(dev)]=bh;
ffff80000080d6fb:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d6ff:	c1 f8 04             	sar    eax,0x4
ffff80000080d702:	83 e0 0f             	and    eax,0xf
ffff80000080d705:	89 c2                	mov    edx,eax
ffff80000080d707:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080d70e:	ff ff ff 
ffff80000080d711:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d715:	48 63 d2             	movsxd rdx,edx
ffff80000080d718:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d71c:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffff80000080d720:	e9 96 00 00 00       	jmp    ffff80000080d7bb <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 3)
    }else{
        for(;bh->next&&bh->blocknr!=blocknr;bh=bh->next);
ffff80000080d725:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d729:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d72d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 1)
ffff80000080d731:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d735:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d739:	48 85 c0             	test   rax,rax
ffff80000080d73c:	74 12                	je     ffff80000080d750 <get_block+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 2)
ffff80000080d73e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d742:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080d746:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d749:	48 98                	cdqe   
ffff80000080d74b:	48 39 c2             	cmp    rdx,rax
ffff80000080d74e:	75 d5                	jne    ffff80000080d725 <get_block+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:42
        if(bh->blocknr!=blocknr)
ffff80000080d750:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d754:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080d758:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d75b:	48 98                	cdqe   
ffff80000080d75d:	48 39 c2             	cmp    rdx,rax
ffff80000080d760:	74 59                	je     ffff80000080d7bb <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:46
        {
            //这块数据没有缓冲
            //这个时候肯定处于链表最后一个了
            bh->next=bget();
ffff80000080d762:	49 89 df             	mov    r15,rbx
ffff80000080d765:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d76a:	48 ba 7c fa ee ff ff 	movabs rdx,0xffffffffffeefa7c
ffff80000080d771:	ff ff ff 
ffff80000080d774:	48 01 da             	add    rdx,rbx
ffff80000080d777:	ff d2                	call   rdx
ffff80000080d779:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d77d:	48 89 42 28          	mov    QWORD PTR [rdx+0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:47
            buffer_head *bhn=bh->next;
ffff80000080d781:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d785:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d789:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:48
            bhn->prev=bh;
ffff80000080d78d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d791:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d795:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:49
            bh=bhn;
ffff80000080d799:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d79d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:50
            bh->dev=dev;
ffff80000080d7a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7a5:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d7a9:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:51
            bh->blocknr=blocknr;
ffff80000080d7ad:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d7b0:	48 63 d0             	movsxd rdx,eax
ffff80000080d7b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7b7:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:55
        }
    }
    //TODO 等待缓冲解锁
    bh->count++;
ffff80000080d7bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7bf:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080d7c3:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080d7c6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7ca:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:56
    return bh;
ffff80000080d7cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:57
}
ffff80000080d7d1:	48 83 c4 20          	add    rsp,0x20
ffff80000080d7d5:	5b                   	pop    rbx
ffff80000080d7d6:	41 5f                	pop    r15
ffff80000080d7d8:	5d                   	pop    rbp
ffff80000080d7d9:	c3                   	ret    

ffff80000080d7da <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:59
//从指定的块设备中读取一块数据，然后返回这块数据。
buffer_head* bread(unsigned short dev,int blkn){
ffff80000080d7da:	f3 0f 1e fa          	endbr64 
ffff80000080d7de:	55                   	push   rbp
ffff80000080d7df:	48 89 e5             	mov    rbp,rsp
ffff80000080d7e2:	41 57                	push   r15
ffff80000080d7e4:	53                   	push   rbx
ffff80000080d7e5:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d7e9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d7e9 <bread+0xf>
ffff80000080d7f0:	49 bb 0f 03 11 00 00 	movabs r11,0x11030f
ffff80000080d7f7:	00 00 00 
ffff80000080d7fa:	4c 01 db             	add    rbx,r11
ffff80000080d7fd:	89 f8                	mov    eax,edi
ffff80000080d7ff:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d802:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:60
    if(!blk_devs[BLKDEV_MAJOR(dev)].do_request)
ffff80000080d806:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d80a:	c1 f8 04             	sar    eax,0x4
ffff80000080d80d:	83 e0 0f             	and    eax,0xf
ffff80000080d810:	89 c2                	mov    edx,eax
ffff80000080d812:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080d819:	ff ff ff 
ffff80000080d81c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080d820:	48 63 c2             	movsxd rax,edx
ffff80000080d823:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d827:	48 01 c8             	add    rax,rcx
ffff80000080d82a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d82d:	48 85 c0             	test   rax,rax
ffff80000080d830:	75 07                	jne    ffff80000080d839 <bread+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:61
        return NULL;
ffff80000080d832:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d837:	eb 7a                	jmp    ffff80000080d8b3 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:62
    buffer_head *bh=get_block(dev,blkn);
ffff80000080d839:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d83d:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080d840:	89 d6                	mov    esi,edx
ffff80000080d842:	89 c7                	mov    edi,eax
ffff80000080d844:	49 89 df             	mov    r15,rbx
ffff80000080d847:	48 b8 65 fb ee ff ff 	movabs rax,0xffffffffffeefb65
ffff80000080d84e:	ff ff ff 
ffff80000080d851:	48 01 d8             	add    rax,rbx
ffff80000080d854:	ff d0                	call   rax
ffff80000080d856:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:63
    if(!bh)
ffff80000080d85a:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d85f:	75 07                	jne    ffff80000080d868 <bread+0x8e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:64
        return NULL;
ffff80000080d861:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d866:	eb 4b                	jmp    ffff80000080d8b3 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:65
    if(bh->uptodate)
ffff80000080d868:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d86c:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
ffff80000080d870:	84 c0                	test   al,al
ffff80000080d872:	74 06                	je     ffff80000080d87a <bread+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:66
        return bh;//数据没变，可以直接返回
ffff80000080d874:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d878:	eb 39                	jmp    ffff80000080d8b3 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:69
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(dev,BLKDEV_REQ_READ,blkn*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080d87a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d87e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080d881:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d884:	c1 e0 03             	shl    eax,0x3
ffff80000080d887:	48 63 d0             	movsxd rdx,eax
ffff80000080d88a:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d88e:	49 89 c8             	mov    r8,rcx
ffff80000080d891:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080d896:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d89b:	89 c7                	mov    edi,eax
ffff80000080d89d:	49 89 df             	mov    r15,rbx
ffff80000080d8a0:	48 b8 e1 f7 ee ff ff 	movabs rax,0xffffffffffeef7e1
ffff80000080d8a7:	ff ff ff 
ffff80000080d8aa:	48 01 d8             	add    rax,rbx
ffff80000080d8ad:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:71
    //TODO 等待读取完成
    return bh;
ffff80000080d8af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:72
}
ffff80000080d8b3:	48 83 c4 20          	add    rsp,0x20
ffff80000080d8b7:	5b                   	pop    rbx
ffff80000080d8b8:	41 5f                	pop    r15
ffff80000080d8ba:	5d                   	pop    rbp
ffff80000080d8bb:	c3                   	ret    

ffff80000080d8bc <bwrite>:
bwrite():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:77
/*
向缓冲区写入数据。注意缓冲区的大小固定BLOCK_SIZE。
这会使得dirty置位。
*/
int bwrite(buffer_head* bh,char* src,int pos,int count){
ffff80000080d8bc:	f3 0f 1e fa          	endbr64 
ffff80000080d8c0:	55                   	push   rbp
ffff80000080d8c1:	48 89 e5             	mov    rbp,rsp
ffff80000080d8c4:	41 57                	push   r15
ffff80000080d8c6:	48 83 ec 28          	sub    rsp,0x28
ffff80000080d8ca:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d8ca <bwrite+0xe>
ffff80000080d8d1:	49 bb 2e 02 11 00 00 	movabs r11,0x11022e
ffff80000080d8d8:	00 00 00 
ffff80000080d8db:	4c 01 d8             	add    rax,r11
ffff80000080d8de:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080d8e2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d8e6:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080d8e9:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:78
    if(!bh)
ffff80000080d8ec:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d8f1:	75 07                	jne    ffff80000080d8fa <bwrite+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:79
        return -ENOBUFS;
ffff80000080d8f3:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080d8f8:	eb 5d                	jmp    ffff80000080d957 <bwrite+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:80
    if (count+pos>BLOCK_SIZE)
ffff80000080d8fa:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080d8fd:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d900:	01 ca                	add    edx,ecx
ffff80000080d902:	81 fa 00 10 00 00    	cmp    edx,0x1000
ffff80000080d908:	7e 0b                	jle    ffff80000080d915 <bwrite+0x59>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:81
        count=BLOCK_SIZE-pos;//truncate
ffff80000080d90a:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d90f:	2b 55 dc             	sub    edx,DWORD PTR [rbp-0x24]
ffff80000080d912:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:82
    memcpy(bh->data+pos,src,count);
ffff80000080d915:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080d918:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d91c:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff80000080d91f:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff80000080d922:	48 63 c9             	movsxd rcx,ecx
ffff80000080d925:	48 8d 3c 0e          	lea    rdi,[rsi+rcx*1]
ffff80000080d929:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080d92d:	48 89 ce             	mov    rsi,rcx
ffff80000080d930:	49 89 c7             	mov    r15,rax
ffff80000080d933:	48 b9 6c 50 ef ff ff 	movabs rcx,0xffffffffffef506c
ffff80000080d93a:	ff ff ff 
ffff80000080d93d:	48 01 c1             	add    rcx,rax
ffff80000080d940:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:83
    bh->dirt=1;
ffff80000080d942:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d946:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:84
    bh->uptodate=0;
ffff80000080d94a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d94e:	c6 40 12 00          	mov    BYTE PTR [rax+0x12],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:85
    return 1;
ffff80000080d952:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:86
}
ffff80000080d957:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d95b:	c9                   	leave  
ffff80000080d95c:	c3                   	ret    

ffff80000080d95d <bflush>:
bflush():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:90
/*
立即把缓冲区里面的更新应用到块设备上。
*/
int bflush(buffer_head* bh){
ffff80000080d95d:	f3 0f 1e fa          	endbr64 
ffff80000080d961:	55                   	push   rbp
ffff80000080d962:	48 89 e5             	mov    rbp,rsp
ffff80000080d965:	41 57                	push   r15
ffff80000080d967:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d96b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d96b <bflush+0xe>
ffff80000080d972:	49 bb 8d 01 11 00 00 	movabs r11,0x11018d
ffff80000080d979:	00 00 00 
ffff80000080d97c:	4c 01 d8             	add    rax,r11
ffff80000080d97f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:91
    if(!blk_devs[bh->dev].do_request)
ffff80000080d983:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d987:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080d98b:	0f b7 d2             	movzx  edx,dx
ffff80000080d98e:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d995:	ff ff ff 
ffff80000080d998:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d99c:	48 63 d2             	movsxd rdx,edx
ffff80000080d99f:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d9a3:	48 01 ca             	add    rdx,rcx
ffff80000080d9a6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d9a9:	48 85 d2             	test   rdx,rdx
ffff80000080d9ac:	75 07                	jne    ffff80000080d9b5 <bflush+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:92
        return -ENODEV;
ffff80000080d9ae:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080d9b3:	eb 5a                	jmp    ffff80000080da0f <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:93
    if(!bh->dirt)
ffff80000080d9b5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d9b9:	0f b6 52 13          	movzx  edx,BYTE PTR [rdx+0x13]
ffff80000080d9bd:	84 d2                	test   dl,dl
ffff80000080d9bf:	75 07                	jne    ffff80000080d9c8 <bflush+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:94
        return 1;
ffff80000080d9c1:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080d9c6:	eb 47                	jmp    ffff80000080da0f <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:95
    make_request(bh->dev,BLKDEV_REQ_WRITE,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080d9c8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d9cc:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080d9cf:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d9d3:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080d9d7:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080d9db:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080d9df:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d9e3:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080d9e7:	0f b7 f9             	movzx  edi,cx
ffff80000080d9ea:	49 89 f0             	mov    r8,rsi
ffff80000080d9ed:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080d9f2:	be 01 00 00 00       	mov    esi,0x1
ffff80000080d9f7:	49 89 c7             	mov    r15,rax
ffff80000080d9fa:	49 b9 e1 f7 ee ff ff 	movabs r9,0xffffffffffeef7e1
ffff80000080da01:	ff ff ff 
ffff80000080da04:	49 01 c1             	add    r9,rax
ffff80000080da07:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:97
    //这个不用等
    return 1;
ffff80000080da0a:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:98
}
ffff80000080da0f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080da13:	c9                   	leave  
ffff80000080da14:	c3                   	ret    

ffff80000080da15 <bdiscard>:
bdiscard():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:100
//丢弃更改。
int bdiscard(buffer_head *bh){
ffff80000080da15:	f3 0f 1e fa          	endbr64 
ffff80000080da19:	55                   	push   rbp
ffff80000080da1a:	48 89 e5             	mov    rbp,rsp
ffff80000080da1d:	41 57                	push   r15
ffff80000080da1f:	48 83 ec 18          	sub    rsp,0x18
ffff80000080da23:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080da23 <bdiscard+0xe>
ffff80000080da2a:	49 bb d5 00 11 00 00 	movabs r11,0x1100d5
ffff80000080da31:	00 00 00 
ffff80000080da34:	4c 01 d8             	add    rax,r11
ffff80000080da37:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:101
    if(bh->dev==-1||!blk_devs[bh->dev].do_request)
ffff80000080da3b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da3f:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080da43:	0f b7 d2             	movzx  edx,dx
ffff80000080da46:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080da4d:	ff ff ff 
ffff80000080da50:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080da54:	48 63 d2             	movsxd rdx,edx
ffff80000080da57:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080da5b:	48 01 ca             	add    rdx,rcx
ffff80000080da5e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080da61:	48 85 d2             	test   rdx,rdx
ffff80000080da64:	75 07                	jne    ffff80000080da6d <bdiscard+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:102
        return -ENODEV;
ffff80000080da66:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080da6b:	eb 5a                	jmp    ffff80000080dac7 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:104
    
    if(bh->uptodate)
ffff80000080da6d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da71:	0f b6 52 12          	movzx  edx,BYTE PTR [rdx+0x12]
ffff80000080da75:	84 d2                	test   dl,dl
ffff80000080da77:	74 07                	je     ffff80000080da80 <bdiscard+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:105
        return 1;//数据没变，可以直接返回
ffff80000080da79:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080da7e:	eb 47                	jmp    ffff80000080dac7 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:108
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(bh->dev,BLKDEV_REQ_READ,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080da80:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da84:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080da87:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da8b:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080da8f:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080da93:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080da97:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080da9b:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080da9f:	0f b7 f9             	movzx  edi,cx
ffff80000080daa2:	49 89 f0             	mov    r8,rsi
ffff80000080daa5:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080daaa:	be 00 00 00 00       	mov    esi,0x0
ffff80000080daaf:	49 89 c7             	mov    r15,rax
ffff80000080dab2:	49 b9 e1 f7 ee ff ff 	movabs r9,0xffffffffffeef7e1
ffff80000080dab9:	ff ff ff 
ffff80000080dabc:	49 01 c1             	add    r9,rax
ffff80000080dabf:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:110
    //TODO 等待读取完成
    return 1;
ffff80000080dac2:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:111
}
ffff80000080dac7:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080dacb:	c9                   	leave  
ffff80000080dacc:	c3                   	ret    

ffff80000080dacd <bupdate>:
bupdate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:113

int bupdate(buffer_head *bh){
ffff80000080dacd:	f3 0f 1e fa          	endbr64 
ffff80000080dad1:	55                   	push   rbp
ffff80000080dad2:	48 89 e5             	mov    rbp,rsp
ffff80000080dad5:	41 57                	push   r15
ffff80000080dad7:	48 83 ec 18          	sub    rsp,0x18
ffff80000080dadb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dadb <bupdate+0xe>
ffff80000080dae2:	49 bb 1d 00 11 00 00 	movabs r11,0x11001d
ffff80000080dae9:	00 00 00 
ffff80000080daec:	4c 01 d8             	add    rax,r11
ffff80000080daef:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:114
    return bdiscard(bh);
ffff80000080daf3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080daf7:	48 89 d7             	mov    rdi,rdx
ffff80000080dafa:	49 89 c7             	mov    r15,rax
ffff80000080dafd:	48 ba 1d ff ee ff ff 	movabs rdx,0xffffffffffeeff1d
ffff80000080db04:	ff ff ff 
ffff80000080db07:	48 01 c2             	add    rdx,rax
ffff80000080db0a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:115
}
ffff80000080db0c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080db10:	c9                   	leave  
ffff80000080db11:	c3                   	ret    

ffff80000080db12 <blkdev_read>:
blkdev_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:119
/*
bread的更高级封装，可以不以块为单位读取到buf。
*/
int blkdev_read(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080db12:	f3 0f 1e fa          	endbr64 
ffff80000080db16:	55                   	push   rbp
ffff80000080db17:	48 89 e5             	mov    rbp,rsp
ffff80000080db1a:	41 57                	push   r15
ffff80000080db1c:	53                   	push   rbx
ffff80000080db1d:	48 83 ec 50          	sub    rsp,0x50
ffff80000080db21:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080db21 <blkdev_read+0xf>
ffff80000080db28:	49 bb d7 ff 10 00 00 	movabs r11,0x10ffd7
ffff80000080db2f:	00 00 00 
ffff80000080db32:	4c 01 db             	add    rbx,r11
ffff80000080db35:	89 f8                	mov    eax,edi
ffff80000080db37:	89 75 b8             	mov    DWORD PTR [rbp-0x48],esi
ffff80000080db3a:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffff80000080db3e:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffff80000080db42:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:120
    int n=TO_BLKN(count);
ffff80000080db46:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080db4a:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080db4e:	48 89 c2             	mov    rdx,rax
ffff80000080db51:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080db55:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080db5a:	48 01 d0             	add    rax,rdx
ffff80000080db5d:	48 85 c0             	test   rax,rax
ffff80000080db60:	0f 95 c0             	setne  al
ffff80000080db63:	0f b6 c0             	movzx  eax,al
ffff80000080db66:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:121
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080db69:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080db6c:	99                   	cdq    
ffff80000080db6d:	c1 ea 14             	shr    edx,0x14
ffff80000080db70:	01 d0                	add    eax,edx
ffff80000080db72:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080db77:	29 d0                	sub    eax,edx
ffff80000080db79:	89 c2                	mov    edx,eax
ffff80000080db7b:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080db7e:	29 d0                	sub    eax,edx
ffff80000080db80:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:122
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080db83:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080db86:	99                   	cdq    
ffff80000080db87:	c1 ea 14             	shr    edx,0x14
ffff80000080db8a:	01 d0                	add    eax,edx
ffff80000080db8c:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080db91:	29 d0                	sub    eax,edx
ffff80000080db93:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:123
    char* p=buf;
ffff80000080db96:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080db9a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:124
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080db9e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dba2:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dba7:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:125
    int len=BLOCK_SIZE-first_off;
ffff80000080dbab:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080dbb0:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080dbb3:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126
    for(int i=0;i<n;i++){
ffff80000080dbb6:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080dbbd:	e9 b1 00 00 00       	jmp    ffff80000080dc73 <blkdev_read+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:127
        buffer_head *bh=bread(dev,blkn);
ffff80000080dbc2:	0f b7 45 bc          	movzx  eax,WORD PTR [rbp-0x44]
ffff80000080dbc6:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080dbc9:	89 d6                	mov    esi,edx
ffff80000080dbcb:	89 c7                	mov    edi,eax
ffff80000080dbcd:	49 89 df             	mov    r15,rbx
ffff80000080dbd0:	48 b8 e2 fc ee ff ff 	movabs rax,0xffffffffffeefce2
ffff80000080dbd7:	ff ff ff 
ffff80000080dbda:	48 01 d8             	add    rax,rbx
ffff80000080dbdd:	ff d0                	call   rax
ffff80000080dbdf:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128
        if(!bh)
ffff80000080dbe3:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080dbe8:	75 0a                	jne    ffff80000080dbf4 <blkdev_read+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:129
            return -ENOBUFS;//buffer不够了
ffff80000080dbea:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080dbef:	e9 90 00 00 00       	jmp    ffff80000080dc84 <blkdev_read+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:130
        if(i==n-1)
ffff80000080dbf4:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080dbf7:	83 e8 01             	sub    eax,0x1
ffff80000080dbfa:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff80000080dbfd:	75 09                	jne    ffff80000080dc08 <blkdev_read+0xf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:131
            len=mod_count;
ffff80000080dbff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080dc03:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080dc06:	eb 0d                	jmp    ffff80000080dc15 <blkdev_read+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:132
        else if(i==2)
ffff80000080dc08:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
ffff80000080dc0c:	75 07                	jne    ffff80000080dc15 <blkdev_read+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:133
            len=BLOCK_SIZE;
ffff80000080dc0e:	c7 45 dc 00 10 00 00 	mov    DWORD PTR [rbp-0x24],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:134 (discriminator 2)
        memcpy(p,bh->data+first_off,len);
ffff80000080dc15:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080dc18:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080dc1c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080dc1f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080dc22:	48 98                	cdqe   
ffff80000080dc24:	48 01 c1             	add    rcx,rax
ffff80000080dc27:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dc2b:	48 89 ce             	mov    rsi,rcx
ffff80000080dc2e:	48 89 c7             	mov    rdi,rax
ffff80000080dc31:	49 89 df             	mov    r15,rbx
ffff80000080dc34:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080dc3b:	ff ff ff 
ffff80000080dc3e:	48 01 d8             	add    rax,rbx
ffff80000080dc41:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:135 (discriminator 2)
        brelse(bh);
ffff80000080dc43:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080dc47:	48 89 c7             	mov    rdi,rax
ffff80000080dc4a:	49 89 df             	mov    r15,rbx
ffff80000080dc4d:	48 b8 10 03 ef ff ff 	movabs rax,0xffffffffffef0310
ffff80000080dc54:	ff ff ff 
ffff80000080dc57:	48 01 d8             	add    rax,rbx
ffff80000080dc5a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:136 (discriminator 2)
        blkn++;
ffff80000080dc5c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:137 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080dc60:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080dc67:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:138 (discriminator 2)
        first_off=0;
ffff80000080dc68:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080dc6f:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 1)
ffff80000080dc73:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dc76:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080dc79:	0f 8c 43 ff ff ff    	jl     ffff80000080dbc2 <blkdev_read+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:140
    }
    return 1;
ffff80000080dc7f:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:141
}
ffff80000080dc84:	48 83 c4 50          	add    rsp,0x50
ffff80000080dc88:	5b                   	pop    rbx
ffff80000080dc89:	41 5f                	pop    r15
ffff80000080dc8b:	5d                   	pop    rbp
ffff80000080dc8c:	c3                   	ret    

ffff80000080dc8d <blkdev_write>:
blkdev_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:143

int blkdev_write(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080dc8d:	f3 0f 1e fa          	endbr64 
ffff80000080dc91:	55                   	push   rbp
ffff80000080dc92:	48 89 e5             	mov    rbp,rsp
ffff80000080dc95:	41 57                	push   r15
ffff80000080dc97:	53                   	push   rbx
ffff80000080dc98:	48 83 ec 50          	sub    rsp,0x50
ffff80000080dc9c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dc9c <blkdev_write+0xf>
ffff80000080dca3:	49 bb 5c fe 10 00 00 	movabs r11,0x10fe5c
ffff80000080dcaa:	00 00 00 
ffff80000080dcad:	4c 01 db             	add    rbx,r11
ffff80000080dcb0:	89 f8                	mov    eax,edi
ffff80000080dcb2:	89 75 b8             	mov    DWORD PTR [rbp-0x48],esi
ffff80000080dcb5:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffff80000080dcb9:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffff80000080dcbd:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:144
    int n=TO_BLKN(count);
ffff80000080dcc1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dcc5:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080dcc9:	48 89 c2             	mov    rdx,rax
ffff80000080dccc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dcd0:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dcd5:	48 01 d0             	add    rax,rdx
ffff80000080dcd8:	48 85 c0             	test   rax,rax
ffff80000080dcdb:	0f 95 c0             	setne  al
ffff80000080dcde:	0f b6 c0             	movzx  eax,al
ffff80000080dce1:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:145
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080dce4:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dce7:	99                   	cdq    
ffff80000080dce8:	c1 ea 14             	shr    edx,0x14
ffff80000080dceb:	01 d0                	add    eax,edx
ffff80000080dced:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dcf2:	29 d0                	sub    eax,edx
ffff80000080dcf4:	89 c2                	mov    edx,eax
ffff80000080dcf6:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dcf9:	29 d0                	sub    eax,edx
ffff80000080dcfb:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:146
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080dcfe:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dd01:	99                   	cdq    
ffff80000080dd02:	c1 ea 14             	shr    edx,0x14
ffff80000080dd05:	01 d0                	add    eax,edx
ffff80000080dd07:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dd0c:	29 d0                	sub    eax,edx
ffff80000080dd0e:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:147
    char* p=buf;
ffff80000080dd11:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080dd15:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:148
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080dd19:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dd1d:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dd22:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:149
    int len=BLOCK_SIZE-first_off;
ffff80000080dd26:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080dd2b:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080dd2e:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150
    for(int i=0;i<n;i++){
ffff80000080dd31:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080dd38:	e9 b1 00 00 00       	jmp    ffff80000080ddee <blkdev_write+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:151
        buffer_head *bh=get_block(dev,blkn);
ffff80000080dd3d:	0f b7 45 bc          	movzx  eax,WORD PTR [rbp-0x44]
ffff80000080dd41:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080dd44:	89 d6                	mov    esi,edx
ffff80000080dd46:	89 c7                	mov    edi,eax
ffff80000080dd48:	49 89 df             	mov    r15,rbx
ffff80000080dd4b:	48 b8 65 fb ee ff ff 	movabs rax,0xffffffffffeefb65
ffff80000080dd52:	ff ff ff 
ffff80000080dd55:	48 01 d8             	add    rax,rbx
ffff80000080dd58:	ff d0                	call   rax
ffff80000080dd5a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152
        if(!bh)
ffff80000080dd5e:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080dd63:	75 0a                	jne    ffff80000080dd6f <blkdev_write+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:153
            return -ENOBUFS;//buffer不够了
ffff80000080dd65:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080dd6a:	e9 90 00 00 00       	jmp    ffff80000080ddff <blkdev_write+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:154
        if(i==n-1)
ffff80000080dd6f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080dd72:	83 e8 01             	sub    eax,0x1
ffff80000080dd75:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff80000080dd78:	75 09                	jne    ffff80000080dd83 <blkdev_write+0xf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:155
            len=mod_count;
ffff80000080dd7a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080dd7e:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080dd81:	eb 0d                	jmp    ffff80000080dd90 <blkdev_write+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:156
        else if(i==2)
ffff80000080dd83:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
ffff80000080dd87:	75 07                	jne    ffff80000080dd90 <blkdev_write+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:157
            len=BLOCK_SIZE;
ffff80000080dd89:	c7 45 dc 00 10 00 00 	mov    DWORD PTR [rbp-0x24],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:158 (discriminator 2)
        memcpy(bh->data+first_off,p,len);
ffff80000080dd90:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080dd93:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080dd97:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080dd9a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080dd9d:	48 98                	cdqe   
ffff80000080dd9f:	48 01 c1             	add    rcx,rax
ffff80000080dda2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dda6:	48 89 c6             	mov    rsi,rax
ffff80000080dda9:	48 89 cf             	mov    rdi,rcx
ffff80000080ddac:	49 89 df             	mov    r15,rbx
ffff80000080ddaf:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080ddb6:	ff ff ff 
ffff80000080ddb9:	48 01 d8             	add    rax,rbx
ffff80000080ddbc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:159 (discriminator 2)
        brelse(bh);
ffff80000080ddbe:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ddc2:	48 89 c7             	mov    rdi,rax
ffff80000080ddc5:	49 89 df             	mov    r15,rbx
ffff80000080ddc8:	48 b8 10 03 ef ff ff 	movabs rax,0xffffffffffef0310
ffff80000080ddcf:	ff ff ff 
ffff80000080ddd2:	48 01 d8             	add    rax,rbx
ffff80000080ddd5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:160 (discriminator 2)
        blkn++;
ffff80000080ddd7:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:161 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080dddb:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080dde2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:162 (discriminator 2)
        first_off=0;
ffff80000080dde3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080ddea:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 1)
ffff80000080ddee:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ddf1:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080ddf4:	0f 8c 43 ff ff ff    	jl     ffff80000080dd3d <blkdev_write+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:164
    }
    return 1;
ffff80000080ddfa:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:166

}
ffff80000080ddff:	48 83 c4 50          	add    rsp,0x50
ffff80000080de03:	5b                   	pop    rbx
ffff80000080de04:	41 5f                	pop    r15
ffff80000080de06:	5d                   	pop    rbp
ffff80000080de07:	c3                   	ret    

ffff80000080de08 <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:167
int brelse(buffer_head *bh){
ffff80000080de08:	f3 0f 1e fa          	endbr64 
ffff80000080de0c:	55                   	push   rbp
ffff80000080de0d:	48 89 e5             	mov    rbp,rsp
ffff80000080de10:	41 57                	push   r15
ffff80000080de12:	53                   	push   rbx
ffff80000080de13:	48 83 ec 10          	sub    rsp,0x10
ffff80000080de17:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080de17 <brelse+0xf>
ffff80000080de1e:	49 bb e1 fc 10 00 00 	movabs r11,0x10fce1
ffff80000080de25:	00 00 00 
ffff80000080de28:	4c 01 db             	add    rbx,r11
ffff80000080de2b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168
    if(bh->dev==(unsigned short)-1||!blk_devs[BLKDEV_MAJOR(bh->dev)].do_request)
ffff80000080de2f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de33:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080de37:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080de3b:	74 33                	je     ffff80000080de70 <brelse+0x68>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168 (discriminator 1)
ffff80000080de3d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de41:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080de45:	0f b7 c0             	movzx  eax,ax
ffff80000080de48:	c1 f8 04             	sar    eax,0x4
ffff80000080de4b:	83 e0 0f             	and    eax,0xf
ffff80000080de4e:	89 c2                	mov    edx,eax
ffff80000080de50:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080de57:	ff ff ff 
ffff80000080de5a:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080de5e:	48 63 c2             	movsxd rax,edx
ffff80000080de61:	48 c1 e0 04          	shl    rax,0x4
ffff80000080de65:	48 01 c8             	add    rax,rcx
ffff80000080de68:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080de6b:	48 85 c0             	test   rax,rax
ffff80000080de6e:	75 0a                	jne    ffff80000080de7a <brelse+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:169
        return -ENODEV;
ffff80000080de70:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080de75:	e9 96 00 00 00       	jmp    ffff80000080df10 <brelse+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:170
    if(bh->dirt)
ffff80000080de7a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de7e:	0f b6 40 13          	movzx  eax,BYTE PTR [rax+0x13]
ffff80000080de82:	84 c0                	test   al,al
ffff80000080de84:	74 19                	je     ffff80000080de9f <brelse+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:171
        bflush(bh);
ffff80000080de86:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de8a:	48 89 c7             	mov    rdi,rax
ffff80000080de8d:	49 89 df             	mov    r15,rbx
ffff80000080de90:	48 b8 65 fe ee ff ff 	movabs rax,0xffffffffffeefe65
ffff80000080de97:	ff ff ff 
ffff80000080de9a:	48 01 d8             	add    rax,rbx
ffff80000080de9d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:172
    bh->count--;
ffff80000080de9f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dea3:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080dea7:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080deaa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080deae:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:173
    if(bh->count==0)
ffff80000080deb1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080deb5:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080deb9:	84 c0                	test   al,al
ffff80000080debb:	75 4e                	jne    ffff80000080df0b <brelse+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:175
    {
        bh->prev->next=bh->next;
ffff80000080debd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dec1:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080dec5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dec9:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080decd:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:176
        bh->next->prev=bh->prev;
ffff80000080ded1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ded5:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080ded9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dedd:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000080dee1:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:177
        bh->dev=-1;
ffff80000080dee5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dee9:	66 c7 40 10 ff ff    	mov    WORD PTR [rax+0x10],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:178
        kmfree(bh->data);
ffff80000080deef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080def3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080def6:	48 89 c7             	mov    rdi,rax
ffff80000080def9:	49 89 df             	mov    r15,rbx
ffff80000080defc:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080df03:	ff ff ff 
ffff80000080df06:	48 01 d8             	add    rax,rbx
ffff80000080df09:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:180
    }
    return 1;
ffff80000080df0b:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:181
ffff80000080df10:	48 83 c4 10          	add    rsp,0x10
ffff80000080df14:	5b                   	pop    rbx
ffff80000080df15:	41 5f                	pop    r15
ffff80000080df17:	5d                   	pop    rbp
ffff80000080df18:	c3                   	ret    

ffff80000080df19 <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:123
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
ffff80000080df19:	f3 0f 1e fa          	endbr64 
ffff80000080df1d:	55                   	push   rbp
ffff80000080df1e:	48 89 e5             	mov    rbp,rsp
ffff80000080df21:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080df21 <shift+0x8>
ffff80000080df28:	49 bb d7 fb 10 00 00 	movabs r11,0x10fbd7
ffff80000080df2f:	00 00 00 
ffff80000080df32:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:124
    k_shift=!k_shift;
ffff80000080df35:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080df3c:	ff ff ff 
ffff80000080df3f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080df43:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080df46:	84 d2                	test   dl,dl
ffff80000080df48:	0f 94 c2             	sete   dl
ffff80000080df4b:	89 d1                	mov    ecx,edx
ffff80000080df4d:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080df54:	ff ff ff 
ffff80000080df57:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080df5b:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:125
}
ffff80000080df5d:	90                   	nop
ffff80000080df5e:	5d                   	pop    rbp
ffff80000080df5f:	c3                   	ret    

ffff80000080df60 <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:127
void ctrl()
{
ffff80000080df60:	f3 0f 1e fa          	endbr64 
ffff80000080df64:	55                   	push   rbp
ffff80000080df65:	48 89 e5             	mov    rbp,rsp
ffff80000080df68:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080df68 <ctrl+0x8>
ffff80000080df6f:	49 bb 90 fb 10 00 00 	movabs r11,0x10fb90
ffff80000080df76:	00 00 00 
ffff80000080df79:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:128
    k_ctrl=!k_ctrl;
ffff80000080df7c:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff80000080df83:	ff ff ff 
ffff80000080df86:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080df8a:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080df8d:	84 d2                	test   dl,dl
ffff80000080df8f:	0f 94 c2             	sete   dl
ffff80000080df92:	89 d1                	mov    ecx,edx
ffff80000080df94:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff80000080df9b:	ff ff ff 
ffff80000080df9e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080dfa2:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:129
}
ffff80000080dfa4:	90                   	nop
ffff80000080dfa5:	5d                   	pop    rbp
ffff80000080dfa6:	c3                   	ret    

ffff80000080dfa7 <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:131
void capslock()
{
ffff80000080dfa7:	f3 0f 1e fa          	endbr64 
ffff80000080dfab:	55                   	push   rbp
ffff80000080dfac:	48 89 e5             	mov    rbp,rsp
ffff80000080dfaf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dfaf <capslock+0x8>
ffff80000080dfb6:	49 bb 49 fb 10 00 00 	movabs r11,0x10fb49
ffff80000080dfbd:	00 00 00 
ffff80000080dfc0:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:132
    k_capslock=k_capslock==0?1:0;
ffff80000080dfc3:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080dfca:	ff ff ff 
ffff80000080dfcd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dfd1:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080dfd4:	84 d2                	test   dl,dl
ffff80000080dfd6:	0f 94 c2             	sete   dl
ffff80000080dfd9:	89 d1                	mov    ecx,edx
ffff80000080dfdb:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080dfe2:	ff ff ff 
ffff80000080dfe5:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080dfe9:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
}
ffff80000080dfeb:	90                   	nop
ffff80000080dfec:	5d                   	pop    rbp
ffff80000080dfed:	c3                   	ret    

ffff80000080dfee <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
char to_ascii(char scan_code)
{
ffff80000080dfee:	f3 0f 1e fa          	endbr64 
ffff80000080dff2:	55                   	push   rbp
ffff80000080dff3:	48 89 e5             	mov    rbp,rsp
ffff80000080dff6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dff6 <to_ascii+0x8>
ffff80000080dffd:	49 bb 02 fb 10 00 00 	movabs r11,0x10fb02
ffff80000080e004:	00 00 00 
ffff80000080e007:	4c 01 d8             	add    rax,r11
ffff80000080e00a:	89 fa                	mov    edx,edi
ffff80000080e00c:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e00f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080e016:	e9 25 01 00 00       	jmp    ffff80000080e140 <to_ascii+0x152>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
        if(key_map[i].scan_code==scan_code)
ffff80000080e01b:	48 be 88 d8 ff ff ff 	movabs rsi,0xffffffffffffd888
ffff80000080e022:	ff ff ff 
ffff80000080e025:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e028:	48 63 ca             	movsxd rcx,edx
ffff80000080e02b:	48 89 ca             	mov    rdx,rcx
ffff80000080e02e:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e032:	48 01 ca             	add    rdx,rcx
ffff80000080e035:	48 01 c2             	add    rdx,rax
ffff80000080e038:	48 01 f2             	add    rdx,rsi
ffff80000080e03b:	48 83 c2 02          	add    rdx,0x2
ffff80000080e03f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e042:	38 55 ec             	cmp    BYTE PTR [rbp-0x14],dl
ffff80000080e045:	0f 85 f1 00 00 00    	jne    ffff80000080e13c <to_ascii+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
ffff80000080e04b:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080e052:	ff ff ff 
ffff80000080e055:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e059:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e05c:	84 d2                	test   dl,dl
ffff80000080e05e:	74 79                	je     ffff80000080e0d9 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 1)
ffff80000080e060:	48 be 88 d8 ff ff ff 	movabs rsi,0xffffffffffffd888
ffff80000080e067:	ff ff ff 
ffff80000080e06a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e06d:	48 63 ca             	movsxd rcx,edx
ffff80000080e070:	48 01 c6             	add    rsi,rax
ffff80000080e073:	48 89 ca             	mov    rdx,rcx
ffff80000080e076:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e07a:	48 01 ca             	add    rdx,rcx
ffff80000080e07d:	48 01 f2             	add    rdx,rsi
ffff80000080e080:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e083:	80 fa 60             	cmp    dl,0x60
ffff80000080e086:	7e 51                	jle    ffff80000080e0d9 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 2)
ffff80000080e088:	48 be 88 d8 ff ff ff 	movabs rsi,0xffffffffffffd888
ffff80000080e08f:	ff ff ff 
ffff80000080e092:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e095:	48 63 ca             	movsxd rcx,edx
ffff80000080e098:	48 01 c6             	add    rsi,rax
ffff80000080e09b:	48 89 ca             	mov    rdx,rcx
ffff80000080e09e:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e0a2:	48 01 ca             	add    rdx,rcx
ffff80000080e0a5:	48 01 f2             	add    rdx,rsi
ffff80000080e0a8:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e0ab:	80 fa 7a             	cmp    dl,0x7a
ffff80000080e0ae:	7f 29                	jg     ffff80000080e0d9 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 3)
ffff80000080e0b0:	48 be 88 d8 ff ff ff 	movabs rsi,0xffffffffffffd888
ffff80000080e0b7:	ff ff ff 
ffff80000080e0ba:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e0bd:	48 63 ca             	movsxd rcx,edx
ffff80000080e0c0:	48 89 ca             	mov    rdx,rcx
ffff80000080e0c3:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e0c7:	48 01 ca             	add    rdx,rcx
ffff80000080e0ca:	48 01 d0             	add    rax,rdx
ffff80000080e0cd:	48 01 f0             	add    rax,rsi
ffff80000080e0d0:	48 83 c0 01          	add    rax,0x1
ffff80000080e0d4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e0d7:	eb 76                	jmp    ffff80000080e14f <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140
            else if(k_shift)return key_map[i].ascii_shift;
ffff80000080e0d9:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080e0e0:	ff ff ff 
ffff80000080e0e3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e0e7:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e0ea:	84 d2                	test   dl,dl
ffff80000080e0ec:	74 29                	je     ffff80000080e117 <to_ascii+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140 (discriminator 1)
ffff80000080e0ee:	48 be 88 d8 ff ff ff 	movabs rsi,0xffffffffffffd888
ffff80000080e0f5:	ff ff ff 
ffff80000080e0f8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e0fb:	48 63 ca             	movsxd rcx,edx
ffff80000080e0fe:	48 89 ca             	mov    rdx,rcx
ffff80000080e101:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e105:	48 01 ca             	add    rdx,rcx
ffff80000080e108:	48 01 d0             	add    rax,rdx
ffff80000080e10b:	48 01 f0             	add    rax,rsi
ffff80000080e10e:	48 83 c0 01          	add    rax,0x1
ffff80000080e112:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e115:	eb 38                	jmp    ffff80000080e14f <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
            else return key_map[i].ascii;
ffff80000080e117:	48 b9 88 d8 ff ff ff 	movabs rcx,0xffffffffffffd888
ffff80000080e11e:	ff ff ff 
ffff80000080e121:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e124:	48 63 d2             	movsxd rdx,edx
ffff80000080e127:	48 01 c1             	add    rcx,rax
ffff80000080e12a:	48 89 d0             	mov    rax,rdx
ffff80000080e12d:	48 c1 e0 02          	shl    rax,0x2
ffff80000080e131:	48 01 d0             	add    rax,rdx
ffff80000080e134:	48 01 c8             	add    rax,rcx
ffff80000080e137:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e13a:	eb 13                	jmp    ffff80000080e14f <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e13c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 1)
ffff80000080e140:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
ffff80000080e144:	0f 8e d1 fe ff ff    	jle    ffff80000080e01b <to_ascii+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:144
        }

    return '\0';
ffff80000080e14a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
}
ffff80000080e14f:	5d                   	pop    rbp
ffff80000080e150:	c3                   	ret    

ffff80000080e151 <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
int init_kb()
{
ffff80000080e151:	f3 0f 1e fa          	endbr64 
ffff80000080e155:	55                   	push   rbp
ffff80000080e156:	48 89 e5             	mov    rbp,rsp
ffff80000080e159:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e159 <init_kb+0x8>
ffff80000080e160:	49 bb 9f f9 10 00 00 	movabs r11,0x10f99f
ffff80000080e167:	00 00 00 
ffff80000080e16a:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:148
}
ffff80000080e16d:	90                   	nop
ffff80000080e16e:	5d                   	pop    rbp
ffff80000080e16f:	c3                   	ret    

ffff80000080e170 <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
int key_proc()
{
ffff80000080e170:	f3 0f 1e fa          	endbr64 
ffff80000080e174:	55                   	push   rbp
ffff80000080e175:	48 89 e5             	mov    rbp,rsp
ffff80000080e178:	41 57                	push   r15
ffff80000080e17a:	53                   	push   rbx
ffff80000080e17b:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e17f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e17f <key_proc+0xf>
ffff80000080e186:	49 bb 79 f9 10 00 00 	movabs r11,0x10f979
ffff80000080e18d:	00 00 00 
ffff80000080e190:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
    asm volatile("cli");
ffff80000080e193:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:153
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
ffff80000080e194:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffff80000080e198:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
ffff80000080e19c:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
    key_code tmpc;
    scan1=inb(0x60);
ffff80000080e1a0:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080e1a5:	49 89 df             	mov    r15,rbx
ffff80000080e1a8:	48 b8 01 a3 ee ff ff 	movabs rax,0xffffffffffeea301
ffff80000080e1af:	ff ff ff 
ffff80000080e1b2:	48 01 d8             	add    rax,rbx
ffff80000080e1b5:	ff d0                	call   rax
ffff80000080e1b7:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
ffff80000080e1ba:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e1c1:	ff ff ff 
ffff80000080e1c4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e1c8:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e1cb:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e1ce:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e1d5:	ff ff ff 
ffff80000080e1d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e1dc:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e1df:	89 d0                	mov    eax,edx
ffff80000080e1e1:	99                   	cdq    
ffff80000080e1e2:	f7 f9                	idiv   ecx
ffff80000080e1e4:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e1eb:	ff ff ff 
ffff80000080e1ee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e1f2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e1f5:	39 c2                	cmp    edx,eax
ffff80000080e1f7:	74 68                	je     ffff80000080e261 <key_proc+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:169
    {
        key_bufq.data[key_bufq.tail]=scan1;
ffff80000080e1f9:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e200:	ff ff ff 
ffff80000080e203:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e207:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e20a:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e211:	ff ff ff 
ffff80000080e214:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e218:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e21b:	48 98                	cdqe   
ffff80000080e21d:	48 01 c2             	add    rdx,rax
ffff80000080e220:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e224:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:170
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
ffff80000080e226:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e22d:	ff ff ff 
ffff80000080e230:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e234:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e237:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e23a:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e241:	ff ff ff 
ffff80000080e244:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e248:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e24b:	89 d0                	mov    eax,edx
ffff80000080e24d:	99                   	cdq    
ffff80000080e24e:	f7 f9                	idiv   ecx
ffff80000080e250:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e257:	ff ff ff 
ffff80000080e25a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e25e:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:173
    }

    if(scan1==0x48)
ffff80000080e261:	80 7d ef 48          	cmp    BYTE PTR [rbp-0x11],0x48
ffff80000080e265:	75 17                	jne    ffff80000080e27e <key_proc+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:174
        scr_up();
ffff80000080e267:	49 89 df             	mov    r15,rbx
ffff80000080e26a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e26f:	48 ba 63 cd ee ff ff 	movabs rdx,0xffffffffffeecd63
ffff80000080e276:	ff ff ff 
ffff80000080e279:	48 01 da             	add    rdx,rbx
ffff80000080e27c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:175
    if(scan1==0x50)
ffff80000080e27e:	80 7d ef 50          	cmp    BYTE PTR [rbp-0x11],0x50
ffff80000080e282:	75 17                	jne    ffff80000080e29b <key_proc+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:176
        scr_down();
ffff80000080e284:	49 89 df             	mov    r15,rbx
ffff80000080e287:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e28c:	48 ba 5b ce ee ff ff 	movabs rdx,0xffffffffffeece5b
ffff80000080e293:	ff ff ff 
ffff80000080e296:	48 01 da             	add    rdx,rbx
ffff80000080e299:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:177
    switch (scan1)
ffff80000080e29b:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e29f:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e2a4:	74 45                	je     ffff80000080e2eb <key_proc+0x17b>
ffff80000080e2a6:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e2ab:	0f 8f 85 00 00 00    	jg     ffff80000080e336 <key_proc+0x1c6>
ffff80000080e2b1:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e2b6:	74 33                	je     ffff80000080e2eb <key_proc+0x17b>
ffff80000080e2b8:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e2bd:	7f 77                	jg     ffff80000080e336 <key_proc+0x1c6>
ffff80000080e2bf:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e2c4:	74 3e                	je     ffff80000080e304 <key_proc+0x194>
ffff80000080e2c6:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e2cb:	7f 69                	jg     ffff80000080e336 <key_proc+0x1c6>
ffff80000080e2cd:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e2d0:	74 4b                	je     ffff80000080e31d <key_proc+0x1ad>
ffff80000080e2d2:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e2d5:	7f 5f                	jg     ffff80000080e336 <key_proc+0x1c6>
ffff80000080e2d7:	83 f8 36             	cmp    eax,0x36
ffff80000080e2da:	74 0f                	je     ffff80000080e2eb <key_proc+0x17b>
ffff80000080e2dc:	83 f8 36             	cmp    eax,0x36
ffff80000080e2df:	7f 55                	jg     ffff80000080e336 <key_proc+0x1c6>
ffff80000080e2e1:	83 f8 1d             	cmp    eax,0x1d
ffff80000080e2e4:	74 1e                	je     ffff80000080e304 <key_proc+0x194>
ffff80000080e2e6:	83 f8 2a             	cmp    eax,0x2a
ffff80000080e2e9:	75 4b                	jne    ffff80000080e336 <key_proc+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:183
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
ffff80000080e2eb:	49 89 df             	mov    r15,rbx
ffff80000080e2ee:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e2f3:	48 ba 21 04 ef ff ff 	movabs rdx,0xffffffffffef0421
ffff80000080e2fa:	ff ff ff 
ffff80000080e2fd:	48 01 da             	add    rdx,rbx
ffff80000080e300:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:184
            break;
ffff80000080e302:	eb 33                	jmp    ffff80000080e337 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
        case 0x1d:
        case 0x9d:
            ctrl();
ffff80000080e304:	49 89 df             	mov    r15,rbx
ffff80000080e307:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e30c:	48 ba 68 04 ef ff ff 	movabs rdx,0xffffffffffef0468
ffff80000080e313:	ff ff ff 
ffff80000080e316:	48 01 da             	add    rdx,rbx
ffff80000080e319:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
            break;
ffff80000080e31b:	eb 1a                	jmp    ffff80000080e337 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:190
        case 0x3a:
            capslock();
ffff80000080e31d:	49 89 df             	mov    r15,rbx
ffff80000080e320:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e325:	48 ba af 04 ef ff ff 	movabs rdx,0xffffffffffef04af
ffff80000080e32c:	ff ff ff 
ffff80000080e32f:	48 01 da             	add    rdx,rbx
ffff80000080e332:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:191
            break;
ffff80000080e334:	eb 01                	jmp    ffff80000080e337 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:193
        default:
            break;
ffff80000080e336:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
ffff80000080e337:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e33b:	84 c0                	test   al,al
ffff80000080e33d:	78 51                	js     ffff80000080e390 <key_proc+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:197
        char ch= to_ascii(scan1);
ffff80000080e33f:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e343:	0f be c0             	movsx  eax,al
ffff80000080e346:	89 c7                	mov    edi,eax
ffff80000080e348:	49 89 df             	mov    r15,rbx
ffff80000080e34b:	48 b8 f6 04 ef ff ff 	movabs rax,0xffffffffffef04f6
ffff80000080e352:	ff ff ff 
ffff80000080e355:	48 01 d8             	add    rax,rbx
ffff80000080e358:	ff d0                	call   rax
ffff80000080e35a:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:198
        unsigned long args[]={(unsigned long) &ch, 1};
ffff80000080e35d:	48 8d 45 e7          	lea    rax,[rbp-0x19]
ffff80000080e361:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000080e365:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffff80000080e36c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
ffff80000080e36d:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffff80000080e371:	48 89 c2             	mov    rdx,rax
ffff80000080e374:	be 03 00 00 00       	mov    esi,0x3
ffff80000080e379:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e37e:	49 89 df             	mov    r15,rbx
ffff80000080e381:	48 b8 fa a1 ee ff ff 	movabs rax,0xffffffffffeea1fa
ffff80000080e388:	ff ff ff 
ffff80000080e38b:	48 01 d8             	add    rax,rbx
ffff80000080e38e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:219
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
ffff80000080e390:	49 89 df             	mov    r15,rbx
ffff80000080e393:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e398:	48 ba 16 a3 ee ff ff 	movabs rdx,0xffffffffffeea316
ffff80000080e39f:	ff ff ff 
ffff80000080e3a2:	48 01 da             	add    rdx,rbx
ffff80000080e3a5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:220
    asm volatile("leave\r\n iretq");
ffff80000080e3a7:	c9                   	leave  
ffff80000080e3a8:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:221
}
ffff80000080e3aa:	90                   	nop
ffff80000080e3ab:	48 83 c4 20          	add    rsp,0x20
ffff80000080e3af:	5b                   	pop    rbx
ffff80000080e3b0:	41 5f                	pop    r15
ffff80000080e3b2:	5d                   	pop    rbp
ffff80000080e3b3:	c3                   	ret    

ffff80000080e3b4 <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:224

char sys_analyse_key()
{
ffff80000080e3b4:	f3 0f 1e fa          	endbr64 
ffff80000080e3b8:	55                   	push   rbp
ffff80000080e3b9:	48 89 e5             	mov    rbp,rsp
ffff80000080e3bc:	41 57                	push   r15
ffff80000080e3be:	53                   	push   rbx
ffff80000080e3bf:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e3c3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e3c3 <sys_analyse_key+0xf>
ffff80000080e3ca:	49 bb 35 f7 10 00 00 	movabs r11,0x10f735
ffff80000080e3d1:	00 00 00 
ffff80000080e3d4:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225
    if(key_bufq.tail==key_bufq.head)return -1;
ffff80000080e3d7:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e3de:	ff ff ff 
ffff80000080e3e1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e3e5:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000080e3e8:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e3ef:	ff ff ff 
ffff80000080e3f2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e3f6:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e3f9:	39 c2                	cmp    edx,eax
ffff80000080e3fb:	75 0a                	jne    ffff80000080e407 <sys_analyse_key+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225 (discriminator 1)
ffff80000080e3fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e402:	e9 b1 01 00 00       	jmp    ffff80000080e5b8 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:226
    char c=key_buf[key_bufq.head];
ffff80000080e407:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e40e:	ff ff ff 
ffff80000080e411:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e415:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e418:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff80000080e41f:	ff ff ff 
ffff80000080e422:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e426:	48 98                	cdqe   
ffff80000080e428:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080e42c:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:227
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
ffff80000080e42f:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e436:	ff ff ff 
ffff80000080e439:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e43d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e440:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e443:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e44a:	ff ff ff 
ffff80000080e44d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e451:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e454:	89 d0                	mov    eax,edx
ffff80000080e456:	99                   	cdq    
ffff80000080e457:	f7 f9                	idiv   ecx
ffff80000080e459:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e460:	ff ff ff 
ffff80000080e463:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e467:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:229
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
ffff80000080e46a:	48 b8 5e da ff ff ff 	movabs rax,0xffffffffffffda5e
ffff80000080e471:	ff ff ff 
ffff80000080e474:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e478:	48 89 c7             	mov    rdi,rax
ffff80000080e47b:	49 89 df             	mov    r15,rbx
ffff80000080e47e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e483:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080e48a:	ff ff ff 
ffff80000080e48d:	48 01 da             	add    rdx,rbx
ffff80000080e490:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:230
    char res[33]={0};
ffff80000080e492:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080e499:	00 
ffff80000080e49a:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080e4a1:	00 
ffff80000080e4a2:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080e4a9:	00 
ffff80000080e4aa:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080e4b1:	00 
ffff80000080e4b2:	c6 45 e0 00          	mov    BYTE PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
    itoa(res,16,c);
ffff80000080e4b6:	0f be 55 ef          	movsx  edx,BYTE PTR [rbp-0x11]
ffff80000080e4ba:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e4be:	be 10 00 00 00       	mov    esi,0x10
ffff80000080e4c3:	48 89 c7             	mov    rdi,rax
ffff80000080e4c6:	49 89 df             	mov    r15,rbx
ffff80000080e4c9:	48 b8 81 3a ee ff ff 	movabs rax,0xffffffffffee3a81
ffff80000080e4d0:	ff ff ff 
ffff80000080e4d3:	48 01 d8             	add    rax,rbx
ffff80000080e4d6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    printf(res);
ffff80000080e4d8:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e4dc:	48 89 c7             	mov    rdi,rax
ffff80000080e4df:	49 89 df             	mov    r15,rbx
ffff80000080e4e2:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e4e7:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080e4ee:	ff ff ff 
ffff80000080e4f1:	48 01 da             	add    rdx,rbx
ffff80000080e4f4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
    if(c&FLAG_BREAK){
ffff80000080e4f6:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff80000080e4fa:	79 32                	jns    ffff80000080e52e <sys_analyse_key+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:234
        printf("\n");
ffff80000080e4fc:	48 b8 69 da ff ff ff 	movabs rax,0xffffffffffffda69
ffff80000080e503:	ff ff ff 
ffff80000080e506:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e50a:	48 89 c7             	mov    rdi,rax
ffff80000080e50d:	49 89 df             	mov    r15,rbx
ffff80000080e510:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e515:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080e51c:	ff ff ff 
ffff80000080e51f:	48 01 da             	add    rdx,rbx
ffff80000080e522:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:235
        return -1;
ffff80000080e524:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e529:	e9 8a 00 00 00       	jmp    ffff80000080e5b8 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    }
    c= to_ascii(c&0x7f);
ffff80000080e52e:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e532:	83 e0 7f             	and    eax,0x7f
ffff80000080e535:	89 c7                	mov    edi,eax
ffff80000080e537:	49 89 df             	mov    r15,rbx
ffff80000080e53a:	48 b8 f6 04 ef ff ff 	movabs rax,0xffffffffffef04f6
ffff80000080e541:	ff ff ff 
ffff80000080e544:	48 01 d8             	add    rax,rbx
ffff80000080e547:	ff d0                	call   rax
ffff80000080e549:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    printf(" char:");
ffff80000080e54c:	48 b8 6b da ff ff ff 	movabs rax,0xffffffffffffda6b
ffff80000080e553:	ff ff ff 
ffff80000080e556:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e55a:	48 89 c7             	mov    rdi,rax
ffff80000080e55d:	49 89 df             	mov    r15,rbx
ffff80000080e560:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e565:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080e56c:	ff ff ff 
ffff80000080e56f:	48 01 da             	add    rdx,rbx
ffff80000080e572:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    putchar(c);
ffff80000080e574:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e578:	89 c7                	mov    edi,eax
ffff80000080e57a:	49 89 df             	mov    r15,rbx
ffff80000080e57d:	48 b8 aa 3b ee ff ff 	movabs rax,0xffffffffffee3baa
ffff80000080e584:	ff ff ff 
ffff80000080e587:	48 01 d8             	add    rax,rbx
ffff80000080e58a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:240
    printf("\n");
ffff80000080e58c:	48 b8 69 da ff ff ff 	movabs rax,0xffffffffffffda69
ffff80000080e593:	ff ff ff 
ffff80000080e596:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e59a:	48 89 c7             	mov    rdi,rax
ffff80000080e59d:	49 89 df             	mov    r15,rbx
ffff80000080e5a0:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e5a5:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080e5ac:	ff ff ff 
ffff80000080e5af:	48 01 da             	add    rdx,rbx
ffff80000080e5b2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
    return c;
ffff80000080e5b4:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242 (discriminator 1)
ffff80000080e5b8:	48 83 c4 30          	add    rsp,0x30
ffff80000080e5bc:	5b                   	pop    rbx
ffff80000080e5bd:	41 5f                	pop    r15
ffff80000080e5bf:	5d                   	pop    rbp
ffff80000080e5c0:	c3                   	ret    

ffff80000080e5c1 <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:20
struct blk_dev bd_hd={
    .do_request=hd_do_req
};
int dev_hd=-1,last_chk_res=0;
int init_disk()
{
ffff80000080e5c1:	f3 0f 1e fa          	endbr64 
ffff80000080e5c5:	55                   	push   rbp
ffff80000080e5c6:	48 89 e5             	mov    rbp,rsp
ffff80000080e5c9:	41 57                	push   r15
ffff80000080e5cb:	53                   	push   rbx
ffff80000080e5cc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e5cc <init_disk+0xb>
ffff80000080e5d3:	49 bb 2c f5 10 00 00 	movabs r11,0x10f52c
ffff80000080e5da:	00 00 00 
ffff80000080e5dd:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:21
    if((dev_hd= reg_blkdev(&bd_hd))<0)
ffff80000080e5e0:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff80000080e5e7:	ff ff ff 
ffff80000080e5ea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e5ee:	48 89 c7             	mov    rdi,rax
ffff80000080e5f1:	49 89 df             	mov    r15,rbx
ffff80000080e5f4:	48 b8 a9 f6 ee ff ff 	movabs rax,0xffffffffffeef6a9
ffff80000080e5fb:	ff ff ff 
ffff80000080e5fe:	48 01 d8             	add    rax,rbx
ffff80000080e601:	ff d0                	call   rax
ffff80000080e603:	48 ba 10 ff ff ff ff 	movabs rdx,0xffffffffffffff10
ffff80000080e60a:	ff ff ff 
ffff80000080e60d:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e611:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080e613:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e61a:	ff ff ff 
ffff80000080e61d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e621:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e623:	85 c0                	test   eax,eax
ffff80000080e625:	79 07                	jns    ffff80000080e62e <init_disk+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:22
        return -1;
ffff80000080e627:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e62c:	eb 05                	jmp    ffff80000080e633 <init_disk+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    // hd_iterate();
    return 0;
ffff80000080e62e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:28
}
ffff80000080e633:	5b                   	pop    rbx
ffff80000080e634:	41 5f                	pop    r15
ffff80000080e636:	5d                   	pop    rbp
ffff80000080e637:	c3                   	ret    

ffff80000080e638 <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31

int disk_int_handler_c()
{
ffff80000080e638:	f3 0f 1e fa          	endbr64 
ffff80000080e63c:	55                   	push   rbp
ffff80000080e63d:	48 89 e5             	mov    rbp,rsp
ffff80000080e640:	41 57                	push   r15
ffff80000080e642:	53                   	push   rbx
ffff80000080e643:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e647:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e647 <disk_int_handler_c+0xf>
ffff80000080e64e:	49 bb b1 f4 10 00 00 	movabs r11,0x10f4b1
ffff80000080e655:	00 00 00 
ffff80000080e658:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    if(r_running==NULL)
ffff80000080e65b:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e662:	ff ff ff 
ffff80000080e665:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e669:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e66c:	48 85 c0             	test   rax,rax
ffff80000080e66f:	75 32                	jne    ffff80000080e6a3 <disk_int_handler_c+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:34
    {
        comprintf("err:null running dreq\n");
ffff80000080e671:	48 b8 72 da ff ff ff 	movabs rax,0xffffffffffffda72
ffff80000080e678:	ff ff ff 
ffff80000080e67b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e67f:	48 89 c7             	mov    rdi,rax
ffff80000080e682:	49 89 df             	mov    r15,rbx
ffff80000080e685:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e68a:	48 ba cb 4b ef ff ff 	movabs rdx,0xffffffffffef4bcb
ffff80000080e691:	ff ff ff 
ffff80000080e694:	48 01 da             	add    rdx,rbx
ffff80000080e697:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:35
        return 1;//同步读写硬盘
ffff80000080e699:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080e69e:	e9 14 03 00 00       	jmp    ffff80000080e9b7 <disk_int_handler_c+0x37f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    }
    short *p=r_running->buffer;
ffff80000080e6a3:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e6aa:	ff ff ff 
ffff80000080e6ad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e6b4:	48 8b 40 22          	mov    rax,QWORD PTR [rax+0x22]
ffff80000080e6b8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:38
    int port=PORT_DISK_MAJOR;
ffff80000080e6bc:	c7 45 e4 f0 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080e6c3:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e6ca:	ff ff ff 
ffff80000080e6cd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6d1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e6d4:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e6d7:	0f b7 c0             	movzx  eax,ax
ffff80000080e6da:	83 e0 0f             	and    eax,0xf
ffff80000080e6dd:	83 f8 02             	cmp    eax,0x2
ffff80000080e6e0:	74 1f                	je     ffff80000080e701 <disk_int_handler_c+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40 (discriminator 1)
    BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_SLAVE)
ffff80000080e6e2:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e6e9:	ff ff ff 
ffff80000080e6ec:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6f0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e6f3:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e6f6:	0f b7 c0             	movzx  eax,ax
ffff80000080e6f9:	83 e0 0f             	and    eax,0xf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39 (discriminator 1)
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080e6fc:	83 f8 03             	cmp    eax,0x3
ffff80000080e6ff:	75 07                	jne    ffff80000080e708 <disk_int_handler_c+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:41
        port=PORT_DISK_SLAVE;
ffff80000080e701:	c7 45 e4 70 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    if(r_running->cmd==BLKDEV_REQ_READ)
ffff80000080e708:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e70f:	ff ff ff 
ffff80000080e712:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e716:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e719:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080e71c:	85 c0                	test   eax,eax
ffff80000080e71e:	75 61                	jne    ffff80000080e781 <disk_int_handler_c+0x149>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e720:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080e727:	eb 2f                	jmp    ffff80000080e758 <disk_int_handler_c+0x120>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:48 (discriminator 3)
        {
            *p++=inw(port);
ffff80000080e729:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e72c:	0f b7 c0             	movzx  eax,ax
ffff80000080e72f:	89 c7                	mov    edi,eax
ffff80000080e731:	49 89 df             	mov    r15,rbx
ffff80000080e734:	48 b8 0b a3 ee ff ff 	movabs rax,0xffffffffffeea30b
ffff80000080e73b:	ff ff ff 
ffff80000080e73e:	48 01 d8             	add    rax,rbx
ffff80000080e741:	ff d0                	call   rax
ffff80000080e743:	89 c2                	mov    edx,eax
ffff80000080e745:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e749:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffff80000080e74d:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080e751:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e754:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 1)
ffff80000080e758:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080e75b:	48 63 d0             	movsxd rdx,eax
ffff80000080e75e:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e765:	ff ff ff 
ffff80000080e768:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e76c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e76f:	48 8b 40 12          	mov    rax,QWORD PTR [rax+0x12]
ffff80000080e773:	48 c1 e0 08          	shl    rax,0x8
ffff80000080e777:	48 39 c2             	cmp    rdx,rax
ffff80000080e77a:	72 ad                	jb     ffff80000080e729 <disk_int_handler_c+0xf1>
ffff80000080e77c:	e9 53 01 00 00       	jmp    ffff80000080e8d4 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:50
        }
    }else if(r_running->cmd==BLKDEV_REQ_WRITE)
ffff80000080e781:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e788:	ff ff ff 
ffff80000080e78b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e78f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e792:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080e795:	83 f8 01             	cmp    eax,0x1
ffff80000080e798:	75 64                	jne    ffff80000080e7fe <disk_int_handler_c+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52
    {
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e79a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080e7a1:	eb 32                	jmp    ffff80000080e7d5 <disk_int_handler_c+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
            outw(port,*p++);
ffff80000080e7a3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e7a7:	48 8d 50 02          	lea    rdx,[rax+0x2]
ffff80000080e7ab:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080e7af:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e7b2:	0f b7 d0             	movzx  edx,ax
ffff80000080e7b5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e7b8:	0f b7 c0             	movzx  eax,ax
ffff80000080e7bb:	89 d6                	mov    esi,edx
ffff80000080e7bd:	89 c7                	mov    edi,eax
ffff80000080e7bf:	49 89 df             	mov    r15,rbx
ffff80000080e7c2:	48 b8 f5 a2 ee ff ff 	movabs rax,0xffffffffffeea2f5
ffff80000080e7c9:	ff ff ff 
ffff80000080e7cc:	48 01 d8             	add    rax,rbx
ffff80000080e7cf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e7d1:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 1)
ffff80000080e7d5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080e7d8:	48 63 d0             	movsxd rdx,eax
ffff80000080e7db:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e7e2:	ff ff ff 
ffff80000080e7e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e7e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e7ec:	48 8b 40 12          	mov    rax,QWORD PTR [rax+0x12]
ffff80000080e7f0:	48 c1 e0 08          	shl    rax,0x8
ffff80000080e7f4:	48 39 c2             	cmp    rdx,rax
ffff80000080e7f7:	72 aa                	jb     ffff80000080e7a3 <disk_int_handler_c+0x16b>
ffff80000080e7f9:	e9 d6 00 00 00       	jmp    ffff80000080e8d4 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:54
    }else if(r_running->cmd==DISKREQ_CHECK)
ffff80000080e7fe:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e805:	ff ff ff 
ffff80000080e808:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e80c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e80f:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080e812:	83 f8 02             	cmp    eax,0x2
ffff80000080e815:	75 54                	jne    ffff80000080e86b <disk_int_handler_c+0x233>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    {
        char stat=inb(port+7);
ffff80000080e817:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e81a:	83 c0 07             	add    eax,0x7
ffff80000080e81d:	0f b6 c0             	movzx  eax,al
ffff80000080e820:	89 c7                	mov    edi,eax
ffff80000080e822:	49 89 df             	mov    r15,rbx
ffff80000080e825:	48 b8 01 a3 ee ff ff 	movabs rax,0xffffffffffeea301
ffff80000080e82c:	ff ff ff 
ffff80000080e82f:	48 01 d8             	add    rax,rbx
ffff80000080e832:	ff d0                	call   rax
ffff80000080e834:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:57
        short dat=inw(port);
ffff80000080e837:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e83a:	0f b7 c0             	movzx  eax,ax
ffff80000080e83d:	89 c7                	mov    edi,eax
ffff80000080e83f:	49 89 df             	mov    r15,rbx
ffff80000080e842:	48 b8 0b a3 ee ff ff 	movabs rax,0xffffffffffeea30b
ffff80000080e849:	ff ff ff 
ffff80000080e84c:	48 01 d8             	add    rax,rbx
ffff80000080e84f:	ff d0                	call   rax
ffff80000080e851:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        if(1)
        {
            last_chk_res=DISK_CHK_OK;
ffff80000080e855:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff80000080e85c:	ff ff ff 
ffff80000080e85f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e863:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
ffff80000080e869:	eb 69                	jmp    ffff80000080e8d4 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        {
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            last_chk_res=DISK_CHK_ERR;
        }
    }else if(r_running->cmd==DISKREQ_RESET)
ffff80000080e86b:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e872:	ff ff ff 
ffff80000080e875:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e879:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e87c:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080e87f:	83 f8 03             	cmp    eax,0x3
ffff80000080e882:	75 50                	jne    ffff80000080e8d4 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:69
    {
        int stat=inb(port+7);
ffff80000080e884:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e887:	83 c0 07             	add    eax,0x7
ffff80000080e88a:	0f b6 c0             	movzx  eax,al
ffff80000080e88d:	89 c7                	mov    edi,eax
ffff80000080e88f:	49 89 df             	mov    r15,rbx
ffff80000080e892:	48 b8 01 a3 ee ff ff 	movabs rax,0xffffffffffeea301
ffff80000080e899:	ff ff ff 
ffff80000080e89c:	48 01 d8             	add    rax,rbx
ffff80000080e89f:	ff d0                	call   rax
ffff80000080e8a1:	0f b6 c0             	movzx  eax,al
ffff80000080e8a4:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:70
        printf("reset disk done.\nstat now:%x\n",stat);
ffff80000080e8a7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080e8aa:	89 c6                	mov    esi,eax
ffff80000080e8ac:	48 b8 89 da ff ff ff 	movabs rax,0xffffffffffffda89
ffff80000080e8b3:	ff ff ff 
ffff80000080e8b6:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e8ba:	48 89 c7             	mov    rdi,rax
ffff80000080e8bd:	49 89 df             	mov    r15,rbx
ffff80000080e8c0:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e8c5:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080e8cc:	ff ff ff 
ffff80000080e8cf:	48 01 da             	add    rdx,rbx
ffff80000080e8d2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:73
    }
    
    r_running=NULL;
ffff80000080e8d4:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e8db:	ff ff ff 
ffff80000080e8de:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e8e2:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:74
    end_request(dev_hd);
ffff80000080e8e9:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e8f0:	ff ff ff 
ffff80000080e8f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e8f7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e8f9:	0f b7 c0             	movzx  eax,ax
ffff80000080e8fc:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:64
    int major=BLKDEV_MAJOR(dev);
ffff80000080e900:	0f b7 45 d2          	movzx  eax,WORD PTR [rbp-0x2e]
ffff80000080e904:	c1 f8 04             	sar    eax,0x4
ffff80000080e907:	83 e0 0f             	and    eax,0xf
ffff80000080e90a:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    blk_devs[major].current_request->dev=-1;
ffff80000080e90d:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e914:	ff ff ff 
ffff80000080e917:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080e91b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080e91e:	48 98                	cdqe   
ffff80000080e920:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e924:	48 01 d0             	add    rax,rdx
ffff80000080e927:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080e92b:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080e930:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e937:	ff ff ff 
ffff80000080e93a:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080e93e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080e941:	48 98                	cdqe   
ffff80000080e943:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e947:	48 01 d0             	add    rax,rdx
ffff80000080e94a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080e94e:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080e952:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080e959:	ff ff ff 
ffff80000080e95c:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080e960:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080e963:	48 63 d2             	movsxd rdx,edx
ffff80000080e966:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080e96a:	48 01 ca             	add    rdx,rcx
ffff80000080e96d:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
}
ffff80000080e971:	90                   	nop
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:76
    //执行下一个请求
    hd_do_req(blk_devs[dev_hd].current_request);
ffff80000080e972:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e979:	ff ff ff 
ffff80000080e97c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e980:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e982:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080e989:	ff ff ff 
ffff80000080e98c:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e990:	48 98                	cdqe   
ffff80000080e992:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e996:	48 01 d0             	add    rax,rdx
ffff80000080e999:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080e99d:	48 89 c7             	mov    rdi,rax
ffff80000080e9a0:	49 89 df             	mov    r15,rbx
ffff80000080e9a3:	48 b8 7c 14 ef ff ff 	movabs rax,0xffffffffffef147c
ffff80000080e9aa:	ff ff ff 
ffff80000080e9ad:	48 01 d8             	add    rax,rbx
ffff80000080e9b0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    return 0;
ffff80000080e9b2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
}
ffff80000080e9b7:	48 83 c4 30          	add    rsp,0x30
ffff80000080e9bb:	5b                   	pop    rbx
ffff80000080e9bc:	41 5f                	pop    r15
ffff80000080e9be:	5d                   	pop    rbp
ffff80000080e9bf:	c3                   	ret    

ffff80000080e9c0 <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
int async_reset_disk(int disk)
{
ffff80000080e9c0:	f3 0f 1e fa          	endbr64 
ffff80000080e9c4:	55                   	push   rbp
ffff80000080e9c5:	48 89 e5             	mov    rbp,rsp
ffff80000080e9c8:	41 57                	push   r15
ffff80000080e9ca:	48 83 ec 18          	sub    rsp,0x18
ffff80000080e9ce:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e9ce <async_reset_disk+0xe>
ffff80000080e9d5:	49 bb 2a f1 10 00 00 	movabs r11,0x10f12a
ffff80000080e9dc:	00 00 00 
ffff80000080e9df:	4c 01 d8             	add    rax,r11
ffff80000080e9e2:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
ffff80000080e9e5:	be 0c 00 00 00       	mov    esi,0xc
ffff80000080e9ea:	bf f6 03 00 00       	mov    edi,0x3f6
ffff80000080e9ef:	49 89 c7             	mov    r15,rax
ffff80000080e9f2:	48 ba e8 a2 ee ff ff 	movabs rdx,0xffffffffffeea2e8
ffff80000080e9f9:	ff ff ff 
ffff80000080e9fc:	48 01 c2             	add    rdx,rax
ffff80000080e9ff:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    return 0;
ffff80000080ea01:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
}
ffff80000080ea06:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ea0a:	c9                   	leave  
ffff80000080ea0b:	c3                   	ret    

ffff80000080ea0c <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
ffff80000080ea0c:	f3 0f 1e fa          	endbr64 
ffff80000080ea10:	55                   	push   rbp
ffff80000080ea11:	48 89 e5             	mov    rbp,rsp
ffff80000080ea14:	41 57                	push   r15
ffff80000080ea16:	53                   	push   rbx
ffff80000080ea17:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ea1b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ea1b <async_read_disk+0xf>
ffff80000080ea22:	49 bb dd f0 10 00 00 	movabs r11,0x10f0dd
ffff80000080ea29:	00 00 00 
ffff80000080ea2c:	4c 01 db             	add    rbx,r11
ffff80000080ea2f:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ea32:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ea35:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ea38:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080ea3c:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
    int slave_disk=0;
ffff80000080ea42:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ea49:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080ea4d:	74 06                	je     ffff80000080ea55 <async_read_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88 (discriminator 1)
ffff80000080ea4f:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ea53:	75 06                	jne    ffff80000080ea5b <async_read_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
        port=PORT_DISK_SLAVE;
ffff80000080ea55:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080ea5b:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ea5f:	74 06                	je     ffff80000080ea67 <async_read_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90 (discriminator 1)
ffff80000080ea61:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080ea65:	75 07                	jne    ffff80000080ea6e <async_read_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
        slave_disk=1;
ffff80000080ea67:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
    outb(port+2,sec_n);
ffff80000080ea6e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080ea71:	0f b6 d0             	movzx  edx,al
ffff80000080ea74:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ea78:	83 c0 02             	add    eax,0x2
ffff80000080ea7b:	0f b7 c0             	movzx  eax,ax
ffff80000080ea7e:	89 d6                	mov    esi,edx
ffff80000080ea80:	89 c7                	mov    edi,eax
ffff80000080ea82:	49 89 df             	mov    r15,rbx
ffff80000080ea85:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ea8c:	ff ff ff 
ffff80000080ea8f:	48 01 d8             	add    rax,rbx
ffff80000080ea92:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    outb(port+3,lba&0xff);
ffff80000080ea94:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ea97:	0f b6 d0             	movzx  edx,al
ffff80000080ea9a:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ea9e:	83 c0 03             	add    eax,0x3
ffff80000080eaa1:	0f b7 c0             	movzx  eax,ax
ffff80000080eaa4:	89 d6                	mov    esi,edx
ffff80000080eaa6:	89 c7                	mov    edi,eax
ffff80000080eaa8:	49 89 df             	mov    r15,rbx
ffff80000080eaab:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eab2:	ff ff ff 
ffff80000080eab5:	48 01 d8             	add    rax,rbx
ffff80000080eab8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:94
    outb(port+4,(lba>>8)&0xff);
ffff80000080eaba:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eabd:	c1 e8 08             	shr    eax,0x8
ffff80000080eac0:	0f b6 d0             	movzx  edx,al
ffff80000080eac3:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eac7:	83 c0 04             	add    eax,0x4
ffff80000080eaca:	0f b7 c0             	movzx  eax,ax
ffff80000080eacd:	89 d6                	mov    esi,edx
ffff80000080eacf:	89 c7                	mov    edi,eax
ffff80000080ead1:	49 89 df             	mov    r15,rbx
ffff80000080ead4:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eadb:	ff ff ff 
ffff80000080eade:	48 01 d8             	add    rax,rbx
ffff80000080eae1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    outb(port+5,(lba>>16)&0xff);
ffff80000080eae3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eae6:	c1 e8 10             	shr    eax,0x10
ffff80000080eae9:	0f b6 d0             	movzx  edx,al
ffff80000080eaec:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eaf0:	83 c0 05             	add    eax,0x5
ffff80000080eaf3:	0f b7 c0             	movzx  eax,ax
ffff80000080eaf6:	89 d6                	mov    esi,edx
ffff80000080eaf8:	89 c7                	mov    edi,eax
ffff80000080eafa:	49 89 df             	mov    r15,rbx
ffff80000080eafd:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eb04:	ff ff ff 
ffff80000080eb07:	48 01 d8             	add    rax,rbx
ffff80000080eb0a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96
    char drv=slave_disk?0x10:0;
ffff80000080eb0c:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080eb10:	74 07                	je     ffff80000080eb19 <async_read_disk+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 1)
ffff80000080eb12:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080eb17:	eb 05                	jmp    ffff80000080eb1e <async_read_disk+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 2)
ffff80000080eb19:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 4)
ffff80000080eb1e:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080eb21:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eb24:	c1 e8 18             	shr    eax,0x18
ffff80000080eb27:	83 e0 0f             	and    eax,0xf
ffff80000080eb2a:	89 c2                	mov    edx,eax
ffff80000080eb2c:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080eb30:	09 d0                	or     eax,edx
ffff80000080eb32:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080eb35:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080eb38:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffff80000080eb3c:	0f b6 d0             	movzx  edx,al
ffff80000080eb3f:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb43:	83 c0 06             	add    eax,0x6
ffff80000080eb46:	0f b7 c0             	movzx  eax,ax
ffff80000080eb49:	89 d6                	mov    esi,edx
ffff80000080eb4b:	89 c7                	mov    edi,eax
ffff80000080eb4d:	49 89 df             	mov    r15,rbx
ffff80000080eb50:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eb57:	ff ff ff 
ffff80000080eb5a:	48 01 d8             	add    rax,rbx
ffff80000080eb5d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
ffff80000080eb5f:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb63:	83 c0 07             	add    eax,0x7
ffff80000080eb66:	0f b7 c0             	movzx  eax,ax
ffff80000080eb69:	be 20 00 00 00       	mov    esi,0x20
ffff80000080eb6e:	89 c7                	mov    edi,eax
ffff80000080eb70:	49 89 df             	mov    r15,rbx
ffff80000080eb73:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eb7a:	ff ff ff 
ffff80000080eb7d:	48 01 d8             	add    rax,rbx
ffff80000080eb80:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
ffff80000080eb82:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:120 (discriminator 4)
}
ffff80000080eb87:	48 83 c4 30          	add    rsp,0x30
ffff80000080eb8b:	5b                   	pop    rbx
ffff80000080eb8c:	41 5f                	pop    r15
ffff80000080eb8e:	5d                   	pop    rbp
ffff80000080eb8f:	c3                   	ret    

ffff80000080eb90 <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:122
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
ffff80000080eb90:	f3 0f 1e fa          	endbr64 
ffff80000080eb94:	55                   	push   rbp
ffff80000080eb95:	48 89 e5             	mov    rbp,rsp
ffff80000080eb98:	41 57                	push   r15
ffff80000080eb9a:	53                   	push   rbx
ffff80000080eb9b:	48 83 ec 30          	sub    rsp,0x30
ffff80000080eb9f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080eb9f <async_write_disk+0xf>
ffff80000080eba6:	49 bb 59 ef 10 00 00 	movabs r11,0x10ef59
ffff80000080ebad:	00 00 00 
ffff80000080ebb0:	4c 01 db             	add    rbx,r11
ffff80000080ebb3:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ebb6:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ebb9:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ebbc:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080ebc0:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:124
    int slave_disk=0;
ffff80000080ebc6:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ebcd:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080ebd1:	74 06                	je     ffff80000080ebd9 <async_write_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125 (discriminator 1)
ffff80000080ebd3:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ebd7:	75 06                	jne    ffff80000080ebdf <async_write_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        port=PORT_DISK_SLAVE;
ffff80000080ebd9:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080ebdf:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ebe3:	74 06                	je     ffff80000080ebeb <async_write_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127 (discriminator 1)
ffff80000080ebe5:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080ebe9:	75 07                	jne    ffff80000080ebf2 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
        slave_disk=1;
ffff80000080ebeb:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    while (1)
    {
        byte t=inb(0x1f7);
ffff80000080ebf2:	bf f7 00 00 00       	mov    edi,0xf7
ffff80000080ebf7:	49 89 df             	mov    r15,rbx
ffff80000080ebfa:	48 b8 01 a3 ee ff ff 	movabs rax,0xffffffffffeea301
ffff80000080ec01:	ff ff ff 
ffff80000080ec04:	48 01 d8             	add    rax,rbx
ffff80000080ec07:	ff d0                	call   rax
ffff80000080ec09:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:133
        //logf("istat:%x",t);
        byte err=t&1;
ffff80000080ec0c:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080ec10:	83 e0 01             	and    eax,0x1
ffff80000080ec13:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:134
        if(err!=0)
ffff80000080ec16:	80 7d e6 00          	cmp    BYTE PTR [rbp-0x1a],0x0
ffff80000080ec1a:	74 0a                	je     ffff80000080ec26 <async_write_disk+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        {
            //printf("ERR iwriting disk\n");
            return -1;
ffff80000080ec1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080ec21:	e9 23 01 00 00       	jmp    ffff80000080ed49 <async_write_disk+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        }
        t&=0x88;
ffff80000080ec26:	80 65 e7 88          	and    BYTE PTR [rbp-0x19],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080ec2a:	80 7d e7 08          	cmp    BYTE PTR [rbp-0x19],0x8
ffff80000080ec2e:	74 02                	je     ffff80000080ec32 <async_write_disk+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:130
    {
ffff80000080ec30:	eb c0                	jmp    ffff80000080ebf2 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080ec32:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
    }
    outb(port+2,sec_n);
ffff80000080ec33:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080ec36:	0f b6 d0             	movzx  edx,al
ffff80000080ec39:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ec3d:	83 c0 02             	add    eax,0x2
ffff80000080ec40:	0f b7 c0             	movzx  eax,ax
ffff80000080ec43:	89 d6                	mov    esi,edx
ffff80000080ec45:	89 c7                	mov    edi,eax
ffff80000080ec47:	49 89 df             	mov    r15,rbx
ffff80000080ec4a:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ec51:	ff ff ff 
ffff80000080ec54:	48 01 d8             	add    rax,rbx
ffff80000080ec57:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:143
    outb(port+3,lba&0xff);
ffff80000080ec59:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ec5c:	0f b6 d0             	movzx  edx,al
ffff80000080ec5f:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ec63:	83 c0 03             	add    eax,0x3
ffff80000080ec66:	0f b7 c0             	movzx  eax,ax
ffff80000080ec69:	89 d6                	mov    esi,edx
ffff80000080ec6b:	89 c7                	mov    edi,eax
ffff80000080ec6d:	49 89 df             	mov    r15,rbx
ffff80000080ec70:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ec77:	ff ff ff 
ffff80000080ec7a:	48 01 d8             	add    rax,rbx
ffff80000080ec7d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
    outb(port+4,(lba>>8)&0xff);
ffff80000080ec7f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ec82:	c1 e8 08             	shr    eax,0x8
ffff80000080ec85:	0f b6 d0             	movzx  edx,al
ffff80000080ec88:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ec8c:	83 c0 04             	add    eax,0x4
ffff80000080ec8f:	0f b7 c0             	movzx  eax,ax
ffff80000080ec92:	89 d6                	mov    esi,edx
ffff80000080ec94:	89 c7                	mov    edi,eax
ffff80000080ec96:	49 89 df             	mov    r15,rbx
ffff80000080ec99:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eca0:	ff ff ff 
ffff80000080eca3:	48 01 d8             	add    rax,rbx
ffff80000080eca6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
    outb(port+5,(lba>>16)&0xff);
ffff80000080eca8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ecab:	c1 e8 10             	shr    eax,0x10
ffff80000080ecae:	0f b6 d0             	movzx  edx,al
ffff80000080ecb1:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ecb5:	83 c0 05             	add    eax,0x5
ffff80000080ecb8:	0f b7 c0             	movzx  eax,ax
ffff80000080ecbb:	89 d6                	mov    esi,edx
ffff80000080ecbd:	89 c7                	mov    edi,eax
ffff80000080ecbf:	49 89 df             	mov    r15,rbx
ffff80000080ecc2:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ecc9:	ff ff ff 
ffff80000080eccc:	48 01 d8             	add    rax,rbx
ffff80000080eccf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146
    char drv=slave_disk?0x10:0;
ffff80000080ecd1:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080ecd5:	74 07                	je     ffff80000080ecde <async_write_disk+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 1)
ffff80000080ecd7:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080ecdc:	eb 05                	jmp    ffff80000080ece3 <async_write_disk+0x153>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 2)
ffff80000080ecde:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 4)
ffff80000080ece3:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080ece6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ece9:	c1 e8 18             	shr    eax,0x18
ffff80000080ecec:	83 e0 0f             	and    eax,0xf
ffff80000080ecef:	89 c2                	mov    edx,eax
ffff80000080ecf1:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffff80000080ecf5:	09 d0                	or     eax,edx
ffff80000080ecf7:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080ecfa:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080ecfd:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000080ed01:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ed05:	83 c0 06             	add    eax,0x6
ffff80000080ed08:	0f b7 c0             	movzx  eax,ax
ffff80000080ed0b:	89 d6                	mov    esi,edx
ffff80000080ed0d:	89 c7                	mov    edi,eax
ffff80000080ed0f:	49 89 df             	mov    r15,rbx
ffff80000080ed12:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ed19:	ff ff ff 
ffff80000080ed1c:	48 01 d8             	add    rax,rbx
ffff80000080ed1f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:149 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
ffff80000080ed21:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ed25:	83 c0 07             	add    eax,0x7
ffff80000080ed28:	0f b7 c0             	movzx  eax,ax
ffff80000080ed2b:	be 30 00 00 00       	mov    esi,0x30
ffff80000080ed30:	89 c7                	mov    edi,eax
ffff80000080ed32:	49 89 df             	mov    r15,rbx
ffff80000080ed35:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ed3c:	ff ff ff 
ffff80000080ed3f:	48 01 d8             	add    rax,rbx
ffff80000080ed42:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
ffff80000080ed44:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
}
ffff80000080ed49:	48 83 c4 30          	add    rsp,0x30
ffff80000080ed4d:	5b                   	pop    rbx
ffff80000080ed4e:	41 5f                	pop    r15
ffff80000080ed50:	5d                   	pop    rbp
ffff80000080ed51:	c3                   	ret    

ffff80000080ed52 <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
int read_disk(int disk, int lba, int secn, char *dest)
{
ffff80000080ed52:	f3 0f 1e fa          	endbr64 
ffff80000080ed56:	55                   	push   rbp
ffff80000080ed57:	48 89 e5             	mov    rbp,rsp
ffff80000080ed5a:	41 57                	push   r15
ffff80000080ed5c:	53                   	push   rbx
ffff80000080ed5d:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ed61:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ed61 <read_disk+0xf>
ffff80000080ed68:	49 bb 97 ed 10 00 00 	movabs r11,0x10ed97
ffff80000080ed6f:	00 00 00 
ffff80000080ed72:	4c 01 db             	add    rbx,r11
ffff80000080ed75:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ed78:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ed7b:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ed7e:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    // request(disk,DISKREQ_READ,lba,secn,dest);
    int ret=read_disk_asm(lba,secn,dest);
ffff80000080ed82:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ed86:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080ed89:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ed8c:	89 ce                	mov    esi,ecx
ffff80000080ed8e:	89 c7                	mov    edi,eax
ffff80000080ed90:	49 89 df             	mov    r15,rbx
ffff80000080ed93:	48 b8 04 16 ef ff ff 	movabs rax,0xffffffffffef1604
ffff80000080ed9a:	ff ff ff 
ffff80000080ed9d:	48 01 d8             	add    rax,rbx
ffff80000080eda0:	ff d0                	call   rax
ffff80000080eda2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:179

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080eda5:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080edac:	ff ff ff 
ffff80000080edaf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080edb3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:180
    return ret;
ffff80000080edba:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:181
}
ffff80000080edbd:	48 83 c4 30          	add    rsp,0x30
ffff80000080edc1:	5b                   	pop    rbx
ffff80000080edc2:	41 5f                	pop    r15
ffff80000080edc4:	5d                   	pop    rbp
ffff80000080edc5:	c3                   	ret    

ffff80000080edc6 <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:183
int write_disk(int disk, int lba, int secn, char *src)
{
ffff80000080edc6:	f3 0f 1e fa          	endbr64 
ffff80000080edca:	55                   	push   rbp
ffff80000080edcb:	48 89 e5             	mov    rbp,rsp
ffff80000080edce:	41 57                	push   r15
ffff80000080edd0:	53                   	push   rbx
ffff80000080edd1:	48 83 ec 30          	sub    rsp,0x30
ffff80000080edd5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080edd5 <write_disk+0xf>
ffff80000080eddc:	49 bb 23 ed 10 00 00 	movabs r11,0x10ed23
ffff80000080ede3:	00 00 00 
ffff80000080ede6:	4c 01 db             	add    rbx,r11
ffff80000080ede9:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080edec:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080edef:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080edf2:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:185
    // request(disk,DISKREQ_WRITE,lba,secn,src);
    int ret=write_disk_asm(lba,secn,src);
ffff80000080edf6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080edfa:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080edfd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ee00:	89 ce                	mov    esi,ecx
ffff80000080ee02:	89 c7                	mov    edi,eax
ffff80000080ee04:	49 89 df             	mov    r15,rbx
ffff80000080ee07:	48 b8 78 16 ef ff ff 	movabs rax,0xffffffffffef1678
ffff80000080ee0e:	ff ff ff 
ffff80000080ee11:	48 01 d8             	add    rax,rbx
ffff80000080ee14:	ff d0                	call   rax
ffff80000080ee16:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:192
    if(running_req){

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    running_req=NULL;
ffff80000080ee19:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080ee20:	ff ff ff 
ffff80000080ee23:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee27:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:193
    return ret;
ffff80000080ee2e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:194
}
ffff80000080ee31:	48 83 c4 30          	add    rsp,0x30
ffff80000080ee35:	5b                   	pop    rbx
ffff80000080ee36:	41 5f                	pop    r15
ffff80000080ee38:	5d                   	pop    rbp
ffff80000080ee39:	c3                   	ret    

ffff80000080ee3a <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198


int async_check_disk(int disk)
{
ffff80000080ee3a:	f3 0f 1e fa          	endbr64 
ffff80000080ee3e:	55                   	push   rbp
ffff80000080ee3f:	48 89 e5             	mov    rbp,rsp
ffff80000080ee42:	41 57                	push   r15
ffff80000080ee44:	53                   	push   rbx
ffff80000080ee45:	48 83 ec 20          	sub    rsp,0x20
ffff80000080ee49:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ee49 <async_check_disk+0xf>
ffff80000080ee50:	49 bb af ec 10 00 00 	movabs r11,0x10ecaf
ffff80000080ee57:	00 00 00 
ffff80000080ee5a:	4c 01 db             	add    rbx,r11
ffff80000080ee5d:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short disknr=PORT_DISK_MAJOR;
ffff80000080ee60:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    unsigned short chkcmd=0xe0;
ffff80000080ee66:	66 c7 45 ec e0 00    	mov    WORD PTR [rbp-0x14],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ee6c:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080ee70:	74 06                	je     ffff80000080ee78 <async_check_disk+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
ffff80000080ee72:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ee76:	75 06                	jne    ffff80000080ee7e <async_check_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        disknr=PORT_DISK_SLAVE;
ffff80000080ee78:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
ffff80000080ee7e:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080ee82:	74 06                	je     ffff80000080ee8a <async_check_disk+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
ffff80000080ee84:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ee88:	75 06                	jne    ffff80000080ee90 <async_check_disk+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        chkcmd=0xf0;
ffff80000080ee8a:	66 c7 45 ec f0 00    	mov    WORD PTR [rbp-0x14],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:205
    outb(disknr+2,1);
ffff80000080ee90:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ee94:	83 c0 02             	add    eax,0x2
ffff80000080ee97:	0f b7 c0             	movzx  eax,ax
ffff80000080ee9a:	be 01 00 00 00       	mov    esi,0x1
ffff80000080ee9f:	89 c7                	mov    edi,eax
ffff80000080eea1:	49 89 df             	mov    r15,rbx
ffff80000080eea4:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eeab:	ff ff ff 
ffff80000080eeae:	48 01 d8             	add    rax,rbx
ffff80000080eeb1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    outb(disknr+3,0);
ffff80000080eeb3:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eeb7:	83 c0 03             	add    eax,0x3
ffff80000080eeba:	0f b7 c0             	movzx  eax,ax
ffff80000080eebd:	be 00 00 00 00       	mov    esi,0x0
ffff80000080eec2:	89 c7                	mov    edi,eax
ffff80000080eec4:	49 89 df             	mov    r15,rbx
ffff80000080eec7:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eece:	ff ff ff 
ffff80000080eed1:	48 01 d8             	add    rax,rbx
ffff80000080eed4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    outb(disknr+4,0);
ffff80000080eed6:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eeda:	83 c0 04             	add    eax,0x4
ffff80000080eedd:	0f b7 c0             	movzx  eax,ax
ffff80000080eee0:	be 00 00 00 00       	mov    esi,0x0
ffff80000080eee5:	89 c7                	mov    edi,eax
ffff80000080eee7:	49 89 df             	mov    r15,rbx
ffff80000080eeea:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080eef1:	ff ff ff 
ffff80000080eef4:	48 01 d8             	add    rax,rbx
ffff80000080eef7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:208
    outb(disknr+5,0);
ffff80000080eef9:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eefd:	83 c0 05             	add    eax,0x5
ffff80000080ef00:	0f b7 c0             	movzx  eax,ax
ffff80000080ef03:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ef08:	89 c7                	mov    edi,eax
ffff80000080ef0a:	49 89 df             	mov    r15,rbx
ffff80000080ef0d:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ef14:	ff ff ff 
ffff80000080ef17:	48 01 d8             	add    rax,rbx
ffff80000080ef1a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
    outb(disknr+6,chkcmd);//主硬盘
ffff80000080ef1c:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffff80000080ef20:	0f b6 d0             	movzx  edx,al
ffff80000080ef23:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ef27:	83 c0 06             	add    eax,0x6
ffff80000080ef2a:	0f b7 c0             	movzx  eax,ax
ffff80000080ef2d:	89 d6                	mov    esi,edx
ffff80000080ef2f:	89 c7                	mov    edi,eax
ffff80000080ef31:	49 89 df             	mov    r15,rbx
ffff80000080ef34:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ef3b:	ff ff ff 
ffff80000080ef3e:	48 01 d8             	add    rax,rbx
ffff80000080ef41:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
    outb(disknr+7,DISK_CMD_CHECK);
ffff80000080ef43:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ef47:	83 c0 07             	add    eax,0x7
ffff80000080ef4a:	0f b7 c0             	movzx  eax,ax
ffff80000080ef4d:	be 90 00 00 00       	mov    esi,0x90
ffff80000080ef52:	89 c7                	mov    edi,eax
ffff80000080ef54:	49 89 df             	mov    r15,rbx
ffff80000080ef57:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000080ef5e:	ff ff ff 
ffff80000080ef61:	48 01 d8             	add    rax,rbx
ffff80000080ef64:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
ffff80000080ef66:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
}
ffff80000080ef6b:	48 83 c4 20          	add    rsp,0x20
ffff80000080ef6f:	5b                   	pop    rbx
ffff80000080ef70:	41 5f                	pop    r15
ffff80000080ef72:	5d                   	pop    rbp
ffff80000080ef73:	c3                   	ret    

ffff80000080ef74 <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:226

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(struct request* req)
{
ffff80000080ef74:	f3 0f 1e fa          	endbr64 
ffff80000080ef78:	55                   	push   rbp
ffff80000080ef79:	48 89 e5             	mov    rbp,rsp
ffff80000080ef7c:	41 57                	push   r15
ffff80000080ef7e:	48 83 ec 28          	sub    rsp,0x28
ffff80000080ef82:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ef82 <hd_do_req+0xe>
ffff80000080ef89:	49 bb 76 eb 10 00 00 	movabs r11,0x10eb76
ffff80000080ef90:	00 00 00 
ffff80000080ef93:	4c 01 d8             	add    rax,r11
ffff80000080ef96:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:227
    if(!req)
ffff80000080ef9a:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080ef9f:	75 0a                	jne    ffff80000080efab <hd_do_req+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:228
        return -1;
ffff80000080efa1:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080efa6:	e9 35 01 00 00       	jmp    ffff80000080f0e0 <hd_do_req+0x16c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:229
    start_request(req->dev);
ffff80000080efab:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080efaf:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080efb2:	0f b7 d2             	movzx  edx,dx
ffff80000080efb5:	66 89 55 ea          	mov    WORD PTR [rbp-0x16],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080efb9:	0f b7 55 ea          	movzx  edx,WORD PTR [rbp-0x16]
ffff80000080efbd:	c1 fa 04             	sar    edx,0x4
ffff80000080efc0:	89 d1                	mov    ecx,edx
ffff80000080efc2:	83 e1 0f             	and    ecx,0xf
ffff80000080efc5:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080efcc:	ff ff ff 
ffff80000080efcf:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080efd3:	48 63 d1             	movsxd rdx,ecx
ffff80000080efd6:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080efda:	48 01 f2             	add    rdx,rsi
ffff80000080efdd:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080efe1:	48 8b 52 2a          	mov    rdx,QWORD PTR [rdx+0x2a]
ffff80000080efe5:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:195
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080efe9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080efed:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080eff0:	83 fa 02             	cmp    edx,0x2
ffff80000080eff3:	74 0c                	je     ffff80000080f001 <hd_do_req+0x8d>
ffff80000080eff5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080eff9:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080effc:	83 fa 01             	cmp    edx,0x1
ffff80000080efff:	75 0b                	jne    ffff80000080f00c <hd_do_req+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
            p->stat=TASK_SUSPENDED;
ffff80000080f001:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f005:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
}
ffff80000080f00c:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
ffff80000080f00d:	90                   	nop
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:230
    int diski=BLKDEV_MINOR(req->dev);
ffff80000080f00e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f012:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080f015:	0f b7 d2             	movzx  edx,dx
ffff80000080f018:	83 e2 0f             	and    edx,0xf
ffff80000080f01b:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:233
    // for(;disks[diski]!=args->dev;diski++);

    switch (req->cmd)
ffff80000080f01e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f022:	8b 52 02             	mov    edx,DWORD PTR [rdx+0x2]
ffff80000080f025:	83 fa 04             	cmp    edx,0x4
ffff80000080f028:	0f 84 8d 00 00 00    	je     ffff80000080f0bb <hd_do_req+0x147>
ffff80000080f02e:	83 fa 04             	cmp    edx,0x4
ffff80000080f031:	0f 8f 9d 00 00 00    	jg     ffff80000080f0d4 <hd_do_req+0x160>
ffff80000080f037:	85 d2                	test   edx,edx
ffff80000080f039:	74 0a                	je     ffff80000080f045 <hd_do_req+0xd1>
ffff80000080f03b:	83 fa 01             	cmp    edx,0x1
ffff80000080f03e:	74 40                	je     ffff80000080f080 <hd_do_req+0x10c>
ffff80000080f040:	e9 8f 00 00 00       	jmp    ffff80000080f0d4 <hd_do_req+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:236
    {
    case BLKDEV_REQ_READ:
        async_read_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080f045:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f049:	48 8b 52 22          	mov    rdx,QWORD PTR [rdx+0x22]
ffff80000080f04d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f051:	48 8b 49 12          	mov    rcx,QWORD PTR [rcx+0x12]
ffff80000080f055:	41 89 c8             	mov    r8d,ecx
ffff80000080f058:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f05c:	48 8b 49 0a          	mov    rcx,QWORD PTR [rcx+0xa]
ffff80000080f060:	89 ce                	mov    esi,ecx
ffff80000080f062:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080f065:	48 89 d1             	mov    rcx,rdx
ffff80000080f068:	44 89 c2             	mov    edx,r8d
ffff80000080f06b:	49 89 c7             	mov    r15,rax
ffff80000080f06e:	49 b8 14 0f ef ff ff 	movabs r8,0xffffffffffef0f14
ffff80000080f075:	ff ff ff 
ffff80000080f078:	49 01 c0             	add    r8,rax
ffff80000080f07b:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:237
        break;
ffff80000080f07e:	eb 5b                	jmp    ffff80000080f0db <hd_do_req+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:239
    case BLKDEV_REQ_WRITE:
        async_write_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080f080:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f084:	48 8b 52 22          	mov    rdx,QWORD PTR [rdx+0x22]
ffff80000080f088:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f08c:	48 8b 49 12          	mov    rcx,QWORD PTR [rcx+0x12]
ffff80000080f090:	41 89 c8             	mov    r8d,ecx
ffff80000080f093:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f097:	48 8b 49 0a          	mov    rcx,QWORD PTR [rcx+0xa]
ffff80000080f09b:	89 ce                	mov    esi,ecx
ffff80000080f09d:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080f0a0:	48 89 d1             	mov    rcx,rdx
ffff80000080f0a3:	44 89 c2             	mov    edx,r8d
ffff80000080f0a6:	49 89 c7             	mov    r15,rax
ffff80000080f0a9:	49 b8 98 10 ef ff ff 	movabs r8,0xffffffffffef1098
ffff80000080f0b0:	ff ff ff 
ffff80000080f0b3:	49 01 c0             	add    r8,rax
ffff80000080f0b6:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:240
        break;
ffff80000080f0b9:	eb 20                	jmp    ffff80000080f0db <hd_do_req+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242
    case DRVF_CHK:
        async_check_disk(diski);
ffff80000080f0bb:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080f0be:	89 d7                	mov    edi,edx
ffff80000080f0c0:	49 89 c7             	mov    r15,rax
ffff80000080f0c3:	48 ba 42 13 ef ff ff 	movabs rdx,0xffffffffffef1342
ffff80000080f0ca:	ff ff ff 
ffff80000080f0cd:	48 01 c2             	add    rdx,rax
ffff80000080f0d0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
        break;
ffff80000080f0d2:	eb 07                	jmp    ffff80000080f0db <hd_do_req+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:244
    default:return -1;
ffff80000080f0d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f0d9:	eb 05                	jmp    ffff80000080f0e0 <hd_do_req+0x16c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    }
    return 0;
ffff80000080f0db:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:247
ffff80000080f0e0:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f0e4:	c9                   	leave  
ffff80000080f0e5:	c3                   	ret    
ffff80000080f0e6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080f0ed:	00 00 00 

ffff80000080f0f0 <disk_int_handler>:
disk_int_handler():
ffff80000080f0f0:	e8 19 8d ff ff       	call   ffff800000807e0e <eoi>
ffff80000080f0f5:	e8 3e f5 ff ff       	call   ffff80000080e638 <disk_int_handler_c>
ffff80000080f0fa:	48 cf                	iretq  

ffff80000080f0fc <read_disk_asm>:
read_disk_asm():
ffff80000080f0fc:	55                   	push   rbp
ffff80000080f0fd:	48 89 e5             	mov    rbp,rsp
ffff80000080f100:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f104:	31 c9                	xor    ecx,ecx
ffff80000080f106:	48 89 f8             	mov    rax,rdi
ffff80000080f109:	48 89 f1             	mov    rcx,rsi
ffff80000080f10c:	48 89 d3             	mov    rbx,rdx
ffff80000080f10f:	48 89 c6             	mov    rsi,rax
ffff80000080f112:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f116:	88 c8                	mov    al,cl
ffff80000080f118:	ee                   	out    dx,al
ffff80000080f119:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f11d:	89 f0                	mov    eax,esi
ffff80000080f11f:	ee                   	out    dx,al
ffff80000080f120:	66 ff c2             	inc    dx
ffff80000080f123:	c1 e8 08             	shr    eax,0x8
ffff80000080f126:	ee                   	out    dx,al
ffff80000080f127:	66 ff c2             	inc    dx
ffff80000080f12a:	c1 e8 08             	shr    eax,0x8
ffff80000080f12d:	ee                   	out    dx,al
ffff80000080f12e:	66 ff c2             	inc    dx
ffff80000080f131:	66 c1 e8 08          	shr    ax,0x8
ffff80000080f135:	24 0f                	and    al,0xf
ffff80000080f137:	0c e0                	or     al,0xe0
ffff80000080f139:	ee                   	out    dx,al
ffff80000080f13a:	66 ff c2             	inc    dx
ffff80000080f13d:	b0 20                	mov    al,0x20
ffff80000080f13f:	ee                   	out    dx,al

ffff80000080f140 <read_disk_asm.wait>:
read_disk_asm.wait():
ffff80000080f140:	90                   	nop
ffff80000080f141:	ec                   	in     al,dx
ffff80000080f142:	24 88                	and    al,0x88
ffff80000080f144:	3c 08                	cmp    al,0x8
ffff80000080f146:	75 f8                	jne    ffff80000080f140 <read_disk_asm.wait>
ffff80000080f148:	66 89 d7             	mov    di,dx
ffff80000080f14b:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080f14f:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f153 <read_disk_asm.read>:
read_disk_asm.read():
ffff80000080f153:	66 ed                	in     ax,dx
ffff80000080f155:	66 89 03             	mov    WORD PTR [rbx],ax
ffff80000080f158:	48 83 c3 02          	add    rbx,0x2
ffff80000080f15c:	e2 f5                	loop   ffff80000080f153 <read_disk_asm.read>
ffff80000080f15e:	c9                   	leave  
ffff80000080f15f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f164:	c3                   	ret    

ffff80000080f165 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
ffff80000080f165:	66 ba f1 01          	mov    dx,0x1f1
ffff80000080f169:	48 31 c0             	xor    rax,rax
ffff80000080f16c:	66 ed                	in     ax,dx
ffff80000080f16e:	c9                   	leave  
ffff80000080f16f:	c3                   	ret    

ffff80000080f170 <write_disk_asm>:
write_disk_asm():
ffff80000080f170:	55                   	push   rbp
ffff80000080f171:	48 89 e5             	mov    rbp,rsp
ffff80000080f174:	48 89 f8             	mov    rax,rdi
ffff80000080f177:	48 89 f1             	mov    rcx,rsi
ffff80000080f17a:	48 89 d3             	mov    rbx,rdx
ffff80000080f17d:	50                   	push   rax
ffff80000080f17e:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f182:	88 c8                	mov    al,cl
ffff80000080f184:	ee                   	out    dx,al
ffff80000080f185:	58                   	pop    rax
ffff80000080f186:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f18a:	ee                   	out    dx,al
ffff80000080f18b:	c1 e8 08             	shr    eax,0x8
ffff80000080f18e:	66 ba f4 01          	mov    dx,0x1f4
ffff80000080f192:	ee                   	out    dx,al
ffff80000080f193:	c1 e8 08             	shr    eax,0x8
ffff80000080f196:	66 ba f5 01          	mov    dx,0x1f5
ffff80000080f19a:	ee                   	out    dx,al
ffff80000080f19b:	c1 e8 08             	shr    eax,0x8
ffff80000080f19e:	24 0f                	and    al,0xf
ffff80000080f1a0:	0c e0                	or     al,0xe0
ffff80000080f1a2:	66 ba f6 01          	mov    dx,0x1f6
ffff80000080f1a6:	ee                   	out    dx,al
ffff80000080f1a7:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f1ab:	b0 30                	mov    al,0x30
ffff80000080f1ad:	ee                   	out    dx,al

ffff80000080f1ae <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
ffff80000080f1ae:	90                   	nop
ffff80000080f1af:	ec                   	in     al,dx
ffff80000080f1b0:	24 88                	and    al,0x88
ffff80000080f1b2:	3c 08                	cmp    al,0x8
ffff80000080f1b4:	75 f8                	jne    ffff80000080f1ae <write_disk_asm.not_ready2>
ffff80000080f1b6:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080f1ba:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f1be <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
ffff80000080f1be:	66 8b 03             	mov    ax,WORD PTR [rbx]
ffff80000080f1c1:	66 ef                	out    dx,ax
ffff80000080f1c3:	83 c3 02             	add    ebx,0x2
ffff80000080f1c6:	e2 f6                	loop   ffff80000080f1be <write_disk_asm.go_on_write>
ffff80000080f1c8:	c9                   	leave  
ffff80000080f1c9:	c3                   	ret    

ffff80000080f1ca <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:15
#include "proc.h"
#include "devman.h"
#include <sys/unistd.h>

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
ffff80000080f1ca:	f3 0f 1e fa          	endbr64 
ffff80000080f1ce:	55                   	push   rbp
ffff80000080f1cf:	48 89 e5             	mov    rbp,rsp
ffff80000080f1d2:	41 57                	push   r15
ffff80000080f1d4:	53                   	push   rbx
ffff80000080f1d5:	48 83 ec 20          	sub    rsp,0x20
ffff80000080f1d9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f1d9 <DISK1_FAT32_read_FAT_Entry+0xf>
ffff80000080f1e0:	49 bb 1f e9 10 00 00 	movabs r11,0x10e91f
ffff80000080f1e7:	00 00 00 
ffff80000080f1ea:	4c 01 db             	add    rbx,r11
ffff80000080f1ed:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080f1f1:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
	unsigned int *buf;
	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080f1f4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f1f8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f1fc:	89 c2                	mov    edx,eax
ffff80000080f1fe:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f201:	c1 e8 07             	shr    eax,0x7
ffff80000080f204:	01 d0                	add    eax,edx
ffff80000080f206:	89 c2                	mov    edx,eax
ffff80000080f208:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f20f:	ff ff ff 
ffff80000080f212:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f216:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f219:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f21d:	0f b7 c0             	movzx  eax,ax
ffff80000080f220:	89 d6                	mov    esi,edx
ffff80000080f222:	89 c7                	mov    edi,eax
ffff80000080f224:	49 89 df             	mov    r15,rbx
ffff80000080f227:	48 b8 e2 fc ee ff ff 	movabs rax,0xffffffffffeefce2
ffff80000080f22e:	ff ff ff 
ffff80000080f231:	48 01 d8             	add    rax,rbx
ffff80000080f234:	ff d0                	call   rax
ffff80000080f236:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:18
	buf=bh->data;
ffff80000080f23a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f23e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f241:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%#010x\n",fat_entry,buf[fat_entry & 0x7f]);
ffff80000080f245:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f248:	83 e0 7f             	and    eax,0x7f
ffff80000080f24b:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f252:	00 
ffff80000080f253:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f257:	48 01 d0             	add    rax,rdx
ffff80000080f25a:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080f25c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f25f:	89 c6                	mov    esi,eax
ffff80000080f261:	48 b8 a8 da ff ff ff 	movabs rax,0xffffffffffffdaa8
ffff80000080f268:	ff ff ff 
ffff80000080f26b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f26f:	48 89 c7             	mov    rdi,rax
ffff80000080f272:	49 89 df             	mov    r15,rbx
ffff80000080f275:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f27a:	48 b9 fb 3b ee ff ff 	movabs rcx,0xffffffffffee3bfb
ffff80000080f281:	ff ff ff 
ffff80000080f284:	48 01 d9             	add    rcx,rbx
ffff80000080f287:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:20
	brelse(bh);
ffff80000080f289:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f28d:	48 89 c7             	mov    rdi,rax
ffff80000080f290:	49 89 df             	mov    r15,rbx
ffff80000080f293:	48 b8 10 03 ef ff ff 	movabs rax,0xffffffffffef0310
ffff80000080f29a:	ff ff ff 
ffff80000080f29d:	48 01 d8             	add    rax,rbx
ffff80000080f2a0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21
	return buf[fat_entry & 0x7f] & 0x0fffffff;
ffff80000080f2a2:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f2a5:	83 e0 7f             	and    eax,0x7f
ffff80000080f2a8:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f2af:	00 
ffff80000080f2b0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f2b4:	48 01 d0             	add    rax,rdx
ffff80000080f2b7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f2b9:	25 ff ff ff 0f       	and    eax,0xfffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:22
}
ffff80000080f2be:	48 83 c4 20          	add    rsp,0x20
ffff80000080f2c2:	5b                   	pop    rbx
ffff80000080f2c3:	41 5f                	pop    r15
ffff80000080f2c5:	5d                   	pop    rbp
ffff80000080f2c6:	c3                   	ret    

ffff80000080f2c7 <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:26


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
ffff80000080f2c7:	f3 0f 1e fa          	endbr64 
ffff80000080f2cb:	55                   	push   rbp
ffff80000080f2cc:	48 89 e5             	mov    rbp,rsp
ffff80000080f2cf:	41 57                	push   r15
ffff80000080f2d1:	53                   	push   rbx
ffff80000080f2d2:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f2d6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f2d6 <DISK1_FAT32_write_FAT_Entry+0xf>
ffff80000080f2dd:	49 bb 22 e8 10 00 00 	movabs r11,0x10e822
ffff80000080f2e4:	00 00 00 
ffff80000080f2e7:	4c 01 db             	add    rbx,r11
ffff80000080f2ea:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080f2ee:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080f2f1:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30
	unsigned int *buf;
	int i;

	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080f2f4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f2f8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f2fc:	89 c2                	mov    edx,eax
ffff80000080f2fe:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f301:	c1 e8 07             	shr    eax,0x7
ffff80000080f304:	01 d0                	add    eax,edx
ffff80000080f306:	89 c2                	mov    edx,eax
ffff80000080f308:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f30f:	ff ff ff 
ffff80000080f312:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f316:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f319:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f31d:	0f b7 c0             	movzx  eax,ax
ffff80000080f320:	89 d6                	mov    esi,edx
ffff80000080f322:	89 c7                	mov    edi,eax
ffff80000080f324:	49 89 df             	mov    r15,rbx
ffff80000080f327:	48 b8 e2 fc ee ff ff 	movabs rax,0xffffffffffeefce2
ffff80000080f32e:	ff ff ff 
ffff80000080f331:	48 01 d8             	add    rax,rbx
ffff80000080f334:	ff d0                	call   rax
ffff80000080f336:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:31
	buf=bh->data;
ffff80000080f33a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f33e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f341:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
ffff80000080f345:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f348:	83 e0 7f             	and    eax,0x7f
ffff80000080f34b:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f352:	00 
ffff80000080f353:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f357:	48 01 d0             	add    rax,rdx
ffff80000080f35a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f35c:	25 00 00 00 f0       	and    eax,0xf0000000
ffff80000080f361:	89 c1                	mov    ecx,eax
ffff80000080f363:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff80000080f366:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080f36b:	89 c2                	mov    edx,eax
ffff80000080f36d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f370:	83 e0 7f             	and    eax,0x7f
ffff80000080f373:	48 8d 34 85 00 00 00 	lea    rsi,[rax*4+0x0]
ffff80000080f37a:	00 
ffff80000080f37b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f37f:	48 01 f0             	add    rax,rsi
ffff80000080f382:	09 ca                	or     edx,ecx
ffff80000080f384:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34

	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080f386:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080f38d:	eb 6d                	jmp    ffff80000080f3fc <DISK1_FAT32_write_FAT_Entry+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:35 (discriminator 3)
		off_t off=(fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7))*SECTOR_SIZE;
ffff80000080f38f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f393:	48 8b 48 30          	mov    rcx,QWORD PTR [rax+0x30]
ffff80000080f397:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f39b:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
ffff80000080f39f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f3a2:	48 98                	cdqe   
ffff80000080f3a4:	48 0f af c2          	imul   rax,rdx
ffff80000080f3a8:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080f3ac:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f3af:	c1 e8 07             	shr    eax,0x7
ffff80000080f3b2:	89 c0                	mov    eax,eax
ffff80000080f3b4:	48 01 d0             	add    rax,rdx
ffff80000080f3b7:	c1 e0 09             	shl    eax,0x9
ffff80000080f3ba:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:36 (discriminator 3)
		blkdev_write(root_sb->dev,off,SECTOR_SIZE,buf);
ffff80000080f3bd:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f3c4:	ff ff ff 
ffff80000080f3c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f3cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f3ce:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f3d2:	0f b7 c0             	movzx  eax,ax
ffff80000080f3d5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f3d9:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
ffff80000080f3dc:	48 89 d1             	mov    rcx,rdx
ffff80000080f3df:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f3e4:	89 c7                	mov    edi,eax
ffff80000080f3e6:	49 89 df             	mov    r15,rbx
ffff80000080f3e9:	48 b8 95 01 ef ff ff 	movabs rax,0xffffffffffef0195
ffff80000080f3f0:	ff ff ff 
ffff80000080f3f3:	48 01 d8             	add    rax,rbx
ffff80000080f3f6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080f3f8:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 1)
ffff80000080f3fc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f3ff:	48 63 d0             	movsxd rdx,eax
ffff80000080f402:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f406:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f40a:	48 39 c2             	cmp    rdx,rax
ffff80000080f40d:	72 80                	jb     ffff80000080f38f <DISK1_FAT32_write_FAT_Entry+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38
    }
	brelse(bh);
ffff80000080f40f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f413:	48 89 c7             	mov    rdi,rax
ffff80000080f416:	49 89 df             	mov    r15,rbx
ffff80000080f419:	48 b8 10 03 ef ff ff 	movabs rax,0xffffffffffef0310
ffff80000080f420:	ff ff ff 
ffff80000080f423:	48 01 d8             	add    rax,rbx
ffff80000080f426:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:39
	return 1;
ffff80000080f428:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:40
}
ffff80000080f42d:	48 83 c4 30          	add    rsp,0x30
ffff80000080f431:	5b                   	pop    rbx
ffff80000080f432:	41 5f                	pop    r15
ffff80000080f434:	5d                   	pop    rbp
ffff80000080f435:	c3                   	ret    

ffff80000080f436 <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:44


long FAT32_open(struct index_node * inode,struct file * filp)
{
ffff80000080f436:	f3 0f 1e fa          	endbr64 
ffff80000080f43a:	55                   	push   rbp
ffff80000080f43b:	48 89 e5             	mov    rbp,rsp
ffff80000080f43e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f43e <FAT32_open+0x8>
ffff80000080f445:	49 bb ba e6 10 00 00 	movabs r11,0x10e6ba
ffff80000080f44c:	00 00 00 
ffff80000080f44f:	4c 01 d8             	add    rax,r11
ffff80000080f452:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f456:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:45
	return 1;
ffff80000080f45a:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:46
}
ffff80000080f45f:	5d                   	pop    rbp
ffff80000080f460:	c3                   	ret    

ffff80000080f461 <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:50


long FAT32_close(struct index_node * inode,struct file * filp)
{
ffff80000080f461:	f3 0f 1e fa          	endbr64 
ffff80000080f465:	55                   	push   rbp
ffff80000080f466:	48 89 e5             	mov    rbp,rsp
ffff80000080f469:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f469 <FAT32_close+0x8>
ffff80000080f470:	49 bb 8f e6 10 00 00 	movabs r11,0x10e68f
ffff80000080f477:	00 00 00 
ffff80000080f47a:	4c 01 d8             	add    rax,r11
ffff80000080f47d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f481:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:51
	return 1;
ffff80000080f485:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:52
}
ffff80000080f48a:	5d                   	pop    rbp
ffff80000080f48b:	c3                   	ret    

ffff80000080f48c <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:56


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080f48c:	f3 0f 1e fa          	endbr64 
ffff80000080f490:	55                   	push   rbp
ffff80000080f491:	48 89 e5             	mov    rbp,rsp
ffff80000080f494:	41 57                	push   r15
ffff80000080f496:	53                   	push   rbx
ffff80000080f497:	48 83 ec 70          	sub    rsp,0x70
ffff80000080f49b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f49b <FAT32_read+0xf>
ffff80000080f4a2:	49 bb 5d e6 10 00 00 	movabs r11,0x10e65d
ffff80000080f4a9:	00 00 00 
ffff80000080f4ac:	4c 01 db             	add    rbx,r11
ffff80000080f4af:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080f4b3:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff80000080f4b7:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff80000080f4bb:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:57
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080f4bf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f4c3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f4c7:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f4cb:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080f4cf:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:58
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080f4d3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f4d7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f4db:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f4df:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080f4e3:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080f4e7:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60

	unsigned long cluster = finode->first_cluster;
ffff80000080f4eb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f4ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f4f2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	unsigned long sector = 0;
ffff80000080f4f6:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080f4fd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	int i,length = 0;
ffff80000080f4fe:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:63
	long retval = 0;
ffff80000080f505:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080f50c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:64
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080f50d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f511:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f514:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080f518:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080f51c:	48 99                	cqo    
ffff80000080f51e:	48 f7 fe             	idiv   rsi
ffff80000080f521:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080f524:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f528:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f52b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080f52f:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080f533:	48 99                	cqo    
ffff80000080f535:	48 f7 f9             	idiv   rcx
ffff80000080f538:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:66
	char * buffer = (char *) kmallocat(0,(fsbi->bytes_per_cluster+PAGE_4K_SIZE-1)/PAGE_4K_SIZE);
ffff80000080f53c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f540:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f544:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080f54a:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080f551:	48 85 c0             	test   rax,rax
ffff80000080f554:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080f558:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080f55c:	89 c6                	mov    esi,eax
ffff80000080f55e:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080f563:	49 89 df             	mov    r15,rbx
ffff80000080f566:	48 b8 78 45 ee ff ff 	movabs rax,0xffffffffffee4578
ffff80000080f56d:	ff ff ff 
ffff80000080f570:	48 01 d8             	add    rax,rbx
ffff80000080f573:	ff d0                	call   rax
ffff80000080f575:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68

	if(!cluster)
ffff80000080f579:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f57e:	75 0c                	jne    ffff80000080f58c <FAT32_read+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69
		return -EFAULT;
ffff80000080f580:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080f587:	e9 6d 02 00 00       	jmp    ffff80000080f7f9 <FAT32_read+0x36d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70
	for(i = 0;i < index;i++)
ffff80000080f58c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080f593:	eb 2b                	jmp    ffff80000080f5c0 <FAT32_read+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:71 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080f595:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f599:	89 c2                	mov    edx,eax
ffff80000080f59b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f59f:	89 d6                	mov    esi,edx
ffff80000080f5a1:	48 89 c7             	mov    rdi,rax
ffff80000080f5a4:	49 89 df             	mov    r15,rbx
ffff80000080f5a7:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff80000080f5ae:	ff ff ff 
ffff80000080f5b1:	48 01 d8             	add    rax,rbx
ffff80000080f5b4:	ff d0                	call   rax
ffff80000080f5b6:	89 c0                	mov    eax,eax
ffff80000080f5b8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70 (discriminator 3)
	for(i = 0;i < index;i++)
ffff80000080f5bc:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70 (discriminator 1)
ffff80000080f5c0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080f5c3:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080f5c6:	7c cd                	jl     ffff80000080f595 <FAT32_read+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73

	if(*position + count > filp->dentry->dir_inode->file_size)
ffff80000080f5c8:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f5cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f5cf:	48 89 c2             	mov    rdx,rax
ffff80000080f5d2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f5d6:	48 01 c2             	add    rdx,rax
ffff80000080f5d9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f5dd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f5e1:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f5e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f5e8:	48 39 c2             	cmp    rdx,rax
ffff80000080f5eb:	76 2c                	jbe    ffff80000080f619 <FAT32_read+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:74
		index = count = filp->dentry->dir_inode->file_size - *position;
ffff80000080f5ed:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f5f1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f5f5:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f5f9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f5fc:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f600:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f603:	48 89 c1             	mov    rcx,rax
ffff80000080f606:	48 89 d0             	mov    rax,rdx
ffff80000080f609:	48 29 c8             	sub    rax,rcx
ffff80000080f60c:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080f610:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f614:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000080f617:	eb 07                	jmp    ffff80000080f620 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:76
	else
		index = count;
ffff80000080f619:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f61d:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:82

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080f620:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f624:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f628:	89 c2                	mov    edx,eax
ffff80000080f62a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f62e:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f633:	48 89 c7             	mov    rdi,rax
ffff80000080f636:	49 89 df             	mov    r15,rbx
ffff80000080f639:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080f640:	ff ff ff 
ffff80000080f643:	48 01 d8             	add    rax,rbx
ffff80000080f646:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:83
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080f648:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f64c:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080f650:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f654:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080f658:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f65c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f660:	48 0f af c2          	imul   rax,rdx
ffff80000080f664:	48 01 c8             	add    rax,rcx
ffff80000080f667:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:84
		if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080f66b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f66f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f673:	48 c1 e0 09          	shl    rax,0x9
ffff80000080f677:	48 89 c7             	mov    rdi,rax
ffff80000080f67a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f67e:	c1 e0 09             	shl    eax,0x9
ffff80000080f681:	89 c6                	mov    esi,eax
ffff80000080f683:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f687:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f68b:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f68f:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080f693:	0f b7 c0             	movzx  eax,ax
ffff80000080f696:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080f69a:	48 89 d1             	mov    rcx,rdx
ffff80000080f69d:	48 89 fa             	mov    rdx,rdi
ffff80000080f6a0:	89 c7                	mov    edi,eax
ffff80000080f6a2:	49 89 df             	mov    r15,rbx
ffff80000080f6a5:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff80000080f6ac:	ff ff ff 
ffff80000080f6af:	48 01 d8             	add    rax,rbx
ffff80000080f6b2:	ff d0                	call   rax
ffff80000080f6b4:	85 c0                	test   eax,eax
ffff80000080f6b6:	79 35                	jns    ffff80000080f6ed <FAT32_read+0x261>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
ffff80000080f6b8:	48 b8 d8 da ff ff ff 	movabs rax,0xffffffffffffdad8
ffff80000080f6bf:	ff ff ff 
ffff80000080f6c2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f6c6:	48 89 c7             	mov    rdi,rax
ffff80000080f6c9:	49 89 df             	mov    r15,rbx
ffff80000080f6cc:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f6d1:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080f6d8:	ff ff ff 
ffff80000080f6db:	48 01 da             	add    rdx,rbx
ffff80000080f6de:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:87
			retval = -EIO;
ffff80000080f6e0:	48 c7 45 d8 e3 ff ff 	mov    QWORD PTR [rbp-0x28],0xffffffffffffffe3
ffff80000080f6e7:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:88
			break;
ffff80000080f6e8:	e9 e1 00 00 00       	jmp    ffff80000080f7ce <FAT32_read+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:91
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080f6ed:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f6f0:	48 63 d0             	movsxd rdx,eax
ffff80000080f6f3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f6f7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f6fb:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff80000080f6ff:	48 39 c2             	cmp    rdx,rax
ffff80000080f702:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080f706:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:93

		if((unsigned long)buf < MAX_TASKS)
ffff80000080f709:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f70d:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080f711:	77 2c                	ja     ffff80000080f73f <FAT32_read+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:94
			memcpy(buffer + offset,buf,length);
ffff80000080f713:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080f716:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080f71a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f71e:	48 01 c1             	add    rcx,rax
ffff80000080f721:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f725:	48 89 c6             	mov    rsi,rax
ffff80000080f728:	48 89 cf             	mov    rdi,rcx
ffff80000080f72b:	49 89 df             	mov    r15,rbx
ffff80000080f72e:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080f735:	ff ff ff 
ffff80000080f738:	48 01 d8             	add    rax,rbx
ffff80000080f73b:	ff d0                	call   rax
ffff80000080f73d:	eb 2a                	jmp    ffff80000080f769 <FAT32_read+0x2dd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:96
		else
			memcpy(buffer + offset,buf,length);
ffff80000080f73f:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080f742:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080f746:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f74a:	48 01 c1             	add    rcx,rax
ffff80000080f74d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f751:	48 89 c6             	mov    rsi,rax
ffff80000080f754:	48 89 cf             	mov    rdi,rcx
ffff80000080f757:	49 89 df             	mov    r15,rbx
ffff80000080f75a:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080f761:	ff ff ff 
ffff80000080f764:	48 01 d8             	add    rax,rbx
ffff80000080f767:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98

		index -= length;
ffff80000080f769:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f76c:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:99
		buf += length;
ffff80000080f76f:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f772:	48 98                	cdqe   
ffff80000080f774:	48 01 45 90          	add    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
		offset -= offset;
ffff80000080f778:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080f77f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:101
		*position += length;
ffff80000080f780:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f784:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f787:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f78a:	48 98                	cdqe   
ffff80000080f78c:	48 01 c2             	add    rdx,rax
ffff80000080f78f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f793:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
ffff80000080f796:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080f79a:	74 32                	je     ffff80000080f7ce <FAT32_read+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102 (discriminator 1)
ffff80000080f79c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f7a0:	89 c2                	mov    edx,eax
ffff80000080f7a2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f7a6:	89 d6                	mov    esi,edx
ffff80000080f7a8:	48 89 c7             	mov    rdi,rax
ffff80000080f7ab:	49 89 df             	mov    r15,rbx
ffff80000080f7ae:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff80000080f7b5:	ff ff ff 
ffff80000080f7b8:	48 01 d8             	add    rax,rbx
ffff80000080f7bb:	ff d0                	call   rax
ffff80000080f7bd:	89 c0                	mov    eax,eax
ffff80000080f7bf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080f7c3:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f7c8:	0f 85 52 fe ff ff    	jne    ffff80000080f620 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104

    kmfree(buffer);
ffff80000080f7ce:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f7d2:	48 89 c7             	mov    rdi,rax
ffff80000080f7d5:	49 89 df             	mov    r15,rbx
ffff80000080f7d8:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080f7df:	ff ff ff 
ffff80000080f7e2:	48 01 d8             	add    rax,rbx
ffff80000080f7e5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
	if(!index)
ffff80000080f7e7:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080f7eb:	75 08                	jne    ffff80000080f7f5 <FAT32_read+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
		retval = count;
ffff80000080f7ed:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f7f1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:107
	return retval;
ffff80000080f7f5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:108
}
ffff80000080f7f9:	48 83 c4 70          	add    rsp,0x70
ffff80000080f7fd:	5b                   	pop    rbx
ffff80000080f7fe:	41 5f                	pop    r15
ffff80000080f800:	5d                   	pop    rbp
ffff80000080f801:	c3                   	ret    

ffff80000080f802 <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:112


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
ffff80000080f802:	f3 0f 1e fa          	endbr64 
ffff80000080f806:	55                   	push   rbp
ffff80000080f807:	48 89 e5             	mov    rbp,rsp
ffff80000080f80a:	41 57                	push   r15
ffff80000080f80c:	53                   	push   rbx
ffff80000080f80d:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff80000080f814:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f814 <FAT32_find_available_cluster+0x12>
ffff80000080f81b:	49 bb e4 e2 10 00 00 	movabs r11,0x10e2e4
ffff80000080f822:	00 00 00 
ffff80000080f825:	4c 01 db             	add    rbx,r11
ffff80000080f828:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:115
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
ffff80000080f82f:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f836:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f83a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
ffff80000080f83e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080f845:	e9 b6 00 00 00       	jmp    ffff80000080f900 <FAT32_find_available_cluster+0xfe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:122
	{
		memset(buf,0,512);
ffff80000080f84a:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000080f851:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f856:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f85b:	48 89 c7             	mov    rdi,rax
ffff80000080f85e:	49 89 df             	mov    r15,rbx
ffff80000080f861:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080f868:	ff ff ff 
ffff80000080f86b:	48 01 d8             	add    rax,rbx
ffff80000080f86e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123
		blkdev_read(root_sb->dev,(fsbi->FAT1_firstsector + i)*SECTOR_SIZE,SECTOR_SIZE,buf);
ffff80000080f870:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f877:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffff80000080f87b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f87e:	48 98                	cdqe   
ffff80000080f880:	48 01 d0             	add    rax,rdx
ffff80000080f883:	c1 e0 09             	shl    eax,0x9
ffff80000080f886:	89 c6                	mov    esi,eax
ffff80000080f888:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f88f:	ff ff ff 
ffff80000080f892:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f896:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f899:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f89d:	0f b7 c0             	movzx  eax,ax
ffff80000080f8a0:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff80000080f8a7:	48 89 d1             	mov    rcx,rdx
ffff80000080f8aa:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f8af:	89 c7                	mov    edi,eax
ffff80000080f8b1:	49 89 df             	mov    r15,rbx
ffff80000080f8b4:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff80000080f8bb:	ff ff ff 
ffff80000080f8be:	48 01 d8             	add    rax,rbx
ffff80000080f8c1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125

		for(j = 0;j < 128;j++)
ffff80000080f8c3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080f8ca:	eb 2a                	jmp    ffff80000080f8f6 <FAT32_find_available_cluster+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:127
		{
			if((buf[j] & 0x0fffffff) == 0)
ffff80000080f8cc:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080f8cf:	48 98                	cdqe   
ffff80000080f8d1:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff80000080f8d8:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080f8dd:	85 c0                	test   eax,eax
ffff80000080f8df:	75 11                	jne    ffff80000080f8f2 <FAT32_find_available_cluster+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:128
				return (i << 7) + j;
ffff80000080f8e1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f8e4:	c1 e0 07             	shl    eax,0x7
ffff80000080f8e7:	89 c2                	mov    edx,eax
ffff80000080f8e9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080f8ec:	01 d0                	add    eax,edx
ffff80000080f8ee:	48 98                	cdqe   
ffff80000080f8f0:	eb 22                	jmp    ffff80000080f914 <FAT32_find_available_cluster+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125 (discriminator 2)
		for(j = 0;j < 128;j++)
ffff80000080f8f2:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125 (discriminator 1)
ffff80000080f8f6:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
ffff80000080f8fa:	7e d0                	jle    ffff80000080f8cc <FAT32_find_available_cluster+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
ffff80000080f8fc:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120 (discriminator 1)
ffff80000080f900:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f903:	48 98                	cdqe   
ffff80000080f905:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080f909:	0f 87 3b ff ff ff    	ja     ffff80000080f84a <FAT32_find_available_cluster+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:131
		}
	}
	return 0;
ffff80000080f90f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:132 (discriminator 1)
}
ffff80000080f914:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff80000080f91b:	5b                   	pop    rbx
ffff80000080f91c:	41 5f                	pop    r15
ffff80000080f91e:	5d                   	pop    rbp
ffff80000080f91f:	c3                   	ret    

ffff80000080f920 <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080f920:	f3 0f 1e fa          	endbr64 
ffff80000080f924:	55                   	push   rbp
ffff80000080f925:	48 89 e5             	mov    rbp,rsp
ffff80000080f928:	41 57                	push   r15
ffff80000080f92a:	53                   	push   rbx
ffff80000080f92b:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff80000080f92f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f92f <FAT32_write+0xf>
ffff80000080f936:	49 bb c9 e1 10 00 00 	movabs r11,0x10e1c9
ffff80000080f93d:	00 00 00 
ffff80000080f940:	4c 01 db             	add    rbx,r11
ffff80000080f943:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080f947:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000080f94b:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffff80000080f952:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:137
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080f959:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f95d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f961:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f965:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080f969:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:138
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080f96d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f971:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f975:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f979:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080f97d:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080f981:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140

	unsigned long cluster = finode->first_cluster;
ffff80000080f985:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f989:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f98c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	unsigned long next_cluster = 0;
ffff80000080f990:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080f997:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	unsigned long sector = 0;
ffff80000080f998:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080f99f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:143
	int i,length = 0;
ffff80000080f9a0:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144
	long retval = 0;
ffff80000080f9a7:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080f9ae:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	long flags = 0;
ffff80000080f9af:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080f9b6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080f9b7:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080f9be:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f9c1:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080f9c5:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080f9c9:	48 99                	cqo    
ffff80000080f9cb:	48 f7 fe             	idiv   rsi
ffff80000080f9ce:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:147
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080f9d1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080f9d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f9db:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080f9df:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080f9e3:	48 99                	cqo    
ffff80000080f9e5:	48 f7 f9             	idiv   rcx
ffff80000080f9e8:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:148
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff80000080f9ec:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080f9f0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f9f4:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f9f9:	48 89 c7             	mov    rdi,rax
ffff80000080f9fc:	49 89 df             	mov    r15,rbx
ffff80000080f9ff:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fa04:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000080fa0b:	ff ff ff 
ffff80000080fa0e:	48 01 da             	add    rdx,rbx
ffff80000080fa11:	ff d2                	call   rdx
ffff80000080fa13:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:150

	if(!cluster)
ffff80000080fa17:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fa1c:	75 27                	jne    ffff80000080fa45 <FAT32_write+0x125>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:152
	{
		cluster = FAT32_find_available_cluster(fsbi);
ffff80000080fa1e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fa22:	48 89 c7             	mov    rdi,rax
ffff80000080fa25:	49 89 df             	mov    r15,rbx
ffff80000080fa28:	48 b8 0a 1d ef ff ff 	movabs rax,0xffffffffffef1d0a
ffff80000080fa2f:	ff ff ff 
ffff80000080fa32:	48 01 d8             	add    rax,rbx
ffff80000080fa35:	ff d0                	call   rax
ffff80000080fa37:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:153
		flags = 1;
ffff80000080fa3b:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000080fa42:	00 
ffff80000080fa43:	eb 3c                	jmp    ffff80000080fa81 <FAT32_write+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156
	}
	else
		for(i = 0;i < index;i++)
ffff80000080fa45:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080fa4c:	eb 2b                	jmp    ffff80000080fa79 <FAT32_write+0x159>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:157 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080fa4e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fa52:	89 c2                	mov    edx,eax
ffff80000080fa54:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fa58:	89 d6                	mov    esi,edx
ffff80000080fa5a:	48 89 c7             	mov    rdi,rax
ffff80000080fa5d:	49 89 df             	mov    r15,rbx
ffff80000080fa60:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff80000080fa67:	ff ff ff 
ffff80000080fa6a:	48 01 d8             	add    rax,rbx
ffff80000080fa6d:	ff d0                	call   rax
ffff80000080fa6f:	89 c0                	mov    eax,eax
ffff80000080fa71:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156 (discriminator 3)
		for(i = 0;i < index;i++)
ffff80000080fa75:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156 (discriminator 1)
ffff80000080fa79:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080fa7c:	3b 45 c4             	cmp    eax,DWORD PTR [rbp-0x3c]
ffff80000080fa7f:	7c cd                	jl     ffff80000080fa4e <FAT32_write+0x12e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:159

	if(!cluster)
ffff80000080fa81:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fa86:	75 25                	jne    ffff80000080faad <FAT32_write+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:161
	{
        kmfree(buffer);
ffff80000080fa88:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fa8c:	48 89 c7             	mov    rdi,rax
ffff80000080fa8f:	49 89 df             	mov    r15,rbx
ffff80000080fa92:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080fa99:	ff ff ff 
ffff80000080fa9c:	48 01 d8             	add    rax,rbx
ffff80000080fa9f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:162
		return -ENOSPC;
ffff80000080faa1:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000080faa8:	e9 f7 03 00 00       	jmp    ffff80000080fea4 <FAT32_write+0x584>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:165
	}

	if(flags)
ffff80000080faad:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080fab2:	74 5a                	je     ffff80000080fb0e <FAT32_write+0x1ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:167
	{
		finode->first_cluster = cluster;
ffff80000080fab4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080fab8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080fabc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:168
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000080fabf:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fac3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fac7:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080facb:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080facf:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080fad3:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080fad7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fadb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fadf:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fae3:	48 89 c7             	mov    rdi,rax
ffff80000080fae6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:169
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
ffff80000080fae8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080faec:	89 c1                	mov    ecx,eax
ffff80000080faee:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080faf2:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000080faf7:	89 ce                	mov    esi,ecx
ffff80000080faf9:	48 89 c7             	mov    rdi,rax
ffff80000080fafc:	49 89 df             	mov    r15,rbx
ffff80000080faff:	48 b8 cf 17 ef ff ff 	movabs rax,0xffffffffffef17cf
ffff80000080fb06:	ff ff ff 
ffff80000080fb09:	48 01 d8             	add    rax,rbx
ffff80000080fb0c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:172
	}

	index = count;
ffff80000080fb0e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fb15:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:176

	do
	{
		if(!flags)
ffff80000080fb18:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080fb1d:	0f 85 cd 00 00 00    	jne    ffff80000080fbf0 <FAT32_write+0x2d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:178
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080fb23:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fb27:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fb2b:	89 c2                	mov    edx,eax
ffff80000080fb2d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fb31:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fb36:	48 89 c7             	mov    rdi,rax
ffff80000080fb39:	49 89 df             	mov    r15,rbx
ffff80000080fb3c:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000080fb43:	ff ff ff 
ffff80000080fb46:	48 01 d8             	add    rax,rbx
ffff80000080fb49:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:179
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080fb4b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fb4f:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080fb53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fb57:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080fb5b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fb5f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fb63:	48 0f af c2          	imul   rax,rdx
ffff80000080fb67:	48 01 c8             	add    rax,rcx
ffff80000080fb6a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:181
			
			if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080fb6e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fb72:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fb76:	48 c1 e0 09          	shl    rax,0x9
ffff80000080fb7a:	48 89 c7             	mov    rdi,rax
ffff80000080fb7d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fb81:	c1 e0 09             	shl    eax,0x9
ffff80000080fb84:	89 c6                	mov    esi,eax
ffff80000080fb86:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fb8a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fb8e:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fb92:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080fb96:	0f b7 c0             	movzx  eax,ax
ffff80000080fb99:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080fb9d:	48 89 d1             	mov    rcx,rdx
ffff80000080fba0:	48 89 fa             	mov    rdx,rdi
ffff80000080fba3:	89 c7                	mov    edi,eax
ffff80000080fba5:	49 89 df             	mov    r15,rbx
ffff80000080fba8:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff80000080fbaf:	ff ff ff 
ffff80000080fbb2:	48 01 d8             	add    rax,rbx
ffff80000080fbb5:	ff d0                	call   rax
ffff80000080fbb7:	85 c0                	test   eax,eax
ffff80000080fbb9:	79 35                	jns    ffff80000080fbf0 <FAT32_write+0x2d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
ffff80000080fbbb:	48 b8 08 db ff ff ff 	movabs rax,0xffffffffffffdb08
ffff80000080fbc2:	ff ff ff 
ffff80000080fbc5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fbc9:	48 89 c7             	mov    rdi,rax
ffff80000080fbcc:	49 89 df             	mov    r15,rbx
ffff80000080fbcf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fbd4:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080fbdb:	ff ff ff 
ffff80000080fbde:	48 01 da             	add    rdx,rbx
ffff80000080fbe1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:184
				retval = -EIO;
ffff80000080fbe3:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000080fbea:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:185
				break;
ffff80000080fbeb:	e9 23 02 00 00       	jmp    ffff80000080fe13 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:189
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080fbf0:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080fbf3:	48 63 d0             	movsxd rdx,eax
ffff80000080fbf6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fbfa:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fbfe:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffff80000080fc02:	48 39 c2             	cmp    rdx,rax
ffff80000080fc05:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080fc09:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:191

		if((unsigned long)buf < MAX_TASKS)
ffff80000080fc0c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fc10:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080fc14:	77 2c                	ja     ffff80000080fc42 <FAT32_write+0x322>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:192
			memcpy(buf,buffer + offset,length);
ffff80000080fc16:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000080fc19:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080fc1d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc21:	48 01 c1             	add    rcx,rax
ffff80000080fc24:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fc28:	48 89 ce             	mov    rsi,rcx
ffff80000080fc2b:	48 89 c7             	mov    rdi,rax
ffff80000080fc2e:	49 89 df             	mov    r15,rbx
ffff80000080fc31:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080fc38:	ff ff ff 
ffff80000080fc3b:	48 01 d8             	add    rax,rbx
ffff80000080fc3e:	ff d0                	call   rax
ffff80000080fc40:	eb 2a                	jmp    ffff80000080fc6c <FAT32_write+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:194
		else
			memcpy(buf,buffer + offset,length);
ffff80000080fc42:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000080fc45:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080fc49:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc4d:	48 01 c1             	add    rcx,rax
ffff80000080fc50:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fc54:	48 89 ce             	mov    rsi,rcx
ffff80000080fc57:	48 89 c7             	mov    rdi,rax
ffff80000080fc5a:	49 89 df             	mov    r15,rbx
ffff80000080fc5d:	48 b8 6c 50 ef ff ff 	movabs rax,0xffffffffffef506c
ffff80000080fc64:	ff ff ff 
ffff80000080fc67:	48 01 d8             	add    rax,rbx
ffff80000080fc6a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:195
        if(blkdev_write(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080fc6c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fc70:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fc74:	48 c1 e0 09          	shl    rax,0x9
ffff80000080fc78:	48 89 c7             	mov    rdi,rax
ffff80000080fc7b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fc7f:	c1 e0 09             	shl    eax,0x9
ffff80000080fc82:	89 c6                	mov    esi,eax
ffff80000080fc84:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fc88:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fc8c:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fc90:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080fc94:	0f b7 c0             	movzx  eax,ax
ffff80000080fc97:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080fc9b:	48 89 d1             	mov    rcx,rdx
ffff80000080fc9e:	48 89 fa             	mov    rdx,rdi
ffff80000080fca1:	89 c7                	mov    edi,eax
ffff80000080fca3:	49 89 df             	mov    r15,rbx
ffff80000080fca6:	48 b8 95 01 ef ff ff 	movabs rax,0xffffffffffef0195
ffff80000080fcad:	ff ff ff 
ffff80000080fcb0:	48 01 d8             	add    rax,rbx
ffff80000080fcb3:	ff d0                	call   rax
ffff80000080fcb5:	85 c0                	test   eax,eax
ffff80000080fcb7:	79 35                	jns    ffff80000080fcee <FAT32_write+0x3ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:197
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
ffff80000080fcb9:	48 b8 38 db ff ff ff 	movabs rax,0xffffffffffffdb38
ffff80000080fcc0:	ff ff ff 
ffff80000080fcc3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fcc7:	48 89 c7             	mov    rdi,rax
ffff80000080fcca:	49 89 df             	mov    r15,rbx
ffff80000080fccd:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fcd2:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080fcd9:	ff ff ff 
ffff80000080fcdc:	48 01 da             	add    rdx,rbx
ffff80000080fcdf:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
			retval = -EIO;
ffff80000080fce1:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000080fce8:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:199
			break;
ffff80000080fce9:	e9 25 01 00 00       	jmp    ffff80000080fe13 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:202
		}

		index -= length;
ffff80000080fcee:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fcf1:	29 45 c4             	sub    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
		buf += length;
ffff80000080fcf4:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fcf7:	48 98                	cdqe   
ffff80000080fcf9:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:204
		offset -= offset;
ffff80000080fcfd:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080fd04:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:205
		*position += length;
ffff80000080fd05:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fd0c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fd0f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fd12:	48 98                	cdqe   
ffff80000080fd14:	48 01 c2             	add    rdx,rax
ffff80000080fd17:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fd1e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:207

		if(index)
ffff80000080fd21:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fd25:	0f 84 e7 00 00 00    	je     ffff80000080fe12 <FAT32_write+0x4f2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:208
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080fd2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fd2f:	89 c2                	mov    edx,eax
ffff80000080fd31:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fd35:	89 d6                	mov    esi,edx
ffff80000080fd37:	48 89 c7             	mov    rdi,rax
ffff80000080fd3a:	49 89 df             	mov    r15,rbx
ffff80000080fd3d:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff80000080fd44:	ff ff ff 
ffff80000080fd47:	48 01 d8             	add    rax,rbx
ffff80000080fd4a:	ff d0                	call   rax
ffff80000080fd4c:	89 c0                	mov    eax,eax
ffff80000080fd4e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:212
		else
			break;

		if(next_cluster >= 0x0ffffff8)
ffff80000080fd52:	48 81 7d a0 f7 ff ff 	cmp    QWORD PTR [rbp-0x60],0xffffff7
ffff80000080fd59:	0f 
ffff80000080fd5a:	0f 86 a6 00 00 00    	jbe    ffff80000080fe06 <FAT32_write+0x4e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:214
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
ffff80000080fd60:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fd64:	48 89 c7             	mov    rdi,rax
ffff80000080fd67:	49 89 df             	mov    r15,rbx
ffff80000080fd6a:	48 b8 0a 1d ef ff ff 	movabs rax,0xffffffffffef1d0a
ffff80000080fd71:	ff ff ff 
ffff80000080fd74:	48 01 d8             	add    rax,rbx
ffff80000080fd77:	ff d0                	call   rax
ffff80000080fd79:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:215
			if(!next_cluster)
ffff80000080fd7d:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff80000080fd82:	75 25                	jne    ffff80000080fda9 <FAT32_write+0x489>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:217
			{
                kmfree(buffer);
ffff80000080fd84:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fd88:	48 89 c7             	mov    rdi,rax
ffff80000080fd8b:	49 89 df             	mov    r15,rbx
ffff80000080fd8e:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080fd95:	ff ff ff 
ffff80000080fd98:	48 01 d8             	add    rax,rbx
ffff80000080fd9b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:218
				return -ENOSPC;
ffff80000080fd9d:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000080fda4:	e9 fb 00 00 00       	jmp    ffff80000080fea4 <FAT32_write+0x584>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:221
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
ffff80000080fda9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fdad:	89 c2                	mov    edx,eax
ffff80000080fdaf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fdb3:	89 c1                	mov    ecx,eax
ffff80000080fdb5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fdb9:	89 ce                	mov    esi,ecx
ffff80000080fdbb:	48 89 c7             	mov    rdi,rax
ffff80000080fdbe:	49 89 df             	mov    r15,rbx
ffff80000080fdc1:	48 b8 cf 17 ef ff ff 	movabs rax,0xffffffffffef17cf
ffff80000080fdc8:	ff ff ff 
ffff80000080fdcb:	48 01 d8             	add    rax,rbx
ffff80000080fdce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
ffff80000080fdd0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fdd4:	89 c1                	mov    ecx,eax
ffff80000080fdd6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fdda:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000080fddf:	89 ce                	mov    esi,ecx
ffff80000080fde1:	48 89 c7             	mov    rdi,rax
ffff80000080fde4:	49 89 df             	mov    r15,rbx
ffff80000080fde7:	48 b8 cf 17 ef ff ff 	movabs rax,0xffffffffffef17cf
ffff80000080fdee:	ff ff ff 
ffff80000080fdf1:	48 01 d8             	add    rax,rbx
ffff80000080fdf4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:223
			cluster = next_cluster;
ffff80000080fdf6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fdfa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:224
			flags = 1;
ffff80000080fdfe:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000080fe05:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:227
		}

	}while(index);
ffff80000080fe06:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fe0a:	0f 85 08 fd ff ff    	jne    ffff80000080fb18 <FAT32_write+0x1f8>
ffff80000080fe10:	eb 01                	jmp    ffff80000080fe13 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:210
			break;
ffff80000080fe12:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:229

	if(*position > filp->dentry->dir_inode->file_size)
ffff80000080fe13:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fe1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fe1d:	48 89 c2             	mov    rdx,rax
ffff80000080fe20:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fe24:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe28:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fe2c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fe2f:	48 39 c2             	cmp    rdx,rax
ffff80000080fe32:	76 42                	jbe    ffff80000080fe76 <FAT32_write+0x556>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:231
	{
		filp->dentry->dir_inode->file_size = *position;
ffff80000080fe34:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fe3b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fe3e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fe42:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe46:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fe4a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:232
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000080fe4d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fe51:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe55:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fe59:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080fe5d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080fe61:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080fe65:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fe69:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe6d:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fe71:	48 89 c7             	mov    rdi,rax
ffff80000080fe74:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:235
	}

    kmfree(buffer);
ffff80000080fe76:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fe7a:	48 89 c7             	mov    rdi,rax
ffff80000080fe7d:	49 89 df             	mov    r15,rbx
ffff80000080fe80:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000080fe87:	ff ff ff 
ffff80000080fe8a:	48 01 d8             	add    rax,rbx
ffff80000080fe8d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
	if(!index)
ffff80000080fe8f:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fe93:	75 0b                	jne    ffff80000080fea0 <FAT32_write+0x580>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:237
		retval = count;
ffff80000080fe95:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fe9c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:238
	return retval;
ffff80000080fea0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:239
}
ffff80000080fea4:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000080fea8:	5b                   	pop    rbx
ffff80000080fea9:	41 5f                	pop    r15
ffff80000080feab:	5d                   	pop    rbp
ffff80000080feac:	c3                   	ret    

ffff80000080fead <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:243


long FAT32_lseek(struct file * filp,long offset,long origin)
{
ffff80000080fead:	f3 0f 1e fa          	endbr64 
ffff80000080feb1:	55                   	push   rbp
ffff80000080feb2:	48 89 e5             	mov    rbp,rsp
ffff80000080feb5:	41 57                	push   r15
ffff80000080feb7:	48 83 ec 38          	sub    rsp,0x38
ffff80000080febb:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080febb <FAT32_lseek+0xe>
ffff80000080fec2:	49 bb 3d dc 10 00 00 	movabs r11,0x10dc3d
ffff80000080fec9:	00 00 00 
ffff80000080fecc:	4c 01 d9             	add    rcx,r11
ffff80000080fecf:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080fed3:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080fed7:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:244
	struct index_node *inode = filp->dentry->dir_inode;
ffff80000080fedb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fedf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fee3:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080fee7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:245
	long pos = 0;
ffff80000080feeb:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080fef2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:247

	switch(origin)
ffff80000080fef3:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000080fef8:	74 21                	je     ffff80000080ff1b <FAT32_lseek+0x6e>
ffff80000080fefa:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000080feff:	7f 4a                	jg     ffff80000080ff4b <FAT32_lseek+0x9e>
ffff80000080ff01:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080ff06:	74 09                	je     ffff80000080ff11 <FAT32_lseek+0x64>
ffff80000080ff08:	48 83 7d c8 01       	cmp    QWORD PTR [rbp-0x38],0x1
ffff80000080ff0d:	74 20                	je     ffff80000080ff2f <FAT32_lseek+0x82>
ffff80000080ff0f:	eb 3a                	jmp    ffff80000080ff4b <FAT32_lseek+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:250
	{
		case SEEK_SET:
				pos = offset;
ffff80000080ff11:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ff15:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:251
			break;
ffff80000080ff19:	eb 39                	jmp    ffff80000080ff54 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:254

		case SEEK_CUR:
				pos =  filp->position + offset;
ffff80000080ff1b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff1f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ff22:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ff26:	48 01 d0             	add    rax,rdx
ffff80000080ff29:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:255
			break;
ffff80000080ff2d:	eb 25                	jmp    ffff80000080ff54 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:258

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
ffff80000080ff2f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff33:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff37:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ff3b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ff3e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ff42:	48 01 d0             	add    rax,rdx
ffff80000080ff45:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:259
			break;
ffff80000080ff49:	eb 09                	jmp    ffff80000080ff54 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:262

		default:
			return -EINVAL;
ffff80000080ff4b:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080ff52:	eb 69                	jmp    ffff80000080ffbd <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:266
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
ffff80000080ff54:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080ff59:	78 18                	js     ffff80000080ff73 <FAT32_lseek+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:266 (discriminator 1)
ffff80000080ff5b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff5f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff63:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ff67:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ff6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ff6e:	48 39 c2             	cmp    rdx,rax
ffff80000080ff71:	73 09                	jae    ffff80000080ff7c <FAT32_lseek+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:267
		return -EOVERFLOW;
ffff80000080ff73:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
ffff80000080ff7a:	eb 41                	jmp    ffff80000080ffbd <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:269

	filp->position = pos;
ffff80000080ff7c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff80:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ff84:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:270
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
ffff80000080ff87:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff8b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ff8e:	48 89 c6             	mov    rsi,rax
ffff80000080ff91:	48 b8 68 db ff ff ff 	movabs rax,0xffffffffffffdb68
ffff80000080ff98:	ff ff ff 
ffff80000080ff9b:	48 8d 04 01          	lea    rax,[rcx+rax*1]
ffff80000080ff9f:	48 89 c7             	mov    rdi,rax
ffff80000080ffa2:	49 89 cf             	mov    r15,rcx
ffff80000080ffa5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ffaa:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff80000080ffb1:	ff ff ff 
ffff80000080ffb4:	48 01 ca             	add    rdx,rcx
ffff80000080ffb7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:272

	return pos;
ffff80000080ffb9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:273
}
ffff80000080ffbd:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ffc1:	c9                   	leave  
ffff80000080ffc2:	c3                   	ret    

ffff80000080ffc3 <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:277


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
ffff80000080ffc3:	f3 0f 1e fa          	endbr64 
ffff80000080ffc7:	55                   	push   rbp
ffff80000080ffc8:	48 89 e5             	mov    rbp,rsp
ffff80000080ffcb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ffcb <FAT32_ioctl+0x8>
ffff80000080ffd2:	49 bb 2d db 10 00 00 	movabs r11,0x10db2d
ffff80000080ffd9:	00 00 00 
ffff80000080ffdc:	4c 01 d8             	add    rax,r11
ffff80000080ffdf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ffe3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080ffe7:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080ffeb:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080ffef:	90                   	nop
ffff80000080fff0:	5d                   	pop    rbp
ffff80000080fff1:	c3                   	ret    

ffff80000080fff2 <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:280

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
ffff80000080fff2:	f3 0f 1e fa          	endbr64 
ffff80000080fff6:	55                   	push   rbp
ffff80000080fff7:	48 89 e5             	mov    rbp,rsp
ffff80000080fffa:	41 57                	push   r15
ffff80000080fffc:	53                   	push   rbx
ffff80000080fffd:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000810001:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810001 <FAT32_readdir+0xf>
ffff800000810008:	49 bb f7 da 10 00 00 	movabs r11,0x10daf7
ffff80000081000f:	00 00 00 
ffff800000810012:	4c 01 db             	add    rbx,r11
ffff800000810015:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000810019:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000081001d:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff800000810024:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810028:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081002c:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810030:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000810034:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:282
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff800000810038:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081003c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810040:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810044:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff800000810048:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000081004c:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:284

	unsigned int cluster = 0;
ffff800000810050:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285
	unsigned long sector = 0;
ffff800000810057:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000081005e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	unsigned char * buf =NULL; 
ffff80000081005f:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000810066:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:287
	char *name = NULL;
ffff800000810067:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000081006e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288
	int namelen = 0;
ffff80000081006f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	int i = 0,j = 0,x = 0,y = 0;
ffff800000810076:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000081007d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000810084:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000081008b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	struct FAT32_Directory * tmpdentry = NULL;
ffff800000810092:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff800000810099:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:291
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff80000081009a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff8000008100a1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:293

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff8000008100a2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008100a6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008100aa:	be 00 00 00 00       	mov    esi,0x0
ffff8000008100af:	48 89 c7             	mov    rdi,rax
ffff8000008100b2:	49 89 df             	mov    r15,rbx
ffff8000008100b5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008100ba:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff8000008100c1:	ff ff ff 
ffff8000008100c4:	48 01 da             	add    rdx,rbx
ffff8000008100c7:	ff d2                	call   rdx
ffff8000008100c9:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:295

	cluster = finode->first_cluster;
ffff8000008100cd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008100d1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008100d4:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:297

	j = filp->position/fsbi->bytes_per_cluster;
ffff8000008100d7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008100db:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008100de:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008100e2:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff8000008100e6:	48 99                	cqo    
ffff8000008100e8:	48 f7 fe             	idiv   rsi
ffff8000008100eb:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:299
	
	for(i = 0;i<j;i++)
ffff8000008100ee:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff8000008100f5:	eb 60                	jmp    ffff800000810157 <FAT32_readdir+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:301
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff8000008100f7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008100fa:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008100fe:	89 d6                	mov    esi,edx
ffff800000810100:	48 89 c7             	mov    rdi,rax
ffff800000810103:	49 89 df             	mov    r15,rbx
ffff800000810106:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff80000081010d:	ff ff ff 
ffff800000810110:	48 01 d8             	add    rax,rbx
ffff800000810113:	ff d0                	call   rax
ffff800000810115:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:302
		if(cluster > 0x0ffffff7)
ffff800000810118:	81 7d ec f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff7
ffff80000081011f:	76 32                	jbe    ffff800000810153 <FAT32_readdir+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:304
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
ffff800000810121:	48 b8 90 db ff ff ff 	movabs rax,0xffffffffffffdb90
ffff800000810128:	ff ff ff 
ffff80000081012b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081012f:	48 89 c7             	mov    rdi,rax
ffff800000810132:	49 89 df             	mov    r15,rbx
ffff800000810135:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081013a:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff800000810141:	ff ff ff 
ffff800000810144:	48 01 da             	add    rdx,rbx
ffff800000810147:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:305
			return NULL;
ffff800000810149:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081014e:	e9 16 06 00 00       	jmp    ffff800000810769 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:299 (discriminator 2)
	for(i = 0;i<j;i++)
ffff800000810153:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:299 (discriminator 1)
ffff800000810157:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000081015a:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000081015d:	7c 98                	jl     ffff8000008100f7 <FAT32_readdir+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:309
		}
	}

next_cluster:
ffff80000081015f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:310
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000810160:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810164:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000810168:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081016b:	83 e8 02             	sub    eax,0x2
ffff80000081016e:	89 c1                	mov    ecx,eax
ffff800000810170:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810174:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810178:	48 0f af c1          	imul   rax,rcx
ffff80000081017c:	48 01 d0             	add    rax,rdx
ffff80000081017f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:311
    if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff800000810183:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810187:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081018b:	48 c1 e0 09          	shl    rax,0x9
ffff80000081018f:	48 89 c7             	mov    rdi,rax
ffff800000810192:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810196:	c1 e0 09             	shl    eax,0x9
ffff800000810199:	89 c6                	mov    esi,eax
ffff80000081019b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081019f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008101a3:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff8000008101a7:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008101ab:	0f b7 c0             	movzx  eax,ax
ffff8000008101ae:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff8000008101b2:	48 89 d1             	mov    rcx,rdx
ffff8000008101b5:	48 89 fa             	mov    rdx,rdi
ffff8000008101b8:	89 c7                	mov    edi,eax
ffff8000008101ba:	49 89 df             	mov    r15,rbx
ffff8000008101bd:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff8000008101c4:	ff ff ff 
ffff8000008101c7:	48 01 d8             	add    rax,rbx
ffff8000008101ca:	ff d0                	call   rax
ffff8000008101cc:	85 c0                	test   eax,eax
ffff8000008101ce:	79 4b                	jns    ffff80000081021b <FAT32_readdir+0x229>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
ffff8000008101d0:	48 b8 b8 db ff ff ff 	movabs rax,0xffffffffffffdbb8
ffff8000008101d7:	ff ff ff 
ffff8000008101da:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008101de:	48 89 c7             	mov    rdi,rax
ffff8000008101e1:	49 89 df             	mov    r15,rbx
ffff8000008101e4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008101e9:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff8000008101f0:	ff ff ff 
ffff8000008101f3:	48 01 da             	add    rdx,rbx
ffff8000008101f6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:314
        kmfree(buf);
ffff8000008101f8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008101fc:	48 89 c7             	mov    rdi,rax
ffff8000008101ff:	49 89 df             	mov    r15,rbx
ffff800000810202:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff800000810209:	ff ff ff 
ffff80000081020c:	48 01 d8             	add    rax,rbx
ffff80000081020f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:315
		return NULL;
ffff800000810211:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810216:	e9 4e 05 00 00       	jmp    ffff800000810769 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:318
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
ffff80000081021b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081021f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810222:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810226:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081022a:	48 99                	cqo    
ffff80000081022c:	48 f7 f9             	idiv   rcx
ffff80000081022f:	48 89 d0             	mov    rax,rdx
ffff800000810232:	48 89 c2             	mov    rdx,rax
ffff800000810235:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810239:	48 01 d0             	add    rax,rdx
ffff80000081023c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff800000810240:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810244:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810247:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000081024b:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081024f:	48 99                	cqo    
ffff800000810251:	48 f7 f9             	idiv   rcx
ffff800000810254:	48 89 d0             	mov    rax,rdx
ffff800000810257:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffff80000081025a:	e9 66 04 00 00       	jmp    ffff8000008106c5 <FAT32_readdir+0x6d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff80000081025f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810263:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810267:	3c 0f                	cmp    al,0xf
ffff800000810269:	0f 84 37 04 00 00    	je     ffff8000008106a6 <FAT32_readdir+0x6b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff80000081026f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810273:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810276:	3c e5                	cmp    al,0xe5
ffff800000810278:	0f 84 2b 04 00 00    	je     ffff8000008106a9 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324 (discriminator 2)
ffff80000081027e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810282:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810285:	84 c0                	test   al,al
ffff800000810287:	0f 84 1c 04 00 00    	je     ffff8000008106a9 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324 (discriminator 4)
ffff80000081028d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810291:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810294:	3c 05                	cmp    al,0x5
ffff800000810296:	0f 84 0d 04 00 00    	je     ffff8000008106a9 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
			continue;

		namelen = 0;
ffff80000081029c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:328
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008102a3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008102a7:	48 83 e8 20          	sub    rax,0x20
ffff8000008102ab:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff8000008102af:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008102b3:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008102b7:	3c 0f                	cmp    al,0xf
ffff8000008102b9:	0f 85 44 02 00 00    	jne    ffff800000810503 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330 (discriminator 1)
ffff8000008102bf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008102c3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008102c6:	3c e5                	cmp    al,0xe5
ffff8000008102c8:	0f 84 35 02 00 00    	je     ffff800000810503 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330 (discriminator 2)
ffff8000008102ce:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008102d2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008102d5:	84 c0                	test   al,al
ffff8000008102d7:	0f 84 26 02 00 00    	je     ffff800000810503 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330 (discriminator 3)
ffff8000008102dd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008102e1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008102e4:	3c 05                	cmp    al,0x5
ffff8000008102e6:	0f 84 17 02 00 00    	je     ffff800000810503 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332
		{
			j = 0;
ffff8000008102ec:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff8000008102f3:	eb 1a                	jmp    ffff80000081030f <FAT32_readdir+0x31d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
			{
				j++;
ffff8000008102f5:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:337
				if(tmpldentry->LDIR_Ord & 0x40)
ffff8000008102f9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008102fd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810300:	0f b6 c0             	movzx  eax,al
ffff800000810303:	83 e0 40             	and    eax,0x40
ffff800000810306:	85 c0                	test   eax,eax
ffff800000810308:	75 34                	jne    ffff80000081033e <FAT32_readdir+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:339
					break;
				tmpldentry --;
ffff80000081030a:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081030f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810313:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810317:	3c 0f                	cmp    al,0xf
ffff800000810319:	75 24                	jne    ffff80000081033f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 1)
ffff80000081031b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081031f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810322:	3c e5                	cmp    al,0xe5
ffff800000810324:	74 19                	je     ffff80000081033f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 2)
ffff800000810326:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081032a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081032d:	84 c0                	test   al,al
ffff80000081032f:	74 0e                	je     ffff80000081033f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 3)
ffff800000810331:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810335:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810338:	3c 05                	cmp    al,0x5
ffff80000081033a:	75 b9                	jne    ffff8000008102f5 <FAT32_readdir+0x303>
ffff80000081033c:	eb 01                	jmp    ffff80000081033f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
					break;
ffff80000081033e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:342
			}

			name = kmalloc(j * 13 + 1, 0);
ffff80000081033f:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000810342:	89 d0                	mov    eax,edx
ffff800000810344:	01 c0                	add    eax,eax
ffff800000810346:	01 d0                	add    eax,edx
ffff800000810348:	c1 e0 02             	shl    eax,0x2
ffff80000081034b:	01 d0                	add    eax,edx
ffff80000081034d:	83 c0 01             	add    eax,0x1
ffff800000810350:	be 00 00 00 00       	mov    esi,0x0
ffff800000810355:	89 c7                	mov    edi,eax
ffff800000810357:	49 89 df             	mov    r15,rbx
ffff80000081035a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081035f:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000810366:	ff ff ff 
ffff800000810369:	48 01 da             	add    rdx,rbx
ffff80000081036c:	ff d2                	call   rdx
ffff80000081036e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:343
			memset(name,0,j*13+1);
ffff800000810372:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000810375:	89 d0                	mov    eax,edx
ffff800000810377:	01 c0                	add    eax,eax
ffff800000810379:	01 d0                	add    eax,edx
ffff80000081037b:	c1 e0 02             	shl    eax,0x2
ffff80000081037e:	01 d0                	add    eax,edx
ffff800000810380:	83 c0 01             	add    eax,0x1
ffff800000810383:	89 c2                	mov    edx,eax
ffff800000810385:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810389:	be 00 00 00 00       	mov    esi,0x0
ffff80000081038e:	48 89 c7             	mov    rdi,rax
ffff800000810391:	49 89 df             	mov    r15,rbx
ffff800000810394:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000081039b:	ff ff ff 
ffff80000081039e:	48 01 d8             	add    rax,rbx
ffff8000008103a1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:344
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008103a3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008103a7:	48 83 e8 20          	sub    rax,0x20
ffff8000008103ab:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346

			for(x = 0;x<j;x++,tmpldentry --)
ffff8000008103af:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008103b6:	e9 37 01 00 00       	jmp    ffff8000008104f2 <FAT32_readdir+0x500>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348
			{
				for(y = 0;y<5;y++)
ffff8000008103bb:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008103c2:	eb 53                	jmp    ffff800000810417 <FAT32_readdir+0x425>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:349
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff8000008103c4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008103c8:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008103cb:	48 63 d2             	movsxd rdx,edx
ffff8000008103ce:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008103d3:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008103d7:	74 3a                	je     ffff800000810413 <FAT32_readdir+0x421>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:349 (discriminator 1)
ffff8000008103d9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008103dd:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008103e0:	48 63 d2             	movsxd rdx,edx
ffff8000008103e3:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008103e8:	66 85 c0             	test   ax,ax
ffff8000008103eb:	74 26                	je     ffff800000810413 <FAT32_readdir+0x421>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
ffff8000008103ed:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008103f1:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008103f4:	48 63 d2             	movsxd rdx,edx
ffff8000008103f7:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff8000008103fc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008103ff:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810402:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810405:	48 63 d0             	movsxd rdx,eax
ffff800000810408:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081040c:	48 01 d0             	add    rax,rdx
ffff80000081040f:	89 ca                	mov    edx,ecx
ffff800000810411:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 2)
				for(y = 0;y<5;y++)
ffff800000810413:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 1)
ffff800000810417:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
ffff80000081041b:	7e a7                	jle    ffff8000008103c4 <FAT32_readdir+0x3d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352

				for(y = 0;y<6;y++)
ffff80000081041d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810424:	eb 53                	jmp    ffff800000810479 <FAT32_readdir+0x487>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810426:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081042a:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081042d:	48 63 d2             	movsxd rdx,edx
ffff800000810430:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000810435:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810439:	74 3a                	je     ffff800000810475 <FAT32_readdir+0x483>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353 (discriminator 1)
ffff80000081043b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081043f:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810442:	48 63 d2             	movsxd rdx,edx
ffff800000810445:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff80000081044a:	66 85 c0             	test   ax,ax
ffff80000081044d:	74 26                	je     ffff800000810475 <FAT32_readdir+0x483>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
ffff80000081044f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810453:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810456:	48 63 d2             	movsxd rdx,edx
ffff800000810459:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff80000081045e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810461:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810464:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810467:	48 63 d0             	movsxd rdx,eax
ffff80000081046a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081046e:	48 01 d0             	add    rax,rdx
ffff800000810471:	89 ca                	mov    edx,ecx
ffff800000810473:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 2)
				for(y = 0;y<6;y++)
ffff800000810475:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 1)
ffff800000810479:	83 7d cc 05          	cmp    DWORD PTR [rbp-0x34],0x5
ffff80000081047d:	7e a7                	jle    ffff800000810426 <FAT32_readdir+0x434>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356

				for(y = 0;y<2;y++)
ffff80000081047f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810486:	eb 5b                	jmp    ffff8000008104e3 <FAT32_readdir+0x4f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810488:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081048c:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081048f:	48 63 d2             	movsxd rdx,edx
ffff800000810492:	48 83 c2 08          	add    rdx,0x8
ffff800000810496:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff80000081049b:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000081049f:	74 3e                	je     ffff8000008104df <FAT32_readdir+0x4ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357 (discriminator 1)
ffff8000008104a1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008104a5:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008104a8:	48 63 d2             	movsxd rdx,edx
ffff8000008104ab:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008104b0:	66 85 c0             	test   ax,ax
ffff8000008104b3:	74 2a                	je     ffff8000008104df <FAT32_readdir+0x4ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
ffff8000008104b5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008104b9:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008104bc:	48 63 d2             	movsxd rdx,edx
ffff8000008104bf:	48 83 c2 08          	add    rdx,0x8
ffff8000008104c3:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff8000008104c8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008104cb:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008104ce:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008104d1:	48 63 d0             	movsxd rdx,eax
ffff8000008104d4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008104d8:	48 01 d0             	add    rax,rdx
ffff8000008104db:	89 ca                	mov    edx,ecx
ffff8000008104dd:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 2)
				for(y = 0;y<2;y++)
ffff8000008104df:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 1)
ffff8000008104e3:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
ffff8000008104e7:	7e 9f                	jle    ffff800000810488 <FAT32_readdir+0x496>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
ffff8000008104e9:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
ffff8000008104ed:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346 (discriminator 1)
ffff8000008104f2:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008104f5:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008104f8:	0f 8c bd fe ff ff    	jl     ffff8000008103bb <FAT32_readdir+0x3c9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360
			}
			goto find_lookup_success;
ffff8000008104fe:	e9 2c 02 00 00       	jmp    ffff80000081072f <FAT32_readdir+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:363
		}

		name = kmalloc(15, 0);
ffff800000810503:	be 00 00 00 00       	mov    esi,0x0
ffff800000810508:	bf 0f 00 00 00       	mov    edi,0xf
ffff80000081050d:	49 89 df             	mov    r15,rbx
ffff800000810510:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810515:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000081051c:	ff ff ff 
ffff80000081051f:	48 01 da             	add    rdx,rbx
ffff800000810522:	ff d2                	call   rdx
ffff800000810524:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:364
		memset(name,0,15);
ffff800000810528:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081052c:	ba 0f 00 00 00       	mov    edx,0xf
ffff800000810531:	be 00 00 00 00       	mov    esi,0x0
ffff800000810536:	48 89 c7             	mov    rdi,rax
ffff800000810539:	49 89 df             	mov    r15,rbx
ffff80000081053c:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000810543:	ff ff ff 
ffff800000810546:	48 01 d8             	add    rax,rbx
ffff800000810549:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366
		//short file/dir base name compare
		for(x=0;x<8;x++)
ffff80000081054b:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000810552:	eb 74                	jmp    ffff8000008105c8 <FAT32_readdir+0x5d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000810554:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810558:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081055b:	48 98                	cdqe   
ffff80000081055d:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810561:	3c 20                	cmp    al,0x20
ffff800000810563:	74 6b                	je     ffff8000008105d0 <FAT32_readdir+0x5de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000810565:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810569:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000081056d:	0f b6 c0             	movzx  eax,al
ffff800000810570:	83 e0 08             	and    eax,0x8
ffff800000810573:	85 c0                	test   eax,eax
ffff800000810575:	74 29                	je     ffff8000008105a0 <FAT32_readdir+0x5ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:371
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000810577:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081057b:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081057e:	48 98                	cdqe   
ffff800000810580:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810584:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000810587:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081058a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081058d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810590:	48 63 d0             	movsxd rdx,eax
ffff800000810593:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810597:	48 01 d0             	add    rax,rdx
ffff80000081059a:	89 ca                	mov    edx,ecx
ffff80000081059c:	88 10                	mov    BYTE PTR [rax],dl
ffff80000081059e:	eb 24                	jmp    ffff8000008105c4 <FAT32_readdir+0x5d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:373
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff8000008105a0:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008105a4:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008105a7:	48 98                	cdqe   
ffff8000008105a9:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff8000008105ad:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008105b0:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008105b3:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008105b6:	48 63 d0             	movsxd rdx,eax
ffff8000008105b9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008105bd:	48 01 d0             	add    rax,rdx
ffff8000008105c0:	89 ca                	mov    edx,ecx
ffff8000008105c2:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366 (discriminator 2)
		for(x=0;x<8;x++)
ffff8000008105c4:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366 (discriminator 1)
ffff8000008105c8:	83 7d d0 07          	cmp    DWORD PTR [rbp-0x30],0x7
ffff8000008105cc:	7e 86                	jle    ffff800000810554 <FAT32_readdir+0x562>
ffff8000008105ce:	eb 01                	jmp    ffff8000008105d1 <FAT32_readdir+0x5df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:369
				break;
ffff8000008105d0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:376
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
ffff8000008105d1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008105d5:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008105d9:	0f b6 c0             	movzx  eax,al
ffff8000008105dc:	83 e0 10             	and    eax,0x10
ffff8000008105df:	85 c0                	test   eax,eax
ffff8000008105e1:	0f 85 44 01 00 00    	jne    ffff80000081072b <FAT32_readdir+0x739>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:379
			goto find_lookup_success;

		name[namelen++] = '.';
ffff8000008105e7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008105ea:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008105ed:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008105f0:	48 63 d0             	movsxd rdx,eax
ffff8000008105f3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008105f7:	48 01 d0             	add    rax,rdx
ffff8000008105fa:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:382

		//short file ext name compare
		for(x=8;x<11;x++)
ffff8000008105fd:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
ffff800000810604:	eb 74                	jmp    ffff80000081067a <FAT32_readdir+0x688>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000810606:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081060a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081060d:	48 98                	cdqe   
ffff80000081060f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810613:	3c 20                	cmp    al,0x20
ffff800000810615:	74 6b                	je     ffff800000810682 <FAT32_readdir+0x690>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000810617:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081061b:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000081061f:	0f b6 c0             	movzx  eax,al
ffff800000810622:	83 e0 10             	and    eax,0x10
ffff800000810625:	85 c0                	test   eax,eax
ffff800000810627:	74 29                	je     ffff800000810652 <FAT32_readdir+0x660>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:387
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000810629:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081062d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810630:	48 98                	cdqe   
ffff800000810632:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810636:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000810639:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081063c:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081063f:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810642:	48 63 d0             	movsxd rdx,eax
ffff800000810645:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810649:	48 01 d0             	add    rax,rdx
ffff80000081064c:	89 ca                	mov    edx,ecx
ffff80000081064e:	88 10                	mov    BYTE PTR [rax],dl
ffff800000810650:	eb 24                	jmp    ffff800000810676 <FAT32_readdir+0x684>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:389
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000810652:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810656:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810659:	48 98                	cdqe   
ffff80000081065b:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff80000081065f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810662:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810665:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810668:	48 63 d0             	movsxd rdx,eax
ffff80000081066b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081066f:	48 01 d0             	add    rax,rdx
ffff800000810672:	89 ca                	mov    edx,ecx
ffff800000810674:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:382 (discriminator 2)
		for(x=8;x<11;x++)
ffff800000810676:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:382 (discriminator 1)
ffff80000081067a:	83 7d d0 0a          	cmp    DWORD PTR [rbp-0x30],0xa
ffff80000081067e:	7e 86                	jle    ffff800000810606 <FAT32_readdir+0x614>
ffff800000810680:	eb 01                	jmp    ffff800000810683 <FAT32_readdir+0x691>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:385
				break;
ffff800000810682:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
		}
		if(x == 8)
ffff800000810683:	83 7d d0 08          	cmp    DWORD PTR [rbp-0x30],0x8
ffff800000810687:	0f 85 a1 00 00 00    	jne    ffff80000081072e <FAT32_readdir+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:392
			name[--namelen] = 0;
ffff80000081068d:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffff800000810691:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810694:	48 63 d0             	movsxd rdx,eax
ffff800000810697:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081069b:	48 01 d0             	add    rax,rdx
ffff80000081069e:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
		goto find_lookup_success;
ffff8000008106a1:	e9 88 00 00 00       	jmp    ffff80000081072e <FAT32_readdir+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323
			continue;
ffff8000008106a6:	90                   	nop
ffff8000008106a7:	eb 01                	jmp    ffff8000008106aa <FAT32_readdir+0x6b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:325
			continue;
ffff8000008106a9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff8000008106aa:	83 45 d8 20          	add    DWORD PTR [rbp-0x28],0x20
ffff8000008106ae:	48 83 45 c0 20       	add    QWORD PTR [rbp-0x40],0x20
ffff8000008106b3:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008106b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008106ba:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff8000008106be:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008106c2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320 (discriminator 1)
ffff8000008106c5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008106c8:	48 63 d0             	movsxd rdx,eax
ffff8000008106cb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008106cf:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008106d3:	48 39 c2             	cmp    rdx,rax
ffff8000008106d6:	0f 8c 83 fb ff ff    	jl     ffff80000081025f <FAT32_readdir+0x26d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:396
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff8000008106dc:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008106df:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008106e3:	89 d6                	mov    esi,edx
ffff8000008106e5:	48 89 c7             	mov    rdi,rax
ffff8000008106e8:	49 89 df             	mov    r15,rbx
ffff8000008106eb:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff8000008106f2:	ff ff ff 
ffff8000008106f5:	48 01 d8             	add    rax,rbx
ffff8000008106f8:	ff d0                	call   rax
ffff8000008106fa:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:397
	if(cluster < 0x0ffffff7)
ffff8000008106fd:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000810704:	77 05                	ja     ffff80000081070b <FAT32_readdir+0x719>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:398
		goto next_cluster;
ffff800000810706:	e9 55 fa ff ff       	jmp    ffff800000810160 <FAT32_readdir+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400

    kmfree(buf);
ffff80000081070b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081070f:	48 89 c7             	mov    rdi,rax
ffff800000810712:	49 89 df             	mov    r15,rbx
ffff800000810715:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000081071c:	ff ff ff 
ffff80000081071f:	48 01 d8             	add    rax,rbx
ffff800000810722:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:401
	return NULL;
ffff800000810724:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810729:	eb 3e                	jmp    ffff800000810769 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:377
			goto find_lookup_success;
ffff80000081072b:	90                   	nop
ffff80000081072c:	eb 01                	jmp    ffff80000081072f <FAT32_readdir+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
		goto find_lookup_success;
ffff80000081072e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:405

find_lookup_success:

	filp->position += 32;
ffff80000081072f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810733:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810736:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff80000081073a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081073e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:406
	return filler(dirent,name,namelen,0,0);
ffff800000810741:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810744:	48 63 d0             	movsxd rdx,eax
ffff800000810747:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000081074b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000081074f:	4c 8b 8d 78 ff ff ff 	mov    r9,QWORD PTR [rbp-0x88]
ffff800000810756:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000081075c:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000810761:	48 89 c7             	mov    rdi,rax
ffff800000810764:	41 ff d1             	call   r9
ffff800000810767:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:407
}
ffff800000810769:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000081076d:	5b                   	pop    rbx
ffff80000081076e:	41 5f                	pop    r15
ffff800000810770:	5d                   	pop    rbp
ffff800000810771:	c3                   	ret    

ffff800000810772 <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:424
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff800000810772:	f3 0f 1e fa          	endbr64 
ffff800000810776:	55                   	push   rbp
ffff800000810777:	48 89 e5             	mov    rbp,rsp
ffff80000081077a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081077a <FAT32_create+0x8>
ffff800000810781:	49 bb 7e d3 10 00 00 	movabs r11,0x10d37e
ffff800000810788:	00 00 00 
ffff80000081078b:	4c 01 d8             	add    rax,r11
ffff80000081078e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810792:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000810796:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000810799:	90                   	nop
ffff80000081079a:	5d                   	pop    rbp
ffff80000081079b:	c3                   	ret    

ffff80000081079c <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:428


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
ffff80000081079c:	f3 0f 1e fa          	endbr64 
ffff8000008107a0:	55                   	push   rbp
ffff8000008107a1:	48 89 e5             	mov    rbp,rsp
ffff8000008107a4:	41 57                	push   r15
ffff8000008107a6:	53                   	push   rbx
ffff8000008107a7:	48 83 ec 60          	sub    rsp,0x60
ffff8000008107ab:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008107ab <FAT32_lookup+0xf>
ffff8000008107b2:	49 bb 4d d3 10 00 00 	movabs r11,0x10d34d
ffff8000008107b9:	00 00 00 
ffff8000008107bc:	4c 01 db             	add    rbx,r11
ffff8000008107bf:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff8000008107c3:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:429
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
ffff8000008107c7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008107cb:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff8000008107cf:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:430
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
ffff8000008107d3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008107d7:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff8000008107db:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff8000008107df:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432

	unsigned int cluster = 0;
ffff8000008107e3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:433
	unsigned long sector = 0;
ffff8000008107ea:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff8000008107f1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434
	unsigned char * buf =NULL; 
ffff8000008107f2:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff8000008107f9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:435
	int i = 0,j = 0,x = 0;
ffff8000008107fa:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000810801:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000810808:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436
	struct FAT32_Directory * tmpdentry = NULL;
ffff80000081080f:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000810816:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000810817:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000081081e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:438
	struct index_node * p = NULL;
ffff80000081081f:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000810826:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:440

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000810827:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081082b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081082f:	be 00 00 00 00       	mov    esi,0x0
ffff800000810834:	48 89 c7             	mov    rdi,rax
ffff800000810837:	49 89 df             	mov    r15,rbx
ffff80000081083a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081083f:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000810846:	ff ff ff 
ffff800000810849:	48 01 da             	add    rdx,rbx
ffff80000081084c:	ff d2                	call   rdx
ffff80000081084e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:442

	cluster = finode->first_cluster;
ffff800000810852:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000810856:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810859:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:445

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000081085c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810860:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000810864:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810867:	83 e8 02             	sub    eax,0x2
ffff80000081086a:	89 c1                	mov    ecx,eax
ffff80000081086c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810870:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810874:	48 0f af c1          	imul   rax,rcx
ffff800000810878:	48 01 d0             	add    rax,rdx
ffff80000081087b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:446
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
ffff80000081087f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000810883:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810886:	89 c6                	mov    esi,eax
ffff800000810888:	48 b8 e8 db ff ff ff 	movabs rax,0xffffffffffffdbe8
ffff80000081088f:	ff ff ff 
ffff800000810892:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810896:	48 89 c7             	mov    rdi,rax
ffff800000810899:	49 89 df             	mov    r15,rbx
ffff80000081089c:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008108a1:	48 b9 fb 3b ee ff ff 	movabs rcx,0xffffffffffee3bfb
ffff8000008108a8:	ff ff ff 
ffff8000008108ab:	48 01 d9             	add    rcx,rbx
ffff8000008108ae:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:447
    if(blkdev_read(root_sb->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff8000008108b0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008108b4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008108b8:	48 c1 e0 09          	shl    rax,0x9
ffff8000008108bc:	48 89 c7             	mov    rdi,rax
ffff8000008108bf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008108c3:	c1 e0 09             	shl    eax,0x9
ffff8000008108c6:	89 c6                	mov    esi,eax
ffff8000008108c8:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008108cf:	ff ff ff 
ffff8000008108d2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008108d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008108d9:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff8000008108dd:	0f b7 c0             	movzx  eax,ax
ffff8000008108e0:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008108e4:	48 89 d1             	mov    rcx,rdx
ffff8000008108e7:	48 89 fa             	mov    rdx,rdi
ffff8000008108ea:	89 c7                	mov    edi,eax
ffff8000008108ec:	49 89 df             	mov    r15,rbx
ffff8000008108ef:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff8000008108f6:	ff ff ff 
ffff8000008108f9:	48 01 d8             	add    rax,rbx
ffff8000008108fc:	ff d0                	call   rax
ffff8000008108fe:	85 c0                	test   eax,eax
ffff800000810900:	79 4b                	jns    ffff80000081094d <FAT32_lookup+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
ffff800000810902:	48 b8 10 dc ff ff ff 	movabs rax,0xffffffffffffdc10
ffff800000810909:	ff ff ff 
ffff80000081090c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810910:	48 89 c7             	mov    rdi,rax
ffff800000810913:	49 89 df             	mov    r15,rbx
ffff800000810916:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081091b:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff800000810922:	ff ff ff 
ffff800000810925:	48 01 da             	add    rdx,rbx
ffff800000810928:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
        kmfree(buf);
ffff80000081092a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081092e:	48 89 c7             	mov    rdi,rax
ffff800000810931:	49 89 df             	mov    r15,rbx
ffff800000810934:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000081093b:	ff ff ff 
ffff80000081093e:	48 01 d8             	add    rax,rbx
ffff800000810941:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:451
		return NULL;
ffff800000810943:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810948:	e9 5f 08 00 00       	jmp    ffff8000008111ac <FAT32_lookup+0xa10>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:454
	}

	tmpdentry = (struct FAT32_Directory *)buf;
ffff80000081094d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810951:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:456

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000810955:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000081095c:	e9 9d 05 00 00       	jmp    ffff800000810efe <FAT32_lookup+0x762>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:458
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff800000810961:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810965:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810969:	3c 0f                	cmp    al,0xf
ffff80000081096b:	0f 84 59 05 00 00    	je     ffff800000810eca <FAT32_lookup+0x72e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff800000810971:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810975:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810978:	3c e5                	cmp    al,0xe5
ffff80000081097a:	0f 84 4d 05 00 00    	je     ffff800000810ecd <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460 (discriminator 2)
ffff800000810980:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810984:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810987:	84 c0                	test   al,al
ffff800000810989:	0f 84 3e 05 00 00    	je     ffff800000810ecd <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460 (discriminator 4)
ffff80000081098f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810993:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810996:	3c 05                	cmp    al,0x5
ffff800000810998:	0f 84 2f 05 00 00    	je     ffff800000810ecd <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff80000081099e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008109a2:	48 83 e8 20          	sub    rax,0x20
ffff8000008109a6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464
		j = 0;
ffff8000008109aa:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff8000008109b1:	e9 88 01 00 00       	jmp    ffff800000810b3e <FAT32_lookup+0x3a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:469
		{
			for(x=0;x<5;x++)
ffff8000008109b6:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008109bd:	eb 6a                	jmp    ffff800000810a29 <FAT32_lookup+0x28d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
ffff8000008109bf:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008109c3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008109c6:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008109c9:	7e 15                	jle    ffff8000008109e0 <FAT32_lookup+0x244>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471 (discriminator 1)
ffff8000008109cb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008109cf:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008109d2:	48 63 d2             	movsxd rdx,edx
ffff8000008109d5:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008109da:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008109de:	74 44                	je     ffff800000810a24 <FAT32_lookup+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
ffff8000008109e0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008109e4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008109e7:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008109ea:	0f 8f e0 04 00 00    	jg     ffff800000810ed0 <FAT32_lookup+0x734>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473 (discriminator 1)
ffff8000008109f0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008109f4:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008109f7:	48 63 d2             	movsxd rdx,edx
ffff8000008109fa:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff8000008109ff:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a03:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810a06:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810a09:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810a0c:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810a0f:	48 98                	cdqe   
ffff800000810a11:	48 01 f0             	add    rax,rsi
ffff800000810a14:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810a17:	66 98                	cbw    
ffff800000810a19:	66 39 c1             	cmp    cx,ax
ffff800000810a1c:	0f 85 ae 04 00 00    	jne    ffff800000810ed0 <FAT32_lookup+0x734>
ffff800000810a22:	eb 01                	jmp    ffff800000810a25 <FAT32_lookup+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472
					continue;
ffff800000810a24:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:469 (discriminator 2)
			for(x=0;x<5;x++)
ffff800000810a25:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:469 (discriminator 1)
ffff800000810a29:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
ffff800000810a2d:	7e 90                	jle    ffff8000008109bf <FAT32_lookup+0x223>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
ffff800000810a2f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810a36:	eb 6a                	jmp    ffff800000810aa2 <FAT32_lookup+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:478
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
ffff800000810a38:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a3c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810a3f:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810a42:	7e 15                	jle    ffff800000810a59 <FAT32_lookup+0x2bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:478 (discriminator 1)
ffff800000810a44:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810a48:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810a4b:	48 63 d2             	movsxd rdx,edx
ffff800000810a4e:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000810a53:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810a57:	74 44                	je     ffff800000810a9d <FAT32_lookup+0x301>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000810a59:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a5d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810a60:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810a63:	0f 8f 6a 04 00 00    	jg     ffff800000810ed3 <FAT32_lookup+0x737>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480 (discriminator 1)
ffff800000810a69:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810a6d:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810a70:	48 63 d2             	movsxd rdx,edx
ffff800000810a73:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff800000810a78:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a7c:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810a7f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810a82:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810a85:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810a88:	48 98                	cdqe   
ffff800000810a8a:	48 01 f0             	add    rax,rsi
ffff800000810a8d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810a90:	66 98                	cbw    
ffff800000810a92:	66 39 c1             	cmp    cx,ax
ffff800000810a95:	0f 85 38 04 00 00    	jne    ffff800000810ed3 <FAT32_lookup+0x737>
ffff800000810a9b:	eb 01                	jmp    ffff800000810a9e <FAT32_lookup+0x302>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479
					continue;
ffff800000810a9d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476 (discriminator 2)
			for(x=0;x<6;x++)
ffff800000810a9e:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476 (discriminator 1)
ffff800000810aa2:	83 7d e0 05          	cmp    DWORD PTR [rbp-0x20],0x5
ffff800000810aa6:	7e 90                	jle    ffff800000810a38 <FAT32_lookup+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
ffff800000810aa8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810aaf:	eb 72                	jmp    ffff800000810b23 <FAT32_lookup+0x387>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:485
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
ffff800000810ab1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810ab5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810ab8:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810abb:	7e 19                	jle    ffff800000810ad6 <FAT32_lookup+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:485 (discriminator 1)
ffff800000810abd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810ac1:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810ac4:	48 63 d2             	movsxd rdx,edx
ffff800000810ac7:	48 83 c2 08          	add    rdx,0x8
ffff800000810acb:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff800000810ad0:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810ad4:	74 48                	je     ffff800000810b1e <FAT32_lookup+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000810ad6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810ada:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810add:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810ae0:	0f 8f f0 03 00 00    	jg     ffff800000810ed6 <FAT32_lookup+0x73a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487 (discriminator 1)
ffff800000810ae6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810aea:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810aed:	48 63 d2             	movsxd rdx,edx
ffff800000810af0:	48 83 c2 08          	add    rdx,0x8
ffff800000810af4:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000810af9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810afd:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810b00:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810b03:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810b06:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810b09:	48 98                	cdqe   
ffff800000810b0b:	48 01 f0             	add    rax,rsi
ffff800000810b0e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810b11:	66 98                	cbw    
ffff800000810b13:	66 39 c1             	cmp    cx,ax
ffff800000810b16:	0f 85 ba 03 00 00    	jne    ffff800000810ed6 <FAT32_lookup+0x73a>
ffff800000810b1c:	eb 01                	jmp    ffff800000810b1f <FAT32_lookup+0x383>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486
					continue;
ffff800000810b1e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483 (discriminator 2)
			for(x=0;x<2;x++)
ffff800000810b1f:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483 (discriminator 1)
ffff800000810b23:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffff800000810b27:	7e 88                	jle    ffff800000810ab1 <FAT32_lookup+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:491
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
ffff800000810b29:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b2d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810b30:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810b33:	0f 8d 2e 04 00 00    	jge    ffff800000810f67 <FAT32_lookup+0x7cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:496
			{
				goto find_lookup_success;
			}

			tmpldentry --;
ffff800000810b39:	48 83 6d d0 20       	sub    QWORD PTR [rbp-0x30],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000810b3e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810b42:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810b46:	3c 0f                	cmp    al,0xf
ffff800000810b48:	75 0f                	jne    ffff800000810b59 <FAT32_lookup+0x3bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467 (discriminator 1)
ffff800000810b4a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810b4e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810b51:	3c e5                	cmp    al,0xe5
ffff800000810b53:	0f 85 5d fe ff ff    	jne    ffff8000008109b6 <FAT32_lookup+0x21a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500
		}

		//short file/dir base name compare
		j = 0;
ffff800000810b59:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:501
		for(x=0;x<8;x++)
ffff800000810b60:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810b67:	e9 f4 01 00 00       	jmp    ffff800000810d60 <FAT32_lookup+0x5c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:503
		{
			switch(tmpdentry->DIR_Name[x])
ffff800000810b6c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810b70:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810b73:	48 98                	cdqe   
ffff800000810b75:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810b79:	0f b6 c0             	movzx  eax,al
ffff800000810b7c:	83 f8 7a             	cmp    eax,0x7a
ffff800000810b7f:	0f 8f d0 01 00 00    	jg     ffff800000810d55 <FAT32_lookup+0x5b9>
ffff800000810b85:	83 f8 61             	cmp    eax,0x61
ffff800000810b88:	0f 8d e6 00 00 00    	jge    ffff800000810c74 <FAT32_lookup+0x4d8>
ffff800000810b8e:	83 f8 5a             	cmp    eax,0x5a
ffff800000810b91:	0f 8f be 01 00 00    	jg     ffff800000810d55 <FAT32_lookup+0x5b9>
ffff800000810b97:	83 f8 41             	cmp    eax,0x41
ffff800000810b9a:	0f 8d d4 00 00 00    	jge    ffff800000810c74 <FAT32_lookup+0x4d8>
ffff800000810ba0:	83 f8 20             	cmp    eax,0x20
ffff800000810ba3:	74 1a                	je     ffff800000810bbf <FAT32_lookup+0x423>
ffff800000810ba5:	83 f8 20             	cmp    eax,0x20
ffff800000810ba8:	0f 8c a7 01 00 00    	jl     ffff800000810d55 <FAT32_lookup+0x5b9>
ffff800000810bae:	83 e8 30             	sub    eax,0x30
ffff800000810bb1:	83 f8 09             	cmp    eax,0x9
ffff800000810bb4:	0f 87 9b 01 00 00    	ja     ffff800000810d55 <FAT32_lookup+0x5b9>
ffff800000810bba:	e9 53 01 00 00       	jmp    ffff800000810d12 <FAT32_lookup+0x576>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:506
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000810bbf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810bc3:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810bc7:	0f b6 c0             	movzx  eax,al
ffff800000810bca:	83 e0 10             	and    eax,0x10
ffff800000810bcd:	85 c0                	test   eax,eax
ffff800000810bcf:	75 50                	jne    ffff800000810c21 <FAT32_lookup+0x485>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:508
					{
						if(dest_dentry->name[j]=='.')
ffff800000810bd1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810bd5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810bd8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810bdb:	48 98                	cdqe   
ffff800000810bdd:	48 01 d0             	add    rax,rdx
ffff800000810be0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810be3:	3c 2e                	cmp    al,0x2e
ffff800000810be5:	0f 84 70 01 00 00    	je     ffff800000810d5b <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:510
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810beb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810bef:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810bf2:	48 98                	cdqe   
ffff800000810bf4:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810bf8:	0f b6 d0             	movzx  edx,al
ffff800000810bfb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810bff:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810c02:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810c05:	48 98                	cdqe   
ffff800000810c07:	48 01 c8             	add    rax,rcx
ffff800000810c0a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810c0d:	0f be c0             	movsx  eax,al
ffff800000810c10:	39 c2                	cmp    edx,eax
ffff800000810c12:	0f 85 c1 02 00 00    	jne    ffff800000810ed9 <FAT32_lookup+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
						{
							j++;
ffff800000810c18:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:513
							break;
ffff800000810c1c:	e9 3b 01 00 00       	jmp    ffff800000810d5c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:520
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810c21:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c25:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810c28:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810c2b:	7d 32                	jge    ffff800000810c5f <FAT32_lookup+0x4c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:520 (discriminator 1)
ffff800000810c2d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810c31:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810c34:	48 98                	cdqe   
ffff800000810c36:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810c3a:	0f b6 d0             	movzx  edx,al
ffff800000810c3d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c41:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810c44:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810c47:	48 98                	cdqe   
ffff800000810c49:	48 01 c8             	add    rax,rcx
ffff800000810c4c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810c4f:	0f be c0             	movsx  eax,al
ffff800000810c52:	39 c2                	cmp    edx,eax
ffff800000810c54:	75 09                	jne    ffff800000810c5f <FAT32_lookup+0x4c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:522
						{
							j++;
ffff800000810c56:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:523
							break;
ffff800000810c5a:	e9 fd 00 00 00       	jmp    ffff800000810d5c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:525
						}
						else if(j == dest_dentry->name_length)
ffff800000810c5f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c63:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810c66:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810c69:	0f 85 6d 02 00 00    	jne    ffff800000810edc <FAT32_lookup+0x740>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:526
							continue;
ffff800000810c6f:	e9 e8 00 00 00       	jmp    ffff800000810d5c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:533
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000810c74:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810c78:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810c7c:	0f b6 c0             	movzx  eax,al
ffff800000810c7f:	83 e0 08             	and    eax,0x8
ffff800000810c82:	85 c0                	test   eax,eax
ffff800000810c84:	74 49                	je     ffff800000810ccf <FAT32_lookup+0x533>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:534
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000810c86:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c8a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810c8d:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810c90:	0f 8d 49 02 00 00    	jge    ffff800000810edf <FAT32_lookup+0x743>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:534 (discriminator 1)
ffff800000810c96:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810c9a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810c9d:	48 98                	cdqe   
ffff800000810c9f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810ca3:	0f b6 c0             	movzx  eax,al
ffff800000810ca6:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000810ca9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810cad:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810cb0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810cb3:	48 98                	cdqe   
ffff800000810cb5:	48 01 c8             	add    rax,rcx
ffff800000810cb8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810cbb:	0f be c0             	movsx  eax,al
ffff800000810cbe:	39 c2                	cmp    edx,eax
ffff800000810cc0:	0f 85 19 02 00 00    	jne    ffff800000810edf <FAT32_lookup+0x743>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:536
						{
							j++;
ffff800000810cc6:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537
							break;
ffff800000810cca:	e9 8d 00 00 00       	jmp    ffff800000810d5c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:543
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810ccf:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810cd3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810cd6:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810cd9:	0f 8d 03 02 00 00    	jge    ffff800000810ee2 <FAT32_lookup+0x746>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:543 (discriminator 1)
ffff800000810cdf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810ce3:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810ce6:	48 98                	cdqe   
ffff800000810ce8:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810cec:	0f b6 d0             	movzx  edx,al
ffff800000810cef:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810cf3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810cf6:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810cf9:	48 98                	cdqe   
ffff800000810cfb:	48 01 c8             	add    rax,rcx
ffff800000810cfe:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810d01:	0f be c0             	movsx  eax,al
ffff800000810d04:	39 c2                	cmp    edx,eax
ffff800000810d06:	0f 85 d6 01 00 00    	jne    ffff800000810ee2 <FAT32_lookup+0x746>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:545
						{
							j++;
ffff800000810d0c:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:546
							break;
ffff800000810d10:	eb 4a                	jmp    ffff800000810d5c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:553
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810d12:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d16:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810d19:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810d1c:	0f 8d c3 01 00 00    	jge    ffff800000810ee5 <FAT32_lookup+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:553 (discriminator 1)
ffff800000810d22:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810d26:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810d29:	48 98                	cdqe   
ffff800000810d2b:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810d2f:	0f b6 d0             	movzx  edx,al
ffff800000810d32:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d36:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810d39:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810d3c:	48 98                	cdqe   
ffff800000810d3e:	48 01 c8             	add    rax,rcx
ffff800000810d41:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810d44:	0f be c0             	movsx  eax,al
ffff800000810d47:	39 c2                	cmp    edx,eax
ffff800000810d49:	0f 85 96 01 00 00    	jne    ffff800000810ee5 <FAT32_lookup+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:555
					{
						j++;
ffff800000810d4f:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:556
						break;
ffff800000810d53:	eb 07                	jmp    ffff800000810d5c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:562
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
ffff800000810d55:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:563
					break;
ffff800000810d59:	eb 01                	jmp    ffff800000810d5c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:509
							continue;
ffff800000810d5b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:501 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000810d5c:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:501 (discriminator 1)
ffff800000810d60:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
ffff800000810d64:	0f 8e 02 fe ff ff    	jle    ffff800000810b6c <FAT32_lookup+0x3d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:567
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000810d6a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810d6e:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810d72:	0f b6 c0             	movzx  eax,al
ffff800000810d75:	83 e0 10             	and    eax,0x10
ffff800000810d78:	85 c0                	test   eax,eax
ffff800000810d7a:	0f 85 ea 01 00 00    	jne    ffff800000810f6a <FAT32_lookup+0x7ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569
		{
			j++;
ffff800000810d80:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570
			for(x=8;x<11;x++)
ffff800000810d84:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
ffff800000810d8b:	e9 2b 01 00 00       	jmp    ffff800000810ebb <FAT32_lookup+0x71f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:572
			{
				switch(tmpdentry->DIR_Name[x])
ffff800000810d90:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810d94:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810d97:	48 98                	cdqe   
ffff800000810d99:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810d9d:	0f b6 c0             	movzx  eax,al
ffff800000810da0:	83 f8 7a             	cmp    eax,0x7a
ffff800000810da3:	0f 8f 3f 01 00 00    	jg     ffff800000810ee8 <FAT32_lookup+0x74c>
ffff800000810da9:	83 f8 61             	cmp    eax,0x61
ffff800000810dac:	7d 2e                	jge    ffff800000810ddc <FAT32_lookup+0x640>
ffff800000810dae:	83 f8 5a             	cmp    eax,0x5a
ffff800000810db1:	0f 8f 31 01 00 00    	jg     ffff800000810ee8 <FAT32_lookup+0x74c>
ffff800000810db7:	83 f8 41             	cmp    eax,0x41
ffff800000810dba:	7d 20                	jge    ffff800000810ddc <FAT32_lookup+0x640>
ffff800000810dbc:	83 f8 20             	cmp    eax,0x20
ffff800000810dbf:	0f 84 c4 00 00 00    	je     ffff800000810e89 <FAT32_lookup+0x6ed>
ffff800000810dc5:	83 f8 20             	cmp    eax,0x20
ffff800000810dc8:	0f 8c 1a 01 00 00    	jl     ffff800000810ee8 <FAT32_lookup+0x74c>
ffff800000810dce:	83 e8 30             	sub    eax,0x30
ffff800000810dd1:	83 f8 09             	cmp    eax,0x9
ffff800000810dd4:	0f 87 0e 01 00 00    	ja     ffff800000810ee8 <FAT32_lookup+0x74c>
ffff800000810dda:	eb 7e                	jmp    ffff800000810e5a <FAT32_lookup+0x6be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:576
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000810ddc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810de0:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810de4:	0f b6 c0             	movzx  eax,al
ffff800000810de7:	83 e0 10             	and    eax,0x10
ffff800000810dea:	85 c0                	test   eax,eax
ffff800000810dec:	74 39                	je     ffff800000810e27 <FAT32_lookup+0x68b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:577
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000810dee:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810df2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810df5:	48 98                	cdqe   
ffff800000810df7:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810dfb:	0f b6 c0             	movzx  eax,al
ffff800000810dfe:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000810e01:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810e05:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810e08:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810e0b:	48 98                	cdqe   
ffff800000810e0d:	48 01 c8             	add    rax,rcx
ffff800000810e10:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810e13:	0f be c0             	movsx  eax,al
ffff800000810e16:	39 c2                	cmp    edx,eax
ffff800000810e18:	0f 85 cd 00 00 00    	jne    ffff800000810eeb <FAT32_lookup+0x74f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:579
							{
								j++;
ffff800000810e1e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:580
								break;
ffff800000810e22:	e9 90 00 00 00       	jmp    ffff800000810eb7 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:586
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810e27:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810e2b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810e2e:	48 98                	cdqe   
ffff800000810e30:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810e34:	0f b6 d0             	movzx  edx,al
ffff800000810e37:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810e3b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810e3e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810e41:	48 98                	cdqe   
ffff800000810e43:	48 01 c8             	add    rax,rcx
ffff800000810e46:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810e49:	0f be c0             	movsx  eax,al
ffff800000810e4c:	39 c2                	cmp    edx,eax
ffff800000810e4e:	0f 85 9a 00 00 00    	jne    ffff800000810eee <FAT32_lookup+0x752>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:588
							{
								j++;
ffff800000810e54:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:589
								break;
ffff800000810e58:	eb 5d                	jmp    ffff800000810eb7 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:596
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810e5a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810e5e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810e61:	48 98                	cdqe   
ffff800000810e63:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810e67:	0f b6 d0             	movzx  edx,al
ffff800000810e6a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810e6e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810e71:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810e74:	48 98                	cdqe   
ffff800000810e76:	48 01 c8             	add    rax,rcx
ffff800000810e79:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810e7c:	0f be c0             	movsx  eax,al
ffff800000810e7f:	39 c2                	cmp    edx,eax
ffff800000810e81:	75 6e                	jne    ffff800000810ef1 <FAT32_lookup+0x755>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:598
						{
							j++;
ffff800000810e83:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:599
							break;
ffff800000810e87:	eb 2e                	jmp    ffff800000810eb7 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:605
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810e89:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810e8d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810e90:	48 98                	cdqe   
ffff800000810e92:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810e96:	0f b6 d0             	movzx  edx,al
ffff800000810e99:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810e9d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810ea0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810ea3:	48 98                	cdqe   
ffff800000810ea5:	48 01 c8             	add    rax,rcx
ffff800000810ea8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810eab:	0f be c0             	movsx  eax,al
ffff800000810eae:	39 c2                	cmp    edx,eax
ffff800000810eb0:	75 42                	jne    ffff800000810ef4 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:607
						{
							j++;
ffff800000810eb2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:608
							break;
ffff800000810eb6:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570 (discriminator 2)
			for(x=8;x<11;x++)
ffff800000810eb7:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570 (discriminator 1)
ffff800000810ebb:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
ffff800000810ebf:	0f 8e cb fe ff ff    	jle    ffff800000810d90 <FAT32_lookup+0x5f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:618
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
ffff800000810ec5:	e9 a0 00 00 00       	jmp    ffff800000810f6a <FAT32_lookup+0x7ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459
			continue;
ffff800000810eca:	90                   	nop
ffff800000810ecb:	eb 28                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:461
			continue;
ffff800000810ecd:	90                   	nop
ffff800000810ece:	eb 25                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:474
					goto continue_cmp_fail;
ffff800000810ed0:	90                   	nop
ffff800000810ed1:	eb 22                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:481
					goto continue_cmp_fail;
ffff800000810ed3:	90                   	nop
ffff800000810ed4:	eb 1f                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:488
					goto continue_cmp_fail;
ffff800000810ed6:	90                   	nop
ffff800000810ed7:	eb 1c                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:516
							goto continue_cmp_fail;
ffff800000810ed9:	90                   	nop
ffff800000810eda:	eb 19                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:528
							goto continue_cmp_fail;
ffff800000810edc:	90                   	nop
ffff800000810edd:	eb 16                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:540
							goto continue_cmp_fail;
ffff800000810edf:	90                   	nop
ffff800000810ee0:	eb 13                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:549
							goto continue_cmp_fail;
ffff800000810ee2:	90                   	nop
ffff800000810ee3:	eb 10                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:559
						goto continue_cmp_fail;
ffff800000810ee5:	90                   	nop
ffff800000810ee6:	eb 0d                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:614
						goto continue_cmp_fail;
ffff800000810ee8:	90                   	nop
ffff800000810ee9:	eb 0a                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:583
								goto continue_cmp_fail;
ffff800000810eeb:	90                   	nop
ffff800000810eec:	eb 07                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:592
								goto continue_cmp_fail;
ffff800000810eee:	90                   	nop
ffff800000810eef:	eb 04                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:602
							goto continue_cmp_fail;
ffff800000810ef1:	90                   	nop
ffff800000810ef2:	eb 01                	jmp    ffff800000810ef5 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:611
							goto continue_cmp_fail;
ffff800000810ef4:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:456 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000810ef5:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
ffff800000810ef9:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:456 (discriminator 1)
ffff800000810efe:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000810f01:	48 63 d0             	movsxd rdx,eax
ffff800000810f04:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810f08:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810f0c:	48 39 c2             	cmp    rdx,rax
ffff800000810f0f:	0f 8c 4c fa ff ff    	jl     ffff800000810961 <FAT32_lookup+0x1c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:623

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810f15:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000810f18:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810f1c:	89 d6                	mov    esi,edx
ffff800000810f1e:	48 89 c7             	mov    rdi,rax
ffff800000810f21:	49 89 df             	mov    r15,rbx
ffff800000810f24:	48 b8 d2 16 ef ff ff 	movabs rax,0xffffffffffef16d2
ffff800000810f2b:	ff ff ff 
ffff800000810f2e:	48 01 d8             	add    rax,rbx
ffff800000810f31:	ff d0                	call   rax
ffff800000810f33:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:624
	if(cluster < 0x0ffffff7)
ffff800000810f36:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000810f3d:	77 05                	ja     ffff800000810f44 <FAT32_lookup+0x7a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:625
		goto next_cluster;
ffff800000810f3f:	e9 18 f9 ff ff       	jmp    ffff80000081085c <FAT32_lookup+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627

    kmfree(buf);
ffff800000810f44:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810f48:	48 89 c7             	mov    rdi,rax
ffff800000810f4b:	49 89 df             	mov    r15,rbx
ffff800000810f4e:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff800000810f55:	ff ff ff 
ffff800000810f58:	48 01 d8             	add    rax,rbx
ffff800000810f5b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:628
	return NULL;
ffff800000810f5d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810f62:	e9 45 02 00 00       	jmp    ffff8000008111ac <FAT32_lookup+0xa10>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:493
				goto find_lookup_success;
ffff800000810f67:	90                   	nop
ffff800000810f68:	eb 01                	jmp    ffff800000810f6b <FAT32_lookup+0x7cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:618
		goto find_lookup_success;
ffff800000810f6a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631

find_lookup_success:
	p = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff800000810f6b:	be 00 00 00 00       	mov    esi,0x0
ffff800000810f70:	bf 3a 00 00 00       	mov    edi,0x3a
ffff800000810f75:	49 89 df             	mov    r15,rbx
ffff800000810f78:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810f7d:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000810f84:	ff ff ff 
ffff800000810f87:	48 01 da             	add    rdx,rbx
ffff800000810f8a:	ff d2                	call   rdx
ffff800000810f8c:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:632
	memset(p,0,sizeof(struct index_node));
ffff800000810f90:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810f94:	ba 3a 00 00 00       	mov    edx,0x3a
ffff800000810f99:	be 00 00 00 00       	mov    esi,0x0
ffff800000810f9e:	48 89 c7             	mov    rdi,rax
ffff800000810fa1:	49 89 df             	mov    r15,rbx
ffff800000810fa4:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000810fab:	ff ff ff 
ffff800000810fae:	48 01 d8             	add    rax,rbx
ffff800000810fb1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:633
	p->file_size = tmpdentry->DIR_FileSize;
ffff800000810fb3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810fb7:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff800000810fba:	89 c2                	mov    edx,eax
ffff800000810fbc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810fc0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000810fc3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810fc7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810fca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810fce:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810fd2:	48 01 d0             	add    rax,rdx
ffff800000810fd5:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000810fd9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810fdd:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810fe1:	48 89 c1             	mov    rcx,rax
ffff800000810fe4:	48 89 d0             	mov    rax,rdx
ffff800000810fe7:	ba 00 00 00 00       	mov    edx,0x0
ffff800000810fec:	48 f7 f1             	div    rcx
ffff800000810fef:	48 89 c2             	mov    rdx,rax
ffff800000810ff2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810ff6:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
ffff800000810ffa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810ffe:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811002:	0f b6 c0             	movzx  eax,al
ffff800000811005:	83 e0 10             	and    eax,0x10
ffff800000811008:	85 c0                	test   eax,eax
ffff80000081100a:	74 07                	je     ffff800000811013 <FAT32_lookup+0x877>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 1)
ffff80000081100c:	ba 02 00 00 00       	mov    edx,0x2
ffff800000811011:	eb 05                	jmp    ffff800000811018 <FAT32_lookup+0x87c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 2)
ffff800000811013:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 4)
ffff800000811018:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081101c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636 (discriminator 4)
	p->sb = parent_inode->sb;
ffff800000811020:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811024:	48 8b 50 1a          	mov    rdx,QWORD PTR [rax+0x1a]
ffff800000811028:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081102c:	48 89 50 1a          	mov    QWORD PTR [rax+0x1a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
ffff800000811030:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811034:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000081103b:	ff ff ff 
ffff80000081103e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811042:	48 89 50 22          	mov    QWORD PTR [rax+0x22],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
ffff800000811046:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081104a:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff800000811051:	ff ff ff 
ffff800000811054:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811058:	48 89 50 2a          	mov    QWORD PTR [rax+0x2a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff80000081105c:	be 00 00 00 00       	mov    esi,0x0
ffff800000811061:	bf 20 00 00 00       	mov    edi,0x20
ffff800000811066:	49 89 df             	mov    r15,rbx
ffff800000811069:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081106e:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000811075:	ff ff ff 
ffff800000811078:	48 01 da             	add    rdx,rbx
ffff80000081107b:	ff d2                	call   rdx
ffff80000081107d:	48 89 c2             	mov    rdx,rax
ffff800000811080:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811084:	48 89 50 32          	mov    QWORD PTR [rax+0x32],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000811088:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081108c:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000811090:	ba 20 00 00 00       	mov    edx,0x20
ffff800000811095:	be 00 00 00 00       	mov    esi,0x0
ffff80000081109a:	48 89 c7             	mov    rdi,rax
ffff80000081109d:	49 89 df             	mov    r15,rbx
ffff8000008110a0:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff8000008110a7:	ff ff ff 
ffff8000008110aa:	48 01 d8             	add    rax,rbx
ffff8000008110ad:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:642 (discriminator 4)
	finode = p->private_index_info;
ffff8000008110af:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008110b3:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff8000008110b7:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
ffff8000008110bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008110bf:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008110c3:	0f b7 c0             	movzx  eax,ax
ffff8000008110c6:	c1 e0 10             	shl    eax,0x10
ffff8000008110c9:	89 c2                	mov    edx,eax
ffff8000008110cb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008110cf:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
ffff8000008110d3:	0f b7 c0             	movzx  eax,ax
ffff8000008110d6:	09 d0                	or     eax,edx
ffff8000008110d8:	48 98                	cdqe   
ffff8000008110da:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff8000008110df:	48 89 c2             	mov    rdx,rax
ffff8000008110e2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008110e6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	finode->dentry_location = cluster;
ffff8000008110e9:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008110ec:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008110f0:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:646 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
ffff8000008110f4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008110f8:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffff8000008110fc:	48 c1 f8 05          	sar    rax,0x5
ffff800000811100:	48 89 c2             	mov    rdx,rax
ffff800000811103:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811107:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:647 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
ffff80000081110b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081110f:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
ffff800000811113:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811117:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
ffff80000081111b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081111f:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
ffff800000811123:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811127:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
ffff80000081112b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081112f:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
ffff800000811133:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811137:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:650 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
ffff80000081113b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081113f:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff800000811143:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811147:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
ffff80000081114b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081114f:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000811153:	66 c1 e8 0c          	shr    ax,0xc
ffff800000811157:	66 85 c0             	test   ax,ax
ffff80000081115a:	74 27                	je     ffff800000811183 <FAT32_lookup+0x9e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 1)
ffff80000081115c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811160:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811164:	83 e0 01             	and    eax,0x1
ffff800000811167:	48 85 c0             	test   rax,rax
ffff80000081116a:	74 17                	je     ffff800000811183 <FAT32_lookup+0x9e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:654
	{
		p->attribute |= FS_ATTR_DEVICE;
ffff80000081116c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811170:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811174:	48 83 c8 04          	or     rax,0x4
ffff800000811178:	48 89 c2             	mov    rdx,rax
ffff80000081117b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081117f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:657
	}

	dest_dentry->dir_inode = p;
ffff800000811183:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811187:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000081118b:	48 89 50 3c          	mov    QWORD PTR [rax+0x3c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:658
    kmfree(buf);
ffff80000081118f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811193:	48 89 c7             	mov    rdi,rax
ffff800000811196:	49 89 df             	mov    r15,rbx
ffff800000811199:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff8000008111a0:	ff ff ff 
ffff8000008111a3:	48 01 d8             	add    rax,rbx
ffff8000008111a6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:659
	return dest_dentry;	
ffff8000008111a8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:660
}
ffff8000008111ac:	48 83 c4 60          	add    rsp,0x60
ffff8000008111b0:	5b                   	pop    rbx
ffff8000008111b1:	41 5f                	pop    r15
ffff8000008111b3:	5d                   	pop    rbp
ffff8000008111b4:	c3                   	ret    

ffff8000008111b5 <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:664


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff8000008111b5:	f3 0f 1e fa          	endbr64 
ffff8000008111b9:	55                   	push   rbp
ffff8000008111ba:	48 89 e5             	mov    rbp,rsp
ffff8000008111bd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008111bd <FAT32_mkdir+0x8>
ffff8000008111c4:	49 bb 3b c9 10 00 00 	movabs r11,0x10c93b
ffff8000008111cb:	00 00 00 
ffff8000008111ce:	4c 01 d8             	add    rax,r11
ffff8000008111d1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008111d5:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008111d9:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff8000008111dc:	90                   	nop
ffff8000008111dd:	5d                   	pop    rbp
ffff8000008111de:	c3                   	ret    

ffff8000008111df <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:668


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
ffff8000008111df:	f3 0f 1e fa          	endbr64 
ffff8000008111e3:	55                   	push   rbp
ffff8000008111e4:	48 89 e5             	mov    rbp,rsp
ffff8000008111e7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008111e7 <FAT32_rmdir+0x8>
ffff8000008111ee:	49 bb 11 c9 10 00 00 	movabs r11,0x10c911
ffff8000008111f5:	00 00 00 
ffff8000008111f8:	4c 01 d8             	add    rax,r11
ffff8000008111fb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008111ff:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811203:	90                   	nop
ffff800000811204:	5d                   	pop    rbp
ffff800000811205:	c3                   	ret    

ffff800000811206 <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:671

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
ffff800000811206:	f3 0f 1e fa          	endbr64 
ffff80000081120a:	55                   	push   rbp
ffff80000081120b:	48 89 e5             	mov    rbp,rsp
ffff80000081120e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081120e <FAT32_rename+0x8>
ffff800000811215:	49 bb ea c8 10 00 00 	movabs r11,0x10c8ea
ffff80000081121c:	00 00 00 
ffff80000081121f:	4c 01 d8             	add    rax,r11
ffff800000811222:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811226:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081122a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081122e:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000811232:	90                   	nop
ffff800000811233:	5d                   	pop    rbp
ffff800000811234:	c3                   	ret    

ffff800000811235 <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:674

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff800000811235:	f3 0f 1e fa          	endbr64 
ffff800000811239:	55                   	push   rbp
ffff80000081123a:	48 89 e5             	mov    rbp,rsp
ffff80000081123d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081123d <FAT32_getattr+0x8>
ffff800000811244:	49 bb bb c8 10 00 00 	movabs r11,0x10c8bb
ffff80000081124b:	00 00 00 
ffff80000081124e:	4c 01 d8             	add    rax,r11
ffff800000811251:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811255:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811259:	90                   	nop
ffff80000081125a:	5d                   	pop    rbp
ffff80000081125b:	c3                   	ret    

ffff80000081125c <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:677

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff80000081125c:	f3 0f 1e fa          	endbr64 
ffff800000811260:	55                   	push   rbp
ffff800000811261:	48 89 e5             	mov    rbp,rsp
ffff800000811264:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811264 <FAT32_setattr+0x8>
ffff80000081126b:	49 bb 94 c8 10 00 00 	movabs r11,0x10c894
ffff800000811272:	00 00 00 
ffff800000811275:	4c 01 d8             	add    rax,r11
ffff800000811278:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081127c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811280:	90                   	nop
ffff800000811281:	5d                   	pop    rbp
ffff800000811282:	c3                   	ret    

ffff800000811283 <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:692
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
ffff800000811283:	f3 0f 1e fa          	endbr64 
ffff800000811287:	55                   	push   rbp
ffff800000811288:	48 89 e5             	mov    rbp,rsp
ffff80000081128b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081128b <FAT32_compare+0x8>
ffff800000811292:	49 bb 6d c8 10 00 00 	movabs r11,0x10c86d
ffff800000811299:	00 00 00 
ffff80000081129c:	4c 01 d8             	add    rax,r11
ffff80000081129f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008112a3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008112a7:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008112ab:	90                   	nop
ffff8000008112ac:	5d                   	pop    rbp
ffff8000008112ad:	c3                   	ret    

ffff8000008112ae <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:693
long FAT32_hash(struct dir_entry * dentry,char * filename){}
ffff8000008112ae:	f3 0f 1e fa          	endbr64 
ffff8000008112b2:	55                   	push   rbp
ffff8000008112b3:	48 89 e5             	mov    rbp,rsp
ffff8000008112b6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008112b6 <FAT32_hash+0x8>
ffff8000008112bd:	49 bb 42 c8 10 00 00 	movabs r11,0x10c842
ffff8000008112c4:	00 00 00 
ffff8000008112c7:	4c 01 d8             	add    rax,r11
ffff8000008112ca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008112ce:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008112d2:	90                   	nop
ffff8000008112d3:	5d                   	pop    rbp
ffff8000008112d4:	c3                   	ret    

ffff8000008112d5 <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:694
long FAT32_release(struct dir_entry * dentry){}
ffff8000008112d5:	f3 0f 1e fa          	endbr64 
ffff8000008112d9:	55                   	push   rbp
ffff8000008112da:	48 89 e5             	mov    rbp,rsp
ffff8000008112dd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008112dd <FAT32_release+0x8>
ffff8000008112e4:	49 bb 1b c8 10 00 00 	movabs r11,0x10c81b
ffff8000008112eb:	00 00 00 
ffff8000008112ee:	4c 01 d8             	add    rax,r11
ffff8000008112f1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008112f5:	90                   	nop
ffff8000008112f6:	5d                   	pop    rbp
ffff8000008112f7:	c3                   	ret    

ffff8000008112f8 <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:695
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
ffff8000008112f8:	f3 0f 1e fa          	endbr64 
ffff8000008112fc:	55                   	push   rbp
ffff8000008112fd:	48 89 e5             	mov    rbp,rsp
ffff800000811300:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811300 <FAT32_iput+0x8>
ffff800000811307:	49 bb f8 c7 10 00 00 	movabs r11,0x10c7f8
ffff80000081130e:	00 00 00 
ffff800000811311:	4c 01 d8             	add    rax,r11
ffff800000811314:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811318:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081131c:	90                   	nop
ffff80000081131d:	5d                   	pop    rbp
ffff80000081131e:	c3                   	ret    

ffff80000081131f <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:707
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
ffff80000081131f:	f3 0f 1e fa          	endbr64 
ffff800000811323:	55                   	push   rbp
ffff800000811324:	48 89 e5             	mov    rbp,rsp
ffff800000811327:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811327 <fat32_write_superblock+0x8>
ffff80000081132e:	49 bb d1 c7 10 00 00 	movabs r11,0x10c7d1
ffff800000811335:	00 00 00 
ffff800000811338:	4c 01 d8             	add    rax,r11
ffff80000081133b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081133f:	90                   	nop
ffff800000811340:	5d                   	pop    rbp
ffff800000811341:	c3                   	ret    

ffff800000811342 <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:710

void fat32_put_superblock(struct super_block * sb)
{
ffff800000811342:	f3 0f 1e fa          	endbr64 
ffff800000811346:	55                   	push   rbp
ffff800000811347:	48 89 e5             	mov    rbp,rsp
ffff80000081134a:	41 57                	push   r15
ffff80000081134c:	53                   	push   rbx
ffff80000081134d:	48 83 ec 10          	sub    rsp,0x10
ffff800000811351:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811351 <fat32_put_superblock+0xf>
ffff800000811358:	49 bb a7 c7 10 00 00 	movabs r11,0x10c7a7
ffff80000081135f:	00 00 00 
ffff800000811362:	4c 01 db             	add    rbx,r11
ffff800000811365:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:711
    kmfree(sb->private_sb_info);
ffff800000811369:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081136d:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff800000811371:	48 89 c7             	mov    rdi,rax
ffff800000811374:	49 89 df             	mov    r15,rbx
ffff800000811377:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff80000081137e:	ff ff ff 
ffff800000811381:	48 01 d8             	add    rax,rbx
ffff800000811384:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:712
    kmfree(sb->root->dir_inode->private_index_info);
ffff800000811386:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081138a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081138d:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811391:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000811395:	48 89 c7             	mov    rdi,rax
ffff800000811398:	49 89 df             	mov    r15,rbx
ffff80000081139b:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff8000008113a2:	ff ff ff 
ffff8000008113a5:	48 01 d8             	add    rax,rbx
ffff8000008113a8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:713
    kmfree(sb->root->dir_inode);
ffff8000008113aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008113ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008113b1:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff8000008113b5:	48 89 c7             	mov    rdi,rax
ffff8000008113b8:	49 89 df             	mov    r15,rbx
ffff8000008113bb:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff8000008113c2:	ff ff ff 
ffff8000008113c5:	48 01 d8             	add    rax,rbx
ffff8000008113c8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714
    kmfree(sb->root);
ffff8000008113ca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008113ce:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008113d1:	48 89 c7             	mov    rdi,rax
ffff8000008113d4:	49 89 df             	mov    r15,rbx
ffff8000008113d7:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff8000008113de:	ff ff ff 
ffff8000008113e1:	48 01 d8             	add    rax,rbx
ffff8000008113e4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
    kmfree(sb);
ffff8000008113e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008113ea:	48 89 c7             	mov    rdi,rax
ffff8000008113ed:	49 89 df             	mov    r15,rbx
ffff8000008113f0:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff8000008113f7:	ff ff ff 
ffff8000008113fa:	48 01 d8             	add    rax,rbx
ffff8000008113fd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:716
}
ffff8000008113ff:	90                   	nop
ffff800000811400:	48 83 c4 10          	add    rsp,0x10
ffff800000811404:	5b                   	pop    rbx
ffff800000811405:	41 5f                	pop    r15
ffff800000811407:	5d                   	pop    rbp
ffff800000811408:	c3                   	ret    

ffff800000811409 <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719

void fat32_write_inode(struct index_node * inode)
{
ffff800000811409:	f3 0f 1e fa          	endbr64 
ffff80000081140d:	55                   	push   rbp
ffff80000081140e:	48 89 e5             	mov    rbp,rsp
ffff800000811411:	41 57                	push   r15
ffff800000811413:	53                   	push   rbx
ffff800000811414:	48 83 ec 40          	sub    rsp,0x40
ffff800000811418:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811418 <fat32_write_inode+0xf>
ffff80000081141f:	49 bb e0 c6 10 00 00 	movabs r11,0x10c6e0
ffff800000811426:	00 00 00 
ffff800000811429:	4c 01 db             	add    rbx,r11
ffff80000081142c:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:720
	struct FAT32_Directory * fdentry = NULL;
ffff800000811430:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000811437:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:721
	struct FAT32_Directory * buf = NULL;
ffff800000811438:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000081143f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:722
	struct FAT32_inode_info * finode = inode->private_index_info;
ffff800000811440:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811444:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000811448:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
ffff80000081144c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811450:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff800000811454:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff800000811458:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:724
	unsigned long sector = 0;
ffff80000081145c:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000811463:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:726

	if(finode->dentry_location == 0)
ffff800000811464:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811468:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000081146c:	48 85 c0             	test   rax,rax
ffff80000081146f:	75 2d                	jne    ffff80000081149e <fat32_write_inode+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:728
	{
		printf("FS ERROR:write root inode!\n");	
ffff800000811471:	48 b8 3c dc ff ff ff 	movabs rax,0xffffffffffffdc3c
ffff800000811478:	ff ff ff 
ffff80000081147b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081147f:	48 89 c7             	mov    rdi,rax
ffff800000811482:	49 89 df             	mov    r15,rbx
ffff800000811485:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081148a:	48 ba fb 3b ee ff ff 	movabs rdx,0xffffffffffee3bfb
ffff800000811491:	ff ff ff 
ffff800000811494:	48 01 da             	add    rdx,rbx
ffff800000811497:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:729
		return ;
ffff800000811499:	e9 73 01 00 00       	jmp    ffff800000811611 <fat32_write_inode+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
ffff80000081149e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008114a2:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff8000008114a6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008114aa:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008114ae:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff8000008114b2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008114b6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008114ba:	48 0f af c2          	imul   rax,rdx
ffff8000008114be:	48 01 c8             	add    rax,rcx
ffff8000008114c1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:733
	buf = (struct FAT32_Directory *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff8000008114c5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008114c9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008114cd:	be 00 00 00 00       	mov    esi,0x0
ffff8000008114d2:	48 89 c7             	mov    rdi,rax
ffff8000008114d5:	49 89 df             	mov    r15,rbx
ffff8000008114d8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008114dd:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff8000008114e4:	ff ff ff 
ffff8000008114e7:	48 01 da             	add    rdx,rbx
ffff8000008114ea:	ff d2                	call   rdx
ffff8000008114ec:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:734
	memset(buf,0,fsbi->bytes_per_cluster);
ffff8000008114f0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008114f4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008114f8:	89 c2                	mov    edx,eax
ffff8000008114fa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008114fe:	be 00 00 00 00       	mov    esi,0x0
ffff800000811503:	48 89 c7             	mov    rdi,rax
ffff800000811506:	49 89 df             	mov    r15,rbx
ffff800000811509:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811510:	ff ff ff 
ffff800000811513:	48 01 d8             	add    rax,rbx
ffff800000811516:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:735
	blkdev_read(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff800000811518:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081151c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811520:	48 c1 e0 09          	shl    rax,0x9
ffff800000811524:	48 89 c7             	mov    rdi,rax
ffff800000811527:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081152b:	c1 e0 09             	shl    eax,0x9
ffff80000081152e:	89 c6                	mov    esi,eax
ffff800000811530:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811534:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000811538:	0f b7 c0             	movzx  eax,ax
ffff80000081153b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081153f:	48 89 d1             	mov    rcx,rdx
ffff800000811542:	48 89 fa             	mov    rdx,rdi
ffff800000811545:	89 c7                	mov    edi,eax
ffff800000811547:	49 89 df             	mov    r15,rbx
ffff80000081154a:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff800000811551:	ff ff ff 
ffff800000811554:	48 01 d8             	add    rax,rbx
ffff800000811557:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:736
    fdentry = buf+finode->dentry_position;
ffff800000811559:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081155d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811561:	48 c1 e0 05          	shl    rax,0x5
ffff800000811565:	48 89 c2             	mov    rdx,rax
ffff800000811568:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081156c:	48 01 d0             	add    rax,rdx
ffff80000081156f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
ffff800000811573:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811577:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081157a:	89 c2                	mov    edx,eax
ffff80000081157c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811580:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
ffff800000811583:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811587:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081158a:	89 c2                	mov    edx,eax
ffff80000081158c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811590:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:741
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
ffff800000811594:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811598:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff80000081159c:	66 25 00 f0          	and    ax,0xf000
ffff8000008115a0:	89 c2                	mov    edx,eax
ffff8000008115a2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008115a6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008115a9:	48 c1 e8 10          	shr    rax,0x10
ffff8000008115ad:	09 c2                	or     edx,eax
ffff8000008115af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008115b3:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743
	
	blkdev_write(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff8000008115b7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008115bb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008115bf:	48 c1 e0 09          	shl    rax,0x9
ffff8000008115c3:	48 89 c7             	mov    rdi,rax
ffff8000008115c6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008115ca:	c1 e0 09             	shl    eax,0x9
ffff8000008115cd:	89 c6                	mov    esi,eax
ffff8000008115cf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008115d3:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008115d7:	0f b7 c0             	movzx  eax,ax
ffff8000008115da:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008115de:	48 89 d1             	mov    rcx,rdx
ffff8000008115e1:	48 89 fa             	mov    rdx,rdi
ffff8000008115e4:	89 c7                	mov    edi,eax
ffff8000008115e6:	49 89 df             	mov    r15,rbx
ffff8000008115e9:	48 b8 95 01 ef ff ff 	movabs rax,0xffffffffffef0195
ffff8000008115f0:	ff ff ff 
ffff8000008115f3:	48 01 d8             	add    rax,rbx
ffff8000008115f6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
    kmfree(buf);
ffff8000008115f8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008115fc:	48 89 c7             	mov    rdi,rax
ffff8000008115ff:	49 89 df             	mov    r15,rbx
ffff800000811602:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff800000811609:	ff ff ff 
ffff80000081160c:	48 01 d8             	add    rax,rbx
ffff80000081160f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:745
}
ffff800000811611:	48 83 c4 40          	add    rsp,0x40
ffff800000811615:	5b                   	pop    rbx
ffff800000811616:	41 5f                	pop    r15
ffff800000811618:	5d                   	pop    rbp
ffff800000811619:	c3                   	ret    

ffff80000081161a <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:756

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000081161a:	f3 0f 1e fa          	endbr64 
ffff80000081161e:	55                   	push   rbp
ffff80000081161f:	48 89 e5             	mov    rbp,rsp
ffff800000811622:	41 57                	push   r15
ffff800000811624:	53                   	push   rbx
ffff800000811625:	48 83 ec 40          	sub    rsp,0x40
ffff800000811629:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811629 <fat32_read_superblock+0xf>
ffff800000811630:	49 bb cf c4 10 00 00 	movabs r11,0x10c4cf
ffff800000811637:	00 00 00 
ffff80000081163a:	4c 01 db             	add    rbx,r11
ffff80000081163d:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000811641:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:757
	struct super_block * sbp = NULL;
ffff800000811645:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000081164c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:758
	struct FAT32_inode_info * finode = NULL;
ffff80000081164d:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000811654:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:759
	struct FAT32_BootSector * fbs = NULL;
ffff800000811655:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000081165c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:760
	struct FAT32_sb_info * fsbi = NULL;
ffff80000081165d:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000811664:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763

	////super block
	sbp = (struct super_block *) kmalloc(sizeof(struct super_block), 0);
ffff800000811665:	be 00 00 00 00       	mov    esi,0x0
ffff80000081166a:	bf 22 00 00 00       	mov    edi,0x22
ffff80000081166f:	49 89 df             	mov    r15,rbx
ffff800000811672:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811677:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000081167e:	ff ff ff 
ffff800000811681:	48 01 da             	add    rdx,rbx
ffff800000811684:	ff d2                	call   rdx
ffff800000811686:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:764
	memset(sbp,0,sizeof(struct super_block));
ffff80000081168a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081168e:	ba 22 00 00 00       	mov    edx,0x22
ffff800000811693:	be 00 00 00 00       	mov    esi,0x0
ffff800000811698:	48 89 c7             	mov    rdi,rax
ffff80000081169b:	49 89 df             	mov    r15,rbx
ffff80000081169e:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff8000008116a5:	ff ff ff 
ffff8000008116a8:	48 01 d8             	add    rax,rbx
ffff8000008116ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:766

	sbp->sb_ops = &FAT32_sb_ops;
ffff8000008116ad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008116b1:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff8000008116b8:	ff ff ff 
ffff8000008116bb:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008116bf:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:767
	sbp->private_sb_info = (struct FAT32_sb_info *) kmalloc(sizeof(struct FAT32_sb_info), 0);
ffff8000008116c3:	be 00 00 00 00       	mov    esi,0x0
ffff8000008116c8:	bf 60 00 00 00       	mov    edi,0x60
ffff8000008116cd:	49 89 df             	mov    r15,rbx
ffff8000008116d0:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008116d5:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff8000008116dc:	ff ff ff 
ffff8000008116df:	48 01 da             	add    rdx,rbx
ffff8000008116e2:	ff d2                	call   rdx
ffff8000008116e4:	48 89 c2             	mov    rdx,rax
ffff8000008116e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008116eb:	48 89 50 1a          	mov    QWORD PTR [rax+0x1a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:768
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
ffff8000008116ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008116f3:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff8000008116f7:	ba 60 00 00 00       	mov    edx,0x60
ffff8000008116fc:	be 00 00 00 00       	mov    esi,0x0
ffff800000811701:	48 89 c7             	mov    rdi,rax
ffff800000811704:	49 89 df             	mov    r15,rbx
ffff800000811707:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff80000081170e:	ff ff ff 
ffff800000811711:	48 01 d8             	add    rax,rbx
ffff800000811714:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
ffff800000811716:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081171a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
 	fsbi = sbp->private_sb_info;
ffff80000081171e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811722:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff800000811726:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:773
	fsbi->start_sector = DPTE->start_LBA;
ffff80000081172a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081172e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811731:	89 c2                	mov    edx,eax
ffff800000811733:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811737:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:774
	fsbi->sector_count = DPTE->sectors_limit;
ffff80000081173a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081173e:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000811741:	89 c2                	mov    edx,eax
ffff800000811743:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811747:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:775
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
ffff80000081174b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081174f:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff800000811753:	0f b6 d0             	movzx  edx,al
ffff800000811756:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081175a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
ffff80000081175e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811762:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff800000811766:	0f b6 d0             	movzx  edx,al
ffff800000811769:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081176d:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff800000811771:	0f b7 c0             	movzx  eax,ax
ffff800000811774:	0f af c2             	imul   eax,edx
ffff800000811777:	48 63 d0             	movsxd rdx,eax
ffff80000081177a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081177e:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
ffff800000811782:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811786:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff80000081178a:	0f b7 d0             	movzx  edx,ax
ffff80000081178d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811791:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
ffff800000811795:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811799:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff80000081179c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117a0:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff8000008117a4:	0f b7 c0             	movzx  eax,ax
ffff8000008117a7:	8d 0c 02             	lea    ecx,[rdx+rax*1]
ffff8000008117aa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117ae:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff8000008117b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117b5:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff8000008117b9:	0f b6 c0             	movzx  eax,al
ffff8000008117bc:	0f af c2             	imul   eax,edx
ffff8000008117bf:	01 c8                	add    eax,ecx
ffff8000008117c1:	89 c2                	mov    edx,eax
ffff8000008117c3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117c7:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
ffff8000008117cb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008117cf:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff8000008117d2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117d6:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff8000008117da:	0f b7 c0             	movzx  eax,ax
ffff8000008117dd:	01 d0                	add    eax,edx
ffff8000008117df:	89 c2                	mov    edx,eax
ffff8000008117e1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117e5:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
ffff8000008117e9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117ed:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff8000008117f0:	89 c2                	mov    edx,eax
ffff8000008117f2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117f6:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->NumFATs = fbs->BPB_NumFATs;
ffff8000008117fa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117fe:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000811802:	0f b6 d0             	movzx  edx,al
ffff800000811805:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811809:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
ffff80000081180d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811811:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811815:	0f b7 d0             	movzx  edx,ax
ffff800000811818:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081181c:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:783
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
ffff800000811820:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811824:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000811828:	0f b7 d0             	movzx  edx,ax
ffff80000081182b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081182f:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:785
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
ffff800000811833:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811837:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
ffff80000081183a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081183e:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000811842:	0f b7 d0             	movzx  edx,ax
ffff800000811845:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811849:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff80000081184d:	0f b7 c0             	movzx  eax,ax
ffff800000811850:	89 c6                	mov    esi,eax
ffff800000811852:	48 b8 58 dc ff ff ff 	movabs rax,0xffffffffffffdc58
ffff800000811859:	ff ff ff 
ffff80000081185c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811860:	48 89 c7             	mov    rdi,rax
ffff800000811863:	49 89 df             	mov    r15,rbx
ffff800000811866:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081186b:	49 b8 fb 3b ee ff ff 	movabs r8,0xffffffffffee3bfb
ffff800000811872:	ff ff ff 
ffff800000811875:	49 01 d8             	add    r8,rbx
ffff800000811878:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:788
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmalloc(sizeof(struct FAT32_FSInfo), 0);
ffff80000081187b:	be 00 00 00 00       	mov    esi,0x0
ffff800000811880:	bf 00 02 00 00       	mov    edi,0x200
ffff800000811885:	49 89 df             	mov    r15,rbx
ffff800000811888:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081188d:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000811894:	ff ff ff 
ffff800000811897:	48 01 da             	add    rdx,rbx
ffff80000081189a:	ff d2                	call   rdx
ffff80000081189c:	48 89 c2             	mov    rdx,rax
ffff80000081189f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008118a3:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:789
	memset(fsbi->fat_fsinfo,0,512);
ffff8000008118a7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008118ab:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff8000008118af:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008118b4:	be 00 00 00 00       	mov    esi,0x0
ffff8000008118b9:	48 89 c7             	mov    rdi,rax
ffff8000008118bc:	49 89 df             	mov    r15,rbx
ffff8000008118bf:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff8000008118c6:	ff ff ff 
ffff8000008118c9:	48 01 d8             	add    rax,rbx
ffff8000008118cc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:790
	blkdev_read(root_sb->dev,(DPTE->start_LBA + fbs->BPB_FSInfo)*SECTOR_SIZE,SECTOR_SIZE,(unsigned char *)fsbi->fat_fsinfo);
ffff8000008118ce:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008118d2:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff8000008118d6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008118da:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff8000008118dd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008118e1:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff8000008118e5:	0f b7 c0             	movzx  eax,ax
ffff8000008118e8:	01 c8                	add    eax,ecx
ffff8000008118ea:	c1 e0 09             	shl    eax,0x9
ffff8000008118ed:	89 c6                	mov    esi,eax
ffff8000008118ef:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008118f6:	ff ff ff 
ffff8000008118f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008118fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811900:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811904:	0f b7 c0             	movzx  eax,ax
ffff800000811907:	48 89 d1             	mov    rcx,rdx
ffff80000081190a:	ba 00 02 00 00       	mov    edx,0x200
ffff80000081190f:	89 c7                	mov    edi,eax
ffff800000811911:	49 89 df             	mov    r15,rbx
ffff800000811914:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff80000081191b:	ff ff ff 
ffff80000081191e:	48 01 d8             	add    rax,rbx
ffff800000811921:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:791
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
ffff800000811923:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811927:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000081192b:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
ffff800000811931:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811935:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811939:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
ffff80000081193f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811943:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811947:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811949:	89 c6                	mov    esi,eax
ffff80000081194b:	48 b8 a0 dc ff ff ff 	movabs rax,0xffffffffffffdca0
ffff800000811952:	ff ff ff 
ffff800000811955:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811959:	48 89 c7             	mov    rdi,rax
ffff80000081195c:	49 89 df             	mov    r15,rbx
ffff80000081195f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811964:	49 b8 fb 3b ee ff ff 	movabs r8,0xffffffffffee3bfb
ffff80000081196b:	ff ff ff 
ffff80000081196e:	49 01 d8             	add    r8,rbx
ffff800000811971:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	
	////directory entry
	sbp->root = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff800000811974:	be 00 00 00 00       	mov    esi,0x0
ffff800000811979:	bf 54 00 00 00       	mov    edi,0x54
ffff80000081197e:	49 89 df             	mov    r15,rbx
ffff800000811981:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811986:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff80000081198d:	ff ff ff 
ffff800000811990:	48 01 da             	add    rdx,rbx
ffff800000811993:	ff d2                	call   rdx
ffff800000811995:	48 89 c2             	mov    rdx,rax
ffff800000811998:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081199c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:795
	memset(sbp->root,0,sizeof(struct dir_entry));
ffff80000081199f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119a3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119a6:	ba 54 00 00 00       	mov    edx,0x54
ffff8000008119ab:	be 00 00 00 00       	mov    esi,0x0
ffff8000008119b0:	48 89 c7             	mov    rdi,rax
ffff8000008119b3:	49 89 df             	mov    r15,rbx
ffff8000008119b6:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff8000008119bd:	ff ff ff 
ffff8000008119c0:	48 01 d8             	add    rax,rbx
ffff8000008119c3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:797

	list_init(&sbp->root->child_node);
ffff8000008119c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119c9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119cc:	48 83 c0 0c          	add    rax,0xc
ffff8000008119d0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008119d4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008119d8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008119df:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008119e3:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008119ea:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008119eb:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:798
	list_init(&sbp->root->subdirs_list);
ffff8000008119ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119f0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119f3:	48 83 c0 24          	add    rax,0x24
ffff8000008119f7:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008119fb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008119ff:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000811a06:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811a0a:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811a11:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000811a12:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:799
	sbp->root->parent = sbp->root;
ffff800000811a13:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a17:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a1a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000811a1e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000811a21:	48 89 50 44          	mov    QWORD PTR [rax+0x44],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:800
	sbp->root->dir_ops = &FAT32_dentry_ops;
ffff800000811a25:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a29:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a2c:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff800000811a33:	ff ff ff 
ffff800000811a36:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811a3a:	48 89 50 4c          	mov    QWORD PTR [rax+0x4c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801
	sbp->root->name = (char *) kmalloc(2, 0);
ffff800000811a3e:	be 00 00 00 00       	mov    esi,0x0
ffff800000811a43:	bf 02 00 00 00       	mov    edi,0x2
ffff800000811a48:	49 89 df             	mov    r15,rbx
ffff800000811a4b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811a50:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000811a57:	ff ff ff 
ffff800000811a5a:	48 01 da             	add    rdx,rbx
ffff800000811a5d:	ff d2                	call   rdx
ffff800000811a5f:	48 89 c2             	mov    rdx,rax
ffff800000811a62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a66:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a69:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:802
	sbp->root->name[0] = '/';
ffff800000811a6c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a70:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a73:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a76:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:803
	sbp->root->name_length = 1;
ffff800000811a79:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a80:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806

	////index node
	sbp->root->dir_inode = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff800000811a87:	be 00 00 00 00       	mov    esi,0x0
ffff800000811a8c:	bf 3a 00 00 00       	mov    edi,0x3a
ffff800000811a91:	49 89 df             	mov    r15,rbx
ffff800000811a94:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811a99:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000811aa0:	ff ff ff 
ffff800000811aa3:	48 01 da             	add    rdx,rbx
ffff800000811aa6:	ff d2                	call   rdx
ffff800000811aa8:	48 89 c2             	mov    rdx,rax
ffff800000811aab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811aaf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ab2:	48 89 50 3c          	mov    QWORD PTR [rax+0x3c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
ffff800000811ab6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811aba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811abd:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811ac1:	ba 3a 00 00 00       	mov    edx,0x3a
ffff800000811ac6:	be 00 00 00 00       	mov    esi,0x0
ffff800000811acb:	48 89 c7             	mov    rdi,rax
ffff800000811ace:	49 89 df             	mov    r15,rbx
ffff800000811ad1:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811ad8:	ff ff ff 
ffff800000811adb:	48 01 d8             	add    rax,rbx
ffff800000811ade:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:808
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
ffff800000811ae0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ae4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ae7:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811aeb:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff800000811af2:	ff ff ff 
ffff800000811af5:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811af9:	48 89 50 2a          	mov    QWORD PTR [rax+0x2a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:809
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
ffff800000811afd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b01:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b04:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811b08:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff800000811b0f:	ff ff ff 
ffff800000811b12:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811b16:	48 89 50 22          	mov    QWORD PTR [rax+0x22],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:810
	sbp->root->dir_inode->file_size = 0;
ffff800000811b1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b1e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b21:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811b25:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:811
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000811b2c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b30:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b33:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811b37:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811b3a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b3e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811b42:	48 01 d0             	add    rax,rdx
ffff800000811b45:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000811b49:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b4d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811b51:	48 89 c6             	mov    rsi,rax
ffff800000811b54:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b58:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b5b:	48 8b 48 3c          	mov    rcx,QWORD PTR [rax+0x3c]
ffff800000811b5f:	48 89 d0             	mov    rax,rdx
ffff800000811b62:	ba 00 00 00 00       	mov    edx,0x0
ffff800000811b67:	48 f7 f6             	div    rsi
ffff800000811b6a:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
ffff800000811b6e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b72:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b75:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811b79:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff800000811b80:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:813
	sbp->root->dir_inode->sb = sbp;
ffff800000811b81:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b85:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b88:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811b8c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000811b90:	48 89 50 1a          	mov    QWORD PTR [rax+0x1a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff800000811b94:	be 00 00 00 00       	mov    esi,0x0
ffff800000811b99:	bf 20 00 00 00       	mov    edi,0x20
ffff800000811b9e:	49 89 df             	mov    r15,rbx
ffff800000811ba1:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ba6:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000811bad:	ff ff ff 
ffff800000811bb0:	48 01 da             	add    rdx,rbx
ffff800000811bb3:	ff d2                	call   rdx
ffff800000811bb5:	48 89 c2             	mov    rdx,rax
ffff800000811bb8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bbc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811bbf:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811bc3:	48 89 50 32          	mov    QWORD PTR [rax+0x32],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000811bc7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bcb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811bce:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811bd2:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000811bd6:	ba 20 00 00 00       	mov    edx,0x20
ffff800000811bdb:	be 00 00 00 00       	mov    esi,0x0
ffff800000811be0:	48 89 c7             	mov    rdi,rax
ffff800000811be3:	49 89 df             	mov    r15,rbx
ffff800000811be6:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811bed:	ff ff ff 
ffff800000811bf0:	48 01 d8             	add    rax,rbx
ffff800000811bf3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:818
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
ffff800000811bf5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bf9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811bfc:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000811c00:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000811c04:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:819
	finode->first_cluster = fbs->BPB_RootClus;
ffff800000811c08:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811c0c:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff800000811c0f:	89 c2                	mov    edx,eax
ffff800000811c11:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c15:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:820
	finode->dentry_location = 0;
ffff800000811c18:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c1c:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff800000811c23:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:821
	finode->dentry_position = 0; 
ffff800000811c24:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c28:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811c2f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822
	finode->create_date = 0;
ffff800000811c30:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c34:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	finode->create_time = 0;
ffff800000811c3a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c3e:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode->write_date = 0;
ffff800000811c44:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c48:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:825
	finode->write_time = 0;
ffff800000811c4e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c52:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827

	return sbp;
ffff800000811c58:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:828
}
ffff800000811c5c:	48 83 c4 40          	add    rsp,0x40
ffff800000811c60:	5b                   	pop    rbx
ffff800000811c61:	41 5f                	pop    r15
ffff800000811c63:	5d                   	pop    rbp
ffff800000811c64:	c3                   	ret    

ffff800000811c65 <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:840
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};

void DISK1_FAT32_FS_init()
{
ffff800000811c65:	f3 0f 1e fa          	endbr64 
ffff800000811c69:	55                   	push   rbp
ffff800000811c6a:	48 89 e5             	mov    rbp,rsp
ffff800000811c6d:	41 57                	push   r15
ffff800000811c6f:	53                   	push   rbx
ffff800000811c70:	48 81 ec 10 04 00 00 	sub    rsp,0x410
ffff800000811c77:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811c77 <DISK1_FAT32_FS_init+0x12>
ffff800000811c7e:	49 bb 81 be 10 00 00 	movabs r11,0x10be81
ffff800000811c85:	00 00 00 
ffff800000811c88:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:843
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
ffff800000811c8b:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000811c92:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:844
	struct Disk_Partition_Table DPT = {0};
ffff800000811c93:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000811c9a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811c9f:	b9 40 00 00 00       	mov    ecx,0x40
ffff800000811ca4:	48 89 d7             	mov    rdi,rdx
ffff800000811ca7:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:846

	register_filesystem(&FAT32_fs_type);
ffff800000811caa:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000811cb1:	ff ff ff 
ffff800000811cb4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811cb8:	48 89 c7             	mov    rdi,rax
ffff800000811cbb:	49 89 df             	mov    r15,rbx
ffff800000811cbe:	48 b8 ba d7 ee ff ff 	movabs rax,0xffffffffffeed7ba
ffff800000811cc5:	ff ff ff 
ffff800000811cc8:	48 01 d8             	add    rax,rbx
ffff800000811ccb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:848
	
	memset(buf,0,512);
ffff800000811ccd:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811cd4:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811cd9:	be 00 00 00 00       	mov    esi,0x0
ffff800000811cde:	48 89 c7             	mov    rdi,rax
ffff800000811ce1:	49 89 df             	mov    r15,rbx
ffff800000811ce4:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811ceb:	ff ff ff 
ffff800000811cee:	48 01 d8             	add    rax,rbx
ffff800000811cf1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:850

	blkdev_read(root_sb->dev,0,512,buf);
ffff800000811cf3:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000811cfa:	ff ff ff 
ffff800000811cfd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811d01:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811d04:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811d08:	0f b7 c0             	movzx  eax,ax
ffff800000811d0b:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811d12:	48 89 d1             	mov    rcx,rdx
ffff800000811d15:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811d1a:	be 00 00 00 00       	mov    esi,0x0
ffff800000811d1f:	89 c7                	mov    edi,eax
ffff800000811d21:	49 89 df             	mov    r15,rbx
ffff800000811d24:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff800000811d2b:	ff ff ff 
ffff800000811d2e:	48 01 d8             	add    rax,rbx
ffff800000811d31:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:853
    // read_disk(DISK_MAJOR_MAJOR, 0, 1, buf);/*rint r= equest(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
    // chk_result(r);
    DPT = *(struct Disk_Partition_Table *)buf;
ffff800000811d33:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811d3a:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
ffff800000811d41:	48 89 d6             	mov    rsi,rdx
ffff800000811d44:	ba 40 00 00 00       	mov    edx,0x40
ffff800000811d49:	48 89 c7             	mov    rdi,rax
ffff800000811d4c:	48 89 d1             	mov    rcx,rdx
ffff800000811d4f:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:854
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
ffff800000811d52:	0f b6 85 a2 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x25e]
ffff800000811d59:	0f b6 d0             	movzx  edx,al
ffff800000811d5c:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000811d62:	89 c6                	mov    esi,eax
ffff800000811d64:	48 b8 e8 dc ff ff ff 	movabs rax,0xffffffffffffdce8
ffff800000811d6b:	ff ff ff 
ffff800000811d6e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811d72:	48 89 c7             	mov    rdi,rax
ffff800000811d75:	49 89 df             	mov    r15,rbx
ffff800000811d78:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811d7d:	48 b9 fb 3b ee ff ff 	movabs rcx,0xffffffffffee3bfb
ffff800000811d84:	ff ff ff 
ffff800000811d87:	48 01 d9             	add    rcx,rbx
ffff800000811d8a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:856

	memset(buf,0,512);
ffff800000811d8c:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811d93:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811d98:	be 00 00 00 00       	mov    esi,0x0
ffff800000811d9d:	48 89 c7             	mov    rdi,rax
ffff800000811da0:	49 89 df             	mov    r15,rbx
ffff800000811da3:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000811daa:	ff ff ff 
ffff800000811dad:	48 01 d8             	add    rax,rbx
ffff800000811db0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:857
	blkdev_read(root_sb->dev,DPT.DPTE[0].start_LBA*512,512,buf);
ffff800000811db2:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000811db8:	c1 e0 09             	shl    eax,0x9
ffff800000811dbb:	89 c6                	mov    esi,eax
ffff800000811dbd:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000811dc4:	ff ff ff 
ffff800000811dc7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811dcb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811dce:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811dd2:	0f b7 c0             	movzx  eax,ax
ffff800000811dd5:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811ddc:	48 89 d1             	mov    rcx,rdx
ffff800000811ddf:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811de4:	89 c7                	mov    edi,eax
ffff800000811de6:	49 89 df             	mov    r15,rbx
ffff800000811de9:	48 b8 1a 00 ef ff ff 	movabs rax,0xffffffffffef001a
ffff800000811df0:	ff ff ff 
ffff800000811df3:	48 01 d8             	add    rax,rbx
ffff800000811df6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:860

    //挂载新文件系统到/mnt
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
ffff800000811df8:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811dff:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000811e06:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
ffff800000811e0d:	48 89 c2             	mov    rdx,rax
ffff800000811e10:	48 89 ce             	mov    rsi,rcx
ffff800000811e13:	48 b8 e2 dc ff ff ff 	movabs rax,0xffffffffffffdce2
ffff800000811e1a:	ff ff ff 
ffff800000811e1d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811e21:	48 89 c7             	mov    rdi,rax
ffff800000811e24:	49 89 df             	mov    r15,rbx
ffff800000811e27:	48 b8 0d d7 ee ff ff 	movabs rax,0xffffffffffeed70d
ffff800000811e2e:	ff ff ff 
ffff800000811e31:	48 01 d8             	add    rax,rbx
ffff800000811e34:	ff d0                	call   rax
ffff800000811e36:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:861
    fat32_sb->root=dmnt;
ffff800000811e3a:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000811e41:	ff ff ff 
ffff800000811e44:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811e48:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811e4b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811e4f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:863
//    list_add_to_behind(&root_sb->root->subdirs_list,ddev);//把dev文件夹挂到新的rfs下
}
ffff800000811e52:	90                   	nop
ffff800000811e53:	48 81 c4 10 04 00 00 	add    rsp,0x410
ffff800000811e5a:	5b                   	pop    rbx
ffff800000811e5b:	41 5f                	pop    r15
ffff800000811e5d:	5d                   	pop    rbp
ffff800000811e5e:	c3                   	ret    

ffff800000811e5f <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
ffff800000811e5f:	f3 0f 1e fa          	endbr64 
ffff800000811e63:	55                   	push   rbp
ffff800000811e64:	48 89 e5             	mov    rbp,rsp
ffff800000811e67:	41 57                	push   r15
ffff800000811e69:	53                   	push   rbx
ffff800000811e6a:	48 83 ec 30          	sub    rsp,0x30
ffff800000811e6e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811e6e <close_tty+0xf>
ffff800000811e75:	49 bb 8a bc 10 00 00 	movabs r11,0x10bc8a
ffff800000811e7c:	00 00 00 
ffff800000811e7f:	4c 01 db             	add    rbx,r11
ffff800000811e82:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000811e86:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000811e8a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811e8e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811e92:	48 83 c0 18          	add    rax,0x18
ffff800000811e96:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000811e9a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811e9e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811ea2:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000811ea6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811eaa:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811eae:	48 83 c0 30          	add    rax,0x30
ffff800000811eb2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
ffff800000811eb6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811eba:	48 89 c7             	mov    rdi,rax
ffff800000811ebd:	49 89 df             	mov    r15,rbx
ffff800000811ec0:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff800000811ec7:	ff ff ff 
ffff800000811eca:	48 01 d8             	add    rax,rbx
ffff800000811ecd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
ffff800000811ecf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811ed3:	48 89 c7             	mov    rdi,rax
ffff800000811ed6:	49 89 df             	mov    r15,rbx
ffff800000811ed9:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff800000811ee0:	ff ff ff 
ffff800000811ee3:	48 01 d8             	add    rax,rbx
ffff800000811ee6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
ffff800000811ee8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811eec:	48 89 c7             	mov    rdi,rax
ffff800000811eef:	49 89 df             	mov    r15,rbx
ffff800000811ef2:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff800000811ef9:	ff ff ff 
ffff800000811efc:	48 01 d8             	add    rax,rbx
ffff800000811eff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
ffff800000811f01:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811f05:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811f09:	48 89 c7             	mov    rdi,rax
ffff800000811f0c:	49 89 df             	mov    r15,rbx
ffff800000811f0f:	48 b8 ed 47 ee ff ff 	movabs rax,0xffffffffffee47ed
ffff800000811f16:	ff ff ff 
ffff800000811f19:	48 01 d8             	add    rax,rbx
ffff800000811f1c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
ffff800000811f1e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
ffff800000811f23:	48 83 c4 30          	add    rsp,0x30
ffff800000811f27:	5b                   	pop    rbx
ffff800000811f28:	41 5f                	pop    r15
ffff800000811f2a:	5d                   	pop    rbp
ffff800000811f2b:	c3                   	ret    

ffff800000811f2c <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
ffff800000811f2c:	f3 0f 1e fa          	endbr64 
ffff800000811f30:	55                   	push   rbp
ffff800000811f31:	48 89 e5             	mov    rbp,rsp
ffff800000811f34:	41 57                	push   r15
ffff800000811f36:	53                   	push   rbx
ffff800000811f37:	48 83 ec 20          	sub    rsp,0x20
ffff800000811f3b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811f3b <init_tty+0xf>
ffff800000811f42:	49 bb bd bb 10 00 00 	movabs r11,0x10bbbd
ffff800000811f49:	00 00 00 
ffff800000811f4c:	4c 01 db             	add    rbx,r11
ffff800000811f4f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000811f53:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc();
ffff800000811f57:	49 89 df             	mov    r15,rbx
ffff800000811f5a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811f5f:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000811f66:	ff ff ff 
ffff800000811f69:	48 01 da             	add    rdx,rbx
ffff800000811f6c:	ff d2                	call   rdx
ffff800000811f6e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc();
ffff800000811f72:	49 89 df             	mov    r15,rbx
ffff800000811f75:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811f7a:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000811f81:	ff ff ff 
ffff800000811f84:	48 01 da             	add    rdx,rbx
ffff800000811f87:	ff d2                	call   rdx
ffff800000811f89:	48 89 c2             	mov    rdx,rax
ffff800000811f8c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f90:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc();
ffff800000811f94:	49 89 df             	mov    r15,rbx
ffff800000811f97:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811f9c:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000811fa3:	ff ff ff 
ffff800000811fa6:	48 01 da             	add    rdx,rbx
ffff800000811fa9:	ff d2                	call   rdx
ffff800000811fab:	48 89 c2             	mov    rdx,rax
ffff800000811fae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811fb2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc();
ffff800000811fb5:	49 89 df             	mov    r15,rbx
ffff800000811fb8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811fbd:	48 ba 7e 44 ee ff ff 	movabs rdx,0xffffffffffee447e
ffff800000811fc4:	ff ff ff 
ffff800000811fc7:	48 01 da             	add    rdx,rbx
ffff800000811fca:	ff d2                	call   rdx
ffff800000811fcc:	48 89 c2             	mov    rdx,rax
ffff800000811fcf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811fd3:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
ffff800000811fd7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811fdb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
ffff800000811fe2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811fe6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
ffff800000811fed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ff1:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
ffff800000811ff8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ffc:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
ffff800000812003:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812007:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
ffff80000081200e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812012:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
ffff800000812019:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081201d:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
ffff800000812024:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812028:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
ffff80000081202f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812033:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
ffff80000081203a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081203e:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000812045:	ff ff ff 
ffff800000812048:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000081204c:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
ffff800000812050:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812054:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000081205b:	ff ff ff 
ffff80000081205e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812062:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
ffff800000812066:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081206a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000081206e:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
ffff800000812072:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
ffff800000812077:	48 83 c4 20          	add    rsp,0x20
ffff80000081207b:	5b                   	pop    rbx
ffff80000081207c:	41 5f                	pop    r15
ffff80000081207e:	5d                   	pop    rbp
ffff80000081207f:	c3                   	ret    

ffff800000812080 <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000812080:	f3 0f 1e fa          	endbr64 
ffff800000812084:	55                   	push   rbp
ffff800000812085:	48 89 e5             	mov    rbp,rsp
ffff800000812088:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812088 <read_tty+0x8>
ffff80000081208f:	49 bb 70 ba 10 00 00 	movabs r11,0x10ba70
ffff800000812096:	00 00 00 
ffff800000812099:	4c 01 d8             	add    rax,r11
ffff80000081209c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008120a0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff8000008120a4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff8000008120a8:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008120ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008120b0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008120b4:	48 83 c0 18          	add    rax,0x18
ffff8000008120b8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
ffff8000008120bc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff8000008120c3:	eb 6e                	jmp    ffff800000812133 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
ffff8000008120c5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008120c9:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff8000008120cc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008120d0:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff8000008120d3:	39 c2                	cmp    edx,eax
ffff8000008120d5:	75 0b                	jne    ffff8000008120e2 <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
ffff8000008120d7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008120db:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
ffff8000008120e2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008120e6:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff8000008120e9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008120ed:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008120f0:	39 c2                	cmp    edx,eax
ffff8000008120f2:	75 02                	jne    ffff8000008120f6 <read_tty+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
ffff8000008120f4:	eb 3d                	jmp    ffff800000812133 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
ffff8000008120f6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008120fa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008120fd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812101:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000812104:	48 98                	cdqe   
ffff800000812106:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000081210a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081210d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812110:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000812113:	48 63 d0             	movsxd rdx,eax
ffff800000812116:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081211a:	48 01 c2             	add    rdx,rax
ffff80000081211d:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000812120:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
ffff800000812122:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812126:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000812129:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081212c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812130:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000812133:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812136:	48 98                	cdqe   
ffff800000812138:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000081213c:	77 87                	ja     ffff8000008120c5 <read_tty+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
ffff80000081213e:	90                   	nop
ffff80000081213f:	5d                   	pop    rbp
ffff800000812140:	c3                   	ret    

ffff800000812141 <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000812141:	f3 0f 1e fa          	endbr64 
ffff800000812145:	55                   	push   rbp
ffff800000812146:	48 89 e5             	mov    rbp,rsp
ffff800000812149:	41 57                	push   r15
ffff80000081214b:	48 83 ec 48          	sub    rsp,0x48
ffff80000081214f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081214f <write_tty+0xe>
ffff800000812156:	49 bb a9 b9 10 00 00 	movabs r11,0x10b9a9
ffff80000081215d:	00 00 00 
ffff800000812160:	4c 01 d8             	add    rax,r11
ffff800000812163:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000812167:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000081216b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000081216f:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000812173:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000812177:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081217b:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
ffff80000081217f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
ffff800000812186:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081218a:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081218d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff800000812190:	eb 5b                	jmp    ffff8000008121ed <write_tty+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
ffff800000812192:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812196:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000812199:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081219d:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff8000008121a0:	39 d1                	cmp    ecx,edx
ffff8000008121a2:	75 0b                	jne    ffff8000008121af <write_tty+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
ffff8000008121a4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121a8:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
ffff8000008121af:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008121b2:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008121b5:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff8000008121b8:	48 63 ca             	movsxd rcx,edx
ffff8000008121bb:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008121bf:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008121c3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121c7:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008121ca:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121ce:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008121d1:	48 63 d2             	movsxd rdx,edx
ffff8000008121d4:	48 01 d1             	add    rcx,rdx
ffff8000008121d7:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff8000008121da:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
ffff8000008121dc:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121e0:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008121e3:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008121e6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121ea:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff8000008121ed:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008121f0:	48 63 d2             	movsxd rdx,edx
ffff8000008121f3:	48 39 55 b8          	cmp    QWORD PTR [rbp-0x48],rdx
ffff8000008121f7:	77 99                	ja     ffff800000812192 <write_tty+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff8000008121f9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121fd:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812200:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000812203:	48 63 d2             	movsxd rdx,edx
ffff800000812206:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000081220a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000081220e:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffff800000812212:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000812217:	49 89 c7             	mov    r15,rax
ffff80000081221a:	49 b8 91 d1 ee ff ff 	movabs r8,0xffffffffffeed191
ffff800000812221:	ff ff ff 
ffff800000812224:	49 01 c0             	add    r8,rax
ffff800000812227:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
ffff80000081222a:	90                   	nop
ffff80000081222b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000081222f:	c9                   	leave  
ffff800000812230:	c3                   	ret    

ffff800000812231 <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
ffff800000812231:	f3 0f 1e fa          	endbr64 
ffff800000812235:	55                   	push   rbp
ffff800000812236:	48 89 e5             	mov    rbp,rsp
ffff800000812239:	41 57                	push   r15
ffff80000081223b:	48 83 ec 58          	sub    rsp,0x58
ffff80000081223f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081223f <ioctl_tty+0xe>
ffff800000812246:	49 bb b9 b8 10 00 00 	movabs r11,0x10b8b9
ffff80000081224d:	00 00 00 
ffff800000812250:	4c 01 d8             	add    rax,r11
ffff800000812253:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000812257:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000081225b:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffff80000081225f:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000812263:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000812267:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081226b:	48 83 c2 30          	add    rdx,0x30
ffff80000081226f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000812273:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000812277:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081227b:	48 83 c2 18          	add    rdx,0x18
ffff80000081227f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
ffff800000812283:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
ffff80000081228a:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000081228e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000812291:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
ffff800000812295:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff800000812299:	48 83 c2 08          	add    rdx,0x8
ffff80000081229d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008122a0:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
ffff8000008122a4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008122a8:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008122ab:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
ffff8000008122ae:	c7 45 c0 ff ff ff ff 	mov    DWORD PTR [rbp-0x40],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
ffff8000008122b5:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff8000008122ba:	0f 84 b8 01 00 00    	je     ffff800000812478 <ioctl_tty+0x247>
ffff8000008122c0:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff8000008122c5:	0f 87 b8 01 00 00    	ja     ffff800000812483 <ioctl_tty+0x252>
ffff8000008122cb:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff8000008122d0:	0f 84 0f 01 00 00    	je     ffff8000008123e5 <ioctl_tty+0x1b4>
ffff8000008122d6:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff8000008122db:	0f 87 a2 01 00 00    	ja     ffff800000812483 <ioctl_tty+0x252>
ffff8000008122e1:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff8000008122e6:	74 6b                	je     ffff800000812353 <ioctl_tty+0x122>
ffff8000008122e8:	48 83 7d a8 01       	cmp    QWORD PTR [rbp-0x58],0x1
ffff8000008122ed:	0f 84 a2 00 00 00    	je     ffff800000812395 <ioctl_tty+0x164>
ffff8000008122f3:	e9 8b 01 00 00       	jmp    ffff800000812483 <ioctl_tty+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
ffff8000008122f8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008122fc:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008122ff:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812303:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000812306:	39 d1                	cmp    ecx,edx
ffff800000812308:	75 0b                	jne    ffff800000812315 <ioctl_tty+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
ffff80000081230a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081230e:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
ffff800000812315:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812318:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081231b:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff80000081231e:	48 63 ca             	movsxd rcx,edx
ffff800000812321:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000812325:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000812329:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081232d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812330:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812334:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812337:	48 63 d2             	movsxd rdx,edx
ffff80000081233a:	48 01 d1             	add    rcx,rdx
ffff80000081233d:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff800000812340:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
ffff800000812342:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812346:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812349:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081234c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812350:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
ffff800000812353:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812356:	48 63 d2             	movsxd rdx,edx
ffff800000812359:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff80000081235d:	77 99                	ja     ffff8000008122f8 <ioctl_tty+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff80000081235f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812363:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812366:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff800000812369:	48 63 d2             	movsxd rdx,edx
ffff80000081236c:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000812370:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000812374:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffff800000812378:	b9 00 00 00 00       	mov    ecx,0x0
ffff80000081237d:	49 89 c7             	mov    r15,rax
ffff800000812380:	49 b8 91 d1 ee ff ff 	movabs r8,0xffffffffffeed191
ffff800000812387:	ff ff ff 
ffff80000081238a:	49 01 c0             	add    r8,rax
ffff80000081238d:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
ffff800000812390:	e9 f7 00 00 00       	jmp    ffff80000081248c <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
ffff800000812395:	be c1 00 00 00       	mov    esi,0xc1
ffff80000081239a:	48 ba 06 dd ff ff ff 	movabs rdx,0xffffffffffffdd06
ffff8000008123a1:	ff ff ff 
ffff8000008123a4:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff8000008123a8:	48 89 d7             	mov    rdi,rdx
ffff8000008123ab:	49 89 c7             	mov    r15,rax
ffff8000008123ae:	48 ba c3 dc ee ff ff 	movabs rdx,0xffffffffffeedcc3
ffff8000008123b5:	ff ff ff 
ffff8000008123b8:	48 01 c2             	add    rdx,rax
ffff8000008123bb:	ff d2                	call   rdx
ffff8000008123bd:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
ffff8000008123c0:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff8000008123c4:	75 0c                	jne    ffff8000008123d2 <ioctl_tty+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
ffff8000008123c6:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008123cd:	e9 bf 00 00 00       	jmp    ffff800000812491 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
ffff8000008123d2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008123d6:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008123da:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff8000008123dd:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
ffff8000008123e0:	e9 a7 00 00 00       	jmp    ffff80000081248c <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
ffff8000008123e5:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008123e9:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008123ed:	8b 52 48             	mov    edx,DWORD PTR [rdx+0x48]
ffff8000008123f0:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
ffff8000008123f3:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff8000008123f7:	75 0c                	jne    ffff800000812405 <ioctl_tty+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
ffff8000008123f9:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000812400:	e9 8c 00 00 00       	jmp    ffff800000812491 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
ffff800000812405:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000812408:	89 d7                	mov    edi,edx
ffff80000081240a:	49 89 c7             	mov    r15,rax
ffff80000081240d:	48 ba 63 e3 ee ff ff 	movabs rdx,0xffffffffffeee363
ffff800000812414:	ff ff ff 
ffff800000812417:	48 01 c2             	add    rdx,rax
ffff80000081241a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
ffff80000081241c:	eb 5a                	jmp    ffff800000812478 <ioctl_tty+0x247>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
ffff80000081241e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812422:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000812425:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812429:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000081242c:	39 c2                	cmp    edx,eax
ffff80000081242e:	75 0b                	jne    ffff80000081243b <ioctl_tty+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
ffff800000812430:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812434:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
ffff80000081243b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081243e:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812441:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000812444:	48 63 d0             	movsxd rdx,eax
ffff800000812447:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081244b:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000081244f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812453:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812456:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081245a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081245d:	48 98                	cdqe   
ffff80000081245f:	48 01 c2             	add    rdx,rax
ffff800000812462:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000812465:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
ffff800000812467:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081246b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081246e:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812471:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812475:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
ffff800000812478:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081247b:	48 98                	cdqe   
ffff80000081247d:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff800000812481:	77 9b                	ja     ffff80000081241e <ioctl_tty+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
ffff800000812483:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000081248a:	eb 05                	jmp    ffff800000812491 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
ffff80000081248c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
ffff800000812491:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000812495:	c9                   	leave  
ffff800000812496:	c3                   	ret    

ffff800000812497 <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
ffff800000812497:	f3 0f 1e fa          	endbr64 
ffff80000081249b:	55                   	push   rbp
ffff80000081249c:	48 89 e5             	mov    rbp,rsp
ffff80000081249f:	41 57                	push   r15
ffff8000008124a1:	53                   	push   rbx
ffff8000008124a2:	48 83 ec 10          	sub    rsp,0x10
ffff8000008124a6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008124a6 <init_com+0xf>
ffff8000008124ad:	49 bb 52 b6 10 00 00 	movabs r11,0x10b652
ffff8000008124b4:	00 00 00 
ffff8000008124b7:	4c 01 db             	add    rbx,r11
ffff8000008124ba:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
ffff8000008124bd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008124c0:	83 c0 01             	add    eax,0x1
ffff8000008124c3:	0f b7 c0             	movzx  eax,ax
ffff8000008124c6:	be 00 00 00 00       	mov    esi,0x0
ffff8000008124cb:	89 c7                	mov    edi,eax
ffff8000008124cd:	49 89 df             	mov    r15,rbx
ffff8000008124d0:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008124d7:	ff ff ff 
ffff8000008124da:	48 01 d8             	add    rax,rbx
ffff8000008124dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
ffff8000008124df:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008124e2:	83 c0 03             	add    eax,0x3
ffff8000008124e5:	0f b7 c0             	movzx  eax,ax
ffff8000008124e8:	be 80 00 00 00       	mov    esi,0x80
ffff8000008124ed:	89 c7                	mov    edi,eax
ffff8000008124ef:	49 89 df             	mov    r15,rbx
ffff8000008124f2:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008124f9:	ff ff ff 
ffff8000008124fc:	48 01 d8             	add    rax,rbx
ffff8000008124ff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
ffff800000812501:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812504:	0f b7 c0             	movzx  eax,ax
ffff800000812507:	be 03 00 00 00       	mov    esi,0x3
ffff80000081250c:	89 c7                	mov    edi,eax
ffff80000081250e:	49 89 df             	mov    r15,rbx
ffff800000812511:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000812518:	ff ff ff 
ffff80000081251b:	48 01 d8             	add    rax,rbx
ffff80000081251e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
ffff800000812520:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812523:	83 c0 01             	add    eax,0x1
ffff800000812526:	0f b7 c0             	movzx  eax,ax
ffff800000812529:	be 00 00 00 00       	mov    esi,0x0
ffff80000081252e:	89 c7                	mov    edi,eax
ffff800000812530:	49 89 df             	mov    r15,rbx
ffff800000812533:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000081253a:	ff ff ff 
ffff80000081253d:	48 01 d8             	add    rax,rbx
ffff800000812540:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
ffff800000812542:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812545:	83 c0 03             	add    eax,0x3
ffff800000812548:	0f b7 c0             	movzx  eax,ax
ffff80000081254b:	be 03 00 00 00       	mov    esi,0x3
ffff800000812550:	89 c7                	mov    edi,eax
ffff800000812552:	49 89 df             	mov    r15,rbx
ffff800000812555:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000081255c:	ff ff ff 
ffff80000081255f:	48 01 d8             	add    rax,rbx
ffff800000812562:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
ffff800000812564:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812567:	83 c0 02             	add    eax,0x2
ffff80000081256a:	0f b7 c0             	movzx  eax,ax
ffff80000081256d:	be 87 00 00 00       	mov    esi,0x87
ffff800000812572:	89 c7                	mov    edi,eax
ffff800000812574:	49 89 df             	mov    r15,rbx
ffff800000812577:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff80000081257e:	ff ff ff 
ffff800000812581:	48 01 d8             	add    rax,rbx
ffff800000812584:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
ffff800000812586:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812589:	83 c0 04             	add    eax,0x4
ffff80000081258c:	0f b7 c0             	movzx  eax,ax
ffff80000081258f:	be 0b 00 00 00       	mov    esi,0xb
ffff800000812594:	89 c7                	mov    edi,eax
ffff800000812596:	49 89 df             	mov    r15,rbx
ffff800000812599:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008125a0:	ff ff ff 
ffff8000008125a3:	48 01 d8             	add    rax,rbx
ffff8000008125a6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
ffff8000008125a8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008125ab:	83 c0 04             	add    eax,0x4
ffff8000008125ae:	0f b7 c0             	movzx  eax,ax
ffff8000008125b1:	be 0f 00 00 00       	mov    esi,0xf
ffff8000008125b6:	89 c7                	mov    edi,eax
ffff8000008125b8:	49 89 df             	mov    r15,rbx
ffff8000008125bb:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff8000008125c2:	ff ff ff 
ffff8000008125c5:	48 01 d8             	add    rax,rbx
ffff8000008125c8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
ffff8000008125ca:	90                   	nop
ffff8000008125cb:	48 83 c4 10          	add    rsp,0x10
ffff8000008125cf:	5b                   	pop    rbx
ffff8000008125d0:	41 5f                	pop    r15
ffff8000008125d2:	5d                   	pop    rbp
ffff8000008125d3:	c3                   	ret    

ffff8000008125d4 <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
ffff8000008125d4:	f3 0f 1e fa          	endbr64 
ffff8000008125d8:	55                   	push   rbp
ffff8000008125d9:	48 89 e5             	mov    rbp,rsp
ffff8000008125dc:	41 57                	push   r15
ffff8000008125de:	53                   	push   rbx
ffff8000008125df:	48 83 ec 20          	sub    rsp,0x20
ffff8000008125e3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008125e3 <com_putchar+0xf>
ffff8000008125ea:	49 bb 15 b5 10 00 00 	movabs r11,0x10b515
ffff8000008125f1:	00 00 00 
ffff8000008125f4:	4c 01 db             	add    rbx,r11
ffff8000008125f7:	89 f8                	mov    eax,edi
ffff8000008125f9:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff8000008125fc:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
ffff800000812600:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000812603:	83 c0 05             	add    eax,0x5
ffff800000812606:	0f b6 c0             	movzx  eax,al
ffff800000812609:	89 c7                	mov    edi,eax
ffff80000081260b:	49 89 df             	mov    r15,rbx
ffff80000081260e:	48 b8 01 a3 ee ff ff 	movabs rax,0xffffffffffeea301
ffff800000812615:	ff ff ff 
ffff800000812618:	48 01 d8             	add    rax,rbx
ffff80000081261b:	ff d0                	call   rax
ffff80000081261d:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
ffff800000812620:	80 65 ef 20          	and    BYTE PTR [rbp-0x11],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
ffff800000812624:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000812628:	74 d6                	je     ffff800000812600 <com_putchar+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
ffff80000081262a:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000081262e:	0f b6 d0             	movzx  edx,al
ffff800000812631:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000812634:	0f b7 c0             	movzx  eax,ax
ffff800000812637:	89 d6                	mov    esi,edx
ffff800000812639:	89 c7                	mov    edi,eax
ffff80000081263b:	49 89 df             	mov    r15,rbx
ffff80000081263e:	48 b8 e8 a2 ee ff ff 	movabs rax,0xffffffffffeea2e8
ffff800000812645:	ff ff ff 
ffff800000812648:	48 01 d8             	add    rax,rbx
ffff80000081264b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
ffff80000081264d:	90                   	nop
ffff80000081264e:	48 83 c4 20          	add    rsp,0x20
ffff800000812652:	5b                   	pop    rbx
ffff800000812653:	41 5f                	pop    r15
ffff800000812655:	5d                   	pop    rbp
ffff800000812656:	c3                   	ret    

ffff800000812657 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
ffff800000812657:	f3 0f 1e fa          	endbr64 
ffff80000081265b:	55                   	push   rbp
ffff80000081265c:	48 89 e5             	mov    rbp,rsp
ffff80000081265f:	41 57                	push   r15
ffff800000812661:	53                   	push   rbx
ffff800000812662:	48 83 ec 10          	sub    rsp,0x10
ffff800000812666:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812666 <com_puts+0xf>
ffff80000081266d:	49 bb 92 b4 10 00 00 	movabs r11,0x10b492
ffff800000812674:	00 00 00 
ffff800000812677:	4c 01 db             	add    rbx,r11
ffff80000081267a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000081267e:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
ffff800000812681:	eb 2a                	jmp    ffff8000008126ad <com_puts+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
ffff800000812683:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812687:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081268a:	66 98                	cbw    
ffff80000081268c:	0f b7 c0             	movzx  eax,ax
ffff80000081268f:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000812692:	89 d6                	mov    esi,edx
ffff800000812694:	89 c7                	mov    edi,eax
ffff800000812696:	49 89 df             	mov    r15,rbx
ffff800000812699:	48 b8 dc 4a ef ff ff 	movabs rax,0xffffffffffef4adc
ffff8000008126a0:	ff ff ff 
ffff8000008126a3:	48 01 d8             	add    rax,rbx
ffff8000008126a6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
ffff8000008126a8:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
ffff8000008126ad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008126b1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008126b4:	84 c0                	test   al,al
ffff8000008126b6:	75 cb                	jne    ffff800000812683 <com_puts+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
ffff8000008126b8:	90                   	nop
ffff8000008126b9:	90                   	nop
ffff8000008126ba:	48 83 c4 10          	add    rsp,0x10
ffff8000008126be:	5b                   	pop    rbx
ffff8000008126bf:	41 5f                	pop    r15
ffff8000008126c1:	5d                   	pop    rbp
ffff8000008126c2:	c3                   	ret    

ffff8000008126c3 <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
ffff8000008126c3:	f3 0f 1e fa          	endbr64 
ffff8000008126c7:	55                   	push   rbp
ffff8000008126c8:	48 89 e5             	mov    rbp,rsp
ffff8000008126cb:	41 57                	push   r15
ffff8000008126cd:	53                   	push   rbx
ffff8000008126ce:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff8000008126d5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008126d5 <comprintf+0x12>
ffff8000008126dc:	49 bb 23 b4 10 00 00 	movabs r11,0x10b423
ffff8000008126e3:	00 00 00 
ffff8000008126e6:	4c 01 db             	add    rbx,r11
ffff8000008126e9:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
ffff8000008126f0:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff8000008126f7:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff8000008126fe:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000812705:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff80000081270c:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000812713:	84 c0                	test   al,al
ffff800000812715:	74 23                	je     ffff80000081273a <comprintf+0x77>
ffff800000812717:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff80000081271e:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000812722:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000812726:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff80000081272a:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff80000081272e:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000812732:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000812736:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
ffff80000081273a:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812741:	48 89 c7             	mov    rdi,rax
ffff800000812744:	49 89 df             	mov    r15,rbx
ffff800000812747:	48 b8 3d 54 ef ff ff 	movabs rax,0xffffffffffef543d
ffff80000081274e:	ff ff ff 
ffff800000812751:	48 01 d8             	add    rax,rbx
ffff800000812754:	ff d0                	call   rax
ffff800000812756:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff80000081275b:	0f 8f f6 03 00 00    	jg     ffff800000812b57 <comprintf+0x494>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
ffff800000812761:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000812768:	ff ff ff 
ffff80000081276b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081276f:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
ffff800000812776:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081277d:	ba 00 04 00 00       	mov    edx,0x400
ffff800000812782:	be 00 00 00 00       	mov    esi,0x0
ffff800000812787:	48 89 c7             	mov    rdi,rax
ffff80000081278a:	49 89 df             	mov    r15,rbx
ffff80000081278d:	48 b8 1b 51 ef ff ff 	movabs rax,0xffffffffffef511b
ffff800000812794:	ff ff ff 
ffff800000812797:	48 01 d8             	add    rax,rbx
ffff80000081279a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
ffff80000081279c:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008127a3:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
ffff8000008127aa:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008127b1:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
ffff8000008127b8:	c7 85 f0 fe ff ff 08 	mov    DWORD PTR [rbp-0x110],0x8
ffff8000008127bf:	00 00 00 
ffff8000008127c2:	c7 85 f4 fe ff ff 30 	mov    DWORD PTR [rbp-0x10c],0x30
ffff8000008127c9:	00 00 00 
ffff8000008127cc:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff8000008127d0:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffff8000008127d7:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff8000008127de:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
ffff8000008127e5:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008127ec:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff8000008127f3:	e9 2a 03 00 00       	jmp    ffff800000812b22 <comprintf+0x45f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008127f8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008127ff:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812802:	3c 25                	cmp    al,0x25
ffff800000812804:	0f 85 e5 02 00 00    	jne    ffff800000812aef <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
ffff80000081280a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812811:	48 83 c0 01          	add    rax,0x1
ffff800000812815:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812818:	84 c0                	test   al,al
ffff80000081281a:	0f 84 cf 02 00 00    	je     ffff800000812aef <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
ffff800000812820:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000812827:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000812828:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081282f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812832:	3c 78                	cmp    al,0x78
ffff800000812834:	75 70                	jne    ffff8000008128a6 <comprintf+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
ffff800000812836:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081283c:	83 f8 2f             	cmp    eax,0x2f
ffff80000081283f:	77 23                	ja     ffff800000812864 <comprintf+0x1a1>
ffff800000812841:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812848:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081284e:	89 d2                	mov    edx,edx
ffff800000812850:	48 01 d0             	add    rax,rdx
ffff800000812853:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812859:	83 c2 08             	add    edx,0x8
ffff80000081285c:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812862:	eb 12                	jmp    ffff800000812876 <comprintf+0x1b3>
ffff800000812864:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081286b:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081286f:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812876:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812878:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
ffff80000081287e:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000812884:	48 63 d0             	movsxd rdx,eax
ffff800000812887:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081288e:	48 89 d6             	mov    rsi,rdx
ffff800000812891:	48 89 c7             	mov    rdi,rax
ffff800000812894:	49 89 df             	mov    r15,rbx
ffff800000812897:	48 b8 90 58 ef ff ff 	movabs rax,0xffffffffffef5890
ffff80000081289e:	ff ff ff 
ffff8000008128a1:	48 01 d8             	add    rax,rbx
ffff8000008128a4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008128a6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008128ad:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008128b0:	3c 6c                	cmp    al,0x6c
ffff8000008128b2:	75 76                	jne    ffff80000081292a <comprintf+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                int v=va_arg(vargs,unsigned long);
ffff8000008128b4:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008128ba:	83 f8 2f             	cmp    eax,0x2f
ffff8000008128bd:	77 23                	ja     ffff8000008128e2 <comprintf+0x21f>
ffff8000008128bf:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008128c6:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008128cc:	89 d2                	mov    edx,edx
ffff8000008128ce:	48 01 d0             	add    rax,rdx
ffff8000008128d1:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008128d7:	83 c2 08             	add    edx,0x8
ffff8000008128da:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008128e0:	eb 12                	jmp    ffff8000008128f4 <comprintf+0x231>
ffff8000008128e2:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008128e9:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008128ed:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008128f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008128f7:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprint_hex(tmp,v);
ffff8000008128fd:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
ffff800000812903:	48 63 d0             	movsxd rdx,eax
ffff800000812906:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081290d:	48 89 d6             	mov    rsi,rdx
ffff800000812910:	48 89 c7             	mov    rdi,rax
ffff800000812913:	49 89 df             	mov    r15,rbx
ffff800000812916:	48 b8 90 58 ef ff ff 	movabs rax,0xffffffffffef5890
ffff80000081291d:	ff ff ff 
ffff800000812920:	48 01 d8             	add    rax,rbx
ffff800000812923:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812925:	e9 f0 01 00 00       	jmp    ffff800000812b1a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='s'){
ffff80000081292a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812931:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812934:	3c 73                	cmp    al,0x73
ffff800000812936:	75 75                	jne    ffff8000008129ad <comprintf+0x2ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
ffff800000812938:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081293e:	83 f8 2f             	cmp    eax,0x2f
ffff800000812941:	77 23                	ja     ffff800000812966 <comprintf+0x2a3>
ffff800000812943:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000081294a:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812950:	89 d2                	mov    edx,edx
ffff800000812952:	48 01 d0             	add    rax,rdx
ffff800000812955:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081295b:	83 c2 08             	add    edx,0x8
ffff80000081295e:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812964:	eb 12                	jmp    ffff800000812978 <comprintf+0x2b5>
ffff800000812966:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081296d:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812971:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812978:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081297b:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprintn(tmp,v);
ffff800000812982:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff800000812989:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812990:	48 89 d6             	mov    rsi,rdx
ffff800000812993:	48 89 c7             	mov    rdi,rax
ffff800000812996:	49 89 df             	mov    r15,rbx
ffff800000812999:	48 b8 1e 59 ef ff ff 	movabs rax,0xffffffffffef591e
ffff8000008129a0:	ff ff ff 
ffff8000008129a3:	48 01 d8             	add    rax,rbx
ffff8000008129a6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008129a8:	e9 6d 01 00 00       	jmp    ffff800000812b1a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='d'){
ffff8000008129ad:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008129b4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008129b7:	3c 64                	cmp    al,0x64
ffff8000008129b9:	75 76                	jne    ffff800000812a31 <comprintf+0x36e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char* v=va_arg(vargs,char*);
ffff8000008129bb:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008129c1:	83 f8 2f             	cmp    eax,0x2f
ffff8000008129c4:	77 23                	ja     ffff8000008129e9 <comprintf+0x326>
ffff8000008129c6:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008129cd:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008129d3:	89 d2                	mov    edx,edx
ffff8000008129d5:	48 01 d0             	add    rax,rdx
ffff8000008129d8:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008129de:	83 c2 08             	add    edx,0x8
ffff8000008129e1:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008129e7:	eb 12                	jmp    ffff8000008129fb <comprintf+0x338>
ffff8000008129e9:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008129f0:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008129f4:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008129fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008129fe:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:90
                sprint_decimal(tmp,v);
ffff800000812a05:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000812a0c:	89 c2                	mov    edx,eax
ffff800000812a0e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812a15:	89 d6                	mov    esi,edx
ffff800000812a17:	48 89 c7             	mov    rdi,rax
ffff800000812a1a:	49 89 df             	mov    r15,rbx
ffff800000812a1d:	48 b8 d5 57 ef ff ff 	movabs rax,0xffffffffffef57d5
ffff800000812a24:	ff ff ff 
ffff800000812a27:	48 01 d8             	add    rax,rbx
ffff800000812a2a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812a2c:	e9 e9 00 00 00       	jmp    ffff800000812b1a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
            }else if(*pstr=='c'){
ffff800000812a31:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812a38:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812a3b:	3c 63                	cmp    al,0x63
ffff800000812a3d:	75 02                	jne    ffff800000812a41 <comprintf+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                char v=va_arg(vargs,char);
ffff800000812a3f:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:94
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
ffff800000812a41:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812a48:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812a4b:	3c 70                	cmp    al,0x70
ffff800000812a4d:	75 73                	jne    ffff800000812ac2 <comprintf+0x3ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
                int v=va_arg(vargs,addr_t);
ffff800000812a4f:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812a55:	83 f8 2f             	cmp    eax,0x2f
ffff800000812a58:	77 23                	ja     ffff800000812a7d <comprintf+0x3ba>
ffff800000812a5a:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812a61:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812a67:	89 d2                	mov    edx,edx
ffff800000812a69:	48 01 d0             	add    rax,rdx
ffff800000812a6c:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812a72:	83 c2 08             	add    edx,0x8
ffff800000812a75:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812a7b:	eb 12                	jmp    ffff800000812a8f <comprintf+0x3cc>
ffff800000812a7d:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812a84:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812a88:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812a8f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812a92:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:96
                sprint_hex(tmp,v);
ffff800000812a98:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff800000812a9e:	48 63 d0             	movsxd rdx,eax
ffff800000812aa1:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812aa8:	48 89 d6             	mov    rsi,rdx
ffff800000812aab:	48 89 c7             	mov    rdi,rax
ffff800000812aae:	49 89 df             	mov    r15,rbx
ffff800000812ab1:	48 b8 90 58 ef ff ff 	movabs rax,0xffffffffffef5890
ffff800000812ab8:	ff ff ff 
ffff800000812abb:	48 01 d8             	add    rax,rbx
ffff800000812abe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812ac0:	eb 58                	jmp    ffff800000812b1a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
            }else{
                    sprintchar(tmp,*pstr);
ffff800000812ac2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812ac9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812acc:	0f be d0             	movsx  edx,al
ffff800000812acf:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812ad6:	89 d6                	mov    esi,edx
ffff800000812ad8:	48 89 c7             	mov    rdi,rax
ffff800000812adb:	49 89 df             	mov    r15,rbx
ffff800000812ade:	48 b8 96 57 ef ff ff 	movabs rax,0xffffffffffef5796
ffff800000812ae5:	ff ff ff 
ffff800000812ae8:	48 01 d8             	add    rax,rbx
ffff800000812aeb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812aed:	eb 2b                	jmp    ffff800000812b1a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:101
                }
        }else{
            sprintchar(tmp,*pstr);
ffff800000812aef:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812af6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812af9:	0f be d0             	movsx  edx,al
ffff800000812afc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812b03:	89 d6                	mov    esi,edx
ffff800000812b05:	48 89 c7             	mov    rdi,rax
ffff800000812b08:	49 89 df             	mov    r15,rbx
ffff800000812b0b:	48 b8 96 57 ef ff ff 	movabs rax,0xffffffffffef5796
ffff800000812b12:	ff ff ff 
ffff800000812b15:	48 01 d8             	add    rax,rbx
ffff800000812b18:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000812b1a:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000812b21:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
ffff800000812b22:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812b29:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812b2c:	84 c0                	test   al,al
ffff800000812b2e:	0f 85 c4 fc ff ff    	jne    ffff8000008127f8 <comprintf+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:105
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
ffff800000812b34:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812b3b:	be f8 03 00 00       	mov    esi,0x3f8
ffff800000812b40:	48 89 c7             	mov    rdi,rax
ffff800000812b43:	49 89 df             	mov    r15,rbx
ffff800000812b46:	48 b8 5f 4b ef ff ff 	movabs rax,0xffffffffffef4b5f
ffff800000812b4d:	ff ff ff 
ffff800000812b50:	48 01 d8             	add    rax,rbx
ffff800000812b53:	ff d0                	call   rax
ffff800000812b55:	eb 01                	jmp    ffff800000812b58 <comprintf+0x495>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
ffff800000812b57:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:106
ffff800000812b58:	48 81 c4 10 01 00 00 	add    rsp,0x110
ffff800000812b5f:	5b                   	pop    rbx
ffff800000812b60:	41 5f                	pop    r15
ffff800000812b62:	5d                   	pop    rbp
ffff800000812b63:	c3                   	ret    

ffff800000812b64 <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
ffff800000812b64:	f3 0f 1e fa          	endbr64 
ffff800000812b68:	55                   	push   rbp
ffff800000812b69:	48 89 e5             	mov    rbp,rsp
ffff800000812b6c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812b70:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000812b74:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
ffff800000812b77:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b7b:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
ffff800000812b7e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812b85:	eb 1b                	jmp    ffff800000812ba2 <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
ffff800000812b87:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b8b:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812b8e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812b92:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
ffff800000812b94:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
ffff800000812b99:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
ffff800000812b9e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
ffff800000812ba2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812ba5:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000812ba8:	77 dd                	ja     ffff800000812b87 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
ffff800000812baa:	90                   	nop
ffff800000812bab:	90                   	nop
ffff800000812bac:	5d                   	pop    rbp
ffff800000812bad:	c3                   	ret    

ffff800000812bae <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
ffff800000812bae:	f3 0f 1e fa          	endbr64 
ffff800000812bb2:	55                   	push   rbp
ffff800000812bb3:	48 89 e5             	mov    rbp,rsp
ffff800000812bb6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812bba:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000812bbe:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
ffff800000812bc1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812bc8:	eb 3a                	jmp    ffff800000812c04 <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
ffff800000812bca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812bce:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812bd1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812bd5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812bd8:	38 c2                	cmp    dl,al
ffff800000812bda:	74 1a                	je     ffff800000812bf6 <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
ffff800000812bdc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812be0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812be3:	0f b6 d0             	movzx  edx,al
ffff800000812be6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812bea:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812bed:	0f b6 c8             	movzx  ecx,al
ffff800000812bf0:	89 d0                	mov    eax,edx
ffff800000812bf2:	29 c8                	sub    eax,ecx
ffff800000812bf4:	eb 1b                	jmp    ffff800000812c11 <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
ffff800000812bf6:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
ffff800000812bfb:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
ffff800000812c00:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
ffff800000812c04:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812c07:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffff800000812c0a:	7c be                	jl     ffff800000812bca <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
ffff800000812c0c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
ffff800000812c11:	5d                   	pop    rbp
ffff800000812c12:	c3                   	ret    

ffff800000812c13 <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
ffff800000812c13:	f3 0f 1e fa          	endbr64 
ffff800000812c17:	55                   	push   rbp
ffff800000812c18:	48 89 e5             	mov    rbp,rsp
ffff800000812c1b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812c1f:	89 f0                	mov    eax,esi
ffff800000812c21:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffff800000812c24:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
ffff800000812c27:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812c2e:	eb 16                	jmp    ffff800000812c46 <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
ffff800000812c30:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812c34:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000812c38:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000812c3c:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff800000812c40:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
ffff800000812c42:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
ffff800000812c46:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812c49:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff800000812c4c:	72 e2                	jb     ffff800000812c30 <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
ffff800000812c4e:	90                   	nop
ffff800000812c4f:	90                   	nop
ffff800000812c50:	5d                   	pop    rbp
ffff800000812c51:	c3                   	ret    

ffff800000812c52 <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
ffff800000812c52:	f3 0f 1e fa          	endbr64 
ffff800000812c56:	55                   	push   rbp
ffff800000812c57:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
ffff800000812c5a:	48 b8 40 9c 41 00 00 	movabs rax,0xffff800000419c40
ffff800000812c61:	80 ff ff 
ffff800000812c64:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
ffff800000812c66:	5d                   	pop    rbp
ffff800000812c67:	c3                   	ret    

ffff800000812c68 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
ffff800000812c68:	f3 0f 1e fa          	endbr64 
ffff800000812c6c:	55                   	push   rbp
ffff800000812c6d:	48 89 e5             	mov    rbp,rsp
ffff800000812c70:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812c74:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000812c78:	eb 1d                	jmp    ffff800000812c97 <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
ffff800000812c7a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000812c7e:	48 8d 42 01          	lea    rax,[rdx+0x1]
ffff800000812c82:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff800000812c86:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812c8a:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffff800000812c8e:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffff800000812c92:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000812c95:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000812c97:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812c9b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812c9e:	84 c0                	test   al,al
ffff800000812ca0:	75 d8                	jne    ffff800000812c7a <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
ffff800000812ca2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812ca6:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
ffff800000812ca9:	90                   	nop
ffff800000812caa:	5d                   	pop    rbp
ffff800000812cab:	c3                   	ret    

ffff800000812cac <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
ffff800000812cac:	f3 0f 1e fa          	endbr64 
ffff800000812cb0:	55                   	push   rbp
ffff800000812cb1:	48 89 e5             	mov    rbp,rsp
ffff800000812cb4:	48 83 ec 30          	sub    rsp,0x30
ffff800000812cb8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000812cbc:	89 f0                	mov    eax,esi
ffff800000812cbe:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
ffff800000812cc1:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000812cc6:	0f 84 fa 00 00 00    	je     ffff800000812dc6 <strtok+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
ffff800000812ccc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812cd0:	48 89 c6             	mov    rsi,rax
ffff800000812cd3:	48 b8 60 9c 41 00 00 	movabs rax,0xffff800000419c60
ffff800000812cda:	80 ff ff 
ffff800000812cdd:	48 89 c7             	mov    rdi,rax
ffff800000812ce0:	48 b8 68 2c 81 00 00 	movabs rax,0xffff800000812c68
ffff800000812ce7:	80 ff ff 
ffff800000812cea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
ffff800000812cec:	48 b8 60 9c 41 00 00 	movabs rax,0xffff800000419c60
ffff800000812cf3:	80 ff ff 
ffff800000812cf6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
ffff800000812cfa:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812d01:	80 ff ff 
ffff800000812d04:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffff800000812d0a:	eb 2a                	jmp    ffff800000812d36 <strtok+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
ffff800000812d0c:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812d13:	80 ff ff 
ffff800000812d16:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d18:	83 c0 01             	add    eax,0x1
ffff800000812d1b:	99                   	cdq    
ffff800000812d1c:	c1 ea 17             	shr    edx,0x17
ffff800000812d1f:	01 d0                	add    eax,edx
ffff800000812d21:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812d26:	29 d0                	sub    eax,edx
ffff800000812d28:	89 c2                	mov    edx,eax
ffff800000812d2a:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812d31:	80 ff ff 
ffff800000812d34:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
ffff800000812d36:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812d3d:	80 ff ff 
ffff800000812d40:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d42:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812d49:	80 ff ff 
ffff800000812d4c:	48 98                	cdqe   
ffff800000812d4e:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812d52:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000812d55:	74 20                	je     ffff800000812d77 <strtok+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
ffff800000812d57:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812d5e:	80 ff ff 
ffff800000812d61:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d63:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812d6a:	80 ff ff 
ffff800000812d6d:	48 98                	cdqe   
ffff800000812d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812d73:	84 c0                	test   al,al
ffff800000812d75:	75 95                	jne    ffff800000812d0c <strtok+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
ffff800000812d77:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812d7e:	80 ff ff 
ffff800000812d81:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d83:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812d8a:	80 ff ff 
ffff800000812d8d:	48 98                	cdqe   
ffff800000812d8f:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
ffff800000812d93:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812d9a:	80 ff ff 
ffff800000812d9d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d9f:	83 c0 01             	add    eax,0x1
ffff800000812da2:	99                   	cdq    
ffff800000812da3:	c1 ea 17             	shr    edx,0x17
ffff800000812da6:	01 d0                	add    eax,edx
ffff800000812da8:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812dad:	29 d0                	sub    eax,edx
ffff800000812daf:	89 c2                	mov    edx,eax
ffff800000812db1:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812db8:	80 ff ff 
ffff800000812dbb:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
ffff800000812dbd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812dc1:	e9 ee 00 00 00       	jmp    ffff800000812eb4 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
ffff800000812dc6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
ffff800000812dcd:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812dd4:	80 ff ff 
ffff800000812dd7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812dd9:	48 98                	cdqe   
ffff800000812ddb:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812de2:	80 ff ff 
ffff800000812de5:	48 01 d0             	add    rax,rdx
ffff800000812de8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
ffff800000812dec:	eb 2e                	jmp    ffff800000812e1c <strtok+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
ffff800000812dee:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812df5:	80 ff ff 
ffff800000812df8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812dfa:	83 c0 01             	add    eax,0x1
ffff800000812dfd:	99                   	cdq    
ffff800000812dfe:	c1 ea 17             	shr    edx,0x17
ffff800000812e01:	01 d0                	add    eax,edx
ffff800000812e03:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812e08:	29 d0                	sub    eax,edx
ffff800000812e0a:	89 c2                	mov    edx,eax
ffff800000812e0c:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812e13:	80 ff ff 
ffff800000812e16:	89 10                	mov    DWORD PTR [rax],edx
ffff800000812e18:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
ffff800000812e1c:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812e23:	80 ff ff 
ffff800000812e26:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e28:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812e2f:	80 ff ff 
ffff800000812e32:	48 98                	cdqe   
ffff800000812e34:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812e38:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000812e3b:	74 20                	je     ffff800000812e5d <strtok+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
ffff800000812e3d:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812e44:	80 ff ff 
ffff800000812e47:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e49:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812e50:	80 ff ff 
ffff800000812e53:	48 98                	cdqe   
ffff800000812e55:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812e59:	84 c0                	test   al,al
ffff800000812e5b:	75 91                	jne    ffff800000812dee <strtok+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
ffff800000812e5d:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812e64:	80 ff ff 
ffff800000812e67:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e69:	48 ba 60 9c 41 00 00 	movabs rdx,0xffff800000419c60
ffff800000812e70:	80 ff ff 
ffff800000812e73:	48 98                	cdqe   
ffff800000812e75:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
ffff800000812e79:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812e80:	80 ff ff 
ffff800000812e83:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e85:	83 c0 01             	add    eax,0x1
ffff800000812e88:	99                   	cdq    
ffff800000812e89:	c1 ea 17             	shr    edx,0x17
ffff800000812e8c:	01 d0                	add    eax,edx
ffff800000812e8e:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812e93:	29 d0                	sub    eax,edx
ffff800000812e95:	89 c2                	mov    edx,eax
ffff800000812e97:	48 b8 60 9e 41 00 00 	movabs rax,0xffff800000419e60
ffff800000812e9e:	80 ff ff 
ffff800000812ea1:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
ffff800000812ea3:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000812ea7:	74 06                	je     ffff800000812eaf <strtok+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
ffff800000812ea9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812ead:	eb 05                	jmp    ffff800000812eb4 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
ffff800000812eaf:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
ffff800000812eb4:	c9                   	leave  
ffff800000812eb5:	c3                   	ret    

ffff800000812eb6 <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
ffff800000812eb6:	f3 0f 1e fa          	endbr64 
ffff800000812eba:	55                   	push   rbp
ffff800000812ebb:	48 89 e5             	mov    rbp,rsp
ffff800000812ebe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812ec2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000812ec6:	eb 3c                	jmp    ffff800000812f04 <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
ffff800000812ec8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812ecc:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812ecf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812ed3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812ed6:	38 c2                	cmp    dl,al
ffff800000812ed8:	7e 07                	jle    ffff800000812ee1 <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
ffff800000812eda:	b8 01 00 00 00       	mov    eax,0x1
ffff800000812edf:	eb 52                	jmp    ffff800000812f33 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
ffff800000812ee1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812ee5:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812ee8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812eec:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812eef:	38 c2                	cmp    dl,al
ffff800000812ef1:	7d 07                	jge    ffff800000812efa <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
ffff800000812ef3:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000812ef8:	eb 39                	jmp    ffff800000812f33 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
ffff800000812efa:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
ffff800000812eff:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000812f04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812f08:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f0b:	84 c0                	test   al,al
ffff800000812f0d:	74 0b                	je     ffff800000812f1a <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
ffff800000812f0f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812f13:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f16:	84 c0                	test   al,al
ffff800000812f18:	75 ae                	jne    ffff800000812ec8 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
ffff800000812f1a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812f1e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812f21:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812f25:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f28:	38 c2                	cmp    dl,al
ffff800000812f2a:	75 07                	jne    ffff800000812f33 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
ffff800000812f2c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812f31:	eb 00                	jmp    ffff800000812f33 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
ffff800000812f33:	5d                   	pop    rbp
ffff800000812f34:	c3                   	ret    

ffff800000812f35 <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
ffff800000812f35:	f3 0f 1e fa          	endbr64 
ffff800000812f39:	55                   	push   rbp
ffff800000812f3a:	48 89 e5             	mov    rbp,rsp
ffff800000812f3d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
ffff800000812f41:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
ffff800000812f48:	eb 09                	jmp    ffff800000812f53 <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
ffff800000812f4a:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffff800000812f4f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
ffff800000812f53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812f57:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f5a:	84 c0                	test   al,al
ffff800000812f5c:	75 ec                	jne    ffff800000812f4a <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
ffff800000812f5e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
ffff800000812f61:	5d                   	pop    rbp
ffff800000812f62:	c3                   	ret    

ffff800000812f63 <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
ffff800000812f63:	f3 0f 1e fa          	endbr64 
ffff800000812f67:	55                   	push   rbp
ffff800000812f68:	48 89 e5             	mov    rbp,rsp
ffff800000812f6b:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000812f72:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000812f79:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffff800000812f80:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffff800000812f87:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffff800000812f8e:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffff800000812f95:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffff800000812f9c:	84 c0                	test   al,al
ffff800000812f9e:	74 20                	je     ffff800000812fc0 <sprintf+0x5d>
ffff800000812fa0:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffff800000812fa4:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffff800000812fa8:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffff800000812fac:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffff800000812fb0:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffff800000812fb4:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffff800000812fb8:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffff800000812fbc:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
ffff800000812fc0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000812fc7:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
ffff800000812fce:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000812fd5:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
ffff800000812fdc:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff800000812fe3:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000812fe6:	eb 39                	jmp    ffff800000813021 <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
ffff800000812fe8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000812fef:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812ff2:	3c 25                	cmp    al,0x25
ffff800000812ff4:	75 15                	jne    ffff80000081300b <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
ffff800000812ff6:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000812ffd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813000:	3c 25                	cmp    al,0x25
ffff800000813002:	74 07                	je     ffff80000081300b <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
ffff800000813004:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
ffff80000081300b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813012:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
ffff800000813019:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000813020:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000813021:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813028:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081302b:	3c 0a                	cmp    al,0xa
ffff80000081302d:	75 b9                	jne    ffff800000812fe8 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
ffff80000081302f:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
ffff800000813036:	00 00 00 
ffff800000813039:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
ffff800000813040:	00 00 00 
ffff800000813043:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000813047:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000081304e:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffff800000813055:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
ffff80000081305c:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000813063:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff80000081306a:	e9 09 02 00 00       	jmp    ffff800000813278 <sprintf+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff80000081306f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813076:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813079:	3c 25                	cmp    al,0x25
ffff80000081307b:	0f 85 ca 01 00 00    	jne    ffff80000081324b <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
ffff800000813081:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813088:	48 83 c0 01          	add    rax,0x1
ffff80000081308c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081308f:	84 c0                	test   al,al
ffff800000813091:	0f 84 b4 01 00 00    	je     ffff80000081324b <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
ffff800000813097:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff80000081309e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff80000081309f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008130a6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008130a9:	3c 78                	cmp    al,0x78
ffff8000008130ab:	75 6f                	jne    ffff80000081311c <sprintf+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
ffff8000008130ad:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008130b3:	83 f8 2f             	cmp    eax,0x2f
ffff8000008130b6:	77 23                	ja     ffff8000008130db <sprintf+0x178>
ffff8000008130b8:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008130bf:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008130c5:	89 d2                	mov    edx,edx
ffff8000008130c7:	48 01 d0             	add    rax,rdx
ffff8000008130ca:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008130d0:	83 c2 08             	add    edx,0x8
ffff8000008130d3:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff8000008130d9:	eb 12                	jmp    ffff8000008130ed <sprintf+0x18a>
ffff8000008130db:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008130e2:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008130e6:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008130ed:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008130ef:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
ffff8000008130f5:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff8000008130fb:	48 63 d0             	movsxd rdx,eax
ffff8000008130fe:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813105:	48 89 d6             	mov    rsi,rdx
ffff800000813108:	48 89 c7             	mov    rdi,rax
ffff80000081310b:	48 b8 88 33 81 00 00 	movabs rax,0xffff800000813388
ffff800000813112:	80 ff ff 
ffff800000813115:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813117:	e9 54 01 00 00       	jmp    ffff800000813270 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
ffff80000081311c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813123:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813126:	3c 73                	cmp    al,0x73
ffff800000813128:	75 6f                	jne    ffff800000813199 <sprintf+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
ffff80000081312a:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000813130:	83 f8 2f             	cmp    eax,0x2f
ffff800000813133:	77 23                	ja     ffff800000813158 <sprintf+0x1f5>
ffff800000813135:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081313c:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813142:	89 d2                	mov    edx,edx
ffff800000813144:	48 01 d0             	add    rax,rdx
ffff800000813147:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081314d:	83 c2 08             	add    edx,0x8
ffff800000813150:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813156:	eb 12                	jmp    ffff80000081316a <sprintf+0x207>
ffff800000813158:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081315f:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813163:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff80000081316a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081316d:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
ffff800000813174:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff80000081317b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813182:	48 89 d6             	mov    rsi,rdx
ffff800000813185:	48 89 c7             	mov    rdi,rax
ffff800000813188:	48 b8 16 34 81 00 00 	movabs rax,0xffff800000813416
ffff80000081318f:	80 ff ff 
ffff800000813192:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813194:	e9 d7 00 00 00       	jmp    ffff800000813270 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
ffff800000813199:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008131a0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008131a3:	3c 64                	cmp    al,0x64
ffff8000008131a5:	75 6d                	jne    ffff800000813214 <sprintf+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
ffff8000008131a7:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008131ad:	83 f8 2f             	cmp    eax,0x2f
ffff8000008131b0:	77 23                	ja     ffff8000008131d5 <sprintf+0x272>
ffff8000008131b2:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008131b9:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008131bf:	89 d2                	mov    edx,edx
ffff8000008131c1:	48 01 d0             	add    rax,rdx
ffff8000008131c4:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008131ca:	83 c2 08             	add    edx,0x8
ffff8000008131cd:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff8000008131d3:	eb 12                	jmp    ffff8000008131e7 <sprintf+0x284>
ffff8000008131d5:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008131dc:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008131e0:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008131e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008131ea:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
ffff8000008131f1:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008131f8:	89 c2                	mov    edx,eax
ffff8000008131fa:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813201:	89 d6                	mov    esi,edx
ffff800000813203:	48 89 c7             	mov    rdi,rax
ffff800000813206:	48 b8 cd 32 81 00 00 	movabs rax,0xffff8000008132cd
ffff80000081320d:	80 ff ff 
ffff800000813210:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813212:	eb 5c                	jmp    ffff800000813270 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
ffff800000813214:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081321b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081321e:	3c 63                	cmp    al,0x63
ffff800000813220:	75 02                	jne    ffff800000813224 <sprintf+0x2c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
ffff800000813222:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
ffff800000813224:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081322b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081322e:	0f be d0             	movsx  edx,al
ffff800000813231:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813238:	89 d6                	mov    esi,edx
ffff80000081323a:	48 89 c7             	mov    rdi,rax
ffff80000081323d:	48 b8 8e 32 81 00 00 	movabs rax,0xffff80000081328e
ffff800000813244:	80 ff ff 
ffff800000813247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813249:	eb 25                	jmp    ffff800000813270 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
ffff80000081324b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813252:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813255:	0f be d0             	movsx  edx,al
ffff800000813258:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081325f:	89 d6                	mov    esi,edx
ffff800000813261:	48 89 c7             	mov    rdi,rax
ffff800000813264:	48 b8 8e 32 81 00 00 	movabs rax,0xffff80000081328e
ffff80000081326b:	80 ff ff 
ffff80000081326e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff800000813270:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000813277:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
ffff800000813278:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081327f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813282:	84 c0                	test   al,al
ffff800000813284:	0f 85 e5 fd ff ff    	jne    ffff80000081306f <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
ffff80000081328a:	90                   	nop
ffff80000081328b:	90                   	nop
ffff80000081328c:	c9                   	leave  
ffff80000081328d:	c3                   	ret    

ffff80000081328e <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
ffff80000081328e:	f3 0f 1e fa          	endbr64 
ffff800000813292:	55                   	push   rbp
ffff800000813293:	48 89 e5             	mov    rbp,rsp
ffff800000813296:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081329a:	89 f0                	mov    eax,esi
ffff80000081329c:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff80000081329f:	eb 05                	jmp    ffff8000008132a6 <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
ffff8000008132a1:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff8000008132a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008132aa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008132ad:	84 c0                	test   al,al
ffff8000008132af:	75 f0                	jne    ffff8000008132a1 <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
ffff8000008132b1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008132b5:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008132b9:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008132bd:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
ffff8000008132c1:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
ffff8000008132c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008132c7:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
ffff8000008132ca:	90                   	nop
ffff8000008132cb:	5d                   	pop    rbp
ffff8000008132cc:	c3                   	ret    

ffff8000008132cd <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
ffff8000008132cd:	f3 0f 1e fa          	endbr64 
ffff8000008132d1:	55                   	push   rbp
ffff8000008132d2:	48 89 e5             	mov    rbp,rsp
ffff8000008132d5:	48 83 ec 30          	sub    rsp,0x30
ffff8000008132d9:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008132dd:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
ffff8000008132e0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff8000008132e7:	eb 65                	jmp    ffff80000081334e <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
ffff8000008132e9:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008132ec:	48 63 c2             	movsxd rax,edx
ffff8000008132ef:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
ffff8000008132f6:	48 c1 e8 20          	shr    rax,0x20
ffff8000008132fa:	c1 f8 02             	sar    eax,0x2
ffff8000008132fd:	89 d6                	mov    esi,edx
ffff8000008132ff:	c1 fe 1f             	sar    esi,0x1f
ffff800000813302:	29 f0                	sub    eax,esi
ffff800000813304:	89 c1                	mov    ecx,eax
ffff800000813306:	89 c8                	mov    eax,ecx
ffff800000813308:	c1 e0 02             	shl    eax,0x2
ffff80000081330b:	01 c8                	add    eax,ecx
ffff80000081330d:	01 c0                	add    eax,eax
ffff80000081330f:	89 d1                	mov    ecx,edx
ffff800000813311:	29 c1                	sub    ecx,eax
ffff800000813313:	89 c8                	mov    eax,ecx
ffff800000813315:	83 c0 30             	add    eax,0x30
ffff800000813318:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
ffff80000081331b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081331e:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813321:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000813324:	48 98                	cdqe   
ffff800000813326:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff80000081332a:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
ffff80000081332e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000813331:	48 63 d0             	movsxd rdx,eax
ffff800000813334:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
ffff80000081333b:	48 c1 ea 20          	shr    rdx,0x20
ffff80000081333f:	c1 fa 02             	sar    edx,0x2
ffff800000813342:	c1 f8 1f             	sar    eax,0x1f
ffff800000813345:	89 c1                	mov    ecx,eax
ffff800000813347:	89 d0                	mov    eax,edx
ffff800000813349:	29 c8                	sub    eax,ecx
ffff80000081334b:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff80000081334e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813351:	83 f8 0f             	cmp    eax,0xf
ffff800000813354:	76 93                	jbe    ffff8000008132e9 <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
ffff800000813356:	eb 26                	jmp    ffff80000081337e <sprint_decimal+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
ffff800000813358:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff80000081335c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081335f:	48 98                	cdqe   
ffff800000813361:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000813366:	0f be d0             	movsx  edx,al
ffff800000813369:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081336d:	89 d6                	mov    esi,edx
ffff80000081336f:	48 89 c7             	mov    rdi,rax
ffff800000813372:	48 b8 8e 32 81 00 00 	movabs rax,0xffff80000081328e
ffff800000813379:	80 ff ff 
ffff80000081337c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
ffff80000081337e:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000813382:	7f d4                	jg     ffff800000813358 <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
ffff800000813384:	90                   	nop
ffff800000813385:	90                   	nop
ffff800000813386:	c9                   	leave  
ffff800000813387:	c3                   	ret    

ffff800000813388 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long c)
{
ffff800000813388:	f3 0f 1e fa          	endbr64 
ffff80000081338c:	55                   	push   rbp
ffff80000081338d:	48 89 e5             	mov    rbp,rsp
ffff800000813390:	48 83 ec 30          	sub    rsp,0x30
ffff800000813394:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000813398:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[22];
    int p=0;
ffff80000081339c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff8000008133a3:	eb 39                	jmp    ffff8000008133de <sprint_hex+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
ffff8000008133a5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008133a9:	83 e0 0f             	and    eax,0xf
ffff8000008133ac:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
ffff8000008133af:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
ffff8000008133b3:	76 06                	jbe    ffff8000008133bb <sprint_hex+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
ffff8000008133b5:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
ffff8000008133b9:	eb 04                	jmp    ffff8000008133bf <sprint_hex+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
ffff8000008133bb:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
ffff8000008133bf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008133c2:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008133c5:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff8000008133c8:	48 98                	cdqe   
ffff8000008133ca:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff8000008133ce:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
ffff8000008133d2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008133d6:	48 c1 e8 04          	shr    rax,0x4
ffff8000008133da:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff8000008133de:	83 7d fc 15          	cmp    DWORD PTR [rbp-0x4],0x15
ffff8000008133e2:	7e c1                	jle    ffff8000008133a5 <sprint_hex+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
ffff8000008133e4:	eb 26                	jmp    ffff80000081340c <sprint_hex+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
ffff8000008133e6:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff8000008133ea:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008133ed:	48 98                	cdqe   
ffff8000008133ef:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff8000008133f4:	0f be d0             	movsx  edx,al
ffff8000008133f7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008133fb:	89 d6                	mov    esi,edx
ffff8000008133fd:	48 89 c7             	mov    rdi,rax
ffff800000813400:	48 b8 8e 32 81 00 00 	movabs rax,0xffff80000081328e
ffff800000813407:	80 ff ff 
ffff80000081340a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
ffff80000081340c:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000813410:	7f d4                	jg     ffff8000008133e6 <sprint_hex+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
ffff800000813412:	90                   	nop
ffff800000813413:	90                   	nop
ffff800000813414:	c9                   	leave  
ffff800000813415:	c3                   	ret    

ffff800000813416 <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
ffff800000813416:	f3 0f 1e fa          	endbr64 
ffff80000081341a:	55                   	push   rbp
ffff80000081341b:	48 89 e5             	mov    rbp,rsp
ffff80000081341e:	48 83 ec 10          	sub    rsp,0x10
ffff800000813422:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813426:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff80000081342a:	eb 27                	jmp    ffff800000813453 <sprintn+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
ffff80000081342c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813430:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000813434:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000813438:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081343b:	0f be d0             	movsx  edx,al
ffff80000081343e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813442:	89 d6                	mov    esi,edx
ffff800000813444:	48 89 c7             	mov    rdi,rax
ffff800000813447:	48 b8 8e 32 81 00 00 	movabs rax,0xffff80000081328e
ffff80000081344e:	80 ff ff 
ffff800000813451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff800000813453:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813457:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081345a:	84 c0                	test   al,al
ffff80000081345c:	75 ce                	jne    ffff80000081342c <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
ffff80000081345e:	90                   	nop
ffff80000081345f:	90                   	nop
ffff800000813460:	c9                   	leave  
ffff800000813461:	c3                   	ret    
ffff800000813462:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000813469:	00 00 00 
ffff80000081346c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff800000813470 <create_zero>:
create_zero():
ffff800000813470:	e8 db 16 ff ff       	call   ffff800000804b50 <req_proc>
ffff800000813475:	83 f8 ff             	cmp    eax,0xffffffff
ffff800000813478:	74 0c                	je     ffff800000813486 <create_zero.retu>
ffff80000081347a:	e8 22 18 ff ff       	call   ffff800000804ca1 <set_proc>
ffff80000081347f:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
ffff800000813483:	83 c4 40             	add    esp,0x40

ffff800000813486 <create_zero.retu>:
create_zero.retu():
ffff800000813486:	c3                   	ret    

ffff800000813487 <switch_proc_asm>:
save_context():
ffff800000813487:	67 8b 44 24 24       	mov    eax,DWORD PTR [esp+0x24]
ffff80000081348c:	83 c0 44             	add    eax,0x44
ffff80000081348f:	b9 08 00 00 00       	mov    ecx,0x8
ffff800000813494:	89 e7                	mov    edi,esp

ffff800000813496 <save_context.loops>:
save_context.loops():
ffff800000813496:	67 8b 17             	mov    edx,DWORD PTR [edi]
ffff800000813499:	67 89 10             	mov    DWORD PTR [eax],edx
ffff80000081349c:	83 c7 04             	add    edi,0x4
ffff80000081349f:	83 e8 04             	sub    eax,0x4
ffff8000008134a2:	e2 f2                	loop   ffff800000813496 <save_context.loops>
ffff8000008134a4:	5b                   	pop    rbx
ffff8000008134a5:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff8000008134aa:	67 89 58 24          	mov    DWORD PTR [eax+0x24],ebx
ffff8000008134ae:	67 48 8b 1c 24       	mov    rbx,QWORD PTR [esp]
ffff8000008134b3:	67 89 58 20          	mov    DWORD PTR [eax+0x20],ebx
ffff8000008134b7:	c3                   	ret    

ffff8000008134b8 <desc>:
	...

ffff8000008134c0 <ret_sys_call>:
ret_sys_call():
ffff8000008134c0:	58                   	pop    rax
ffff8000008134c1:	8e d8                	mov    ds,eax
ffff8000008134c3:	58                   	pop    rax
ffff8000008134c4:	8e c0                	mov    es,eax
ffff8000008134c6:	41 5f                	pop    r15
ffff8000008134c8:	41 5e                	pop    r14
ffff8000008134ca:	41 5d                	pop    r13
ffff8000008134cc:	41 5c                	pop    r12
ffff8000008134ce:	41 5b                	pop    r11
ffff8000008134d0:	41 5a                	pop    r10
ffff8000008134d2:	41 59                	pop    r9
ffff8000008134d4:	41 58                	pop    r8
ffff8000008134d6:	5e                   	pop    rsi
ffff8000008134d7:	5f                   	pop    rdi
ffff8000008134d8:	5a                   	pop    rdx
ffff8000008134d9:	59                   	pop    rcx
ffff8000008134da:	5b                   	pop    rbx
ffff8000008134db:	58                   	pop    rax

ffff8000008134dc <tmp>:
tmp():
ffff8000008134dc:	48 0f 07             	sysretq 

ffff8000008134df <ret_normal_proc>:
ret_normal_proc():
ffff8000008134df:	58                   	pop    rax
ffff8000008134e0:	8e d8                	mov    ds,eax
ffff8000008134e2:	58                   	pop    rax
ffff8000008134e3:	8e c0                	mov    es,eax
ffff8000008134e5:	41 5f                	pop    r15
ffff8000008134e7:	41 5e                	pop    r14
ffff8000008134e9:	41 5d                	pop    r13
ffff8000008134eb:	41 5c                	pop    r12
ffff8000008134ed:	41 5b                	pop    r11
ffff8000008134ef:	41 5a                	pop    r10
ffff8000008134f1:	41 59                	pop    r9
ffff8000008134f3:	41 58                	pop    r8
ffff8000008134f5:	5e                   	pop    rsi
ffff8000008134f6:	5f                   	pop    rdi
ffff8000008134f7:	5a                   	pop    rdx
ffff8000008134f8:	59                   	pop    rcx
ffff8000008134f9:	5b                   	pop    rbx
ffff8000008134fa:	58                   	pop    rax
ffff8000008134fb:	c3                   	ret    

ffff8000008134fc <move_to_user_mode>:
move_to_user_mode():
ffff8000008134fc:	48 b9 0c 35 81 00 00 	movabs rcx,0xffff80000081350c
ffff800000813503:	80 ff ff 
ffff800000813506:	9c                   	pushf  
ffff800000813507:	41 5b                	pop    r11
ffff800000813509:	48 0f 07             	sysretq 

ffff80000081350c <move_to_user_mode.result>:
move_to_user_mode.result():
ffff80000081350c:	b8 2b 00 00 00       	mov    eax,0x2b
ffff800000813511:	8e c0                	mov    es,eax
ffff800000813513:	8e d8                	mov    ds,eax
ffff800000813515:	8e e0                	mov    fs,eax
ffff800000813517:	8e e8                	mov    gs,eax
ffff800000813519:	c3                   	ret    
